diff -urN caf/arch/arm/configs/msm8960-perf_defconfig for-diff/arch/arm/configs/msm8960-perf_defconfig
--- caf/arch/arm/configs/msm8960-perf_defconfig	2015-09-08 23:43:48.199167000 +0900
+++ for-diff/arch/arm/configs/msm8960-perf_defconfig	2015-09-13 14:02:58.493921000 +0900
@@ -282,8 +282,9 @@
 CONFIG_INPUT_JOYSTICK=y
 CONFIG_JOYSTICK_XPAD=y
 CONFIG_INPUT_TOUCHSCREEN=y
-CONFIG_TOUCHSCREEN_ATMEL_MXT=y
-CONFIG_TOUCHSCREEN_CYTTSP_I2C_QC=y
+# KTTECH
+#CONFIG_TOUCHSCREEN_ATMEL_MXT=y
+#CONFIG_TOUCHSCREEN_CYTTSP_I2C_QC=y
 CONFIG_INPUT_MISC=y
 CONFIG_INPUT_PMIC8XXX_PWRKEY=y
 CONFIG_INPUT_UINPUT=y
diff -urN caf/arch/arm/configs/msm8960_o7_es2_defconfig for-diff/arch/arm/configs/msm8960_o7_es2_defconfig
--- caf/arch/arm/configs/msm8960_o7_es2_defconfig	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/arch/arm/configs/msm8960_o7_es2_defconfig	2015-09-13 14:02:58.493921000 +0900
@@ -0,0 +1,545 @@
+# CONFIG_ARM_PATCH_PHYS_VIRT is not set
+CONFIG_EXPERIMENTAL=y
+CONFIG_LOCALVERSION="-perf"
+CONFIG_SYSVIPC=y
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+CONFIG_CGROUPS=y
+CONFIG_CGROUP_DEBUG=y
+CONFIG_CGROUP_FREEZER=y
+CONFIG_CGROUP_CPUACCT=y
+CONFIG_RESOURCE_COUNTERS=y
+CONFIG_CGROUP_SCHED=y
+CONFIG_RT_GROUP_SCHED=y
+CONFIG_NAMESPACES=y
+# CONFIG_UTS_NS is not set
+# CONFIG_IPC_NS is not set
+# CONFIG_USER_NS is not set
+# CONFIG_PID_NS is not set
+# CONFIG_NET_NS is not set
+CONFIG_BLK_DEV_INITRD=y
+CONFIG_RD_BZIP2=y
+CONFIG_RD_LZMA=y
+CONFIG_CC_OPTIMIZE_FOR_SIZE=y
+CONFIG_PANIC_TIMEOUT=5
+CONFIG_KALLSYMS_ALL=y
+CONFIG_ASHMEM=y
+CONFIG_EMBEDDED=y
+CONFIG_PROFILING=y
+CONFIG_OPROFILE=y
+CONFIG_KPROBES=y
+CONFIG_MODULES=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_MODULE_FORCE_UNLOAD=y
+CONFIG_MODVERSIONS=y
+CONFIG_PARTITION_ADVANCED=y
+CONFIG_EFI_PARTITION=y
+CONFIG_ARCH_MSM=y
+CONFIG_ARCH_MSM8960=y
+CONFIG_ARCH_MSM8930=y
+CONFIG_ARCH_APQ8064=y
+
+CONFIG_MACH_KTTECH=y
+CONFIG_KTTECH_TARGET_O7_ES2_KCONFIG=y
+# KT Tech O7 Features
+# START
+#
+
+# LCD, TOUCH
+#
+
+# BATTERY
+#
+CONFIG_KTTECH_BATTERY_GAUGE_MAXIM=y
+
+#
+# KT Tech O7 Features
+# END
+#
+
+CONFIG_MSM_KRAIT_TBB_ABORT_HANDLER=y
+CONFIG_MACH_MSM8960_SIM=y
+CONFIG_MACH_MSM8960_RUMI3=y
+CONFIG_MACH_MSM8960_CDP=y
+CONFIG_MACH_MSM8960_MTP=y
+CONFIG_MACH_MSM8960_FLUID=y
+CONFIG_MACH_MSM8960_LIQUID=y
+CONFIG_MACH_MSM8930_CDP=y
+CONFIG_MACH_MSM8930_MTP=y
+CONFIG_MACH_MSM8930_FLUID=y
+CONFIG_MACH_MSM8627_CDP=y
+CONFIG_MACH_MSM8627_MTP=y
+CONFIG_MACH_APQ8064_SIM=y
+CONFIG_MACH_APQ8064_RUMI3=y
+CONFIG_MACH_APQ8064_CDP=y
+CONFIG_MACH_APQ8064_MTP=y
+CONFIG_MACH_APQ8064_LIQUID=y
+CONFIG_MACH_MPQ8064_CDP=y
+CONFIG_MACH_MPQ8064_HRD=y
+CONFIG_MACH_MPQ8064_DTV=y
+# CONFIG_MSM_STACKED_MEMORY is not set
+CONFIG_KERNEL_PMEM_EBI_REGION=y
+# CONFIG_MSM_FIQ_SUPPORT is not set
+# CONFIG_MSM_PROC_COMM is not set
+CONFIG_MSM_SMD=y
+CONFIG_MSM_SMD_PKG4=y
+CONFIG_MSM_PCIE=y
+CONFIG_MSM_BAM_DMUX=y
+CONFIG_MSM_DSPS=y
+CONFIG_MSM_IPC_ROUTER=y
+CONFIG_MSM_IPC_ROUTER_SMD_XPRT=y
+# CONFIG_MSM_HW3D is not set
+CONFIG_MSM_PIL_QDSP6V4=y
+CONFIG_MSM_PIL_RIVA=y
+CONFIG_MSM_PIL_TZAPPS=y
+CONFIG_MSM_PIL_DSPS=y
+CONFIG_MSM_PIL_VIDC=y
+CONFIG_MSM_PIL_GSS=y
+CONFIG_MSM_SUBSYSTEM_RESTART=y
+CONFIG_MSM_MODEM_8960=y
+CONFIG_MSM_LPASS_8960=y
+CONFIG_MSM_WCNSS_SSR_8960=y
+CONFIG_MSM_GSS_SSR_8064=y
+CONFIG_MSM_TZ_LOG=y
+CONFIG_MSM_RPM_LOG=y
+CONFIG_MSM_RPM_RBCPR_STATS_LOG=y
+CONFIG_MSM_RPM_STATS_LOG=y
+CONFIG_MSM_BUS_SCALING=y
+CONFIG_MSM_BUS_RPM_MULTI_TIER_ENABLED=y
+CONFIG_MSM_WATCHDOG=y
+CONFIG_MSM_DLOAD_MODE=y
+CONFIG_MSM_QDSS=y
+CONFIG_MSM_SLEEP_STATS=y
+CONFIG_MSM_EBI_ERP=y
+CONFIG_MSM_CACHE_ERP=y
+CONFIG_MSM_L1_ERR_PANIC=y
+CONFIG_MSM_L1_ERR_LOG=y
+CONFIG_MSM_L2_ERP_2BIT_PANIC=y
+CONFIG_MSM_DCVS=y
+CONFIG_MSM_HSIC_SYSMON=y
+CONFIG_STRICT_MEMORY_RWX=y
+CONFIG_PCI=y
+CONFIG_PCI_MSI=y
+CONFIG_NO_HZ=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_SMP=y
+# CONFIG_SMP_ON_UP is not set
+CONFIG_PREEMPT=y
+CONFIG_AEABI=y
+CONFIG_HIGHMEM=y
+CONFIG_VMALLOC_RESERVE=0x19000000
+CONFIG_CC_STACKPROTECTOR=y
+CONFIG_CP_ACCESS=y
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_GOV_POWERSAVE=y
+CONFIG_CPU_FREQ_GOV_USERSPACE=y
+CONFIG_CPU_FREQ_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_INTERACTIVE=y
+CONFIG_CPU_IDLE=y
+CONFIG_VFP=y
+CONFIG_NEON=y
+# CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS is not set
+CONFIG_WAKELOCK=y
+CONFIG_PM_RUNTIME=y
+CONFIG_NET=y
+CONFIG_PACKET=y
+CONFIG_UNIX=y
+CONFIG_INET=y
+CONFIG_IP_ADVANCED_ROUTER=y
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_IP_ROUTE_VERBOSE=y
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+# CONFIG_INET_XFRM_MODE_TRANSPORT is not set
+# CONFIG_INET_XFRM_MODE_TUNNEL is not set
+# CONFIG_INET_XFRM_MODE_BEET is not set
+# CONFIG_INET_LRO is not set
+CONFIG_IPV6=y
+CONFIG_IPV6_PRIVACY=y
+CONFIG_IPV6_ROUTER_PREF=y
+CONFIG_IPV6_ROUTE_INFO=y
+CONFIG_IPV6_OPTIMISTIC_DAD=y
+CONFIG_INET6_AH=y
+CONFIG_INET6_ESP=y
+CONFIG_INET6_IPCOMP=y
+CONFIG_IPV6_MIP6=y
+CONFIG_IPV6_MULTIPLE_TABLES=y
+CONFIG_IPV6_SUBTREES=y
+CONFIG_NETFILTER=y
+CONFIG_NETFILTER_NETLINK_LOG=y
+CONFIG_NF_CONNTRACK=y
+CONFIG_NF_CONNTRACK_EVENTS=y
+CONFIG_NF_CT_PROTO_DCCP=y
+CONFIG_NF_CT_PROTO_SCTP=y
+CONFIG_NF_CT_PROTO_UDPLITE=y
+CONFIG_NF_CONNTRACK_AMANDA=y
+CONFIG_NF_CONNTRACK_FTP=y
+CONFIG_NF_CONNTRACK_H323=y
+CONFIG_NF_CONNTRACK_IRC=y
+CONFIG_NF_CONNTRACK_NETBIOS_NS=y
+CONFIG_NF_CONNTRACK_PPTP=y
+CONFIG_NF_CONNTRACK_SANE=y
+CONFIG_NF_CONNTRACK_SIP=y
+CONFIG_NF_CONNTRACK_TFTP=y
+CONFIG_NF_CT_NETLINK=y
+CONFIG_NETFILTER_TPROXY=y
+CONFIG_NETFILTER_XT_TARGET_CLASSIFY=y
+CONFIG_NETFILTER_XT_TARGET_CONNMARK=y
+CONFIG_NETFILTER_XT_TARGET_LOG=y
+CONFIG_NETFILTER_XT_TARGET_MARK=y
+CONFIG_NETFILTER_XT_TARGET_NFQUEUE=y
+CONFIG_NETFILTER_XT_MATCH_COMMENT=y
+CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_CONNMARK=y
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
+CONFIG_NETFILTER_XT_MATCH_HASHLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_HELPER=y
+CONFIG_NETFILTER_XT_MATCH_IPRANGE=y
+CONFIG_NETFILTER_XT_MATCH_LENGTH=y
+CONFIG_NETFILTER_XT_MATCH_LIMIT=y
+CONFIG_NETFILTER_XT_MATCH_MAC=y
+CONFIG_NETFILTER_XT_MATCH_MARK=y
+CONFIG_NETFILTER_XT_MATCH_MULTIPORT=y
+CONFIG_NETFILTER_XT_MATCH_POLICY=y
+CONFIG_NETFILTER_XT_MATCH_PKTTYPE=y
+CONFIG_NETFILTER_XT_MATCH_QTAGUID=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA2=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA2_LOG=y
+CONFIG_NETFILTER_XT_MATCH_SOCKET=y
+CONFIG_NETFILTER_XT_MATCH_STATE=y
+CONFIG_NETFILTER_XT_MATCH_STATISTIC=y
+CONFIG_NETFILTER_XT_MATCH_STRING=y
+CONFIG_NETFILTER_XT_MATCH_TIME=y
+CONFIG_NETFILTER_XT_MATCH_U32=y
+CONFIG_NF_CONNTRACK_IPV4=y
+CONFIG_IP_NF_IPTABLES=y
+CONFIG_IP_NF_MATCH_AH=y
+CONFIG_IP_NF_MATCH_ECN=y
+CONFIG_IP_NF_MATCH_TTL=y
+CONFIG_IP_NF_FILTER=y
+CONFIG_IP_NF_TARGET_REJECT=y
+CONFIG_NF_NAT=y
+CONFIG_IP_NF_TARGET_MASQUERADE=y
+CONFIG_IP_NF_TARGET_NETMAP=y
+CONFIG_IP_NF_TARGET_REDIRECT=y
+CONFIG_IP_NF_MANGLE=y
+CONFIG_IP_NF_ARPTABLES=y
+CONFIG_IP_NF_ARPFILTER=y
+CONFIG_IP_NF_ARP_MANGLE=y
+CONFIG_NF_CONNTRACK_IPV6=y
+CONFIG_IP6_NF_IPTABLES=y
+CONFIG_IP6_NF_FILTER=y
+CONFIG_IP6_NF_TARGET_REJECT=y
+CONFIG_IP6_NF_MANGLE=y
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_HTB=y
+CONFIG_NET_SCH_PRIO=y
+CONFIG_NET_CLS_FW=y
+CONFIG_NET_CLS_U32=y
+CONFIG_CLS_U32_MARK=y
+CONFIG_NET_CLS_FLOW=y
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_CMP=y
+CONFIG_NET_EMATCH_NBYTE=y
+CONFIG_NET_EMATCH_U32=y
+CONFIG_NET_EMATCH_META=y
+CONFIG_NET_EMATCH_TEXT=y
+CONFIG_NET_CLS_ACT=y
+CONFIG_BT=y
+CONFIG_BT_RFCOMM=y
+CONFIG_BT_RFCOMM_TTY=y
+CONFIG_BT_BNEP=y
+CONFIG_BT_BNEP_MC_FILTER=y
+CONFIG_BT_BNEP_PROTO_FILTER=y
+CONFIG_BT_HIDP=y
+CONFIG_BT_HCISMD=y
+CONFIG_CFG80211=m
+# CONFIG_CFG80211_WEXT is not set
+CONFIG_RFKILL=y
+CONFIG_GENLOCK=y
+CONFIG_GENLOCK_MISCDEVICE=y
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_BLK_DEV_RAM=y
+CONFIG_HAPTIC_ISA1200=y
+CONFIG_PMIC8XXX_VIBRATOR=y
+CONFIG_QSEECOM=y
+CONFIG_USB_HSIC_SMSC_HUB=y
+CONFIG_SCSI=y
+CONFIG_SCSI_TGT=y
+CONFIG_BLK_DEV_SD=y
+CONFIG_CHR_DEV_SG=y
+CONFIG_CHR_DEV_SCH=y
+CONFIG_SCSI_MULTI_LUN=y
+CONFIG_SCSI_CONSTANTS=y
+CONFIG_SCSI_LOGGING=y
+CONFIG_SCSI_SCAN_ASYNC=y
+CONFIG_MD=y
+CONFIG_BLK_DEV_DM=y
+CONFIG_DM_CRYPT=y
+CONFIG_NETDEVICES=y
+CONFIG_DUMMY=y
+CONFIG_TUN=y
+CONFIG_KS8851=m
+# CONFIG_MSM_RMNET is not set
+CONFIG_MSM_RMNET_BAM=y
+CONFIG_MSM_RMNET_SMUX=y
+CONFIG_SMC91X=y
+CONFIG_SMC911X=y
+CONFIG_SMSC911X=y
+CONFIG_SLIP=y
+CONFIG_SLIP_COMPRESSED=y
+CONFIG_SLIP_MODE_SLIP6=y
+CONFIG_USB_USBNET=y
+CONFIG_MSM_RMNET_USB=y
+CONFIG_WCNSS_CORE=y
+CONFIG_INPUT_EVDEV=y
+CONFIG_INPUT_EVBUG=m
+CONFIG_KEYBOARD_GPIO=y
+CONFIG_KEYBOARD_MATRIX=y
+CONFIG_KEYBOARD_PMIC8XXX=y
+CONFIG_INPUT_JOYSTICK=y
+CONFIG_JOYSTICK_XPAD=y
+CONFIG_INPUT_TOUCHSCREEN=y
+# KTTECH
+#CONFIG_TOUCHSCREEN_ATMEL_MXT=y
+#CONFIG_TOUCHSCREEN_CYTTSP_I2C_QC=y
+CONFIG_INPUT_MISC=y
+CONFIG_INPUT_PMIC8XXX_PWRKEY=y
+CONFIG_INPUT_UINPUT=y
+# CONFIG_LEGACY_PTYS is not set
+CONFIG_N_SMUX=y
+CONFIG_N_SMUX_LOOPBACK=y
+CONFIG_SMUX_CTL=y
+CONFIG_SERIAL_MSM_HS=y
+CONFIG_SERIAL_MSM_HSL=y
+CONFIG_SERIAL_MSM_HSL_CONSOLE=y
+CONFIG_DIAG_CHAR=y
+CONFIG_HW_RANDOM=y
+CONFIG_HW_RANDOM_MSM=y
+CONFIG_I2C=y
+CONFIG_I2C_CHARDEV=y
+# CONFIG_I2C_MSM is not set
+CONFIG_I2C_QUP=y
+CONFIG_SPI=y
+CONFIG_SPI_QUP=y
+CONFIG_SPI_SPIDEV=m
+CONFIG_SLIMBUS_MSM_CTRL=y
+CONFIG_DEBUG_GPIO=y
+CONFIG_GPIO_SYSFS=y
+CONFIG_GPIO_SX150X=y
+CONFIG_POWER_SUPPLY=y
+# CONFIG_BATTERY_MSM is not set
+CONFIG_ISL9519_CHARGER=y
+CONFIG_SMB349_CHARGER=y
+CONFIG_PM8921_CHARGER=y
+CONFIG_PM8921_BMS=y
+CONFIG_SENSORS_PM8XXX_ADC=y
+CONFIG_SENSORS_EPM_ADC=y
+CONFIG_THERMAL=y
+CONFIG_THERMAL_TSENS8960=y
+CONFIG_THERMAL_PM8XXX=y
+CONFIG_THERMAL_MONITOR=y
+CONFIG_MFD_PM8921_CORE=y
+CONFIG_MFD_PM8821_CORE=y
+CONFIG_MFD_PM8038_CORE=y
+CONFIG_MFD_PM8XXX_SPK=y
+CONFIG_MFD_PM8XXX_BATT_ALARM=y
+CONFIG_WCD9304_CODEC=y
+CONFIG_WCD9310_CODEC=y
+CONFIG_REGULATOR_PM8XXX=y
+CONFIG_REGULATOR_MSM_GPIO=y
+CONFIG_MEDIA_SUPPORT=y
+CONFIG_MEDIA_CONTROLLER=y
+CONFIG_VIDEO_DEV=y
+CONFIG_VIDEO_V4L2_SUBDEV_API=y
+CONFIG_USER_RC_INPUT=y
+CONFIG_IR_GPIO_CIR=y
+# CONFIG_MEDIA_TUNER_CUSTOMISE is not set
+CONFIG_VIDEOBUF2_MSM_MEM=y
+CONFIG_VIDEO_HELPER_CHIPS_AUTO=y
+CONFIG_V4L_PLATFORM_DRIVERS=y
+CONFIG_MSM_CAMERA_V4L2=y
+# KTTech CONFIG_IMX074=y
+CONFIG_MT9M114=y
+# KTTech CONFIG_IMX074_ACT=y
+# KTTech CONFIG_MSM_CAMERA_FLASH_SC628A=y
+# KTTech CONFIG_OV2720=y
+CONFIG_MSM_CAMERA_SENSOR=y
+CONFIG_MSM_ACTUATOR=y
+CONFIG_MSM_EEPROM=y
+# KTTech CONFIG_IMX074_EEPROM=y
+# KTTech CONFIG_IMX091_EEPROM=y
+CONFIG_MSM_GEMINI=y
+# KTTech CONFIG_S5K3L1YX=y
+# KTTech CONFIG_IMX091=y
+CONFIG_RADIO_IRIS=y
+CONFIG_RADIO_IRIS_TRANSPORT=m
+CONFIG_ION=y
+CONFIG_ION_MSM=y
+CONFIG_MSM_KGSL=y
+CONFIG_KGSL_PER_PROCESS_PAGE_TABLE=y
+CONFIG_MSM_KGSL_PAGE_TABLE_COUNT=24
+CONFIG_FB=y
+CONFIG_FB_VIRTUAL=y
+CONFIG_FB_MSM=y
+# CONFIG_FB_MSM_BACKLIGHT is not set
+CONFIG_FB_MSM_TRIPLE_BUFFER=y
+CONFIG_FB_MSM_MDP40=y
+CONFIG_FB_MSM_OVERLAY=y
+CONFIG_FB_MSM_NO_MDP_PIPE_CTRL=y
+CONFIG_FB_MSM_OVERLAY0_WRITEBACK=y
+# KTTech CONFIG_FB_MSM_OVERLAY1_WRITEBACK=y
+CONFIG_FB_MSM_WRITEBACK_MSM_PANEL=y
+CONFIG_FB_MSM_LVDS_MIPI_PANEL_DETECT=y
+# KTTech CONFIG_FB_MSM_HDMI_MSM_PANEL=y
+CONFIG_BACKLIGHT_LCD_SUPPORT=y
+CONFIG_BACKLIGHT_CLASS_DEVICE=y
+CONFIG_SOUND=y
+CONFIG_SND=y
+CONFIG_SND_DYNAMIC_MINORS=y
+CONFIG_SND_USB_AUDIO=y
+CONFIG_SND_SOC=y
+CONFIG_SND_SOC_MSM8960=y
+CONFIG_HID_APPLE=y
+CONFIG_HID_MAGICMOUSE=y
+CONFIG_HID_MICROSOFT=y
+CONFIG_USB_ANNOUNCE_NEW_DEVICES=y
+CONFIG_USB_SUSPEND=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_EHSET=y
+CONFIG_USB_EHCI_MSM=y
+CONFIG_USB_EHCI_MSM_HSIC=y
+CONFIG_USB_EHCI_MSM_HOST4=y
+CONFIG_USB_ACM=y
+CONFIG_USB_STORAGE=y
+CONFIG_USB_STORAGE_DEBUG=y
+CONFIG_USB_STORAGE_DATAFAB=y
+CONFIG_USB_STORAGE_FREECOM=y
+CONFIG_USB_STORAGE_ISD200=y
+CONFIG_USB_STORAGE_USBAT=y
+CONFIG_USB_STORAGE_SDDR09=y
+CONFIG_USB_STORAGE_SDDR55=y
+CONFIG_USB_STORAGE_JUMPSHOT=y
+CONFIG_USB_STORAGE_ALAUDA=y
+CONFIG_USB_STORAGE_ONETOUCH=y
+CONFIG_USB_STORAGE_KARMA=y
+CONFIG_USB_STORAGE_CYPRESS_ATACB=y
+CONFIG_USB_SERIAL=y
+CONFIG_USB_SERIAL_CSVT=y
+CONFIG_USB_EHSET_TEST_FIXTURE=y
+CONFIG_USB_QCOM_DIAG_BRIDGE=y
+CONFIG_USB_QCOM_MDM_BRIDGE=y
+CONFIG_USB_QCOM_KS_BRIDGE=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_GADGET_DEBUG_FILES=y
+CONFIG_USB_CI13XXX_MSM=y
+CONFIG_USB_G_ANDROID=y
+CONFIG_USB_ANDROID_RMNET_CTRL_SMD=y
+CONFIG_MMC=y
+CONFIG_MMC_PERF_PROFILING=y
+CONFIG_MMC_UNSAFE_RESUME=y
+CONFIG_MMC_CLKGATE=y
+CONFIG_MMC_PARANOID_SD_INIT=y
+CONFIG_MMC_BLOCK_MINORS=32
+# CONFIG_MMC_BLOCK_BOUNCE is not set
+CONFIG_MMC_TEST=m
+CONFIG_MMC_MSM=y
+CONFIG_MMC_MSM_SDC1_8_BIT_SUPPORT=y
+# CONFIG_MMC_MSM_SDC2_SUPPORT is not set
+CONFIG_MMC_MSM_SDC3_SUPPORT=y
+CONFIG_MMC_MSM_SDC3_WP_SUPPORT=y
+CONFIG_MMC_MSM_SPS_SUPPORT=y
+CONFIG_LEDS_PM8XXX=y
+CONFIG_LEDS_TRIGGERS=y
+CONFIG_LEDS_TRIGGER_HEARTBEAT=y
+CONFIG_SWITCH=y
+CONFIG_RTC_CLASS=y
+# CONFIG_RTC_DRV_MSM is not set
+CONFIG_RTC_DRV_PM8XXX=y
+CONFIG_STAGING=y
+CONFIG_ANDROID=y
+CONFIG_ANDROID_BINDER_IPC=y
+CONFIG_ANDROID_LOGGER=y
+CONFIG_ANDROID_RAM_CONSOLE=y
+CONFIG_ANDROID_TIMED_GPIO=y
+CONFIG_ANDROID_LOW_MEMORY_KILLER=y
+CONFIG_MSM_SSBI=y
+CONFIG_SPS=y
+CONFIG_SPS_SUPPORT_BAMDMA=y
+#CONFIG_MSM_IOMMU=y # KT Tech : Workaround.
+CONFIG_MOBICORE_SUPPORT=m
+CONFIG_MOBICORE_API=m
+CONFIG_EXT2_FS=y
+CONFIG_EXT2_FS_XATTR=y
+CONFIG_EXT3_FS=y
+# CONFIG_EXT3_DEFAULTS_TO_ORDERED is not set
+CONFIG_EXT4_FS=y
+CONFIG_FUSE_FS=y
+CONFIG_VFAT_FS=y
+CONFIG_TMPFS=y
+CONFIG_NFS_FS=y
+CONFIG_NFS_V3=y
+CONFIG_NFS_V3_ACL=y
+CONFIG_NFS_V4=y
+CONFIG_CIFS=y
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_ASCII=y
+CONFIG_NLS_ISO8859_1=y
+CONFIG_PRINTK_TIME=y
+CONFIG_MAGIC_SYSRQ=y
+# CONFIG_SCHED_DEBUG is not set
+CONFIG_TIMER_STATS=y
+# CONFIG_DEBUG_PREEMPT is not set
+CONFIG_DEBUG_INFO=y
+CONFIG_DEBUG_MEMORY_INIT=y
+CONFIG_ENABLE_DEFAULT_TRACERS=y
+CONFIG_DYNAMIC_DEBUG=y
+CONFIG_DEBUG_USER=y
+CONFIG_PID_IN_CONTEXTIDR=y
+CONFIG_CRYPTO_TWOFISH=y
+CONFIG_CRYPTO_DEV_QCRYPTO=m
+CONFIG_CRYPTO_DEV_QCE=m
+CONFIG_CRYPTO_DEV_QCEDEV=m
+CONFIG_CRC_CCITT=y
+
+# KTTECH
+# youngili
+# for DATA Service
+CONFIG_NET_KEY=y
+CONFIG_INET_ESP=y
+CONFIG_NETFILTER_XT_TARGET_TPROXY=y
+CONFIG_NETFILTER_XT_TARGET_TRACE=y
+CONFIG_NETFILTER_XT_MATCH_CONNBYTES=y
+CONFIG_IP_NF_TARGET_REJECT_SKERR=y
+CONFIG_IP_NF_RAW=y
+CONFIG_IP6_NF_RAW=y
+CONFIG_NF_CONNTRACK_IPV6=y
+CONFIG_IP6_NF_TARGET_LOG=y
+CONFIG_IP6_NF_TARGET_REJECT=y
+CONFIG_IP6_NF_TARGET_REJECT_SKERR=y
+CONFIG_BRIDGE=y
+CONFIG_PHONET=y
+CONFIG_NET_ACT_POLICE=y
+CONFIG_NET_ACT_GACT=y
+
+# KTTECH
+# daejang
+# for VPN Service
+CONFIG_PPP=y
+CONFIG_PPP_MPPE=y
+CONFIG_PPPOLAC=y
+CONFIG_PPPOPNS=y
+CONFIG_CRYPTO_HMAC=y
+CONFIG_CRYPTO_MD5=y
+CONFIG_CRYPTO_SHA1=y
+CONFIG_CRYPTO_DES=y
+CONFIG_CRYPTO_AES=y
+CONFIG_INET_XFRM_MODE_TRANSPORT=y
+CONFIG_INET6_XFRM_MODE_TRANSPORT=y
+CONFIG_INET_XFRM_MODE_TUNNEL=y
+
+# KTTech 
+# daejang
+# for CTS
+CONFIG_UID_STAT=y
\ No newline at end of file
diff -urN caf/arch/arm/include/asm/atomic.h for-diff/arch/arm/include/asm/atomic.h
--- caf/arch/arm/include/asm/atomic.h	2015-09-08 23:43:48.207167039 +0900
+++ for-diff/arch/arm/include/asm/atomic.h	2015-09-13 14:02:58.497921000 +0900
@@ -243,7 +243,7 @@
 
 #define ATOMIC64_INIT(i) { (i) }
 
-static inline u64 atomic64_read(atomic64_t *v)
+static inline u64 atomic64_read(const atomic64_t *v)
 {
 	u64 result;
 
diff -urN caf/arch/arm/kernel/process.c for-diff/arch/arm/kernel/process.c
--- caf/arch/arm/kernel/process.c	2015-09-08 23:43:48.219167039 +0900
+++ for-diff/arch/arm/kernel/process.c	2015-09-13 14:02:58.509921000 +0900
@@ -252,11 +252,6 @@
 		tick_nohz_idle_enter();
 		rcu_idle_enter();
 		while (!need_resched()) {
-#ifdef CONFIG_HOTPLUG_CPU
-			if (cpu_is_offline(smp_processor_id()))
-				cpu_die();
-#endif
-
 			/*
 			 * We need to disable interrupts here
 			 * to ensure we don't miss a wakeup call.
@@ -285,6 +280,11 @@
 		tick_nohz_idle_exit();
 		idle_notifier_call_chain(IDLE_END);
 		schedule_preempt_disabled();
+		// KT Tech : Negative Idle states are observed in offline CPU.
+#ifdef CONFIG_HOTPLUG_CPU
+		if (cpu_is_offline(smp_processor_id()))
+			cpu_die();
+#endif
 	}
 }
 
diff -urN caf/arch/arm/mach-msm/ImmVibeSPI.c for-diff/arch/arm/mach-msm/ImmVibeSPI.c
--- caf/arch/arm/mach-msm/ImmVibeSPI.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/arch/arm/mach-msm/ImmVibeSPI.c	2015-09-13 14:19:29.321940000 +0900
@@ -0,0 +1,436 @@
+/*
+** =========================================================================
+** File:
+**     ImmVibeSPI.c
+**
+** Description: 
+**     Device-dependent functions called by Immersion TSP API
+**     to control PWM duty cycle, amp enable/disable, save IVT file, etc...
+**
+** Portions Copyright (c) 2008-2009 Immersion Corporation. All Rights Reserved. 
+**
+** This file contains Original Code and/or Modifications of Original Code 
+** as defined in and that are subject to the GNU Public License v2 - 
+** (the 'License'). You may not use this file except in compliance with the 
+** License. You should have received a copy of the GNU General Public License 
+** along with this program; if not, write to the Free Software Foundation, Inc.,
+** 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or contact 
+** TouchSenseSales@immersion.com.
+**
+** The Original Code and all software distributed under the License are 
+** distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER 
+** EXPRESS OR IMPLIED, AND IMMERSION HEREBY DISCLAIMS ALL SUCH WARRANTIES, 
+** INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS 
+** FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. Please see 
+** the License for the specific language governing rights and limitations 
+** under the License.
+** =========================================================================
+*/
+
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/io.h> 
+#include <asm/io.h>
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <mach/vreg.h>
+#include <mach/gpio.h>
+#include <mach/clk.h>
+#include "tspdrv.h"
+// patch-1030 , remove for compile error - #include "pm.h"
+// patch-1031 , remove for compile error - #include <mach/pm.h>
+#include <mach/msm_iomap.h>
+#include <linux/regulator/consumer.h>
+
+#include <mach/msm_iomap.h>
+
+/*
+** Constants used to set PWM frequency.  Current values result in a resonant
+** frequency of 175 Hz and a signal frequency of 22.400 kHz
+**
+** OEM will need update these values of these variables to adjust
+** the frequency of the LRA PWM frequency once Immersion has completed
+** the tuning of the target device.
+*/
+
+/* Variable defined to allow for tuning of the handset. */
+
+// 현재는 지원되지 않는 lib 
+#define	VIBE_FALSE false
+#define VIBE_TRUE	true
+
+#define GPIO_LEVEL_HIGH	1
+#define GPIO_LEVEL_LOW 	0
+
+#define VIBE_DEBUG 0//1
+
+#ifdef IMMVIBESPIAPI
+#undef IMMVIBESPIAPI
+#endif
+#define IMMVIBESPIAPI static
+
+
+#define NUM_ACTUATORS 1
+
+#define GPMN_M_DEFAULT			0x10000    // M_VAL 
+#define GPMN_D_DEFAULT			0x29       // D_VAL 
+#define GPMN_MAX_D_DEFAULT			0xFF       // D_VAL 
+
+
+#define GPMN_N_DEFAULT			0x2A0000   // N_VAL 
+#define GPMN_NS_MIDD_DEFAULT	0xB00      // CLK_ROOT_ENA ~ MNCNTR_RST 
+#define GPMN_NS_MIDD_INVERT_DEFAULT	0xF00      // CLK_ROOT_ENA ~ MNCNTR_RST 
+#define GPMN_NS_MIDD_CLK_OFF_DEFAULT	0x300      // CLK_ROOT_ENA ~ MNCNTR_RST 
+#define GPMN_NS_LOW_DEFAULT		0x5D       // MNCNTR_RST  ~~ SRC_SEL 
+
+
+
+
+//#define PWM_MULTIPLIER			855         //5980
+
+#define GPMN_M_MASK				0xFF0000    //0x01FF
+#define GPMN_D_MASK				0x0000FF    // 	0x1FFF
+
+#define GP_MN_CLK_MDIV			0x0020      // 0x0032 // 0x004C
+#define GP_MN_CLK_NDIV			0x0044       // 0x0056 
+
+
+
+
+#define KTTECH_GPIO_MOTOR_GP_MN     (4)
+//#define KTTECH_GPIO_MOTOR_EN        (138)
+
+/* Variable for toggling amplifier */
+static bool g_bAmpEnabled = false;
+
+/* Variable for setting PWM in Force Out Set */
+VibeInt32 g_nForce_32 = 0;
+
+static int g_vib_state = 0; 
+
+static struct regulator *vreg_motor_3_0v;
+
+#define VIBE_TUNING /* For temporary section for Tuning Work */
+/*
+** GP_CLK set macro
+*/
+#define VIBE_TUNING /* For temporary section for Tuning Work */
+#ifdef VIBE_TUNING
+/* hard code default 175 Hz parameters here */
+VibeInt32 g_nLRA_PWM_M = GPMN_M_DEFAULT;	
+VibeInt32 g_nLRA_PWM_N = GPMN_N_DEFAULT;	
+VibeInt32 g_nLRA_PWM_D = GPMN_D_DEFAULT;  // (GPMN_N_DEFAULT >> 1);
+//VibeInt32 g_nLRA_PWM_Multiplier = PWM_MULTIPLIER;	
+
+
+VibeInt32 g_nSRC_SEL_PWM_N = 0x5;	
+VibeInt32 g_nPRE_DIV_SEL_PWM_N =0x18 ;	
+VibeInt32 g_nCLK_ROOT_ENA_PWM_N =0x800 ;	
+VibeInt32 g_nN_VAL_PWM_N =GPMN_N_DEFAULT ;	// 214 =11010110 
+
+#endif
+	
+/*
+** GP1_MN set macro
+*/
+#define MSM_WEB_BASE            0x2D00  // 0x18800000
+	
+	
+#define REG_WRITEL(value, reg)	writel(value, (MSM_CLK_CTL_BASE+MSM_WEB_BASE+reg))
+
+/*
+** This function is used to set and re-set the GP_CLK M and N counters
+** to output the desired target frequency.
+**
+*/
+static VibeStatus vibe_set_pwm_freq(void)
+{
+    // default state : GPMN_NS_MIDD_INVERT_DEFAULT
+	g_vib_state = 0;  
+	REG_WRITEL( (GPMN_M_DEFAULT | GPMN_MAX_D_DEFAULT) , GP_MN_CLK_MDIV); 
+	REG_WRITEL( (GPMN_N_DEFAULT | GPMN_NS_MIDD_INVERT_DEFAULT | GPMN_NS_LOW_DEFAULT) , GP_MN_CLK_NDIV); 
+
+    return VIBE_S_SUCCESS;
+}
+
+/*
+** Called to disable amp (disable output force)
+** OEM must review this function and verify logic level in Hardware
+*/
+IMMVIBESPIAPI VibeStatus ImmVibeSPI_ForceOut_AmpDisable(VibeUInt8 nActuatorIndex)
+{
+//#error Please review the code between the #if and #endif
+    int rc = 0;
+
+    if(VIBE_DEBUG)
+		printk(KERN_ERR "ImmVibeSPI_ForceOut_AmpDisable g_bAmpDisabled = %d \n", g_bAmpEnabled);
+
+    if (g_bAmpEnabled)
+    {
+        gpio_tlmm_config(GPIO_CFG(KTTECH_GPIO_MOTOR_GP_MN, 0, GPIO_CFG_OUTPUT, GPIO_CFG_PULL_DOWN, GPIO_CFG_2MA), GPIO_CFG_ENABLE);
+
+		// clk off --  clk_root_ena = off  ,  clk_branch_ena = off  
+		REG_WRITEL( (GPMN_N_DEFAULT | GPMN_NS_MIDD_CLK_OFF_DEFAULT | GPMN_NS_LOW_DEFAULT) , GP_MN_CLK_NDIV); 	
+		
+        gpio_set_value(KTTECH_GPIO_MOTOR_GP_MN, GPIO_LEVEL_LOW);
+//        gpio_set_value(KTTECH_GPIO_MOTOR_EN, GPIO_LEVEL_LOW);
+
+		if (regulator_is_enabled(vreg_motor_3_0v)) {
+          rc = regulator_disable(vreg_motor_3_0v);
+		  if (rc) {
+			  printk("%s: vreg_enable failed %d\n", __FUNCTION__, rc);
+			  return VIBE_E_FAIL;
+		  }
+		  regulator_put(vreg_motor_3_0v);
+		}
+
+        if(VIBE_DEBUG)
+    		printk("ImmVibeSPI_ForceOut_AmpDisable \n");
+
+        g_bAmpEnabled = false;
+        udelay(100);
+		
+    }
+
+  return VIBE_S_SUCCESS;
+}
+
+/*
+** Called to enable amp (enable output force)
+** OEM must review this function and verify logic level in Hardware
+*/
+IMMVIBESPIAPI VibeStatus ImmVibeSPI_ForceOut_AmpEnable(VibeUInt8 nActuatorIndex)
+{
+    int rc = 0;
+
+    if(VIBE_DEBUG)
+	    printk(KERN_ERR "ImmVibeSPI_ForceOut_AmpEnable g_bAmpEnabled = %d \n", g_bAmpEnabled);	
+    if (!g_bAmpEnabled)
+    {
+
+        gpio_tlmm_config(GPIO_CFG(KTTECH_GPIO_MOTOR_GP_MN, 3, GPIO_CFG_OUTPUT, GPIO_CFG_PULL_DOWN, GPIO_CFG_4MA), GPIO_CFG_ENABLE);
+
+		vreg_motor_3_0v = regulator_get(NULL, "8921_l17");
+		
+		if (IS_ERR(vreg_motor_3_0v)) {
+			printk("%s: regulator_get failed...\n", __FUNCTION__);
+			return VIBE_E_FAIL;
+		}
+  		
+		rc = regulator_set_voltage(vreg_motor_3_0v, 2400000, 2400000); 
+		if (rc) {
+			printk("%s: regulator_set_voltage... \n", __FUNCTION__);
+			return VIBE_E_FAIL;
+		}
+
+        rc = regulator_enable(vreg_motor_3_0v);
+		if (rc) {
+			printk("%s: vreg_enable failed %d\n", __FUNCTION__, rc);
+			return VIBE_E_FAIL;
+		}
+
+		udelay(100);
+
+        /* Re-Set PWM frequency */
+        vibe_set_pwm_freq(); 
+        
+        g_bAmpEnabled = true;
+
+        /* Enable amp */
+	 gpio_set_value(KTTECH_GPIO_MOTOR_GP_MN, GPIO_LEVEL_HIGH);
+	 udelay(100);
+
+        if(VIBE_DEBUG)
+		printk(KERN_INFO "ImmVibeSPI_ForceOut_AmpEnable -end\n");
+
+    }
+
+    return VIBE_S_SUCCESS;
+}
+
+void ex_VibeSPI_ForceOut_AmpEnable(void)
+{
+  printk(KERN_ERR "ex_VibeSPI_forceOut_ Amp Enable - but Not USE !!!\n");
+//  return;
+  ImmVibeSPI_ForceOut_AmpEnable(0);
+}
+EXPORT_SYMBOL(ex_VibeSPI_ForceOut_AmpEnable);
+
+void ex_VibeSPI_ForceOut_AmpDisable(void)
+{
+  printk(KERN_ERR "ex_VibeSPI_forceOut_ Amp Disable - but Not USE !!!\n");
+//  return;
+  ImmVibeSPI_ForceOut_AmpDisable(0);
+}
+EXPORT_SYMBOL(ex_VibeSPI_ForceOut_AmpDisable);
+
+/*
+** Called at initialization time to set PWM freq, disable amp, etc...
+*/
+IMMVIBESPIAPI VibeStatus ImmVibeSPI_ForceOut_Initialize(void)
+{
+//#error Please review the code between the #if and #endif
+
+	/* MOT EN setting */
+
+	gpio_tlmm_config(GPIO_CFG(KTTECH_GPIO_MOTOR_GP_MN,0, GPIO_CFG_OUTPUT, GPIO_CFG_PULL_DOWN, GPIO_CFG_4MA), GPIO_CFG_ENABLE);
+
+    if(VIBE_DEBUG)
+	    printk(KERN_ERR "ImmVibeSPI_ForceOut_Initialize.\n");
+
+
+//    MSM_CLK_BASE = ioremap(MSM_WEB_BASE, MSM_CLK_SIZE);
+
+#if 0
+    vreg_motor_3_0v = regulator_get(NULL, "8901_l1");
+ 
+    if (IS_ERR(vreg_motor_3_0v)) {
+		printk("%s: regulator_get...\n", __FUNCTION__);
+    	return VIBE_E_FAIL;
+    }
+    
+    rc = regulator_set_voltage(vreg_motor_3_0v,	3000000, 3000000);
+    if (rc) {
+    	printk("%s: regulator_set_voltage... \n", __FUNCTION__);
+    	return VIBE_E_FAIL;
+    }
+
+	mdelay(1);
+#endif
+    //g_bAmpEnabled = true;   /* to force ImmVibeSPI_ForceOut_AmpDisable disabling the amp */
+
+    /* 
+    ** Disable amp.
+    ** If multiple actuators are supported, please make sure to call ImmVibeSPI_ForceOut_AmpDisable
+    ** for each actuator (provide the actuator index as input argument).
+    */
+    //ImmVibeSPI_ForceOut_AmpDisable(0);
+
+
+    return VIBE_S_SUCCESS;
+}
+  
+/*
+** Called at termination time to set PWM freq, disable amp, etc...
+*/
+IMMVIBESPIAPI VibeStatus ImmVibeSPI_ForceOut_Terminate(void)
+{
+    if(VIBE_DEBUG)
+    DbgOut((KERN_DEBUG "ImmVibeSPI_ForceOut_Terminate.\n"));
+
+    /* 
+    ** Disable amp.
+    ** If multiple actuators are supported, please make sure to call ImmVibeSPI_ForceOut_AmpDisable
+    ** for each actuator (provide the actuator index as input argument).
+    */
+    ImmVibeSPI_ForceOut_AmpDisable(0);
+
+//	if( MSM_CLK_BASE )
+//	  iounmap( MSM_CLK_BASE ) ;
+
+    return VIBE_S_SUCCESS;
+}
+
+/*
+** Called by the real-time loop to set PWM duty cycle, and enable amp if required
+*/
+IMMVIBESPIAPI VibeStatus ImmVibeSPI_ForceOut_SetSamples(VibeUInt8 nActuatorIndex, VibeUInt16 nOutputSignalBitDepth, VibeUInt16 nBufferSizeInBytes, VibeInt8* pForceOutputBuffer)
+{
+    VibeInt8 nForce=0;
+
+    if(VIBE_DEBUG)
+		printk("nForce = %d ", nForce);
+
+    switch (nOutputSignalBitDepth)
+    {
+        case 8:
+            /* pForceOutputBuffer is expected to contain 1 byte */
+            if (nBufferSizeInBytes != 1)
+			{
+			    if(VIBE_DEBUG)
+				DbgOut((KERN_ERR "[ImmVibeSPI] ImmVibeSPI_ForceOut_SetSamples nBufferSizeInBytes =  %d \n", nBufferSizeInBytes ));
+				return VIBE_E_FAIL;
+            }
+            nForce = pForceOutputBuffer[0];
+            break;
+        case 16:
+            /* pForceOutputBuffer is expected to contain 2 byte */
+            if (nBufferSizeInBytes != 2) return VIBE_E_FAIL;
+
+            /* Map 16-bit value to 8-bit */
+            nForce = ((VibeInt16*)pForceOutputBuffer)[0] >> 8;
+            break;
+        default:
+            /* Unexpected bit depth */
+            return VIBE_E_FAIL;
+    }
+
+    if(VIBE_DEBUG)
+    	printk("ImmVibeSPI_ForceOut_Set nForce = %d ", nForce);
+
+#if 0  
+    if(nForce == 0)
+    {
+      /* Set 50% duty cycle */
+      REG_WRITEL((g_nLRA_PWM_D & GPMN_D_MASK), GP_MN_CLK_DUTY);
+    }
+    else
+    {
+      REG_WRITEL(((((g_nLRA_PWM_Multiplier * nForce) >> 8) + g_nLRA_PWM_D) & GPMN_D_MASK), GP_MN_CLK_DUTY);
+    }
+#else
+    if(nForce <= 60)
+	{
+
+		if(g_vib_state == 0) 
+		{
+			REG_WRITEL( (GPMN_N_DEFAULT | GPMN_NS_MIDD_DEFAULT | GPMN_NS_LOW_DEFAULT) , GP_MN_CLK_NDIV);		
+			g_vib_state = 1;
+		}
+		/* Set minimum % of duty cycle */		
+		if(nForce <= 0)
+			g_nForce_32 = 255;		
+ 		else
+			g_nForce_32 = 255 - (nForce*3);
+
+		if(VIBE_DEBUG)
+			printk("final  @@@@@@@=>>  = %d	 \n", g_nForce_32);
+		REG_WRITEL( (GPMN_M_DEFAULT | g_nForce_32) , GP_MN_CLK_MDIV); 
+		return VIBE_S_SUCCESS;
+				
+	}
+	else
+	{
+		/*  immersion 에서  오는  nForce 값은   O7  motor 의 경우 ... -127 ~ +127   : O6 같은  linear  motor 는  가능하지만.... O7 은  음수..==0  ~  127  */	
+		nForce = nForce - 61;
+		g_nForce_32 = nForce*4;
+
+ 		if(g_nForce_32 > 255)
+			g_nForce_32 = 255;		
+		
+		
+	}
+
+    if(VIBE_DEBUG)
+		printk("final =======>  = %d   \n", g_nForce_32);
+	if(g_vib_state == 1) 
+	{
+		REG_WRITEL( (GPMN_N_DEFAULT | GPMN_NS_MIDD_INVERT_DEFAULT | GPMN_NS_LOW_DEFAULT) , GP_MN_CLK_NDIV); 	
+		g_vib_state = 0;
+	}
+	
+	REG_WRITEL( (GPMN_M_DEFAULT | g_nForce_32) , GP_MN_CLK_MDIV); 
+
+#endif
+    return VIBE_S_SUCCESS;
+}
+
+/*
+** Called to get the device name (device name must be returned as ANSI char)
+*/
+IMMVIBESPIAPI VibeStatus ImmVibeSPI_Device_GetName(VibeUInt8 nActuatorIndex, char *szDevName, int nSize)
+{
+    return VIBE_S_SUCCESS;
+}
+
diff -urN caf/arch/arm/mach-msm/Kconfig for-diff/arch/arm/mach-msm/Kconfig
--- caf/arch/arm/mach-msm/Kconfig	2015-09-08 23:43:48.595167046 +0900
+++ for-diff/arch/arm/mach-msm/Kconfig	2015-09-13 14:02:58.609921000 +0900
@@ -320,6 +320,130 @@
 
 endmenu
 
+
+########## KT Tech Kernel Config Define ##########
+config MACH_KTTECH
+	bool "KTTECH O7 Board"
+
+########## KT Tech Kernel Config Board Define ##########
+
+config KTTECH_TARGET_O7_WS1_KCONFIG
+	bool "KTTECH O7 WS1 BOARD"
+
+config KTTECH_TARGET_O7_WS2_KCONFIG
+	bool "KTTECH O7 WS2 BOARD"
+
+config KTTECH_TARGET_O7_PT_KCONFIG
+	bool "KTTECH O7 PT BOARD"
+
+config KTTECH_TARGET_O7_ES1_KCONFIG
+	bool "KTTECH O7 ES1 BOARD"
+
+config KTTECH_TARGET_O7_ES2_KCONFIG
+	bool "KTTECH O7 ES2 BOARD"
+	select KTTECH_MIPI_LG_L4500T_VIDEO_HD
+	select KTTECH_TPS61161_BL
+	select KTTECH_TPS61161_PWM_BL
+	select KTTECH_PWM_NANO_SEC_CTRL
+	select KTTECH_TOUCH_MMS100
+	select KTTECH_SOUND
+	select KTTECH_HEADSET
+	select KTTECH_TDMB_SERVICE
+	select KTTECH_PN544_NFC	
+	select KTTECH_CAMERA
+	select KTTECH_CAMERA_S5K4E5
+	select KTTECH_CAMERA_S5K4E5_ACT
+	select KTTECH_CAMERA_MT9M114
+	select KTTECH_FLASH_PMIC
+	select KTTECH_MOTOR_MDH1_VIBETONZ
+	select KTTECH_O7_BATTERY
+	select KTTECH_BATTERY_GAUGE_MAXIM
+	
+### Sharp WXGA LCD
+config KTTECH_MIPI_SHARP_VIDEO_WXGA
+	bool
+	
+### LG HD LCD
+config KTTECH_MIPI_LG_L4500T_VIDEO_HD
+	bool
+
+### TPS61161 BL
+config KTTECH_TPS61161_BL
+	bool
+
+### TPS61161 PWM BL
+config KTTECH_TPS61161_PWM_BL
+	bool
+
+### PWM Nano Sec control for BL
+config KTTECH_PWM_NANO_SEC_CTRL
+	bool
+
+### Melfas Touch
+config KTTECH_TOUCH_MMS100
+	bool
+
+### Touch
+config KTTECH_TOUCH_QT602240
+	bool
+
+config KTTECH_TOUCH_PMIC_GPIO
+	bool
+
+### SOUND (YDA165)
+config KTTECH_SOUND
+	bool
+	
+config KTTECH_SOUND_AMP
+	bool
+
+config KTTECH_SOUND_YDA165
+	depends on (KTTECH_SOUND_AMP)
+	default y
+	bool "KT Tech YDA165 Sound Amp"
+	help
+	  If you use a KT Tech YDA165 Sound Amp, say Y. Otherwise, say N.
+
+config KTTECH_HEADSET
+	bool
+	
+config KTTECH_TDMB_SERVICE
+	bool
+
+config KTTECH_PN544_NFC
+	bool
+
+config KTTECH_MOTOR_MDH1_VIBETONZ
+	bool
+
+	
+### Camera
+config KTTECH_CAMERA
+	bool
+
+config KTTECH_CAMERA_S5K4E5
+	bool
+
+config KTTECH_CAMERA_S5K4E5_ACT
+	bool
+	
+config KTTECH_CAMERA_MT9M114
+	bool
+
+config KTTECH_FLASH_KTD267
+	bool
+
+config KTTECH_FLASH_PMIC
+	bool
+	
+config KTTECH_O7_BATTERY
+	bool
+
+config KTTECH_BATTERY_GAUGE_MAXIM
+	bool
+
+########## KT Tech Kernel Config End  ##########
+
 choice
 	prompt "MSM SoC Revision"
 	default MSM_SOC_REV_NONE
diff -urN caf/arch/arm/mach-msm/Makefile for-diff/arch/arm/mach-msm/Makefile
--- caf/arch/arm/mach-msm/Makefile	2015-09-08 23:43:48.595167046 +0900
+++ for-diff/arch/arm/mach-msm/Makefile	2015-09-13 14:02:58.609921000 +0900
@@ -340,6 +340,9 @@
 ifdef CONFIG_VCM
 obj-$(CONFIG_ARCH_MSM8X60) += board-msm8x60-vcm.o
 endif
+
+obj-$(CONFIG_KTTECH_MOTOR_MDH1_VIBETONZ) += tspdrv.o
+
 obj-$(CONFIG_MSM_OCMEM) += ocmem.o ocmem_allocator.o ocmem_notifier.o
 obj-$(CONFIG_MSM_OCMEM) += ocmem_sched.o ocmem_api.o
 
diff -urN caf/arch/arm/mach-msm/VibeOSKernelLinuxHRTime.c for-diff/arch/arm/mach-msm/VibeOSKernelLinuxHRTime.c
--- caf/arch/arm/mach-msm/VibeOSKernelLinuxHRTime.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/arch/arm/mach-msm/VibeOSKernelLinuxHRTime.c	2015-09-13 14:02:58.609921000 +0900
@@ -0,0 +1,238 @@
+/*
+** =========================================================================
+** File:
+**     VibeOSKernelLinuxHRTime.c
+**
+** Description: 
+**     High Resolution Time helper functions for Linux.
+**
+** Portions Copyright (c) 2010 Immersion Corporation. All Rights Reserved. 
+**
+** This file contains Original Code and/or Modifications of Original Code 
+** as defined in and that are subject to the GNU Public License v2 - 
+** (the 'License'). You may not use this file except in compliance with the 
+** License. You should have received a copy of the GNU General Public License 
+** along with this program; if not, write to the Free Software Foundation, Inc.,
+** 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or contact 
+** TouchSenseSales@immersion.com.
+**
+** The Original Code and all software distributed under the License are 
+** distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER 
+** EXPRESS OR IMPLIED, AND IMMERSION HEREBY DISCLAIMS ALL SUCH WARRANTIES, 
+** INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS 
+** FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. Please see 
+** the License for the specific language governing rights and limitations 
+** under the License.
+** =========================================================================
+*/
+
+/* 
+** Kernel high-resolution software timer is used as an example but another type 
+** of timer (such as HW timer or standard software timer) might be used to achieve 
+** the 5ms required rate.
+*/
+
+#ifndef CONFIG_HIGH_RES_TIMERS
+#warning "The Kernel does not have high resolution timers enabled. Either provide a non hr-timer implementation of VibeOSKernelLinuxTime.c or re-compile your kernel with CONFIG_HIGH_RES_TIMERS=y"
+#endif
+
+#include <linux/hrtimer.h>
+#include <linux/mutex.h>
+
+#define WATCHDOG_TIMEOUT    10  /* 10 timer cycles = 50ms */
+
+/* For compatibility with older Kernels */
+#ifndef DEFINE_SEMAPHORE
+#define DEFINE_SEMAPHORE(name) \
+    struct semaphore name = __SEMAPHORE_INITIALIZER(name, 1)
+#endif
+
+/* Global variables */
+static bool g_bTimerStarted = false;
+static struct hrtimer g_tspTimer;
+static ktime_t g_ktFiveMs;
+static int g_nWatchdogCounter = 0;
+
+DEFINE_SEMAPHORE(g_hMutex);
+
+/* Forward declarations */
+static void VibeOSKernelLinuxStartTimer(void);
+static void VibeOSKernelLinuxStopTimer(void);
+static int VibeOSKernelProcessData(void* data);
+#define VIBEOSKERNELPROCESSDATA
+
+static inline int VibeSemIsLocked(struct semaphore *lock)
+{
+#if ((LINUX_VERSION_CODE & 0xFFFFFF) < KERNEL_VERSION(2,6,27))
+    return atomic_read(&lock->count) != 1;
+#else
+    return (lock->count) != 1;
+#endif
+}
+
+static enum hrtimer_restart tsp_timer_interrupt(struct hrtimer *timer)
+{
+    /* Scheduling next timeout value right away */
+    hrtimer_forward_now(timer, g_ktFiveMs);
+
+    if(g_bTimerStarted)
+    {
+        if (VibeSemIsLocked(&g_hMutex)) up(&g_hMutex);
+    }
+
+    return HRTIMER_RESTART;
+}
+
+static int VibeOSKernelProcessData(void* data)
+{
+    int i;
+    int nActuatorNotPlaying = 0;
+
+    for (i = 0; i < NUM_ACTUATORS; i++) 
+    {
+        actuator_samples_buffer *pCurrentActuatorSample = &(g_SamplesBuffer[i]);
+
+        if (-1 == pCurrentActuatorSample->nIndexPlayingBuffer)
+        {
+            nActuatorNotPlaying++;
+            if ((NUM_ACTUATORS == nActuatorNotPlaying) && ((++g_nWatchdogCounter) > WATCHDOG_TIMEOUT))
+            {
+                VibeInt8 cZero[1] = {0};
+
+                /* Nothing to play for all actuators, turn off the timer when we reach the watchdog tick count limit */
+                ImmVibeSPI_ForceOut_SetSamples(i, 8, 1, cZero);
+                ImmVibeSPI_ForceOut_AmpDisable(i);
+                VibeOSKernelLinuxStopTimer();
+
+                /* Reset watchdog counter */
+                g_nWatchdogCounter = 0;
+            }
+        }
+        else
+        {
+            /* Play the current buffer */
+            if (VIBE_E_FAIL == ImmVibeSPI_ForceOut_SetSamples(
+                pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].nActuatorIndex, 
+                pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].nBitDepth, 
+                pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].nBufferSize,
+                pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].dataBuffer))
+            {
+                /* VIBE_E_FAIL means NAK has been handled. Schedule timer to restart 5 ms from now */
+                hrtimer_forward_now(&g_tspTimer, g_ktFiveMs);
+            }
+
+            pCurrentActuatorSample->nIndexOutputValue += pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].nBufferSize;
+
+            if (pCurrentActuatorSample->nIndexOutputValue >= pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].nBufferSize)
+            {
+                /* Reach the end of the current buffer */
+                pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].nBufferSize = 0;
+
+                /* Switch buffer */
+                (pCurrentActuatorSample->nIndexPlayingBuffer) ^= 1;
+                pCurrentActuatorSample->nIndexOutputValue = 0;
+
+                /* Finished playing, disable amp for actuator (i) */
+                if (g_bStopRequested)
+                {
+                    pCurrentActuatorSample->nIndexPlayingBuffer = -1; 
+
+                    ImmVibeSPI_ForceOut_AmpDisable(i);
+                }
+            }
+        }
+    }
+
+    /* If finished playing, stop timer */
+    if (g_bStopRequested)
+    {
+        VibeOSKernelLinuxStopTimer();
+
+        /* Reset watchdog counter */
+        g_nWatchdogCounter = 0;
+
+        if (VibeSemIsLocked(&g_hMutex)) up(&g_hMutex);
+        return 1;   /* tell the caller this is the last iteration */
+    }
+
+    return 0;
+}
+
+static void VibeOSKernelLinuxInitTimer(void)
+{
+    /* Get a 5,000,000ns = 5ms time value */
+    g_ktFiveMs = ktime_set(0, 5000000);
+
+    hrtimer_init(&g_tspTimer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+
+    /* Initialize a 5ms-timer with tsp_timer_interrupt as timer callback (interrupt driven)*/
+    g_tspTimer.function = tsp_timer_interrupt;
+}
+
+static void VibeOSKernelLinuxStartTimer(void)
+{
+    int i;
+    int res;
+
+    /* Reset watchdog counter */
+    g_nWatchdogCounter = 0;
+
+    if (!g_bTimerStarted)
+    {
+        if (!VibeSemIsLocked(&g_hMutex)) res = down_interruptible(&g_hMutex); /* start locked */
+
+        g_bTimerStarted = true;
+
+        /* Start the timer */
+        hrtimer_start(&g_tspTimer, g_ktFiveMs, HRTIMER_MODE_REL);
+
+        /* Don't block the write() function after the first sample to allow the host sending the next samples with no delay */
+        for (i = 0; i < NUM_ACTUATORS; i++)
+        {
+            if ((g_SamplesBuffer[i].actuatorSamples[0].nBufferSize) || (g_SamplesBuffer[i].actuatorSamples[1].nBufferSize))
+            {
+                g_SamplesBuffer[i].nIndexOutputValue = 0;
+                return;
+            }
+        }
+    }
+
+    if (0 != VibeOSKernelProcessData(NULL)) return;
+
+    /* 
+    ** Use interruptible version of down to be safe 
+    ** (try to not being stuck here if the mutex is not freed for any reason)
+    */
+    res = down_interruptible(&g_hMutex);  /* wait for the mutex to be freed by the timer */
+    if (res != 0)
+    {
+        DbgOut((KERN_INFO "VibeOSKernelLinuxStartTimer: down_interruptible interrupted by a signal.\n"));
+    }
+}
+
+static void VibeOSKernelLinuxStopTimer(void)
+{
+    int i;
+
+    if (g_bTimerStarted)
+    {
+        g_bTimerStarted = false;
+        hrtimer_cancel(&g_tspTimer);
+    }
+
+    /* Reset samples buffers */
+    for (i = 0; i < NUM_ACTUATORS; i++)
+    {
+        g_SamplesBuffer[i].nIndexPlayingBuffer = -1;
+        g_SamplesBuffer[i].actuatorSamples[0].nBufferSize = 0;
+        g_SamplesBuffer[i].actuatorSamples[1].nBufferSize = 0;
+    }
+    g_bStopRequested = false;
+    g_bIsPlaying = false;
+} 
+
+static void VibeOSKernelLinuxTerminateTimer(void)
+{
+    VibeOSKernelLinuxStopTimer();
+    if (VibeSemIsLocked(&g_hMutex)) up(&g_hMutex);
+}
diff -urN caf/arch/arm/mach-msm/VibeOSKernelLinuxTime.c for-diff/arch/arm/mach-msm/VibeOSKernelLinuxTime.c
--- caf/arch/arm/mach-msm/VibeOSKernelLinuxTime.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/arch/arm/mach-msm/VibeOSKernelLinuxTime.c	2015-09-13 14:02:58.609921000 +0900
@@ -0,0 +1,242 @@
+/*
+** =========================================================================
+** File:
+**     VibeOSKernelLinuxTime.c
+**
+** Description: 
+**     Time helper functions for Linux.
+**
+** Portions Copyright (c) 2008-2010 Immersion Corporation. All Rights Reserved. 
+**
+** This file contains Original Code and/or Modifications of Original Code 
+** as defined in and that are subject to the GNU Public License v2 - 
+** (the 'License'). You may not use this file except in compliance with the 
+** License. You should have received a copy of the GNU General Public License 
+** along with this program; if not, write to the Free Software Foundation, Inc.,
+** 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or contact 
+** TouchSenseSales@immersion.com.
+**
+** The Original Code and all software distributed under the License are 
+** distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER 
+** EXPRESS OR IMPLIED, AND IMMERSION HEREBY DISCLAIMS ALL SUCH WARRANTIES, 
+** INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS 
+** FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. Please see 
+** the License for the specific language governing rights and limitations 
+** under the License.
+** =========================================================================
+*/
+
+#error "Please read the following statement"
+/* 
+** Kernel standard software timer is used as an example but another type 
+** of timer (such as HW timer or high-resolution software timer) might be used
+** to achieve the 5ms required rate.
+*/
+#error "End of statement"
+
+#if (HZ != 1000)
+#error The Kernel timer is not configured at 1ms. Please update TIMER_INCR to generate a proper 5ms timer.
+#endif
+
+#include <linux/mutex.h>
+
+#define TIMER_INCR                      5       /* run timer at 5 jiffies (== 5ms) */
+#define WATCHDOG_TIMEOUT                10      /* 10 timer cycles = 50ms */
+
+
+/* For compatibility with older Kernels */
+#ifndef DEFINE_SEMAPHORE
+#define DEFINE_SEMAPHORE(name) \
+    struct semaphore name = __SEMAPHORE_INITIALIZER(name, 1)
+#endif
+
+/* Global variables */
+static bool g_bTimerStarted = false;
+static struct timer_list g_timerList;
+static int g_nWatchdogCounter = 0;
+
+DEFINE_SEMAPHORE(g_hMutex);
+
+/* Forward declarations */
+static void VibeOSKernelLinuxStartTimer(void);
+static void VibeOSKernelLinuxStopTimer(void);
+static int VibeOSKernelProcessData(void* data);
+#define VIBEOSKERNELPROCESSDATA
+
+static inline int VibeSemIsLocked(struct semaphore *lock)
+{
+#if ((LINUX_VERSION_CODE & 0xFFFFFF) < KERNEL_VERSION(2,6,27))
+    return atomic_read(&lock->count) != 1;
+#else
+    return (lock->count) != 1;
+#endif
+}
+
+static void tsp_timer_interrupt(unsigned long param)
+{
+    /* Scheduling next timeout value right away */
+    mod_timer(&g_timerList, jiffies + TIMER_INCR);
+
+    if(g_bTimerStarted)
+    {
+        if (VibeSemIsLocked(&g_hMutex)) up(&g_hMutex);
+    }
+}
+
+static int VibeOSKernelProcessData(void* data)
+{
+    int i;
+    int nActuatorNotPlaying = 0;
+
+    for (i = 0; i < NUM_ACTUATORS; i++) 
+    {
+        actuator_samples_buffer *pCurrentActuatorSample = &(g_SamplesBuffer[i]);
+
+        if (-1 == pCurrentActuatorSample->nIndexPlayingBuffer)
+        {
+            nActuatorNotPlaying++;
+            if ((NUM_ACTUATORS == nActuatorNotPlaying) && ((++g_nWatchdogCounter) > WATCHDOG_TIMEOUT))
+            {
+                VibeInt8 cZero[1] = {0};
+
+                /* Nothing to play for all actuators, turn off the timer when we reach the watchdog tick count limit */
+                ImmVibeSPI_ForceOut_SetSamples(i, 8, 1, cZero);
+                ImmVibeSPI_ForceOut_AmpDisable(i);
+                VibeOSKernelLinuxStopTimer();
+
+                /* Reset watchdog counter */
+                g_nWatchdogCounter = 0;
+            }
+        }
+        else
+        {
+            /* Play the current buffer */
+            if (VIBE_E_FAIL == ImmVibeSPI_ForceOut_SetSamples(
+                pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].nActuatorIndex, 
+                pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].nBitDepth, 
+                pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].nBufferSize,
+                pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].dataBuffer))
+            {
+                /* VIBE_E_FAIL means NAK has been handled. Schedule timer to restart 5 ms from now */
+                mod_timer(&g_timerList, jiffies + TIMER_INCR);
+            }
+
+            pCurrentActuatorSample->nIndexOutputValue += pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].nBufferSize;
+
+            if (pCurrentActuatorSample->nIndexOutputValue >= pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].nBufferSize)
+            {
+                /* Reach the end of the current buffer */
+                pCurrentActuatorSample->actuatorSamples[(int)pCurrentActuatorSample->nIndexPlayingBuffer].nBufferSize = 0;
+
+                /* Switch buffer */
+                (pCurrentActuatorSample->nIndexPlayingBuffer) ^= 1;
+                pCurrentActuatorSample->nIndexOutputValue = 0;
+
+                /* Finished playing, disable amp for actuator (i) */
+                if (g_bStopRequested)
+                {
+                    pCurrentActuatorSample->nIndexPlayingBuffer = -1; 
+
+                    ImmVibeSPI_ForceOut_AmpDisable(i);
+                }
+            }
+        }
+    }
+
+    /* If finished playing, stop timer */
+    if (g_bStopRequested)
+    {
+        VibeOSKernelLinuxStopTimer();
+
+        /* Reset watchdog counter */
+        g_nWatchdogCounter = 0;
+
+        if (VibeSemIsLocked(&g_hMutex)) up(&g_hMutex);
+        return 1;   /* tell the caller this is the last iteration */
+    }
+
+    return 0;
+}
+
+static void VibeOSKernelLinuxInitTimer(void)
+{
+    /* Initialize a 5ms-timer with VibeOSKernelTimerProc as timer callback */
+    init_timer(&g_timerList);
+    g_timerList.function = tsp_timer_interrupt;
+}
+
+static void VibeOSKernelLinuxStartTimer(void)
+{
+    int i;
+    int res;
+
+    /* Reset watchdog counter */
+    g_nWatchdogCounter = 0;
+
+    if (!g_bTimerStarted)
+    {
+        if (!VibeSemIsLocked(&g_hMutex)) res = down_interruptible(&g_hMutex); /* start locked */
+
+        g_bTimerStarted = true;
+
+        /* Start the timer */
+        g_timerList.expires = jiffies + TIMER_INCR;
+        add_timer(&g_timerList);
+
+        /* Don't block the write() function after the first sample to allow the host sending the next samples with no delay */
+        for (i = 0; i < NUM_ACTUATORS; i++)
+        {
+            if ((g_SamplesBuffer[i].actuatorSamples[0].nBufferSize) || (g_SamplesBuffer[i].actuatorSamples[1].nBufferSize))
+            {
+                g_SamplesBuffer[i].nIndexOutputValue = 0;
+                return;
+            }
+        }
+    }
+
+    if (0 != VibeOSKernelProcessData(NULL)) return;
+
+    /* 
+    ** Use interruptible version of down to be safe 
+    ** (try to not being stuck here if the mutex is not freed for any reason)
+    */
+    res = down_interruptible(&g_hMutex);  /* wait for the mutex to be freed by the timer */
+    if (res != 0)
+    {
+        DbgOut((KERN_INFO "VibeOSKernelLinuxStartTimer: down_interruptible interrupted by a signal.\n"));
+    }
+}
+
+static void VibeOSKernelLinuxStopTimer(void)
+{
+    int i;
+
+    if (g_bTimerStarted)
+    {
+        g_bTimerStarted = false;
+
+        /* 
+        ** Stop the timer.
+        ** Use del_timer vs. del_timer_sync 
+        ** del_timer_sync may cause a Kernel "soft lockup" on multi-CPU platforms 
+        ** as VibeOSKernelLinuxStopTimer is called from the timer tick handler.
+        */
+        del_timer(&g_timerList);
+    }
+
+    /* Reset samples buffers */
+    for (i = 0; i < NUM_ACTUATORS; i++)
+    {
+        g_SamplesBuffer[i].nIndexPlayingBuffer = -1;
+        g_SamplesBuffer[i].actuatorSamples[0].nBufferSize = 0;
+        g_SamplesBuffer[i].actuatorSamples[1].nBufferSize = 0;
+    }
+    g_bStopRequested = false;
+    g_bIsPlaying = false;
+} 
+
+static void VibeOSKernelLinuxTerminateTimer(void)
+{
+    VibeOSKernelLinuxStopTimer();
+    if (VibeSemIsLocked(&g_hMutex)) up(&g_hMutex);
+}
diff -urN caf/arch/arm/mach-msm/board-8930-display.c for-diff/arch/arm/mach-msm/board-8930-display.c
--- caf/arch/arm/mach-msm/board-8930-display.c	2015-09-08 23:43:48.599167046 +0900
+++ for-diff/arch/arm/mach-msm/board-8930-display.c	2015-09-13 14:02:58.613921000 +0900
@@ -529,7 +529,7 @@
 };
 #endif
 
-#ifdef CONFIG_MSM_BUS_SCALING
+#if defined(CONFIG_MSM_BUS_SCALING) && defined(CONFIG_FB_MSM_DTV)
 static struct msm_bus_vectors dtv_bus_init_vectors[] = {
 	{
 		.src = MSM_BUS_MASTER_MDP_PORT0,
@@ -784,7 +784,7 @@
 
 	msm_fb_register_device("mdp", &mdp_pdata);
 	msm_fb_register_device("mipi_dsi", &mipi_dsi_pdata);
-#ifdef CONFIG_MSM_BUS_SCALING
+#if defined(CONFIG_MSM_BUS_SCALING) && defined(CONFIG_FB_MSM_DTV)
 	msm_fb_register_device("dtv", &dtv_pdata);
 #endif
 }
diff -urN caf/arch/arm/mach-msm/board-8930.c for-diff/arch/arm/mach-msm/board-8930.c
--- caf/arch/arm/mach-msm/board-8930.c	2015-09-08 23:43:48.599167046 +0900
+++ for-diff/arch/arm/mach-msm/board-8930.c	2015-09-13 14:02:58.613921000 +0900
@@ -1397,9 +1397,11 @@
 #endif
 }
 
+#if !defined(CONFIG_KTTECH_BATTERY_GAUGE_MAXIM)
 static struct msm_spi_platform_data msm8960_qup_spi_gsbi1_pdata = {
 	.max_clock_speed = 15060000,
 };
+#endif
 
 #ifdef CONFIG_USB_MSM_OTG_72K
 static struct msm_otg_platform_data msm_otg_pdata;
@@ -2039,7 +2041,7 @@
 	.src_clk_rate = 24000000,
 };
 
-
+#ifndef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
 static struct ks8851_pdata spi_eth_pdata = {
 	.irq_gpio = KS8851_IRQ_GPIO,
 	.rst_gpio = KS8851_RST_GPIO,
@@ -2063,6 +2065,7 @@
 		.mode                   = SPI_MODE_0,
 	},
 };
+#endif
 
 static struct platform_device msm_device_saw_core0 = {
 	.name	= "saw-regulator",
@@ -2182,7 +2185,11 @@
 	&msm_8960_riva,
 	&msm_pil_tzapps,
 	&msm_pil_vidc,
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	&msm8960_device_qup_i2c_gsbi1,
+#else
 	&msm8960_device_qup_spi_gsbi1,
+#endif
 	&msm8960_device_qup_i2c_gsbi3,
 	&msm8960_device_qup_i2c_gsbi4,
 	&msm8960_device_qup_i2c_gsbi9,
@@ -2556,9 +2563,12 @@
 	android_usb_pdata.swfi_latency =
 			msm_rpmrs_levels[0].latency_us;
 	msm8930_init_gpiomux();
+
+#if !defined(CONFIG_KTTECH_BATTERY_GAUGE_MAXIM)
 	msm8960_device_qup_spi_gsbi1.dev.platform_data =
 				&msm8960_qup_spi_gsbi1_pdata;
 	spi_register_board_info(spi_board_info, ARRAY_SIZE(spi_board_info));
+#endif
 
 	/*
 	 * TODO: When physical 8930/PM8038 hardware becomes
diff -urN caf/arch/arm/mach-msm/board-8960-camera.c for-diff/arch/arm/mach-msm/board-8960-camera.c
--- caf/arch/arm/mach-msm/board-8960-camera.c	2015-09-08 23:43:48.599167046 +0900
+++ for-diff/arch/arm/mach-msm/board-8960-camera.c	2015-09-13 14:02:58.613921000 +0900
@@ -18,7 +18,19 @@
 #include <mach/gpiomux.h>
 #include "devices.h"
 #include "board-8960.h"
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* bring up camera */
+#ifdef CONFIG_MACH_KTTECH
+#include <linux/board_kttech.h>
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* implement camera flash led by PMIC */
+#ifdef CONFIG_KTTECH_FLASH_PMIC
+#include <linux/leds-pm8xxx.h>
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 #ifdef CONFIG_MSM_CAMERA
 
 #if (defined(CONFIG_GPIO_SX150X) || defined(CONFIG_GPIO_SX150X_MODULE)) && \
@@ -195,10 +207,18 @@
 
 #ifdef CONFIG_MSM_CAMERA_FLASH
 static struct msm_camera_sensor_flash_src msm_flash_src = {
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* implement camera flash led by PMIC */
+#ifdef CONFIG_KTTECH_FLASH_PMIC
+	.flash_sr_type = MSM_CAMERA_FLASH_SRC_PMIC,
+	._fsrc.pmic_src.pmic_set_current_kb_light = pm8xxx_led_kp_set,
+#elif defined(CONFIG_KTTECH_FLASH_KTD267)
 	.flash_sr_type = MSM_CAMERA_FLASH_SRC_EXT,
 	._fsrc.ext_driver_src.led_en = VFE_CAMIF_TIMER1_GPIO,
 	._fsrc.ext_driver_src.led_flash_en = VFE_CAMIF_TIMER2_GPIO,
 	._fsrc.ext_driver_src.flash_id = MAM_CAMERA_EXT_LED_FLASH_SC628A,
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 };
 #endif
 
@@ -421,11 +441,13 @@
 	{"cam_vaf", REG_LDO, 2800000, 2800000, 300000},
 };
 
+#ifndef CONFIG_MACH_KTTECH
 static struct camera_vreg_t msm_8960_front_cam_vreg[] = {
 	{"cam_vio", REG_VS, 0, 0, 0},
 	{"cam_vana", REG_LDO, 2800000, 2850000, 85600},
 	{"cam_vdig", REG_LDO, 1200000, 1200000, 105000},
 };
+#endif
 
 static struct gpio msm8960_common_cam_gpio[] = {
 	{5, GPIOF_DIR_IN, "CAMIF_MCLK"},
@@ -473,6 +495,8 @@
 	.cam_gpio_set_tbl_size = ARRAY_SIZE(msm8960_back_cam_gpio_set_tbl),
 };
 
+
+#ifndef CONFIG_MACH_KTTECH
 static struct i2c_board_info msm_act_main_cam_i2c_info = {
 	I2C_BOARD_INFO("msm_actuator", 0x11),
 };
@@ -484,6 +508,7 @@
 	.vcm_pwd        = 0,
 	.vcm_enable     = 0,
 };
+#endif
 
 static struct i2c_board_info msm_act_main_cam1_i2c_info = {
 	I2C_BOARD_INFO("msm_actuator", 0x18),
@@ -497,6 +522,8 @@
 	.vcm_enable     = 0,
 };
 
+#ifndef CONFIG_MACH_KTTECH
+
 static struct msm_camera_sensor_flash_data flash_imx074 = {
 	.flash_type	= MSM_CAMERA_FLASH_LED,
 #ifdef CONFIG_MSM_CAMERA_FLASH
@@ -538,6 +565,7 @@
 	.actuator_info = &msm_act_main_cam_0_info,
 	.eeprom_info = &imx074_eeprom_info,
 };
+#endif //__ifndef kttech
 
 static struct camera_vreg_t msm_8960_mt9m114_vreg[] = {
 	{"cam_vio", REG_VS, 0, 0, 0},
@@ -556,7 +584,14 @@
 };
 
 static struct msm_camera_sensor_platform_info sensor_board_info_mt9m114 = {
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_ROTATION */
+#if 1
+	.mount_angle = 270,
+#else
 	.mount_angle = 90,
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	.cam_vreg = msm_8960_mt9m114_vreg,
 	.num_vreg = ARRAY_SIZE(msm_8960_mt9m114_vreg),
 	.gpio_conf = &msm_8960_front_cam_gpio_conf,
@@ -573,6 +608,113 @@
 	.sensor_type = YUV_SENSOR,
 };
 
+/* Begin - jaemoon.hwang@kttech.co.kr */
+#if 0 //def CONFIG_KTTECH_CAMERA_S5K4E5_ACT
+static struct i2c_board_info s5k4e5_actuator_i2c_info = {
+	I2C_BOARD_INFO("s5k4e5_act", 0x18 >> 1),
+};
+
+static struct msm_actuator_info s5k4e5_actuator_info = {
+	.board_info     = &s5k4e5_actuator_i2c_info,
+	.bus_id         = MSM_8960_GSBI4_QUP_I2C_BUS_ID,
+	.vcm_pwd        = 0,
+	.vcm_enable     = 1,
+};
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* bring up camera */
+#ifdef CONFIG_KTTECH_CAMERA_S5K4E5
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+#if 1
+/* Begin - 1031 patch new work : s5k4e5 */
+static struct msm_camera_sensor_flash_data flash_s5k4e5 = {
+	.flash_type	= MSM_CAMERA_FLASH_LED,
+#ifdef CONFIG_MSM_CAMERA_FLASH
+	.flash_src	= &msm_flash_src
+#endif
+};
+
+static struct msm_camera_csi_lane_params s5k4e5_csi_lane_params = {
+	.csi_lane_assign = 0xE4,
+	.csi_lane_mask = 0xF,
+};
+
+
+static struct msm_camera_sensor_platform_info sensor_board_info_s5k4e5 = {
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_ROTATION */
+#if 1
+	.mount_angle	= 0, 
+#else
+	.mount_angle	= 90,
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+	.cam_vreg = msm_8960_back_cam_vreg,
+	.num_vreg = ARRAY_SIZE(msm_8960_back_cam_vreg),
+	.gpio_conf = &msm_8960_back_cam_gpio_conf,
+	.csi_lane_params = &s5k4e5_csi_lane_params,
+};
+
+static struct msm_camera_sensor_info msm_camera_sensor_s5k4e5_data = {
+	.sensor_name	= "s5k4e5",
+	.pdata	= &msm_camera_csi_device_data[0],
+	.flash_data	= &flash_s5k4e5,
+	.strobe_flash_data = &strobe_flash_xenon,
+	.sensor_platform_info = &sensor_board_info_s5k4e5,
+	.csi_if	= 1,
+	.camera_type = BACK_CAMERA_2D,
+   .sensor_type = BAYER_SENSOR,
+#if 0 //def CONFIG_KTTECH_CAMERA_S5K4E5_ACT
+//#if defined(CONFIG_S5K4E5_ACT) && !defined(CONFIG_KTTECH_CAMERA)
+	.actuator_info = &s5k4e5_actuator_info
+#endif
+  	.actuator_info = &msm_act_main_cam_1_info,
+};
+/* End - 1031 patch new work : s5k4e5 */
+#else	/* This code is not used in 1031 patch any more */
+static struct msm_camera_sensor_flash_data flash_s5k4e5 = {
+	.flash_type	= MSM_CAMERA_FLASH_LED,
+#ifdef CONFIG_MSM_CAMERA_FLASH
+	.flash_src	= &msm_flash_src
+#endif
+};
+
+static struct msm_camera_sensor_platform_info sensor_board_info_s5k4e5 = {
+	.mount_angle	= 0,				// 0, 180: for landscape 90,270: for portrait
+	.sensor_reset	= CAM1_RST_N,		// GPIO pin number for reset
+	//.sensor_pwd	= 0,				// GPIO pin number for power on/off
+	//.vcm_pwd	= 0,					// GPIO pin number for AF actuator on/off
+	//.vcm_enable	= 0,				// 0: To disable, 1: enable actuator
+};
+
+static struct msm_camera_sensor_info msm_camera_sensor_s5k4e5_data = {
+	.sensor_name	= "s5k4e5",
+	.pdata	= &msm_camera_csi_device_data[0],
+	.flash_data	= &flash_s5k4e5,
+	.strobe_flash_data = &strobe_flash_xenon,
+	.sensor_platform_info = &sensor_board_info_s5k4e5,
+	//.gpio_conf = &gpio_conf,
+	.csi_if	= 1,
+	.camera_type = BACK_CAMERA_2D,
+};
+
+#if 0	//not used in 102350 patch
+static struct platform_device msm8960_camera_sensor_s5k4e5 = {
+	.name	= "msm_camera_s5k4e5",
+	.dev	= {
+		.platform_data = &msm_camera_sensor_s5k4e5_data,
+	},
+};
+#endif
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+#endif //#ifdef CONFIG_KTTECH_CAMERA_S5K4E5
+
+
+#ifndef CONFIG_MACH_KTTECH
 static struct msm_camera_sensor_flash_data flash_ov2720 = {
 	.flash_type	= MSM_CAMERA_FLASH_NONE,
 };
@@ -690,7 +832,9 @@
 	.actuator_info = &msm_act_main_cam_1_info,
 	.eeprom_info = &imx091_eeprom_info,
 };
+#endif //__ifndef kttech
 
+#ifndef CONFIG_KTTECH_CAMERA
 static struct pm8xxx_mpp_config_data privacy_light_on_config = {
 	.type		= PM8XXX_MPP_TYPE_SINK,
 	.level		= PM8XXX_MPP_CS_OUT_5MA,
@@ -715,6 +859,7 @@
 	}
 	return rc;
 }
+#endif
 
 static struct platform_device msm_camera_server = {
 	.name = "msm_cam_server",
@@ -742,17 +887,31 @@
 
 	if (machine_is_msm8960_liquid()) {
 		struct msm_camera_sensor_info *s_info;
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* bring up camera */
+#ifdef CONFIG_KTTECH_CAMERA
+		#ifdef CONFIG_KTTECH_CAMERA_S5K4E5
+		s_info = &msm_camera_sensor_s5k4e5_data;
+	#endif
+	#ifdef CONFIG_KTTECH_CAMERA_MT9M114
+		s_info = &msm_camera_sensor_mt9m114_data;
+	#endif
+	    #else
 		s_info = &msm_camera_sensor_imx074_data;
 		s_info->sensor_platform_info->mount_angle = 180;
 		s_info = &msm_camera_sensor_ov2720_data;
 		s_info->sensor_platform_info->ext_power_ctrl =
 			msm_camera_8960_ext_power_ctrl;
+		#endif
+/* End - jaemoon.hwang@kttech.co.kr */		
 	}
 
+  #ifndef CONFIG_MACH_KTTECH
 	if (machine_is_msm8960_fluid()) {
 		msm_camera_sensor_imx091_data.sensor_platform_info->
 			mount_angle = 270;
 	}
+	#endif
 
 	platform_device_register(&msm_camera_server);
 	platform_device_register(&msm8960_device_csiphy0);
@@ -768,6 +927,7 @@
 
 #ifdef CONFIG_I2C
 static struct i2c_board_info msm8960_camera_i2c_boardinfo[] = {
+  #ifndef CONFIG_MACH_KTTECH
 	{
 	I2C_BOARD_INFO("imx074", 0x1A),
 	.platform_data = &msm_camera_sensor_imx074_data,
@@ -776,10 +936,28 @@
 	I2C_BOARD_INFO("ov2720", 0x6C),
 	.platform_data = &msm_camera_sensor_ov2720_data,
 	},
+	#endif
 	{
 	I2C_BOARD_INFO("mt9m114", 0x48),
 	.platform_data = &msm_camera_sensor_mt9m114_data,
 	},
+	#ifdef CONFIG_KTTECH_CAMERA_S5K4E5
+	{
+	//I2C_BOARD_INFO("s5k4e5", 0x20 >> 1),
+	I2C_BOARD_INFO("s5k4e5", 0x20),
+	.platform_data = &msm_camera_sensor_s5k4e5_data,
+	},
+  /* Begin - jaemoon.hwang@kttech.co.kr */
+  /* CONFIG_CAMERA_CALIBRATION_EEPROM */
+  #if 1
+  	{
+  	I2C_BOARD_INFO("s5k4e5_eeprom", 0xA0 >> 1),
+  	},
+  #endif
+  /* End - jaemoon.hwang@kttech.co.kr */
+  #endif
+
+  #ifndef CONFIG_MACH_KTTECH
 	{
 	I2C_BOARD_INFO("s5k3l1yx", 0x20),
 	.platform_data = &msm_camera_sensor_s5k3l1yx_data,
@@ -793,6 +971,7 @@
 	I2C_BOARD_INFO("imx091", 0x34),
 	.platform_data = &msm_camera_sensor_imx091_data,
 	},
+	#endif
 };
 
 struct msm_camera_board_info msm8960_camera_board_info = {
diff -urN caf/arch/arm/mach-msm/board-8960-display.c for-diff/arch/arm/mach-msm/board-8960-display.c
--- caf/arch/arm/mach-msm/board-8960-display.c	2015-09-08 23:43:48.599167046 +0900
+++ for-diff/arch/arm/mach-msm/board-8960-display.c	2015-09-13 14:02:58.613921000 +0900
@@ -28,30 +28,69 @@
 #include "devices.h"
 #include "board-8960.h"
 
+#ifdef CONFIG_MACH_KTTECH
+#include <linux/io.h>
+#endif
+
+#ifdef CONFIG_MACH_KTTECH
+/***************************************************************************************************
+ IMPORTANT!!!!!!!!
+ If you try to change MSM_RAM_CONSOLE_BASE or MSM_RESTART_MAGIC_ADDR, 
+ you must change MSM_RAM_CONSOLE_BASE and MSM_RESTART_MAGIC_ADDR definition on lk bootloader
+ (\AndroidSrc\bootable\bootloader\lk\platform\msm8960\include\platform\iomap.h)
+***************************************************************************************************/
+#define MSM_RAM_CONSOLE_BASE    (0x88D00000) 
+#define MSM_RAM_CONSOLE_SIZE	(255 * SZ_4K) //256 -> 255
+#define MSM_RESTART_MAGIC_ADDR  (MSM_RAM_CONSOLE_BASE + MSM_RAM_CONSOLE_SIZE)
+#endif
+
+
 #ifdef CONFIG_FB_MSM_TRIPLE_BUFFER
+#ifdef CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD
+#define MSM_FB_PRIM_BUF_SIZE \
+		(roundup((roundup(1280, 32) * roundup(736, 32) * 4), 4096) * 3)
+			/* 4 bpp x 3 pages */
+#else
 #define MSM_FB_PRIM_BUF_SIZE \
 		(roundup((roundup(1920, 32) * roundup(1200, 32) * 4), 4096) * 3)
 			/* 4 bpp x 3 pages */
+#endif
+#else  /* CONFIG_FB_MSM_TRIPLE_BUFFER */
+#ifdef CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD
+#define MSM_FB_PRIM_BUF_SIZE \
+		(roundup((roundup(1280, 32) * roundup(736, 32) * 4), 4096) * 2)
+			/* 4 bpp x 2 pages */
 #else
 #define MSM_FB_PRIM_BUF_SIZE \
 		(roundup((roundup(1920, 32) * roundup(1200, 32) * 4), 4096) * 2)
 			/* 4 bpp x 2 pages */
 #endif
+#endif /* CONFIG_FB_MSM_TRIPLE_BUFFER */
 
 /* Note: must be multiple of 4096 */
 #define MSM_FB_SIZE roundup(MSM_FB_PRIM_BUF_SIZE, 4096)
 
 #ifdef CONFIG_FB_MSM_OVERLAY0_WRITEBACK
+#ifdef CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD
 #define MSM_FB_OVERLAY0_WRITEBACK_SIZE \
-		roundup((roundup(1920, 32) * roundup(1200, 32) * 3 * 2), 4096)
+		roundup((roundup(1280, 32) * roundup(736, 32) * 3 * 2), 4096)
 #else
+#define MSM_FB_OVERLAY0_WRITEBACK_SIZE \
+		roundup((roundup(1920, 32) * roundup(1200, 32) * 3 * 2), 4096)
+#endif
+#else   /* CONFIG_FB_MSM_OVERLAY0_WRITEBACK */
 #define MSM_FB_OVERLAY0_WRITEBACK_SIZE (0)
 #endif  /* CONFIG_FB_MSM_OVERLAY0_WRITEBACK */
 
 #ifdef CONFIG_FB_MSM_OVERLAY1_WRITEBACK
+#ifdef CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD
 #define MSM_FB_OVERLAY1_WRITEBACK_SIZE \
-		roundup((roundup(1920, 32) * roundup(1080, 32) * 3 * 2), 4096)
+		roundup((roundup(1280, 32) * roundup(736, 32) * 3 * 2), 4096)
 #else
+#define MSM_FB_OVERLAY1_WRITEBACK_SIZE \
+		roundup((roundup(1920, 32) * roundup(1080, 32) * 3 * 2), 4096)
+#endif
+#else   /* CONFIG_FB_MSM_OVERLAY1_WRITEBACK */
 #define MSM_FB_OVERLAY1_WRITEBACK_SIZE (0)
 #endif  /* CONFIG_FB_MSM_OVERLAY1_WRITEBACK */
 
@@ -67,6 +106,9 @@
 #define MIPI_CMD_RENESAS_FWVGA_PANEL_NAME	"mipi_cmd_renesas_fwvga"
 #define MIPI_VIDEO_ORISE_720P_PANEL_NAME	"mipi_video_orise_720p"
 #define MIPI_CMD_ORISE_720P_PANEL_NAME		"mipi_cmd_orise_720p"
+#ifdef CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD
+#define MIPI_LG_L4500T_HD_PANEL_NAME "mipi_video_lg_l4500t_hd"
+#endif
 #define HDMI_PANEL_NAME	"hdmi_msm"
 #define TVOUT_PANEL_NAME	"tvout_msm"
 
@@ -112,6 +154,16 @@
 					PANEL_NAME_MAX_LEN)))
 			return 0;
 
+#ifdef CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD
+		if (!strncmp(name, MIPI_LG_L4500T_HD_PANEL_NAME,
+				strnlen(MIPI_LG_L4500T_HD_PANEL_NAME,
+						PANEL_NAME_MAX_LEN)))
+		{
+		  printk(KERN_DEBUG "### lg panel detect............\n");
+		  return 0;
+		}
+#endif
+
 #if !defined(CONFIG_FB_MSM_LVDS_MIPI_PANEL_DETECT) && \
 	!defined(CONFIG_FB_MSM_MIPI_PANEL_DETECT)
 		if (!strncmp(name, MIPI_VIDEO_NOVATEK_QHD_PANEL_NAME,
@@ -153,6 +205,7 @@
 #endif
 	}
 
+#ifndef CONFIG_MACH_KTTECH
 	if (!strncmp(name, HDMI_PANEL_NAME,
 			strnlen(HDMI_PANEL_NAME,
 				PANEL_NAME_MAX_LEN))) {
@@ -165,6 +218,7 @@
 			strnlen(TVOUT_PANEL_NAME,
 				PANEL_NAME_MAX_LEN)))
 		return 0;
+#endif
 
 	pr_warning("%s: not supported '%s'", __func__, name);
 	return -ENODEV;
@@ -346,6 +400,253 @@
 	return 0;
 }
 
+#if defined( CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD )
+
+static int mipi_dsi_cdp_panel_power(int on)
+{
+#if 0//!defined(CONFIG_MACH_KTTECH)
+	static struct regulator *reg_l8, *reg_l23, *reg_l2;
+#else
+	static struct regulator *reg_l23, *reg_l2;
+#endif
+	static struct regulator *reg_l16 ;//, *reg_l17;
+
+	int rc;
+
+	pr_debug("%s: state : %d\n", __func__, on);
+
+	if (!dsi_power_on) {
+
+#if 0//!defined(CONFIG_MACH_KTTECH)
+		reg_l8 = regulator_get(&msm_mipi_dsi1_device.dev,
+				"dsi_vdc");
+		if (IS_ERR(reg_l8)) {
+			pr_err("could not get 8921_l8, rc = %ld\n",
+				PTR_ERR(reg_l8));
+			return -ENODEV;
+		}
+#endif
+
+		reg_l23 = regulator_get(&msm_mipi_dsi1_device.dev,
+				"dsi_vddio");
+		if (IS_ERR(reg_l23)) {
+			pr_err("000 could not get 8921_l23, rc = %ld\n",
+				PTR_ERR(reg_l23));
+			return -ENODEV;
+		}
+
+		reg_l2 = regulator_get(&msm_mipi_dsi1_device.dev,
+				"dsi_vdda");
+		if (IS_ERR(reg_l2)) {
+			pr_err("could not get 8921_l2, rc = %ld\n",
+				PTR_ERR(reg_l2));
+			return -ENODEV;
+		}
+
+
+//
+/*
+		reg_l17 = regulator_get(&msm_mipi_dsi1_device.dev,
+				"OLED_VDD3_2.2V");
+		if (IS_ERR(reg_l17)) {
+			pr_err("could not get 8921_l17, rc = %ld\n",
+				PTR_ERR(reg_l17));
+			return -ENODEV;
+		}
+*/
+//		reg_l16 = regulator_get(&msm_mipi_dsi1_device.dev,
+//				"VCI_VCC_3.0");
+
+		reg_l16 = regulator_get(&msm_mipi_dsi1_device.dev,
+				"8921_l16");
+				
+		if (IS_ERR(reg_l16)) {
+			pr_err("could not get 8921_l16, rc = %ld\n",
+				PTR_ERR(reg_l16));
+			return -ENODEV;
+		}
+//		
+
+#if 0//!defined(CONFIG_MACH_KTTECH)
+		rc = regulator_set_voltage(reg_l8, 2800000, 3000000);
+		if (rc) {
+			pr_err("set_voltage l8 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+#endif
+		rc = regulator_set_voltage(reg_l23, 1800000, 1800000);
+		if (rc) {
+			pr_err("set_voltage l23 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+	
+		rc = regulator_set_voltage(reg_l2, 1200000, 1200000);
+		if (rc) {
+			pr_err("set_voltage l2 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+
+//
+/*
+		rc = regulator_set_voltage(reg_l17, 2200000, 2200000);
+		if (rc) {
+			pr_err("set_voltage l16 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+*/
+//		rc = regulator_set_voltage(reg_l16, 3000000, 3000000);
+		rc = regulator_set_voltage(reg_l16, 2800000, 2800000);
+	
+		if (rc) {
+			pr_err("set_voltage l16 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+
+//
+		
+		dsi_power_on = true;
+	}
+	if (on) {
+#if 0//!defined(CONFIG_MACH_KTTECH)
+		rc = regulator_set_optimum_mode(reg_l8, 100000);
+		if (rc < 0) {
+			pr_err("set_optimum_mode l8 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+#endif
+		rc = regulator_set_optimum_mode(reg_l23, 100000);
+		if (rc < 0) {
+			pr_err("set_optimum_mode l23 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+
+		rc = regulator_set_optimum_mode(reg_l2, 100000);
+		if (rc < 0) {
+			pr_err("set_optimum_mode l2 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+
+//
+		rc = regulator_set_optimum_mode(reg_l16, 100000);
+		if (rc < 0) {
+			pr_err("set_optimum_mode l16 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+/*
+		rc = regulator_set_optimum_mode(reg_l17, 100000);
+		if (rc < 0) {
+			pr_err("set_optimum_mode l17 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+*/		
+//		
+		
+#if 0//!defined(CONFIG_MACH_KTTECH)		
+		rc = regulator_enable(reg_l8);
+		if (rc) {
+			pr_err("enable l8 failed, rc=%d\n", rc);
+			return -ENODEV;
+		}
+#endif
+		rc = regulator_enable(reg_l23);
+		if (rc) {
+			pr_err("enable l8 failed, rc=%d\n", rc);
+			return -ENODEV;
+		}
+		rc = regulator_enable(reg_l2);
+		if (rc) {
+			pr_err("enable l2 failed, rc=%d\n", rc);
+			return -ENODEV;
+		}
+//
+		rc = regulator_enable(reg_l16);
+		if (rc) {
+			pr_err("enable l16 failed, rc=%d\n", rc);
+			return -ENODEV;
+		}
+/*
+		rc = regulator_enable(reg_l17);
+		if (rc) {
+			pr_err("enable l17 failed, rc=%d\n", rc);
+			return -ENODEV;
+		}
+*/		
+
+//
+
+  	} else {
+
+//
+		rc = regulator_disable(reg_l16);
+		if (rc) {
+			pr_err("disable reg_l23 failed, rc=%d\n", rc);
+			return -ENODEV;
+		}
+/*		
+		rc = regulator_disable(reg_l17);
+		if (rc) {
+			pr_err("disable reg_l23 failed, rc=%d\n", rc);
+			return -ENODEV;
+		}
+*/		
+//		  	
+		rc = regulator_disable(reg_l2);
+		if (rc) {
+			pr_err("disable reg_l2 failed, rc=%d\n", rc);
+			return -ENODEV;
+		}
+#if 0//!defined(CONFIG_MACH_KTTECH)
+		rc = regulator_disable(reg_l8);
+		if (rc) {
+			pr_err("disable reg_l8 failed, rc=%d\n", rc);
+			return -ENODEV;
+		}
+#endif
+		rc = regulator_disable(reg_l23);
+		if (rc) {
+			pr_err("disable reg_l23 failed, rc=%d\n", rc);
+			return -ENODEV;
+		}
+
+//
+		rc = regulator_set_optimum_mode(reg_l16, 100);
+		if (rc < 0) {
+			pr_err("set_optimum_mode l16 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+/*		
+		rc = regulator_set_optimum_mode(reg_l17, 100);
+		if (rc < 0) {
+			pr_err("set_optimum_mode l17 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+*/
+//
+		
+#if 0//!defined(CONFIG_MACH_KTTECH)		
+		rc = regulator_set_optimum_mode(reg_l8, 100);
+		if (rc < 0) {
+			pr_err("set_optimum_mode l8 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+#endif
+		rc = regulator_set_optimum_mode(reg_l23, 100);
+		if (rc < 0) {
+			pr_err("set_optimum_mode l23 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+
+		rc = regulator_set_optimum_mode(reg_l2, 100);
+		if (rc < 0) {
+			pr_err("set_optimum_mode l2 failed, rc=%d\n", rc);
+			return -EINVAL;
+		}
+
+	}
+	return 0;
+}
+
+#else
 static int mipi_dsi_cdp_panel_power(int on)
 {
 	static struct regulator *reg_l8, *reg_l23, *reg_l2;
@@ -467,6 +768,7 @@
 	}
 	return 0;
 }
+#endif
 
 static char mipi_dsi_splash_is_enabled(void);
 static int mipi_dsi_panel_power(int on)
@@ -483,9 +785,73 @@
 	return ret;
 }
 
+#ifdef CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD
+//static int dsi_l4500t_on = 0;
+static int mipi_dsi_lg_l4500t_dsi_power( int on )
+{
+// Moved to msm_dsi.c(mipi_dsi_on,mipi_dsi_off) file.
+#if 0
+	int rc = 0;
+	static int mipi_dsi_power_save_on;
+	static int gpio_disp_rst;
+	
+	pr_info("%s: on= %d \n", __func__, on );
+
+	if (mipi_dsi_power_save_on == on) {
+			printk(KERN_ERR "%s: Already Power Saved DSI.\n", __func__);	
+			return 0;
+	}
+
+	mipi_dsi_power_save_on = on;	
+
+	if( dsi_l4500t_on == 0 )
+	{
+		gpio_disp_rst = LCD_RESET_GPIO;
+
+		rc = gpio_request(gpio_disp_rst, "disp_rst_n");
+		if (rc) {
+			pr_err("request gpio_disp_rst failed, rc=%d\n", rc);
+			return -ENODEV;
+		}
+
+		dsi_l4500t_on = true;
+	}	
+
+	if ( on ) {
+  		mipi_dsi_panel_power( on );
+
+      /* LCD Reset Sequence */
+  		gpio_set_value_cansleep(gpio_disp_rst, 1); 
+  		msleep(5);
+  		gpio_set_value_cansleep(gpio_disp_rst, 0); 
+  		msleep(10);
+  		gpio_set_value_cansleep(gpio_disp_rst, 1); 
+  		msleep(10);      
+	} 
+	else 
+	{
+		gpio_set_value_cansleep(gpio_disp_rst, 0);
+		msleep(120);
+
+		mipi_dsi_panel_power( on );
+	}
+
+#else
+	mipi_dsi_panel_power( on );
+#endif
+	return 0;
+}
+#endif
+
 static struct mipi_dsi_platform_data mipi_dsi_pdata = {
 	.vsync_gpio = MDP_VSYNC_GPIO,
+#ifdef CONFIG_KTTECH_MIPI_SHARP_VIDEO_WXGA
+	.dsi_power_save = mipi_dsi_sharp_qhd_power,
+#elif defined( CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD )
+	.dsi_power_save = mipi_dsi_lg_l4500t_dsi_power,
+#else		
 	.dsi_power_save = mipi_dsi_panel_power,
+#endif	
 	.splash_is_enabled = mipi_dsi_splash_is_enabled,
 };
 
@@ -616,6 +982,19 @@
 	.id = 0,
 };
 
+#ifdef CONFIG_KTTECH_MIPI_SHARP_VIDEO_WXGA /* 4.5' Sharp */
+static struct platform_device mipi_dsi_sharp_panel_device = {
+	.name = "mipi_sharp",
+	.id = 0,
+};
+#elif defined( CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD )
+static struct platform_device mipi_dsi_lg_l4500t_panel_device = {
+	.name = "mipi_lg_l4500t",
+	.id = 0,
+};
+#endif
+
+#if 0//!defined(CONFIG_MACH_KTTECH)
 #define LPM_CHANNEL0 0
 static int toshiba_gpio[] = {LPM_CHANNEL0};
 
@@ -631,6 +1010,7 @@
 		.platform_data = &toshiba_pdata,
 	}
 };
+#endif
 
 #define FPGA_3D_GPIO_CONFIG_ADDR	0xB5
 static int dsi2lvds_gpio[4] = {
@@ -743,7 +1123,7 @@
 };
 #endif
 
-#ifdef CONFIG_MSM_BUS_SCALING
+#if defined(CONFIG_MSM_BUS_SCALING) && defined(CONFIG_FB_MSM_DTV)
 static struct msm_bus_vectors dtv_bus_init_vectors[] = {
 	{
 		.src = MSM_BUS_MASTER_MDP_PORT0,
@@ -1021,7 +1401,13 @@
 	if (machine_is_msm8960_liquid())
 		platform_device_register(&mipi_dsi2lvds_bridge_device);
 	else
+#ifdef CONFIG_KTTECH_MIPI_SHARP_VIDEO_WXGA
+		platform_device_register(&mipi_dsi_sharp_panel_device);
+#elif defined(CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD)
+		platform_device_register(&mipi_dsi_lg_l4500t_panel_device);
+#else
 		platform_device_register(&mipi_dsi_toshiba_panel_device);
+#endif  
 
 	if (machine_is_msm8x60_rumi3()) {
 		msm_fb_register_device("mdp", NULL);
@@ -1029,11 +1415,37 @@
 	} else
 		msm_fb_register_device("mdp", &mdp_pdata);
 	msm_fb_register_device("mipi_dsi", &mipi_dsi_pdata);
-#ifdef CONFIG_MSM_BUS_SCALING
+#if defined(CONFIG_MSM_BUS_SCALING) && defined(CONFIG_FB_MSM_DTV)
 	msm_fb_register_device("dtv", &dtv_pdata);
 #endif
 }
 
+#ifdef CONFIG_MACH_KTTECH
+static struct resource ram_console_resources[] = {
+	{
+		.flags	= IORESOURCE_MEM,	},
+};
+
+struct platform_device ram_console_device = {
+	.name		= "ram_console",
+	.id		= -1,
+	.num_resources	= ARRAY_SIZE(ram_console_resources),
+	.resource	= ram_console_resources,
+};
+
+/* MSM_RESTART_MAGIC_ADDR */
+void msm_write_restart_reason(u32 restart_code)
+{
+	void *restart_reason;
+	printk(KERN_CRIT "%s: start resatrt_code = 0x%x \n", __func__, restart_code);
+	restart_reason = ioremap_nocache(MSM_RESTART_MAGIC_ADDR, SZ_4K);
+	writel(restart_code, restart_reason);
+	dsb(); // Cache Flush Before io unmap
+	iounmap(restart_reason);
+	printk(KERN_CRIT "%s: end \n", __func__);
+}
+#endif
+
 void __init msm8960_allocate_fb_region(void)
 {
 	void *addr;
@@ -1045,6 +1457,11 @@
 	msm_fb_resources[0].end = msm_fb_resources[0].start + size - 1;
 	pr_info("allocating %lu bytes at %p (%lx physical) for fb\n",
 			size, addr, __pa(addr));
+#ifdef CONFIG_MACH_KTTECH
+	ram_console_resources[0].start = MSM_RAM_CONSOLE_BASE;
+	ram_console_resources[0].end = ram_console_resources[0].start + MSM_RAM_CONSOLE_SIZE-1;
+#endif
+
 }
 
 /**
@@ -1063,8 +1480,10 @@
 	mdp_1080p_vectors[0].ib = 2000000000;
 
 	if (hdmi_is_primary) {
+#ifdef CONFIG_FB_MSM_DTV
 		dtv_bus_def_vectors[0].ab = 2000000000;
 		dtv_bus_def_vectors[0].ib = 2000000000;
+#endif
 	}
 }
 
diff -urN caf/arch/arm/mach-msm/board-8960-gpiomux.c for-diff/arch/arm/mach-msm/board-8960-gpiomux.c
--- caf/arch/arm/mach-msm/board-8960-gpiomux.c	2015-09-08 23:43:48.599167046 +0900
+++ for-diff/arch/arm/mach-msm/board-8960-gpiomux.c	2015-09-13 14:02:58.613921000 +0900
@@ -18,6 +18,16 @@
 #include "devices.h"
 #include "board-8960.h"
 
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+
+// I2C configuration for MAXIM17040
+static struct gpiomux_setting gsbi1 = {
+	.func = GPIOMUX_FUNC_1,
+	.drv = GPIOMUX_DRV_8MA,
+	.pull = GPIOMUX_PULL_NONE,
+};
+
+#else
 /* The SPI configurations apply to GSBI 1*/
 static struct gpiomux_setting spi_active = {
 	.func = GPIOMUX_FUNC_1,
@@ -30,6 +40,20 @@
 	.drv = GPIOMUX_DRV_2MA,
 	.pull = GPIOMUX_PULL_DOWN,
 };
+#endif
+
+#if defined(CONFIG_KTTECH_TDMB_SERVICE)
+static struct gpiomux_setting spi_dmb_active = {
+       .func = GPIOMUX_FUNC_2,
+       .drv = GPIOMUX_DRV_8MA,
+       .pull = GPIOMUX_PULL_NONE,
+};
+static struct gpiomux_setting spi_dmb_suspend = {
+       .func = GPIOMUX_FUNC_GPIO,
+       .drv = GPIOMUX_DRV_2MA,
+       .pull = GPIOMUX_PULL_DOWN,
+};
+#endif
 
 static struct gpiomux_setting spi_active_config2 = {
 	.func = GPIOMUX_FUNC_2,
@@ -337,6 +361,21 @@
 };
 
 static struct msm_gpiomux_config msm8960_gsbi_configs[] __initdata = {
+
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	{
+		.gpio      = 8,	/* GSBI1 I2C QUP SDA */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gsbi1,
+		},
+	},
+	{
+		.gpio      = 9,	/* GSBI1 I2C QUP SCL */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &gsbi1,
+		},
+	},
+#else
 	{
 		.gpio      = 6,		/* GSBI1 QUP SPI_DATA_MOSI */
 		.settings = {
@@ -365,6 +404,7 @@
 			[GPIOMUX_ACTIVE] = &spi_active,
 		},
 	},
+#endif
 	{
 		.gpio      = 14,		/* GSBI1 SPI_CS_1 */
 		.settings = {
@@ -410,6 +450,36 @@
 			[GPIOMUX_SUSPENDED] = &gsbi10,
 		},
 	},
+	#if defined(CONFIG_KTTECH_TDMB_SERVICE)
+	{
+		.gpio      = 93,                /* GSBI9 QUP SPI_DATA_MOSI */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &spi_dmb_suspend,
+			[GPIOMUX_ACTIVE] = &spi_dmb_active,
+		},
+	},
+	{
+		.gpio      = 94,                /* GSBI9 QUP SPI_DATA_MISO */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &spi_dmb_suspend,
+			[GPIOMUX_ACTIVE] = &spi_dmb_active,
+		},
+	},
+	{
+		.gpio      = 95,                /* GSBI9 QUP SPI_CS_N */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &spi_dmb_suspend,
+			[GPIOMUX_ACTIVE] = &spi_dmb_active,
+		},
+	},
+	{
+		.gpio      = 96,                /* GSBI9 QUP SPI_CLK */
+		.settings = {
+			[GPIOMUX_SUSPENDED] = &spi_dmb_suspend,
+			[GPIOMUX_ACTIVE] = &spi_dmb_active,
+		},
+	},
+	#endif
 };
 
 static struct msm_gpiomux_config msm8960_gsbi5_uart_configs[] __initdata = {
diff -urN caf/arch/arm/mach-msm/board-8960-pmic.c for-diff/arch/arm/mach-msm/board-8960-pmic.c
--- caf/arch/arm/mach-msm/board-8960-pmic.c	2015-09-08 23:43:48.599167046 +0900
+++ for-diff/arch/arm/mach-msm/board-8960-pmic.c	2015-09-13 14:02:58.613921000 +0900
@@ -120,6 +120,35 @@
 								DOUT_CTRL_LOW),
 };
 
+#ifdef CONFIG_KTTECH_PN544_NFC
+static struct pm8xxx_mpp_config_data nfc_clk_on_config = {
+	.type		= PM8XXX_MPP_TYPE_D_INPUT,
+	.level		= PM8921_MPP_DIG_LEVEL_S4,
+	.control	= PM8XXX_MPP_DIN_TO_INT,
+};
+
+
+static struct pm8xxx_mpp_config_data nfc_clk_off_config = {
+ .type  = PM8XXX_MPP_TYPE_D_INPUT,
+ .level  = PM8XXX_MPP_CS_OUT_5MA,
+ .control = PM8XXX_MPP_CS_CTRL_DISABLE,
+};
+ 
+static int32_t msm_nfc_8960_d1_clk_ctrl(int enable)
+{
+ int rc = 0;
+ if (enable) {
+  rc = pm8xxx_mpp_config(PM8921_MPP_PM_TO_SYS(9),
+   &nfc_clk_on_config);
+ } else {
+  rc = pm8xxx_mpp_config(PM8921_MPP_PM_TO_SYS(9),
+   &nfc_clk_off_config);
+ }
+ return rc;
+}
+#endif
+
+
 void __init msm8960_pm8921_gpio_mpp_init(void)
 {
 	int i, rc;
@@ -141,6 +170,12 @@
 			break;
 		}
 	}
+    
+#ifdef CONFIG_KTTECH_PN544_NFC
+	msm_nfc_8960_d1_clk_ctrl(1);
+#endif
+
+	
 }
 
 static struct pm8xxx_adc_amux pm8xxx_adc_channels_data[] = {
@@ -412,27 +447,59 @@
 	325,
 };
 
+#ifdef CONFIG_MACH_KTTECH
+#define MAX_VOLTAGE_MV		4360
+#else
 #define MAX_VOLTAGE_MV		4200
+#endif
 #define CHG_TERM_MA		100
 static struct pm8921_charger_platform_data pm8921_chg_pdata __devinitdata = {
 	.safety_time		= 180,
 	.update_time		= 60000,
 	.max_voltage		= MAX_VOLTAGE_MV,
 	.min_voltage		= 3200,
+#ifdef CONFIG_MACH_KTTECH
+	.uvd_thresh_voltage = 3850,
+#else
 	.uvd_thresh_voltage	= 4050,
+#endif
 	.resume_voltage_delta	= 100,
 	.term_current		= CHG_TERM_MA,
+#ifdef CONFIG_MACH_KTTECH
+	.cool_temp		= 0,
+	.warm_temp		= 50,
+#else
 	.cool_temp		= 10,
 	.warm_temp		= 40,
+#endif
 	.temp_check_period	= 1,
+#ifdef CONFIG_MACH_KTTECH
+	.max_bat_chg_current	= 850,
+	.cool_bat_chg_current	= 850,
+	.warm_bat_chg_current	= 850,
+	.cool_bat_voltage	= MAX_VOLTAGE_MV,
+	.warm_bat_voltage	= MAX_VOLTAGE_MV,
+	.thermal_mitigation = NULL,
+#else
 	.max_bat_chg_current	= 1100,
 	.cool_bat_chg_current	= 350,
 	.warm_bat_chg_current	= 350,
 	.cool_bat_voltage	= 4100,
 	.warm_bat_voltage	= 4100,
 	.thermal_mitigation	= pm8921_therm_mitigation,
+#endif
 	.thermal_levels		= ARRAY_SIZE(pm8921_therm_mitigation),
+#ifdef CONFIG_MACH_KTTECH
+	.rconn_mohm 	= 30, //JB???
+#else
 	.rconn_mohm		= 18,
+#endif
+#ifdef CONFIG_MACH_KTTECH
+	.batt_id_min	= 0,
+	.batt_id_max	= 0,
+	.cold_thr	= 1, // 80% (0:70% 1:80%)
+	.hot_thr	= 0, // 20% (0:20% 1:35%)
+#endif
 };
 
 static struct pm8xxx_misc_platform_data pm8xxx_misc_pdata = {
@@ -444,12 +511,22 @@
 	.r_sense			= 10,
 	.v_cutoff			= 3400,
 	.max_voltage_uv			= MAX_VOLTAGE_MV * 1000,
-	.rconn_mohm			= 18,
+#ifdef CONFIG_MACH_KTTECH
+	.rconn_mohm 	= 30, //JB???
+#else
+	.rconn_mohm		= 18,
+#endif
 	.shutdown_soc_valid_limit	= 20,
 	.adjust_soc_low_threshold	= 25,
 	.chg_term_ua			= CHG_TERM_MA * 1000,
 };
 
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* implement camera flash led by PMIC */
+#ifdef CONFIG_KTTECH_FLASH_PMIC
+#define	PM8921_FLASH_LED_MAX_CURRENT	100		/* I = 100mA */
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 #define	PM8921_LC_LED_MAX_CURRENT	4	/* I = 4mA */
 #define	PM8921_LC_LED_LOW_CURRENT	1	/* I = 1mA */
 #define PM8XXX_LED_PWM_PERIOD		1000
@@ -506,7 +583,19 @@
 	.configs = pm8921_led_configs_liquid,
 	.num_configs = ARRAY_SIZE(pm8921_led_configs_liquid),
 };
-
+#ifdef CONFIG_MACH_KTTECH
+static struct led_info pm8921_led_info[] = {
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* implement camera flash led by PMIC */
+#ifdef CONFIG_KTTECH_FLASH_PMIC
+	[0] = {
+		.name			= "led:camera_flash",
+		.default_trigger	= "camera_flash",
+	},
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+};
+#else /* CONFIG_MACH_KTTECH */
 static struct led_info pm8921_led_info[] = {
 	[0] = {
 		.name			= "led:battery_charging",
@@ -517,12 +606,26 @@
 		.default_trigger	= "battery-full",
 	},
 };
-
+#endif /* CONFIG_MACH_KTTECH */
 static struct led_platform_data pm8921_led_core_pdata = {
 	.num_leds = ARRAY_SIZE(pm8921_led_info),
 	.leds = pm8921_led_info,
 };
 
+#ifdef CONFIG_MACH_KTTECH
+static struct pm8xxx_led_config pm8921_led_configs[] = {
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* implement camera flash led by PMIC */
+#ifdef CONFIG_KTTECH_FLASH_PMIC
+	[0] = {
+		.id = PM8XXX_ID_LED_KB_LIGHT,
+		.mode = PM8XXX_LED_MODE_MANUAL,
+		.max_current = PM8921_FLASH_LED_MAX_CURRENT,
+	},
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+};
+#else /* CONFIG_MACH_KTTECH */
 static int pm8921_led0_pwm_duty_pcts[56] = {
 		1, 4, 8, 12, 16, 20, 24, 28, 32, 36,
 		40, 44, 46, 52, 56, 60, 64, 68, 72, 76,
@@ -561,6 +664,7 @@
 		.pwm_period_us = PM8XXX_LED_PWM_PERIOD,
 	},
 };
+#endif/* CONFIG_MACH_KTTECH */
 
 static struct pm8xxx_led_platform_data pm8xxx_leds_pdata = {
 		.led_core = &pm8921_led_core_pdata,
@@ -627,7 +731,9 @@
 	} else if (machine_is_msm8960_mtp()) {
 		pm8921_platform_data.bms_pdata->battery_type = BATT_PALLADIUM;
 	} else if (machine_is_msm8960_cdp()) {
+#ifndef CONFIG_MACH_KTTECH
 		pm8921_chg_pdata.has_dc_supply = true;
+#endif
 	}
 
 	if (machine_is_msm8960_fluid())
diff -urN caf/arch/arm/mach-msm/board-8960-regulator.c for-diff/arch/arm/mach-msm/board-8960-regulator.c
--- caf/arch/arm/mach-msm/board-8960-regulator.c	2015-09-08 23:43:48.599167046 +0900
+++ for-diff/arch/arm/mach-msm/board-8960-regulator.c	2015-09-13 14:02:58.613921000 +0900
@@ -147,6 +147,11 @@
 };
 VREG_CONSUMERS(L29) = {
 	REGULATOR_SUPPLY("8921_l29",		NULL),
+	#ifdef CONFIG_KTTECH_TDMB_SERVICE
+	//REGULATOR_SUPPLY("tdmb",              "spi_qsd.1"),
+	//REGULATOR_SUPPLY("tdmb_vol",          "tdmb"),
+	REGULATOR_SUPPLY("tdmb_vol",            "spi1.0"),
+	#endif
 };
 VREG_CONSUMERS(S1) = {
 	REGULATOR_SUPPLY("8921_s1",		NULL),
@@ -505,8 +510,13 @@
 		0, 2),
 	PM8XXX_NLDO1200(L28, "8921_l28", 0, 1, 375000, 1050000, 200, "8921_s7",
 		0, 3),
+	#ifdef CONFIG_KTTECH_TDMB_SERVICE
+	PM8XXX_LDO(L29,      "8921_l29", 0, 1, 1800000, 2100000, 200, "8921_s8",
+		0, 4),
+	#else
 	PM8XXX_LDO(L29,      "8921_l29", 0, 1, 2050000, 2100000, 200, "8921_s8",
 		0, 4),
+	#endif
 
 	/*	     ID        name      always_on pd en_t supply    reg_ID */
 	PM8XXX_VS300(USB_OTG,  "8921_usb_otg",  0, 1, 0,   "ext_5v", 5),
@@ -531,15 +541,32 @@
 	RPM_LDO(L5,	 0, 1, 0, 2950000, 2950000, NULL,      0, 0),
 	RPM_LDO(L6,	 0, 1, 0, 2950000, 2950000, NULL,      0, 0),
 	RPM_LDO(L7,	 1, 1, 0, 1850000, 2950000, NULL,      10000, 10000),
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* bring up camera */
+#ifdef CONFIG_KTTECH_CAMERA_S5K4E5
+	RPM_LDO(L8,	 0, 1, 0, 3000000, 3000000, NULL,      0, 0),
+#else
 	RPM_LDO(L8,	 0, 1, 0, 2800000, 3000000, NULL,      0, 0),
+#endif
 	RPM_LDO(L9,	 0, 1, 0, 3000000, 3000000, NULL,      0, 0),
 	RPM_LDO(L10,	 0, 1, 0, 3000000, 3000000, NULL,      0, 0),
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* change voltage of L11  : 2.85V -> 2.8V */
+#if 1
+	RPM_LDO(L11,	 0, 1, 0, 2800000, 2800000, NULL,      0, 0),
+#else
 	RPM_LDO(L11,	 0, 1, 0, 2850000, 2850000, NULL,      0, 0),
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	RPM_LDO(L12,	 0, 1, 0, 1200000, 1200000, "8921_s4", 0, 0),
 	RPM_LDO(L14,	 0, 1, 0, 1800000, 1800000, NULL,      0, 0),
 	RPM_LDO(L15,	 0, 1, 0, 1800000, 2950000, NULL,      0, 0),
 	RPM_LDO(L16,	 0, 1, 0, 2800000, 2800000, NULL,      0, 0),
+#ifdef CONFIG_MACH_KTTECH //vibe motor
+	RPM_LDO(L17,	 0, 1, 0, 1800000, 2950000, NULL,	   100000, 100000),
+#else
 	RPM_LDO(L17,	 0, 1, 0, 1800000, 2950000, NULL,      0, 0),
+#endif
 	RPM_LDO(L18,	 0, 1, 0, 1300000, 1300000, "8921_s4", 0, 0),
 	RPM_LDO(L21,	 0, 1, 0, 1900000, 1900000, "8921_s8", 0, 0),
 	RPM_LDO(L22,	 0, 1, 0, 2750000, 2750000, NULL,      0, 0),
diff -urN caf/arch/arm/mach-msm/board-8960.c for-diff/arch/arm/mach-msm/board-8960.c
--- caf/arch/arm/mach-msm/board-8960.c	2015-09-08 23:43:48.599167046 +0900
+++ for-diff/arch/arm/mach-msm/board-8960.c	2015-09-13 14:02:58.617921000 +0900
@@ -78,6 +78,9 @@
 #endif
 
 #include <linux/smsc3503.h>
+#ifdef CONFIG_KTTECH_PN544_NFC
+#include <linux/nfc/pn544-kttech.h>
+#endif
 #include <linux/ion.h>
 #include <mach/ion.h>
 #include <mach/mdm2.h>
@@ -139,7 +142,7 @@
 #endif
 
 #define MSM_PMEM_ADSP_SIZE         0x7800000
-#define MSM_PMEM_AUDIO_SIZE        0x4CF000
+#define MSM_PMEM_AUDIO_SIZE        0x600000 /* KT Tech : 4->6MB */
 #define MSM_PMEM_SIZE 0x2800000 /* 40 Mbytes */
 #define MSM_LIQUID_PMEM_SIZE 0x4000000 /* 64 Mbytes */
 #define MSM_HDMI_PRIM_PMEM_SIZE 0x4000000 /* 64 Mbytes */
@@ -646,12 +649,15 @@
 		msm8960_fmem_pdata.reserved_size_low = fixed_low_size +
 							HOLE_SIZE;
 		msm8960_fmem_pdata.reserved_size_high = fixed_high_size;
+		// KT Tech : Fix for incorrect FMEM and mm heap sizes on MSM8960.
+		msm8960_fmem_pdata.size += HOLE_SIZE;
 	}
 
 	/* Since the fixed area may be carved out of lowmem,
 	 * make sure the length is a multiple of 1M.
 	 */
-	fixed_size = (fixed_size + MSM_MM_FW_SIZE + SECTION_SIZE - 1)
+	// KT Tech : Fix for incorrect FMEM and mm heap sizes on MSM8960.
+	fixed_size = (fixed_size + HOLE_SIZE + SECTION_SIZE - 1)
 		& SECTION_MASK;
 	msm8960_reserve_fixed_area(fixed_size);
 
@@ -820,8 +826,9 @@
 	if (msm8960_fmem_pdata.size) {
 #if defined(CONFIG_ION_MSM) && defined(CONFIG_MSM_MULTIMEDIA_USE_ION)
 		if (reserve_info->fixed_area_size) {
+			// KT Tech : Fix for incorrect FMEM and mm heap sizes on MSM8960.
 			msm8960_fmem_pdata.phys =
-				reserve_info->fixed_area_start + MSM_MM_FW_SIZE;
+				reserve_info->fixed_area_start;
 			pr_info("mm fw at %lx (fixed) size %x\n",
 				reserve_info->fixed_area_start, MSM_MM_FW_SIZE);
 			pr_info("fmem start %lx (fixed) size %lx\n",
@@ -937,10 +944,17 @@
 		.cfilt1_mv = 1800,
 		.cfilt2_mv = 2700,
 		.cfilt3_mv = 1800,
+#if 0 //def CONFIG_KTTECH_SOUND		
+		.bias1_cfilt_sel = TABLA_CFILT2_SEL,
+		.bias2_cfilt_sel = TABLA_CFILT2_SEL,
+		.bias3_cfilt_sel = TABLA_CFILT2_SEL,
+		.bias4_cfilt_sel = TABLA_CFILT2_SEL,
+#else		
 		.bias1_cfilt_sel = TABLA_CFILT1_SEL,
 		.bias2_cfilt_sel = TABLA_CFILT2_SEL,
 		.bias3_cfilt_sel = TABLA_CFILT3_SEL,
 		.bias4_cfilt_sel = TABLA_CFILT3_SEL,
+#endif		
 	},
 	.regulator = {
 	{
@@ -1416,10 +1430,12 @@
 #endif
 }
 
+#if !defined(CONFIG_KTTECH_BATTERY_GAUGE_MAXIM)
 static struct msm_spi_platform_data msm8960_qup_spi_gsbi1_pdata = {
 	.max_clock_speed = 15060000,
 	.infinite_mode	 = 0xFFC0,
 };
+#endif
 
 #ifdef CONFIG_USB_MSM_OTG_72K
 static struct msm_otg_platform_data msm_otg_pdata;
@@ -1823,6 +1839,7 @@
 	},
 };
 
+#ifndef CONFIG_KTTECH_TOUCH_MMS100
 #define CYTTSP_TS_GPIO_IRQ		11
 #define CYTTSP_TS_SLEEP_GPIO		50
 #define CYTTSP_TS_RESOUT_N_GPIO		52
@@ -1944,7 +1961,7 @@
 #endif /* CY_USE_TIMER */
 	},
 };
-
+#endif
 /* configuration data for mxt1386 */
 static const u8 mxt1386_config_data[] = {
 	/* T6 Object */
@@ -2291,6 +2308,15 @@
 	.gpio_hdmi_mhl_mux = 0,
 };
 
+#ifdef CONFIG_KTTECH_TOUCH_MMS100
+static struct i2c_board_info mms100_boardinfo[] __initdata = {
+    {   I2C_BOARD_INFO("melfas-ts", 0x48),
+        .platform_data = NULL,
+        .irq  = MSM_GPIO_TO_INT(11),
+    },
+};
+#endif
+
 static struct i2c_board_info sii_device_info[] __initdata = {
 	{
 #ifdef CONFIG_FB_MSM_HDMI_MHL_8334
@@ -2309,15 +2335,140 @@
 	},
 };
 
+
+#ifdef CONFIG_KTTECH_PN544_NFC
+static int pn544_setup_power (struct device *dev)
+{
+  return 0;
+}
+
+static void pn544_shutdown_power(struct device *dev)
+{
+
+}
+
+#define PN544_RST_GPIO 80
+#define PN544_FIRMUP_GPIO 81
+#define PN544_CLK_REQ_GPIO 146 // 192M clk 
+#define PN544_IRQ_GPIO 106
+static int pn544_setup_gpio(int enable)
+{
+  int status = 0;
+  int rc;
+
+  printk(KERN_INFO"%s: %d\n", __func__,enable);
+
+  rc = gpio_tlmm_config(GPIO_CFG(PN544_RST_GPIO, 0, GPIO_CFG_OUTPUT, GPIO_CFG_PULL_UP, GPIO_CFG_2MA), GPIO_CFG_ENABLE);
+
+  if (rc) {
+    printk(KERN_INFO "%s: PN544_RST_GPIO gpio %d request or tlmm_config"
+                                "failed\n", __func__,
+                                PN544_RST_GPIO);
+    goto gpio_free_rst;
+  }
+
+
+  rc = gpio_tlmm_config(GPIO_CFG(PN544_FIRMUP_GPIO, 0, GPIO_CFG_OUTPUT, GPIO_CFG_PULL_DOWN, GPIO_CFG_2MA), GPIO_CFG_ENABLE);
+
+  if (rc) {
+    printk(KERN_INFO "%s: PN544_FIRMUP_GPIO gpio %d request or tlmm_config"
+                                "failed\n", __func__,
+                                PN544_FIRMUP_GPIO);
+    goto gpio_free_firmup;
+  }
+
+  rc = gpio_tlmm_config(GPIO_CFG(PN544_IRQ_GPIO, 0, GPIO_CFG_INPUT, GPIO_CFG_PULL_DOWN, GPIO_CFG_2MA), GPIO_CFG_ENABLE);
+
+  if (rc) {
+    printk(KERN_INFO "%s: PN544_IRQ_GPIO gpio request or tlmm_config"
+                                "failed\n", __func__);
+    gpio_free(PN544_IRQ_GPIO);
+    return status;
+  }
+
+  gpio_set_value(PN544_RST_GPIO, 1);
+  gpio_set_value(PN544_FIRMUP_GPIO, 1);
+  msleep(20);
+  gpio_set_value(PN544_RST_GPIO, 0);
+  msleep(60);
+  gpio_set_value(PN544_RST_GPIO, 1);
+  msleep(20);
+
+  return status;
+
+gpio_free_rst:
+  gpio_free(PN544_RST_GPIO);
+
+gpio_free_firmup:
+  gpio_free(PN544_FIRMUP_GPIO);
+
+  return status;
+}
+
+static struct pn544_i2c_platform_data nxpchip_platform_data = {	
+  .irq_gpio = PN544_IRQ_GPIO,
+  .ven_gpio = PN544_RST_GPIO,
+  .firm_gpio = PN544_FIRMUP_GPIO,
+  .setup_power = pn544_setup_power,
+  .shutdown_power = pn544_shutdown_power,
+  .setup_gpio = pn544_setup_gpio,
+};
+
+static struct i2c_board_info nxp_chipinfo[] __initdata = {	
+  {
+	I2C_BOARD_INFO("pn544", 0x28),
+	.platform_data = &nxpchip_platform_data, 
+	.irq  = MSM_GPIO_TO_INT(PN544_IRQ_GPIO),
+   },
+};
+#endif/* jake for NFC ------------------------------------------------*/
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+#define MAX17410_SLAVE_ADDR			0x36
+static struct i2c_board_info max17040_i2c_info[] __initdata = {	
+  {
+	I2C_BOARD_INFO("max17040", MAX17410_SLAVE_ADDR),
+   },
+};
+#endif
+
 static struct msm_i2c_platform_data msm8960_i2c_qup_gsbi4_pdata = {
 	.clk_freq = 100000,
 	.src_clk_rate = 24000000,
 };
 
+static void gsbi_qup_i2c_gpio_config(int adap_id, int config_type)
+{
+}
+
+#if defined(CONFIG_KTTECH_TOUCH_MMS100)
+static struct msm_i2c_platform_data msm8960_i2c_qup_gsbi3_pdata = {
+    .clk_freq = 400000,
+    .src_clk_rate = 24000000,
+    .msm_i2c_config_gpio = gsbi_qup_i2c_gpio_config,
+};
+#else
 static struct msm_i2c_platform_data msm8960_i2c_qup_gsbi3_pdata = {
 	.clk_freq = 100000,
 	.src_clk_rate = 24000000,
 };
+#endif
+
+#ifdef CONFIG_KTTECH_TDMB_SERVICE
+static struct msm_spi_platform_data msm8960_qup_spi_gsbi9_pdata = {
+	.max_clock_speed = 10800000, //12000000,
+};
+
+static struct spi_board_info msm_dmb_spi_board_info[] __initdata = {
+	{
+		.modalias       = "tdmb",
+		.mode           = SPI_MODE_0,
+		.bus_num        = 1,
+		.chip_select    = 0,
+		.max_speed_hz   = 10800000,
+		.platform_data = &msm8960_qup_spi_gsbi9_pdata
+	},
+};
+#endif
 
 static struct msm_i2c_platform_data msm8960_i2c_qup_gsbi10_pdata = {
 	.clk_freq = 100000,
@@ -2329,12 +2480,20 @@
 	.src_clk_rate = 24000000,
 };
 
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+static struct msm_i2c_platform_data msm8960_i2c_qup_gsbi1_pdata = {
+	.clk_freq = 100000,
+	.src_clk_rate = 24000000,
+};
+#endif
+
 static struct msm_pm_sleep_status_data msm_pm_slp_sts_data = {
 	.base_addr = MSM_ACC0_BASE + 0x08,
 	.cpu_offset = MSM_ACC1_BASE - MSM_ACC0_BASE,
 	.mask = 1UL << 13,
 };
 
+#ifndef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
 static struct ks8851_pdata spi_eth_pdata = {
 	.irq_gpio = KS8851_IRQ_GPIO,
 	.rst_gpio = KS8851_RST_GPIO,
@@ -2358,6 +2517,7 @@
 		.mode                   = SPI_MODE_0,
 	},
 };
+#endif
 
 static struct platform_device msm_device_saw_core0 = {
 	.name          = "saw-regulator",
@@ -2442,6 +2602,7 @@
 		.platform_data = &msm_rpm_regulator_pdata,
 	},
 };
+#ifndef CONFIG_KTTECH_TDMB_SERVICE
 #ifdef CONFIG_SERIAL_MSM_HS
 static int configure_uart_gpios(int on)
 {
@@ -2473,22 +2634,91 @@
 #else
 static struct msm_serial_hs_platform_data msm_uart_dm9_pdata;
 #endif
+#endif
+
+#ifdef CONFIG_MACH_KTTECH
+static int kttech_hw_ver = 0;
+static int kttech_is_ftm = 0;
+
+static int __init kttech_hw_ver_setup(char *support)
+{
+    kttech_hw_ver = support[0]-'0';
+
+	return 1;
+}
+__setup("kttech_hw_ver=", kttech_hw_ver_setup);
+int get_kttech_hw_version(void)
+{
+  return kttech_hw_ver;
+}
+EXPORT_SYMBOL(get_kttech_hw_version);
+
+static int __init kttech_ftm_mode_setup(char *support)
+{
+    kttech_is_ftm = support[0]-'0';
+
+	return 1;
+}
+__setup("kttech_ftm=", kttech_ftm_mode_setup);
+int get_kttech_ftm_mode(void)
+{
+  return (kttech_is_ftm&0x03); // Remove Factory nFAT Reset Flags
+}
+EXPORT_SYMBOL(get_kttech_ftm_mode);
+
+
+static int kttech_is_recovery = 0;
+
+static int __init kttech_recovery_mode_setup(char *support)
+{
+    kttech_is_recovery = support[0]-'0';
+
+	return 1;
+}
+__setup("kttech_recovery=", kttech_recovery_mode_setup);
+int get_kttech_recovery_mode(void)
+{
+  return kttech_is_recovery;
+}
+EXPORT_SYMBOL(get_kttech_recovery_mode);
+
+#endif
+
+
+#ifdef CONFIG_MACH_KTTECH
+extern struct platform_device ram_console_device;
+#endif
 
 static struct platform_device *common_devices[] __initdata = {
+#ifdef CONFIG_MACH_KTTECH
+	&ram_console_device,
+#endif
 	&msm8960_device_acpuclk,
 	&msm8960_device_dmov,
 	&msm_device_smd,
 	&msm_device_uart_dm6,
+#ifndef CONFIG_KTTECH_TDMB_SERVICE
 	&msm_device_uart_dm9,
+#endif
 	&msm_device_saw_core0,
 	&msm_device_saw_core1,
 	&msm8960_device_ext_5v_vreg,
 	&msm8960_device_ssbi_pmic,
 	&msm8960_device_ext_otg_sw_vreg,
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	&msm8960_device_qup_i2c_gsbi1,
+#else
 	&msm8960_device_qup_spi_gsbi1,
+#endif
 	&msm8960_device_qup_i2c_gsbi3,
 	&msm8960_device_qup_i2c_gsbi4,
+//namjja
+	#if defined(CONFIG_KTTECH_TDMB_SERVICE)
+	&msm8960_device_qup_spi_gsbi9,
+	#endif
+#if defined(CONFIG_KTTECH_PN544_NFC)
 	&msm8960_device_qup_i2c_gsbi10,
+#endif	
 #ifndef CONFIG_MSM_DSPS
 	&msm8960_device_qup_i2c_gsbi12,
 #endif
@@ -2695,6 +2925,12 @@
 
 	msm8960_device_qup_i2c_gsbi12.dev.platform_data =
 					&msm8960_i2c_qup_gsbi12_pdata;
+
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	msm8960_device_qup_i2c_gsbi1.dev.platform_data =
+					&msm8960_i2c_qup_gsbi1_pdata;
+#endif
+
 }
 
 static void __init msm8960_gfx_init(void)
@@ -2917,12 +3153,21 @@
 		ARRAY_SIZE(isl_charger_i2c_info),
 	},
 #endif /* CONFIG_ISL9519_CHARGER */
+#if defined(CONFIG_KTTECH_TOUCH_MMS100)
+	{
+		I2C_SURF | I2C_FFA | I2C_FLUID,
+		MSM_8960_GSBI3_QUP_I2C_BUS_ID,
+		mms100_boardinfo,
+		ARRAY_SIZE(mms100_boardinfo),
+	},
+#else
 	{
 		I2C_SURF | I2C_FFA | I2C_FLUID,
 		MSM_8960_GSBI3_QUP_I2C_BUS_ID,
 		cyttsp_info,
 		ARRAY_SIZE(cyttsp_info),
 	},
+#endif
 	{
 		I2C_LIQUID,
 		MSM_8960_GSBI3_QUP_I2C_BUS_ID,
@@ -2947,6 +3192,22 @@
 		liquid_io_expander_i2c_info,
 		ARRAY_SIZE(liquid_io_expander_i2c_info),
 	},
+#if defined(CONFIG_KTTECH_PN544_NFC)
+    {
+		I2C_SURF | I2C_FFA | I2C_FLUID,
+		MSM_8960_GSBI10_QUP_I2C_BUS_ID,
+		nxp_chipinfo,
+		ARRAY_SIZE(nxp_chipinfo),
+	},
+#endif
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	{
+		I2C_SURF | I2C_FFA | I2C_FLUID,
+		MSM_8960_GSBI1_QUP_I2C_BUS_ID,
+		max17040_i2c_info,
+		ARRAY_SIZE(max17040_i2c_info),
+	},
+#endif
 };
 #endif /* CONFIG_I2C */
 
@@ -3034,9 +3295,11 @@
 	msm8960_pm8921_gpio_mpp_init();
 	platform_add_devices(sim_devices, ARRAY_SIZE(sim_devices));
 
+#if !defined(CONFIG_KTTECH_BATTERY_GAUGE_MAXIM)
 	msm8960_device_qup_spi_gsbi1.dev.platform_data =
 				&msm8960_qup_spi_gsbi1_pdata;
 	spi_register_board_info(spi_board_info, ARRAY_SIZE(spi_board_info));
+#endif
 
 	msm8960_init_mmc();
 	msm8960_init_fb();
@@ -3056,9 +3319,13 @@
 	platform_device_register(&msm8960_device_rpm_regulator);
 	msm8960_init_gpiomux();
 	msm8960_init_pmic();
+
+#if !defined(CONFIG_KTTECH_BATTERY_GAUGE_MAXIM)
 	msm8960_device_qup_spi_gsbi1.dev.platform_data =
 				&msm8960_qup_spi_gsbi1_pdata;
 	spi_register_board_info(spi_board_info, ARRAY_SIZE(spi_board_info));
+#endif
+
 	msm8960_i2c_init();
 	msm_spm_init(msm_spm_data, ARRAY_SIZE(msm_spm_data));
 	msm_spm_l2_init(msm_spm_l2_data);
@@ -3108,9 +3375,18 @@
 					machine_is_msm8960_liquid())
 		msm_device_hsic_host.dev.parent = &smsc_hub_device.dev;
 	msm8960_init_gpiomux();
+
+#if !defined(CONFIG_KTTECH_BATTERY_GAUGE_MAXIM)
 	msm8960_device_qup_spi_gsbi1.dev.platform_data =
 				&msm8960_qup_spi_gsbi1_pdata;
 	spi_register_board_info(spi_board_info, ARRAY_SIZE(spi_board_info));
+#endif
+
+	#if defined(CONFIG_KTTECH_TDMB_SERVICE)
+	msm8960_device_qup_spi_gsbi9.dev.platform_data =
+			       &msm8960_qup_spi_gsbi9_pdata;
+	spi_register_board_info(msm_dmb_spi_board_info, ARRAY_SIZE(msm_dmb_spi_board_info));
+	#endif
 
 	msm8960_init_pmic();
 	if ((SOCINFO_VERSION_MAJOR(socinfo_get_version()) >= 2 &&
@@ -3132,11 +3408,13 @@
 	else
 		platform_device_register(&msm8960_device_uart_gsbi5);
 
+#ifndef CONFIG_KTTECH_TDMB_SERVICE
 	/* For 8960 Fusion 2.2 Primary IPC */
 	if (socinfo_get_platform_subtype() == PLATFORM_SUBTYPE_SGLTE) {
 		msm_uart_dm9_pdata.wakeup_irq = gpio_to_irq(94); /* GSBI9(2) */
 		msm_device_uart_dm9.dev.platform_data = &msm_uart_dm9_pdata;
 	}
+#endif
 
 	platform_add_devices(common_devices, ARRAY_SIZE(common_devices));
 	msm8960_pm8921_gpio_mpp_init();
diff -urN caf/arch/arm/mach-msm/board-8960.h for-diff/arch/arm/mach-msm/board-8960.h
--- caf/arch/arm/mach-msm/board-8960.h	2015-09-08 23:43:48.599167046 +0900
+++ for-diff/arch/arm/mach-msm/board-8960.h	2015-09-13 14:02:58.617921000 +0900
@@ -86,6 +86,8 @@
 void msm8960_set_display_params(char *prim_panel, char *ext_panel);
 void msm8960_pm8921_gpio_mpp_init(void);
 void msm8960_mdp_writeback(struct memtype_reserve *reserve_table);
+
+#define MSM_8960_GSBI1_QUP_I2C_BUS_ID 1
 #define MSM_8960_GSBI4_QUP_I2C_BUS_ID 4
 #define MSM_8960_GSBI3_QUP_I2C_BUS_ID 3
 #define MSM_8960_GSBI10_QUP_I2C_BUS_ID 10
diff -urN caf/arch/arm/mach-msm/cache_erp.c for-diff/arch/arm/mach-msm/cache_erp.c
--- caf/arch/arm/mach-msm/cache_erp.c	2015-09-08 23:43:48.607167046 +0900
+++ for-diff/arch/arm/mach-msm/cache_erp.c	2015-09-13 14:02:58.621921000 +0900
@@ -356,6 +356,10 @@
 
 	print_alert = print_access_errors() || (l2esr & L2ESR_ACCESS_ERR_MASK);
 
+#if 1 //KTTECH_TEST
+	print_alert = 0;
+#endif
+
 	if (print_alert) {
 		pr_alert("L2 Error detected!\n");
 		pr_alert("\tL2ESR    = 0x%08x\n", l2esr);
diff -urN caf/arch/arm/mach-msm/clock-8960.c for-diff/arch/arm/mach-msm/clock-8960.c
--- caf/arch/arm/mach-msm/clock-8960.c	2015-09-08 23:43:48.607167046 +0900
+++ for-diff/arch/arm/mach-msm/clock-8960.c	2015-09-13 14:02:58.621921000 +0900
@@ -5454,7 +5454,11 @@
 	CLK_LOOKUP("core_clk",		gsbi10_uart_clk.c,	""),
 	CLK_LOOKUP("core_clk",		gsbi11_uart_clk.c,	""),
 	CLK_LOOKUP("core_clk",		gsbi12_uart_clk.c,	""),
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	CLK_LOOKUP("core_clk",		gsbi1_qup_clk.c,	"qup_i2c.1"),
+#else
 	CLK_LOOKUP("core_clk",		gsbi1_qup_clk.c,	"spi_qsd.0"),
+#endif
 	CLK_LOOKUP("core_clk",		gsbi2_qup_clk.c,	""),
 	CLK_LOOKUP("core_clk",		gsbi3_qup_clk.c,	"qup_i2c.3"),
 	CLK_LOOKUP("core_clk",		gsbi4_qup_clk.c,	"qup_i2c.4"),
@@ -5462,7 +5466,11 @@
 	CLK_LOOKUP("core_clk",		gsbi6_qup_clk.c,	""),
 	CLK_LOOKUP("core_clk",		gsbi7_qup_clk.c,	""),
 	CLK_LOOKUP("core_clk",		gsbi8_qup_clk.c,	""),
+#if defined(CONFIG_KTTECH_TDMB_SERVICE)
+    CLK_LOOKUP("core_clk",		gsbi9_qup_clk.c,	"spi_qsd.1"),
+#else
 	CLK_LOOKUP("core_clk",		gsbi9_qup_clk.c,	""),
+#endif
 	CLK_LOOKUP("core_clk",		gsbi10_qup_clk.c,	"qup_i2c.10"),
 	CLK_LOOKUP("core_clk",		gsbi11_qup_clk.c,	""),
 	CLK_LOOKUP("core_clk",		gsbi12_qup_clk.c,	"qup_i2c.12"),
@@ -5494,7 +5502,11 @@
 	CLK_LOOKUP("core_clk",		ce1_core_clk.c,		"qce.0"),
 	CLK_LOOKUP("core_clk",		ce1_core_clk.c,		"qcrypto.0"),
 	CLK_LOOKUP("dma_bam_pclk",	dma_bam_p_clk.c,	NULL),
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	CLK_LOOKUP("iface_clk",		gsbi1_p_clk.c,		"qup_i2c.1"),
+#else
 	CLK_LOOKUP("iface_clk",		gsbi1_p_clk.c,		"spi_qsd.0"),
+#endif
 	CLK_LOOKUP("iface_clk",		gsbi2_p_clk.c,		""),
 	CLK_LOOKUP("iface_clk",		gsbi3_p_clk.c,		"qup_i2c.3"),
 	CLK_LOOKUP("iface_clk",		gsbi4_p_clk.c,		"qup_i2c.4"),
@@ -5502,7 +5514,11 @@
 	CLK_LOOKUP("iface_clk",		gsbi6_p_clk.c,  "msm_serial_hs.0"),
 	CLK_LOOKUP("iface_clk",		gsbi7_p_clk.c,		""),
 	CLK_LOOKUP("iface_clk",		gsbi8_p_clk.c,	"msm_serial_hsl.1"),
+#if defined(CONFIG_KTTECH_TDMB_SERVICE)
+	CLK_LOOKUP("iface_clk",     gsbi9_p_clk.c,      "spi_qsd.1"),
+#else
 	CLK_LOOKUP("iface_clk",		gsbi9_p_clk.c,  "msm_serial_hs.1"),
+#endif
 	CLK_LOOKUP("iface_clk",		gsbi10_p_clk.c,		"qup_i2c.10"),
 	CLK_LOOKUP("iface_clk",		gsbi11_p_clk.c,		""),
 	CLK_LOOKUP("iface_clk",		gsbi12_p_clk.c,		"qup_i2c.12"),
diff -urN caf/arch/arm/mach-msm/devices-8960.c for-diff/arch/arm/mach-msm/devices-8960.c
--- caf/arch/arm/mach-msm/devices-8960.c	2015-09-08 23:43:48.611167046 +0900
+++ for-diff/arch/arm/mach-msm/devices-8960.c	2015-09-13 14:02:58.625921000 +0900
@@ -1286,7 +1286,12 @@
 
 static struct msm_watchdog_pdata msm_watchdog_pdata = {
 	.pet_time = 10000,
+#ifdef CONFIG_MACH_KTTECH
+	.bark_time = 15000,
+#else
 	.bark_time = 11000,
+#endif
+
 	.has_secure = true,
 };
 
@@ -1485,6 +1490,37 @@
 	.resource	= resources_qup_i2c_gsbi12,
 };
 
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+static struct resource resources_qup_i2c_gsbi1[] = {
+	{
+		.name	= "gsbi_qup_i2c_addr",
+		.start	= MSM_GSBI1_PHYS,
+		.end	= MSM_GSBI1_PHYS + 4 - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "qup_phys_addr",
+		.start	= MSM_GSBI1_QUP_PHYS,
+		.end	= MSM_GSBI1_QUP_PHYS + MSM_QUP_SIZE - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.name	= "qup_err_intr",
+		.start	= MSM8960_GSBI1_QUP_IRQ,
+		.end	= MSM8960_GSBI1_QUP_IRQ,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+struct platform_device msm8960_device_qup_i2c_gsbi1 = {
+	.name		= "qup_i2c",
+	.id		= 1,
+	.num_resources	= ARRAY_SIZE(resources_qup_i2c_gsbi1),
+	.resource	= resources_qup_i2c_gsbi1,
+};
+#endif
+
+
 #ifdef CONFIG_MSM_CAMERA
 static struct resource msm_cam_gsbi4_i2c_mux_resources[] = {
 	{
@@ -1827,6 +1863,7 @@
 	.num_resources  = ARRAY_SIZE(resources_ssbi_pmic),
 };
 
+#ifndef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
 static struct resource resources_qup_spi_gsbi1[] = {
 	{
 		.name   = "spi_base",
@@ -1884,6 +1921,73 @@
 	.num_resources	= ARRAY_SIZE(resources_qup_spi_gsbi1),
 	.resource	= resources_qup_spi_gsbi1,
 };
+#endif
+
+#if defined(CONFIG_KTTECH_TDMB_SERVICE)
+static struct resource resources_qup_spi_gsbi9[] = {
+	{
+		.name   = "spi_base",
+		.start  = MSM_GSBI9_QUP_PHYS,
+		.end    = MSM_GSBI9_QUP_PHYS + SZ_4K - 1,
+		.flags  = IORESOURCE_MEM,
+	},
+	{
+		.name   = "gsbi_base",
+		.start  = MSM_GSBI9_PHYS,
+		.end    = MSM_GSBI9_PHYS + 4 - 1,
+		.flags  = IORESOURCE_MEM,
+	},
+	{
+		.name   = "spi_irq_in",
+		.start  = GSBI9_QUP_IRQ,
+		.end    = GSBI9_QUP_IRQ,
+		.flags  = IORESOURCE_IRQ,
+	},
+	{
+		.name = "spidm_channels",
+		.start	= 9,
+		.end	= 10,
+		.flags = IORESOURCE_DMA,
+	},
+	{
+		.name = "spidm_crci",
+		.start	= 12,
+		.end	= 13,
+		.flags = IORESOURCE_DMA,
+	},
+	{
+		.name   = "spi_clk",
+		.start  = 96,
+		.end    = 96,
+		.flags  = IORESOURCE_IO,
+	},
+	{
+		.name   = "spi_miso",
+		.start  = 94,
+		.end    = 94,
+		.flags  = IORESOURCE_IO,
+	},
+	{
+		.name   = "spi_mosi",
+		.start  = 93,
+		.end    = 93,
+		.flags  = IORESOURCE_IO,
+	},
+	{
+		.name   = "spi_cs",
+		.start  = 95,
+		.end    = 95,
+		.flags  = IORESOURCE_IO,
+	},
+};
+
+struct platform_device msm8960_device_qup_spi_gsbi9 = {
+	.name   = "spi_qsd",
+	.id     = 1,
+	.num_resources  = ARRAY_SIZE(resources_qup_spi_gsbi9),
+	.resource       = resources_qup_spi_gsbi9,
+};
+#endif
 
 struct platform_device msm_pcm = {
 	.name	= "msm-pcm-dsp",
diff -urN caf/arch/arm/mach-msm/devices.h for-diff/arch/arm/mach-msm/devices.h
--- caf/arch/arm/mach-msm/devices.h	2015-09-08 23:43:48.611167046 +0900
+++ for-diff/arch/arm/mach-msm/devices.h	2015-09-13 14:02:58.625921000 +0900
@@ -64,7 +64,14 @@
 extern struct platform_device msm8960_device_qup_i2c_gsbi9;
 extern struct platform_device msm8960_device_qup_i2c_gsbi10;
 extern struct platform_device msm8960_device_qup_i2c_gsbi12;
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+extern struct platform_device msm8960_device_qup_i2c_gsbi1;
+#else
 extern struct platform_device msm8960_device_qup_spi_gsbi1;
+#endif
+#if defined(CONFIG_KTTECH_TDMB_SERVICE)
+extern struct platform_device msm8960_device_qup_spi_gsbi9;
+#endif
 extern struct platform_device msm8960_gemini_device;
 extern struct platform_device msm8960_mercury_device;
 extern struct platform_device msm8960_device_i2c_mux_gsbi4;
diff -urN caf/arch/arm/mach-msm/include/mach/board.h for-diff/arch/arm/mach-msm/include/mach/board.h
--- caf/arch/arm/mach-msm/include/mach/board.h	2015-09-08 23:43:48.615167046 +0900
+++ for-diff/arch/arm/mach-msm/include/mach/board.h	2015-09-13 14:02:58.629921000 +0900
@@ -104,6 +104,13 @@
 	enum pmic8058_leds led_src_1;
 	enum pmic8058_leds led_src_2;
 	int (*pmic_set_current)(enum pmic8058_leds id, unsigned mA);
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* implement camera flash led by PMIC */
+#ifdef CONFIG_KTTECH_FLASH_PMIC
+	int (*pmic_set_current_kb_light)(int value);
+	//int (*pmic_set_current_kb_light)(enum led_brightness value);
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 };
 
 struct msm_camera_sensor_flash_pwm {
@@ -619,5 +626,33 @@
 
 extern unsigned int msm_shared_ram_phys; /* defined in arch/arm/mach-msm/io.c */
 
+#ifdef CONFIG_MACH_KTTECH
+enum HW_VER_CHECK_E {
+  NONE_HW_VER   = (-1),
+  PT_HW_VER        = (0),
+  ES1_HW_VER      = (1),
+  ES2_HW_VER      = (2),
+  PP1_HW_VER      = (3),
+  PP2_HW_VER      = (4),
+  MP1_HW_VER      = (5),
+  MP2_HW_VER      = (6),
+  MAX_HW_VER,
+};
+
+enum KTTECH_FTM_MODE_E {
+  KTTECH_FTM_MODE_NONE = (0),
+  NORMAL_MODE          = (1),
+  FTM_MODE_NO_LCD      = (2),
+  FTM_MODE_1           = (3),
+  FTM_MODE_2           = (4),
+  FTM_MODE_3           = (5),
+  FTM_MODE_ERASE_NFAT  = (6),
+  FTM_MODE_5           = (7),
+  FTM_MODE_MAX,
+};
+
+int get_kttech_hw_version(void);
+int get_kttech_ftm_mode(void);
+#endif
 
 #endif
diff -urN caf/arch/arm/mach-msm/modem-8960.c for-diff/arch/arm/mach-msm/modem-8960.c
--- caf/arch/arm/mach-msm/modem-8960.c	2015-09-08 23:43:48.631167047 +0900
+++ for-diff/arch/arm/mach-msm/modem-8960.c	2015-09-13 14:02:58.661921000 +0900
@@ -69,6 +69,18 @@
 	subsystem_restart("modem");
 }
 
+#ifdef CONFIG_MACH_KTTECH
+#define FEATURE_MODEM_RESTART_MONITOR
+#endif
+
+#ifdef FEATURE_MODEM_RESTART_MONITOR
+extern int get_kttech_recovery_mode(void);
+
+#define MAX_MODEM_RESTART_NUM 10
+static int modem_restart_num = 0;
+#endif
+
+
 static void modem_wdog_check(struct work_struct *work)
 {
 	void __iomem *q6_sw_wdog_addr;
@@ -80,10 +92,24 @@
 
 	regval = readl_relaxed(q6_sw_wdog_addr);
 	if (!regval) {
+#ifdef FEATURE_MODEM_RESTART_MONITOR
+		if(get_kttech_recovery_mode() || (++modem_restart_num < MAX_MODEM_RESTART_NUM)) {
+			pr_err("modem-8960: Modem watchdog wasn't activated!. Restarting the modem now. restart num = %d \n", modem_restart_num);
+			restart_modem();
+		}else{
+			panic("Unable to complete restarting modem \n");
+		}
+#else
 		pr_err("modem-8960: Modem watchdog wasn't activated!. Restarting the modem now.\n");
 		restart_modem();
+#endif
 	}
-
+#ifdef FEATURE_MODEM_RESTART_MONITOR
+	else {
+		printk("modem-8960: modem watchdog status check complete");
+		modem_restart_num = 0;
+	}
+#endif
 	iounmap(q6_sw_wdog_addr);
 }
 
diff -urN caf/arch/arm/mach-msm/msm_rq_stats.c for-diff/arch/arm/mach-msm/msm_rq_stats.c
--- caf/arch/arm/mach-msm/msm_rq_stats.c	2015-09-08 23:43:48.631167047 +0900
+++ for-diff/arch/arm/mach-msm/msm_rq_stats.c	2015-09-13 14:02:58.661921000 +0900
@@ -1,4 +1,4 @@
-/* Copyright (c) 2010-2012, Code Aurora Forum. All rights reserved.
+/* Copyright (c) 2010-2011, Code Aurora Forum. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -11,7 +11,7 @@
  *
  */
 /*
- * Qualcomm MSM Runqueue Stats and cpu utilization Interface for Userspace
+ * Qualcomm MSM Runqueue Stats Interface for Userspace
  */
 #include <linux/kernel.h>
 #include <linux/init.h>
@@ -26,183 +26,12 @@
 #include <linux/sched.h>
 #include <linux/spinlock.h>
 #include <linux/rq_stats.h>
-#include <linux/cpufreq.h>
-#include <linux/kernel_stat.h>
-#include <linux/tick.h>
 #include <asm/smp_plat.h>
 
 #define MAX_LONG_SIZE 24
 #define DEFAULT_RQ_POLL_JIFFIES 1
 #define DEFAULT_DEF_TIMER_JIFFIES 5
 
-struct notifier_block freq_transition;
-struct notifier_block cpu_hotplug;
-
-struct cpu_load_data {
-	cputime64_t prev_cpu_idle;
-	cputime64_t prev_cpu_wall;
-	cputime64_t prev_cpu_iowait;
-	unsigned int avg_load_maxfreq;
-	unsigned int samples;
-	unsigned int window_size;
-	unsigned int cur_freq;
-	unsigned int policy_max;
-	cpumask_var_t related_cpus;
-	struct mutex cpu_load_mutex;
-};
-
-static DEFINE_PER_CPU(struct cpu_load_data, cpuload);
-
-static inline u64 get_cpu_idle_time_jiffy(unsigned int cpu, u64 *wall)
-{
-	u64 idle_time;
-	u64 cur_wall_time;
-	u64 busy_time;
-
-	cur_wall_time = jiffies64_to_cputime64(get_jiffies_64());
-
-	busy_time  = kcpustat_cpu(cpu).cpustat[CPUTIME_USER];
-	busy_time += kcpustat_cpu(cpu).cpustat[CPUTIME_SYSTEM];
-	busy_time += kcpustat_cpu(cpu).cpustat[CPUTIME_IRQ];
-	busy_time += kcpustat_cpu(cpu).cpustat[CPUTIME_SOFTIRQ];
-	busy_time += kcpustat_cpu(cpu).cpustat[CPUTIME_STEAL];
-	busy_time += kcpustat_cpu(cpu).cpustat[CPUTIME_NICE];
-
-	idle_time = cur_wall_time - busy_time;
-	if (wall)
-		*wall = jiffies_to_usecs(cur_wall_time);
-
-	return jiffies_to_usecs(idle_time);
-}
-
-static inline cputime64_t get_cpu_idle_time(unsigned int cpu, cputime64_t *wall)
-{
-	u64 idle_time = get_cpu_idle_time_us(cpu, NULL);
-
-	if (idle_time == -1ULL)
-		return get_cpu_idle_time_jiffy(cpu, wall);
-	else
-		idle_time += get_cpu_iowait_time_us(cpu, wall);
-
-	return idle_time;
-}
-
-static inline cputime64_t get_cpu_iowait_time(unsigned int cpu,
-							cputime64_t *wall)
-{
-	u64 iowait_time = get_cpu_iowait_time_us(cpu, wall);
-
-	if (iowait_time == -1ULL)
-		return 0;
-
-	return iowait_time;
-}
-
-static int update_average_load(unsigned int freq, unsigned int cpu)
-{
-
-	struct cpu_load_data *pcpu = &per_cpu(cpuload, cpu);
-	cputime64_t cur_wall_time, cur_idle_time, cur_iowait_time;
-	unsigned int idle_time, wall_time, iowait_time;
-	unsigned int cur_load, load_at_max_freq;
-
-	cur_idle_time = get_cpu_idle_time(cpu, &cur_wall_time);
-	cur_iowait_time = get_cpu_iowait_time(cpu, &cur_wall_time);
-
-	wall_time = (unsigned int) (cur_wall_time - pcpu->prev_cpu_wall);
-	pcpu->prev_cpu_wall = cur_wall_time;
-
-	idle_time = (unsigned int) (cur_idle_time - pcpu->prev_cpu_idle);
-	pcpu->prev_cpu_idle = cur_idle_time;
-
-	iowait_time = (unsigned int) (cur_iowait_time - pcpu->prev_cpu_iowait);
-	pcpu->prev_cpu_iowait = cur_iowait_time;
-
-	if (idle_time >= iowait_time)
-		idle_time -= iowait_time;
-
-	if (unlikely(!wall_time || wall_time < idle_time))
-		return 0;
-
-	cur_load = 100 * (wall_time - idle_time) / wall_time;
-
-	/* Calculate the scaled load across CPU */
-	load_at_max_freq = (cur_load * freq) / pcpu->policy_max;
-
-	if (!pcpu->avg_load_maxfreq) {
-		/* This is the first sample in this window*/
-		pcpu->avg_load_maxfreq = load_at_max_freq;
-		pcpu->window_size = wall_time;
-	} else {
-		/*
-		 * The is already a sample available in this window.
-		 * Compute weighted average with prev entry, so that we get
-		 * the precise weighted load.
-		 */
-		pcpu->avg_load_maxfreq =
-			((pcpu->avg_load_maxfreq * pcpu->window_size) +
-			(load_at_max_freq * wall_time)) /
-			(wall_time + pcpu->window_size);
-
-		pcpu->window_size += wall_time;
-	}
-
-	return 0;
-}
-
-static unsigned int report_load_at_max_freq(void)
-{
-	int cpu;
-	struct cpu_load_data *pcpu;
-	unsigned int total_load = 0;
-
-	for_each_online_cpu(cpu) {
-		pcpu = &per_cpu(cpuload, cpu);
-		mutex_lock(&pcpu->cpu_load_mutex);
-		update_average_load(pcpu->cur_freq, cpu);
-		total_load += pcpu->avg_load_maxfreq;
-		pcpu->avg_load_maxfreq = 0;
-		mutex_unlock(&pcpu->cpu_load_mutex);
-	}
-	return total_load;
-}
-
-static int cpufreq_transition_handler(struct notifier_block *nb,
-			unsigned long val, void *data)
-{
-	struct cpufreq_freqs *freqs = data;
-	struct cpu_load_data *this_cpu = &per_cpu(cpuload, freqs->cpu);
-	int j;
-
-	switch (val) {
-	case CPUFREQ_POSTCHANGE:
-		for_each_cpu(j, this_cpu->related_cpus) {
-			struct cpu_load_data *pcpu = &per_cpu(cpuload, j);
-			mutex_lock(&pcpu->cpu_load_mutex);
-			update_average_load(freqs->old, freqs->cpu);
-			pcpu->cur_freq = freqs->new;
-			mutex_unlock(&pcpu->cpu_load_mutex);
-		}
-		break;
-	}
-	return 0;
-}
-
-static int cpu_hotplug_handler(struct notifier_block *nb,
-			unsigned long val, void *data)
-{
-	unsigned int cpu = (unsigned long)data;
-	struct cpu_load_data *this_cpu = &per_cpu(cpuload, cpu);
-
-	switch (val) {
-	case CPU_ONLINE:
-	case CPU_ONLINE_FROZEN:
-		this_cpu->avg_load_maxfreq = 0;
-	}
-
-	return NOTIFY_OK;
-}
-
 static void def_work_fn(struct work_struct *work)
 {
 	int64_t diff;
@@ -292,18 +121,7 @@
 	__ATTR(def_timer_ms, S_IWUSR | S_IRUSR, show_def_timer_ms,
 			store_def_timer_ms);
 
-static ssize_t show_cpu_normalized_load(struct kobject *kobj,
-		struct kobj_attribute *attr, char *buf)
-{
-	return snprintf(buf, MAX_LONG_SIZE, "%u\n", report_load_at_max_freq());
-}
-
-static struct kobj_attribute cpu_normalized_load_attr =
-	__ATTR(cpu_normalized_load, S_IWUSR | S_IRUSR, show_cpu_normalized_load,
-			NULL);
-
 static struct attribute *rq_attrs[] = {
-	&cpu_normalized_load_attr.attr,
 	&def_timer_ms_attr.attr,
 	&run_queue_avg_attr.attr,
 	&run_queue_poll_ms_attr.attr,
@@ -339,8 +157,7 @@
 static int __init msm_rq_stats_init(void)
 {
 	int ret;
-	int i;
-	struct cpufreq_policy cpu_policy;
+
 	/* Bail out if this is not an SMP Target */
 	if (!is_smp()) {
 		rq_info.init = 0;
@@ -358,20 +175,6 @@
 	ret = init_rq_attribs();
 
 	rq_info.init = 1;
-
-	for_each_possible_cpu(i) {
-		struct cpu_load_data *pcpu = &per_cpu(cpuload, i);
-		mutex_init(&pcpu->cpu_load_mutex);
-		cpufreq_get_policy(&cpu_policy, i);
-		pcpu->policy_max = cpu_policy.cpuinfo.max_freq;
-		cpumask_copy(pcpu->related_cpus, cpu_policy.cpus);
-	}
-	freq_transition.notifier_call = cpufreq_transition_handler;
-	cpu_hotplug.notifier_call = cpu_hotplug_handler;
-	cpufreq_register_notifier(&freq_transition,
-					CPUFREQ_TRANSITION_NOTIFIER);
-	register_hotcpu_notifier(&cpu_hotplug);
-
 	return ret;
 }
 late_initcall(msm_rq_stats_init);
diff -urN caf/arch/arm/mach-msm/msm_watchdog.c for-diff/arch/arm/mach-msm/msm_watchdog.c
--- caf/arch/arm/mach-msm/msm_watchdog.c	2015-09-08 23:43:48.631167047 +0900
+++ for-diff/arch/arm/mach-msm/msm_watchdog.c	2015-09-13 14:02:58.661921000 +0900
@@ -80,7 +80,12 @@
  * On the kernel command line specify msm_watchdog.appsbark=1 to handle
  * watchdog barks in Linux. By default barks are processed by the secure side.
  */
+#ifdef CONFIG_MACH_KTTECH
+static int appsbark = 1;
+#else
 static int appsbark;
+#endif
+
 module_param(appsbark, int, 0);
 
 static int appsbark_fiq;
diff -urN caf/arch/arm/mach-msm/restart.c for-diff/arch/arm/mach-msm/restart.c
--- caf/arch/arm/mach-msm/restart.c	2015-09-08 23:43:48.655167047 +0900
+++ for-diff/arch/arm/mach-msm/restart.c	2015-09-13 14:02:58.685921000 +0900
@@ -35,6 +35,10 @@
 #include "msm_watchdog.h"
 #include "timer.h"
 
+#ifdef CONFIG_MACH_KTTECH
+#include <mach/board.h>
+#endif
+
 #define WDT0_RST	0x38
 #define WDT0_EN		0x40
 #define WDT0_BARK_TIME	0x4C
@@ -50,16 +54,39 @@
 static int restart_mode;
 void *restart_reason;
 
+#ifdef CONFIG_MACH_KTTECH
+/* MSM_RESTART_MAGIC_ADDR */
+extern void msm_write_restart_reason(u32 restart_code); 
+#endif
+
 int pmic_reset_irq;
 static void __iomem *msm_tmr0_base;
 
+#ifdef CONFIG_MACH_KTTECH
+static int kttech_in_panic = 0;
+static int panic_kttech_restart(struct notifier_block *this,
+			      unsigned long event, void *ptr)
+{
+	kttech_in_panic = 1;
+	return NOTIFY_DONE;
+}
+
+static struct notifier_block kttech_panic_blk = {
+	.notifier_call	= panic_kttech_restart,
+};
+#endif
+
 #ifdef CONFIG_MSM_DLOAD_MODE
 static int in_panic;
 static void *dload_mode_addr;
 
 /* Download mode master kill-switch */
 static int dload_set(const char *val, struct kernel_param *kp);
+#ifdef CONFIG_MACH_KTTECH
+static int download_mode = 0;
+#else
 static int download_mode = 1;
+#endif
 module_param_call(download_mode, dload_set, param_get_int,
 			&download_mode, 0644);
 
@@ -132,6 +159,13 @@
 
 static void msm_power_off(void)
 {
+#ifdef CONFIG_MACH_KTTECH
+	printk(KERN_CRIT "msm_power_off \n");
+
+	/* MSM_RESTART_MAGIC_ADDR */
+	msm_write_restart_reason(0x6f656d10);
+#endif
+
 	/* MSM initiated power off, lower ps_hold */
 	__msm_power_off(1);
 }
@@ -197,8 +231,16 @@
 		set_dload_mode(0);
 #endif
 
+#ifdef CONFIG_MACH_KTTECH
+	if (cmd != NULL)
+	{
+		printk(KERN_NOTICE "Going down for restart now. ( restart_reason = %s ) \n", cmd);
+	}else{
+		printk(KERN_NOTICE "Going down for restart now\n");
+	}
+#else
 	printk(KERN_NOTICE "Going down for restart now\n");
-
+#endif
 	pm8xxx_reset_pwr_off(1);
 
 	if (cmd != NULL) {
@@ -210,10 +252,35 @@
 			unsigned long code;
 			code = simple_strtoul(cmd + 4, NULL, 16) & 0xff;
 			__raw_writel(0x6f656d00 | code, restart_reason);
+#ifdef CONFIG_MACH_KTTECH			
+		} else if (!strncmp(cmd, "dload", 5)) {
+			set_dload_mode( 1 );
+			__raw_writel(0x77665501, restart_reason);  	
+			mb();
+#endif
 		} else {
 			__raw_writel(0x77665501, restart_reason);
 		}
+#ifdef CONFIG_MACH_KTTECH
+        if(get_kttech_ftm_mode() && (!strncmp(cmd, "ftm", 3))) // FTM Mode Reboot
+        {
+            __raw_writel(0x6f656d00 | get_kttech_ftm_mode(), restart_reason);
+        }
+        mb(); // Cache Flush Before io unmap
+#endif
 	}
+#ifdef CONFIG_MACH_KTTECH
+	else{
+
+		if(kttech_in_panic){
+			__raw_writel(0x77665503, restart_reason); // KTTECH_PANIC_RESTART_MODE
+			kttech_in_panic = 0;
+		}else{
+			__raw_writel(0x77665501, restart_reason); //RESET_MODE
+		}
+		mb();
+	}
+#endif
 
 	__raw_writel(0, msm_tmr0_base + WDT0_EN);
 	if (!(machine_is_msm8x60_fusion() || machine_is_msm8x60_fusn_ffa())) {
@@ -253,6 +320,9 @@
 
 static int __init msm_restart_init(void)
 {
+#ifdef CONFIG_MACH_KTTECH
+	atomic_notifier_chain_register(&panic_notifier_list, &kttech_panic_blk);
+#endif
 #ifdef CONFIG_MSM_DLOAD_MODE
 	atomic_notifier_chain_register(&panic_notifier_list, &panic_blk);
 	dload_mode_addr = MSM_IMEM_BASE + DLOAD_MODE_ADDR;
@@ -260,6 +330,9 @@
 #endif
 	msm_tmr0_base = msm_timer_get_timer0_base();
 	restart_reason = MSM_IMEM_BASE + RESTART_REASON_ADDR;
+#ifdef CONFIG_MACH_KTTECH
+	__raw_writel(0x77665504, restart_reason);//initial restart_reason for detecting wathchdog reset
+#endif	
 	pm_power_off = msm_power_off;
 
 	return 0;
diff -urN caf/arch/arm/mach-msm/subsystem_restart.c for-diff/arch/arm/mach-msm/subsystem_restart.c
--- caf/arch/arm/mach-msm/subsystem_restart.c	2015-09-08 23:43:48.659167047 +0900
+++ for-diff/arch/arm/mach-msm/subsystem_restart.c	2015-09-13 14:02:58.693921000 +0900
@@ -596,8 +596,11 @@
 {
 	int ret = 0;
 
+#ifdef CONFIG_MACH_KTTECH
+	restart_level = RESET_SUBSYS_INDEPENDENT;
+#else
 	restart_level = RESET_SOC;
-
+#endif
 	ssr_wq = alloc_workqueue("ssr_wq", 0, 0);
 
 	if (!ssr_wq)
diff -urN caf/arch/arm/mach-msm/tspdrv.c for-diff/arch/arm/mach-msm/tspdrv.c
--- caf/arch/arm/mach-msm/tspdrv.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/arch/arm/mach-msm/tspdrv.c	2015-09-13 14:02:58.693921000 +0900
@@ -0,0 +1,576 @@
+/*
+** =========================================================================
+** File:
+**     tspdrv.c
+**
+** Description: 
+**     TouchSense Kernel Module main entry-point.
+**
+** Portions Copyright (c) 2008-2010 Immersion Corporation. All Rights Reserved. 
+**
+** This file contains Original Code and/or Modifications of Original Code 
+** as defined in and that are subject to the GNU Public License v2 - 
+** (the 'License'). You may not use this file except in compliance with the 
+** License. You should have received a copy of the GNU General Public License 
+** along with this program; if not, write to the Free Software Foundation, Inc.,
+** 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or contact 
+** TouchSenseSales@immersion.com.
+**
+** The Original Code and all software distributed under the License are 
+** distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER 
+** EXPRESS OR IMPLIED, AND IMMERSION HEREBY DISCLAIMS ALL SUCH WARRANTIES, 
+** INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS 
+** FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. Please see 
+** the License for the specific language governing rights and limitations 
+** under the License.
+** =========================================================================
+*/
+
+#ifndef __KERNEL__
+#define __KERNEL__
+#endif
+/* Remove below three lines if this is not needed. */
+//#ifndef MODULE
+//#define MODULE
+//#endif
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/timer.h>
+#include <linux/fs.h>
+#include <linux/version.h>
+#include <linux/miscdevice.h>
+#include <linux/platform_device.h>
+#include <asm/uaccess.h>
+#include "tspdrv.h"
+#include "ImmVibeSPI.c"
+#if defined(VIBE_DEBUG) && defined(VIBE_RECORD)
+#include <tspdrvRecorder.c>
+#endif
+
+#ifdef CONFIG_SPIDER_SADR
+#include <linux/sadr.h>
+#endif
+#define TSPDRV_TUNING_ARG1  _IO(TSPDRV_MAGIC_NUMBER & 0xFF, 185)
+#define TSPDRV_TUNING_ARG2  _IO(TSPDRV_MAGIC_NUMBER & 0xFF, 186)
+#define TSPDRV_TUNING_ARG3  _IO(TSPDRV_MAGIC_NUMBER & 0xFF, 187)
+
+/* Device name and version information */
+#define VERSION_STR " v3.4.55.5\n"                  /* DO NOT CHANGE - this is auto-generated */
+#define VERSION_STR_LEN 16                          /* account extra space for future extra digits in version number */
+static char g_szDeviceName[  (VIBE_MAX_DEVICE_NAME_LENGTH 
+                            + VERSION_STR_LEN)
+                            * NUM_ACTUATORS];       /* initialized in init_module */
+static size_t g_cchDeviceName;                      /* initialized in init_module */
+
+/* Flag indicating whether the driver is in use */
+static char g_bIsPlaying = false;
+
+/* Buffer to store data sent to SPI */
+#define SPI_BUFFER_SIZE (NUM_ACTUATORS * (VIBE_OUTPUT_SAMPLE_SIZE + SPI_HEADER_SIZE))
+static int g_bStopRequested = false;
+static actuator_samples_buffer g_SamplesBuffer[NUM_ACTUATORS] = {{0}}; 
+static char g_cWriteBuffer[SPI_BUFFER_SIZE];
+
+/* For QA purposes */
+#ifdef QA_TEST
+#define FORCE_LOG_BUFFER_SIZE   128
+#define TIME_INCREMENT          5
+static int g_nTime = 0;
+static int g_nForceLogIndex = 0;
+static VibeInt8 g_nForceLog[FORCE_LOG_BUFFER_SIZE];
+#endif
+
+#if ((LINUX_VERSION_CODE & 0xFFFF00) < KERNEL_VERSION(2,6,0))
+#error Unsupported Kernel version
+#endif
+
+#ifdef IMPLEMENT_AS_CHAR_DRIVER
+static int g_nMajor = 0;
+#endif
+
+/* Needs to be included after the global variables because it uses them */
+#ifdef CONFIG_HIGH_RES_TIMERS
+    #include "VibeOSKernelLinuxHRTime.c"
+#else
+    #include "VibeOSKernelLinuxTime.c"
+#endif
+
+/* File IO */
+static int open(struct inode *inode, struct file *file);
+static int release(struct inode *inode, struct file *file);
+static ssize_t read(struct file *file, char *buf, size_t count, loff_t *ppos);
+static ssize_t write(struct file *file, const char *buf, size_t count, loff_t *ppos);
+static long unlocked_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
+
+static struct file_operations fops = 
+{
+    .owner =    THIS_MODULE,
+    .read =     read,
+    .write =    write,
+    .unlocked_ioctl =   unlocked_ioctl,
+
+    .open =     open,
+    .release =  release,
+    .llseek =           default_llseek    /* using default implementation as declared in linux/fs.h */
+
+    
+};
+
+#ifndef IMPLEMENT_AS_CHAR_DRIVER
+static struct miscdevice miscdev = 
+{
+	.minor =    MISC_DYNAMIC_MINOR,
+	.name =     MODULE_NAME,
+	.fops =     &fops
+};
+#endif
+
+static int suspend(struct platform_device *pdev, pm_message_t state);
+static int resume(struct platform_device *pdev);
+static struct platform_driver platdrv = 
+{
+    .suspend =  suspend,	
+    .resume =   resume,	
+    .driver = 
+    {		
+        .name = MODULE_NAME,	
+    },	
+};
+#if 0
+
+static void platform_release(struct device *dev);
+static struct platform_device platdev = 
+{	
+	.name =     MODULE_NAME,	
+	.id =       -1,                     /* means that there is only one device */
+	.dev = 
+    {
+		.platform_data = NULL, 		
+		.release = platform_release,    /* a warning is thrown during rmmod if this is absent */
+	},
+};
+#endif
+/* Module info */
+MODULE_AUTHOR("Immersion Corporation");
+MODULE_DESCRIPTION("TouchSense Kernel Module");
+MODULE_LICENSE("GPL v2");
+
+#ifdef CONFIG_SPIDER_SADR
+static int vib_dev_id = -1;
+
+static void tsdrv_spider_set_data(uint32 data, uint32 call_by_sa)
+{
+//  printk(KERN_ERR "tsdrv_spider_set_data arg = %d \n", data);
+  
+  if(data)
+    ImmVibeSPI_ForceOut_AmpEnable(data);
+  else    
+    ImmVibeSPI_ForceOut_AmpDisable(0);
+}
+
+static sadr_control_dev_type vibrator_reg = {
+    .name = "sadr_vib",
+    .dev_type = SADR_DEVICE_MOTOR,
+    .device_on = NULL,
+    .device_off = NULL,
+    .device_set_data = tsdrv_spider_set_data,
+    .device_connection = NULL,
+    .connect_pri = 4,
+    .disconnect_pri = 4,
+};
+#endif
+
+static int __init tspdrv_init(void)
+{
+    int nRet, i;   /* initialized below */
+
+    DbgOut((KERN_ERR "tspdrv: init_module.\n"));
+    printk(KERN_ERR "tspdrv 1: init_module.\n");
+
+#ifdef IMPLEMENT_AS_CHAR_DRIVER
+    g_nMajor = register_chrdev(0, MODULE_NAME, &fops);
+    if (g_nMajor < 0) 
+    {
+        DbgOut((KERN_ERR "tspdrv: can't get major number.\n"));
+        return g_nMajor;
+    }
+#else
+    nRet = misc_register(&miscdev);
+	if (nRet) 
+    {
+        DbgOut((KERN_ERR "tspdrv: misc_register failed.\n"));
+		return nRet;
+	}
+#endif
+#if 0
+	nRet = platform_device_register(&platdev);
+	if (nRet) 
+    {
+        DbgOut((KERN_ERR "tspdrv: platform_device_register failed.\n"));
+    }
+#endif
+	nRet = platform_driver_register(&platdrv);
+	if (nRet) 
+    {
+        DbgOut((KERN_ERR "tspdrv: platform_driver_register failed.\n"));
+    }
+
+    DbgRecorderInit(());
+
+    ImmVibeSPI_ForceOut_Initialize();
+    VibeOSKernelLinuxInitTimer();
+
+    /* Get and concatenate device name and initialize data buffer */
+    g_cchDeviceName = 0;
+    for (i=0; i<NUM_ACTUATORS; i++)
+    {
+        char *szName = g_szDeviceName + g_cchDeviceName;
+        ImmVibeSPI_Device_GetName(i, szName, VIBE_MAX_DEVICE_NAME_LENGTH);
+
+        /* Append version information and get buffer length */
+        strcat(szName, VERSION_STR);
+        g_cchDeviceName += strlen(szName);
+
+        g_SamplesBuffer[i].nIndexPlayingBuffer = -1; /* Not playing */
+        g_SamplesBuffer[i].actuatorSamples[0].nBufferSize = 0;
+        g_SamplesBuffer[i].actuatorSamples[1].nBufferSize = 0;
+    }
+
+#ifdef CONFIG_SPIDER_SADR
+    vib_dev_id = sadr_reg_device(&vibrator_reg);
+#endif
+
+//	ImmVibeSPI_sysfs_init();
+
+    return 0;
+}
+
+static void __exit tspdrv_exit(void)
+{
+    DbgOut((KERN_INFO "tspdrv: cleanup_module.\n"));
+
+    DbgRecorderTerminate(());
+
+    VibeOSKernelLinuxTerminateTimer();
+    ImmVibeSPI_ForceOut_Terminate();
+
+	platform_driver_unregister(&platdrv);
+	//platform_device_unregister(&platdev);
+
+#ifdef IMPLEMENT_AS_CHAR_DRIVER
+    unregister_chrdev(g_nMajor, MODULE_NAME);
+#else
+    misc_deregister(&miscdev);
+#endif
+}
+
+static int open(struct inode *inode, struct file *file) 
+{
+    DbgOut((KERN_INFO "tspdrv: open.\n"));
+
+    //if (!try_module_get(THIS_MODULE)) return -ENODEV;
+
+    return 0; 
+}
+
+static int release(struct inode *inode, struct file *file) 
+{
+    DbgOut((KERN_INFO "tspdrv: release.\n"));
+
+    /* 
+    ** Reset force and stop timer when the driver is closed, to make sure
+    ** no dangling semaphore remains in the system, especially when the
+    ** driver is run outside of immvibed for testing purposes.
+    */
+    VibeOSKernelLinuxStopTimer();
+
+    /* 
+    ** Clear the variable used to store the magic number to prevent 
+    ** unauthorized caller to write data. TouchSense service is the only 
+    ** valid caller.
+    */
+    file->private_data = (void*)NULL;
+
+    //module_put(THIS_MODULE);
+
+    return 0; 
+}
+
+static ssize_t read(struct file *file, char *buf, size_t count, loff_t *ppos)
+{
+    const size_t nBufSize = (g_cchDeviceName > (size_t)(*ppos)) ? min(count, g_cchDeviceName - (size_t)(*ppos)) : 0;
+
+    /* End of buffer, exit */
+    if (0 == nBufSize) return 0;
+
+    if (0 != copy_to_user(buf, g_szDeviceName + (*ppos), nBufSize)) 
+    {
+        /* Failed to copy all the data, exit */
+        DbgOut((KERN_ERR "tspdrv: copy_to_user failed.\n"));
+        return 0;
+    }
+
+    /* Update file position and return copied buffer size */
+    *ppos += nBufSize;
+    return nBufSize;
+}
+
+static ssize_t write(struct file *file, const char *buf, size_t count, loff_t *ppos)
+{
+    int i = 0;
+
+    *ppos = 0;  /* file position not used, always set to 0 */
+
+    /* 
+    ** Prevent unauthorized caller to write data. 
+    ** TouchSense service is the only valid caller.
+    */
+    if (file->private_data != (void*)TSPDRV_MAGIC_NUMBER) 
+    {
+        DbgOut((KERN_ERR "tspdrv: unauthorized write.\n"));
+        return 0;
+    }
+
+    /* Copy immediately the input buffer */
+    if (0 != copy_from_user(g_cWriteBuffer, buf, count))
+    {
+        /* Failed to copy all the data, exit */
+        DbgOut((KERN_ERR "tspdrv: copy_from_user failed.\n"));
+        return 0;
+    }
+
+    /* Check buffer size */
+    if ((count <= SPI_HEADER_SIZE) || (count > SPI_BUFFER_SIZE))
+    {
+        DbgOut((KERN_ERR "tspdrv: invalid write buffer size.\n"));
+        return 0;
+    }
+
+    while (i < count)
+    {
+        int nIndexFreeBuffer;   /* initialized below */
+
+        samples_buffer* pInputBuffer = (samples_buffer*)(&g_cWriteBuffer[i]);
+
+        if ((i + SPI_HEADER_SIZE) >= count)
+        {
+            /*
+            ** Index is about to go beyond the buffer size.
+            ** (Should never happen).
+            */
+            DbgOut((KERN_EMERG "tspdrv: invalid buffer index.\n"));
+        }
+
+        /* Check bit depth */
+        if (8 != pInputBuffer->nBitDepth)
+        {
+            DbgOut((KERN_WARNING "tspdrv: invalid bit depth. Use default value (8).\n"));
+        }
+
+        /* The above code not valid if SPI header size is not 3 */
+#if (SPI_HEADER_SIZE != 3)
+#error "SPI_HEADER_SIZE expected to be 3"
+#endif
+
+        /* Check buffer size */
+        if ((i + SPI_HEADER_SIZE + pInputBuffer->nBufferSize) > count)
+        {
+            /*
+            ** Index is about to go beyond the buffer size.
+            ** (Should never happen).
+            */
+            DbgOut((KERN_EMERG "tspdrv: invalid data size.\n"));
+        }
+        
+        /* Check actuator index */
+        if (NUM_ACTUATORS <= pInputBuffer->nActuatorIndex)
+        {
+            DbgOut((KERN_ERR "tspdrv: invalid actuator index.\n"));
+            i += (SPI_HEADER_SIZE + pInputBuffer->nBufferSize);
+            continue;
+        }
+
+        if (0 == g_SamplesBuffer[pInputBuffer->nActuatorIndex].actuatorSamples[0].nBufferSize)
+        {
+            nIndexFreeBuffer = 0;
+        }
+        else if (0 == g_SamplesBuffer[pInputBuffer->nActuatorIndex].actuatorSamples[1].nBufferSize)
+        {
+             nIndexFreeBuffer = 1;
+        }
+        else
+        {
+            /* No room to store new samples  */
+            DbgOut((KERN_ERR "tspdrv: no room to store new samples.\n"));
+            return 0;
+        }
+
+        /* Store the data in the free buffer of the given actuator */
+        memcpy(&(g_SamplesBuffer[pInputBuffer->nActuatorIndex].actuatorSamples[nIndexFreeBuffer]), &g_cWriteBuffer[i], (SPI_HEADER_SIZE + pInputBuffer->nBufferSize));
+
+        /* If the no buffer is playing, prepare to play g_SamplesBuffer[pInputBuffer->nActuatorIndex].actuatorSamples[nIndexFreeBuffer] */
+        if ( -1 == g_SamplesBuffer[pInputBuffer->nActuatorIndex].nIndexPlayingBuffer)
+        {
+           g_SamplesBuffer[pInputBuffer->nActuatorIndex].nIndexPlayingBuffer = nIndexFreeBuffer;
+           g_SamplesBuffer[pInputBuffer->nActuatorIndex].nIndexOutputValue = 0;
+        }
+
+        /* Increment buffer index */
+        i += (SPI_HEADER_SIZE + pInputBuffer->nBufferSize);
+    }
+
+#ifdef QA_TEST
+    g_nForceLog[g_nForceLogIndex++] = g_cSPIBuffer[0];
+    if (g_nForceLogIndex >= FORCE_LOG_BUFFER_SIZE)
+    {
+        for (i=0; i<FORCE_LOG_BUFFER_SIZE; i++)
+        {
+            printk("<6>%d\t%d\n", g_nTime, g_nForceLog[i]);
+            g_nTime += TIME_INCREMENT;
+        }
+        g_nForceLogIndex = 0;
+    }
+#endif
+
+    /* Start the timer after receiving new output force */
+    g_bIsPlaying = true;
+    VibeOSKernelLinuxStartTimer();
+
+    return count;
+}
+
+//static int ioctl(struct inode *inode, struct file *file, unsigned int cmd, unsigned long arg)
+static long unlocked_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+#ifdef QA_TEST
+    int i;
+#endif
+
+	DbgOut((KERN_INFO "tspdrv: ioctl cmd[0x%x].\n", cmd));
+
+    switch (cmd)
+    {
+#if 0 // We don't used linear motor.     
+#ifdef VIBE_TUNING
+#if 1 //def CONFIG_KTTECH_MODEL_O6
+             case TSPDRV_TUNING_ARG1: //M     // 0x52b9 
+                    printk("[tspdrv] TSPDRV_TUNING_ARG1 arg : %lu\n", arg);
+                    g_nLRA_PWM_M = arg;
+                    break;
+             case TSPDRV_TUNING_ARG2: //N & D  // ox52ba 
+                    printk("[tspdrv] TSPDRV_TUNING_ARG2 arg : %lu\n", arg);
+                    g_nLRA_PWM_N = arg;
+                    g_nLRA_PWM_D= arg >> 1;
+                    break;
+             case TSPDRV_TUNING_ARG3: //Multiplier  // 0x52bb 
+                    printk("[tspdrv] TSPDRV_TUNING_ARG2 arg : %lu\n", arg);
+                    g_nLRA_PWM_Multiplier = arg;
+                    break;
+#endif					
+#ifdef CONFIG_KTTECH_MODEL_O3
+        case TSPDRV_TUNING_ARG1:
+        	g_nLRA_PWM_M = arg; /* set value of g_PWM_duty_max in ImmVibeSPI */
+	DbgOut((KERN_INFO "tspdrv: ioctl cmd[185].\n"));
+        	break;
+        case TSPDRV_TUNING_ARG2:
+        	g_nLRA_PWM_N = arg; /* set value of g_PWM_ctrl in ImmVibeSPI */
+        	g_nLRA_PWM_D = g_nLRA_PWM_N>>1; //D = N/2
+	DbgOut((KERN_INFO "tspdrv: ioctl cmd[186].\n"));
+        	break;
+        case TSPDRV_TUNING_ARG3:
+        	g_nLRA_PWM_Multiplier = arg; /* set value of g_PWM_multiplier in ImmVibeSPI */
+	DbgOut((KERN_INFO "tspdrv: ioctl cmd[187].\n"));
+        	break;
+#endif			
+#endif /* VIBE_TUNING */
+#endif 
+        case TSPDRV_STOP_KERNEL_TIMER:   // 0x5201
+            /* 
+            ** As we send one sample ahead of time, we need to finish playing the last sample
+            ** before stopping the timer. So we just set a flag here.
+            */
+            if (true == g_bIsPlaying) g_bStopRequested = true;
+
+#ifdef VIBEOSKERNELPROCESSDATA
+            /* Last data processing to disable amp and stop timer */
+            VibeOSKernelProcessData(NULL);
+#endif
+
+#ifdef QA_TEST
+            if (g_nForceLogIndex)
+            {
+                for (i=0; i<g_nForceLogIndex; i++)
+                {
+                    printk("<6>%d\t%d\n", g_nTime, g_nForceLog[i]);
+                    g_nTime += TIME_INCREMENT;
+                }
+            }
+            g_nTime = 0;
+            g_nForceLogIndex = 0;
+#endif
+            break;
+
+        case TSPDRV_MAGIC_NUMBER:
+            file->private_data = (void*)TSPDRV_MAGIC_NUMBER;
+            break;
+
+        case TSPDRV_ENABLE_AMP:   // 0x5203 
+#ifdef CONFIG_SPIDER_SADR
+            sadr_device_set_data(vib_dev_id,0xFFFFFFFF);
+#else
+            ImmVibeSPI_ForceOut_AmpEnable(arg);
+#endif
+            DbgRecorderReset((arg));
+            DbgRecord((arg,";------- TSPDRV_ENABLE_AMP ---------\n"));
+            break;
+
+        case TSPDRV_DISABLE_AMP:   // 0x5204 
+            /* Small fix for now to handle proper combination of TSPDRV_STOP_KERNEL_TIMER and TSPDRV_DISABLE_AMP together */
+            /* If a stop was requested, ignore the request as the amp will be disabled by the timer proc when it's ready */
+            if(!g_bStopRequested)
+            {
+#ifdef CONFIG_SPIDER_SADR
+                sadr_device_set_data(vib_dev_id,0);
+#else
+                ImmVibeSPI_ForceOut_AmpDisable(arg);
+#endif
+            }
+            break;
+
+        case TSPDRV_GET_NUM_ACTUATORS:  // 0x5205 
+            return NUM_ACTUATORS;
+    }
+
+    return 0;
+}
+
+static int suspend(struct platform_device *pdev, pm_message_t state) 
+{
+    if (g_bIsPlaying)
+    {
+        DbgOut((KERN_INFO "tspdrv: can't suspend, still playing effects.\n"));
+        return -EBUSY;
+    }
+    else
+    {
+        DbgOut((KERN_INFO "tspdrv: suspend.\n"));
+        return 0;
+    }
+}
+
+static int resume(struct platform_device *pdev) 
+{	
+    DbgOut((KERN_INFO "tspdrv: resume.\n"));
+
+	return 0;   /* can resume */
+}
+#if 0
+static void platform_release(struct device *dev) 
+{	
+    DbgOut((KERN_INFO "tspdrv: platform_release.\n"));
+}
+#endif
+module_init(tspdrv_init);
+module_exit(tspdrv_exit);
+
diff -urN caf/arch/arm/mach-msm/tspdrv.h for-diff/arch/arm/mach-msm/tspdrv.h
--- caf/arch/arm/mach-msm/tspdrv.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/arch/arm/mach-msm/tspdrv.h	2015-09-13 14:02:58.693921000 +0900
@@ -0,0 +1,109 @@
+/*
+** =========================================================================
+** File:
+**     tspdrv.h
+**
+** Description: 
+**     Constants and type definitions for the TouchSense Kernel Module.
+**
+** Portions Copyright (c) 2008-2010 Immersion Corporation. All Rights Reserved. 
+**
+** This file contains Original Code and/or Modifications of Original Code 
+** as defined in and that are subject to the GNU Public License v2 - 
+** (the 'License'). You may not use this file except in compliance with the 
+** License. You should have received a copy of the GNU General Public License 
+** along with this program; if not, write to the Free Software Foundation, Inc.,
+** 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or contact 
+** TouchSenseSales@immersion.com.
+**
+** The Original Code and all software distributed under the License are 
+** distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER 
+** EXPRESS OR IMPLIED, AND IMMERSION HEREBY DISCLAIMS ALL SUCH WARRANTIES, 
+** INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS 
+** FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT. Please see 
+** the License for the specific language governing rights and limitations 
+** under the License.
+** =========================================================================
+*/
+
+#ifndef _TSPDRV_H
+#define _TSPDRV_H
+
+/* Constants */
+#define MODULE_NAME                         "tspdrv"
+#define TSPDRV                              "/dev/"MODULE_NAME
+#define TSPDRV_MAGIC_NUMBER                 0x494D4D52
+#define TSPDRV_STOP_KERNEL_TIMER            _IO(TSPDRV_MAGIC_NUMBER & 0xFF, 1)
+/* 
+** Obsolete IOCTL command 
+** #define TSPDRV_IDENTIFY_CALLER           _IO(TSPDRV_MAGIC_NUMBER & 0xFF, 2)
+*/
+#define TSPDRV_ENABLE_AMP                   _IO(TSPDRV_MAGIC_NUMBER & 0xFF, 3)
+#define TSPDRV_DISABLE_AMP                  _IO(TSPDRV_MAGIC_NUMBER & 0xFF, 4)
+#define TSPDRV_GET_NUM_ACTUATORS            _IO(TSPDRV_MAGIC_NUMBER & 0xFF, 5)
+#define VIBE_MAX_DEVICE_NAME_LENGTH			64
+#define SPI_HEADER_SIZE                     3   /* DO NOT CHANGE - SPI buffer header size */
+#define VIBE_OUTPUT_SAMPLE_SIZE             50  /* DO NOT CHANGE - maximum number of samples */
+
+/* Type definitions */
+#ifdef __KERNEL__
+typedef int8_t		VibeInt8;
+typedef u_int8_t	VibeUInt8;
+typedef int16_t		VibeInt16;
+typedef u_int16_t	VibeUInt16;
+typedef int32_t		VibeInt32;
+typedef u_int32_t	VibeUInt32;
+typedef u_int8_t	VibeBool;
+typedef VibeInt32	VibeStatus;
+
+typedef struct
+{
+    VibeUInt8 nActuatorIndex;  /* 1st byte is actuator index */
+    VibeUInt8 nBitDepth;       /* 2nd byte is bit depth */
+    VibeUInt8 nBufferSize;     /* 3rd byte is data size */
+    VibeUInt8 dataBuffer[VIBE_OUTPUT_SAMPLE_SIZE];
+} samples_buffer;
+
+typedef struct
+{
+    VibeInt8 nIndexPlayingBuffer;
+    VibeUInt8 nIndexOutputValue;
+    samples_buffer actuatorSamples[2]; /* Use 2 buffers to receive samples from user mode */
+} actuator_samples_buffer;
+
+#endif
+
+/* Error and Return value codes */
+#define VIBE_S_SUCCESS                      0	/* Success */
+#define VIBE_E_FAIL						    -4	/* Generic error */
+
+#if defined(VIBE_RECORD) && defined(VIBE_DEBUG)
+    void _RecorderInit(void);
+    void _RecorderTerminate(void);
+    void _RecorderReset(int nActuator);
+    void _Record(int actuatorIndex, const char *format,...);
+#endif
+
+/* Kernel Debug Macros */
+#ifdef __KERNEL__
+    #ifdef VIBE_DEBUG
+        #define DbgOut(_x_) printk _x_
+    #else   /* VIBE_DEBUG */
+        #define DbgOut(_x_)
+    #endif  /* VIBE_DEBUG */
+
+    #if defined(VIBE_RECORD) && defined(VIBE_DEBUG)
+        #define DbgRecorderInit(_x_) _RecorderInit _x_
+        #define DbgRecorderTerminate(_x_) _RecorderTerminate _x_
+        #define DbgRecorderReset(_x_) _RecorderReset _x_
+        #define DbgRecord(_x_) _Record _x_
+    #else /* defined(VIBE_RECORD) && defined(VIBE_DEBUG) */
+        #define DbgRecorderInit(_x_)
+        #define DbgRecorderTerminate(_x_)
+        #define DbgRecorderReset(_x_)
+        #define DbgRecord(_x_)
+    #endif /* defined(VIBE_RECORD) && defined(VIBE_DEBUG) */
+#endif  /* __KERNEL__ */
+
+#endif  /* _TSPDRV_H */
+
diff -urN caf/drivers/Makefile for-diff/drivers/Makefile
--- caf/drivers/Makefile	2015-09-08 23:43:49.911167071 +0900
+++ for-diff/drivers/Makefile	2015-09-13 14:02:59.453921000 +0900
@@ -127,6 +127,7 @@
 obj-y				+= clk/
 
 obj-$(CONFIG_HWSPINLOCK)	+= hwspinlock/
+obj-$(CONFIG_KTTECH_PN544_NFC)		+= nfc/
 obj-$(CONFIG_NFC)		+= nfc/
 obj-$(CONFIG_IOMMU_SUPPORT)	+= iommu/
 obj-$(CONFIG_REMOTEPROC)	+= remoteproc/
diff -urN caf/drivers/char/Makefile for-diff/drivers/char/Makefile
--- caf/drivers/char/Makefile	2015-09-08 23:43:49.995167073 +0900
+++ for-diff/drivers/char/Makefile	2015-09-13 14:02:59.549921000 +0900
@@ -66,4 +66,6 @@
 obj-$(CONFIG_TILE_SROM)		+= tile-srom.o
 obj-$(CONFIG_MSM_ROTATOR)	+= msm_rotator.o
 obj-$(CONFIG_MMC_GENERIC_CSDIO)	+= csdio.o
-obj-$(CONFIG_DIAG_CHAR)		+= diag/
\ No newline at end of file
+obj-$(CONFIG_DIAG_CHAR)		+= diag/
+# KTTech - O7 use FC8050 chip
+obj-$(CONFIG_KTTECH_TDMB_SERVICE)   += dmb_fci/
\ No newline at end of file
diff -urN caf/drivers/char/dmb_fci/Makefile for-diff/drivers/char/dmb_fci/Makefile
--- caf/drivers/char/dmb_fci/Makefile	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/Makefile	2015-09-13 14:02:59.569921000 +0900
@@ -0,0 +1,4 @@
+#DMB device driver makefile
+EXTRA_CFLAGS += -Wno-error
+obj-$(CONFIG_KTTECH_TDMB_SERVICE) += dmb.o
+dmb-objs := dmbdrv_kttech.o bbm.o fc8050_bb.o fc8050_isr.o fc8050_spi.o fc8050_i2c.o fc8050_ppi.o fc8050_hpi.o fc8050_tun.o fci_hal.o fci_i2c.o fci_oal.o fci_ringbuffer.o fci_tun.o fic.o ficdecoder.o
diff -urN caf/drivers/char/dmb_fci/bbm.c for-diff/drivers/char/dmb_fci/bbm.c
--- caf/drivers/char/dmb_fci/bbm.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/bbm.c	2015-10-08 21:23:38.040842000 +0900
@@ -0,0 +1,338 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : bbm.c
+ 
+ Description : API of dmb baseband module
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/08/29 	jason		initial
+*******************************************************************************/
+
+#include "fci_types.h"
+#include "fci_tun.h"
+#include "fc8050_regs.h"
+#include "fc8050_bb.h"
+#include "fci_hal.h"
+#include "fc8050_isr.h"
+
+int BBM_RESET(HANDLE hDevice)
+{
+	int res;
+
+	res = fc8050_reset(hDevice);
+
+	return res;
+}
+
+int BBM_PROBE(HANDLE hDevice)
+{
+	int res;
+
+	res = fc8050_probe(hDevice);
+
+	return res;
+}
+
+int BBM_INIT(HANDLE hDevice)
+{
+	int res;
+
+	res = fc8050_init(hDevice);
+
+	return res;
+}
+
+int BBM_DEINIT(HANDLE hDevice)
+{
+	int res;
+
+	res = fc8050_deinit(hDevice);
+
+	return res;
+}
+
+int BBM_READ(HANDLE hDevice, u16 addr, u8 *data)
+{
+	int res;
+
+	res = bbm_read(hDevice, addr, data);
+
+	return res;
+}
+
+int BBM_BYTE_READ(HANDLE hDevice, u16 addr, u8 *data)
+{
+	int res;
+
+	res = bbm_byte_read(hDevice, addr, data);
+
+	return res;
+}
+
+int BBM_WORD_READ(HANDLE hDevice, u16 addr, u16 *data)
+{
+	int res;
+
+	res = bbm_word_read(hDevice, addr, data);
+
+	return res;
+}
+
+int BBM_LONG_READ(HANDLE hDevice, u16 addr, u32 *data)
+{
+	int res;
+
+	res = bbm_long_read(hDevice, addr, data);
+
+	return res;
+}
+
+int BBM_BULK_READ(HANDLE hDevice, u16 addr, u8 *data, u16 size)
+{
+	int res;
+
+	res = bbm_bulk_read(hDevice, addr, data, size);
+
+	return res;
+}
+
+int BBM_DATA(HANDLE hDevice, u16 addr, u8 *data, u16 size)
+{
+	int res;
+
+	res = bbm_data(hDevice, addr, data, size);
+
+	return res;
+}
+
+int BBM_WRITE(HANDLE hDevice, u16 addr, u8 data)
+{
+	int res;
+
+	res = bbm_write(hDevice, addr, data);
+
+	return res;
+}
+
+int BBM_BYTE_WRITE(HANDLE hDevice, u16 addr, u8 data)
+{
+	int res;
+
+	res = bbm_byte_write(hDevice, addr, data);
+
+	return res;
+}
+
+int BBM_WORD_WRITE(HANDLE hDevice, u16 addr, u16 data)
+{
+	int res;
+
+	res = bbm_word_write(hDevice, addr, data);
+
+	return res;
+}
+
+int BBM_LONG_WRITE(HANDLE hDevice, u16 addr, u32 data)
+{
+	int res;
+
+	res = bbm_long_write(hDevice, addr, data);
+
+	return res;
+}
+
+int BBM_BULK_WRITE(HANDLE hDevice, u16 addr, u8 *data, u16 size)
+{
+	int res;
+
+	res = bbm_bulk_write(hDevice, addr, data, size);
+
+	return res;
+}
+
+int BBM_TUNER_READ(HANDLE hDevice, u8 addr, u8 alen, u8 *buffer, u8 len)
+{
+	int res;
+
+	res = tuner_i2c_read(hDevice, addr, alen, buffer, len);
+
+	return res;
+}
+
+int BBM_TUNER_WRITE(HANDLE hDevice, u8 addr, u8 alen, u8 *buffer, u8 len)
+{
+	int res;
+
+	res = tuner_i2c_write(hDevice, addr, alen, buffer, len);
+
+	return res;
+}
+
+int BBM_TUNER_SET_FREQ(HANDLE hDevice, u32 freq)
+{
+	int res = BBM_OK;
+
+	res = tuner_set_freq(hDevice, freq);
+
+	return res;
+}
+
+int BBM_TUNER_SELECT(HANDLE hDevice, u32 product, u32 band)
+{
+	int res = BBM_OK;
+
+	res = tuner_select(hDevice, product, band);
+
+	return res;
+}
+
+int BBM_TUNER_GET_RSSI(HANDLE hDevice, s32 *rssi)
+{
+	int res = BBM_OK;
+
+	res = tuner_get_rssi(hDevice, rssi);
+
+	return res;
+}
+
+int BBM_SCAN_STATUS(HANDLE hDevice)
+{
+	int res = BBM_OK;
+
+	res = fc8050_scan_status(hDevice);
+
+	return res;
+}
+
+int BBM_CHANNEL_SELECT(HANDLE hDevice, u8 subChId,u8 svcChId)
+{
+	int res;
+
+	res = fc8050_channel_select(hDevice, subChId, svcChId);
+
+	return res;
+}
+
+int BBM_VIDEO_SELECT(HANDLE hDevice, u8 subChId,u8 svcChId, u8 cdiId)
+{
+	int res;
+
+	res = fc8050_video_select(hDevice, subChId, svcChId, cdiId);
+
+	return res;
+}
+
+int BBM_AUDIO_SELECT(HANDLE hDevice, u8 subChId,u8 svcChId)
+{
+	int res;
+
+	res = fc8050_audio_select(hDevice, subChId, svcChId);
+
+	return res;
+}
+
+int BBM_DATA_SELECT(HANDLE hDevice, u8 subChId,u8 svcChId)
+{
+	int res;
+
+	res = fc8050_data_select(hDevice, subChId, svcChId);
+
+	return res;
+}
+
+int BBM_CHANNEL_DESELECT(HANDLE hDevice, u8 subChId, u8 svcChId)
+{
+	int res;
+
+	res = fc8050_channel_deselect(hDevice, subChId, svcChId);
+
+	return res;
+}
+
+int BBM_VIDEO_DESELECT(HANDLE hDevice, u8 subChId, u8 svcChId, u8 cdiId)
+{
+	int res;
+
+	res = fc8050_video_deselect(hDevice, subChId, svcChId, cdiId);
+
+	return res;
+}
+
+int BBM_AUDIO_DESELECT(HANDLE hDevice, u8 subChId, u8 svcChId)
+{
+	int res;
+
+	res = fc8050_audio_deselect(hDevice, subChId, svcChId);
+
+	return res;
+}
+
+int BBM_DATA_DESELECT(HANDLE hDevice, u8 subChId, u8 svcChId)
+{
+	int res;
+
+	res = fc8050_data_deselect(hDevice, subChId, svcChId);
+
+	return res;
+}
+
+void BBM_ISR(HANDLE hDevice)
+{
+	fc8050_isr(hDevice);
+}
+
+int BBM_HOSTIF_SELECT(HANDLE hDevice, u8 hostif)
+{
+	int res = BBM_NOK;
+
+	res = bbm_hostif_select(hDevice, hostif);
+
+	return res;
+}		
+
+int BBM_HOSTIF_DESELECT(HANDLE hDevice)
+{
+	int res = BBM_NOK;
+
+	res = bbm_hostif_deselect(hDevice);
+
+	return res;
+}		
+
+//int (*pFicCallback)(HANDLE hDevice, u8 *data, int length) = NULL;
+//int (*pFicCallback)(void *, unsigned char *, int ) = NULL;
+int BBM_FIC_CALLBACK_REGISTER(u32 userdata, int (*callback)(void *, unsigned char *, int ))
+{
+	gFicUserData = userdata;
+	pFicCallback = callback;
+
+	return BBM_OK;
+}
+
+//int BBM_MSC_CALLBACK_REGISTER(u32 userdata, int (*callback)(HANDLE userdata, u8 subChId, u8 *data, int length))
+int BBM_MSC_CALLBACK_REGISTER(u32 userdata, int (*callback)(void *, unsigned char, unsigned char *, int ))
+{
+	gMscUserData = userdata;
+	pMscCallback = callback;
+
+	return BBM_OK;
+}
+
+int BBM_FIC_CALLBACK_DEREGISTER(HANDLE hDevice)
+{
+	gFicUserData = 0;
+	pFicCallback = 0;//NULL;
+
+	return BBM_OK;
+}
+
+int BBM_MSC_CALLBACK_DEREGISTER(HANDLE hDevice)
+{
+	gMscUserData = 0;
+	pMscCallback = 0;//NULL;
+
+	return BBM_OK;
+}
+
diff -urN caf/drivers/char/dmb_fci/bbm.h for-diff/drivers/char/dmb_fci/bbm.h
--- caf/drivers/char/dmb_fci/bbm.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/bbm.h	2015-10-08 21:23:53.612842000 +0900
@@ -0,0 +1,75 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : bbm.h
+ 
+ Description : API of dmb baseband module
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/08/29 	jason		initial
+*******************************************************************************/
+
+#ifndef __BBM_H__
+#define __BBM_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include "fci_types.h"
+
+#define DRIVER_VER 	"VER 3.6.3"
+
+#define BBM_HPI		0		// EBI2
+#define BBM_SPI		1		// SPI
+#define BBM_USB		2		// USB
+#define BBM_I2C		3		// I2C
+#define BBM_PPI		4		// PPI
+
+extern int BBM_RESET(HANDLE hDevice);
+extern int BBM_PROBE(HANDLE hDevice);
+extern int BBM_INIT(HANDLE hDevice);
+extern int BBM_DEINIT(HANDLE hDevice);
+extern int BBM_READ(HANDLE hDevice, u16 addr, u8 *data);
+extern int BBM_BYTE_READ(HANDLE hDevice, u16 addr, u8 *data);
+extern int BBM_WORD_READ(HANDLE hDevice, u16 addr, u16 *data);
+extern int BBM_LONG_READ(HANDLE hDevice, u16 addr, u32 *data);
+extern int BBM_BULK_READ(HANDLE hDevice, u16 addr, u8 *data, u16 size);
+extern int BBM_DATA(HANDLE hDevice, u16 addr,u8 *data, u16 size);
+extern int BBM_WRITE(HANDLE hDevice, u16 addr, u8 data);
+extern int BBM_BYTE_WRITE(HANDLE hDevice, u16 addr, u8 data);
+extern int BBM_WORD_WRITE(HANDLE hDevice, u16 addr, u16 data);
+extern int BBM_LONG_WRITE(HANDLE hDevice, u16 addr, u32 data);
+extern int BBM_BULK_WRITE(HANDLE hDevice, u16 addr, u8 *data, u16 size);
+extern int BBM_TUNER_READ(HANDLE hDevice, u8 addr, u8 alen, u8 *buffer, u8 len);
+extern int BBM_TUNER_WRITE(HANDLE hDevice, u8 addr, u8 alen, u8 *buffer, u8 len);
+extern int BBM_TUNER_SET_FREQ(HANDLE hDevice, u32 freq);
+extern int BBM_TUNER_SELECT(HANDLE hDevice, u32 product, u32 band);
+extern int BBM_TUNER_GET_RSSI(HANDLE hDevice, s32 *rssi);
+extern int BBM_SCAN_STATUS(HANDLE hDevice);
+extern int BBM_CHANNEL_SELECT(HANDLE hDevice, u8 subChId, u8 svcChId);
+extern int BBM_VIDEO_SELECT(HANDLE hDevice, u8 subChId, u8 svcChId, u8 cdiId);
+extern int BBM_AUDIO_SELECT(HANDLE hDevice, u8 subChId, u8 svcChId);
+extern int BBM_DATA_SELECT(HANDLE hDevice, u8 subChId, u8 svcChId);
+extern int BBM_CHANNEL_DESELECT(HANDLE hDevice, u8 subChId, u8 svcChId);
+extern int BBM_VIDEO_DESELECT(HANDLE hDevice, u8 subChId, u8 svcChId, u8 cdiId);
+extern int BBM_AUDIO_DESELECT(HANDLE hDevice, u8 subChId, u8 svcChId);
+extern int BBM_DATA_DESELECT(HANDLE hDevice, u8 subChId, u8 svcChId);
+extern int BBM_HOSTIF_SELECT(HANDLE hDevice, u8 hostif);
+extern int BBM_HOSTIF_DESELECT(HANDLE hDevice);
+//extern int BBM_FIC_CALLBACK_REGISTER(u32 userdata, int (*callback)(HANDLE userdata, u8 *data, int length));
+//extern int BBM_FIC_CALLBACK_REGISTER(u32 userdata, int (*callback)(HANDLE hDevice, u8 *data, int length));
+extern int BBM_FIC_CALLBACK_REGISTER(u32 userdata, int (*callback)(void *, unsigned char *, int ));
+//extern int BBM_MSC_CALLBACK_REGISTER(u32 userdata, int (*callback)(HANDLE userdata, u8 subChId, u8 *data, int length));
+extern int BBM_MSC_CALLBACK_REGISTER(u32 userdata, int (*callback)(void *, unsigned char, unsigned char *, int ));
+extern int BBM_FIC_CALLBACK_DEREGISTER(HANDLE hDevice);
+extern int BBM_MSC_CALLBACK_DEREGISTER(HANDLE hDevice);
+extern void BBM_ISR(HANDLE hDevice);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __BBM_H__ */
+
diff -urN caf/drivers/char/dmb_fci/dmbdrv_extern.h for-diff/drivers/char/dmb_fci/dmbdrv_extern.h
--- caf/drivers/char/dmb_fci/dmbdrv_extern.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/dmbdrv_extern.h	2015-10-08 21:23:54.348842000 +0900
@@ -0,0 +1,91 @@
+/**************************************************
+ * dmbdrv_extern.h
+ * 
+ * This file is used by dmb jni, 
+ * so don't include kernel header file in this file.
+ * wrttien by xenix.
+ */
+
+#ifndef __DMBDRVEXTERNH__
+#define __DMBDRVEXTERNH__
+
+#define DMB_IOCTL_INIT 0x0700
+#define DMB_IOCTL_CLOSE 0x0701
+#define DMB_IOCTL_SCAN_ENSEMBLE 0x0702
+#define DMB_IOCTL_SERVICE_START 0x0703
+#define DMB_IOCTL_SERVICE_END 0x0704
+#define DMB_IOCTL_GET_PREBER  0x0705
+#define DMB_IOCTL_GET_POSTBER  0x0706
+#define DMB_IOCTL_GET_CER       0x0707
+#define DMB_IOCTL_GET_RSSI      0x0708
+#define DMB_IOCTL_SET_I2C_RETRY 0x0709
+#define DMB_IOCTL_SET_I2C_TIMEOUT 0x070a
+#define DMB_IOCTL_GET_CHIPID 0x070b
+#define DMB_IOCTL_SET_ABORT  0x070c
+#define DMB_IOCTL_STREAM_VALID 0x070d
+
+#define MAX_KOREABAND_FULL_CHANNEL		21
+#define USER_APPL_NUM_MAX       12
+#define USER_APPL_DATA_SIZE_MAX 24
+
+
+#define MAX_ENSEMBLE_CHANNEL 30
+#define MAX_DMB_CHANNEL 100
+
+#define MAX_LABEL_LEN 16
+#define MAX_CH_NUM 100
+
+#define FIC_TYPE  1
+#define MSC_TYPE  2
+
+typedef struct
+{
+  unsigned int  freq;
+  unsigned char subch_id;
+  unsigned char type;
+  unsigned char tm_id;
+  char  channel_label[MAX_LABEL_LEN];
+  char  ensemble_label[MAX_LABEL_LEN];
+  unsigned short  ensemble_id;
+  unsigned short  bit_rate;
+#if 0  
+  unsigned short  uiStarAddr;
+  unsigned char ucSlFlag;
+  unsigned char ucTableIndex;
+  unsigned char ucOption;
+  unsigned char ucProtectionLevel;
+  unsigned short  uiDifferentRate;
+  unsigned short  uiSchSize;
+
+  unsigned int  ulServiceID;
+  unsigned short  uiPacketAddr;
+#endif
+} DMB_CH_DATA_S;
+
+typedef struct
+{
+	unsigned int freq;
+	DMB_CH_DATA_S channel_data[MAX_ENSEMBLE_CHANNEL];
+	int channel_count;
+} ensemble_scan_req_t;
+
+typedef struct
+{
+	unsigned int freq; // ensemble frequency
+	int subch_id; // subchannel service ID
+	int serv_type; // subchannel service type
+	int tmid; // tmID, DMB->1, DAB->0
+	int result; //0==success, -1==signal start fail, -2==abort
+} service_start_req_t;
+
+#define DMBLOG 
+
+struct tdmb_platform_data {
+	int (*power)(int);
+	int (*setup)(void);
+	void (*teardown)(void);
+    int irq;
+    int reset;
+    int demod_enable;
+};
+#endif
\ No newline at end of file
diff -urN caf/drivers/char/dmb_fci/dmbdrv_kttech.c for-diff/drivers/char/dmb_fci/dmbdrv_kttech.c
--- caf/drivers/char/dmb_fci/dmbdrv_kttech.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/dmbdrv_kttech.c	2015-10-08 21:23:38.176842000 +0900
@@ -0,0 +1,2112 @@
+/*******************************************************************************************
+File: dmbdrv.c
+Description: DMB Device Driver
+Writer: KTTECH SW1 khkim
+LastUpdate: 2010-06-30
+*******************************************************************************************/
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/i2c.h>
+#include <linux/jiffies.h>
+#include <asm/uaccess.h>
+#include <linux/gpio.h>
+#include <linux/delay.h>
+#include "dmbdrv_kttech.h"
+#include <asm/io.h>
+#include <linux/regulator/consumer.h>
+#include <linux/spi/spi.h>
+#include <linux/workqueue.h>
+#include <linux/mutex.h>
+
+#include "fic.h"
+#include "bbm.h"
+#include "fci_oal.h"
+#include "fci_tun.h"
+#include "fc8050_regs.h"
+#include <linux/kthread.h>
+#include <linux/irq.h>
+#include <linux/interrupt.h>
+
+#include <linux/wait.h>
+#include <linux/kttgenmod.h>
+
+// kuzuri 2012.01.20 - MSM internal XO_A1 use
+#define DMB_USE_MSM_XO
+
+#ifdef DMB_USE_MSM_XO
+#include <mach/msm_xo.h>
+#endif
+
+#define USE_FCI_STATIC_MEM
+
+#define DMB_USE_POLL
+#ifdef DMB_USE_POLL
+#include <linux/poll.h>
+#endif
+
+#include "fci_msg.h"
+
+#define TDMB_SPI_INTERFACE
+//#define TDMB_SPI_INTERFACE_TEST
+
+#define DMB_MAJOR 260
+
+#define DMB_GPIO_DEMOD_EN_N                90
+#define DMB_GPIO_RESET_N                         77
+#define DMB_GPIO_INT_N                              78
+
+#define TDMB_DEV_NAME       "tdmb"
+#define TDMB_DRV_NAME       "dmbdrv"
+#define TDMB_CLASS_NAME   "dmbclass"
+
+#define KX_DMB_LNA_GAIN 0
+#define KXDMB_RSSI_LEVEL_0_MAX	(85)
+#define KXDMB_RSSI_LEVEL_1_MAX	(78)
+#define KXDMB_RSSI_LEVEL_2_MAX	(74)
+#define KXDMB_RSSI_LEVEL_3_MAX	(71)
+#define KXDMB_RSSI_LEVEL_4_MAX	(67)
+#define KXDMB_RSSI_LEVEL_5_MAX	(63)
+#define KXDMB_RSSI_LEVEL_6_MAX	(59)
+
+#define	ABS(a)			(((a) < 0)?-(a):(a))
+
+typedef enum
+{
+	KXDMB_RSSI_LEVEL_0,	// - (94) dBm
+	KXDMB_RSSI_LEVEL_1,	// - (86) dBm
+	KXDMB_RSSI_LEVEL_2,	// - (78) dBm
+	KXDMB_RSSI_LEVEL_3,	// - (70) dBm
+	KXDMB_RSSI_LEVEL_4,	// - (62) dBm
+	KXDMB_RSSI_LEVEL_5,	// - (54) dBm
+	KXDMB_RSSI_LEVEL_6,	// - (46) dBm
+	KXDMB_RSSI_LEVEL_MAX,
+} KTFT_TDMB_RSSI_LEVEL_T; 
+
+static ssize_t dmbdev_read (struct file *file, char __user *buf, size_t count, loff_t *offset);
+static ssize_t dmbdev_write (struct file *file, const char __user *buf, size_t count, loff_t *offset);
+#ifdef DMB_USE_POLL
+static unsigned int dmbdev_poll( struct file *filp, poll_table *wait );
+#endif
+static long dmbdev_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
+static int dmbdev_open(struct inode *inode, struct file *file);
+static int dmbdev_release(struct inode *inode, struct file *file);
+static int set_ch_data(DMB_CH_DATA_S* pchbuf, unsigned int freq);
+static int get_rssi_level(unsigned int rssi);
+static void tdmb_gpios_free(const struct msm_gpio *table, int size);
+static int tdmb_gpios_disable(const struct msm_gpio *table, int size);
+static int tdmb_power(int on);
+//int fic_callback(HANDLE hDevice, u8 *data, int len);
+int fic_callback(void *hDevice, unsigned char *data, int len);
+//int msc_callback(HANDLE hDevice, u8 subChId, u8 *data, int len);
+int msc_callback(void *hDevice, unsigned char subChId, unsigned char *data, int len);
+
+static struct class *dmbclass;
+static struct device *dmbdev;
+
+#ifdef TDMB_SPI_INTERFACE
+extern struct spi_device *fc8050_spi;
+#endif
+
+static char start_service = 0;
+//wait_queue_head_t g_RingBuffer_wq;
+
+//#define USE_STREAM_BUFF
+
+#ifdef USE_STREAM_BUFF
+static unsigned char *g_StreamBuff;
+#endif
+
+#ifdef DMB_USE_POLL
+#define INT_OCCUR_SIG		0x0A		// [S5PV210_Kernel], 20101220, ASJ, 
+#define DIRECT_OUT_SIG		0x01
+wait_queue_head_t WaitQueue_Read;
+static unsigned char ReadQ;
+#endif
+
+static int b_First_call_poll = 0;
+
+//static int test_overrun = 0;
+
+
+//DMB_OPEN_INFO_T *g_hOpen = NULL;
+
+
+#ifdef DMB_USE_MSM_XO
+static struct msm_xo_voter *dmb_clock;
+#endif
+
+struct completion fci_comp;
+
+static struct msm_gpio tdmb_gpio_config_data[] = {
+	{ GPIO_CFG(DMB_GPIO_INT_N, 0, GPIO_CFG_INPUT, GPIO_CFG_NO_PULL, GPIO_CFG_2MA), "tdmb_irq" },
+	{ GPIO_CFG(DMB_GPIO_RESET_N, 0, GPIO_CFG_OUTPUT, GPIO_CFG_PULL_UP, GPIO_CFG_2MA), "tdmb_reset" },
+	{ GPIO_CFG(DMB_GPIO_DEMOD_EN_N, 0, GPIO_CFG_OUTPUT, GPIO_CFG_PULL_UP, GPIO_CFG_2MA), "tdmb_dem_enable" },
+};
+
+
+int tdmb_gpios_enable(const struct msm_gpio *table, int size)
+{
+	int rc;
+	int i;
+	const struct msm_gpio *g;
+	
+	for (i = 0; i < size; i++) {
+		g = table + i;
+		rc = gpio_tlmm_config(g->gpio_cfg, GPIO_CFG_ENABLE);
+		if (rc) {
+			pr_err("gpio_tlmm_config(0x%08x, GPIO_CFG_ENABLE)"	" <%s> failed: %d\n", g->gpio_cfg, g->label ?: "?", rc);
+			pr_err("pin %d func %d dir %d pull %d drvstr %d\n", GPIO_PIN(g->gpio_cfg), GPIO_FUNC(g->gpio_cfg), GPIO_DIR(g->gpio_cfg), GPIO_PULL(g->gpio_cfg),	GPIO_DRVSTR(g->gpio_cfg));
+			goto err;
+		}
+	}
+	return 0;
+	
+	err:
+		tdmb_gpios_disable(table, i);
+	return rc;
+}
+
+int tdmb_gpios_disable(const struct msm_gpio *table, int size)
+{
+	int rc = 0;
+	int i;
+	const struct msm_gpio *g;
+	
+	for (i = size-1; i >= 0; i--) {
+		int tmp;
+		g = table + i;
+		tmp = gpio_tlmm_config(g->gpio_cfg, GPIO_CFG_DISABLE);
+		if (tmp) {
+			pr_err("gpio_tlmm_config(0x%08x, GPIO_CFG_DISABLE)" " <%s> failed: %d\n",	g->gpio_cfg, g->label ?: "?", rc);
+			pr_err("pin %d func %d dir %d pull %d drvstr %d\n", GPIO_PIN(g->gpio_cfg), GPIO_FUNC(g->gpio_cfg), GPIO_DIR(g->gpio_cfg), GPIO_PULL(g->gpio_cfg), GPIO_DRVSTR(g->gpio_cfg));
+			if (!rc)
+				rc = tmp;
+		}
+	}
+	return rc;
+}
+
+int tdmb_gpios_request(const struct msm_gpio *table, int size)
+{
+	int rc;
+	int i;
+	const struct msm_gpio *g;
+	
+	for (i = 0; i < size; i++) {
+		g = table + i;
+		rc = gpio_request(GPIO_PIN(g->gpio_cfg), g->label);
+		DEVLOG("[%s]:: gpio_request(%d : %s)--> %d\n", __func__, GPIO_PIN(g->gpio_cfg), g->label, rc);
+		if (rc) {
+			pr_err("gpio_request(%d) <%s> failed: %d\n", GPIO_PIN(g->gpio_cfg), g->label ?: "?", rc);
+			goto err;
+		}
+		if ( GPIO_PIN(g->gpio_cfg)==DMB_GPIO_INT_N )
+		{
+			rc = gpio_direction_output(GPIO_PIN(g->gpio_cfg), 1);
+			if ( rc )
+				pr_err("gpio_request:: IRQ output -> HIGH... fail...: %d\n", GPIO_PIN(g->gpio_cfg) );
+			else
+				pr_err("gpio_request:: IRQ output -> HIGH... SUCCESS...: %d\n", GPIO_PIN(g->gpio_cfg) );
+		}
+	}
+	
+	return 0;
+	
+	err:
+		tdmb_gpios_free(table, i);
+	return rc;
+}
+
+void tdmb_gpios_free(const struct msm_gpio *table, int size)
+{
+	int i;
+	const struct msm_gpio *g;
+	
+	for (i = size-1; i >= 0; i--) {
+		g = table + i;
+		gpio_free(GPIO_PIN(g->gpio_cfg));
+	}
+}
+
+int tdmb_gpios_request_enable(const struct msm_gpio *table, int size)
+{
+	int rc = tdmb_gpios_request(table, size);
+	
+	if (rc)
+		return rc;
+	
+	rc = tdmb_gpios_enable(table, size);
+	
+	if (rc)
+		tdmb_gpios_free(table, size);
+	
+	return rc;
+}
+
+void tdmb_gpios_disable_free(const struct msm_gpio *table, int size)
+{
+	tdmb_gpios_disable(table, size);
+	tdmb_gpios_free(table, size);
+}
+
+static int tdmb_gpio_setup(void)
+{
+	int rc;
+
+//	rc = gpio_request(DMB_GPIO_INT_N, "ts_int");
+//		DEVLOG(" [%s]: fail gpio_req():: IRQ fail = %d\n", rc);
+
+	rc = tdmb_gpios_request_enable(tdmb_gpio_config_data,
+	ARRAY_SIZE(tdmb_gpio_config_data));
+
+	return rc;
+}
+
+static void tdmb_gpio_teardown(void)
+{
+	tdmb_gpios_disable_free(tdmb_gpio_config_data, ARRAY_SIZE(tdmb_gpio_config_data));
+}
+
+static struct tdmb_platform_data tdmb_pdata = {
+	.power  = tdmb_power,
+	.setup    = tdmb_gpio_setup,
+	.teardown = tdmb_gpio_teardown,
+#ifdef TDMB_SPI_INTERFACE
+	.irq = MSM_GPIO_TO_INT(DMB_GPIO_INT_N),
+#else
+	.irq = 0,
+#endif	
+	.reset = DMB_GPIO_RESET_N,
+	.demod_enable = DMB_GPIO_DEMOD_EN_N,
+};
+
+static void tdmb_reset(int enable)
+{
+	if(enable)
+	{
+		//2011.11.28 vincent
+		gpio_set_value(tdmb_pdata.reset, 1);
+		msleep(30);
+		gpio_set_value(tdmb_pdata.reset, 0);
+		msleep(30);  // 2011.06.28
+		gpio_set_value(tdmb_pdata.reset, 1);
+		DEVLOG(" reset fc8050 chip \n");
+	}
+	else
+		gpio_set_value(tdmb_pdata.reset, 0);
+}
+
+static void tdmb_demod_enable(int enable)
+{
+	gpio_set_value(tdmb_pdata.demod_enable, enable);
+	
+	//2011.11.28 vincent
+	msleep(50);
+}
+
+//static struct regulator *dmb_8058_l10; // 1.8V Main // spider
+static struct regulator *dmb_main_power; // 1.8V Main // spider
+
+static int tdmb_power(int on)
+{
+  int rc = 0;
+
+  // spider_current ---> start
+
+  //DEVLOG("DMB::  power (%d) _________: spi= %s \n",on, dmbdev->driver->name);
+  DEVLOG("DMB::  power (%d) _________:\n",on);
+
+  if(on)
+  {
+    //dmb_8058_l10 = regulator_get(NULL, "8058_l10");
+    dmb_main_power = regulator_get(&fc8050_spi->dev, "tdmb_vol");
+    if (IS_ERR(dmb_main_power))
+    {
+      pr_err("%s: regulator_get(8921_l29) failed (%ld)\n",
+      __func__, PTR_ERR(dmb_main_power));
+      return PTR_ERR(dmb_main_power);
+    }
+
+    //set voltage level
+    rc = regulator_set_voltage(dmb_main_power, 1800000, 1800000);
+
+    if (rc)
+    { 
+      pr_err("%s: Spider regulator_set_voltage(8921_l29) failed (%d)\n",
+      __func__, rc);
+      regulator_put(dmb_main_power);
+      return rc;
+    }
+
+    // L29 0.4 voltage dropping fix
+    rc = regulator_set_optimum_mode(dmb_main_power, 200000);
+    if (rc < 0) {
+        pr_err("%s: set_optimum_mode(8921_l29) failed, rc=%d\n", __func__, rc);
+        regulator_put(dmb_main_power);
+        return rc;
+    }
+
+    //enable output
+    rc = regulator_enable(dmb_main_power);
+    if (rc)
+    { 
+      pr_err("%s: regulator_enable(8921_l29) failed (%d)\n", __func__, rc);
+      regulator_put(dmb_main_power);
+      return rc;
+    }
+    msleep(2);  // 2011.06.28
+    tdmb_demod_enable(on);
+
+    //msleep(50); // kuzuri 11.28 test xo 
+
+    #ifdef DMB_USE_MSM_XO
+    dmb_clock = msm_xo_get(MSM_XO_TCXO_A1, "dmb_clock");
+    if (IS_ERR(dmb_clock)) {
+		rc = PTR_ERR(dmb_clock);
+		printk(KERN_ERR "%s: Couldn't get TCXO_A1 vote for DMB (%d)\n",
+					__func__, rc);
+	}
+
+	rc = msm_xo_mode_vote(dmb_clock, MSM_XO_MODE_ON);
+	if (rc < 0) {
+		printk(KERN_ERR "%s:  Failed to vote for TCX0_A1 ON (%d)\n",
+					__func__, rc);
+	}
+	#endif
+    
+    msleep(1);  // 2011.06.28
+    tdmb_reset(on);
+  }
+  else
+  {
+    #if 1
+    if (!dmb_main_power)
+      return rc;
+    #else
+    if (!dmb_8058_l10)
+    {
+      dmb_8058_l10 = regulator_get(NULL, "8058_l10");
+      if (IS_ERR(dmb_8058_l10))
+      {
+        pr_err("%s: regulator_get(8058_l10) failed (%d)\n",
+        __func__, rc);
+        return PTR_ERR(dmb_8058_l10);
+      }
+    }
+    #endif
+
+    rc = regulator_disable(dmb_main_power);
+
+    if (rc)
+    { 
+      pr_err("%s: regulator_disable(8921_l29) failed (%d)\n",
+      __func__, rc);
+      regulator_put(dmb_main_power);
+      return rc;
+    }
+    regulator_put(dmb_main_power);
+    dmb_main_power = NULL;
+    tdmb_reset(on);
+    tdmb_demod_enable(on);
+
+  #ifdef DMB_USE_MSM_XO
+    if (dmb_clock != NULL) {
+		rc = msm_xo_mode_vote(dmb_clock, MSM_XO_MODE_OFF);
+		if (rc < 0) {
+			printk(KERN_ERR "%s: Voting off DMB XO clock (%d)\n",
+					__func__, rc);
+		}
+		msm_xo_put(dmb_clock);
+	}
+	#endif
+
+	gpio_set_value_cansleep(tdmb_pdata.reset, 0);
+  	gpio_set_value_cansleep(tdmb_pdata.demod_enable, 0);
+  	gpio_set_value_cansleep(DMB_GPIO_INT_N, 0);
+    
+  }
+
+  //msleep(10);
+  return 0;
+
+  // <<-------- // spider_current
+}
+
+u32 TDMB_GET_KOREABAND_FULL_TABLE(u16 uiIndex)
+{
+	if(uiIndex >= MAX_KOREABAND_FULL_CHANNEL) return 0xFFFF;
+	return g_uiKOREnsembleFullFreq[uiIndex];
+}
+
+#define RING_BUFFER_SIZE	(128 * 1024)  // kmalloc max 128k
+static DECLARE_WAIT_QUEUE_HEAD(dmb_isr_wait);
+static u8 dmb_isr_sig=0;
+static struct task_struct *dmb_kthread = NULL;
+
+static u8 dmb_preber_ready_isr_lock = 0;
+
+static int b_exit_dmb_thread = 0;
+
+SubChInfoTypeDB gDMBSubChInfo;
+SubChInfoTypeDB gDABSubChInfo;
+
+static u32 gInitFlag = 0;
+DMB_INIT_INFO_T *hInit;
+
+#ifdef USE_FCI_STATIC_MEM
+DMB_INIT_INFO_T m_hInit;
+DMB_OPEN_INFO_T m_hOpen;
+ensemble_scan_req_t m_pscan;
+u8 hopen_buf[RING_BUFFER_SIZE];
+#endif
+
+
+static int dmb_thread(void *hDevice)
+{
+  static DEFINE_MUTEX(thread_lock);
+
+  DMB_INIT_INFO_T *hInit = (DMB_INIT_INFO_T *)hDevice;
+
+  set_user_nice(current, -20);
+
+  PRINTF(hInit, "dmb_kthread enter\n");
+
+  BBM_FIC_CALLBACK_REGISTER((u32)hInit, fic_callback);
+  BBM_MSC_CALLBACK_REGISTER((u32)hInit, msc_callback);
+
+  while(1)
+  {	  
+    wait_event_interruptible(dmb_isr_wait, dmb_isr_sig || kthread_should_stop());
+    dmb_isr_sig=0;
+    dmb_preber_ready_isr_lock = 1;
+    BBM_ISR(hInit);
+    dmb_preber_ready_isr_lock = 0;
+
+    if ( b_exit_dmb_thread==1 )
+    {
+      DEVLOG("DMB_Thread... loop.. exit dmb thread = 1 \n");
+      break;
+    }
+
+#ifdef DMB_USE_POLL
+    ReadQ = INT_OCCUR_SIG;
+    wake_up_interruptible(&WaitQueue_Read);
+#endif
+
+    if (kthread_should_stop())
+      break;
+
+  }
+
+  // 2011.06.28
+  BBM_FIC_CALLBACK_DEREGISTER(NULL);
+  BBM_MSC_CALLBACK_DEREGISTER(NULL);
+
+  PRINTF(hInit, "dmb_kthread exit\n");
+  dmb_kthread = NULL;
+
+  return 0;
+}
+
+
+int DMBDrv_init(void)
+{
+  s32 ret;
+  DEVLOG(" DMB DRV INIT()_____:\n");
+
+#ifndef USE_FCI_STATIC_MEM
+  if ( !hInit )
+    hInit = (DMB_INIT_INFO_T *)kmalloc(sizeof(DMB_INIT_INFO_T), GFP_KERNEL);
+  DEVLOG(" MALLOC()___ hInit addr= %X  ,size= %d\n", hInit, sizeof(DMB_INIT_INFO_T));
+#else
+  hInit = &m_hInit;
+//  DEVLOG(" STATIC_LOC()___ hInit addr= %X  ,size= %d\n", hInit, sizeof(DMB_INIT_INFO_T));
+#endif
+
+  ret = BBM_HOSTIF_SELECT(hInit, BBM_SPI);
+
+  if(ret)
+    PRINTF(hInit, "dmb host interface select fail!\n");
+
+#if 0
+  if (!dmb_kthread)
+  {
+    dmb_kthread = kthread_run(dmb_thread, (void*)hInit, "dmb_thread");
+  }
+#endif
+
+  INIT_LIST_HEAD(&(hInit->hHead));
+
+  PRINTF(hInit, "dmb init \n");
+  return 0;
+}
+
+void DMBDrv_exit(void)
+{
+  PRINTF(hInit, "dmb exit \n");
+
+  if ( tdmb_pdata.irq )
+  {
+    DEVLOG("DMB: Free_IRQ 1-------->>>>\n");
+    free_irq(tdmb_pdata.irq, NULL);
+    //tdmb_pdata.irq = NULL;
+  }
+
+  #if 0
+  if ( dmb_kthread )
+  {
+    kthread_stop(dmb_kthread);
+    dmb_kthread=NULL;
+  }
+  #endif
+
+  BBM_HOSTIF_DESELECT(hInit);
+
+  DEVLOG(" hInit FREE ++++++\n");
+  #ifndef USE_FCI_STATIC_MEM
+  kfree(hInit);  
+  hInit = NULL;
+  #endif
+}
+
+unsigned char DMBDrv_SVC_Stop(void)
+{
+	BBM_VIDEO_DESELECT(NULL, 0, 0, 0);
+	BBM_AUDIO_DESELECT(NULL, 0, 3);
+	BBM_DATA_DESELECT(NULL, 0, 2);
+
+	//BBM_WRITE(NULL, BBM_COM_INT_ENABLE, 0x00); // 2011.06.28 // kuzuri.11.25
+	
+	return BBM_OK;
+}
+
+unsigned char DMBDrv_SetCh(unsigned long ulFrequency, unsigned char ucSubChannel, unsigned char ucSvType)
+{
+  int ret;
+
+  DEVLOG("DMBDRv Set ch():: SCAN freq(%ld) is Start... initflag= %d\n", ulFrequency, gInitFlag);
+
+  ret = 0;
+
+  if(!gInitFlag)
+    return -2;
+
+  BBM_WORD_WRITE(NULL, BBM_BUF_INT, 0x00ff);      // disable FIC int
+
+  BBM_VIDEO_DESELECT(NULL, 0, 0, 0);
+  BBM_AUDIO_DESELECT(NULL, 0, 3);
+  BBM_DATA_DESELECT(NULL, 0, 2);
+
+
+ //2011.10.26 - FCI
+ // for ( i=0; i<3; i++ )
+ // {
+    if(BBM_TUNER_SET_FREQ(NULL, ulFrequency) != BBM_OK)
+    {
+      return -1;
+    }
+
+  if(BBM_SCAN_STATUS(NULL)) {
+	printk("DMBDRv Set ch():: BBM SCAN STATUS is fail... \n");
+	return BBM_NOK;
+  }
+
+  msleep(100); //kuzur_test 11.30
+
+  DEVLOG("DMB:: Set Ch()-------   ucSvType = %X  , ucSubCh= %d , BUF_CH3_END= %d\n", ucSvType, ucSubChannel, CH3_BUF_END );
+
+  if(ucSvType == 0x18) 
+  {
+  BBM_VIDEO_SELECT(NULL, ucSubChannel, 0, 0);
+  }	
+  else if(ucSvType == 0x00) 
+  {
+    #if 0
+    // __________set speed... 2011.07.05 DAB 
+   	BBM_WORD_WRITE(NULL, BBM_BUF_CH3_END, 	CH3_BUF_END );  //(CH3_BUF_START + 160*3*2 - 1)); // 160 kbps set.
+	BBM_WORD_WRITE(NULL, BBM_BUF_CH3_THR, 	CH3_BUF_THR ); //(160*3-1));  // 160 kbps set
+	#endif
+    
+    BBM_AUDIO_SELECT(NULL, ucSubChannel, 3);
+  }
+  else
+  {
+    // __________ set speed...
+    BBM_DATA_SELECT(NULL, ucSubChannel, 2);
+  }
+
+  //msleep(100); //kuzur_test 11.30
+
+  //BBM_WRITE(NULL, BBM_COM_INT_ENABLE, 0x1); // 2011.06.28_temp // kuzuri.11.25
+
+  return BBM_OK;
+}
+
+void fc8050_overrun_check(void)// 2011.11.15 FCI Vincent
+{
+   u16 overrun = 0;
+   u16 buf_enable=0;   
+   u8  extIntStatus = 0;
+   int ret_val = 0;
+   
+   ret_val = BBM_WORD_READ(NULL, BBM_BUF_OVERRUN, &overrun);
+
+   if(((ret_val!=0) || (overrun&0x01)))
+   {
+      DMB_OPEN_INFO_T *hOpen;
+      hOpen = &m_hOpen;
+      hOpen->buf = hopen_buf;
+      
+    printk(KERN_ERR "\n\n*** In preber___> Overrun occured !!!!!!!!!!!!!!!!!!!  __ ret= %d , overrun= %d \n\n\n", ret_val, overrun);	
+	 BBM_WORD_WRITE(NULL, BBM_BUF_OVERRUN, overrun);
+	 BBM_WORD_WRITE(NULL, BBM_BUF_OVERRUN, 0x0000);
+
+	 //buffer restore
+	 BBM_WORD_READ(NULL, BBM_BUF_ENABLE, &buf_enable);
+	 buf_enable &= ~overrun;
+	 BBM_WORD_WRITE(NULL, BBM_BUF_ENABLE, buf_enable);
+	 buf_enable |= overrun; 
+	 BBM_WORD_WRITE(NULL, BBM_BUF_ENABLE, buf_enable);
+
+	 //external interrupt restore	   
+	 BBM_READ(NULL, BBM_COM_INT_STATUS, &extIntStatus);
+	 BBM_WRITE(NULL, BBM_COM_INT_STATUS, extIntStatus);
+	 BBM_WRITE(NULL, BBM_COM_INT_STATUS, 0x00);
+
+	 fci_ringbuffer_flush(&hOpen->RingBuffer);
+	}
+}
+
+static s32 DMBDrv_FC8050_Get_Viterbi_RT_Ber(u32* ber)
+{
+	u32 vframe, esum;
+	u8  vt_ctrl=0;
+	u32 lber;
+
+	BBM_READ(NULL, BBM_VT_CONTROL, &vt_ctrl);
+	vt_ctrl |= 0x10;
+	BBM_WRITE(NULL, BBM_VT_CONTROL, vt_ctrl);
+	
+	BBM_LONG_READ(NULL,BBM_VT_RT_BER_PERIOD, &vframe);
+	BBM_LONG_READ(NULL,BBM_VT_RT_ERROR_SUM, &esum);
+	
+	vt_ctrl &= ~0x10;
+	BBM_WRITE(NULL,BBM_VT_CONTROL, vt_ctrl);
+	
+	if(vframe == 0) {
+		lber = 2000;
+		return BBM_NOK;
+	}
+
+	if(esum > 429496)
+		lber = ((esum * 100)/vframe)*100;
+	else
+		lber = (esum * 10000) / vframe;
+	
+	*ber = lber;
+
+	//2011.11.28 vincent
+    fc8050_overrun_check();    	
+	
+	return BBM_OK;
+}
+
+static s32 DMBDrv_FC8050_Get_RS_Ber(u32* ber)
+{
+	u32 bper, esum;
+	u16 nframe, rserror;
+
+	BBM_WORD_READ(NULL, BBM_RS_BER_PERIOD, &nframe);
+	BBM_LONG_READ(NULL, BBM_RS_ERR_SUM, &esum);
+	BBM_WORD_READ(NULL, BBM_RS_FAIL_COUNT, &rserror);
+
+	if(nframe == 0) {
+		bper = 2000;
+		return BBM_NOK;
+	}
+
+	bper = esum;
+	bper += rserror * 9 * 4;
+	
+	if(esum > 42926)
+		bper = ((bper * 1000) / ((nframe + 1) * 204 * 8))*100;
+	else
+		bper = (bper * 100000) / ((nframe + 1) * 204 * 8);
+
+	*ber = bper;
+	
+	return BBM_OK;
+}
+
+unsigned char DMBDrv_FC8050_Get_RSSI(s32* rssi)
+{
+	static s32 pre_rssi = -110;
+
+	*rssi = pre_rssi;
+	
+	if(!gInitFlag)
+		return BBM_NOK;
+	
+	if(BBM_TUNER_GET_RSSI(NULL, rssi))
+		return BBM_NOK;
+
+	pre_rssi = *rssi;
+
+	*rssi = ABS(*rssi);
+	return BBM_OK;	
+}
+
+unsigned char DMBDrv_ScanCh(unsigned long ulFrequency)
+{
+	esbInfo_t* esb;
+
+	if(!gInitFlag)
+		return BBM_NOK;
+
+	FIC_DEC_SubChInfoClean();
+
+//2011.10.26 - FCI
+//  	BBM_WRITE(NULL, BBM_COM_INT_ENABLE, 0); // kuzuri.11.25
+
+//2012.07.06
+//  주파수 설정 후 인터럽트 enable 하도록 수정 
+//	BBM_WORD_WRITE(NULL, BBM_BUF_INT, 0x01ff); 
+
+	if(BBM_TUNER_SET_FREQ(NULL, ulFrequency)) {
+		BBM_WORD_WRITE(NULL, BBM_BUF_INT, 0x00ff);
+
+//2011.10.26 - FCI
+//    	BBM_WRITE(NULL, BBM_COM_INT_ENABLE, BBM_MF_INT);
+		return BBM_NOK;
+	} 
+
+//2012.07.06
+//BBM_TUNER_SET_FREQ 호출 전에 인터럽트를 enable하면 간헐적으로 이전 주파수 결과가 인터럽트로 발생하여 
+//주파수 설정 후 인터럽트 enable 하도록 수정 
+	BBM_WORD_WRITE(NULL, BBM_BUF_INT, 0x01ff); 
+
+	if(BBM_SCAN_STATUS(NULL)) {
+		BBM_WORD_WRITE(NULL, BBM_BUF_INT, 0x00ff);
+//2011.10.26 - FCI
+//        BBM_WRITE(NULL, BBM_COM_INT_ENABLE, BBM_MF_INT);
+		return BBM_NOK;
+	}
+  
+//2011.10.26 - FCI
+//    BBM_WRITE(NULL, BBM_COM_INT_ENABLE, BBM_MF_INT);
+
+	// wait 1.2 sec for gathering fic information
+	msWait(1200);   // 1200
+	
+	BBM_WORD_WRITE(NULL, BBM_BUF_INT, 0x00ff);
+
+	esb = FIC_DEC_GetEsbInfo(0);
+	if(esb->flag != 99) {
+		FIC_DEC_SubChInfoClean();
+		return BBM_NOK;
+	}
+
+	if(strlen((char *)esb->label) <= 0) {
+		FIC_DEC_SubChInfoClean();
+		return BBM_NOK;
+	}
+		
+	return BBM_OK;
+}
+
+static int DMBDrv_GetDMBSubChCnt(void)
+{
+	svcInfo_t *pSvcInfo;
+	int i,n;
+
+	if(!gInitFlag)
+		return 0;
+
+	n = 0;
+	for(i=0; i <MAX_SVC_NUM; i++) {
+		pSvcInfo = FIC_DEC_GetSvcInfoList(i);
+
+		if((pSvcInfo->flag &0x07) == 0x07) {
+			if((pSvcInfo->TMId == 0x01) && (pSvcInfo->DSCTy == 0x18))	
+				n++;
+		}
+	}
+
+	return n;
+}
+
+static int DMBDrv_GetDABSubChCnt(void)
+{
+	svcInfo_t *pSvcInfo;
+	int i, n;
+
+	if(!gInitFlag)
+		return 0;
+
+	n = 0;
+	for(i=0; i < MAX_SVC_NUM; i++) {
+		pSvcInfo = FIC_DEC_GetSvcInfoList(i);
+
+		if((pSvcInfo->flag &0x07) == 0x07) {
+			if((pSvcInfo->TMId == 0x00) && (pSvcInfo->ASCTy == 0x00))	
+				n++;
+		}
+	}
+
+	return n;
+}
+
+char* DMBDrv_GetEnsembleLabel(unsigned short* eid)
+{
+	esbInfo_t* esb;
+	
+	if(!gInitFlag)
+		return NULL;
+	
+	esb = FIC_DEC_GetEsbInfo(0);
+
+	if(esb->flag == 99)
+	{
+		*eid = esb->EId;
+		return (char*)esb->label;
+	}
+
+	return NULL;
+}
+
+char* DMBDrv_GetSubChDMBLabel(int nSubChCnt)
+{
+	int i,n;
+	svcInfo_t *pSvcInfo;
+	char* label = NULL;
+
+	if(!gInitFlag)
+		return NULL;
+
+	n = 0;
+	for(i=0; i < MAX_SVC_NUM; i++) {
+		pSvcInfo = FIC_DEC_GetSvcInfoList(i);
+
+		if((pSvcInfo->flag & 0x07) == 0x07) {
+			if((pSvcInfo->TMId == 0x01) && (pSvcInfo->DSCTy == 0x18)) {
+				if(n == nSubChCnt) {
+					label = (char*) pSvcInfo->label;
+					break;
+				}
+				n++;
+			}
+		}
+	}
+
+	return label;
+}
+
+char* DMBDrv_GetSubChDABLabel(int nSubChCnt)
+{
+	int i, n;
+	svcInfo_t *pSvcInfo;
+	char* label = NULL;
+
+	if(!gInitFlag)
+		return NULL;
+
+	n = 0;
+	for(i=0; i < MAX_SVC_NUM; i++) {
+		pSvcInfo = FIC_DEC_GetSvcInfoList(i);
+
+		if((pSvcInfo->flag &0x07) == 0x07) {
+			if((pSvcInfo->TMId == 0x00) && (pSvcInfo->ASCTy == 0x00)) {
+				if(n == nSubChCnt) {
+					label = (char*) pSvcInfo->label;
+					break;
+				}
+				n++;
+			}
+		}
+	}
+
+	return label;
+}
+
+SubChInfoTypeDB* DMBDrv_GetFICDMB(int nSubChCnt)
+{
+	int i, n, j;
+	esbInfo_t* esb;
+	svcInfo_t *pSvcInfo;
+	u8 NumberofUserAppl;
+
+	if(!gInitFlag)
+		return NULL;
+
+	memset((void*)&gDMBSubChInfo, 0, sizeof(gDMBSubChInfo));
+
+	n = 0;
+	for(i=0; i < MAX_SVC_NUM; i++) {
+		pSvcInfo = FIC_DEC_GetSvcInfoList(i);
+
+		if((pSvcInfo->flag &0x07) == 0x07) {
+			if((pSvcInfo->TMId == 0x01) && (pSvcInfo->DSCTy == 0x18)) {
+				if(n == nSubChCnt) {
+					gDMBSubChInfo.ucSubchID         = pSvcInfo->SubChId;
+					gDMBSubChInfo.uiStartAddress    = 0;
+					gDMBSubChInfo.ucTMId            = pSvcInfo->TMId;
+					gDMBSubChInfo.ucServiceType     = pSvcInfo->DSCTy;
+					gDMBSubChInfo.ulServiceID       = pSvcInfo->SId;
+
+					NumberofUserAppl = pSvcInfo->NumberofUserAppl;
+					gDMBSubChInfo.NumberofUserAppl  = NumberofUserAppl;
+					for(j = 0; j < NumberofUserAppl; j++) {
+						gDMBSubChInfo.UserApplType[j] = pSvcInfo->UserApplType[j];
+						gDMBSubChInfo.UserApplLength[j] = pSvcInfo->UserApplLength[j];
+						memcpy(&gDMBSubChInfo.UserApplData[j][0], &pSvcInfo->UserApplData[j][0], gDMBSubChInfo.UserApplLength[j]);
+					}
+
+					esb = FIC_DEC_GetEsbInfo(0);
+					if(esb->flag == 99) 
+						gDMBSubChInfo.uiEnsembleID = esb->EId;
+					else                
+						gDMBSubChInfo.uiEnsembleID = 0;
+					
+					break;
+				}
+				n++;
+			}
+		}
+	}
+
+	return &gDMBSubChInfo;
+}
+
+SubChInfoTypeDB* DMBDrv_GetFICDAB(int nSubChCnt)
+{
+	int i,n;
+	esbInfo_t* esb;
+	svcInfo_t *pSvcInfo;
+
+	if(!gInitFlag)
+		return NULL;
+	
+	memset((void*)&gDABSubChInfo, 0, sizeof(gDABSubChInfo));
+
+	n = 0;
+	for(i=0; i < MAX_SVC_NUM; i++) {
+		pSvcInfo = FIC_DEC_GetSvcInfoList(i);
+
+		if((pSvcInfo->flag &0x07) == 0x07) {
+			if((pSvcInfo->TMId == 0x00) && (pSvcInfo->ASCTy == 0x00)) {
+				if(n == nSubChCnt) {
+					gDABSubChInfo.ucSubchID         = pSvcInfo->SubChId;
+					gDABSubChInfo.uiStartAddress    = 0;
+					gDABSubChInfo.ucTMId            = pSvcInfo->TMId;
+					gDABSubChInfo.ucServiceType     = pSvcInfo->ASCTy;
+					gDABSubChInfo.ulServiceID       = pSvcInfo->SId;
+					esb = FIC_DEC_GetEsbInfo(0);
+					if(esb->flag == 99) 
+						gDMBSubChInfo.uiEnsembleID = esb->EId;
+					else                
+						gDMBSubChInfo.uiEnsembleID = 0;
+
+					break;
+				}
+				n++;
+			}
+		}
+	}
+
+	return &gDABSubChInfo;
+}
+
+int DMBDrv_GetSubchBitRate(int subChId) 
+{
+	// Sub-channel speed
+	didpInfo_t  didp;
+	subChInfo_t *pSubChInfo;
+
+	pSubChInfo = FIC_DEC_GetSubChInfo(subChId);
+	if(pSubChInfo == NULL) {
+		PRINTF(hInit, "There is not a subch-info.\n");
+		return 0;
+	}
+
+	if(pSubChInfo->flag != 99) {
+		PRINTF(hInit, "A subch-info was not completed.\n");
+		return 0;
+	}
+
+	FIC_DEC_SubChOrgan2DidpReg(pSubChInfo, &didp);
+	return didp.speed;
+}
+
+static irqreturn_t dmb_irq(int irq, void *dev_id)
+{
+  if (start_service==0 )
+  {
+    DEVLOG("DMB_IRQ::::  start service is NOT !_____\n");
+  }
+
+  //DEVLOG("DMB_IRQ::::  __________++++++++++++++\n");
+
+  //if ( dmb_thread==NULL )
+  //  DEVLOG("DMB_IRQ:: ########  Thread is NULL ... error\n");
+
+  dmb_isr_sig=1;
+  wake_up_interruptible(&dmb_isr_wait);
+
+  return IRQ_HANDLED;
+}
+
+//int fic_callback(HANDLE hDevice, u8 *data, int len)
+int fic_callback(void *hDevice, unsigned char *data, int len)
+{
+	FIC_DEC_Put((Fic *)data, len);
+
+	return 0;
+}
+
+//int msc_callback(HANDLE hDevice, u8 subChId, u8 *data, int len)
+int msc_callback(void *hDevice, unsigned char subChId, unsigned char *data, int len)
+{
+#ifndef USE_FCI_STATIC_MEM
+  DMB_INIT_INFO_T *hInit;
+  struct list_head *temp;
+#endif
+
+  static int First_call_poll_framecnt = 0;
+
+  static int ret_val = 0;
+
+#ifndef USE_FCI_STATIC_MEM
+  hInit = (DMB_INIT_INFO_T *)hDevice;
+#endif
+
+  ret_val = 0;
+
+
+  //DEVLOG("msc data[0] = 0x%x, data[1] = 0x%x, data[2] = 0x%x, data[3] = 0x%x \n", data[0],data[1] ,data[2], data[3]);
+#if 0
+  {    
+    //nt i;
+    overrun = 0;
+    ret_val = BBM_WORD_READ(hDevice, BBM_BUF_OVERRUN, &overrun);
+
+    if( ((ret_val==0) && (overrun&0x01)) || test_overrun>300)
+    {
+      DMB_OPEN_INFO_T *hOpen;
+      hOpen = &m_hOpen;
+      hOpen->buf = hopen_buf;
+
+      BBM_WORD_WRITE(hDevice, BBM_BUF_OVERRUN, overrun);
+      BBM_WORD_WRITE(hDevice, BBM_BUF_OVERRUN, 0x0000);
+      DEVLOG("Overrun occured !!!!!!!!!!  -- by  test_over= %d\n", test_overrun>300 ? 1 : 0);
+      test_overrun = 0;
+      
+      BBM_RESET(hDevice); // 2011.06.28
+
+      fci_ringbuffer_flush(&hOpen->RingBuffer);
+      return 0;      
+    }
+    else if ( ret_val!=0 )
+      DEVLOG("Oveerun occured...... return value is not 0 ... val = %d\n", overrun);
+
+    #if 0
+    for(i=0;i<len;i+=188)
+    {
+      if(data[i]!=0x47)
+      printk(KERN_ERR "MSC Data 0x%x, 0x%x, 0x%x, 0x%x,    idx : %d\n", data[i], data[i+1], data[i+2], data[i+3], i/188);
+    }
+    #endif
+  }
+#endif // del overrun check
+
+  if ( start_service==0 )
+  {
+    DEVLOG("DMB_ msc_cb::::  start service is NOT ! ignore data_____\n");
+    return 0;
+  }
+
+  if ( b_First_call_poll )
+  {
+    First_call_poll_framecnt++;
+    //DEVLOG("DMB:: First call poll is 1 , cnt = %d\n", First_call_poll_framecnt);
+    if ( First_call_poll_framecnt > 1 )
+    {
+      DEVLOG("DMB:: First call poll cnt = %d\n", First_call_poll_framecnt);
+      b_First_call_poll = 0;
+      First_call_poll_framecnt = 0;
+    }
+    return 0;
+  }
+
+#ifndef USE_FCI_STATIC_MEM
+  list_for_each(temp, &(hInit->hHead))
+  {
+    DMB_OPEN_INFO_T *hOpen;
+
+    hOpen = list_entry(temp, DMB_OPEN_INFO_T, hList);
+
+    if(fci_ringbuffer_free(&hOpen->RingBuffer) < len+8 ) 
+    {
+      return 0;
+    }
+
+    FCI_RINGBUFFER_WRITE_BYTE(&hOpen->RingBuffer, len >> 8);
+    FCI_RINGBUFFER_WRITE_BYTE(&hOpen->RingBuffer, len & 0xff);
+    fci_ringbuffer_write(&hOpen->RingBuffer, data, len);
+
+    //wake_up_interruptible(&(hOpen->RingBuffer.queue));
+  }
+#else
+{
+  DMB_OPEN_INFO_T *hOpen;
+  hOpen = &m_hOpen;
+  hOpen->buf = hopen_buf;
+
+  //DEVLOG("DMB:: MSC_hOpen addr= %X  , buf= %X  , ring-> = %X\n", hOpen, hOpen->buf, hOpen->RingBuffer);
+  
+  if(fci_ringbuffer_free(&hOpen->RingBuffer) < len+8 ) 
+    {
+      DEVLOG("DMB:: MSC_callback()__ ringbuffer_free Error len !!!\n");
+      return 0;
+    }
+
+    //DEVLOG("DMG:: MSC hOpen.Ringbuffer addr= %X\n", &hOpen->RingBuffer);
+
+    FCI_RINGBUFFER_WRITE_BYTE(&hOpen->RingBuffer, len >> 8);
+    FCI_RINGBUFFER_WRITE_BYTE(&hOpen->RingBuffer, len & 0xff);
+    fci_ringbuffer_write(&hOpen->RingBuffer, data, len);
+  }
+#endif
+
+  return 0;
+}
+
+static int dmbdev_open(struct inode *inode, struct file *file)
+{
+  DMB_OPEN_INFO_T *hOpen;
+
+  DEVLOG(" dmbdrv OPEN___________________...\n");
+
+#ifndef USE_FCI_STATIC_MEM
+  if (!hOpen)
+  {
+    hOpen = (DMB_OPEN_INFO_T *)kmalloc(sizeof(DMB_OPEN_INFO_T), GFP_KERNEL);
+    DEVLOG(" MALLOC()___ hOpen addr= %X  ,size= %d\n", hOpen, sizeof(DMB_OPEN_INFO_T));
+    hOpen->buf = NULL;
+  }
+
+  if (!hOpen->buf)
+  {
+    hOpen->buf = (u8 *)kmalloc(RING_BUFFER_SIZE, GFP_KERNEL);
+    DEVLOG(" MALLOC()___ hOpen.buf  addr= %X, size= %d\n", hOpen->buf, RING_BUFFER_SIZE);
+  }
+#else
+  hOpen = &m_hOpen;
+  hOpen->buf = hopen_buf;
+  //DEVLOG(" SALLOC()___ hOpen addr= %X  ,size= %d\n", hOpen, sizeof(DMB_OPEN_INFO_T));
+  //DEVLOG(" SALLOC()___ hOpen.buf  addr= %X, size= %d\n", hOpen->buf, RING_BUFFER_SIZE);
+#endif
+
+  hOpen->dmbtype = 0;
+
+  list_add(&(hOpen->hList), &(hInit->hHead));
+
+  hOpen->hInit = (HANDLE *)hInit;
+
+  if(hOpen->buf == NULL)
+  {
+    PRINTF(hInit, "ring buffer malloc error\n");
+    return -ENOMEM;
+  }
+
+  #if 1
+  //if (!dmb_kthread)
+  {
+    b_exit_dmb_thread = 0;
+    dmb_kthread = kthread_run(dmb_thread, (void*)hInit, "dmb_thread");
+  }
+  #endif
+
+  fci_ringbuffer_init(&hOpen->RingBuffer, hOpen->buf, RING_BUFFER_SIZE);
+
+  //DEVLOG("DMBOPEN: hOpen.RingBuffer addr= %X , hOpen.buf addr= %X  ringbuf-> = %X", &hOpen->RingBuffer, hOpen->buf , hOpen->RingBuffer);
+
+  file->private_data = hOpen;
+  kttgenmod_set_device(DEVICE_SPI);
+  return 0;
+}
+
+static ssize_t dmbdev_read(struct file *file, char __user *buf, size_t count, loff_t *offset)
+{
+	s32 avail;
+	s32 non_blocking = file->f_flags & O_NONBLOCK;
+	DMB_OPEN_INFO_T *pDMB = (DMB_OPEN_INFO_T*)file->private_data;
+	struct fci_ringbuffer *cibuf = &pDMB->RingBuffer;
+	ssize_t len;
+
+	//printk("DMB_READ(): service= %d, count= %d, ring_avail= %d\n", start_service, count, fci_ringbuffer_avail(cibuf) );
+
+  if ( start_service==0 )
+  {
+    fci_ringbuffer_flush(cibuf);
+    return 0;
+  }
+
+	if (!cibuf->data || !count)
+		return 0;
+
+	if (non_blocking && (fci_ringbuffer_empty(cibuf)))
+	{
+	  DEVLOG("DMB_READ:: FAIL - block\n");
+		return -EWOULDBLOCK;
+  }
+	
+#ifndef DMB_USE_POLL
+	if (wait_event_interruptible(cibuf->queue, !fci_ringbuffer_empty(cibuf)))
+		return -ERESTARTSYS;
+#endif
+
+	avail = fci_ringbuffer_avail(cibuf);
+
+	if (avail < 4)
+	{
+	  //DEVLOG("DMB_READ:: FAIL ___ avail < 4 \n",avail);
+		return 0;
+    }
+
+	len = FCI_RINGBUFFER_PEEK(cibuf, 0) << 8;
+	len |= FCI_RINGBUFFER_PEEK(cibuf, 1);
+//DEVLOG("DMB_READ:: _______ - avail= %d  ,count= %d, len= %d\n",avail, count, len);
+
+	if (avail < len + 2 || count < len)
+	//if ( (avail < (len + 2)) || (count < len) )
+	{
+	  //DEVLOG("DMB_READ:: FAIL - avail= %d  ,count= %d, len= %d\n",avail, count, len);
+		return -EINVAL;
+  }
+
+	FCI_RINGBUFFER_SKIP(cibuf, 2);
+
+  len = fci_ringbuffer_read_user(cibuf, buf, len);
+  //DEVLOG("DMB_READ ___OK:: len= %d\n",len);
+  
+	return len;
+}
+
+static ssize_t dmbdev_write (struct file *file, const char __user *buf, size_t count, loff_t *offset)
+{
+	DEVLOG("dmbdrv write....\n");
+	return 0;
+}
+
+#ifdef DMB_USE_POLL
+static unsigned int dmbdev_poll( struct file *filp, poll_table *wait )
+{
+  DMB_OPEN_INFO_T *pDMB = (DMB_OPEN_INFO_T*)filp->private_data;
+  struct fci_ringbuffer *cibuf = &pDMB->RingBuffer;
+
+  int mask = 0;
+  int buf_len;
+
+  if ( b_First_call_poll )
+  {
+    ;//DEVLOG("DMB:: First Poll !!! \n");
+    //b_First_call_poll = FALSE;
+  }
+
+  buf_len= fci_ringbuffer_avail(cibuf);
+
+  if ( buf_len >= (CH0_BUF_LENGTH/2+2) )
+  {    
+    mask = (POLLIN);
+     //DEVLOG("DMB_POLL:: buf is OK...buf= %d  /%d\n", buf_len, CH0_BUF_LENGTH/2+2);
+     ReadQ = 0x00;
+    return mask;
+  }
+
+  
+
+  //	wait_event_interruptible(cibuf->queue, !fci_ringbuffer_empty(cibuf));
+
+  poll_wait( filp, &WaitQueue_Read, wait );
+
+  //	mask = (POLLIN);
+
+  //buf_len= fci_ringbuffer_avail(cibuf);
+
+  if (ReadQ == INT_OCCUR_SIG)
+  {
+    mask |= (POLLIN);
+    //DEVLOG("DMB_POLL:: poll_wait _end -- buf is OK...buf= %d  /%d\n", buf_len, CH0_BUF_LENGTH/2+2);
+  }
+  else if (ReadQ != 0)
+  {
+    mask |= POLLERR;
+  }
+  else
+  {
+  }
+
+  //DEVLOG("DMB_POLL::  FAIL ...  -- buf_len= %d \n", buf_len);
+
+  ReadQ = 0x00;
+
+  return mask;
+}	
+#endif
+
+static long dmbdev_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+  s32 ret = BBM_NOK;
+
+  DMB_OPEN_INFO_T *hOpen;
+  hOpen = file->private_data;
+
+  switch(cmd)
+  {
+    case DMB_IOCTL_INIT:
+    {
+      DEVLOG(" DMB INIT...\n");
+      // 2011.06.28
+      tdmb_pdata.power(0);
+      msleep(5);
+      // end__kuzuri
+      tdmb_pdata.power(1);
+      gInitFlag = 1;
+      start_service = 0;
+      b_exit_dmb_thread = 0;
+
+      ret = BBM_INIT(hInit);
+      ret |= BBM_TUNER_SELECT(hInit, FC8050_TUNER, BAND3_TYPE);
+
+      msleep(10);
+
+      if(ret)
+      {
+        DEVLOG(" Error: INTERFACE_INIT err..ret=%d\n", ret);
+        return -1;
+      }
+
+      if(arg==1) // channel search mode
+      {
+        //??
+      }
+
+      #if 0
+      if ( tdmb_pdata.irq==NULL )
+      {
+        DEVLOG("DMB: io_ctrl:: IRQ is NULL, -> request irq...\n");
+        tdmb_pdata.irq = MSM_GPIO_TO_INT(DMB_GPIO_INT_N);
+        ret = request_irq(tdmb_pdata.irq, dmb_irq, IRQF_TRIGGER_FALLING, TDMB_DEV_NAME, NULL);
+
+        if (ret) 
+          DEVLOG("can't get IRQ %d, ret %d\n", tdmb_pdata.irq, ret);
+
+        //enable_irq(tdmb_pdata.irq);
+      }
+      #endif
+    }
+    return 0;
+    break;
+
+    case DMB_IOCTL_SCAN_ENSEMBLE:
+    {
+      unsigned int freq;
+      ensemble_scan_req_t *pscan=NULL;
+
+      DEVLOG("DMB:: SCAN.  start-----\n");
+#ifndef USE_FCI_STATIC_MEM
+      if (!pscan)
+      pscan = (ensemble_scan_req_t*)kmalloc(sizeof(*pscan), GFP_KERNEL);
+      DEVLOG(" MALLOC()___ pScan addr= %X  ,size= %d\n", pscan, sizeof(*pscan));
+#else
+      pscan = &m_pscan;
+      //DEVLOG(" SALLOC()___ pScan addr= %X  ,size= %d\n", pscan, sizeof(*pscan));
+#endif      
+     
+
+      if(!pscan)
+      {
+        DEVLOG("Error: memory allocation error.\n");
+        ret = -1;
+        goto SCAN_ERR;
+      }
+
+      ret = copy_from_user(pscan, (void*)arg, sizeof(ensemble_scan_req_t));
+
+      if(ret)
+        goto SCAN_ERR;
+
+      freq = TDMB_GET_KOREABAND_FULL_TABLE(pscan->freq);
+
+      if(freq == 0xffff) 
+      {
+        DEVLOG(" invalid freq index=%d\n", freq);
+        ret = -1;
+        goto SCAN_ERR;
+      }
+
+      hOpen->dmbtype = (u8)FIC_TYPE;
+
+      start_service = 1;
+      b_exit_dmb_thread = 0;
+
+        #if 1
+        if (!dmb_kthread)
+        {
+          b_exit_dmb_thread = 0;
+          dmb_kthread = kthread_run(dmb_thread, (void*)hInit, "dmb_thread");
+        }
+        #endif
+
+
+      if(DMBDrv_ScanCh(freq))
+      {
+        DEVLOG(" scan fail... freq=%d \n", freq);
+        goto SCAN_ERR;
+        ret = -1;
+      }
+      else
+      {
+        pscan->channel_count = set_ch_data(pscan->channel_data, freq);
+        DEVLOG("  scan success freq=%d, found_ch_count=%d \n", freq, pscan->channel_count);
+        ret = copy_to_user((void*)arg, pscan, sizeof(*pscan));
+
+        #ifndef KTTECH_FINAL_BUILD
+	{
+		DMB_CH_DATA_S* ch = pscan->channel_data;
+		int i;
+
+		if(pscan->channel_count > 0)
+		{
+			for(i=0;i<pscan->channel_count;i++, ch++)
+			{
+				DEVLOG("%d. [%d] %s apptype %d, ch->type  %d, ch->freq  %d, ch->subch_id  %2d, ch->channel_label %s\n",i+1, __LINE__, __func__, ch->tm_id, ch->type, ch->freq, ch->subch_id, ch->channel_label);
+			}
+		}
+	}
+        #endif		
+
+        if(ret)
+          goto SCAN_ERR;
+      }
+
+      SCAN_ERR:				
+
+      #ifndef USE_FCI_STATIC_MEM
+      if(pscan)
+      {
+        DEVLOG(" pscan Error FREE!!!!!\n");
+        kfree(pscan);
+        pscan = NULL;
+      }
+      #endif
+
+      hOpen->dmbtype = 0;
+
+      return ret;
+    }	
+
+    case DMB_IOCTL_SERVICE_START:
+    {
+      service_start_req_t serv_req;
+
+      ret = copy_from_user(&serv_req, (void*)arg, sizeof(serv_req));
+
+      DEVLOG("DMB:: Service Start _____________>\n");
+
+      start_service = 0;
+      b_exit_dmb_thread = 0;
+      #if 1
+      if (!dmb_kthread)
+      {
+        b_exit_dmb_thread = 0;
+        dmb_kthread = kthread_run(dmb_thread, (void*)hInit, "dmb_thread");
+      }
+      #endif
+	  //2011.11.28 vincent 삭제 필요
+      //msleep(150); // 2011.06.28_temp
+
+
+      if(ret)
+      {
+        ret = -1;					
+        goto SERVICE_START_ERR;
+      }
+
+      fci_ringbuffer_flush(&hOpen->RingBuffer);
+
+      hOpen->dmbtype = MSC_TYPE;
+      ret = DMBDrv_SetCh(serv_req.freq, serv_req.subch_id, serv_req.serv_type);
+
+      if(ret != 0)
+        hOpen->dmbtype = 0;
+
+      if(ret == -1)
+        DEVLOG(" INTERFACE_START Signal Lock Fail \n");
+      else if(ret == -2)
+        DEVLOG(" INTERFACE_START Sequenc Fail Please DMB Init First!  \n");
+      else
+      {
+        DEVLOG(" INTERFACE_START Success \n");
+        start_service = 1;
+        b_First_call_poll = 1;
+      }
+
+      {
+        service_start_req_t *preq;
+        preq = (service_start_req_t*)arg;
+        DEVLOG("  start result=%d \n", ret);
+        ret = copy_to_user(&preq->result, &ret, sizeof(ret));
+
+        if(ret)
+          goto SERVICE_START_ERR;
+
+        // // kuzuri.11.25 BBM_WRITE(NULL, BBM_COM_INT_ENABLE, 0x1); // 2011.11.24 kuzuri_test
+        
+      }
+      return ret;
+
+      SERVICE_START_ERR:
+      start_service = 0;
+
+      return ret;
+    }
+
+    case DMB_IOCTL_SERVICE_END:
+      DEVLOG(" DMB: Service END_______________ start service= %d...\n", start_service);
+      DMBDrv_SVC_Stop();
+      hOpen->dmbtype = 0;
+
+      if ( start_service )
+      {
+        start_service = 0;
+        dmb_isr_sig=1;
+        b_exit_dmb_thread = 1;
+        wake_up_interruptible(&dmb_isr_wait);
+        msleep(30);
+      }
+
+      fci_ringbuffer_flush(&hOpen->RingBuffer);
+
+//      BBM_RESET(hInit); // 2011.11.25 - fci
+      
+      return 0;
+      break;
+
+    case DMB_IOCTL_GET_PREBER:
+    {
+      u32 val;
+
+      if ( b_exit_dmb_thread || (start_service==0))
+      {
+        DEVLOG(" ioctl get PREBER. But Exit thread is 1 return... thread= %d , start_svc= %d _____\n",  b_exit_dmb_thread, start_service );
+        return -1;
+      }
+
+      if ( dmb_preber_ready_isr_lock==1 )
+      {
+        DEVLOG(" ###_____ Ioctl get PREBER. But dmb_ISR_LoCK ==1 . not perform_____\n");
+        return -1;
+      }
+
+      ret = DMBDrv_FC8050_Get_Viterbi_RT_Ber(&val);
+
+      if(ret)
+      {
+        DEVLOG(" ioctl get preber ________ FAIL !!! val= %d\n", val);
+        return -1;
+      }
+
+      if ( 1 ) // val > 500 )
+       { DEVLOG(" ioctl get preber=%d\n", val); }
+      ret = copy_to_user((unsigned char*)arg, &val, sizeof(val));
+
+      //ret = DMBDrv_FC8050_Get_RSSI(&val);
+      //DEVLOG(" ioctl get RSSI __________= %d  -result(%d)\n", val, ret);
+
+      //ret = DMBDrv_FC8050_Get_RS_Ber(&val);
+
+      //DEVLOG(" ioctl get RS_BER __________= %d  -result(%d)\n", val, ret);
+
+      if(ret)
+        return -1;
+    }
+    return 0;
+
+    case DMB_IOCTL_GET_POSTBER:
+    {
+      u32 val;
+
+      ret = DMBDrv_FC8050_Get_RS_Ber(&val);
+
+      if(ret)
+        return -1;
+
+      DEVLOG(" ioctl get postber=%d\n", val);
+      ret = copy_to_user((unsigned char*)arg, &val, sizeof(val));
+
+      if(ret)
+        return -1;
+      }
+      return 0;  
+
+    case DMB_IOCTL_GET_CER:
+    {
+      return -1;
+    }
+    return 0;
+
+    case DMB_IOCTL_GET_RSSI:
+    {
+      u32 val;
+      u8 ret_val;
+
+      return 0;
+
+      if ( b_exit_dmb_thread || (start_service==0))
+      {
+        DEVLOG(" ioctl get RSSI. But Exit thread is 1 return... thread= %d , start_svc= %d _____\n",  b_exit_dmb_thread, start_service );
+        return -1;
+      }
+
+      ret_val = DMBDrv_FC8050_Get_RSSI(&val);      
+
+      DEVLOG(" ioctl get RSSI = %d  -result(%d)\n", val, ret_val);
+
+      val = get_rssi_level(val);
+
+      ret = copy_to_user((unsigned char*)arg, &val, sizeof(val));
+
+      if(ret)
+        return -1;
+    }
+    return 0;
+
+    case DMB_IOCTL_SET_ABORT:
+    {
+      DEVLOG(" DMB:: ioctl Set Abort....______________...\n");
+      b_exit_dmb_thread = 1;
+      return 0;
+    }
+
+    case DMB_IOCTL_CLOSE:
+    {
+      DEVLOG("DMB::  io Close ____________ start_flag= %d\n", start_service);
+      if ( start_service )
+        DMBDrv_SVC_Stop();
+      //disable_irq(tdmb_pdata.irq);
+      tdmb_pdata.power(0);
+      gInitFlag = 0;
+      msleep(50);
+      return 0;
+    }
+
+    case DMB_IOCTL_SET_I2C_RETRY:
+    {
+      return 0;
+    }
+
+    case DMB_IOCTL_SET_I2C_TIMEOUT:
+    {
+      return 0;
+    }
+
+    case DMB_IOCTL_GET_CHIPID:
+    {
+      u16 nChipID;
+
+      BBM_WORD_READ(hInit, BBM_QDD_CHIP_IDL, &nChipID);
+
+      DEVLOG(" Chip ID =0x%0x\n", nChipID);
+
+      ret = copy_to_user((unsigned char*)arg, &nChipID, sizeof(nChipID));
+
+      if(ret)
+        return -1;
+    }
+    return 0;
+
+#ifdef TDMB_SPI_INTERFACE
+		case DMB_IOCTL_STREAM_VALID:
+		{
+			u32 d_ready;
+
+			if(gpio_get_value(DMB_GPIO_INT_N) == 0)
+				d_ready = 1;
+			else
+				d_ready = 0;
+
+			ret = copy_to_user((unsigned char*)arg, &d_ready, sizeof(d_ready));
+			
+			if(ret)
+				return -1;
+		}
+		return 0;
+#endif
+
+		default:
+			DEVLOG(" Error: Unknown command\n");
+		break;
+	}
+	return -1;
+}
+
+static int dmbdev_release(struct inode *inode, struct file *file)
+{
+  DMB_OPEN_INFO_T *hOpen = file->private_data;
+
+  DEVLOG(" DMB:: Release ___________________\n");
+
+  hOpen->dmbtype = 0;
+
+  #if 0
+  if ( tdmb_pdata.irq )
+  {
+    DEVLOG("DMB: Free_IRQ 2-------->>>>\n");
+    free_irq(tdmb_pdata.irq, NULL);
+    tdmb_pdata.irq = NULL;
+  }
+  #endif
+
+  if ( start_service )
+  {
+    start_service = 0;
+    dmb_isr_sig=1;
+    wake_up_interruptible(&dmb_isr_wait);
+    msleep(30);
+  }
+  #if 0
+  if ( dmb_kthread )
+  {
+    DEVLOG("DMB: release -> Thread kill....\n");
+    kthread_stop(dmb_kthread);
+    dmb_kthread=NULL;
+  }
+  #endif
+
+  // 2011.06.28 add __>
+  DMBDrv_SVC_Stop();
+  //BBM_WRITE(NULL, BBM_COM_STATUS_ENABLE, 0x00);
+  msleep(100);
+  BBM_DEINIT(NULL);
+  // <___
+
+  list_del(&(hOpen->hList));
+
+  #ifndef USE_FCI_STATIC_MEM
+  DEVLOG(" hOpen FREE+++\n");
+  DEVLOG(" hOpen.buf  FREE+++++\n");
+
+  kfree(hOpen->buf);
+  hOpen->buf = NULL;
+  kfree(hOpen);
+  hOpen = NULL;
+  #endif
+
+  kttgenmod_clear_device(DEVICE_SPI);
+  DEVLOG(" dmbdrv release...\n");
+
+  return 0;
+}
+
+static int set_ch_data(DMB_CH_DATA_S* pchbuf, unsigned int freq)
+{
+	int i;
+	int dmbchcnt, dabchcnt, chcnt;
+	DMB_CH_DATA_S* pch;
+	char*  ensemble_label;
+	char* service_label;
+	SubChInfoTypeDB* DMBSubChInfo;
+	SubChInfoTypeDB* DABSubChInfo;
+	pch = pchbuf;
+
+	dmbchcnt = DMBDrv_GetDMBSubChCnt();
+	dabchcnt = DMBDrv_GetDABSubChCnt();
+	
+	for(i=0;i<dmbchcnt;i++)
+	{
+		DMBSubChInfo = DMBDrv_GetFICDMB(i);
+		pch->freq = freq;
+		ensemble_label = DMBDrv_GetEnsembleLabel(&pch->ensemble_id);
+		pch->subch_id = DMBSubChInfo->ucSubchID;
+		pch->type = DMBSubChInfo->ucServiceType;
+		pch->tm_id = DMBSubChInfo->ucTMId;
+		pch->bit_rate = DMBDrv_GetSubchBitRate(DMBSubChInfo->ucSubchID);
+		service_label = DMBDrv_GetSubChDMBLabel(i);
+		strncpy(&pch->ensemble_label[0], ensemble_label, sizeof(pch->ensemble_label));
+		strncpy(&pch->channel_label[0], service_label, sizeof(pch->channel_label));
+		pch++;
+	}
+	
+	for(i=0;i<dabchcnt;i++)
+	{
+		DABSubChInfo = DMBDrv_GetFICDAB(i);
+		pch->freq = freq;
+		ensemble_label = DMBDrv_GetEnsembleLabel(&pch->ensemble_id);
+		pch->subch_id = DABSubChInfo->ucSubchID;
+		pch->type = DABSubChInfo->ucServiceType;
+		pch->tm_id = DABSubChInfo->ucTMId;
+		pch->bit_rate = DMBDrv_GetSubchBitRate(DABSubChInfo->ucSubchID);
+		service_label = DMBDrv_GetSubChDABLabel(i);
+		strncpy(&pch->ensemble_label[0], ensemble_label, sizeof(pch->ensemble_label));
+		strncpy(&pch->channel_label[0], service_label, sizeof(pch->channel_label));
+		pch++;
+	}
+	
+	chcnt = dmbchcnt + dabchcnt;
+	return chcnt;
+}
+
+static int get_rssi_level(unsigned int rssi)
+{
+  if(rssi > KXDMB_RSSI_LEVEL_0_MAX-KX_DMB_LNA_GAIN)
+  {
+    return KXDMB_RSSI_LEVEL_0;
+  } 
+  else if(rssi > KXDMB_RSSI_LEVEL_1_MAX-KX_DMB_LNA_GAIN)
+  {
+    return KXDMB_RSSI_LEVEL_1;
+  }
+  else if(rssi > KXDMB_RSSI_LEVEL_2_MAX-KX_DMB_LNA_GAIN)
+  {
+    return KXDMB_RSSI_LEVEL_2;
+  }
+  else if(rssi > KXDMB_RSSI_LEVEL_3_MAX-KX_DMB_LNA_GAIN)
+  {
+    return KXDMB_RSSI_LEVEL_3;
+  }
+  else if(rssi > KXDMB_RSSI_LEVEL_4_MAX-KX_DMB_LNA_GAIN)
+  {
+    return KXDMB_RSSI_LEVEL_4;
+  }
+  else if(rssi > KXDMB_RSSI_LEVEL_5_MAX-KX_DMB_LNA_GAIN)
+  {
+    return KXDMB_RSSI_LEVEL_5;
+  }
+  else
+  {
+    return KXDMB_RSSI_LEVEL_6;
+  }
+}
+
+#ifdef TDMB_SPI_INTERFACE_TEST
+int spi_interface_test(void)
+{
+	u16 i; 
+	u16 wdata = 0; 
+	u32 ldata = 0; 
+	u8 data = 0;
+	u8 temp = 0;
+	s32 ret = BBM_NOK;
+	u16 nChipID;
+
+	ret = BBM_INIT(hInit);
+	ret |= BBM_TUNER_SELECT(hInit, FC8050_TUNER, BAND3_TYPE);
+
+	if(ret)
+	{
+		DEVLOG(" Error: INTERFACE_INIT err..ret=%d\n", ret);
+	}
+	
+	if(BBM_PROBE(NULL))
+	{
+		DEVLOG("FC8050 Probe Fail !!!\n");
+	}
+
+	for(i=0;i<20;i++)
+	{
+		BBM_WRITE(NULL, 0x05, i & 0xff);
+		BBM_READ(NULL, 0x05, &data);
+		if((i & 0xff) != data)
+			DEVLOG("FC8050 byte test (0x%x,0x%x)\n", i & 0xff, data);
+	}
+	
+	for(i=0;i<20;i++)
+	{
+		BBM_WORD_WRITE(NULL, 0x0210, i & 0xffff);
+		BBM_WORD_READ(NULL, 0x0210, &wdata);
+		if((i & 0xffff) != wdata)
+			DEVLOG("FC8050 word test (0x%x,0x%x)\n", i & 0xffff, wdata);
+	}
+	
+	for(i=0;i<20;i++)
+	{
+		BBM_LONG_WRITE(NULL, 0x0210, i & 0xffffffff);
+		BBM_LONG_READ(NULL, 0x0210, &ldata);
+		if((i & 0xffffffff) != ldata)
+			DEVLOG("FC8050 long test (0x%x,0x%x)\n", i & 0xffffffff, ldata);
+	}
+
+	for(i=0;i<100;i++)
+	{
+		temp = i&0xff;
+		BBM_TUNER_WRITE(NULL, 0x12, 0x01, &temp, 0x01);
+		BBM_TUNER_READ(NULL, 0x12, 0x01, &data, 0x01);
+		if((i & 0xff) != data)
+			DEVLOG("______________________ FC8050 tuner test (0x%x,0x%x)\n", i & 0xff, data);
+	}
+	temp = 0x51;
+	BBM_TUNER_WRITE(NULL, 0x12, 0x01, &temp, 0x01 );	
+
+    BBM_WRITE(NULL, BBM_BUF_MISC_CTRL, 0x19);
+	BBM_WORD_READ(NULL, BBM_QDD_CHIP_IDL, &nChipID);
+	DEVLOG(" Chip ID =0x%0x\n", nChipID);
+	DEVLOG(" [Interface Test][SUCCESS]: OK \r\n");
+	return 1;
+}
+
+static void dmb_test(void)
+{
+  #ifdef TDMB_SPI_INTERFACE_TEST
+  tdmb_pdata.power(0);
+  msleep(5);
+  tdmb_pdata.power(1);
+	//msleep(5);
+	//tdmb_pdata.power(0);
+	//tdmb_reset(0);
+    	//tdmb_demod_enable(0);
+    	//msleep(5);
+    	//tdmb_reset(1);
+      //tdmb_demod_enable(1);
+	#endif
+
+  spi_interface_test();    
+}
+#endif
+
+#ifdef TDMB_SPI_INTERFACE
+static int tdmb_spi_probe(struct spi_device *spi)
+{
+  s32 ret;
+
+  //spi->max_speed_hz =  10800000; //8000000;//4000000;
+  spi->max_speed_hz =  10800000; //5400000;//8000000;//10800000; //8000000;//4000000;
+  spi->mode = 0;
+  spi->bits_per_word = 8;
+
+  fc8050_spi = spi;
+
+  ret = spi_setup(spi);
+  DEVLOG("[%s] : spi_setup ret= %d\n", __func__, (int) ret );
+
+  DEVLOG(" [%s] : spi.cs[%d], bit_per_word[%d]  mod[%d], hz[%d] \n", 
+  spi->modalias, spi->chip_select, spi->bits_per_word, spi->mode, spi->max_speed_hz);
+
+  #ifdef TDMB_SPI_INTERFACE_TEST
+  dmb_test();
+  #endif
+
+  #if 1
+  tdmb_pdata.irq = MSM_GPIO_TO_INT(DMB_GPIO_INT_N);
+  ret = request_irq(tdmb_pdata.irq, dmb_irq, IRQF_TRIGGER_FALLING, TDMB_DEV_NAME, NULL);
+
+  if (ret)
+  {
+    free_irq(tdmb_pdata.irq, 0);
+    DEVLOG("can't get IRQ %d, ret %d\n", tdmb_pdata.irq, ret);
+    return -EINVAL;
+  }
+  #endif
+
+  return 0;
+}
+
+static struct spi_driver tdmb_spi = {
+	.driver = {
+		.name = 	TDMB_DEV_NAME,
+		.owner =	THIS_MODULE,
+	},
+	.probe =	tdmb_spi_probe,
+};
+#endif
+
+static const struct file_operations dmbdev_fops = {
+  .owner		= THIS_MODULE,
+  .llseek		= no_llseek,
+  .read		= dmbdev_read,
+  .write		= dmbdev_write,
+  .poll		= dmbdev_poll,
+  .unlocked_ioctl	= dmbdev_ioctl,
+  .open		= dmbdev_open,
+  .release	= dmbdev_release,
+};
+
+static int __init dmb_init_module(void)
+{
+	int ret;
+
+	DEVLOG(" dmbdrv module start....\n");
+
+	tdmb_pdata.setup();
+#if 0 //def TDMB_SPI_INTERFACE_TEST
+	tdmb_pdata.power(1);
+	//msleep(5);
+	//tdmb_pdata.power(0);
+	tdmb_reset(0);
+    	tdmb_demod_enable(0);
+    	msleep(5);
+    	tdmb_reset(1);
+      tdmb_demod_enable(1);
+#endif
+
+	ret = register_chrdev(DMB_MAJOR, TDMB_DRV_NAME, &dmbdev_fops); // if success, return 0
+	if (ret < 0) {
+		DEVLOG(" [%s] unable to get major %d for fb devs\n", __func__, DMB_MAJOR);
+		return ret;
+	}
+
+	dmbclass = class_create(THIS_MODULE, TDMB_CLASS_NAME);
+	if (IS_ERR(dmbclass)) {
+		DEVLOG(" [%s] Unable to create dmbclass; errno = %ld\n", __func__, PTR_ERR(dmbclass));
+		unregister_chrdev(DMB_MAJOR, TDMB_DRV_NAME);
+		return PTR_ERR(dmbclass);
+	}
+
+	dmbdev = device_create(dmbclass, NULL, MKDEV(DMB_MAJOR, 26), NULL, TDMB_DEV_NAME);
+	
+	if (IS_ERR(dmbdev)) {
+		DEVLOG(" [%s] Unable to create device for framebuffer ; errno = %ld\n",	__func__, PTR_ERR(dmbdev));
+		unregister_chrdev(DMB_MAJOR, TDMB_DRV_NAME);
+		return PTR_ERR(dmbdev);
+	}
+
+	DMBDrv_init();
+
+	#ifdef DMB_USE_POLL
+  init_waitqueue_head(&WaitQueue_Read);
+  #endif
+	
+#ifdef TDMB_SPI_INTERFACE
+	ret = spi_register_driver(&tdmb_spi);
+
+	if (ret < 0) {
+		DEVLOG( " [%s] Unable spi_register_driver; result = %d\n", __func__, ret);
+		class_destroy(dmbclass);
+		unregister_chrdev(DMB_MAJOR,TDMB_DRV_NAME);
+	}
+#endif
+
+
+	DEVLOG(" %s Success!\n", __func__);
+	return 0;
+}
+
+static void __exit dmb_cleanup_module(void)
+{
+  DEVLOG(" dmbdrv module exit.....\n");
+
+  DMBDrv_exit();  
+  device_destroy(dmbclass, MKDEV(DMB_MAJOR,0));
+  class_destroy(dmbclass);
+  unregister_chrdev(DMB_MAJOR, TDMB_DRV_NAME);
+}	
+
+module_init(dmb_init_module);
+module_exit(dmb_cleanup_module);
+MODULE_AUTHOR("KTTech. <xxx@kttech.co.kr>");
+MODULE_DESCRIPTION("dmb /dev entries driver");
+MODULE_LICENSE("GPL");
diff -urN caf/drivers/char/dmb_fci/dmbdrv_kttech.h for-diff/drivers/char/dmb_fci/dmbdrv_kttech.h
--- caf/drivers/char/dmb_fci/dmbdrv_kttech.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/dmbdrv_kttech.h	2015-10-08 21:23:54.800842000 +0900
@@ -0,0 +1,51 @@
+#ifndef __DMBDRVH__
+#define __DMBDRVH__
+
+#include "fci_types.h"
+#include "fci_ringbuffer.h"
+#include <linux/list.h>
+#include "dmbdrv_extern.h"
+
+#define TS_USE_WORK_QUEUE
+
+typedef struct {
+	HANDLE				*hInit;
+	struct list_head		hList;
+	struct fci_ringbuffer		RingBuffer;
+	#ifdef TS_USE_WORK_QUEUE
+	struct work_struct ts_event_work;
+	#endif
+	u8				*buf;
+	u8				dmbtype;
+} DMB_OPEN_INFO_T;
+
+typedef struct {
+	struct list_head		hHead;		
+} DMB_INIT_INFO_T;
+
+static u32 g_uiKOREnsembleFullFreq[MAX_KOREABAND_FULL_CHANNEL] = 
+{
+	175280,177008,178736,
+	181280,183008,184736,
+	187280,189008,190736,
+	193280,195008,196736,
+	199280,201008,202736,
+	205280,207008,208736,
+	211280,213008,214736
+};
+
+typedef struct _tagCHANNELDB_INFO
+{
+	unsigned short uiEnsembleID;
+	unsigned char	ucSubchID;
+	unsigned short uiStartAddress;
+	unsigned char ucTMId;
+	unsigned char ucServiceType;
+	unsigned long ulServiceID;
+	unsigned char NumberofUserAppl;
+	unsigned short UserApplType[USER_APPL_NUM_MAX];
+	unsigned char UserApplLength[USER_APPL_NUM_MAX];
+	unsigned char UserApplData[USER_APPL_NUM_MAX][USER_APPL_DATA_SIZE_MAX];
+
+} SubChInfoTypeDB;
+#endif
\ No newline at end of file
diff -urN caf/drivers/char/dmb_fci/fc8050_bb.c for-diff/drivers/char/dmb_fci/fc8050_bb.c
--- caf/drivers/char/dmb_fci/fc8050_bb.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_bb.c	2015-10-08 21:23:38.220842000 +0900
@@ -0,0 +1,614 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : bbm.c
+ 
+ Description : API of dmb baseband module
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/08/29 	jason		initial
+                            BB Config 1p0
+*******************************************************************************/
+#include <linux/input.h>
+#include <linux/spi/spi.h>
+
+#include "fci_types.h"
+#include "fci_oal.h"
+#include "fci_hal.h"
+#include "fci_tun.h"
+#include "fc8050_regs.h"
+#include "fci_msg.h"
+
+#define POWER_SAVE_MODE
+#define MSMCHIP
+
+#define LOCK_TIME_TICK				5	// 5ms
+#define SLOCK_MAX_TIME				200
+#define FLOCK_MAX_TIME				300
+#define DLOCK_MAX_TIME				500
+
+static int fc8050_power_save_on(HANDLE hDevice) 
+{
+	u8 tmp = 0x64;
+		
+	bbm_write(hDevice, BBM_DIDP_POWER_OPT0, 0x06);
+	bbm_write(hDevice, BBM_DIDP_POWER_OPT1, 0x06);
+	bbm_write(hDevice, BBM_DIDP_POWER_OPT2, 0x07);
+	bbm_write(hDevice, BBM_FFT_ADC_CONTROL, 0x1c);
+
+	tuner_i2c_write(hDevice, 0x61, 1, &tmp, 1);
+
+	PRINTF(hDevice, "Power Save On\n");
+
+	return BBM_OK;
+}
+
+static int fc8050_power_save_off(HANDLE hDevice) 
+{
+	u8 tmp = 0x1e;
+	int ret=0;
+
+#if 1
+	bbm_write(hDevice, BBM_DIDP_POWER_OPT0, 0x04);
+	bbm_write(hDevice, BBM_DIDP_POWER_OPT1, 0x05);
+	bbm_write(hDevice, BBM_DIDP_POWER_OPT2, 0x05);
+	bbm_write(hDevice, BBM_FFT_ADC_CONTROL, 0x9c);
+#else
+	ret = bbm_write(hDevice, BBM_DIDP_POWER_OPT0, 0x04);
+	ret = bbm_write(hDevice, BBM_DIDP_ADD_N_SHIFT0, 0x21);
+	ret = bbm_write(hDevice, BBM_DIDP_POWER_OPT1, 0x05);
+	ret = bbm_write(hDevice, BBM_DIDP_ADD_N_SHIFT1, 0x21);
+	ret = bbm_write(hDevice, BBM_DIDP_POWER_OPT2, 0x05);
+	ret = bbm_write(hDevice, BBM_FFT_ADC_CONTROL, 0x9c);
+#endif
+
+	ret = tuner_i2c_write(hDevice, 0x61, 1, &tmp, 1);
+
+  if ( ret )
+    PRINTF(hDevice, "FC8050___:: Power Save OFF ______ error write !!!!!\n");
+
+	PRINTF(hDevice, "FC8050____:: Power Save Off\n");
+
+	return BBM_OK;
+}
+
+static int fc8050_cu_size_check(HANDLE hDevice, u8 svcId, u16* cuSize)
+{
+	int res = BBM_NOK;
+	int i;
+	u16 subchInfo = 0;
+
+	*cuSize = 0;
+
+	for(i = 0; i < 40; i++) {
+		bbm_word_read(hDevice, 0x192 + 12 * svcId, &subchInfo);
+
+		if(subchInfo & 0x3ff) {
+			*cuSize = subchInfo & 0x3ff;
+			res = BBM_OK;
+
+			PRINTF(hDevice, "CU CHECK LOOP COUNT: %d ms\n", i * 10);
+			break;
+		}
+
+		msWait(10);
+	}
+
+	return res;
+}
+
+static int fc8050_set_xtal(HANDLE hDevice) {
+#if (FC8050_FREQ_XTAL == 19200)
+	//////////////////////////////
+	// Default XTAL
+	//////////////////////////////
+#elif (FC8050_FREQ_XTAL == 16384)
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x0);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x2);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x1);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xff);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x2);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfd);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x3);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x0);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x4);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x4);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x5);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x3);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x6);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfc);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x7);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xf9);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x8);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x2);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x9);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xc);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xa);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x4);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xb);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xf0);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xc);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xed);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xd);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x13);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xe);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x4f);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xf);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x6b);
+	bbm_write(hDevice, 0xe8, 0x00);
+	bbm_write(hDevice, 0xe9, 0x00);
+	bbm_write(hDevice, 0xea, 0x00);
+	bbm_write(hDevice, 0xeb, 0x04);
+	bbm_write(hDevice, 0xec, 0x80);
+	bbm_write(hDevice, 0xed, 0x80);
+	bbm_write(hDevice, 0xee, 0x06);
+#elif (FC8050_FREQ_XTAL == 24576)
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x0);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x2);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x1);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xff);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x2);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfd);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x3);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x0);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x4);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x4);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x5);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x3);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x6);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfc);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x7);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xf9);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x8);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x2);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x9);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xc);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xa);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x4);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xb);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xf0);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xc);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xed);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xd);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x13);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xe);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x4f);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xf);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x6b);
+	bbm_write(hDevice, 0xe8, 0x00);
+	bbm_write(hDevice, 0xe9, 0x00);
+	bbm_write(hDevice, 0xea, 0x00);
+	bbm_write(hDevice, 0xeb, 0x04);
+	bbm_write(hDevice, 0xec, 0x80);
+	bbm_write(hDevice, 0xed, 0x80);
+	bbm_write(hDevice, 0xee, 0x05);
+#elif (FC8050_FREQ_XTAL == 27000)
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x0);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfe);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x1);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfe);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x2);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x1);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x3);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x4);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x4);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x3);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x5);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfd);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x6);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xf9);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x7);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xff);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x8);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x9);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x9);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x9);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xa);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfb);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xb);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xed);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xc);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xf5);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xd);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x1c);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xe);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x4b);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xf);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x61);
+	bbm_write(hDevice, 0xe8, 0x4b);
+	bbm_write(hDevice, 0xe9, 0x11);
+	bbm_write(hDevice, 0xea, 0xa4);
+	bbm_write(hDevice, 0xeb, 0x03);
+	bbm_write(hDevice, 0xec, 0x8c);
+	bbm_write(hDevice, 0xed, 0x75);
+	bbm_write(hDevice, 0xee, 0x05);
+#elif (FC8050_FREQ_XTAL == 27120)
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x0);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfe);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x1);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfe);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x2);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x1);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x3);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x4);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x4);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x2);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x5);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfc);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x6);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xf9);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x7);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xff);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x8);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x9);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x9);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x9);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xa);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfb);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xb);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xed);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xc);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xf5);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xd);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x1c);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xe);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x4b);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xf);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x61);
+	bbm_write(hDevice, 0xe8, 0x80);
+	bbm_write(hDevice, 0xe9, 0xf1);
+	bbm_write(hDevice, 0xea, 0x9f);
+	bbm_write(hDevice, 0xeb, 0x03);
+	bbm_write(hDevice, 0xec, 0x8d);
+	bbm_write(hDevice, 0xed, 0x74);
+	bbm_write(hDevice, 0xee, 0x05);	
+#elif (FC8050_FREQ_XTAL == 38400)
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x0);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfe);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x1);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x0);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x2);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x3);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x3);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x3);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x4);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xff);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x5);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfa);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x6);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfb);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x7);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x3);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x8);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xa);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0x9);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x5);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xa);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xf7);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xb);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xed);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xc);
+	bbm_write(hDevice, BBM_QDD_COEF, 0xfa);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xd);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x1f);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xe);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x49);
+	bbm_write(hDevice, BBM_QDD_COEF_BANK_SEL, 0xf);
+	bbm_write(hDevice, BBM_QDD_COEF, 0x5c);
+	bbm_write(hDevice, 0xe8, 0x36);
+	bbm_write(hDevice, 0xe9, 0xd0);
+	bbm_write(hDevice, 0xea, 0x69);
+	bbm_write(hDevice, 0xeb, 0x03);
+	bbm_write(hDevice, 0xec, 0x96);
+	bbm_write(hDevice, 0xed, 0x6d);
+	bbm_write(hDevice, 0xee, 0x04);
+#endif
+	return BBM_OK;
+}
+
+int fc8050_reset(HANDLE hDevice)
+{
+  int ret;
+	ret = bbm_write(hDevice, BBM_COM_RESET, 0xFE); 
+	msWait(1);
+	ret = bbm_write(hDevice, BBM_COM_RESET, 0xFF);
+	DEVLOG(KERN_ERR "fc8050 reset():: RESET ret= %X\n", ret);
+
+	return BBM_OK;
+}
+
+int fc8050_probe(HANDLE hDevice)
+{
+	u16 ver;
+	bbm_word_read(hDevice, BBM_QDD_CHIP_IDL, &ver);
+
+	DEVLOG(KERN_ERR "fc8050_probe():: read CHIP_IDL ver= %X\n", ver);
+
+	return (ver == 0x8050)? BBM_OK : BBM_NOK;
+}
+
+int fc8050_init(HANDLE hDevice)
+{
+	u8 intMask;
+
+	fc8050_reset(hDevice);
+	fc8050_set_xtal(hDevice);
+
+	bbm_write(hDevice, BBM_BUF_MISC_CTRL, 0x19);
+
+	//bbm_write(hDevice, BBM_24M_CLK_EN, 0xff);
+	bbm_write(hDevice, BBM_VT_CONTROL, 0x03);
+	bbm_word_write(hDevice, BBM_SYNC_CNTRL, 0x0020);
+	bbm_write(hDevice, BBM_FIC_CRC_CONTROL, 0x03);
+	bbm_write(hDevice, BBM_BUF_TEST_MODE, 0x08);
+	bbm_write(hDevice, 0x33c, 0x03);
+
+	bbm_write(hDevice, BBM_FFT_MODEM_STSH, 0x03);
+	bbm_write(hDevice, BBM_DIDP_MODE, 0x01);
+	bbm_write(hDevice, BBM_SYNC_DET_CNTRL, 0x01);
+	bbm_word_write(hDevice, BBM_SYNC_DET_MAX_THRL, 0x0A00);
+	bbm_write(hDevice, BBM_SYNC_DET_MODE_ENABLE, 0x01);
+	bbm_write(hDevice, BBM_BUF_CLOCK_EN, 0xff);
+	bbm_write(hDevice, BBM_FFT_SCALEV_IFFT, 0xea);
+	bbm_write(hDevice, BBM_SYNC_FT_RANGE, 0x20);
+	bbm_write(hDevice, BBM_QDD_AGC530_EN, 0x53);
+	bbm_write(hDevice, BBM_QDD_BLOCK_AVG_SIZE, 0x48);
+	bbm_write(hDevice, BBM_QDD_BLOCK_AVG_SIZE_LOCK, 0x49);
+	bbm_word_write(hDevice, BBM_QDD_GAIN_CONSTANT, 0x0303);
+	bbm_write(hDevice, BBM_QDD_DET_CNT_BOUND, 0x60);
+	bbm_write(hDevice, BBM_QDD_REF_AMPL, 0x00);
+	bbm_write(hDevice, BBM_QDD_BW_CTRL_LOCK, 0x50);
+	bbm_write(hDevice, BBM_QDD_DC_CTRL, 0x3f);
+
+	bbm_write(hDevice, BBM_RS_CONTROL, 0x01);
+	bbm_word_write(hDevice, BBM_RS_BER_PERIOD, 0x14e);
+	
+#if 1 //defined(POWER_SAVE_MODE) - 2011.11.14 - FCI vincent  // kuzuri_test 11.25
+	bbm_write(hDevice, BBM_DIDP_POWER_OPT0, 0x06);
+	bbm_write(hDevice, BBM_DIDP_ADD_N_SHIFT0, 0x41);
+	bbm_write(hDevice, BBM_DIDP_POWER_OPT1, 0x06);
+	bbm_write(hDevice, BBM_DIDP_ADD_N_SHIFT1, 0xf1);
+	bbm_write(hDevice, BBM_DIDP_POWER_OPT2, 0x07);
+	bbm_write(hDevice, BBM_FFT_ADC_CONTROL, 0x1c);
+#else
+	bbm_write(hDevice, BBM_DIDP_POWER_OPT0, 0x04);
+	bbm_write(hDevice, BBM_DIDP_ADD_N_SHIFT0, 0x21);
+	bbm_write(hDevice, BBM_DIDP_POWER_OPT1, 0x05);
+	bbm_write(hDevice, BBM_DIDP_ADD_N_SHIFT1, 0x21);
+	bbm_write(hDevice, BBM_DIDP_POWER_OPT2, 0x05);
+	bbm_write(hDevice, BBM_FFT_ADC_CONTROL, 0x9c);
+#endif
+
+	bbm_word_write(hDevice, BBM_BUF_FIC_START,	FIC_BUF_START);
+	bbm_word_write(hDevice, BBM_BUF_FIC_END, 	FIC_BUF_END);
+	bbm_word_write(hDevice, BBM_BUF_FIC_THR, 	FIC_BUF_THR);
+	bbm_word_write(hDevice, BBM_BUF_CH0_START,	CH0_BUF_START);
+	bbm_word_write(hDevice, BBM_BUF_CH0_END, 	CH0_BUF_END);
+	bbm_word_write(hDevice, BBM_BUF_CH0_THR, 	CH0_BUF_THR);
+	bbm_word_write(hDevice, BBM_BUF_CH1_START,	CH1_BUF_START);
+	bbm_word_write(hDevice, BBM_BUF_CH1_END, 	CH1_BUF_END);
+	bbm_word_write(hDevice, BBM_BUF_CH1_THR, 	CH1_BUF_THR);
+	bbm_word_write(hDevice, BBM_BUF_CH2_START,	CH2_BUF_START);
+	bbm_word_write(hDevice, BBM_BUF_CH2_END, 	CH2_BUF_END);
+	bbm_word_write(hDevice, BBM_BUF_CH2_THR, 	CH2_BUF_THR);
+	bbm_word_write(hDevice, BBM_BUF_CH3_START,	CH3_BUF_START);
+	bbm_word_write(hDevice, BBM_BUF_CH3_END, 	CH3_BUF_END);
+	bbm_word_write(hDevice, BBM_BUF_CH3_THR, 	CH3_BUF_THR);
+
+	bbm_word_write(hDevice, BBM_BUF_INT, 0x01ff);
+	bbm_word_write(hDevice, BBM_BUF_ENABLE, 0x01ff);
+
+	intMask = BBM_MF_INT;
+	bbm_write(hDevice, BBM_COM_INT_ENABLE, intMask);
+	bbm_write(hDevice, BBM_COM_STATUS_ENABLE, intMask);
+	
+	return BBM_OK;
+}
+
+int fc8050_deinit(HANDLE hDevice)
+{
+	bbm_write(hDevice, BBM_COM_RESET, 0x00);
+	
+	return BBM_OK;
+}
+
+int fc8050_channel_select(HANDLE hDevice, u8 subChId,u8 svcChId)
+{
+	u16 cuSize = 0;
+
+	DEVLOG("____ FC8050___ Channel select :: power save onoff ? !! \n");
+  
+	bbm_write(hDevice, BBM_DIDP_CH0_SUBCH + svcChId, 0x40 | subChId);	
+
+	fc8050_power_save_off(hDevice);
+	return BBM_OK;
+
+
+	if(fc8050_cu_size_check(hDevice, svcChId, &cuSize)) {
+	  DEVLOG("____ FC8050___ Channel select :: cu size check fail --->> power save OFF!! \n");
+		fc8050_power_save_off(hDevice);
+		return BBM_OK;
+	}
+	
+	if(cuSize >= 672) {
+	  DEVLOG("____ FC8050___ Channel select :: cu size= %d , power save OFF ! \n", cuSize);
+		fc8050_power_save_off(hDevice);
+		return BBM_OK;
+	}
+
+	fc8050_power_save_on(hDevice);
+
+ // fc8050_power_save_off(hDevice);
+
+	return BBM_OK;
+}
+
+int fc8050_video_select(HANDLE hDevice, u8 subChId,u8 svcChId, u8 cdiId)
+{
+	if(fc8050_channel_select(hDevice, subChId,svcChId) != BBM_OK) {
+		return BBM_NOK;
+	}
+	bbm_write(hDevice, BBM_CDI0_SUBCH_EN+cdiId, 0x40 | subChId);
+	bbm_write(hDevice, BBM_BUF_CH0_SUBCH+svcChId, 0x40 | subChId);
+	
+	return BBM_OK;
+}
+
+int fc8050_audio_select(HANDLE hDevice, u8 subChId,u8 svcChId)
+{
+	if(fc8050_channel_select(hDevice, subChId,svcChId) != BBM_OK) {
+		return BBM_NOK;
+	}
+	bbm_write(hDevice, BBM_BUF_CH0_SUBCH+svcChId, 0x40 | subChId);
+	
+	return BBM_OK;
+}
+
+int fc8050_data_select(HANDLE hDevice, u8 subChId,u8 svcChId)
+{
+	if(fc8050_channel_select(hDevice, subChId,svcChId) != BBM_OK) {
+		return BBM_NOK;
+	}
+	bbm_write(hDevice, BBM_BUF_CH0_SUBCH+svcChId, 0x40 | subChId);
+
+	return BBM_OK;
+}
+
+int fc8050_channel_deselect(HANDLE hDevice, u8 subChId, u8 svcChId)
+{
+	int i;
+
+	bbm_write(hDevice, BBM_DIDP_CH0_SUBCH + svcChId, 0);	
+	
+	for(i = 0; i < 12; i++) {
+		bbm_write(hDevice, 0x190 + svcChId * 12 + i, 0);
+	}
+
+	return BBM_OK;
+}
+
+int fc8050_video_deselect(HANDLE hDevice, u8 subChId, u8 svcChId, u8 cdiId)
+{
+	if(fc8050_channel_deselect(hDevice, subChId,svcChId) != BBM_OK) {
+		return BBM_NOK;
+	}
+	bbm_write(hDevice, BBM_BUF_CH0_SUBCH+svcChId, 0x00);
+	bbm_write(hDevice, BBM_CDI0_SUBCH_EN+cdiId,   0x00);
+	
+	return BBM_OK;
+}
+
+int fc8050_audio_deselect(HANDLE hDevice, u8 subChId, u8 svcChId)
+{
+	if(fc8050_channel_deselect(hDevice, subChId, svcChId) != BBM_OK) {
+		return BBM_NOK;
+	}
+ 	bbm_write(hDevice, BBM_BUF_CH0_SUBCH+svcChId, 0);
+	
+	return BBM_OK;
+}
+
+int fc8050_data_deselect(HANDLE hDevice, u8 subChId, u8 svcChId)
+{
+	if(fc8050_channel_deselect(hDevice, subChId, svcChId) != BBM_OK) {
+		return BBM_NOK;
+	}
+	bbm_write(hDevice, BBM_BUF_CH0_SUBCH+svcChId, 0);
+	
+	return BBM_OK;
+}
+
+int fc8050_scan_status(HANDLE hDevice) {
+	int i, res = BBM_NOK;
+ 	u8  mode = 0 , status = 0, sync_status = 0;
+	int slock_cnt, flock_cnt, dlock_cnt;
+	int dlock_check = 0;
+
+	bbm_read(hDevice, BBM_SYNC_DET_CNTRL, &mode);
+
+	DEVLOG("!!!!!!!!! fci log 0:   0x%x \n", mode);
+
+	if((mode & 0x01) == 0x01) {
+		slock_cnt = SLOCK_MAX_TIME / LOCK_TIME_TICK;
+		flock_cnt = FLOCK_MAX_TIME / LOCK_TIME_TICK;
+		dlock_cnt = DLOCK_MAX_TIME / LOCK_TIME_TICK;
+
+		// OFDM Detect
+		for(i = 0; i < slock_cnt; i++) {
+			msWait(LOCK_TIME_TICK);
+			
+			bbm_read(hDevice, BBM_SYNC_DET_STATUS, &status);
+			DEVLOG("!!!!!!!!! fci log 1:   0x%x \n", status);
+			if(status & 0x01)
+				break;
+		}
+
+      DEVLOG("fc8050_bb.c: log1-status= %X : i= %d , slock_cnt= %d , flock_cnt= %d, dlock_cnt= %d\n", status,i, slock_cnt, flock_cnt, dlock_cnt);
+		if(i == slock_cnt)
+			return BBM_NOK;
+
+		if((status & 0x02) == 0x00)
+			return BBM_NOK;
+
+      DEVLOG("fc8050_bb.c: start FLOCK_cnt...\n");
+		// FRS
+		for(i += 1; i < flock_cnt; i++)
+		{
+		  DEVLOG("fc8050_bb.c: i= %d\n",i);
+			msWait(LOCK_TIME_TICK);
+			DEVLOG("fc8050_bb.c: wait LOCK TICK end.\n");
+			
+			bbm_read(hDevice, BBM_SYNC_STATUS, &sync_status);
+
+			DEVLOG("fc8050_bb.c: print sync_status= %X\n", sync_status);
+			DEVLOG(" !!!!!!!!! fci log 2:   0x%x \n", sync_status);
+			
+			if(sync_status & 0x01)
+				break;
+		}
+
+		DEVLOG("fc8050_bb.c: i= %d , flock_cnt= %d\n", i, flock_cnt);
+		if (i == flock_cnt)
+			return BBM_NOK;
+
+		DEVLOG("fc8050_bb.c: start DLOCK_cnt...\n");
+		// Digital Lock
+		for(i += 1; i < dlock_cnt; i++) {
+			msWait(LOCK_TIME_TICK);
+			
+			bbm_read(hDevice, BBM_SYNC_STATUS, &sync_status);
+			DEVLOG("!!!!!!!!! fci log 3:   0x%x \n", sync_status);			
+			if ( (sync_status & 0x20) && dlock_check<=3 )
+			{
+			  //DEVLOG("!!!!!! FCI log 3: DLOCK sync success....\n");
+			  DEVLOG("!!!!!! FCI log 3: DLOCK sync success....  count = %d\n", dlock_check);
+			  dlock_check++;
+			  sync_status = 0;
+				//return BBM_OK;
+		    }
+		    else if ( (sync_status & 0x20) && dlock_check>3 )
+		    {
+			  DEVLOG("!!!!!! FCI log 3: DLOCK sync success....  count = 4\n");
+			  dlock_check = 0;
+			  msWait(LOCK_TIME_TICK);
+				return BBM_OK;
+		    }
+		}
+	} else {
+		dlock_cnt = DLOCK_MAX_TIME / LOCK_TIME_TICK;
+
+		for(i = 0; i < dlock_cnt; i++) {
+			msWait(LOCK_TIME_TICK);
+
+			bbm_read(hDevice, BBM_SYNC_STATUS, &sync_status);
+			if(sync_status & 0x20) {
+				return BBM_OK;
+			}
+		}		
+	}
+
+	DEVLOG("fc8050_bb.c: end Function res= %d...\n", res);
+	return res;
+}
+
diff -urN caf/drivers/char/dmb_fci/fc8050_bb.h for-diff/drivers/char/dmb_fci/fc8050_bb.h
--- caf/drivers/char/dmb_fci/fc8050_bb.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_bb.h	2015-10-08 21:23:56.956842000 +0900
@@ -0,0 +1,41 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_bb.h
+ 
+ Description : baseband header file
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/14 	jason		initial
+*******************************************************************************/
+
+#ifndef __FC8050_BB_H__
+#define __FC8050_BB_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern int  fc8050_reset(HANDLE hDevice);
+extern int  fc8050_probe(HANDLE hDevice);
+extern int  fc8050_init(HANDLE hDevice);
+extern int  fc8050_deinit(HANDLE hDevice);
+
+extern int  fc8050_scan_status(HANDLE hDevice);
+
+extern int  fc8050_channel_select(HANDLE hDevice, u8 subChId, u8 svcChId);
+extern int  fc8050_video_select(HANDLE hDevice, u8 subChId, u8 svcChId, u8 cdiId);
+extern int  fc8050_audio_select(HANDLE hDevice, u8 subChId, u8 svcChId);
+extern int  fc8050_data_select(HANDLE hDevice, u8 subChId, u8 svcChId);
+
+extern int  fc8050_channel_deselect(HANDLE hDevice, u8 subChId, u8 svcChId);
+extern int  fc8050_video_deselect(HANDLE hDevice, u8 subChId, u8 svcChId, u8 cdiId);
+extern int  fc8050_audio_deselect(HANDLE hDevice, u8 subChId, u8 svcChId);
+extern int  fc8050_data_deselect(HANDLE hDevice, u8 subChId, u8 svcChId);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif 		// __FC8050_BB_H__
diff -urN caf/drivers/char/dmb_fci/fc8050_demux.c for-diff/drivers/char/dmb_fci/fc8050_demux.c
--- caf/drivers/char/dmb_fci/fc8050_demux.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_demux.c	2015-10-08 21:23:38.260842000 +0900
@@ -0,0 +1,423 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_demux.c
+ 
+ Description : fc8050 TSIF demux
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/04/09 	woost		initial
+*******************************************************************************/
+
+/*
+** Include Header File
+*/
+#include "../inc/fci_types.h"
+#include "../inc/fc8050_regs.h"
+#include "../inc/fc8050_demux.h"
+
+#include <linux/input.h>
+
+/*============================================================
+**	  1.   DEFINITIONS
+*============================================================*/
+
+// Sync byte
+#define SYNC_MASK_FIC           0x80
+#define SYNC_MASK_DM            0x90
+#define SYNC_MASK_NVIDEO        0xC0
+#define SYNC_MASK_VIDEO         0x47
+#define SYNC_MASK_VIDEO1        0xB8
+#define SYNC_MASK_APAD          0xA0
+
+// packet indicator
+#define PKT_IND_NONE            0x00
+#define PKT_IND_END             0x20
+#define PKT_IND_CONTINUE        0x40
+#define PKT_IND_START           0x80
+#define PKT_IND_MASK            0xE0
+
+// data size
+#define FIC_DATA_SIZE           (FIC_BUF_LENGTH / 2)
+#define MSC_DATA_SIZE           (CH0_BUF_LENGTH / 2)
+#define DM_DATA_SIZE            188
+#define NV_DATA_SIZE            (CH3_BUF_LENGTH / 2)
+
+#define TSIF_LGE_IF
+
+// TS service information
+typedef struct _TS_FRAME_INFO
+{
+	fci_u8	ind;
+	fci_u16	length;   // current receiving length
+	fci_u8	subch_id; // sub ch id
+	fci_u8*	buffer;
+#ifdef TSIF_LGE_IF
+	fci_u8	done;
+#endif
+} TS_FRAME_INFO;
+
+// TS frame header information
+typedef struct _TS_FRAME_HDR_
+{
+	fci_u8	sync;
+	fci_u8	ind;
+	fci_u16	length;
+	fci_u8*	data;
+} TS_FRAME_HDR;
+
+/*============================================================
+**	  2.   Variables
+*============================================================*/
+//static int (*pFicCallback)(fci_u32 userdata, fci_u8 *data, int length) = NULL;
+//static int (*pMscCallback)(fci_u32 userdata, fci_u8 subChId, fci_u8 *data, int length) = NULL;
+static fci_u32 gFicUserData = 0, gMscUserData = 0;
+
+static fci_u8 sync_error_cnt = 0;
+
+#ifdef TSIF_LGE_IF
+fci_u8 bTSVideo[2][188*64];
+fci_u8 bTSFic[188*64];
+fci_u8 bTSNVideo[2][188*64];
+#else
+fci_u8 bTSVideo[2][MSC_DATA_SIZE];
+fci_u8 bTSFic[FIC_DATA_SIZE];
+fci_u8 bTSNVideo[2][NV_DATA_SIZE];
+#endif
+
+fci_u8 g_vd_channel[2] = {
+	0xff, 0xff
+};
+fci_u8 g_nv_channel[] = {
+	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+	0xff, 0xff, 0xff, 0xff
+};
+TS_FRAME_INFO sTSVideo[2] = {
+	{
+		0, 0, 0xff, (fci_u8*) bTSVideo[0], 0
+	},
+	{
+		0, 0, 0xff, (fci_u8*) bTSVideo[1], 0
+	}
+};
+TS_FRAME_INFO sTSFic = {
+	0, 0, 0xff, (fci_u8*) &bTSFic[0], 0
+};
+
+TS_FRAME_INFO sTSNVideo[8] = {
+	{0, 0, 0xff, NULL, 0},
+	{0, 0, 0xff, NULL, 0},
+	{0, 0, 0xff, (fci_u8*) bTSNVideo[0], 0},
+	{0, 0, 0xff, (fci_u8*) bTSNVideo[1], 0},
+	{0, 0, 0xff, NULL, 0},
+	{0, 0, 0xff, NULL, 0},
+	{0, 0, 0xff, NULL, 0},
+	{0, 0, 0xff, NULL, 0}
+};
+
+/*============================================================
+**	  3.   Function Prototype
+*============================================================*/
+int ts_fic_gather(fci_u8* data, fci_u32 length)
+{
+	fci_u16 len;
+	TS_FRAME_HDR header;
+	
+	header.sync		= data[0];
+	header.ind		= data[1];
+	header.length	= (data[2] << 8) | data[3];
+	header.data		= &data[4];
+
+	// current real length
+	len = (header.length > 184) ? 184 : header.length;
+
+	if(header.ind == PKT_IND_START) { // fic start frame
+		// discard already data if exist, receive new fic frame
+		sTSFic.ind		= header.ind;
+		sTSFic.length	= 0;
+		memcpy((void*)&sTSFic.buffer[sTSFic.length], header.data, len);
+		sTSFic.length	= len;
+		return BBM_OK;
+	} else if(header.ind == PKT_IND_CONTINUE)	{ // fic continue frame
+		if(sTSFic.ind != PKT_IND_START) {
+			// discard already data & current receiving data
+			sTSFic.ind = PKT_IND_NONE;
+		} else {
+			// store
+			sTSFic.ind = header.ind;
+			memcpy((void*)&sTSFic.buffer[sTSFic.length], header.data, len);
+			sTSFic.length += len;
+		}
+		return BBM_OK;
+	} else if(header.ind == PKT_IND_END) { // fic end frame
+		if(sTSFic.ind != PKT_IND_CONTINUE) {
+			// discard alread data & current receiving data
+			sTSFic.ind = PKT_IND_NONE;
+			return BBM_E_MUX_INDICATOR;
+		} else {
+			// store
+			sTSFic.ind = header.ind;
+			memcpy((void*)&sTSFic.buffer[sTSFic.length], header.data, len);
+			sTSFic.length += len;
+		}
+	}
+
+	// send host application
+	if((sTSFic.length >= FIC_DATA_SIZE) && (sTSFic.ind == PKT_IND_END)) {
+#ifdef TSIF_LGE_IF
+		sTSFic.done=1;
+#else
+		if(pFicCallback)
+			(*pFicCallback)(gFicUserData, sTSFic.buffer, sTSFic.length);
+	
+		sTSFic.length	= 0;
+#endif
+		sTSFic.ind		= PKT_IND_NONE;
+	}
+
+	return BBM_OK;
+}
+
+int ts_nv_gather(fci_u8* data, fci_u32 length) {
+	TS_FRAME_HDR header;
+	fci_u32 len;
+	fci_u8  subch;
+	fci_u8  ch;
+
+	header.sync   = data[0];
+	header.ind    = data[1];
+	header.length = (data[2] << 8) | data[3];
+	header.data   = &data[4];
+
+	len = (header.length >= 184) ? 184 : header.length;
+
+	subch = header.sync & 0x3f;
+	ch = g_nv_channel[subch];
+
+	if(ch == 0xff)
+		return BBM_E_MUX_SUBCHANNEL;
+
+	if(header.ind == PKT_IND_START) {
+		sTSNVideo[ch].length   = 0;
+
+		memcpy((void*)&sTSNVideo[ch].buffer[0], header.data, len);
+		sTSNVideo[ch].length += len;
+		if(sTSNVideo[ch].length < header.length)
+			sTSNVideo[ch].ind = header.ind;
+		else
+			sTSNVideo[ch].ind = PKT_IND_END;
+	} else if(header.ind == PKT_IND_CONTINUE) {
+		memcpy((void*)&sTSNVideo[ch].buffer[sTSNVideo[ch].length], header.data, len);
+		sTSNVideo[ch].length += len;
+		sTSNVideo[ch].ind     = header.ind;
+		return BBM_OK;
+	} else if(header.ind == PKT_IND_END) {
+		memcpy((void*)&sTSNVideo[ch].buffer[sTSNVideo[ch].length], header.data, len);
+		sTSNVideo[ch].length += len;
+		sTSNVideo[ch].ind     = header.ind;
+	}
+
+	if((header.ind == PKT_IND_END) || (header.ind == PKT_IND_START && 184 >= sTSNVideo[ch].length)) {
+#ifdef TSIF_LGE_IF
+		sTSNVideo[ch].done=1;
+#else
+		if(pMscCallback)
+			(*pMscCallback)(gMscUserData, subch, sTSNVideo[ch].buffer, sTSNVideo[ch].length);
+		
+		sTSNVideo[ch].length = 0;
+#endif		
+		sTSNVideo[ch].ind    = PKT_IND_NONE;
+	}
+
+	return BBM_OK;
+}
+
+int ts_dmb_gather(fci_u8* data, fci_u32 length) {
+	fci_u8 ch;
+	
+	// trace sync
+	if(data[0] == SYNC_MASK_VIDEO){
+		ch = 0;
+	} else if(data[0] == SYNC_MASK_VIDEO1){
+		ch = 1;
+		data[0] = 0x47;
+	} else {
+		return BBM_E_MUX_DATA_MASK;
+	}
+
+	if(g_vd_channel[ch] == 0xff)
+		return BBM_E_MUX_SUBCHANNEL;
+
+	memcpy((void*)(sTSVideo[ch].buffer + sTSVideo[ch].length), data, 188);
+	sTSVideo[ch].length += length;
+
+	if(sTSVideo[ch].length >= MSC_DATA_SIZE)
+	{
+#ifdef TSIF_LGE_IF
+		sTSVideo[ch].done=1;
+#else
+
+		if(pMscCallback)
+			(*pMscCallback)(gMscUserData, g_vd_channel[ch], sTSVideo[ch].buffer, MSC_DATA_SIZE);
+		sTSVideo[ch].length = 0;
+#endif
+	}
+	
+	return BBM_OK;
+}
+
+int fc8050_demux(fci_u8* data, fci_u32 length) {
+	int res = BBM_OK;
+	fci_u32 i, pos;
+	fci_u8  sync_error = 0;
+
+	for(i = 0; i < length; i += 188)  {
+		if(data[i] == SYNC_MASK_FIC) {
+			res = ts_fic_gather(&data[i], 188);
+		} else if((data[i] == SYNC_MASK_VIDEO) || (data[i] == SYNC_MASK_VIDEO1)) {
+			res = ts_dmb_gather(&data[i], 188);	
+		} else if((data[i] & 0xC0) == 0xC0) {
+			res = ts_nv_gather(&data[i], 188);
+		} else {
+			//PRINTF(" %02X", data[i]);
+			sync_error++;
+		}
+	}
+
+	if(sync_error > 0) {
+		sync_error_cnt += sync_error;
+		if(sync_error_cnt >= 5)	
+			return BBM_E_MUX_SYNC;
+	} else{
+		sync_error_cnt = 0;
+	}
+	return res;
+}
+
+#ifdef TSIF_LGE_IF
+fci_u32 fc8050_get_ts_datalen(ts_data_type type, fci_u8 ch, fci_u32 *len) 
+{
+	switch(type)
+	{
+		case TS_DAT_FIC:
+			if(sTSFic.done)
+			{
+				*len = sTSFic.length;
+				return BBM_OK;
+			}
+		break;
+
+		case TS_DAT_VIDEO_I:
+			if(sTSVideo[ch].done)
+			{
+				*len = sTSVideo[ch].length;
+				return BBM_OK;
+			}
+		break;
+		
+		case TS_DAT_NVIDEO:
+			if(sTSNVideo[ch].done)
+			{
+				*len = sTSNVideo[ch].length;
+				return BBM_OK;
+			}
+		break;
+			
+		default:
+			return BBM_NOK;
+			break;
+	}
+	
+	return BBM_NOK;
+}
+
+fci_u32 fc8050_get_multi_data(ts_data_type type, fci_u8 ch, fci_u8* buf, fci_u8* chid)
+{
+	switch(type)
+	{
+		case TS_DAT_FIC:
+			if(sTSFic.done)
+			{
+				memcpy((void*)buf, (void*)sTSFic.buffer, sTSFic.length);
+				sTSFic.done=0;
+				sTSFic.length=0;
+				return BBM_OK;
+			}
+		break;
+
+		case TS_DAT_VIDEO_I:
+			if(sTSVideo[ch].done)
+			{
+				memcpy((void*)buf, (void*)sTSVideo[ch].buffer, sTSVideo[ch].length);
+				sTSVideo[ch].done=0;
+				sTSVideo[ch].length=0;
+				*chid=sTSVideo[ch].subch_id;
+				return BBM_OK;
+			}
+		break;
+		
+		case TS_DAT_NVIDEO:
+			if(sTSNVideo[ch].done)
+			{
+				memcpy((void*)buf, (void*)sTSNVideo[ch].buffer, sTSNVideo[ch].length);
+				sTSNVideo[ch].done=0;
+				sTSNVideo[ch].length=0;
+				*chid=sTSNVideo[ch].subch_id;
+				return BBM_OK;
+			}
+		break;
+			
+		default:
+			return BBM_NOK;
+			break;
+	}
+	
+	return BBM_NOK;
+}
+
+#endif
+
+int fc8050_demux_fic_callback_register(fci_u32 userdata, int (*callback)(fci_u32 userdata, fci_u8 *data, int length)) {
+	gFicUserData = userdata;
+	pFicCallback = callback;
+	return BBM_OK;
+}
+
+int fc8050_demux_msc_callback_register(fci_u32 userdata, int (*callback)(fci_u32 userdata, fci_u8 subChId, fci_u8 *data, int length)) {
+	gMscUserData = userdata;
+	pMscCallback = callback;
+	return BBM_OK;
+}
+
+int fc8050_demux_select_video(fci_u8 subChId, fci_u8 cdiId) {
+	g_vd_channel[cdiId] = subChId;
+	sTSVideo[cdiId].subch_id= subChId;
+	return BBM_OK;
+}
+
+int fc8050_demux_select_channel(fci_u8 subChId, fci_u8 svcChId) {
+	g_nv_channel[subChId] = svcChId;
+	sTSNVideo[svcChId].subch_id= subChId;
+	return BBM_OK;
+}
+
+int fc8050_demux_deselect_video(fci_u8 subChId, fci_u8 cdiId) {
+	if(g_vd_channel[cdiId] == subChId)
+	{	
+		g_vd_channel[cdiId] = 0xff;
+		sTSVideo[cdiId].subch_id= 0;
+	}
+	return BBM_OK;
+}
+
+int fc8050_demux_deselect_channel(fci_u8 subChId, fci_u8 svcChId) {
+	g_nv_channel[subChId] = 0xff;
+	sTSNVideo[svcChId].subch_id= 0;
+	return BBM_OK;
+}
diff -urN caf/drivers/char/dmb_fci/fc8050_demux.h for-diff/drivers/char/dmb_fci/fc8050_demux.h
--- caf/drivers/char/dmb_fci/fc8050_demux.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_demux.h	2015-10-08 21:23:57.236842000 +0900
@@ -0,0 +1,43 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_demux.h
+ 
+ Description : baseband header file
+ 
+ History : 
+ ----------------------------------------------------------------------
+
+*******************************************************************************/
+
+#ifndef __FC8050_DEMUX_H__
+#define __FC8050_DEMUX_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef enum ts_data_type
+{
+	TS_DAT_FIC,
+	TS_DAT_VIDEO_I,
+	TS_DAT_VIDEO_II,
+	TS_DAT_NVIDEO
+} ts_data_type;
+
+int fc8050_demux(fci_u8* data, fci_u32 length);
+int fc8050_demux_fic_callback_register(fci_u32 userdata, int (*callback)(fci_u32 userdata, fci_u8 *data, int length));
+int fc8050_demux_msc_callback_register(fci_u32 userdata, int (*callback)(fci_u32 userdata, fci_u8 subChId, fci_u8 *data, int length));
+int fc8050_demux_select_video(fci_u8 subChID, fci_u8 cdiId);
+int fc8050_demux_select_channel(fci_u8 subChId, fci_u8 svcChId);
+int fc8050_demux_deselect_video(fci_u8 subChId, fci_u8 cdiId);
+int fc8050_demux_deselect_channel(fci_u8 subChId, fci_u8 svcChId);
+#ifdef TSIF_LGE_IF
+fci_u32 fc8050_get_ts_datalen(ts_data_type type, fci_u8 ch, fci_u32 *len);
+fci_u32 fc8050_get_multi_data(ts_data_type type, fci_u8 ch, fci_u8* buf, fci_u8* chid);
+#endif
+#ifdef __cplusplus
+}
+#endif
+
+#endif // __FC8050_DEMUX_H__
diff -urN caf/drivers/char/dmb_fci/fc8050_hpi.c for-diff/drivers/char/dmb_fci/fc8050_hpi.c
--- caf/drivers/char/dmb_fci/fc8050_hpi.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_hpi.c	2015-10-08 21:23:38.288842000 +0900
@@ -0,0 +1,176 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_hpi.c
+ 
+ Description : fc8050 host interface
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/14 	jason		initial
+*******************************************************************************/
+
+#include "fci_types.h"
+#include "fc8050_regs.h"
+
+#define HPIC_READ			0x01	// read command
+#define HPIC_WRITE			0x02	// write command
+#define HPIC_AINC			0x04	// address increment
+#define HPIC_BMODE			0x00	// byte mode
+#define HPIC_WMODE                      0x10	// word mode
+#define HPIC_LMODE                      0x20	// long mode
+#define HPIC_ENDIAN			0x00	// little endian
+#define HPIC_CLEAR			0x80	// currently not used
+
+#define BBM_BASE_ADDR       0 
+#define BBM_BASE_OFFSET     0
+
+#define FC8050_CMD_REG			(*(volatile u8 *)(BBM_BASE_ADDR + (BBM_COMMAND_REG << BBM_BASE_OFFSET)))
+#define FC8050_ADDR_REG			(*(volatile u8 *)(BBM_BASE_ADDR + (BBM_ADDRESS_REG << BBM_BASE_OFFSET)))
+#define FC8050_DATA_REG			(*(volatile u8 *)(BBM_BASE_ADDR + (BBM_DATA_REG << BBM_BASE_OFFSET)))
+
+int fc8050_hpi_init(HANDLE hDevice, u16 param1, u16 param2)
+{
+	return BBM_OK;
+}
+
+int fc8050_hpi_byteread(HANDLE hDevice, u16 addr, u8 *data)
+{
+	FC8050_CMD_REG = HPIC_READ | HPIC_BMODE | HPIC_ENDIAN;
+
+	FC8050_ADDR_REG = (addr & 0xff);
+	FC8050_ADDR_REG = (addr & 0xff00) >> 8;
+
+	*data = FC8050_DATA_REG;
+	
+	return BBM_OK;
+}
+
+int fc8050_hpi_wordread(HANDLE hDevice, u16 addr, u16 *data)
+{
+	u8 command = HPIC_READ | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+	
+	if(BBM_SCI_DATA <= addr && BBM_SCI_SYNCRX >= addr)
+		command = HPIC_READ | HPIC_WMODE | HPIC_ENDIAN;
+	
+	FC8050_CMD_REG = command;
+
+	FC8050_ADDR_REG = (addr & 0xff);
+	FC8050_ADDR_REG = (addr & 0xff00) >> 8;
+
+	*data = FC8050_DATA_REG;
+	*data |= FC8050_DATA_REG << 8;
+
+	return BBM_OK;
+}
+
+int fc8050_hpi_longread(HANDLE hDevice, u16 addr, u32 *data)
+{
+	FC8050_CMD_REG = HPIC_READ | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+
+	FC8050_ADDR_REG = (addr & 0xff);
+	FC8050_ADDR_REG = (addr & 0xff00) >> 8;
+
+	*data = FC8050_DATA_REG;
+	*data |= FC8050_DATA_REG << 8;
+	*data |= FC8050_DATA_REG << 16;
+	*data |= FC8050_DATA_REG << 24;
+
+	return BBM_OK;
+}
+
+int fc8050_hpi_bulkread(HANDLE hDevice, u16 addr, u8 *data, u16 length)
+{
+	s32 i;
+
+	FC8050_CMD_REG = HPIC_READ | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+
+	FC8050_ADDR_REG = (addr & 0xff);
+	FC8050_ADDR_REG = (addr & 0xff00) >> 8;
+
+	for(i=0; i<length; i++) {
+		data[i] = FC8050_DATA_REG;
+	}
+	
+	return BBM_OK;
+}
+
+int fc8050_hpi_bytewrite(HANDLE hDevice, u16 addr, u8 data)
+{
+	FC8050_CMD_REG = HPIC_WRITE | HPIC_BMODE | HPIC_ENDIAN;
+
+	FC8050_ADDR_REG = (addr & 0xff);
+	FC8050_ADDR_REG = (addr & 0xff00) >> 8;
+
+	FC8050_DATA_REG = data;
+
+	return BBM_OK;
+}
+
+int fc8050_hpi_wordwrite(HANDLE hDevice, u16 addr, u16 data)
+{
+	u8 command = HPIC_WRITE | HPIC_BMODE | HPIC_ENDIAN | HPIC_AINC;
+	
+	if(BBM_SCI_DATA <= addr && BBM_SCI_SYNCRX >= addr)
+		command = HPIC_WRITE | HPIC_WMODE | HPIC_ENDIAN;
+	
+	FC8050_CMD_REG = command;
+
+	FC8050_ADDR_REG = (addr & 0xff);
+	FC8050_ADDR_REG = (addr & 0xff00) >> 8;
+
+	FC8050_DATA_REG = (data & 0xff);
+	FC8050_DATA_REG = (data & 0xff00) >> 8;
+
+	return BBM_OK;
+}
+
+int fc8050_hpi_longwrite(HANDLE hDevice, u16 addr, u32 data)
+{
+	FC8050_CMD_REG = HPIC_WRITE | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+
+	FC8050_ADDR_REG = (addr & 0xff);
+	FC8050_ADDR_REG = (addr & 0xff00) >> 8;
+
+	FC8050_DATA_REG = (data & 0xff);
+	FC8050_DATA_REG = (data & 0xff00) >> 8;
+	FC8050_DATA_REG = (data & 0xff0000) >> 16;
+	FC8050_DATA_REG = (data & 0xff000000) >> 24;
+
+	return BBM_OK;
+}
+
+int fc8050_hpi_bulkwrite(HANDLE hDevice, u16 addr, u8* data, u16 length)
+{
+	s32 i;
+	FC8050_CMD_REG = HPIC_WRITE | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+
+	FC8050_ADDR_REG = (addr & 0xff);
+	FC8050_ADDR_REG = (addr & 0xff00) >> 8;
+
+	for(i = 0; i < length; i++) {
+		FC8050_DATA_REG = data[i];
+	}
+
+	return BBM_OK;
+}
+
+int fc8050_hpi_dataread(HANDLE hDevice, u16 addr, u8* data, u16 length)
+{
+	s32 i;
+	FC8050_CMD_REG = HPIC_READ | HPIC_BMODE | HPIC_ENDIAN;
+
+	FC8050_ADDR_REG = (addr & 0xff);
+	FC8050_ADDR_REG= (addr & 0xff00) >> 8;
+
+	for(i = 0; i < length; i++) {
+		data[i] = FC8050_DATA_REG;
+	}
+
+	return BBM_OK;
+}
+
+int fc8050_hpi_deinit(HANDLE hDevice)
+{
+	return BBM_OK;
+}
diff -urN caf/drivers/char/dmb_fci/fc8050_hpi.h for-diff/drivers/char/dmb_fci/fc8050_hpi.h
--- caf/drivers/char/dmb_fci/fc8050_hpi.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_hpi.h	2015-10-08 21:23:58.476842000 +0900
@@ -0,0 +1,37 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_hpi.c
+ 
+ Description : API of dmb baseband module
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/11 	jason		initial
+*******************************************************************************/
+
+#ifndef __FC8050_HPI_H__
+#define __FC8050_HPI_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern int fc8050_hpi_init(HANDLE hDevice, u16 param1, u16 param2);
+extern int fc8050_hpi_byteread(HANDLE hDevice, u16 addr, u8 *data);
+extern int fc8050_hpi_wordread(HANDLE hDevice, u16 addr, u16 *data);
+extern int fc8050_hpi_longread(HANDLE hDevice, u16 addr, u32 *data);
+extern int fc8050_hpi_bulkread(HANDLE hDevice, u16 addr, u8 *data, u16 length);
+extern int fc8050_hpi_bytewrite(HANDLE hDevice, u16 addr, u8 data);
+extern int fc8050_hpi_wordwrite(HANDLE hDevice, u16 addr, u16 data);
+extern int fc8050_hpi_longwrite(HANDLE hDevice, u16 addr, u32 data);
+extern int fc8050_hpi_bulkwrite(HANDLE hDevice, u16 addr, u8* data, u16 length);
+extern int fc8050_hpi_dataread(HANDLE hDevice, u16 addr, u8* data, u16 length);
+extern int fc8050_hpi_deinit(HANDLE hDevice);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // __FC8050_HPI_H__
+
diff -urN caf/drivers/char/dmb_fci/fc8050_i2c.c for-diff/drivers/char/dmb_fci/fc8050_i2c.c
--- caf/drivers/char/dmb_fci/fc8050_i2c.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_i2c.c	2015-10-08 21:23:38.300842000 +0900
@@ -0,0 +1,156 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+
+ File name : fc8050_i2c.c
+
+ Description : fc8050 host interface
+
+ History :
+ ----------------------------------------------------------------------
+*******************************************************************************/
+
+#include "fci_types.h"
+#include "fc8050_regs.h"
+
+#define HPIC_READ			0x01	// read command
+#define HPIC_WRITE			0x02	// write command
+#define HPIC_AINC			0x04	// address increment
+#define HPIC_BMODE			0x00	// byte mode
+#define HPIC_WMODE          0x10	// word mode
+#define HPIC_LMODE          0x20	// long mode
+#define HPIC_ENDIAN			0x00	// little endian
+#define HPIC_CLEAR			0x80	// currently not used
+
+#define  CHIP_ADRR       0x58
+
+static int i2c_bulkread(HANDLE hDevice, u8 addr, u8 *data, u16 length)
+{
+	return 0;
+}
+
+static int i2c_bulkwrite(HANDLE hDevice, u8 addr, u8* data, u16 length)
+{
+	return 0;
+}
+
+static int i2c_dataread(HANDLE hDevice, u8 addr, u8* data, u16 length)
+{
+	return i2c_bulkread(hDevice, addr, data, length);
+}
+
+int fc8050_i2c_init(HANDLE hDevice, u16 param1, u16 param2)
+{
+	return BBM_OK;
+}
+
+int fc8050_i2c_byteread(HANDLE hDevice, u16 addr, u8 *data)
+{
+	int res;
+	u8 command = HPIC_READ | HPIC_BMODE | HPIC_ENDIAN;
+	res  = i2c_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= i2c_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= i2c_bulkread(hDevice, BBM_DATA_REG, data, 1);
+
+	return res;
+}
+
+int fc8050_i2c_wordread(HANDLE hDevice, u16 addr, u16 *data)
+{
+	int res;
+	u8 command = HPIC_READ | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+	
+	if(BBM_SCI_DATA <= addr && BBM_SCI_SYNCRX >= addr)
+		command = HPIC_READ | HPIC_WMODE | HPIC_ENDIAN;
+
+	res  = i2c_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= i2c_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= i2c_bulkread(hDevice, BBM_DATA_REG, (u8*)data, 2);
+
+	return res;
+}
+
+int fc8050_i2c_longread(HANDLE hDevice, u16 addr, u32 *data)
+{
+	int res;
+	u8 command = HPIC_READ | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+	res  = i2c_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= i2c_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= i2c_bulkread(hDevice, BBM_DATA_REG, (u8*)data, 4);
+
+	return res;
+}
+
+int fc8050_i2c_bulkread(HANDLE hDevice, u16 addr, u8 *data, u16 length)
+{
+	int res;
+	u8 command = HPIC_READ | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+	res  = i2c_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= i2c_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= i2c_bulkread(hDevice, BBM_DATA_REG, data, length);
+
+	return res;
+}
+
+int fc8050_i2c_bytewrite(HANDLE hDevice, u16 addr, u8 data)
+{
+	int res;
+	u8 command = HPIC_WRITE | HPIC_BMODE | HPIC_ENDIAN;
+	res  = i2c_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= i2c_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= i2c_bulkwrite(hDevice, BBM_DATA_REG, (u8*)&data, 1);
+
+	return res;
+}
+
+int fc8050_i2c_wordwrite(HANDLE hDevice, u16 addr, u16 data)
+{
+	int res;
+	u8 command = HPIC_WRITE | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+	
+	if(BBM_SCI_DATA <= addr && BBM_SCI_SYNCRX >= addr)
+		command = HPIC_WRITE | HPIC_WMODE | HPIC_ENDIAN;
+
+	res  = i2c_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= i2c_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= i2c_bulkwrite(hDevice, BBM_DATA_REG, (u8*)&data, 2);
+
+	return res;
+}
+
+int fc8050_i2c_longwrite(HANDLE hDevice, u16 addr, u32 data)
+{
+	int res;
+	u8 command = HPIC_WRITE | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+	res  = i2c_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= i2c_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= i2c_bulkwrite(hDevice, BBM_DATA_REG, (u8*)&data, 4);
+
+	return res;
+}
+
+int fc8050_i2c_bulkwrite(HANDLE hDevice, u16 addr, u8* data, u16 length)
+{
+	int res;
+	u8 command = HPIC_WRITE | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+	res  = i2c_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= i2c_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= i2c_bulkwrite(hDevice, BBM_DATA_REG, data, length);
+
+	return res;
+}
+
+int fc8050_i2c_dataread(HANDLE hDevice, u16 addr, u8* data, u16 length)
+{
+	int res;
+	u8 command = HPIC_READ | HPIC_BMODE | HPIC_ENDIAN;
+	res  = i2c_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= i2c_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= i2c_dataread(hDevice, BBM_DATA_REG, data, length);
+
+	return res;
+}
+
+int fc8050_i2c_deinit(HANDLE hDevice)
+{
+	return BBM_OK;
+}
diff -urN caf/drivers/char/dmb_fci/fc8050_i2c.h for-diff/drivers/char/dmb_fci/fc8050_i2c.h
--- caf/drivers/char/dmb_fci/fc8050_i2c.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_i2c.h	2015-10-08 21:23:58.532842000 +0900
@@ -0,0 +1,37 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_i2c.c
+ 
+ Description : API of dmb baseband module
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/14 	jason		initial
+*******************************************************************************/
+
+#ifndef __FC8050_I2C_H__
+#define __FC8050_I2C_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern int fc8050_i2c_init(HANDLE hDevice, u16 param1, u16 param2);
+extern int fc8050_i2c_byteread(HANDLE hDevice, u16 addr, u8 *data);
+extern int fc8050_i2c_wordread(HANDLE hDevice, u16 addr, u16 *data);
+extern int fc8050_i2c_longread(HANDLE hDevice, u16 addr, u32 *data);
+extern int fc8050_i2c_bulkread(HANDLE hDevice, u16 addr, u8 *data, u16 length);
+extern int fc8050_i2c_bytewrite(HANDLE hDevice, u16 addr, u8 data);
+extern int fc8050_i2c_wordwrite(HANDLE hDevice, u16 addr, u16 data);
+extern int fc8050_i2c_longwrite(HANDLE hDevice, u16 addr, u32 data);
+extern int fc8050_i2c_bulkwrite(HANDLE hDevice, u16 addr, u8* data, u16 length);
+extern int fc8050_i2c_dataread(HANDLE hDevice, u16 addr, u8* data, u16 length);
+extern int fc8050_i2c_deinit(HANDLE hDevice);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // __FC8050_I2C_H__
+
diff -urN caf/drivers/char/dmb_fci/fc8050_isr.c for-diff/drivers/char/dmb_fci/fc8050_isr.c
--- caf/drivers/char/dmb_fci/fc8050_isr.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_isr.c	2015-10-08 21:23:38.344842000 +0900
@@ -0,0 +1,162 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_isr.c
+ 
+ Description : fc8050 interrupt service routine
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/08/29 	jason		initial
+*******************************************************************************/
+#include <linux/input.h>
+#include <linux/spi/spi.h>
+
+#include "fci_types.h"
+#include "fci_hal.h"
+#include "fc8050_regs.h"
+#include "fci_msg.h"
+
+// 2011.11.28 vincent
+static u8 ficBuffer[4096]  ____cacheline_aligned;
+static u8 mscBuffer[8192+4] ____cacheline_aligned;
+
+//int (*pFicCallback)(HANDLE hDevice, u8 *data, int length) = NULL;
+int (*pFicCallback)(void *, unsigned char *, int ) = NULL;
+//int (*pMscCallback)(HANDLE hDevice, u8 subchid, u8 *data, int length) = NULL;
+int (*pMscCallback)(void *, unsigned char, unsigned char *, int ) = NULL;
+
+u32 gFicUserData;
+u32 gMscUserData;
+
+void fc8050_isr(HANDLE hDevice)
+{
+  u16 overrun;
+  u16 buf_enable=0;   
+  u8	extIntStatus = 0;
+  int ret_val = 0;
+
+  u16	mfIntStatus = 0;
+  u16	size;
+  int  	i;
+  int mfInt_one = 0;
+
+  //2011.11.18 - FCI Vincent, External Interrupt Disable
+  //bbm_write(hDevice, BBM_COM_INT_ENABLE, 0); // kuzuri del 2011.11.21 - 화면 멈춤 현상(SPI.error) 발생!!!
+  ret_val = bbm_read(hDevice, BBM_COM_INT_STATUS, &extIntStatus);
+  bbm_write(hDevice, BBM_COM_INT_STATUS, extIntStatus);
+  bbm_write(hDevice, BBM_COM_INT_STATUS, 0x00);
+
+  //DEVLOG(KERN_ERR "FC8050_ISR()---- extIntStatus= %X\n", extIntStatus);
+
+  if(extIntStatus & BBM_MF_INT)
+  {
+    ret_val = bbm_word_read(hDevice, BBM_BUF_STATUS, &mfIntStatus);
+    CHECK_RET(1)
+    bbm_word_write(hDevice, BBM_BUF_STATUS, mfIntStatus);
+    bbm_word_write(hDevice, BBM_BUF_STATUS, 0x0000);
+
+    if(mfIntStatus & 0x0100)
+    {		  
+      DEVLOG(KERN_ERR "FC8050_ISR()--- 3___ mfIntstatus 0x0100 \n");
+      bbm_word_read(hDevice, BBM_BUF_FIC_THR, &size);
+      size += 1;
+      if(size-1)
+      {
+        ret_val = bbm_data(hDevice, BBM_COM_FIC_DATA, &ficBuffer[0], size);
+        // kuzuri 2011.12.02 - bbm_data fail 일 경우, 아래 FicCallback 에서 Kernel panic 발생함. extIntStatus=1, mfIntStatus = 0x100 인 경우 문제됨.
+        if ( ret_val!=0 )
+        {
+          DEVLOG(KERN_ERR "Error_____ FC8050_ISR()--- bbm_data read FAIL.. clear isr.\n");
+          mfIntStatus = 0;
+        }
+        else
+        {
+          if(pFicCallback) 
+            (*pFicCallback)(hDevice, &ficBuffer[2], size);  // kuzuri 2011.12.02 - spi_readburst 함수 수정.
+            //(*pFicCallback)(hDevice, &ficBuffer[4], size);
+        }
+      } 
+    }
+
+    if ( mfIntStatus == 0 || mfIntStatus>1 )
+      DEVLOG(KERN_ERR "FC8050_ISR()--- mfInt= %d  \n",mfIntStatus);
+
+    if ( mfIntStatus==0x1 )
+    {
+      mfInt_one = 1;
+    }
+
+    // 2011.11.16 FCI Vincent
+    if(mfIntStatus == 0)
+    { 
+      //buffer Clear
+      overrun = 1;
+      bbm_word_read(NULL, BBM_BUF_ENABLE, &buf_enable);
+      buf_enable &= ~overrun;
+      bbm_word_write(NULL, BBM_BUF_ENABLE, buf_enable);
+      buf_enable |= overrun; 
+      bbm_word_write(NULL, BBM_BUF_ENABLE, buf_enable);
+      DEVLOG(KERN_ERR "FC8050_ISR()- buffer clear mfIntStatus = %X\n", mfIntStatus);
+    }
+    else
+    {
+      for(i=0; i<8; i++)
+      {
+        if(mfIntStatus & (1<<i))
+        {
+          ret_val = bbm_word_read(hDevice, BBM_BUF_CH0_THR+i*2, &size);
+          CHECK_RET(2)
+
+          size += 1;
+
+          if(size-1)
+          {
+            u8  subChId;
+
+            ret_val = bbm_read(hDevice, BBM_BUF_CH0_SUBCH+i, &subChId);
+            subChId = subChId & 0x3f;
+
+            ret_val = bbm_data(hDevice, (BBM_COM_CH0_DATA+i), &mscBuffer[0], size);
+            CHECK_RET(3)
+
+            if(pMscCallback)
+              (*pMscCallback)(hDevice, subChId, &mscBuffer[2], size);  // kuzuri 2011.12.02 - spi_readburst 함수 수정.
+              //(*pMscCallback)(hDevice, subChId, &mscBuffer[4], size);
+          }
+        }
+
+        if ( mfInt_one==1 ) break;
+      }
+    }
+  }
+
+ 
+#if 0
+	if(extIntStatus & BBM_SCI_INT) {
+		extern void PL131_IntHandler(void);
+		PL131_IntHandler();
+					}
+
+	if(extIntStatus & BBM_WAGC_INT) {
+	}
+
+	if(extIntStatus & BBM_RECFG_INT) {
+				}
+
+	if(extIntStatus & BBM_TII_INT) {
+			}
+
+	if(extIntStatus & BBM_SYNC_INT) {
+		}
+
+	if(extIntStatus & BBM_I2C_INT) {
+	}
+	
+	if(extIntStatus & BBM_MP2_INT) {
+	}
+#endif
+	//2011.11.18 - FCI Vincent External Interrupt Enable	
+	//bbm_write(hDevice, BBM_COM_INT_ENABLE, BBM_MF_INT);  // kuzuri del 2011.11.21 - 화면 멈춤 현상(SPI.error) 발생!!!
+}
+
diff -urN caf/drivers/char/dmb_fci/fc8050_isr.h for-diff/drivers/char/dmb_fci/fc8050_isr.h
--- caf/drivers/char/dmb_fci/fc8050_isr.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_isr.h	2015-10-08 21:23:58.708842000 +0900
@@ -0,0 +1,37 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_isr.c
+ 
+ Description : API of dmb baseband module
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/11 	jason		initial
+*******************************************************************************/
+
+#ifndef __FC8050_ISR__
+#define __FC8050_ISR__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include "fci_types.h"
+
+extern u32 gFicUserData;
+extern u32 gMscUserData;
+
+//extern int (*pFicCallback)(u32 userdata, u8 *data, int length);
+extern int (*pFicCallback)(void *, unsigned char *, int );
+//extern int (*pMscCallback)(u32 userdata, u8 subchid, u8 *data, int length);
+extern int (*pMscCallback)(void *, unsigned char, unsigned char *, int );
+
+extern void fc8050_isr(HANDLE hDevice);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // __FC8050_ISR__
+
diff -urN caf/drivers/char/dmb_fci/fc8050_ppi.c for-diff/drivers/char/dmb_fci/fc8050_ppi.c
--- caf/drivers/char/dmb_fci/fc8050_ppi.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_ppi.c	2015-10-08 21:23:38.368842000 +0900
@@ -0,0 +1,199 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_ppi.c
+ 
+ Description : fc8050 host interface
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/14 	jason		initial
+*******************************************************************************/
+
+#include "fci_types.h"
+#include "fc8050_regs.h"
+
+#define BBM_BASE_ADDR				0
+#define BBM_BASE_OFFSET 			0x00
+
+#define PPI_BMODE                       0x00
+#define PPI_WMODE                       0x10
+#define PPI_LMODE                       0x20
+#define PPI_READ                        0x40
+#define PPI_WRITE                       0x00
+#define PPI_AINC                        0x80
+
+#define FC8050_PPI_REG			(*(volatile u8 *)(BBM_BASE_ADDR + (BBM_COMMAND_REG << BBM_BASE_OFFSET)))
+
+int fc8050_ppi_init(HANDLE hDevice, u16 param1, u16 param2)
+{
+
+	return BBM_OK;
+}
+
+int fc8050_ppi_byteread(HANDLE hDevice, u16 addr, u8 *data)
+{
+	u16 length = 1;
+	FC8050_PPI_REG = addr & 0xff;
+	FC8050_PPI_REG = (addr & 0xff00) >> 8;
+	FC8050_PPI_REG = PPI_READ | ((length & 0x0f00) >> 8);
+	FC8050_PPI_REG = length & 0xff;
+
+	*data = FC8050_PPI_REG;
+	
+	return BBM_OK;
+}
+
+int fc8050_ppi_wordread(HANDLE hDevice, u16 addr, u16 *data)
+{
+	u16 length = 2;
+	u8 command = PPI_AINC | PPI_READ | PPI_BMODE;
+
+	if(BBM_SCI_DATA <= addr && BBM_SCI_SYNCRX >= addr)
+		command = PPI_READ | PPI_WMODE;
+	
+	FC8050_PPI_REG = addr & 0xff;
+	FC8050_PPI_REG = (addr & 0xff00) >> 8;
+	FC8050_PPI_REG = command | ((length & 0x0f00) >> 8);
+	FC8050_PPI_REG = length & 0xff;
+
+	*data = FC8050_PPI_REG;
+	*data |= FC8050_PPI_REG << 8;
+
+	return BBM_OK;
+}
+
+int fc8050_ppi_longread(HANDLE hDevice, u16 addr, u32 *data)
+{
+	u16 length = 4;
+	FC8050_PPI_REG = addr & 0xff;
+	FC8050_PPI_REG = (addr & 0xff00) >> 8;
+	FC8050_PPI_REG = PPI_AINC | PPI_READ | ((length & 0x0f00) >> 8);
+	FC8050_PPI_REG = length & 0xff;
+
+	*data = FC8050_PPI_REG;
+	*data |= FC8050_PPI_REG << 8;
+	*data |= FC8050_PPI_REG << 16;
+	*data |= FC8050_PPI_REG << 24;
+
+	return BBM_OK;
+}
+
+int fc8050_ppi_bulkread(HANDLE hDevice, u16 addr, u8 *data, u16 length)
+{
+	int i;
+
+	FC8050_PPI_REG = addr & 0xff;
+	FC8050_PPI_REG = (addr & 0xff00) >> 8;
+	FC8050_PPI_REG = PPI_AINC | PPI_READ | ((length & 0x0f00) >> 8);
+	FC8050_PPI_REG = length & 0xff;
+
+	for(i=0; i<length; i++) {
+		data[i] = FC8050_PPI_REG;
+	}
+
+	return BBM_OK;
+}
+
+int fc8050_ppi_bytewrite(HANDLE hDevice, u16 addr, u8 data)
+{
+	u16 length = 1;
+	FC8050_PPI_REG = addr & 0xff;
+	FC8050_PPI_REG = (addr & 0xff00) >> 8;
+	FC8050_PPI_REG = PPI_WRITE | ((length & 0x0f00) >> 8);
+	FC8050_PPI_REG = length & 0xff;
+
+	FC8050_PPI_REG = data;
+	
+	return BBM_OK;
+}
+
+int fc8050_ppi_wordwrite(HANDLE hDevice, u16 addr, u16 data)
+{
+	u16 length = 2;
+	u8 command = PPI_AINC | PPI_WRITE | PPI_BMODE;
+
+	if(BBM_SCI_DATA <= addr && BBM_SCI_SYNCRX >= addr)
+		command = PPI_WRITE | PPI_WMODE;
+
+	FC8050_PPI_REG = addr & 0xff;
+	FC8050_PPI_REG = (addr & 0xff00) >> 8;
+	FC8050_PPI_REG = command | ((length & 0x0f00) >> 8);
+	FC8050_PPI_REG = length & 0xff;
+
+	FC8050_PPI_REG = data & 0xff;
+	FC8050_PPI_REG = (data & 0xff00) >> 8;
+	
+	return BBM_OK;
+}
+
+int fc8050_ppi_longwrite(HANDLE hDevice, u16 addr, u32 data)
+{
+	u16 length = 4;
+	FC8050_PPI_REG = addr & 0xff;
+	FC8050_PPI_REG = (addr & 0xff00) >> 8;
+	FC8050_PPI_REG = PPI_AINC | PPI_WRITE | ((length & 0x0f00) >> 8);
+	FC8050_PPI_REG = length & 0xff;
+
+	FC8050_PPI_REG = data &  0x000000ff;
+	FC8050_PPI_REG = (data & 0x0000ff00) >> 8;
+	FC8050_PPI_REG = (data & 0x00ff0000) >> 16;
+	FC8050_PPI_REG = (data & 0xff000000) >> 24;
+	
+	return BBM_OK;
+}
+
+int fc8050_ppi_bulkwrite(HANDLE hDevice, u16 addr, u8* data, u16 length)
+{
+	int i;
+
+	FC8050_PPI_REG = addr & 0xff;
+	FC8050_PPI_REG = (addr & 0xff00) >> 8;
+	FC8050_PPI_REG = PPI_AINC | PPI_WRITE | ((length & 0x0f00) >> 8);
+	FC8050_PPI_REG = length & 0xff;
+
+	for(i=0; i<length; i++) {
+		FC8050_PPI_REG = data[i];
+	}
+
+	return BBM_OK;
+}
+
+int fc8050_ppi_dataread(HANDLE hDevice, u16 addr, u8* data, u16 length)
+{
+	int i, j;
+	u16 x, y;
+
+	x = length / 4095;
+	y = length % 4095;
+
+	
+	for(i=0; i<x; i++) {
+		FC8050_PPI_REG = addr & 0xff;
+		FC8050_PPI_REG = (addr & 0xff00) >> 8;
+		FC8050_PPI_REG = PPI_READ | ((4095 & 0x0f00) >> 8);
+		FC8050_PPI_REG = 4095 & 0xff;
+
+		for(j=0; j<4095; j++) {
+			data[4095*i+j] = FC8050_PPI_REG;
+		}
+	}
+
+	if(y) {
+	FC8050_PPI_REG = addr & 0xff;
+	FC8050_PPI_REG = (addr & 0xff00) >> 8;
+		FC8050_PPI_REG = PPI_READ | ((y & 0x0f00) >> 8);
+		FC8050_PPI_REG = y & 0xff;
+
+		for(j=0; j<y; j++) {
+			data[4095*x+j] = FC8050_PPI_REG;
+		}
+	}
+	
+	return BBM_OK;
+}
+
+int fc8050_ppi_deinit(HANDLE hDevice)
+{
+	return BBM_OK;
+}
diff -urN caf/drivers/char/dmb_fci/fc8050_ppi.h for-diff/drivers/char/dmb_fci/fc8050_ppi.h
--- caf/drivers/char/dmb_fci/fc8050_ppi.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_ppi.h	2015-10-08 21:23:58.756842000 +0900
@@ -0,0 +1,37 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_ppi.c
+ 
+ Description : API of dmb baseband module
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/14 	jason		initial
+*******************************************************************************/
+
+#ifndef __FC8050_PPI_H__
+#define __FC8050_PPI_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern int fc8050_ppi_init(HANDLE hDevice, u16 param1, u16 param2);
+extern int fc8050_ppi_byteread(HANDLE hDevice, u16 addr, u8 *data);
+extern int fc8050_ppi_wordread(HANDLE hDevice, u16 addr, u16 *data);
+extern int fc8050_ppi_longread(HANDLE hDevice, u16 addr, u32 *data);
+extern int fc8050_ppi_bulkread(HANDLE hDevice, u16 addr, u8 *data, u16 length);
+extern int fc8050_ppi_bytewrite(HANDLE hDevice, u16 addr, u8 data);
+extern int fc8050_ppi_wordwrite(HANDLE hDevice, u16 addr, u16 data);
+extern int fc8050_ppi_longwrite(HANDLE hDevice, u16 addr, u32 data);
+extern int fc8050_ppi_bulkwrite(HANDLE hDevice, u16 addr, u8* data, u16 length);
+extern int fc8050_ppi_dataread(HANDLE hDevice, u16 addr, u8* data, u16 length);
+extern int fc8050_ppi_deinit(HANDLE hDevice);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // __FC8050_PPI_H__
+
diff -urN caf/drivers/char/dmb_fci/fc8050_regs.h for-diff/drivers/char/dmb_fci/fc8050_regs.h
--- caf/drivers/char/dmb_fci/fc8050_regs.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_regs.h	2015-10-08 21:23:58.832842000 +0900
@@ -0,0 +1,373 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_regs.h
+ 
+ Description : baseband header file
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/14 	jason		initial
+*******************************************************************************/
+
+#ifndef __FC8050_REGS_H__
+#define __FC8050_REGS_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+	// X-TAL Frequency Configuration
+//#define FC8050_FREQ_XTAL  16384
+#define FC8050_FREQ_XTAL    19200 // 19.2MHz
+//#define FC8050_FREQ_XTAL  24576	//24.576MHz
+//#define FC8050_FREQ_XTAL  27000
+//#define FC8050_FREQ_XTAL  38400
+
+	// INTERRUPT SOURCE
+#define BBM_MF_INT				0x0001
+#define BBM_WAGC_INT				0x0002
+#define BBM_RECFG_INT				0x0004
+#define BBM_TII_INT 				0x0008
+#define BBM_SYNC_INT				0x0010
+#define BBM_I2C_INT 				0x0020
+#define	BBM_SCI_INT                 0x0040
+
+	// Host Access Common Register
+#define BBM_COMMAND_REG				0x0000
+#define BBM_ADDRESS_REG				0x0001
+#define BBM_DATA_REG				0x0002
+	
+	// COMMON	
+#define BBM_COM_AP2APB_LT           0x0000
+#define BBM_COM_RESET				0x0001
+#define BBM_COM_INT_STATUS			0x0002
+#define BBM_COM_INT_ENABLE          0x0003
+#define BBM_COM_STATUS_ENABLE       0x0006
+#define BBM_COM_FIC_DATA			0x0007
+#define BBM_COM_CH0_DATA			0x0008
+#define BBM_COM_CH1_DATA			0x0009
+#define BBM_COM_CH2_DATA			0x000a
+#define BBM_COM_CH3_DATA			0x000b
+#define BBM_COM_CH4_DATA			0x000c
+#define BBM_COM_CH5_DATA			0x000d
+#define BBM_COM_CH6_DATA			0x000e
+#define BBM_COM_CH7_DATA			0x000f
+	
+	//	QDD
+#define BBM_QDD_SYNC_RST_EN			0x0010
+#define BBM_QDD_CHIP_IDL			0x0012
+#define BBM_QDD_CHIP_IDH			0x0013
+#define BBM_QDD_COMMAN				0x0014
+#define BBM_QDD_TUN_COMMA			0x0015
+#define BBM_QDD_TRAGET_RMS			0x0016
+#define BBM_QDD_TUN_GAIN			0x0017
+#define BBM_QDD_TUN_GAIN_LOC			0x0018
+#define BBM_QDD_QLEVEL				0x0019
+#define BBM_QDD_GAIN_MIN			0x001a
+#define BBM_QDD_GAIN_MAX			0x001b
+#define BBM_QDD_AGC_GAIN			0x001c
+#define BBM_QDD_IF_RMS				0x001d
+#define BBM_QDD_AGC_CTRL			0x001e
+#define BBM_QDD_AGC_PERIOD			0x001f
+#define BBM_QDD_AGC_STEP			0x0020
+#define BBM_QDD_DC_CTRL 			0x0021
+#define BBM_QDD_I_COMP				0x0022
+#define BBM_QDD_Q_COMP				0x0023
+#define BBM_QDD_I_DC				0x0024
+#define BBM_QDD_Q_DC				0x0025
+#define BBM_QDD_PWM_VALL			0x0026
+#define BBM_QDD_PWM_VALH			0x0027
+#define BBM_QDD_PWM_CTRL			0x0028
+#define BBM_QDD_UPDN_PERIOD			0x0029
+#define BBM_QDD_M_FREQ_OFFSET       0x002a
+#define BBM_QDD_COEF_BANK_SEL       0x0030
+#define BBM_QDD_COEF                0x0031
+#define BBM_QDD_AGC530_EN           0x0032
+#define BBM_QDD_BLOCK_AVG_SIZE      0x0033
+#define BBM_QDD_BLOCK_AVG_SIZE_LOCK 0x0034
+#define BBM_QDD_GAIN_UPDATE_SPEED   0x0035
+#define BBM_QDD_REF_AMPL            0x0036
+#define BBM_QDD_BW_CTRL_LOCK        0x0037
+#define BBM_QDD_GAIN_CONSTANT       0x0038
+#define BBM_QDD_GAIN_CONSTANT_LOCK  0x0039
+#define BBM_QDD_BLOCK_AVG           0x003a
+#define BBM_QDD_DET_CNT_BOUND       0x003c
+#define BBM_QDD_AGC_LOCK            0x003e
+#define BBM_QDD_UPDOWN_CLK_PERIOD   0x003f
+	
+	// SYNC
+#define BBM_SYNC_WIN_SIZE			0x0050
+#define BBM_SYNC_FRSYNC_PERIOD			0x0052
+#define BBM_SYNC_NF_ON				0x0053
+#define BBM_SYNC_RMS_CLIP			0x0054
+#define BBM_SYNC_GSG_CF 			0x0056
+#define BBM_SYNC_MIN_CF 			0x0057
+#define BBM_SYNC_GCMD_CF			0x0058
+#define BBM_SYNC_FTERR_THRESH			0x005A
+#define BBM_SYNC_MA_GAIN			0x005B
+#define BBM_SYNC_FTSYNC_CTRL			0x005C
+#define BBM_SYNC_LPF_POWER			0x005e
+#define BBM_SYNC_HPF_POWER			0x005f
+#define BBM_SYNC_MODE				0x0060
+#define BBM_SYNC_FFT_SHIFT			0x0061
+#define BBM_SYNC_FF_ERROR			0x0062
+#define BBM_SYNC_CIR_THRESH 			0x0064
+#define BBM_SYNC_FF_AVG_LEN 			0x0065
+#define BBM_SYNC_D4GIBSHIFT 			0x0066
+#define BBM_SYNC_CF_CBW 			0x0067
+#define BBM_SYNC_CF_ERROR			0x0068
+#define BBM_SYNC_CFOFFSET_RNGP			0x006a
+#define BBM_SYNC_CFOFFSET_RNGM			0x006b
+#define BBM_SYNC_CFOFFSET_TGT			0x006c
+#define BBM_SYNC_FIC_CNTRL			0x006d
+#define BBM_SYNC_DET_CNTRL			0x0070
+#define BBM_SYNC_DET_ACC_PERIOD			0x0071
+#define BBM_SYNC_DET_MAX_THRL			0x0072
+#define BBM_SYNC_DET_MAX_THRH			0x0073
+#define BBM_SYNC_DET_MAX_MAGL			0x0074
+#define BBM_SYNC_DET_MAX_MAGH			0x0075
+#define BBM_SYNC_DET_MEAN_MAGL			0x0076
+#define BBM_SYNC_DET_MEAN_MAGH			0x0077
+#define BBM_SYNC_DET_STATUS			0x0078
+#define BBM_SYNC_DET_DONECNT			0x0079
+#define BBM_SYNC_DET_OKCNT			0x007A
+#define BBM_SYNC_DET_MODE_ENABLE		0x007B
+
+#define BBM_SYNC_NSBLK				0x0090
+#define BBM_SYNC_FTOFFSET			0x0092
+#define BBM_SYNC_FT_RANGE			0x0094
+#define BBM_SYNC_CNTRL				0x0096
+#define BBM_SYNC_STATUS 			0x0098
+#define BBM_SYNC_AMD_RANGE			0x009a
+#define BBM_SYNC_ERR_THRESH 			0x009e
+#define BBM_SYNC_LOOP				0x009f
+#define BBM_SYNC_WINDOW 			0x00a0
+#define BBM_SYNC_NONZERO			0x00a1
+#define BBM_SYNC_LOOP_OUT			0x00a2
+#define BBM_SYNC_TUNER				0x00a4
+#define BBM_SYNC_TII_CTRL			0x00a5
+#define BBM_SYNC_MIN_THRESH 			0x00a6
+#define BBM_SYNC_MAINID1			0x00a7
+#define BBM_SYNC_SUBID1 			0x00a8
+#define BBM_SYNC_MAINID2			0x00a9
+#define BBM_SYNC_SUBID2 			0x00aa
+#define BBM_SYNC_ID1_POWER			0x00ab
+#define BBM_SYNC_ID2_POWER			0x00ac
+#define BBM_SYNC_TII_THRESH 			0x00ad
+#define BBM_SYNC_MODE_TARGET			0x00ae
+#define BBM_SYNC_SYNC_TEST_SEL			0x00af
+	
+	// AGC	
+#define BBM_AGC_REFGAIN 			0x0110
+#define BBM_AGC_PERIOD				0x0111
+#define BBM_AGC_GAIN_EXP			0x0113
+#define BBM_AGC_GAIN_FRP			0x0114
+#define BBM_AGC_RMS 				0x0116
+#define BBM_AGC_MTH 				0x0117
+#define BBM_AGC_Q_LEVEL 			0x0118
+#define BBM_AGC_UPDATE_VAL			0x0119
+#define BBM_AGC_FIXED_ON			0x011b
+#define BBM_AGC_EXP_FIXED			0x011c
+#define BBM_AGC_FR_FIXED			0x011d
+#define BBM_AGC_CTRL				0x011f
+	
+	// FFT	
+#define BBM_FFT_SCALEV_FFT			0x0120
+#define BBM_FFT_SCALEV_IFFT 			0x0122
+#define BBM_FFT_ADC_CONTROL			0x0128
+#define BBM_FFT_MODEM_STSL			0x0129
+#define BBM_FFT_MODEM_STSH			0x012A
+#define BBM_FFT_PAD_DRIVING_SEL			0x012B
+
+	//TII
+#define BBM_TII_IF_EN				0x0130
+#define BBM_TII_DATA				0x0131
+#define BBM_TII_DATA_LEN			0x0132
+	
+	// DIDP 
+#define BBM_DIDP_CH_EN				0x0150
+#define BBM_DIDP_MODE				0x0151
+#define BBM_DIDP_CH0_SUBCH			0x0152
+#define BBM_DIDP_CH1_SUBCH			0x0153
+#define BBM_DIDP_CH2_SUBCH			0x0154
+#define BBM_DIDP_CH3_SUBCH			0x0155
+#define BBM_DIDP_CH4_SUBCH			0x0156
+#define BBM_DIDP_CH5_SUBCH			0x0157
+#define BBM_DIDP_CH6_SUBCH			0x0158
+#define BBM_DIDP_CH7_SUBCH			0x0159
+#define BBM_DIDP_POWER_OPT0 			0x015a
+#define BBM_DIDP_ADD_N_SHIFT0			0x015b
+#define BBM_DIDP_POWER_OPT1 			0x015c
+#define BBM_DIDP_ADD_N_SHIFT1			0x015d
+#define BBM_DIDP_POWER_OPT2 			0x015e
+#define BBM_DIDP_ADD_N_SHIFT2			0x015f
+	
+	// VT	
+#define BBM_VT_BER_PERIOD			0x0210
+#define BBM_VT_ERROR_SUM			0x0214
+#define BBM_VT_RT_BER_PERIOD			0x0218
+#define BBM_VT_RT_ERROR_SUM 			0x021c
+#define BBM_VT_CONTROL				0x0220
+	
+	//FIC	
+#define BBM_FIC_CRC_CONTROL 			0x0222
+#define BBM_FIC_ERR_SUM 			0x0223
+	
+	// CDI	
+#define BBM_CDI0_SUBCH_EN			0x0224
+#define BBM_CDI1_SUBCH_EN			0x0225
+#define BBM_CDI0_COUNT				0x0226
+#define BBM_CDI1_COUNT				0x0227
+#define BBM_CDI0_ERROR				0x0228
+#define BBM_CDI1_ERROR				0x0229
+#define BBM_CDI_SYNC_PATTERN			0x022a
+#define BBM_CDI_CONTROL 			0x022b
+	
+	// RS	
+#define BBM_RS_BER_PERIOD			0x022c
+#define BBM_RS_FAIL_COUNT			0x022e
+#define BBM_RS_ERR_SUM				0x0230
+#define BBM_RS_RT_BER_PER			0x0234
+#define BBM_RS_RT_FAIL_CNT			0x0236
+#define BBM_RS_RT_ERR_SUM			0x0238
+#define BBM_RS_CONTROL				0x023e
+	
+	// BUF	
+#define BBM_BUF_STATUS				0x0250
+#define BBM_BUF_OVERRUN 			0x0252
+#define BBM_BUF_ENABLE				0x0254
+#define BBM_BUF_INT 				0x0256
+#define BBM_BUF_STS_CTRL			0x0258
+#define BBM_BUF_STS_CLK_DIV 			0x0259
+#define BBM_BUF_STS_CHID			0x025a
+#define BBM_BUF_CLOCK_EN			0x025b
+#define BBM_BUF_MISC_CTRL                       0x025c
+#define BBM_BUF_TEST_MODE			0x025d
+#define BBM_BUF_TEST_SIGNAL 			0x025e
+#define BBM_BUF_CH0_SUBCH			0x0260
+#define BBM_BUF_CH1_SUBCH			0x0261
+#define BBM_BUF_CH2_SUBCH			0x0262
+#define BBM_BUF_CH3_SUBCH			0x0263
+#define BBM_BUF_CH4_SUBCH			0x0264
+#define BBM_BUF_CH5_SUBCH			0x0265
+#define BBM_BUF_CH6_SUBCH			0x0266
+#define BBM_BUF_CH7_SUBCH			0x0267
+#define BBM_BUF_CH0_START			0x0268
+#define BBM_BUF_CH1_START			0x026a
+#define BBM_BUF_CH2_START			0x026c
+#define BBM_BUF_CH3_START			0x026e
+#define BBM_BUF_CH4_START			0x0270
+#define BBM_BUF_CH5_START			0x0272
+#define BBM_BUF_CH6_START			0x0274
+#define BBM_BUF_CH7_START			0x0276
+#define BBM_BUF_FIC_START			0x0278
+#define BBM_BUF_CH0_END 			0x0290
+#define BBM_BUF_CH1_END 			0x0292
+#define BBM_BUF_CH2_END 			0x0294
+#define BBM_BUF_CH3_END 			0x0296
+#define BBM_BUF_CH4_END 			0x0298
+#define BBM_BUF_CH5_END 			0x029a
+#define BBM_BUF_CH6_END 			0x029c
+#define BBM_BUF_CH7_END 			0x029e
+#define BBM_BUF_FIC_END 			0x02a0
+#define BBM_BUF_CH0_THR 			0x02a2
+#define BBM_BUF_CH1_THR 			0x02a4
+#define BBM_BUF_CH2_THR 			0x02a6
+#define BBM_BUF_CH3_THR 			0x02a8
+#define BBM_BUF_CH4_THR 			0x02aa
+#define BBM_BUF_CH5_THR 			0x02ac
+#define BBM_BUF_CH6_THR 			0x02ae
+#define BBM_BUF_CH7_THR 			0x02b0
+#define BBM_BUF_FIC_THR 			0x02b2 
+
+	// I2C
+#define BBM_I2C_PR				0x0310
+#define BBM_I2C_CTR 				0x0312
+#define BBM_I2C_RXR 				0x0313
+#define BBM_I2C_SR				0x0314
+#define BBM_I2C_TXR 				0x0315
+#define BBM_I2C_CR				0x0316
+	
+#define BBM_TS_PAUSE				0x0378
+#define BBM_TS_SELECT				0x037A
+
+	// SCI (PL131)
+#define	BBM_SCI_DATA				0x0390		// 0x000  SCIDATA       ,SCI Data register
+#define	BBM_SCI_CR0					0x0392		// 0x004  SCICR0        ,SCI Control register 0
+#define	BBM_SCI_CR1					0x0394		// 0x008  SCICR1        ,SCI Control register 1
+#define	BBM_SCI_CR2					0x0396		// 0x00C  SCICR2        ,SCI Control register 2
+#define	BBM_SCI_CLKICC				0x0398		// 0x010  SCICLKICC     ,SCI Smart card clock frequency
+#define	BBM_SCI_VALUE				0x039a		// 0x014  SCIVALUE      ,SCI Baud cycles time register
+#define	BBM_SCI_BAUD				0x039c		// 0x018  SCIBAUD       ,SCI Baud rate clock time 
+#define	BBM_SCI_TIDE				0x039e		// 0x01C  SCITIDE       ,SCI Tx and Rx Tide mark 
+#define	BBM_SCI_DMACR				0x03a0		// 0x020  SCIDMACR      ,SCI Direct Memory Access control register
+#define	BBM_SCI_STABLE				0x03a2		// 0x024  SCISTABLE     ,SCI Debounce time register 
+#define	BBM_SCI_ATIME				0x03a4		// 0x028  SCIATIME      ,SCI card activation event time register
+#define	BBM_SCI_DTIME				0x03a6		// 0x02C  SCIDTIME      ,SCI card deactivation event time register
+#define	BBM_SCI_ATRSTIME			0x03a8		// 0x030  SCIATRSTIME   ,SCI ATR start time register
+#define	BBM_SCI_ATRDTIME			0x03aa		// 0x034  SCIATRDTIME   ,SCI ATR duration time register
+#define	BBM_SCI_STOPTIME			0x03ac		// 0x038  SCISTOPTIME   ,SCI Duration before Card Clk can be stopped
+#define	BBM_SCI_STARTTIME			0x03ae		// 0x03C  SCISTARTTIME  ,SCI Duration before Card Clk can be re-started
+#define	BBM_SCI_RETRY				0x03b0		// 0x040  SCIRETRY      ,SCI Tx and Rx Retry register
+#define	BBM_SCI_CHTIMELS			0x03b2		// 0x044  SCICHTIMELS   ,SCI Char to char timeout timeout least sig.
+#define	BBM_SCI_CHTIMEMS			0x03b4		// 0x048  SCICHTIMEMS   ,SCI Char to char timeout timeout most  sig.
+#define	BBM_SCI_BLKTIMELS			0x03b6		// 0x04C  SCIBLKTIMELS  ,SCI Receive timeout between blocks least sig.
+#define	BBM_SCI_BLKTIMEMS			0x03b8		// 0x050  SCIBLKTIMEMS  ,SCI Receive timeout between blocks most  sig.
+#define	BBM_SCI_CHGUARD				0x03ba		// 0x054  SCICHGUARD    ,SCI Character guard time register
+#define	BBM_SCI_BLKGUARD			0x03bc		// 0x058  SCIBLKGUARD   ,SCI Block guard time register
+#define	BBM_SCI_RXTIME				0x03be		// 0x05C  SCIRXTIME     ,SCI RX read timeout register 
+#define	BBM_SCI_FIFOSTATUS			0x03d0		// 0x060  SCIFIFOSTATUS ,SCI TX and RX FIFO Status
+#define	BBM_SCI_TXCOUNT				0x03d2		// 0X064  SCITXCOUNT    ,SCI TX FIFO fill level 
+#define	BBM_SCI_RXCOUNT				0x03d4		// 0x068  SCIRXCOUNT    ,SCI RX FIFO fill level
+#define	BBM_SCI_IMSC				0x03d6		// 0x06C  SCIIMSC       ,SCI Interrupt mask set or clear register        
+#define	BBM_SCI_RIS					0x03d8		// 0x070  SCIRIS        ,SCI Raw interrupt status register
+#define	BBM_SCI_MIS					0x03da		// 0x074  SCIMIS        ,SCI Masked interrupt status register
+#define	BBM_SCI_ICR					0x03dc		// 0x078  SCIICR        ,SCI Interrupt clear register
+#define	BBM_SCI_SYNCACT				0x03de		// 0x07C  SCISYNCACT    ,SCI Synchronous mode Activation register
+#define	BBM_SCI_SYNCTX				0x03e0		// 0x080  SCISYNCTX     ,SCI Synchronous mode transmit register
+#define	BBM_SCI_SYNCRX				0x03e2		// 0x084  SCISYNCRX     ,SCI Synchronous mode receive register
+
+//----------------------------------------------------
+//	BUFFER MANAGEMENT
+//----------------------------------------------------
+#define FIC_BUF_START				0x0000
+#define FIC_BUF_LENGTH				(32*24)
+#define FIC_BUF_END 				(FIC_BUF_START + FIC_BUF_LENGTH -1)
+#define FIC_BUF_THR 				(FIC_BUF_LENGTH/2-1)
+
+#define CH0_BUF_START	            (FIC_BUF_START + FIC_BUF_LENGTH)
+#define CH0_BUF_LENGTH				(188*16*2) //FCI - 2011.10.26
+//#define CH0_BUF_LENGTH				(188*24*2)
+#define CH0_BUF_END 				(CH0_BUF_START + CH0_BUF_LENGTH -1)
+#define CH0_BUF_THR 				(CH0_BUF_LENGTH/2-1)
+
+#define CH1_BUF_START				(CH0_BUF_START + CH0_BUF_LENGTH)
+#define CH1_BUF_LENGTH				(0)
+#define CH1_BUF_END 				(CH1_BUF_START + CH1_BUF_LENGTH -1)
+#define CH1_BUF_THR 				(CH1_BUF_LENGTH/2-1)
+
+#define CH2_BUF_START				(CH1_BUF_START + CH1_BUF_LENGTH)
+#define CH2_BUF_LENGTH				(128*6)  //FCI - 2011.10.26
+//#define CH2_BUF_LENGTH				(0) //(128*6)
+#define CH2_BUF_END 				(CH2_BUF_START + CH2_BUF_LENGTH -1)
+#define CH2_BUF_THR 				(CH2_BUF_LENGTH/2-1)
+
+#define CH3_BUF_START				(CH2_BUF_START + CH2_BUF_LENGTH)
+//#define CH3_BUF_LENGTH				(128*12)  // orig
+//#define CH3_BUF_LENGTH				(160*6) // 160 bps ok
+#define CH3_BUF_LENGTH				(188*16)
+//#define CH3_BUF_LENGTH				(188*0)
+#define CH3_BUF_END 				(CH3_BUF_START + CH3_BUF_LENGTH -1)
+#define CH3_BUF_THR 				(CH3_BUF_LENGTH/2-1)
+
+//* check *//
+//#if (CH3_BUF_END >= 15kbyte)
+//internal buffer is 15K, your setting value is big !!!!!!!!!!!!!!!
+//#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif 		// __FC8050_REGS_H__
diff -urN caf/drivers/char/dmb_fci/fc8050_spi.c for-diff/drivers/char/dmb_fci/fc8050_spi.c
--- caf/drivers/char/dmb_fci/fc8050_spi.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_spi.c	2015-10-08 21:23:38.404842000 +0900
@@ -0,0 +1,390 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_spi.c
+ 
+ Description : fc8050 host interface
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/08/29 	jason		initial
+*******************************************************************************/
+#include <linux/input.h>
+#include <linux/spi/spi.h>
+
+#include "fci_types.h"
+#include "fc8050_regs.h"
+#include "fci_oal.h"
+
+#define DRIVER_NAME "fc8050_spi"
+
+#define HPIC_READ			0x01	// read command
+#define HPIC_WRITE			0x02	// write command
+#define HPIC_AINC			0x04	// address increment
+#define HPIC_BMODE			0x00	// byte mode
+#define HPIC_WMODE          0x10	// word mode
+#define HPIC_LMODE          0x20	// long mode
+#define HPIC_ENDIAN			0x00	// little endian
+#define HPIC_CLEAR			0x80	// currently not used
+
+#define CHIPID 0
+#if (CHIPID == 0)
+#define SPI_CMD_WRITE                           0x0
+#define SPI_CMD_READ                            0x1
+#define SPI_CMD_BURST_WRITE                     0x2
+#define SPI_CMD_BURST_READ                      0x3
+#else
+#define SPI_CMD_WRITE                           0x4
+#define SPI_CMD_READ                            0x5
+#define SPI_CMD_BURST_WRITE                     0x6
+#define SPI_CMD_BURST_READ                      0x7
+#endif 
+
+struct spi_device *fc8050_spi = NULL;
+
+// 2011.11.28 vincent
+static u8 tx_data[10] ____cacheline_aligned;// org 8
+static u8 data_buf[8192+4] ____cacheline_aligned;//org 8192
+static u8 rdata_buf[8192+4] ____cacheline_aligned;//org 8192
+
+static DEFINE_MUTEX(lock);
+
+// kuzuri 2011.12.02 - bulk write need not rx...
+int fc8050_spi_write_by_bulk(struct spi_device *spi, u8 *txbuf, u16 tx_length)
+{
+	s32 res;
+	
+	struct spi_message	message;
+	struct spi_transfer	x;
+
+	spi_setup(spi);
+
+	spi_message_init(&message);
+	memset(&x, 0, sizeof x);
+
+	spi_message_add_tail(&x, &message);
+	
+	//memcpy(data_buf, txbuf, tx_length);
+	
+	x.tx_buf = txbuf;
+	x.rx_buf = rdata_buf;
+	x.len = tx_length;
+	
+	res = spi_sync(spi, &message);
+
+	return res;
+}
+
+int fc8050_spi_write_then_read(struct spi_device *spi, u8 *txbuf, u16 tx_length, u8 *rxbuf, u16 rx_length)
+{
+	s32 res;
+	
+	struct spi_message	message;
+	struct spi_transfer	x;
+
+  if ( rxbuf==NULL )
+    PRINTF(0,"fc8050_spi_write_then_read():: rxbuf addr is NULL... rx length= %d\n", rx_length);
+
+  //printk("FC8050_spi_write_then_read():: spi.max_speed = %d\n", spi->max_speed_hz );
+
+	spi_setup(spi);
+
+	spi_message_init(&message);
+	memset(&x, 0, sizeof x);
+
+	spi_message_add_tail(&x, &message);
+	
+	memcpy(data_buf, txbuf, tx_length);
+	
+	x.tx_buf = data_buf;
+	x.rx_buf = rdata_buf;
+	x.len = tx_length + rx_length;
+	
+	res = spi_sync(spi, &message);
+
+  if ( rxbuf!=NULL )
+	memcpy(rxbuf, x.rx_buf + tx_length, rx_length);
+
+	return res;
+}
+
+int fc8050_spi_write_then_read_burst(struct spi_device *spi, u8 *txbuf, u16 tx_length, u8 *rxbuf, u16 rx_length)
+{
+  int res;
+
+  struct spi_message	message;
+  struct spi_transfer	x;
+
+  //TDMB_MSG_FCI_BB("[%s]spi=%x\n", __func__, (unsigned int)spi);
+
+  spi_message_init(&message);
+  memset(&x, 0, sizeof x);
+
+  spi_message_add_tail(&x, &message);
+
+  x.tx_buf = txbuf;
+  x.rx_buf = rxbuf;
+  x.len = tx_length + rx_length;
+
+  res = spi_sync(spi, &message);
+
+  return res;
+}
+
+static int spi_bulkread(HANDLE hDevice, u8 addr, u8 *data, u16 length)
+{
+	s32 ret;
+
+	tx_data[0] = SPI_CMD_BURST_READ;
+	tx_data[1] = addr;
+
+	ret = fc8050_spi_write_then_read(fc8050_spi, &tx_data[0], 2, &data[0], length);
+
+	if(ret)
+	{
+		PRINTF(0, "fc8050_spi_bulkread fail : %d\n", ret);
+		return BBM_NOK;
+	}
+
+	return BBM_OK;
+}
+
+static int spi_bulkwrite(HANDLE hDevice, u8 addr, u8* data, u16 length)
+{
+	s32 ret;
+	s32 i;
+	
+	tx_data[0] = SPI_CMD_BURST_WRITE;
+	tx_data[1] = addr;
+
+	for(i=0;i<length;i++)
+	{
+		tx_data[2+i] = data[i];
+	}
+
+	//PRINTF(0, "fc8050_spi_builkwrite():: addr= %X , data[0]= %X , length= %d\n", addr, data[0], length);
+
+	//ret =fc8050_spi_write_then_read(fc8050_spi, &tx_data[0], length+2, 0, 0);
+	ret = fc8050_spi_write_by_bulk(fc8050_spi, &tx_data[0], length+2);
+
+	if(ret)
+	{
+		PRINTF(0, "fc8050_spi_bulkwrite fail : %d\n", ret);
+		return BBM_NOK;
+	}
+	
+	return BBM_OK;
+}
+
+static int spi_dataread(HANDLE hDevice, u8 addr, u8* data, u16 length)
+{
+	s32 ret=0;
+
+	tx_data[0] = SPI_CMD_BURST_READ;
+	tx_data[1] = addr;
+
+	//ret = fc8050_spi_write_then_read(fc8050_spi, &tx_data[0], 2, &data[0], length);
+	ret = fc8050_spi_write_then_read_burst(fc8050_spi, &tx_data[0], 2, &data[0], length);
+	if(ret)
+	{
+		PRINTF(0, "fc8050_spi_dataread fail : %d\n", ret);
+		return BBM_NOK;
+	}
+
+	return BBM_OK;
+}
+
+#if 0
+static int __devinit fc8050_spi_probe(struct spi_device *spi)
+{
+	s32 ret;
+	
+	PRINTF(0, "fc8050_spi_probe\n");
+
+	//spi->max_speed_hz =  4000000;
+	spi->max_speed_hz =  8000000;
+	//spi->max_speed_hz =  5400000; // kuzuri - not use this.  Real value is in DMBDRV_KTTECH.c
+	printk("FC8050_SPI_PROBE()>>>>>>> :: spi.max_speed= %d\n", spi->max_speed_hz);
+	
+	ret = spi_setup(spi);
+	if (ret < 0)
+		return ret;
+
+	fc8050_spi = spi;
+
+	return ret;
+}
+
+static int fc8050_spi_remove(struct spi_device *spi)
+{
+
+	return 0;
+}
+#endif
+
+/*
+static struct spi_driver fc8050_spi_driver = {
+	.driver = {
+		.name		= DRIVER_NAME,
+		.owner		= THIS_MODULE,
+	},
+	.probe		= fc8050_spi_probe,
+	.remove		= __devexit_p(fc8050_spi_remove),
+};
+*/
+
+int fc8050_spi_init(HANDLE hDevice, u16 param1, u16 param2)
+{
+//	int res;
+
+	printk("FC8050_SPI_INIT():::\n");
+#if 0
+	res = spi_register_driver(&fc8050_spi_driver);
+	
+	if(res)
+	{
+		PRINTF(0, "fc8050_spi register fail : %d\n", res);
+		return BBM_NOK;
+	}
+#endif
+	return BBM_OK;
+}
+
+int fc8050_spi_byteread(HANDLE hDevice, u16 addr, u8 *data)
+{
+	int res;
+	u8 command = HPIC_READ | HPIC_BMODE | HPIC_ENDIAN;
+
+	mutex_lock(&lock);
+	res  = spi_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= spi_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= spi_bulkread(hDevice, BBM_DATA_REG, data, 1);
+	mutex_unlock(&lock);
+
+	return res;
+}
+
+int fc8050_spi_wordread(HANDLE hDevice, u16 addr, u16 *data)
+{
+	int res;
+	u8 command = HPIC_READ | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+
+	if(BBM_SCI_DATA <= addr && BBM_SCI_SYNCRX >= addr)
+		command = HPIC_READ | HPIC_WMODE | HPIC_ENDIAN;
+
+	mutex_lock(&lock);
+	res  = spi_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= spi_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= spi_bulkread(hDevice, BBM_DATA_REG, (u8*)data, 2);
+	mutex_unlock(&lock);
+	
+	return res;
+}
+
+int fc8050_spi_longread(HANDLE hDevice, u16 addr, u32 *data)
+{
+	int res;
+	u8 command = HPIC_READ | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+
+	mutex_lock(&lock);
+	res  = spi_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= spi_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= spi_bulkread(hDevice, BBM_DATA_REG, (u8*)data, 4);
+	mutex_unlock(&lock);
+
+	return res;
+}
+
+int fc8050_spi_bulkread(HANDLE hDevice, u16 addr, u8 *data, u16 length)
+{
+	int res;
+	u8 command = HPIC_READ | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+
+	mutex_lock(&lock);
+	res  = spi_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= spi_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= spi_bulkread(hDevice, BBM_DATA_REG, data, length);
+	mutex_unlock(&lock);
+	
+	return res;
+}
+
+int fc8050_spi_bytewrite(HANDLE hDevice, u16 addr, u8 data)
+{
+	int res;
+	u8 command = HPIC_WRITE | HPIC_BMODE | HPIC_ENDIAN;
+
+	mutex_lock(&lock);
+	res  = spi_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= spi_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= spi_bulkwrite(hDevice, BBM_DATA_REG, (u8*)&data, 1);
+	mutex_unlock(&lock);
+	
+	return res;
+}
+
+int fc8050_spi_wordwrite(HANDLE hDevice, u16 addr, u16 data)
+{
+	int res;
+	u8 command = HPIC_WRITE | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+
+	if(BBM_SCI_DATA <= addr && BBM_SCI_SYNCRX >= addr)
+		command = HPIC_WRITE | HPIC_WMODE | HPIC_ENDIAN;
+
+	mutex_lock(&lock);
+	res  = spi_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= spi_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= spi_bulkwrite(hDevice, BBM_DATA_REG, (u8*)&data, 2);
+	mutex_unlock(&lock);
+	
+	return res;
+}
+
+int fc8050_spi_longwrite(HANDLE hDevice, u16 addr, u32 data)
+{
+	int res;
+	u8 command = HPIC_WRITE | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+
+	mutex_lock(&lock);
+	res  = spi_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= spi_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= spi_bulkwrite(hDevice, BBM_DATA_REG, (u8*)&data, 4);
+	mutex_unlock(&lock);
+	
+	return res;
+}
+
+int fc8050_spi_bulkwrite(HANDLE hDevice, u16 addr, u8* data, u16 length)
+{
+	int res;
+	u8 command = HPIC_WRITE | HPIC_AINC | HPIC_BMODE | HPIC_ENDIAN;
+
+	mutex_lock(&lock);
+	res  = spi_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= spi_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= spi_bulkwrite(hDevice, BBM_DATA_REG, data, length);
+	mutex_unlock(&lock);
+	
+	return res;
+}
+
+int fc8050_spi_dataread(HANDLE hDevice, u16 addr, u8* data, u16 length)
+{
+	int res;
+	u8 command = HPIC_READ | HPIC_BMODE | HPIC_ENDIAN;
+
+    mutex_lock(&lock);
+	res  = spi_bulkwrite(hDevice, BBM_COMMAND_REG, &command, 1);
+	res |= spi_bulkwrite(hDevice, BBM_ADDRESS_REG, (u8*)&addr, 2);
+	res |= spi_dataread(hDevice, BBM_DATA_REG, data, length);
+	mutex_unlock(&lock);
+	
+	return res;
+}
+
+int fc8050_spi_deinit(HANDLE hDevice)
+{
+	PRINTF(NULL, "fc8050_spi_deinit\n");
+	//spi_unregister_driver(&fc8050_spi_driver);
+	return BBM_OK;
+}
diff -urN caf/drivers/char/dmb_fci/fc8050_spi.h for-diff/drivers/char/dmb_fci/fc8050_spi.h
--- caf/drivers/char/dmb_fci/fc8050_spi.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_spi.h	2015-10-08 21:23:58.940842000 +0900
@@ -0,0 +1,37 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_spi.c
+ 
+ Description : API of dmb baseband module
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/14 	jason		initial
+*******************************************************************************/
+
+#ifndef __FC8050_SPI__
+#define __FC8050_SPI__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern int fc8050_spi_init(HANDLE hDevice, u16 param1, u16 param2);
+extern int fc8050_spi_byteread(HANDLE hDevice, u16 addr, u8 *data);
+extern int fc8050_spi_wordread(HANDLE hDevice, u16 addr, u16 *data);
+extern int fc8050_spi_longread(HANDLE hDevice, u16 addr, u32 *data);
+extern int fc8050_spi_bulkread(HANDLE hDevice, u16 addr, u8 *data, u16 length);
+extern int fc8050_spi_bytewrite(HANDLE hDevice, u16 addr, u8 data);
+extern int fc8050_spi_wordwrite(HANDLE hDevice, u16 addr, u16 data);
+extern int fc8050_spi_longwrite(HANDLE hDevice, u16 addr, u32 data);
+extern int fc8050_spi_bulkwrite(HANDLE hDevice, u16 addr, u8* data, u16 length);
+extern int fc8050_spi_dataread(HANDLE hDevice, u16 addr, u8* data, u16 length);
+extern int fc8050_spi_deinit(HANDLE hDevice);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // __FC8050_SPI__
+
diff -urN caf/drivers/char/dmb_fci/fc8050_tun.c for-diff/drivers/char/dmb_fci/fc8050_tun.c
--- caf/drivers/char/dmb_fci/fc8050_tun.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_tun.c	2015-10-08 21:23:38.420842000 +0900
@@ -0,0 +1,241 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_tun.c
+ 
+ Description : fc8050 host interface
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/14 	jason		initial
+ 2009/11/26              MPW Config1p0
+ 2010/02/24              SLR Config1p0
+ 2010/05/04              SLR Config1p2
+*******************************************************************************/
+
+#include "fci_types.h"
+#include "fci_oal.h"
+#include "fci_tun.h"
+#include "fci_hal.h"
+#include "fc8050_regs.h"
+
+static int fc8050_write(HANDLE hDevice, u8 addr, u8 data)
+{
+	int res;
+	u8 tmp;
+
+	tmp = data;
+	res = tuner_i2c_write(hDevice, addr, 1,&tmp, 1);
+
+	return res;
+}
+
+static int fc8050_read(HANDLE hDevice, u8 addr, u8 *data)
+{
+	int res;
+
+	res = tuner_i2c_read(hDevice, addr, 1,data, 1);
+
+	return res;
+}
+
+static int fc8050_set_filter(HANDLE hDevice)
+{
+	int i;
+	u8 cal_mon = 0;
+
+#if (FC8050_FREQ_XTAL == 19200)
+	fc8050_write(hDevice, 0x02, 0x86);
+
+	fc8050_write(hDevice, 0x3B, 0x52);
+	fc8050_write(hDevice, 0x32, 0x09);
+#elif (FC8050_FREQ_XTAL == 16384)
+	fc8050_write(hDevice, 0x02, 0x86);
+
+	fc8050_write(hDevice, 0x3B, 0x45);
+	fc8050_write(hDevice, 0x32, 0x09);
+#elif (FC8050_FREQ_XTAL == 24576)
+	fc8050_write(hDevice, 0x02, 0x86);
+
+	fc8050_write(hDevice, 0x3B, 0x68);
+	fc8050_write(hDevice, 0x32, 0x09);
+#elif (FC8050_FREQ_XTAL == 27000)
+	fc8050_write(hDevice, 0x02, 0x86);
+
+	fc8050_write(hDevice, 0x3B, 0x71);
+	fc8050_write(hDevice, 0x32, 0x09);
+#elif (FC8050_FREQ_XTAL == 27120)
+	fc8050_write(hDevice, 0x02, 0x86);
+
+	fc8050_write(hDevice, 0x3B, 0x74);
+	fc8050_write(hDevice, 0x32, 0x09);
+#elif (FC8050_FREQ_XTAL == 38400)
+	fc8050_write(hDevice, 0x02, 0x86);
+
+	fc8050_write(hDevice, 0x3B, 0xA1);
+	fc8050_write(hDevice, 0x32, 0x09);
+#else
+	return BBM_NOK;
+#endif
+
+	for(i=0; i<10; i++) {
+		msWait(5);
+		fc8050_read(hDevice, 0x33, &cal_mon);
+		if( (cal_mon & 0xC0) == 0xC0) 
+			break;
+		fc8050_write(hDevice, 0x32, 0x01);
+		fc8050_write(hDevice, 0x32, 0x09);
+	}
+
+	fc8050_write(hDevice, 0x32, 0x01);
+
+	return BBM_OK;
+}
+
+static int fc8050_lband_init(HANDLE hDevice)
+{
+	PRINTF(hDevice, "fc8050_lband_init\n");
+	return BBM_NOK;
+}
+
+static int fc8050_band3_init(HANDLE hDevice)
+{
+	PRINTF(hDevice, "fc8050_band3_init\n");
+	
+	fc8050_write(hDevice, 0x00, 0x00);
+	
+
+	fc8050_write(hDevice, 0x00, 0x00);
+	fc8050_write(hDevice, 0x02, 0x86);
+
+	fc8050_write(hDevice, 0x05, 0xD8);
+	fc8050_write(hDevice, 0x0A, 0x83);
+	fc8050_write(hDevice, 0x16, 0x0d);
+	fc8050_write(hDevice, 0x13, 0x88);
+	fc8050_write(hDevice, 0x15, 0x00);
+	fc8050_write(hDevice, 0x21, 0x73);
+
+	fc8050_write(hDevice, 0x57, 0x40);
+	fc8050_write(hDevice, 0x69, 0x8C);
+	fc8050_write(hDevice, 0x51, 0x04);
+	fc8050_write(hDevice, 0x53, 0x00);
+	fc8050_write(hDevice, 0x54, 0x28);
+	fc8050_write(hDevice, 0x45, 0x40);
+	fc8050_write(hDevice, 0x46, 0x32);
+	fc8050_write(hDevice, 0x48, 0x40);
+	fc8050_write(hDevice, 0x49, 0x32);
+	fc8050_write(hDevice, 0x7A, 0x88);
+	fc8050_write(hDevice, 0x53, 0x01);
+	fc8050_write(hDevice, 0x58, 0x34);
+	fc8050_write(hDevice, 0x59, 0x2A);
+	fc8050_write(hDevice, 0x5A, 0x1D);
+	fc8050_write(hDevice, 0x5B, 0x14);
+	fc8050_write(hDevice, 0x61, 0x64);
+	fc8050_write(hDevice, 0x74, 0x3A);
+	fc8050_write(hDevice, 0x75, 0x1E);
+	fc8050_write(hDevice, 0x6A, 0x0C);
+	fc8050_write(hDevice, 0x6C, 0x0C);
+	fc8050_write(hDevice, 0x6E, 0x0C);
+	fc8050_write(hDevice, 0x70, 0x0C);
+	fc8050_write(hDevice, 0x72, 0x0C);
+	fc8050_write(hDevice, 0x7C, 0x0C);
+	fc8050_write(hDevice, 0x4E, 0x26);
+	fc8050_write(hDevice, 0x31, 0x13);
+	fc8050_write(hDevice, 0x34, 0x53);
+	fc8050_write(hDevice, 0x43, 0x20);
+	fc8050_write(hDevice, 0x2e, 0x70);
+	PRINTF(hDevice, "fc8050_band3_init() end:: 4\n");
+
+	fc8050_set_filter(hDevice);
+
+	PRINTF(hDevice, "fc8050_band3_init():: end  5\n");
+	return BBM_OK;
+}
+
+int fc8050_tuner_init(HANDLE hDevice, u32 band)
+{
+	int res = BBM_NOK;
+
+	PRINTF(hDevice, "fc8050_tuner_init():: 1\n");
+
+	bbm_write(hDevice, BBM_QDD_COMMAN, 0x5C);
+	bbm_write(hDevice, BBM_QDD_AGC_STEP, 0x03);
+	bbm_write(hDevice, BBM_QDD_TUN_COMMA, 0x40);
+	bbm_write(hDevice, BBM_QDD_TUN_GAIN, 0x24);
+	bbm_write(hDevice, BBM_QDD_AGC_PERIOD, 0x14);
+	bbm_write(hDevice, BBM_QDD_TRAGET_RMS, 0x60);
+	bbm_write(hDevice, BBM_QDD_TUN_GAIN_LOC, 0x44);
+	bbm_write(hDevice, BBM_QDD_GAIN_MAX, 0x38);
+
+	PRINTF(hDevice, "fc8050_tuner_init():: 2\n");
+
+	if(band == LBAND_TYPE)
+		res = fc8050_lband_init(hDevice);
+	else if(band == BAND3_TYPE)
+		res = fc8050_band3_init(hDevice);
+	else 
+		return BBM_NOK;
+
+  PRINTF(hDevice, "fc8050_tuner_init():: 3\n");
+
+	if(res != BBM_OK) 
+		return res;
+
+	return res;
+}	 
+
+int fc8050_set_freq(HANDLE hDevice, u32 band, u32 f_lo )
+{
+	u32 f_diff, f_diff_shifted, n_val, k_val;
+	u32 f_vco = f_lo * 12;
+	u32 r_val = ( f_vco >= 25*FC8050_FREQ_XTAL )? 1 : 2;
+	u32 f_comp = FC8050_FREQ_XTAL/r_val;
+	u8 pre_shift_bits = 4;
+	u8 data_0x0E;
+	int ret = 0;
+
+	ret = fc8050_write(hDevice, 0x0a, 0x85);
+	ret = fc8050_write(hDevice, 0x16, 0x0d);
+
+	n_val = f_vco / f_comp;
+
+	f_diff = f_vco -  f_comp * n_val;
+	f_diff_shifted = f_diff << ( 20 - pre_shift_bits );
+	k_val = f_diff_shifted / ( ( f_comp ) >> pre_shift_bits );
+
+	k_val = ( f_diff_shifted + ( f_comp >> (pre_shift_bits+1) ) ) / ( f_comp >> pre_shift_bits );
+
+	data_0x0E = ( ( r_val == 1 )? 0x40 : 0x50 ) + (unsigned char)(k_val >> 16);
+	ret = fc8050_write(hDevice, 0x0E, data_0x0E);
+	ret = fc8050_write(hDevice, 0x0F, (unsigned char)( k_val >> 8 ) );
+	ret = fc8050_write(hDevice, 0x10, (unsigned char)( k_val ) );
+	ret = fc8050_write(hDevice, 0x11, (unsigned char)( n_val ) );
+
+	ret = fc8050_write(hDevice, 0x0a, 0x83);
+
+  if ( ret )
+    PRINTF(hDevice, "fc8050_set FREQ():: write error !!!______\n");
+
+	return BBM_OK;
+}
+
+int fc8050_get_rssi(HANDLE hDevice, int *rssi)
+{
+	int res = BBM_OK;
+	u8  LNA, RFVGA, PREAMP_PGA, CSF = 0x00;
+	int K = -66;
+
+	res  = fc8050_read(hDevice, 0x76, &LNA);
+	res |= fc8050_read(hDevice, 0x77, &RFVGA);
+	res |= fc8050_read(hDevice, 0x78, &CSF);
+	res |= fc8050_read(hDevice, 0x79, &PREAMP_PGA);
+
+	if(res) {
+		*rssi = (s32)0xFFFFFFFF;
+		return res;
+	}
+
+	*rssi = (((LNA & 0x07) * 5) + (RFVGA*7/10) + (( PREAMP_PGA >> 7) * 6) + ((CSF & 0x7) * 6) - ((PREAMP_PGA & 0x7F) >> 1) + K);
+
+	return BBM_OK;
+}
diff -urN caf/drivers/char/dmb_fci/fc8050_tun.h for-diff/drivers/char/dmb_fci/fc8050_tun.h
--- caf/drivers/char/dmb_fci/fc8050_tun.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fc8050_tun.h	2015-10-08 21:23:59.032842000 +0900
@@ -0,0 +1,29 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_tun.c
+ 
+ Description : API of dmb baseband module
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/11 	jason		initial
+*******************************************************************************/
+
+#ifndef __FC8050_TUNER__
+#define __FC8050_TUNER__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern int fc8050_tuner_init(HANDLE hDevice, band_type band);
+extern int fc8050_set_freq(HANDLE hDevice, band_type band, u32 f_lo );
+extern int fc8050_get_rssi(HANDLE hDevice, int *rssi);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // __FC8050_TUNER__
+
diff -urN caf/drivers/char/dmb_fci/fci_hal.c for-diff/drivers/char/dmb_fci/fci_hal.c
--- caf/drivers/char/dmb_fci/fci_hal.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fci_hal.c	2015-10-08 21:23:38.436842000 +0900
@@ -0,0 +1,234 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fci_hal.c
+ 
+ Description : fc8050 host interface
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/08/29 	jason		initial
+*******************************************************************************/
+
+#include "fci_types.h"
+#include "bbm.h"
+#include "fci_hal.h"
+#include "fc8050_hpi.h"
+#include "fc8050_spi.h"
+#include "fc8050_ppi.h"
+#include "fc8050_i2c.h"
+
+typedef struct {
+	int (*init)(HANDLE hDevice, u16 param1, u16 param2);
+
+	int (*byteread)(HANDLE hDevice, u16 addr, u8  *data);
+	int (*wordread)(HANDLE hDevice, u16 addr, u16 *data);
+	int (*longread)(HANDLE hDevice, u16 addr, u32 *data);
+	int (*bulkread)(HANDLE hDevice, u16 addr, u8  *data, u16 size);
+
+	int (*bytewrite)(HANDLE hDevice, u16 addr, u8  data);
+	int (*wordwrite)(HANDLE hDevice, u16 addr, u16 data);
+	int (*longwrite)(HANDLE hDevice, u16 addr, u32 data);
+	int (*bulkwrite)(HANDLE hDevice, u16 addr, u8* data, u16 size);
+
+	int (*dataread)(HANDLE hDevice, u16 addr, u8* data, u16 size);
+
+	int (*deinit)(HANDLE hDevice);
+} IF_PORT;
+
+static IF_PORT hpiif = {
+	&fc8050_hpi_init,
+
+	&fc8050_hpi_byteread,
+	&fc8050_hpi_wordread,
+	&fc8050_hpi_longread,
+	&fc8050_hpi_bulkread,
+
+	&fc8050_hpi_bytewrite,
+	&fc8050_hpi_wordwrite,
+	&fc8050_hpi_longwrite,
+	&fc8050_hpi_bulkwrite,
+
+	&fc8050_hpi_dataread,
+
+	&fc8050_hpi_deinit
+};
+
+static IF_PORT spiif = {
+	&fc8050_spi_init,
+
+	&fc8050_spi_byteread,
+	&fc8050_spi_wordread,
+	&fc8050_spi_longread,
+	&fc8050_spi_bulkread,
+
+	&fc8050_spi_bytewrite,
+	&fc8050_spi_wordwrite,
+	&fc8050_spi_longwrite,
+	&fc8050_spi_bulkwrite,
+
+	&fc8050_spi_dataread,
+
+	&fc8050_spi_deinit
+};
+
+static IF_PORT ppiif = {
+	&fc8050_ppi_init,
+
+	&fc8050_ppi_byteread,
+	&fc8050_ppi_wordread,
+	&fc8050_ppi_longread,
+	&fc8050_ppi_bulkread,
+
+	&fc8050_ppi_bytewrite,
+	&fc8050_ppi_wordwrite,
+	&fc8050_ppi_longwrite,
+	&fc8050_ppi_bulkwrite,
+
+	&fc8050_ppi_dataread,
+
+	&fc8050_ppi_deinit
+};
+
+static IF_PORT i2cif = {
+	&fc8050_i2c_init,
+
+	&fc8050_i2c_byteread,
+	&fc8050_i2c_wordread,
+	&fc8050_i2c_longread,
+	&fc8050_i2c_bulkread,
+
+	&fc8050_i2c_bytewrite,
+	&fc8050_i2c_wordwrite,
+	&fc8050_i2c_longwrite,
+	&fc8050_i2c_bulkwrite,
+
+	&fc8050_i2c_dataread,
+
+	&fc8050_i2c_deinit
+};
+
+static IF_PORT *ifport = &hpiif;
+static u8 hostif_type = BBM_HPI;
+
+int bbm_hostif_get(HANDLE hDevice, u8 *hostif)
+{
+	*hostif = hostif_type;
+
+	return BBM_OK;
+}	
+
+int bbm_hostif_select(HANDLE hDevice, u8 hostif)
+{
+	hostif_type = hostif;
+	
+	switch(hostif) {
+		case BBM_HPI:
+			ifport = &hpiif;
+			break;
+		case BBM_SPI:
+			ifport = &spiif;
+			break;
+		case BBM_I2C:
+			ifport = &i2cif;
+			break;
+		case BBM_PPI:
+			ifport = &ppiif;
+			break;
+		default:
+			return BBM_E_HOSTIF_SELECT;
+	}
+
+	if(ifport->init(hDevice, 0, 0))
+		return BBM_E_HOSTIF_INIT;
+
+	return BBM_OK;
+}
+
+int bbm_hostif_deselect(HANDLE hDevice)
+{
+	if(ifport->deinit(hDevice))
+		return BBM_NOK;
+
+	ifport = NULL;
+	hostif_type = BBM_HPI;
+
+	return BBM_OK;
+}
+
+int bbm_read(HANDLE hDevice, u16 addr, u8 *data)
+{
+	if(ifport->byteread(hDevice, addr, data))
+		return BBM_E_BB_REG_READ;
+	return BBM_OK;
+}
+
+int bbm_byte_read(HANDLE hDevice, u16 addr, u8 *data)
+{
+	if(ifport->byteread(hDevice, addr, data))
+		return BBM_E_BB_REG_READ;
+	return BBM_OK;
+}
+
+int bbm_word_read(HANDLE hDevice, u16 addr, u16 *data)
+{
+	if(ifport->wordread(hDevice, addr, data))
+		return BBM_E_BB_REG_READ;
+	return BBM_OK;
+}
+
+int bbm_long_read(HANDLE hDevice, u16 addr, u32 *data)
+{
+	if(ifport->longread(hDevice, addr, data))
+		return BBM_E_BB_REG_READ;
+	return BBM_OK;
+}
+
+int bbm_bulk_read(HANDLE hDevice, u16 addr, u8 *data, u16 length)
+{
+	if(ifport->bulkread(hDevice, addr, data, length))
+		return BBM_E_BB_REG_READ;
+	return BBM_OK;
+}
+
+int bbm_write(HANDLE hDevice, u16 addr, u8 data)
+{
+	if(ifport->bytewrite(hDevice, addr, data))
+		return BBM_E_BB_REG_WRITE;
+	return BBM_OK;
+}
+
+int bbm_byte_write(HANDLE hDevice, u16 addr, u8 data)
+{
+	if(ifport->bytewrite(hDevice, addr, data))
+		return BBM_E_BB_REG_WRITE;
+	return BBM_OK;
+}
+
+int bbm_word_write(HANDLE hDevice, u16 addr, u16 data)
+{
+	if(ifport->wordwrite(hDevice, addr, data))
+		return BBM_E_BB_REG_WRITE;
+	return BBM_OK;
+}
+
+int bbm_long_write(HANDLE hDevice, u16 addr, u32 data)
+{
+	if(ifport->longwrite(hDevice, addr, data))
+		return BBM_E_BB_REG_WRITE;
+	return BBM_OK;
+}
+
+int bbm_bulk_write(HANDLE hDevice, u16 addr, u8 *data, u16 length)
+{
+	if(ifport->bulkwrite(hDevice, addr, data, length))
+		return BBM_E_BB_REG_WRITE;
+	return BBM_OK;
+}
+
+int bbm_data(HANDLE hDevice, u16 addr, u8* data, u16 length)
+{
+	if(ifport->dataread(hDevice, addr, data, length))
+		return BBM_E_BB_REG_WRITE;
+	return BBM_OK;
+}
diff -urN caf/drivers/char/dmb_fci/fci_hal.h for-diff/drivers/char/dmb_fci/fci_hal.h
--- caf/drivers/char/dmb_fci/fci_hal.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fci_hal.h	2015-10-08 21:23:59.124842000 +0900
@@ -0,0 +1,42 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8000_hal.h
+ 
+ Description : fc8000 host interface header
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/08/29 	jason		initial
+*******************************************************************************/
+
+#ifndef __FCI_HAL_H__
+#define __FCI_HAL_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern int bbm_hostif_select(HANDLE hDevice, u8 hostif);
+extern int bbm_hostif_deselect(HANDLE hDevice);
+extern int bbm_hostif_get(HANDLE hDevice, u8 *hostif);
+
+extern int bbm_read(HANDLE hDevice, u16 addr, u8 *data);
+extern int bbm_byte_read(HANDLE hDevice, u16 addr, u8 *data);
+extern int bbm_word_read(HANDLE hDevice, u16 addr, u16 *data);
+extern int bbm_long_read(HANDLE hDevice, u16 addr, u32 *data);
+extern int bbm_bulk_read(HANDLE hDevice, u16 addr, u8* data, u16 length);
+
+extern int bbm_write(HANDLE hDevice, u16 addr, u8 data);
+extern int bbm_byte_write(HANDLE hDevice, u16 addr, u8 data);
+extern int bbm_word_write(HANDLE hDevice, u16 addr, u16 data);
+extern int bbm_long_write(HANDLE hDevice, u16 addr, u32 data);
+extern int bbm_bulk_write(HANDLE hDevice, u16 addr, u8* data, u16 length);
+
+extern int bbm_data(HANDLE hDevice, u16 addr, u8* data, u16 length);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif		// __FCI_HAL_H__
diff -urN caf/drivers/char/dmb_fci/fci_i2c.c for-diff/drivers/char/dmb_fci/fci_i2c.c
--- caf/drivers/char/dmb_fci/fci_i2c.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fci_i2c.c	2015-10-08 21:23:38.452842000 +0900
@@ -0,0 +1,209 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fci_i2c.c
+ 
+ Description : fci i2c driver
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/11 	jason		initial
+*******************************************************************************/
+
+#include "fci_types.h"
+#include "fci_oal.h"
+#include "fc8050_regs.h"
+#include "fci_hal.h"
+
+#define I2CSTAT_TIP 		0x02	/* Tip bit */
+#define I2CSTAT_NACK		0x80	/* Nack bit */
+
+#define I2C_TIMEOUT 		1	/* 1 second */
+
+#define I2C_CR_STA		0x80
+#define I2C_CR_STO		0x40
+#define I2C_CR_RD		0x20
+#define I2C_CR_WR		0x10
+#define I2C_CR_NACK 		0x08
+#define I2C_CR_IACK 		0x01
+
+#define I2C_WRITE		0
+#define I2C_READ		1
+
+#define I2C_OK			0
+#define I2C_NOK 		1
+#define I2C_NACK		2
+#define I2C_NOK_LA		3		/* Lost arbitration */
+#define I2C_NOK_TOUT		4		/* time out */
+
+static int WaitForXfer (HANDLE hDevice)
+{
+	int i;
+	int res = I2C_OK;
+	u8 status;
+
+	i = I2C_TIMEOUT * 10000;  // 2011.06.28 - 100 -> 10000 (1sec)
+	// wait for transfer complete
+	do {
+		bbm_read(hDevice, BBM_I2C_SR, &status);
+		i--;
+	} while ((i > 0) && (status & I2CSTAT_TIP));
+
+	// check time out or nack
+	if(status & I2CSTAT_TIP) {
+		res = I2C_NOK_TOUT;
+	} else {
+		bbm_read(hDevice, BBM_I2C_SR, &status);
+		if(status & I2CSTAT_NACK) res = I2C_NACK;
+		else res = I2C_OK;
+	}
+
+	return res;
+}
+
+static int fci_i2c_transfer (HANDLE hDevice, u8 cmd_type, u8 chip, u8 addr[], u8 addr_len, u8 data[], u8 data_len)
+{
+	int i;	
+	int result = I2C_OK;
+
+	switch (cmd_type) {
+		case I2C_WRITE:
+			bbm_write(hDevice, BBM_I2C_TXR, chip | cmd_type);
+			bbm_write(hDevice, BBM_I2C_CR, I2C_CR_STA | I2C_CR_WR /*0x90*/);
+			result = WaitForXfer(hDevice);
+			if(result != I2C_OK) return result;
+			
+			if (addr && addr_len) {
+				i = 0;
+				while ((i < addr_len) && (result == I2C_OK)) {
+					bbm_write(hDevice, BBM_I2C_TXR, addr[i]);
+					bbm_write(hDevice, BBM_I2C_CR, I2C_CR_WR /*0x10*/);
+					result = WaitForXfer(hDevice);
+					if(result != I2C_OK) return result;
+					i++;
+				}
+			}
+			
+			i = 0;
+			while ((i < data_len) && (result == I2C_OK)) {
+				bbm_write(hDevice, BBM_I2C_TXR, data[i]);
+				bbm_write(hDevice, BBM_I2C_CR, I2C_CR_WR /*0x10*/);
+				result = WaitForXfer(hDevice);
+				if(result != I2C_OK) return result;
+				i++;
+			}
+
+			bbm_write(hDevice, BBM_I2C_CR, I2C_CR_STO /*0x40*/);
+			result = WaitForXfer(hDevice);
+			if(result != I2C_OK) return result;
+			break;
+		case I2C_READ:
+			if (addr && addr_len) {
+				bbm_write(hDevice, BBM_I2C_TXR, chip | I2C_WRITE);
+				bbm_write(hDevice, BBM_I2C_CR, I2C_CR_STA | I2C_CR_WR /*0x90*/); // send start
+				result = WaitForXfer(hDevice);
+				if(result != I2C_OK) {
+					return result;
+				}
+			
+				i = 0;
+				while ((i < addr_len) && (result == I2C_OK)) {
+					bbm_write(hDevice, BBM_I2C_TXR, addr[i]);
+					bbm_write(hDevice, BBM_I2C_CR, I2C_CR_WR /*0x10*/);
+					result = WaitForXfer(hDevice);
+					if(result != I2C_OK) {
+						return result;
+					}
+					i++;
+				}
+			}
+			
+			bbm_write(hDevice, BBM_I2C_TXR, chip | I2C_READ);
+			bbm_write(hDevice, BBM_I2C_CR, I2C_CR_STA | I2C_CR_WR /*0x90*/); // resend start
+			result = WaitForXfer(hDevice);
+			if(result != I2C_OK) {
+				return result;
+			}	
+
+			i = 0;
+			while ((i < data_len) && (result == I2C_OK)) {
+				if (i == data_len - 1) {
+					bbm_write(hDevice, BBM_I2C_CR, I2C_CR_RD|I2C_CR_NACK/*0x28*/);	// No Ack Read
+					result = WaitForXfer(hDevice);
+					if((result != I2C_NACK) && (result != I2C_OK)){
+						PRINTF(hDevice, "NACK4-0[%02x]\n", result);
+						return result;
+					}
+				} else {
+					bbm_write(hDevice, BBM_I2C_CR, I2C_CR_RD /*0x20*/);	// Ack Read
+					result = WaitForXfer(hDevice);
+					if(result != I2C_OK){
+						PRINTF(hDevice, "NACK4-1[%02x]\n", result);
+						return result;
+					}
+				}
+				bbm_read(hDevice, BBM_I2C_RXR, &data[i]);
+				i++;
+			}	
+
+			bbm_write(hDevice, BBM_I2C_CR, I2C_CR_STO /*0x40*/);		// send stop
+			result = WaitForXfer(hDevice);
+			if((result != I2C_NACK) && (result != I2C_OK)) {
+				PRINTF(hDevice, "NACK5[%02X]\n", result);
+				return result;
+			}
+			break;
+		default:
+			return I2C_NOK;
+	}
+
+	return I2C_OK;
+}
+
+int fci_i2c_init (HANDLE hDevice, int speed, int slaveaddr)
+{
+	u16 pr, rpr =0;
+	
+	pr = (u16)((4800/speed) -1); 
+	//pr=400;
+	bbm_word_write(hDevice, BBM_I2C_PR, pr);
+
+	bbm_word_read(hDevice, BBM_I2C_PR, &rpr);
+	if(pr != rpr) {
+		return BBM_NOK;
+	}
+
+	//i2c master core enable & interrupt enable
+	bbm_write(hDevice, BBM_I2C_CTR, 0xC0);
+
+	return BBM_OK;
+}
+
+int fci_i2c_read(HANDLE hDevice, u8 chip, u8 addr, u8 alen, u8 *data, u8 len)
+{
+	int ret;
+	u8 tmp[4] = {0xcc, 0xcc, 0xcc, 0xcc};
+
+	ret = fci_i2c_transfer(hDevice, I2C_READ, chip << 1, &addr, alen, &tmp[0], len);
+	if(ret != I2C_OK) {
+		PRINTF(hDevice, "fci_i2c_read() result=%d, addr = %x, data=%x\n", ret, addr, *data);
+		return ret;
+	}
+
+	*data = tmp[0];
+	
+	return ret;
+}
+
+int fci_i2c_write(HANDLE hDevice, u8 chip, u8 addr, u8 alen, u8 *data, u8 len)
+{
+	int ret;
+	u8 *paddr = &addr;
+
+	ret = fci_i2c_transfer(hDevice, I2C_WRITE, chip << 1, paddr, alen, data, len);
+	if(ret != I2C_OK) {
+		PRINTF(hDevice, "fci_i2c_write() result=%d, addr= %x, data=%x\n", ret, addr, *data);
+	}
+
+	return ret;
+}
diff -urN caf/drivers/char/dmb_fci/fci_i2c.h for-diff/drivers/char/dmb_fci/fci_i2c.h
--- caf/drivers/char/dmb_fci/fci_i2c.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fci_i2c.h	2015-10-08 21:23:59.172842000 +0900
@@ -0,0 +1,30 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fci_i2c.h
+ 
+ Description : fci i2c driver header
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/11 	jason		initial
+*******************************************************************************/
+
+#ifndef __FCI_I2C_H__
+#define __FCI_I2C_H__
+
+#include "fci_types.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern int fci_i2c_init(HANDLE hDevice, int speed, int slaveaddr);
+extern int fci_i2c_read(HANDLE hDevice, u8 chip, u8 addr, u8 alen, u8* data, u8 len);
+extern int fci_i2c_write(HANDLE hDevice, u8 chip, u8 addr, u8 alen, u8* data, u8 len);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif		// __FCI_I2C_H__
diff -urN caf/drivers/char/dmb_fci/fci_msg.h for-diff/drivers/char/dmb_fci/fci_msg.h
--- caf/drivers/char/dmb_fci/fci_msg.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fci_msg.h	2015-10-08 21:23:59.252842000 +0900
@@ -0,0 +1,39 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fc8050_isr.c
+ 
+ Description : API of dmb baseband module
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/11 	jason		initial
+*******************************************************************************/
+
+#ifndef __FCI_MSG__
+#define __FCI_MSG__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#ifndef KTTECH_FINAL_BUILD
+#define CHECK_RET(x) \
+  if ( ret_val!=0 ) \
+  {\
+  DEVLOG("FC8050_ISR ___ ERROR :: (%d) \n", x);\
+  }
+#define DEVLOG(fmt, ...) printk(KERN_DEBUG "### <DMB>" fmt ,##__VA_ARGS__)  
+#define DPRINTK(x...) printk("TDMB " x)
+#else  
+#define CHECK_RET(fmt, ...)
+#define DEVLOG(fmt, ...)
+#define DPRINTK(fmt, ...)
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // __FCI_MSG__
+
diff -urN caf/drivers/char/dmb_fci/fci_oal.c for-diff/drivers/char/dmb_fci/fci_oal.c
--- caf/drivers/char/dmb_fci/fci_oal.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fci_oal.c	2015-10-08 21:23:38.492842000 +0900
@@ -0,0 +1,37 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fci_oal.c
+ 
+ Description : OS Adaptation Layer
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/13 	jason		initial
+*******************************************************************************/
+#include <linux/kernel.h>
+#include <linux/delay.h>
+
+#include "fci_types.h"
+
+
+void PRINTF(HANDLE hDevice, char *fmt,...)
+{
+#ifndef KTTECH_FINAL_BUILD
+	va_list ap;
+	char str[256];
+	
+	va_start(ap,fmt);
+	vsprintf(str,fmt,ap);
+
+	printk("%s", str);
+
+	va_end(ap);
+#endif	
+}
+
+void msWait(int ms)
+{
+	msleep(ms);
+}
+
diff -urN caf/drivers/char/dmb_fci/fci_oal.h for-diff/drivers/char/dmb_fci/fci_oal.h
--- caf/drivers/char/dmb_fci/fci_oal.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fci_oal.h	2015-10-08 21:23:59.316842000 +0900
@@ -0,0 +1,27 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fci_oal.h
+ 
+ Description : OS Adatation Layer header
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/09/13 	jason		initial
+*******************************************************************************/
+
+#ifndef __FCI_OAL_H__
+#define __FCI_OAL_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern void PRINTF(HANDLE hDevice, char *fmt,...);
+extern void msWait(int ms);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif		// __FCI_OAL_H__
diff -urN caf/drivers/char/dmb_fci/fci_ringbuffer.c for-diff/drivers/char/dmb_fci/fci_ringbuffer.c
--- caf/drivers/char/dmb_fci/fci_ringbuffer.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fci_ringbuffer.c	2015-10-08 21:23:38.504842000 +0900
@@ -0,0 +1,300 @@
+/*
+ *
+ * fci_ringbuffer.c: ring buffer implementation for the fci driver
+ *
+ * Copyright (C) 2003 Oliver Endriss
+ * Copyright (C) 2004 Andrew de Quincey
+ *
+ * based on code originally found in av7110.c & fci_ci.c:
+ * Copyright (C) 1999-2003 Ralph  Metzler
+ *                       & Marcus Metzler for convergence integrated media GmbH
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public License
+ * as published by the Free Software Foundation; either version 2.1
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+
+
+#include <linux/errno.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/sched.h>
+#include <linux/string.h>
+#include <asm/uaccess.h>
+
+#include "fci_ringbuffer.h"
+
+#define PKT_READY 0
+#define PKT_DISPOSED 1
+
+
+void fci_ringbuffer_init(struct fci_ringbuffer *rbuf, void *data, size_t len)
+{
+	rbuf->pread=rbuf->pwrite=0;
+	rbuf->data=data;
+	rbuf->size=len;
+	rbuf->error=0;
+
+#if 0
+	init_waitqueue_head(&rbuf->queue);
+#endif
+
+	spin_lock_init(&(rbuf->lock));
+}
+
+
+
+int fci_ringbuffer_empty(struct fci_ringbuffer *rbuf)
+{
+	return (rbuf->pread==rbuf->pwrite);
+}
+
+
+
+ssize_t fci_ringbuffer_free(struct fci_ringbuffer *rbuf)
+{
+	ssize_t free;
+
+	free = rbuf->pread - rbuf->pwrite;
+	if (free <= 0)
+		free += rbuf->size;
+	return free-1;
+}
+
+
+
+ssize_t fci_ringbuffer_avail(struct fci_ringbuffer *rbuf)
+{
+	ssize_t avail;
+
+	avail = rbuf->pwrite - rbuf->pread;
+	if (avail < 0)
+		avail += rbuf->size;
+	return avail;
+}
+
+
+
+void fci_ringbuffer_flush(struct fci_ringbuffer *rbuf)
+{
+	rbuf->pread = rbuf->pwrite;
+	rbuf->error = 0;
+}
+
+void fci_ringbuffer_reset(struct fci_ringbuffer *rbuf)
+{
+	rbuf->pread = rbuf->pwrite = 0;
+	rbuf->error = 0;
+}
+
+void fci_ringbuffer_flush_spinlock_wakeup(struct fci_ringbuffer *rbuf)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&rbuf->lock, flags);
+	fci_ringbuffer_flush(rbuf);
+	spin_unlock_irqrestore(&rbuf->lock, flags);
+
+	wake_up(&rbuf->queue);
+}
+
+ssize_t fci_ringbuffer_read_user(struct fci_ringbuffer *rbuf, u8 __user *buf, size_t len)
+{
+	size_t todo = len;
+	size_t split;
+
+	split = (rbuf->pread + len > rbuf->size) ? rbuf->size - rbuf->pread : 0;
+	if (split > 0) {
+		if (copy_to_user(buf, rbuf->data+rbuf->pread, split))
+			return -EFAULT;
+		buf += split;
+		todo -= split;
+		rbuf->pread = 0;
+	}
+	if (copy_to_user(buf, rbuf->data+rbuf->pread, todo))
+		return -EFAULT;
+
+	rbuf->pread = (rbuf->pread + todo) % rbuf->size;
+
+	return len;
+}
+
+void fci_ringbuffer_read(struct fci_ringbuffer *rbuf, u8 *buf, size_t len)
+{
+	size_t todo = len;
+	size_t split;
+
+	split = (rbuf->pread + len > rbuf->size) ? rbuf->size - rbuf->pread : 0;
+	if (split > 0) {
+		memcpy(buf, rbuf->data+rbuf->pread, split);
+		buf += split;
+		todo -= split;
+		rbuf->pread = 0;
+	}
+	memcpy(buf, rbuf->data+rbuf->pread, todo);
+
+	rbuf->pread = (rbuf->pread + todo) % rbuf->size;
+}
+
+
+ssize_t fci_ringbuffer_write(struct fci_ringbuffer *rbuf, const u8 *buf, size_t len)
+{
+	size_t todo = len;
+	size_t split;
+
+	split = (rbuf->pwrite + len > rbuf->size) ? rbuf->size - rbuf->pwrite : 0;
+
+	if (split > 0) {
+		memcpy(rbuf->data+rbuf->pwrite, buf, split);
+		buf += split;
+		todo -= split;
+		rbuf->pwrite = 0;
+	}
+	memcpy(rbuf->data+rbuf->pwrite, buf, todo);
+	rbuf->pwrite = (rbuf->pwrite + todo) % rbuf->size;
+
+	return len;
+}
+
+ssize_t fci_ringbuffer_pkt_write(struct fci_ringbuffer *rbuf, u8* buf, size_t len)
+{
+	int status;
+	ssize_t oldpwrite = rbuf->pwrite;
+
+	FCI_RINGBUFFER_WRITE_BYTE(rbuf, len >> 8);
+	FCI_RINGBUFFER_WRITE_BYTE(rbuf, len & 0xff);
+	FCI_RINGBUFFER_WRITE_BYTE(rbuf, PKT_READY);
+	status = fci_ringbuffer_write(rbuf, buf, len);
+
+	if (status < 0) rbuf->pwrite = oldpwrite;
+	return status;
+}
+
+ssize_t fci_ringbuffer_pkt_read_user(struct fci_ringbuffer *rbuf, size_t idx,
+				int offset, u8 __user *buf, size_t len)
+{
+	size_t todo;
+	size_t split;
+	size_t pktlen;
+
+	pktlen = rbuf->data[idx] << 8;
+	pktlen |= rbuf->data[(idx + 1) % rbuf->size];
+	if (offset > pktlen) return -EINVAL;
+	if ((offset + len) > pktlen) len = pktlen - offset;
+
+	idx = (idx + FCI_RINGBUFFER_PKTHDRSIZE + offset) % rbuf->size;
+	todo = len;
+	split = ((idx + len) > rbuf->size) ? rbuf->size - idx : 0;
+	if (split > 0) {
+		if (copy_to_user(buf, rbuf->data+idx, split))
+			return -EFAULT;
+		buf += split;
+		todo -= split;
+		idx = 0;
+	}
+	if (copy_to_user(buf, rbuf->data+idx, todo))
+		return -EFAULT;
+
+	return len;
+}
+
+ssize_t fci_ringbuffer_pkt_read(struct fci_ringbuffer *rbuf, size_t idx,
+				int offset, u8* buf, size_t len)
+{
+	size_t todo;
+	size_t split;
+	size_t pktlen;
+
+	pktlen = rbuf->data[idx] << 8;
+	pktlen |= rbuf->data[(idx + 1) % rbuf->size];
+	if (offset > pktlen) return -EINVAL;
+	if ((offset + len) > pktlen) len = pktlen - offset;
+
+	idx = (idx + FCI_RINGBUFFER_PKTHDRSIZE + offset) % rbuf->size;
+	todo = len;
+	split = ((idx + len) > rbuf->size) ? rbuf->size - idx : 0;
+	if (split > 0) {
+		memcpy(buf, rbuf->data+idx, split);
+		buf += split;
+		todo -= split;
+		idx = 0;
+	}
+	memcpy(buf, rbuf->data+idx, todo);
+	return len;
+}
+
+void fci_ringbuffer_pkt_dispose(struct fci_ringbuffer *rbuf, size_t idx)
+{
+	size_t pktlen;
+
+	rbuf->data[(idx + 2) % rbuf->size] = PKT_DISPOSED;
+
+	// clean up disposed packets
+	while(fci_ringbuffer_avail(rbuf) > FCI_RINGBUFFER_PKTHDRSIZE) {
+		if (FCI_RINGBUFFER_PEEK(rbuf, 2) == PKT_DISPOSED) {
+			pktlen = FCI_RINGBUFFER_PEEK(rbuf, 0) << 8;
+			pktlen |= FCI_RINGBUFFER_PEEK(rbuf, 1);
+			FCI_RINGBUFFER_SKIP(rbuf, pktlen + FCI_RINGBUFFER_PKTHDRSIZE);
+		} else {
+			// first packet is not disposed, so we stop cleaning now
+			break;
+		}
+	}
+}
+
+ssize_t fci_ringbuffer_pkt_next(struct fci_ringbuffer *rbuf, size_t idx, size_t* pktlen)
+{
+	int consumed;
+	int curpktlen;
+	int curpktstatus;
+
+	if (idx == -1) {
+	       idx = rbuf->pread;
+	} else {
+		curpktlen = rbuf->data[idx] << 8;
+		curpktlen |= rbuf->data[(idx + 1) % rbuf->size];
+		idx = (idx + curpktlen + FCI_RINGBUFFER_PKTHDRSIZE) % rbuf->size;
+	}
+
+	consumed = (idx - rbuf->pread) % rbuf->size;
+
+	while((fci_ringbuffer_avail(rbuf) - consumed) > FCI_RINGBUFFER_PKTHDRSIZE) {
+
+		curpktlen = rbuf->data[idx] << 8;
+		curpktlen |= rbuf->data[(idx + 1) % rbuf->size];
+		curpktstatus = rbuf->data[(idx + 2) % rbuf->size];
+
+		if (curpktstatus == PKT_READY) {
+			*pktlen = curpktlen;
+			return idx;
+		}
+
+		consumed += curpktlen + FCI_RINGBUFFER_PKTHDRSIZE;
+		idx = (idx + curpktlen + FCI_RINGBUFFER_PKTHDRSIZE) % rbuf->size;
+	}
+
+	// no packets available
+	return -1;
+}
+
+
+
+EXPORT_SYMBOL(fci_ringbuffer_init);
+EXPORT_SYMBOL(fci_ringbuffer_empty);
+EXPORT_SYMBOL(fci_ringbuffer_free);
+EXPORT_SYMBOL(fci_ringbuffer_avail);
+EXPORT_SYMBOL(fci_ringbuffer_flush_spinlock_wakeup);
+EXPORT_SYMBOL(fci_ringbuffer_read_user);
+EXPORT_SYMBOL(fci_ringbuffer_read);
+EXPORT_SYMBOL(fci_ringbuffer_write);
diff -urN caf/drivers/char/dmb_fci/fci_ringbuffer.h for-diff/drivers/char/dmb_fci/fci_ringbuffer.h
--- caf/drivers/char/dmb_fci/fci_ringbuffer.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fci_ringbuffer.h	2015-10-08 21:23:59.388842000 +0900
@@ -0,0 +1,186 @@
+/*
+ *
+ * fci_ringbuffer.h: ring buffer implementation for the fci driver
+ *
+ * Copyright (C) 2003 Oliver Endriss
+ * Copyright (C) 2004 Andrew de Quincey
+ *
+ * based on code originally found in av7110.c & fci_ci.c:
+ * Copyright (C) 1999-2003 Ralph Metzler & Marcus Metzler
+ *                         for convergence integrated media GmbH
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public License
+ * as published by the Free Software Foundation; either version 2.1
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _FCI_RINGBUFFER_H_
+#define _FCI_RINGBUFFER_H_
+
+#include <linux/spinlock.h>
+#include <linux/wait.h>
+
+struct fci_ringbuffer {
+	u8               *data;
+	ssize_t           size;
+	ssize_t           pread;
+	ssize_t           pwrite;
+	int               error;
+
+	wait_queue_head_t queue;
+	spinlock_t        lock;
+};
+
+#define FCI_RINGBUFFER_PKTHDRSIZE 3
+
+
+/*
+** Notes:
+** ------
+** (1) For performance reasons read and write routines don't check buffer sizes
+**     and/or number of bytes free/available. This has to be done before these
+**     routines are called. For example:
+**
+**     *** write <buflen> bytes ***
+**     free = fci_ringbuffer_free(rbuf);
+**     if (free >= buflen)
+**         count = fci_ringbuffer_write(rbuf, buffer, buflen);
+**     else
+**         ...
+**
+**     *** read min. 1000, max. <bufsize> bytes ***
+**     avail = fci_ringbuffer_avail(rbuf);
+**     if (avail >= 1000)
+**         count = fci_ringbuffer_read(rbuf, buffer, min(avail, bufsize));
+**     else
+**         ...
+**
+** (2) If there is exactly one reader and one writer, there is no need
+**     to lock read or write operations.
+**     Two or more readers must be locked against each other.
+**     Flushing the buffer counts as a read operation.
+**     Resetting the buffer counts as a read and write operation.
+**     Two or more writers must be locked against each other.
+*/
+
+/* initialize ring buffer, lock and queue */
+extern void fci_ringbuffer_init(struct fci_ringbuffer *rbuf, void *data, size_t len);
+
+/* test whether buffer is empty */
+extern int fci_ringbuffer_empty(struct fci_ringbuffer *rbuf);
+
+/* return the number of free bytes in the buffer */
+extern ssize_t fci_ringbuffer_free(struct fci_ringbuffer *rbuf);
+
+/* return the number of bytes waiting in the buffer */
+extern ssize_t fci_ringbuffer_avail(struct fci_ringbuffer *rbuf);
+
+
+/*
+** Reset the read and write pointers to zero and flush the buffer
+** This counts as a read and write operation
+*/
+extern void fci_ringbuffer_reset(struct fci_ringbuffer *rbuf);
+
+
+/* read routines & macros */
+/* ---------------------- */
+/* flush buffer */
+extern void fci_ringbuffer_flush(struct fci_ringbuffer *rbuf);
+
+/* flush buffer protected by spinlock and wake-up waiting task(s) */
+extern void fci_ringbuffer_flush_spinlock_wakeup(struct fci_ringbuffer *rbuf);
+
+/* peek at byte <offs> in the buffer */
+#define FCI_RINGBUFFER_PEEK(rbuf,offs)	\
+			(rbuf)->data[((rbuf)->pread+(offs))%(rbuf)->size]
+
+/* advance read ptr by <num> bytes */
+#define FCI_RINGBUFFER_SKIP(rbuf,num)	\
+			(rbuf)->pread=((rbuf)->pread+(num))%(rbuf)->size
+
+/*
+** read <len> bytes from ring buffer into <buf>
+** <usermem> specifies whether <buf> resides in user space
+** returns number of bytes transferred or -EFAULT
+*/
+extern ssize_t fci_ringbuffer_read_user(struct fci_ringbuffer *rbuf,
+				   u8 __user *buf, size_t len);
+extern void fci_ringbuffer_read(struct fci_ringbuffer *rbuf,
+				   u8 *buf, size_t len);
+
+
+/* write routines & macros */
+/* ----------------------- */
+/* write single byte to ring buffer */
+#define FCI_RINGBUFFER_WRITE_BYTE(rbuf,byte)	\
+			{ (rbuf)->data[(rbuf)->pwrite]=(byte); \
+			(rbuf)->pwrite=((rbuf)->pwrite+1)%(rbuf)->size; }
+/*
+** write <len> bytes to ring buffer
+** <usermem> specifies whether <buf> resides in user space
+** returns number of bytes transferred or -EFAULT
+*/
+extern ssize_t fci_ringbuffer_write(struct fci_ringbuffer *rbuf, const u8 *buf,
+				    size_t len);
+
+
+/**
+ * Write a packet into the ringbuffer.
+ *
+ * <rbuf> Ringbuffer to write to.
+ * <buf> Buffer to write.
+ * <len> Length of buffer (currently limited to 65535 bytes max).
+ * returns Number of bytes written, or -EFAULT, -ENOMEM, -EVINAL.
+ */
+extern ssize_t fci_ringbuffer_pkt_write(struct fci_ringbuffer *rbuf, u8* buf,
+					size_t len);
+
+/**
+ * Read from a packet in the ringbuffer. Note: unlike fci_ringbuffer_read(), this
+ * does NOT update the read pointer in the ringbuffer. You must use
+ * fci_ringbuffer_pkt_dispose() to mark a packet as no longer required.
+ *
+ * <rbuf> Ringbuffer concerned.
+ * <idx> Packet index as returned by fci_ringbuffer_pkt_next().
+ * <offset> Offset into packet to read from.
+ * <buf> Destination buffer for data.
+ * <len> Size of destination buffer.
+ * <usermem> Set to 1 if <buf> is in userspace.
+ * returns Number of bytes read, or -EFAULT.
+ */
+extern ssize_t fci_ringbuffer_pkt_read_user(struct fci_ringbuffer *rbuf, size_t idx,
+				       int offset, u8 __user *buf, size_t len);
+extern ssize_t fci_ringbuffer_pkt_read(struct fci_ringbuffer *rbuf, size_t idx,
+				       int offset, u8 *buf, size_t len);
+
+/**
+ * Dispose of a packet in the ring buffer.
+ *
+ * <rbuf> Ring buffer concerned.
+ * <idx> Packet index as returned by fci_ringbuffer_pkt_next().
+ */
+extern void fci_ringbuffer_pkt_dispose(struct fci_ringbuffer *rbuf, size_t idx);
+
+/**
+ * Get the index of the next packet in a ringbuffer.
+ *
+ * <rbuf> Ringbuffer concerned.
+ * <idx> Previous packet index, or -1 to return the first packet index.
+ * <pktlen> On success, will be updated to contain the length of the packet in bytes.
+ * returns Packet index (if >=0), or -1 if no packets available.
+ */
+extern ssize_t fci_ringbuffer_pkt_next(struct fci_ringbuffer *rbuf, size_t idx, size_t* pktlen);
+
+
+#endif /* _FCI_RINGBUFFER_H_ */
diff -urN caf/drivers/char/dmb_fci/fci_tun.c for-diff/drivers/char/dmb_fci/fci_tun.c
--- caf/drivers/char/dmb_fci/fci_tun.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fci_tun.c	2015-10-08 21:23:38.540842000 +0900
@@ -0,0 +1,158 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : tuner.c
+ 
+ Description : tuner driver
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/08/29 	jason		initial
+*******************************************************************************/
+
+#include "fci_types.h"
+#include "fci_oal.h"
+#include "fci_hal.h"
+#include "fci_tun.h"
+#include "fci_i2c.h"
+#include "fc8050_regs.h"
+#include "fc8050_bb.h"
+#include "fc8050_tun.h"
+
+#define FC8000_TUNER_ADDR	0x56
+#define FC2501_TUNER_ADDR	0x60
+#define FC2507_TUNER_ADDR	0x60
+#define FC2580_TUNER_ADDR	0x56
+#define FC2582_TUNER_ADDR	0x56
+//#define FC8050_TUNER_ADDR	0x5E // MPW
+#define FC8050_TUNER_ADDR	0x5F // SLR
+
+static u8 tuner_addr = FC8050_TUNER_ADDR;
+static band_type tuner_band = BAND3_TYPE;
+
+typedef struct {
+	int		(*init)(HANDLE hDevice, int speed, int slaveaddr);
+	int		(*read)(HANDLE hDevice, u8 chip, u8 addr, u8 alen, u8 *data, u8 len);
+	int		(*write)(HANDLE hDevice, u8 chip, u8 addr, u8 alen, u8 *data, u8 len);
+} I2C_DRV;
+
+static I2C_DRV fcii2c = {
+	&fci_i2c_init,
+	&fci_i2c_read,
+	&fci_i2c_write
+};
+
+typedef struct {
+	int		(*init)(HANDLE hDevice, band_type band);
+	int		(*set_freq)(HANDLE hDevice, band_type band, u32 f_lo);
+	int		(*get_rssi)(HANDLE hDevice, int *rssi);
+} TUNER_DRV;
+
+static TUNER_DRV fc8050_tuner = {
+	&fc8050_tuner_init,
+	&fc8050_set_freq,
+	&fc8050_get_rssi
+};
+
+static I2C_DRV* tuner_ctrl = &fcii2c;
+static TUNER_DRV* tuner = &fc8050_tuner;
+
+int tuner_ctrl_select(HANDLE hDevice, i2c_type type)
+{
+	switch (type) {
+		case FCI_I2C_TYPE:
+			tuner_ctrl = &fcii2c;
+			break;
+		default:
+			return BBM_E_TN_CTRL_SELECT;
+	}
+
+	if(tuner_ctrl->init(hDevice, 400, 0))
+		return BBM_E_TN_CTRL_INIT;
+	return BBM_OK;
+}
+
+int tuner_i2c_read(HANDLE hDevice, u8 addr, u8 alen, u8 *data, u8 len)
+{
+	if(tuner_ctrl->read(hDevice, tuner_addr, addr, alen, data, len))
+		return BBM_E_TN_REG_READ;
+	return BBM_OK;
+}
+
+int tuner_i2c_write(HANDLE hDevice, u8 addr, u8 alen, u8 *data, u8 len)
+{
+	if(tuner_ctrl->write(hDevice, tuner_addr, addr, alen, data, len))
+		return BBM_E_TN_REG_WRITE;
+	return BBM_OK;
+}
+
+int tuner_type(HANDLE hDevice, u32 *type)
+{
+	*type = tuner_band;
+
+	return BBM_OK;
+}
+
+int tuner_set_freq(HANDLE hDevice, u32 freq)
+{
+	int res = BBM_NOK;
+	u8 tmp;
+
+	// check whether tuner is selected or not
+	if(tuner == NULL) {
+		PRINTF(hDevice, "TUNER NULL ERROR \n");
+		return BBM_NOK;
+	}
+
+	// set frequency & sw reset
+	res = tuner->set_freq(hDevice, tuner_band, freq);
+	if(res != BBM_OK) {
+		PRINTF(hDevice, "TUNER res ERROR \n");
+		return BBM_NOK;
+	}
+
+#if (FC8050_FREQ_XTAL == 19200) || (FC8050_FREQ_XTAL == 27000) || (FC8050_FREQ_XTAL == 27120) || (FC8050_FREQ_XTAL == 38400)
+	tmp = (u8)(33554432/freq);
+  PRINTF(hDevice, "TUNER FREQ - 19200 -- bbm_write, F1 : %d\n", tmp);
+	bbm_write(hDevice, 0xf1, tmp);
+#endif
+
+	fc8050_reset(hDevice);
+
+	return res;
+}
+
+int tuner_select(HANDLE hDevice, u32 product, u32 band)
+{
+  int ret;
+	switch(product) {
+		case FC8050_TUNER:
+			ret = tuner_ctrl_select(hDevice, FCI_I2C_TYPE);
+			PRINTF(hDevice, "DMB:: Tuner_select:: ctrl select ret= %d\n",ret);
+			tuner = &fc8050_tuner;
+			tuner_band = (band_type) band;
+			tuner_addr = FC8050_TUNER_ADDR;
+			break;
+		default:
+			return BBM_E_TN_SELECT;
+	}
+
+	if(tuner == NULL) {
+		PRINTF(hDevice, "[ERROR] Can not supported Tuner(%d,%d)\n", product, band);
+		return BBM_E_TN_SELECT;
+	}
+
+//	if(tuner->init(hDevice, tuner_band))
+  ret = tuner->init(hDevice, tuner_band);
+  PRINTF(hDevice, "DMB:: Tuner_select:: init ret= %d\n",ret);
+  if ( ret )
+		return BBM_E_TN_INIT;
+	return BBM_OK;
+}
+
+int tuner_get_rssi(HANDLE hDevice, s32 *rssi)
+{
+	if(tuner->get_rssi(hDevice, rssi))
+		return BBM_E_TN_RSSI;
+	return BBM_OK;
+}
diff -urN caf/drivers/char/dmb_fci/fci_tun.h for-diff/drivers/char/dmb_fci/fci_tun.h
--- caf/drivers/char/dmb_fci/fci_tun.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fci_tun.h	2015-10-08 21:23:59.432842000 +0900
@@ -0,0 +1,48 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fci_tun.h
+ 
+ Description : tuner control driver header
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/08/29 	jason		initial
+*******************************************************************************/
+
+#ifndef __FCI_TUN_H__
+#define __FCI_TUN_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include "fci_types.h"
+
+typedef enum {
+	FCI_I2C_TYPE = 0
+} i2c_type;
+
+typedef enum {
+	BAND3_TYPE = 0,
+	LBAND_TYPE
+} band_type;
+
+typedef enum {
+	FC8000_TUNER = 0,
+	FC8050_TUNER
+} product_type;
+
+extern int tuner_i2c_init(HANDLE hDevice, int speed, int slaveaddr);
+extern int tuner_i2c_read(HANDLE hDevice, u8 addr, u8 alen, u8* data, u8 len);
+extern int tuner_i2c_write(HANDLE hDevice, u8 addr, u8 alen, u8* data, u8 len);
+
+extern int tuner_select(HANDLE hDevice, u32 product, u32 band);
+extern int tuner_set_freq(HANDLE hDevice, u32 freq);
+extern int tuner_get_rssi(HANDLE hDevice, s32 *rssi);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif		// __FCI_TUN_H__
diff -urN caf/drivers/char/dmb_fci/fci_types.h for-diff/drivers/char/dmb_fci/fci_types.h
--- caf/drivers/char/dmb_fci/fci_types.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fci_types.h	2015-10-08 21:23:59.484842000 +0900
@@ -0,0 +1,63 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : fci_types.h
+ 
+ Description : 
+ 
+ History : 
+ ----------------------------------------------------------------------
+ 2009/08/31 	jason		initial
+*******************************************************************************/
+
+#ifndef __FCI_TYPES_H__
+#define __FCI_TYPES_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#ifndef HANDLE
+typedef void 		*HANDLE;
+#endif
+
+#define s8		char
+#define s16		short int
+#define s32		int
+
+#define u8		unsigned char
+#define u16 		unsigned short
+#define u32		unsigned int
+#define TRUE		1	
+#define	FALSE		0
+
+#ifndef NULL
+#define NULL		0
+#endif
+
+#define BBM_OK		0
+#define BBM_NOK 	1
+
+#define BBM_E_FAIL              0x00000001
+#define BBM_E_HOSTIF_SELECT     0x00000002
+#define BBM_E_HOSTIF_INIT       0x00000003
+#define BBM_E_BB_REG_WRITE      0x00000100
+#define BBM_E_BB_REG_READ       0x00000101
+#define BBM_E_TN_REG_WRITE      0x00000200
+#define BBM_E_TN_REG_READ       0x00000201
+#define BBM_E_TN_CTRL_SELECT    0x00000202
+#define BBM_E_TN_CTRL_INIT      0x00000203
+#define BBM_E_TN_SELECT         0x00000204
+#define BBM_E_TN_INIT           0x00000205
+#define BBM_E_TN_RSSI           0x00000206
+#define BBM_E_TN_SET_FREQ       0x00000207
+#define BBM_E_MUX_SYNC          0x00010000
+#define BBM_E_MUX_DATA_MASK     0x00010001
+#define BBM_E_MUX_SUBCHANNEL    0x00010002
+#define BBM_E_MUX_INDICATOR     0x00010003
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __FCI_TYPES_H__ */
diff -urN caf/drivers/char/dmb_fci/fic.c for-diff/drivers/char/dmb_fci/fic.c
--- caf/drivers/char/dmb_fci/fic.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fic.c	2015-10-08 21:23:38.580842000 +0900
@@ -0,0 +1,55 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : FIC.c
+ 
+ Description : FIC Wrapper
+ 
+ History : 
+ ----------------------------------------------------------------------
+*******************************************************************************/
+#include "fic.h"
+
+int FIC_DEC_Put(Fic *pFic, u16 length) {
+	return fic_decoder(pFic, length);
+}
+
+esbInfo_t* FIC_DEC_GetEsbInfo(u32 freq) {
+	return GetEsbInfo();
+}
+
+subChInfo_t* FIC_DEC_GetSubChInfo(u8 subChId) {
+	return GetSubChInfo(subChId);
+}
+
+svcInfo_t* FIC_DEC_GetSvcInfo(u32 SId) {
+	return GetSvcInfo(SId);
+}
+
+scInfo_t* FIC_DEC_GetScInfo(u16 SCId) {
+	return GetScInfo(SCId);
+}
+
+svcInfo_t* FIC_DEC_GetSvcInfoList(u8 SvcIdx) {
+	return GetSvcInfoList(SvcIdx);
+}
+
+void FIC_DEC_SubChannelOrganizationPrn(int subChId) {
+	SubChannelOrganizationPrn(subChId);
+}
+
+int FIC_DEC_SubChOrgan2DidpReg(subChInfo_t *pSubChInfo, didpInfo_t *pDidp) {
+	return SubChOrgan2DidpReg(pSubChInfo, pDidp);
+}
+
+int FIC_DEC_FoundAllLabels(void) {
+	if(FoundAllLabels()) 
+		return 1;
+	return 0;
+}
+
+int FIC_DEC_SubChInfoClean(void) {
+	SubChannelOrganizationClean();
+	return 0;
+}
+
diff -urN caf/drivers/char/dmb_fci/fic.h for-diff/drivers/char/dmb_fci/fic.h
--- caf/drivers/char/dmb_fci/fic.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/fic.h	2015-10-08 21:23:59.580842000 +0900
@@ -0,0 +1,27 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : FIC.h
+ 
+ Description : FIC Wrapper
+ 
+ History : 
+ ----------------------------------------------------------------------
+*******************************************************************************/
+#ifndef __FIC_H__
+#define __FIC_H__
+
+#include "ficdecoder.h"
+
+int          FIC_DEC_Put(Fic *pFic, u16 length);
+esbInfo_t*   FIC_DEC_GetEsbInfo(u32 freq);
+subChInfo_t* FIC_DEC_GetSubChInfo(u8 subChId);
+svcInfo_t*   FIC_DEC_GetSvcInfo(u32 SId);
+scInfo_t*    FIC_DEC_GetScInfo(u16 SCId);
+svcInfo_t*   FIC_DEC_GetSvcInfoList(u8 SvcIdx);
+void         FIC_DEC_SubChannelOrganizationPrn(int subChId);
+int          FIC_DEC_FoundAllLabels(void);
+int          FIC_DEC_SubChInfoClean(void);
+int          FIC_DEC_SubChOrgan2DidpReg(subChInfo_t *pSubChInfo, didpInfo_t *pDidp);
+
+#endif // __FIC_H__
diff -urN caf/drivers/char/dmb_fci/ficdecoder.c for-diff/drivers/char/dmb_fci/ficdecoder.c
--- caf/drivers/char/dmb_fci/ficdecoder.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/ficdecoder.c	2015-10-08 21:23:38.628842000 +0900
@@ -0,0 +1,1693 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : ficdecoder.c
+ 
+ Description : fic parser
+ 
+ History : 
+ ----------------------------------------------------------------------
+*******************************************************************************/
+#include <linux/string.h>
+#include <linux/delay.h>
+
+#include "ficdecoder.h"
+#include "fci_oal.h"
+//#include <string.h>
+
+#include "fci_msg.h"
+
+#define MSB(X) 				(((X) >>8) & 0Xff)
+#define LSB(X)  			((X) & 0Xff)
+#define BYTESWAP(X) 			((LSB(X)<<8) | MSB(X))
+
+esbInfo_t gEsbInfo[MAX_ESB_NUM];
+svcInfo_t gSvcInfo[MAX_SVC_NUM];
+scInfo_t gScInfo[MAX_SC_NUM];
+subChInfo_t subChInfo[MAX_SUBCH_NUM];
+didpInfo_t didpInfo[MAX_DIDP_NUM];
+
+static int fig0_decoder(Fig *pFig);
+static int fig1_decoder(Fig *pFig);
+
+static int fig0_ext1_decoder(u8 cn,u8 *fibBuffer, int figLength);
+static int fig0_ext2_decoder(u8 *fibBuffer, int figLength, int pd);
+static int fig0_ext3_decoder(u8 *fibBuffer, int figLength);
+//static int fig0_ext4_decoder(u8 *fibBuffer, int figLength); // Add
+static int fig0_ext10_decoder(u8 *fibBuffer, int figLength);
+static int fig0_ext13_decoder(u8 *fibBuffer, int figLength, int pd);
+static int fig0_ext14_decoder(u8 *fibBuffer, int figLength); // Add
+static int fig0_ext15_decoder(u8 *fibBuffer, int figLength, int pd);
+static int fig0_ext18_decoder(u8 *fibBuffer, int figLength);
+static int fig1_ext0_decoder(u8 *fibBuffer, int figLength);
+static int fig1_ext5_decoder(u8 *fibBuffer, int figLength);
+static int fig1_ext1_decoder(u8 *fibBuffer, int figLength);
+static int fig1_ext4_decoder(u8 *fibBuffer, int figLength);
+
+int SubChOrgan2DidpReg(subChInfo_t *pSubChInfo, didpInfo_t *pDidp);
+
+
+const u16 BitRateProfile[64][3] = {  //CU  PL  Bit Rates
+	 { 16, 5,  32},  { 21, 4,  32},  { 24, 3,  32},  { 29, 2,  32},  { 35, 1,  32},  
+	 { 24, 5,  48},  { 29, 4,  48},  { 35, 3,  48},  { 42, 2,  48},  { 52, 1,  48},  
+	 { 29, 5,  56},  { 35, 4,  56},  { 42, 3,  56},  { 52, 2,  56},  { 32, 5,  64},  
+	 { 42, 4,  64},  { 48, 3,  64},  { 58, 2,  64},  { 70, 1,  64},  { 40, 5,  80},  
+	 { 52, 4,  80},  { 58, 3,  80},  { 70, 2,  80},  { 84, 1,  80},  { 48, 5,  96},  
+	 { 58, 4,  96},  { 70, 3,  96},  { 84, 2,  96},  {104, 1,  96},  { 58, 5, 112}, 
+	 { 70, 4, 112},  { 84, 3, 112},  {104, 2, 112},  { 64, 5, 128},  { 84, 4, 128}, 
+	 { 96, 3, 128},  {116, 2, 128},  {140, 1, 128},  { 80, 5, 160},  {104, 4, 160}, 
+	 {116, 3, 160},  {140, 2, 160},  {168, 1, 160},  { 96, 5, 192},  {116, 4, 192}, 
+	 {140, 3, 192},  {168, 2, 192},  {208, 1, 192},  {116, 5, 224},  {140, 4, 224}, 
+	 {168, 3, 224},  {208, 2, 224},  {232, 1, 224},  {128, 5, 256},  {168, 4, 256}, 
+	 {192, 3, 256},  {232, 2, 256},  {280, 1, 256},  {160, 5, 320},  {208, 4, 320}, 
+	 {280, 2, 320},  {192, 5, 384},  {280, 3, 384},  {416, 1, 384}
+};
+
+const u16 UEPProfile[14][5][9] = {	// L1  L2  L3  L4 PI1 PI2 PI3 PI4 pad 
+	// 32kbps
+	{
+		{  3,  5, 13,  3, 24, 17, 12, 17, 4},
+		{  3,  4, 14,  3, 22, 13,  8, 13, 0},
+		{  3,  4, 14,  3, 15,  9,  6,  8, 0},	// 4 -> 3
+		{  3,  3, 18,  0, 11,  6,  5,  0, 0},
+		{  3,  4, 17,  0,  5,  3,  2,  0, 0}	// 4 -> 3
+	},
+
+	// 48kbps
+	{
+		{  3,  5, 25,  3, 24, 18, 13, 18, 0},
+		{  3,  4, 26,  3, 24, 14,  8, 15, 0},
+		{  3,  4, 26,  3, 15, 10,  6,  9, 4},
+		{  3,  4, 26,  3,  9,  6,  4,  6, 0},
+		{  4,  3, 26,  3,  5,  4,  2,  3, 0}	// 10
+	},
+
+	// 56kbps
+	{
+		{  0,  0,  0,  0,  0,  0,  0,  0, 0},	// not use
+		{  6, 10, 23,  3, 23, 13,  8, 13, 8},
+		{  6, 12, 21,  3, 16,  7,  6,  9, 0},
+		{  6, 10, 23,  3,  9,  6,  4,  5, 0},
+		{  6, 10, 23,  3,  5,  4,  2,  3, 0}	// 15
+	},
+
+	// 64kbps
+	{
+		{  6, 11, 28,  3, 24, 18, 12, 18, 4},
+		{  6, 10, 29,  3, 23, 13,  8, 13, 8},	// 3 -> 13
+		{  6, 12, 27,  3, 16,  8,  6,  9, 0},
+		{  6,  9, 33,  0, 11,  6,  5,  0, 0},
+		{  6,  9, 31,  2,  5,  3,  2,  3, 0}	// 20
+	},
+
+	// 80kbps
+	{
+		{  6, 10, 41,  3, 24, 17, 12, 18, 4},
+		{  6, 10, 41,  3, 23, 13,  8, 13, 8},	// 4 -> 3
+		{  6, 11, 40,  3, 16,  8,  6,  7, 0},
+		{  6, 10, 41,  3, 11,  6,  5,  6, 0},
+		{  6, 10, 41,  3,  6,  3,  2,  3, 0}	// 25
+	},
+
+	// 96kbps
+	{
+		{  6, 13, 50,  3, 24, 18, 13, 19, 0},
+		{  6, 10, 53,  3, 22, 12,  9, 12, 0},
+		{  6, 12, 51,  3, 16,  9,  6, 10, 4},
+		{  7, 10, 52,  3,  9,  6,  4,  6, 0},
+		{  7,  9, 53,  3,  5,  4,  2,  4, 0}	// 30
+	},
+
+	// 112kbps
+	{
+		{  0,  0,  0,  0,  0,  0,  0,  0, 0},	// not use
+		{ 11, 21, 49,  3, 23, 12,  9, 14, 4},
+		{ 11, 23, 47,  3, 16,  8,  6,  9, 0},
+		{ 11, 21, 49,  3,  9,  6,  4,  8, 0},
+		{ 14, 17, 50,  3,  5,  4,  2,  5, 0}	// 35
+	},
+
+	// 128kbps
+	{
+		{ 11, 20, 62,  3, 24, 17, 13, 19, 8},
+		{ 11, 21, 61,  3, 22, 12,  9, 14, 0},
+		{ 11, 22, 60,  3, 16,  9,  6, 10, 4},
+		{ 11, 21, 61,  3, 11,  6,  5,  7, 0},
+		{ 12, 19, 62,  3,  5,  3,  2,  4, 0}	// 40
+	},
+
+	// 160kbps
+	{
+		{ 11, 22, 84,  3, 24, 18, 12, 19, 0},
+		{ 11, 21, 85,  3, 22, 11,  9, 13, 0},
+		{ 11, 24, 82,  3, 16,  8,  6, 11, 0},
+		{ 11, 23, 83,  3, 11,  6,  5,  9, 0},
+		{ 11, 19, 87,  3,  5,  4,  2,  4, 0}	// 45
+	},
+
+	// 192kbps
+	{
+		{ 11, 21,109,  3, 24, 20, 13, 24, 0},
+		{ 11, 20,110,  3, 22, 13,  9, 13, 8},
+		{ 11, 24,106,  3, 16, 10,  6, 11, 0},
+		{ 11, 22,108,  3, 10,  6,  4,  9, 0},
+		{ 11, 20,110,  3,  6,  4,  2,  5, 0}	// 50
+	},
+
+	// 224kbps
+	{
+		{ 11, 24,130,  3, 24, 20, 12, 20, 4},
+		{ 11, 22,132,  3, 24, 16, 10, 15, 0},
+		{ 11, 20,134,  3, 16, 10,  7,  9, 0},
+		{ 12, 26,127,  3, 12,  8,  4, 11, 0},
+		{ 12, 22,131,  3,  8,  6,  2,  6, 4}	// 55
+	},
+
+	// 256kbps
+	{
+		{ 11, 26,152,  3, 24, 19, 14, 18, 4},
+		{ 11, 22,156,  3, 24, 14, 10, 13, 8},
+		{ 11, 27,151,  3, 16, 10,  7, 10, 0},
+		{ 11, 24,154,  3, 12,  9,  5, 10, 4},
+		{ 11, 24,154,  3,  6,  5,  2,  5, 0}	// 60
+	},
+
+	// 320kbps
+	{
+		{  0,  0,  0,  0,  0,  0,  0,  0, 0},	// not use
+		{ 11, 26,200,  3, 24, 17,  9, 17, 0},
+		{  0,  0,  0,  0,  0,  0,  0,  0, 0},	// not use
+		{ 11, 25,201,  3, 13,  9,  5, 10, 8},
+		{ 11, 26,200,  3,  8,  5,  2,  6, 4}	// 65
+	},
+
+	// 384kbps
+	{
+		{ 12, 28,245,  3, 24, 20, 14, 23, 8},
+		{  0,  0,  0,  0,  0,  0,  0,  0, 0},	// not use
+		{ 11, 24,250,  3, 16,  9,  7, 10, 4},
+		{  0,  0,  0,  0,  0,  0,  0,  0, 0},	// not use
+		{ 11, 27,247,  3,  8,  6,  2,  7, 0}	// 70
+	}
+};
+
+int crc_good_cnt = 0;
+int crc_bad_cnt = 0;
+int fic_nice_cnt = 0;
+
+int announcement = 0;
+
+void DidpPrn(didpInfo_t *pDidp);
+void SubChannelOrganizationPrn(int subChId);
+int dummy_decoder(u8 *fibBuffer, int figLength);
+int FoundAllLabels(void);
+
+int bbm_recfg_flag = 0;
+
+esbInfo_t *GetEsbInfo(void)
+{
+	return &gEsbInfo[0];
+}
+
+subChInfo_t *GetSubChInfo(u8 subChId) 
+{
+	subChInfo_t *pSubChInfo;
+	int i;
+
+	for(i=0; i<MAX_SUBCH_NUM; i++) {
+		pSubChInfo = &subChInfo[i];
+		if((pSubChInfo->flag != 0) && (pSubChInfo->subChId == subChId))
+			break;
+	}
+
+	if(i == MAX_SUBCH_NUM) {
+		for(i=0; i<MAX_SUBCH_NUM; i++) {
+			pSubChInfo = &subChInfo[i];
+			if(pSubChInfo->flag == 0)
+				break;
+		}
+		if(i == MAX_SUBCH_NUM)
+			return NULL;
+	}
+
+	return pSubChInfo;		
+}
+
+svcInfo_t *GetSvcInfoList(u8 SvcIdx)
+{
+	return &gSvcInfo[SvcIdx];
+}
+
+svcInfo_t *GetSvcInfo(u32 SId)
+{
+	svcInfo_t *pSvcInfo;
+	int i;
+
+	for(i=0; i<MAX_SVC_NUM; i++) {
+		pSvcInfo = &gSvcInfo[i];
+		if ((pSvcInfo->flag != 0) && (SId == pSvcInfo->SId))
+			break;
+	}
+
+	if(i == MAX_SVC_NUM) {
+		for(i=0; i<MAX_SVC_NUM; i++) {
+			pSvcInfo = &gSvcInfo[i];
+			if(pSvcInfo->flag == 0) {
+				pSvcInfo->SId = SId;
+				break;
+			}
+		}
+		if(i == MAX_SVC_NUM)
+			return NULL;
+	}
+
+	return pSvcInfo;
+}
+
+scInfo_t *GetScInfo(u16	SCId)
+{
+	scInfo_t  *pScInfo;
+	int i;
+
+	for(i=0; i<MAX_SC_NUM; i++) { 
+		pScInfo = &gScInfo[i];
+		if((pScInfo->flag == 99) && (pScInfo->SCId == SCId)) {
+			//pScInfo->SCId = 0xffff;
+			break;
+		}
+	}
+	if(i == MAX_SVC_NUM) {
+		for(i=0; i<MAX_SVC_NUM; i++) {
+			pScInfo = &gScInfo[i];
+			if(pScInfo->flag == 0) {
+				break;
+			}
+		}
+		if(i == MAX_SC_NUM) 
+			return NULL;
+	}
+
+	return pScInfo;
+}
+
+static unsigned short crc16(unsigned char *fibBuffer, int len)
+{
+	int i, j, k;
+	unsigned int sta, din;
+	unsigned int crc_tmp=0x0; 
+	int crc_buf[16];
+	int crc_coff[16] = {		// CRC16 CCITT REVERSED
+		0, 0, 0, 0, 	// 0x0
+		1, 0, 0, 0, 	// 0x8
+		0, 0, 0, 1, 	// 0x1
+		0, 0, 0, 1	// 0x1
+	};
+
+	for(j=0; j<16; j++) 
+		crc_buf[j] = 0x1;
+
+	for(i=0; i<len; i++)
+	{
+		sta = fibBuffer[i] & 0xff;
+
+		for(k=7; k>=0; k--)
+		{
+			din = ((sta >> k) & 0x1) ^ (crc_buf[15] & 0x1);
+
+			for(j=15; j>0; j--) 
+				crc_buf[j] = (crc_buf[j-1] & 0x1) ^ ((crc_coff[j-1] * din) & 0x1);
+
+			crc_buf[0] = din;
+		}
+	}
+
+	crc_tmp = 0;
+	for(j=15; j>=0; j--) 
+		crc_tmp = (crc_tmp << 1) | (crc_buf[j] & 0x1);
+
+	return ~crc_tmp & 0xffff;	
+}
+
+int fic_crc_ctrl = 1;		// fic crc check enable
+
+int fic_decoder(Fic *pFic, u16 length)
+{
+	Fib 	*pFib;
+	int 	result = 0;
+	int	i;
+	u16	bufferCnt;
+
+	bufferCnt = length;
+
+	if(bufferCnt % 32) {
+		//PRINTF(NULL, "FIC BUFFER LENGTH ERROR %d\n", bufferCnt);
+		return 1;
+	}
+
+	for(i=0; i<bufferCnt/32; i++) {
+		pFib = &pFic->fib[i];
+		if(fic_crc_ctrl) {
+			if(crc16(pFib->data,30) == BYTESWAP(pFib->crc)) {
+				crc_good_cnt++;
+				result = fib_decoder(pFib);
+			} else {
+				crc_bad_cnt++;
+				//PRINTF(NULL, "CRC ERROR: FIB %d\n", i);
+			}
+		} else {
+			result = fib_decoder(pFib);
+			crc_good_cnt++;
+		}
+	}
+
+	return result;
+}
+
+int fib_decoder(Fib *pFib)
+{
+	Fig  *pFig;
+	int  type, length;
+	int  fib_ptr = 0;
+	int  result = 0;
+
+	while (fib_ptr < 30) {
+		pFig = (Fig *)&pFib->data[fib_ptr];
+
+		type = (pFig->head >> 5) & 0x7;
+		length = pFig->head & 0x1f;
+
+		if(pFig->head == 0xff || !length) {	 // end mark
+			break;
+		}
+
+		fic_nice_cnt++;
+
+		switch(type)
+		{
+			case 0: 
+				result = fig0_decoder(pFig);		// MCI & SI
+				break;			
+			case 1: 
+				result = fig1_decoder(pFig);		// SI
+				if(result) {
+					//PRINTF(NULL, "SI Error [%x]\n", result);
+				}
+				break;
+			case 5: 
+				//result = fig5_decoder(pFig);		// FIDC
+				break;
+			case 6: 
+				//result = fig6_decoder(pFig);		// CA
+				break;
+			default: 
+				//PRINTF(NULL, "FIG 0x%X Length : 0x%X 0x%X\n", type, length, fib_ptr);
+				result = 1;
+				break;
+		}
+
+		fib_ptr += length + 1;
+	}
+
+	return result;
+}
+
+/*
+ * MCI & SI 
+ */
+static int fig0_decoder(Fig *pFig)
+{
+	int result = 0;
+	int extension,length, pd;
+	u8  cn;
+
+	length = pFig->head & 0x1f;
+	cn = (pFig->data[0] & 0x80) >> 7;
+	if ((bbm_recfg_flag == 1) && (cn == 0)) 
+			return 0;
+	//if(cn) 
+	//	PRINTF(NULL, "N");
+
+	extension = pFig->data[0] & 0x1F;
+	pd = (pFig->data[0] & 0x20) >> 5;
+
+	switch (extension) {
+		case 1:
+			result = fig0_ext1_decoder(cn, &pFig->data[1], length);
+			break;
+		case 2:
+			result = fig0_ext2_decoder(&pFig->data[1], length, pd);
+			break;
+		case 3:		// Service component in packet mode or without CA
+			result = fig0_ext3_decoder(&pFig->data[1], length);
+			break;
+		case 4:		// Service component with CA
+			//result = fig0_ext4_decoder(&pFig->data[1], length);
+			break;
+		case 10:	// Date & Time
+			result = fig0_ext10_decoder(&pFig->data[1], length-1);
+			break;
+		case 13:
+			result = fig0_ext13_decoder(&pFig->data[1], length, pd);
+			break;
+		case 14:    // FEC
+			result = fig0_ext14_decoder(&pFig->data[1], length);
+			break;
+		case 15:
+			result = fig0_ext15_decoder(&pFig->data[1], length, pd);
+			break;
+		case 0:		// Ensembel Information
+		case 5:		// Language
+		case 8:		// Service component global definition
+		case 9:		// Country LTO and International table
+		case 17:	// Programme Type
+			result = dummy_decoder(&pFig->data[1], length);
+			break;
+		case 18:	// Announcements
+			if(announcement)
+				result = fig0_ext18_decoder(&pFig->data[1], length);
+			break;
+		case 19:	// Announcements switching
+			//PRINTF(NULL, "FIG 0x%X/0x%X Length : 0x%X\n", 0, extension, length);
+			break;
+		default:
+			//PRINTF(NULL, "FIG 0x%X/0x%X Length : 0x%X\n", 0, extension, length);
+			result = 1;
+			break;
+	}
+
+	return result;
+}
+
+static int fig1_decoder(Fig *pFig)
+{
+	int result = 0;
+	int length;
+	int /*charset, oe,*/ extension;
+
+	length = pFig->head & 0x1f;
+	//charset = (pFig->data[0] >> 4) & 0xF;
+	//oe = (pFig->data[0]) >> 3 & 0x1;
+	extension = pFig->data[0] & 0x7;
+
+	switch (extension) {
+		case 0:
+			result = fig1_ext0_decoder(&pFig->data[1],length);	// Ensembel Label
+			break;
+		case 1:
+			result = fig1_ext1_decoder(&pFig->data[1],length);	// Programme service Label
+			break;
+		case 5:
+			result = fig1_ext5_decoder(&pFig->data[1],length);	// Data service Label
+			break;
+		case 4:
+			result = fig1_ext4_decoder(&pFig->data[1],length);	// Service component Label
+			break;
+		default:
+			//PRINTF(NULL, "FIG 0x%X/0x%X Length : 0x%X\n", 1, extension, length);
+			result = 1;
+			break;
+	}
+
+	return result;
+}
+
+int dummy_decoder(u8 *fibBuffer, int figLength)
+{
+	return 0;
+}
+
+/*
+ *  FIG 0/1 MCI, Sub Channel Organization 
+ */
+int fig0_ext1_decoder(u8 cn,u8 *fibBuffer, int figLength)
+{
+	u8	sta;
+	int 	result = 0;
+	int	readcnt = 0;
+
+	u8 	subChId;
+	subChInfo_t	*pSubChInfo;
+
+	while(figLength-1 > readcnt) {
+		sta = fibBuffer[readcnt++];
+		if(sta == 0xFF)
+			break;
+		subChId = (sta >> 2) & 0x3F;
+		pSubChInfo = GetSubChInfo(subChId);
+		if(pSubChInfo == NULL) {
+			//PRINTF(NULL, "subChInfo error ..\n");
+			return 1;
+		}
+
+		pSubChInfo->flag = 99;
+		pSubChInfo->mode = 0; 		// T-DMB
+		pSubChInfo->subChId = subChId;
+
+		pSubChInfo->startAddress = ( sta & 0x3) << 8;
+		sta = fibBuffer[readcnt++];
+		pSubChInfo->startAddress |= sta;
+		sta = fibBuffer[readcnt++];
+		pSubChInfo->formType = (sta & 0x80) >> 7;
+
+		switch (pSubChInfo->formType) {
+			case	0:	// short form
+				pSubChInfo->tableSwitch = (sta & 0x40) >> 6; 
+				pSubChInfo->tableIndex = sta & 0x3f;
+				break;
+			case	1:	// long form
+				pSubChInfo->option = (sta & 0x70) >> 4; 
+				pSubChInfo->protectLevel = (sta & 0x0c) >> 2;
+				pSubChInfo->subChSize = (sta & 0x03) << 8;
+				sta = fibBuffer[readcnt++];
+				pSubChInfo->subChSize |= sta;
+				break;
+			default:
+				//PRINTF(NULL, "Unknown Form Type %d\n", pSubChInfo->formType);
+				result = 1;
+				break;
+		}
+		if(cn) {
+			if(pSubChInfo->reCfg == 0) {
+				pSubChInfo->reCfg = 1;		// ReConfig Info Updated
+			}
+		}
+	}
+       
+	return result;
+}
+
+/*
+ *  FIG 0/2 MCI, Sub Channel Organization 
+ */
+static int fig0_ext2_decoder(u8 *fibBuffer, int figLength, int pd)
+{
+	svcInfo_t *pSvcInfo;
+	subChInfo_t	*pSubChInfo;
+	u8	sta;
+	int 	result = 0;
+	int	readcnt = 0;
+	u32	SId = 0xffffffff;
+	int  	nscps;
+	u32	temp;
+	int 	TMId;
+	int	i;
+
+	while(figLength-1 > readcnt) {
+		temp = 0;
+
+		temp = fibBuffer[readcnt++];
+		temp = (temp << 8) | fibBuffer[readcnt++];
+
+
+		switch (pd) {
+			case 0:		// 16-bit SId, used for programme services
+				{
+					temp = temp;
+					//SId = temp & 0xFFF;
+					SId = temp;
+				}
+				break;
+			case 1:		//32bit SId, used for data service
+				{
+					temp = (temp << 8) | fibBuffer[readcnt++];
+					temp = (temp << 8) | fibBuffer[readcnt++];
+
+					//SId = temp & 0xFFFFF;
+					SId = temp;
+				}
+				break;
+			default:
+				break;
+		}
+
+		pSvcInfo = GetSvcInfo(SId);
+		if(pSvcInfo == NULL) {
+			//PRINTF(NULL, "GetSvcInfo Error ...\n");
+			break;
+		}
+	
+		pSvcInfo->addrType = pd;
+		pSvcInfo->SId = SId;
+		pSvcInfo->flag |= 0x02;
+
+		sta = fibBuffer[readcnt++];    // flag, CAId, nscps 
+
+		nscps = sta & 0xF;
+
+		pSvcInfo->nscps = nscps;
+
+		for(i=0; i<nscps; i++) {
+			sta = fibBuffer[readcnt++];
+			TMId = (sta >> 6) & 0x3;
+			//pSvcInfo->TMId = TMId;
+
+			switch(TMId) {
+				case 0:		// MSC stream audio
+					pSvcInfo->ASCTy = sta & 0x3f;
+					sta = fibBuffer[readcnt++];
+					if ((sta & 0x02) == 0x02) {		// Primary
+						pSvcInfo->SubChId = (sta >> 2) & 0x3F;
+						pSvcInfo->TMId = TMId;
+					}
+					pSubChInfo = GetSubChInfo(pSvcInfo->SubChId);
+					if(pSubChInfo == NULL) {
+						//PRINTF(NULL, "GetSubChInfo Error ...\n");
+						return 1;
+					}
+					pSubChInfo->SId = pSvcInfo->SId;
+					pSvcInfo->flag |= 0x04;
+					break;
+				case 1:		// MSC stream data
+					pSvcInfo->DSCTy = sta & 0x3f;
+					sta = fibBuffer[readcnt++];
+					if ((sta & 0x02) == 0x02) {		// Primary
+						pSvcInfo->SubChId = (sta >> 2) & 0x3F;
+						pSvcInfo->TMId = TMId;
+					}
+					pSubChInfo = GetSubChInfo(pSvcInfo->SubChId);
+					if(pSubChInfo == NULL) {
+						//PRINTF(NULL, "GetSubChInfo Error ...\n");
+						return 1;
+					}
+					pSubChInfo->SId = pSvcInfo->SId;
+					pSvcInfo->flag |= 0x04;
+					break;
+				case 2:		// FIDC
+					pSvcInfo->DSCTy = sta & 0x3f;
+					sta = fibBuffer[readcnt++];
+					if ((sta & 0x02) == 0x02) {		// Primary
+						pSvcInfo->FIDCId = (sta & 0xFC) >> 2;
+						pSvcInfo->TMId = TMId;
+					}
+					pSvcInfo->flag |= 0x04;
+					break;
+				case 3:		// MSC packet data
+					pSvcInfo->SCId = (sta & 0x3F) << 6;
+					sta = fibBuffer[readcnt++];
+					if ((sta & 0x02) == 0x02) { 		// Primary
+						pSvcInfo->SCId |= (sta & 0xFC) >> 2;
+						pSvcInfo->TMId = TMId;
+					}
+					// by iproda
+					pSvcInfo->flag |= 0x04;
+					break;
+				default:
+					//PRINTF(NULL, "Unkown TMId [%X]\n", TMId);
+					result = 1;
+					break;
+			}
+		}
+	}
+
+	return result;
+}
+
+int fig0_ext3_decoder(u8 *fibBuffer, int figLength)
+{
+	u8	sta;
+	int 	result = 0;
+	int	readcnt = 0;
+	u16	SCId;
+	int i;
+
+	scInfo_t	*pScInfo;
+	svcInfo_t 	*pSvcInfo;
+	subChInfo_t 	*pSubChInfo;
+
+	while(figLength-1 > readcnt) {
+		SCId = 0;
+		sta = fibBuffer[readcnt++];
+		SCId = sta;
+		SCId = SCId << 4;
+		sta = fibBuffer[readcnt++];
+		SCId |= (sta & 0xf0) >> 4;
+
+		pScInfo = GetScInfo(SCId);
+		if(pScInfo == NULL) {
+			//PRINTF(NULL, "GetScInfo Error ...\n");
+			return 1;
+		}
+
+		pScInfo->flag = 99;
+		pScInfo->SCId = SCId;
+		pScInfo->SCCAFlag = sta & 0x1;
+		sta = fibBuffer[readcnt++];
+		pScInfo->DGFlag = (sta & 0x80) >> 7;
+		pScInfo->DSCTy = (sta & 0x3f);
+		sta = fibBuffer[readcnt++];
+		pScInfo->SubChId = (sta & 0xfc) >> 2;
+		pScInfo->PacketAddress = sta & 0x3;
+		pScInfo->PacketAddress = pScInfo->PacketAddress << 8;
+		sta = fibBuffer[readcnt++];
+		pScInfo->PacketAddress |= sta;
+		if(pScInfo->SCCAFlag) {
+			sta = fibBuffer[readcnt++];
+			pScInfo->SCCA = sta;
+			pScInfo->SCCA = pScInfo->SCCA << 8;
+			sta = fibBuffer[readcnt++];
+			pScInfo->SCCA |= sta;
+		}
+
+		for(i=0; i<MAX_SVC_NUM; i++) {
+			pSvcInfo = &gSvcInfo[i];
+			if(pSvcInfo->SCId == pScInfo->SCId && pSvcInfo->TMId == 3) {
+				pSubChInfo = GetSubChInfo(pScInfo->SubChId);
+				if(pSubChInfo == NULL) {
+					//PRINTF(NULL, "GetSubChInfo Error ...\n");
+					return 1;
+				}
+
+				pSubChInfo->SId = pSvcInfo->SId;
+				pSvcInfo->SubChId = pSubChInfo->subChId;
+			}
+		}
+	}
+       
+	return result;
+}
+
+/*int fig0_ext4_decoder(u8 *fibBuffer, int figLength) {
+	int result = 0;
+	int readcnt = 0;
+	int Mf, SubChId, CAOrg;
+
+	while(figLength - 1 > readcnt) {
+		Mf      = (fibBuffer[readcnt] & 0x40) >> 6;
+		SubChId = (fibBuffer[readcnt] & 0x3f);
+		CAOrg   = (fibBuffer[readcnt + 1] << 8) + fibBuffer[readcnt + 2];
+		readcnt += 3;
+		//PRINTF(NULL, "CA MF: %d, SubChiD: %d, CAOrg: %d\n", Mf, SubChId, CAOrg);
+	}
+
+	return result;
+}*/
+
+/*
+ *  FIG 0/10 Date & Time
+ */
+int fig0_ext10_decoder(u8 *fibBuffer, int figLength)
+{
+	int result = 0;
+
+	u8 MJD,  /*ConfInd,*/ UTCflag;
+	//u16 LSI;
+	u8 hour = 0; /*minutes = 0, seconds = 0*/
+	u16 milliseconds = 0;
+
+	MJD = (fibBuffer[0] & 0x7f) << 10;
+	MJD |= (fibBuffer[1] << 2);
+	MJD |= (fibBuffer[2] & 0xc0) >> 6;
+	//LSI = (fibBuffer[2] & 0x20) >> 5;
+	//ConfInd = (fibBuffer[2] & 0x10) >> 4;
+	UTCflag = (fibBuffer[2] & 0x08) >> 3;
+
+	hour = (fibBuffer[2] & 0x07) << 2;
+	hour |= (fibBuffer[3] & 0xc0) >> 6;
+	
+	//minutes = fibBuffer[3] & 0x3f;
+
+	if(UTCflag) {
+		//seconds = (fibBuffer[4] & 0xfc) >> 2;
+		milliseconds = (fibBuffer[4] & 0x03) << 8;
+		milliseconds |= fibBuffer[5];
+	}
+
+	//PRINTF(NULL, " %d:%d:%d.%d\n", hour+9, minutes, seconds, milliseconds);
+
+	return result;
+}
+
+/*
+ *  FIG 0/13 Announcement
+ */
+int fig0_ext13_decoder(u8 *fibBuffer, int figLength, int pd)
+{
+	u8	sta;
+	int 	result = 0;
+	int	readcnt = 0;
+	u32	SId = 0xffffffff;
+	u8	SCIdS;
+	u8	NumOfUAs;
+	u16	UAtype;
+	u8	UAlen;
+	int 	i,j;
+
+	svcInfo_t 	*pSvcInfo;
+
+#if 0
+	PRINTF(NULL, "FIG0/13 = 0x%X\n", figLength);
+
+	for(i=0; i<figLength; i++) {
+		PRINTF(NULL, "0x%X ", fibBuffer[i]);
+	}
+	PRINTF(NULL, "\n");
+#endif
+
+	while(figLength-1 > readcnt) {
+		switch (pd) {
+			case 0:		// 16-bit SId, used for programme services
+				{
+					u32 temp;
+
+					temp = 0;
+
+					temp = fibBuffer[readcnt++];
+					temp = (temp << 8) | fibBuffer[readcnt++];
+
+					SId = temp;
+				}
+				break;
+			case 1:		//32bit SId, used for data service
+				{
+					u32 temp;
+
+					temp = 0;
+
+					temp = fibBuffer[readcnt++];
+					temp = (temp << 8) | fibBuffer[readcnt++];
+					temp = (temp << 8) | fibBuffer[readcnt++];
+					temp = (temp << 8) | fibBuffer[readcnt++];
+
+					SId = temp;
+				}
+				break;
+			default:
+				break;
+		}
+
+		pSvcInfo = GetSvcInfo(SId);
+		if(pSvcInfo == NULL) {
+			//PRINTF(NULL, "GetSvcInfo Error ...\n");
+			break;
+		}
+		pSvcInfo->SId = SId;
+
+		pSvcInfo->flag |= 0x04;
+
+		sta = fibBuffer[readcnt++];
+
+		SCIdS = (sta & 0xff) >> 4;
+		NumOfUAs = sta & 0x0f;
+
+#if 1 // Because of Visual Radio
+		pSvcInfo->NumberofUserAppl = NumOfUAs;
+#endif
+
+		for(i=0; i<NumOfUAs; i++) {
+			UAtype = 0;
+			sta = fibBuffer[readcnt++];
+			UAtype = sta;
+			sta = fibBuffer[readcnt++];
+			UAtype = (UAtype << 3) | ((sta >> 5) & 0x07);
+
+#if 1 // Because of Visual Radio
+			UAlen = sta & 0x1f;
+
+			pSvcInfo->UserApplType[i] = UAtype;
+			pSvcInfo->UserApplLength[i] = UAlen;
+				
+			for(j=0; j<UAlen; j++) {
+				sta = fibBuffer[readcnt++];
+				pSvcInfo->UserApplData[i][j] = sta;
+			}
+#else
+			pSvcInfo->UAtype = UAtype;
+			UAlen = sta & 0x1f;
+
+			for(j=0; j<UAlen; j++) {
+				sta = fibBuffer[readcnt++];
+			}
+#endif
+		}
+#if 0
+		PRINTF(NULL, "SId = 0x%X\n", pSvcInfo->SId);
+		PRINTF(NULL, "UAtype = 0x%X\n", pSvcInfo->UAtype);
+		PRINTF(NULL, "NumOfUAs = 0x%X\n", NumOfUAs);
+		PRINTF(NULL, "UAlen = 0x%X\n", UAlen);
+#endif
+	}
+
+	return result;
+}
+
+int fig0_ext14_decoder(u8 *fibBuffer, int figLength) 
+{
+	int result = 0;
+	int	readcnt = 0;
+	unsigned char subch, fec_scheme;
+	subChInfo_t* pSubChInfo;
+
+	while(figLength-1 > readcnt) {
+		subch = (fibBuffer[readcnt] & 0xfc) >> 2;
+		fec_scheme = (fibBuffer[readcnt] & 0x03);
+		readcnt++;
+		// PRINTF(NULL, "SubChID: %d, FEC Scheme: %d\n", subch, fec_scheme);
+		pSubChInfo = GetSubChInfo(subch);
+		if(pSubChInfo)
+			pSubChInfo->fecScheme = fec_scheme;
+	}
+
+	return result;
+}
+
+ /*
+ * TMMB kjju TODO
+ */
+int fig0_ext15_decoder(u8 *fibBuffer, int figLength, int pd)
+{
+	u8	sta;
+	int 	result = 0;
+	int	readcnt = 0;
+	u8 subChId;
+	subChInfo_t 	*pSubChInfo;
+
+	while(figLength-1 > readcnt) {
+		sta = fibBuffer[readcnt++];
+		if(sta == 0xFF)
+			break;
+
+		subChId = (sta & 0xfc) >> 2;
+		pSubChInfo = GetSubChInfo(subChId);
+		if(pSubChInfo == NULL) {
+			//PRINTF(NULL, "subChInfo error ..\n");
+			return 1;
+		}
+
+		pSubChInfo->flag = 99;
+		pSubChInfo->mode = 1; 		// T-MMB
+		pSubChInfo->subChId = subChId;
+		pSubChInfo->startAddress = (sta & 0x3) << 8;
+
+		sta = fibBuffer[readcnt++];
+		pSubChInfo->startAddress |= sta;
+
+		pSubChInfo = GetSubChInfo(pSubChInfo->subChId);
+		if(pSubChInfo == NULL) {
+			//PRINTF(NULL, "subChInfo error ..\n");
+			return 1;
+		}
+
+		sta = fibBuffer[readcnt++];
+
+		pSubChInfo->modType = (sta & 0xc0) >> 6;
+		pSubChInfo->encType = (sta & 0x20) >> 5;
+		pSubChInfo->intvDepth = (sta & 0x18) >> 3;
+		pSubChInfo->pl = (sta & 0x04) >> 2;
+		pSubChInfo->subChSize = (sta & 0x03) << 8;
+
+		sta = fibBuffer[readcnt++];
+		pSubChInfo->subChSize |= sta;
+	}
+
+#if 0
+	PRINTF(NULL, "subChId = 0x%x\n", pSubChInfo->subChId);
+	PRINTF(NULL, "mode = 0x%x\n", pSubChInfo->mode);
+	PRINTF(NULL, "modType = 0x%x\n", pSubChInfo->modType);
+	PRINTF(NULL, "encType = 0x%x\n", pSubChInfo->encType);
+	PRINTF(NULL, "intvDepth = 0x%x\n", pSubChInfo->intvDepth);
+	PRINTF(NULL, "pl = 0x%x\n", pSubChInfo->pl);
+	PRINTF(NULL, "startAddress = 0x%x\n", pSubChInfo->startAddress);
+	PRINTF(NULL, "subChSize = 0x%x\n", pSubChInfo->subChSize);
+#endif
+
+	return result;
+}
+
+/*
+ *  FIG 0/18 Announcement
+ */
+int fig0_ext18_decoder(u8 *fibBuffer, int figLength)
+{
+	u8	sta;
+	int 	result = 0;
+	int	readcnt = 0;
+	u16	SId;
+	//u8	CId;
+	u16  	AsuFlag;
+	int  	nocs;
+	int	i;
+
+	while(figLength-1 > readcnt) {
+		sta = fibBuffer[readcnt++];
+		SId = sta << 8;
+		sta = fibBuffer[readcnt++];
+		SId |= sta;
+		//PRINTF(NULL, "SId = 0x%X, ", SId);
+		
+		sta = fibBuffer[readcnt++];
+		AsuFlag = sta << 8;
+		sta = fibBuffer[readcnt++];
+		AsuFlag |= sta;
+		//PRINTF(NULL, "AsuFlag = 0x%X, ", AsuFlag);
+
+		sta = fibBuffer[readcnt++];
+		nocs = sta & 0x1F;
+		//PRINTF(NULL, "nocs = 0x%X, ", nocs);
+
+		for(i=0; i<nocs; i++) {
+			sta = fibBuffer[readcnt++];
+			//CId = sta;
+			//PRINTF(NULL, "CId = %d, ", CId);
+		}
+		//PRINTF(NULL, "\n");
+	}
+
+	return result;
+}
+
+static int fig1_ext0_decoder(u8 *fibBuffer, int figLength)
+{
+	int 	result = 0;
+	int	readcnt = 0;
+	int  	i;
+
+	u16 EId;
+	u16 flag;
+	
+	EId = 0;
+	EId = fibBuffer[readcnt++];
+	EId = EId << 8 | fibBuffer[readcnt++];
+
+	for(i=0; i<16; i++) 
+	 	gEsbInfo[0].label[i] = fibBuffer[readcnt++];
+
+	flag = 0;
+	flag = fibBuffer[readcnt++];
+	flag = flag << 8 | fibBuffer[readcnt++];
+
+	gEsbInfo[0].label[16] = '\0';
+	gEsbInfo[0].flag = 99;
+	gEsbInfo[0].EId  = EId;
+	//PRINTF(DMB_FIC_INFO"FIG 1/0 label [%x][%s]\n", EId, gEsbInfo[0].label);
+
+#if 1	// test label filter
+	for(i = 16-1; i >= 0; i--)
+	{
+		if(gEsbInfo[0].label[i] == 0x20) 
+		{
+		    gEsbInfo[0].label[i] = 0;
+    }
+		else
+		{
+			if(i == 16-1) 
+				gEsbInfo[0].label[i] = 0;
+			break;
+    }			
+    
+  }    
+	DPRINTK("fig1_ext0_decoder ensemble label(%s) \r\n", gEsbInfo[0].label);
+#endif	
+
+	return result;
+}
+
+static int fig1_ext1_decoder(u8 *fibBuffer, int figLength)
+{
+	svcInfo_t *pSvcInfo;
+	u32	temp;
+	int 	result = 0;
+	int	readcnt = 0;
+	int 	i;
+
+	u16 SId;
+	
+	temp = 0;
+	temp = fibBuffer[readcnt++];
+	temp = temp << 8 | fibBuffer[readcnt++];
+
+	SId = temp;
+
+	pSvcInfo = GetSvcInfo(SId);
+	if(pSvcInfo == NULL) {
+		//PRINTF(NULL, "GetSvcInfo Error ...\n");
+		return 1;
+	}
+
+	pSvcInfo->SId = SId;
+
+	pSvcInfo->flag |= 0x01;
+
+	for(i=0; i<16; i++) {
+		pSvcInfo->label[i] = fibBuffer[readcnt++];
+	}
+
+	pSvcInfo->label[16] = '\0';
+	//PRINTF(NULL, "FIG 1/1 label [%x][%s]\n", SId, pSvcInfo->label);
+
+	return result;
+}
+
+static int fig1_ext4_decoder(u8 *fibBuffer, int figLength)
+{
+	scInfo_t  *pScInfo;
+	u8	sta;
+	u8	pd;
+	u32	temp;
+	int 	result = 0;
+	int	readcnt = 0;
+	int 	i;
+
+	u16 	SCId;
+	//u32		SId;
+	u16 	flag;
+	
+	sta = fibBuffer[readcnt++];
+
+	pd = (sta & 0x80) >> 7;
+	SCId = (sta &0x0f);
+
+	temp = 0;
+	temp = fibBuffer[readcnt++];
+	temp = temp << 8 | fibBuffer[readcnt++];
+
+	if(pd) {
+		temp = temp << 8 | fibBuffer[readcnt++];
+		temp = temp << 8 | fibBuffer[readcnt++];
+		//SId = temp;
+	} else {
+		//SId = temp;
+	}
+
+	pScInfo = GetScInfo(SCId);
+	if(pScInfo == NULL) {
+		//PRINTF(NULL, "GetSvcInfo Error ...\n");
+		return 1;
+	}
+
+	pScInfo->flag = 99;
+	pScInfo->SCId = SCId;
+
+	for(i=0; i<16; i++)
+		pScInfo->label[i] = fibBuffer[readcnt++];
+
+	flag = 0;
+	flag = fibBuffer[readcnt++];
+	flag = flag << 8 | fibBuffer[readcnt++];
+
+	pScInfo->label[16] = '\0';
+	//PRINTF(NULL, "FIG 1/4 label [%x][%s]\n", SId, pScInfo->label);
+
+	return result;
+}
+
+static int fig1_ext5_decoder(u8 *fibBuffer, int figLength)
+{
+	svcInfo_t *pSvcInfo;
+	u32	temp;
+	int 	result = 0;
+	int	readcnt = 0;
+	int 	i;
+
+	u32 SId;
+	u16 flag;
+	
+	temp = 0;
+	temp = fibBuffer[readcnt++];
+	temp = temp << 8 | fibBuffer[readcnt++];
+	temp = temp << 8 | fibBuffer[readcnt++];
+	temp = temp << 8 | fibBuffer[readcnt++];
+
+	SId = temp;
+
+	pSvcInfo = GetSvcInfo(SId);
+	if(pSvcInfo == NULL) {
+		//PRINTF(NULL, "GetSvcInfo Error ...\n");
+		return 1;
+	}
+
+	pSvcInfo->SId = SId;
+
+	pSvcInfo->flag |= 0x01;
+
+	for(i=0; i<16; i++)
+		pSvcInfo->label[i] = fibBuffer[readcnt++];
+
+	flag = 0;
+	flag = fibBuffer[readcnt++];
+	flag = flag << 8 | fibBuffer[readcnt++];
+
+	pSvcInfo->label[16] = '\0';
+
+#if 1	// test label filter
+	for(i = 16-1; i >= 0; i--)
+	{
+		if(pSvcInfo->label[i] == 0x20) 
+		{
+		    pSvcInfo->label[i] = 0;
+    }
+		else
+		{
+			if(i == 16-1) 
+				pSvcInfo->label[i] = 0;
+			break;
+    }			
+    
+  }    
+	DPRINTK("fig1_ext5_decoder service label(%s) \r\n", pSvcInfo->label);
+#endif	
+	//PRINTF(NULL, "FIG 1/5 label [%x][%s]\n", SId, pSvcInfo->label);
+
+	return result;
+}
+
+void SubChannelOrganizationPrn(int subChId)
+{
+	didpInfo_t  didp;
+	subChInfo_t *pSubChInfo;
+
+	memset(&didp, 0, sizeof(didp));
+
+	pSubChInfo = GetSubChInfo(subChId);
+	if(pSubChInfo == NULL)
+		return;
+
+	if(pSubChInfo->flag == 99) {
+		SubChOrgan2DidpReg(pSubChInfo, &didp);
+		//if(pSubChInfo->svcChId & 0x40)
+		//	PRINTF(NULL, "svcChId = 0x%X, ", pSubChInfo->svcChId & 0x3F);
+		//else
+		//	PRINTF(NULL, "svcChId = NOTUSE, ");
+
+		switch(pSubChInfo->reCfg)  {
+			case 0:
+				//PRINTF(NULL, "reCfg = INIT\n");
+				break;
+			case 1:
+				//PRINTF(NULL, "reCfg = UPDATED\n");
+				break;
+			case 2:
+				//PRINTF(NULL, "reCfg = DONE\n");
+				break;
+		}
+
+		//PRINTF(NULL, "SId = 0x%X\n", pSubChInfo->SId);
+		// DidpPrn(&didp);
+	}
+}
+
+void SubChannelOrganizationClean(void)
+{
+	int i;
+
+#if 1
+	memset(gEsbInfo, 0, sizeof(esbInfo_t) * MAX_ESB_NUM);
+	memset(gSvcInfo,0, sizeof(svcInfo_t) * MAX_SVC_NUM);
+	memset(gScInfo,0, sizeof(scInfo_t) * MAX_SC_NUM);
+	memset(subChInfo,0, sizeof(subChInfo_t) * MAX_SUBCH_NUM);
+#endif
+
+	for(i=0; i<MAX_SUBCH_NUM; i++) {
+		subChInfo[i].flag = 0;
+	}
+
+	for(i=0; i<MAX_SVC_NUM; i++) {
+		gSvcInfo[i].flag = 0;
+		gSvcInfo[i].SCId = 0xffff;
+	}
+
+	for(i=0; i<MAX_SC_NUM; i++) {
+		gScInfo[i].SCId = 0xffff;
+	}
+
+	return;
+}
+
+int BitRate2Index(u16 bitrate)
+{
+	int index;
+
+	switch (bitrate) {
+		case 32: index =  0; break;
+		case 48: index =  1; break;
+		case 56: index =  2; break;
+		case 64: index =  3; break;
+		case 80: index =  4; break;
+		case 96: index =  5; break;
+		case 112: index =  6; break;
+		case 128: index =  7; break;
+		case 160: index =  8; break;
+		case 192: index =  9; break;
+		case 224: index =  10; break;
+		case 256: index =  11; break;
+		case 320: index =  12; break;
+		case 384: index =  13; break;
+		default: index =  -1; break;
+	}
+
+	return index;
+}
+
+int GetN(subChInfo_t *pSubChInfo,int *n)
+{
+	int result = 0;
+
+	switch (pSubChInfo->option) {
+		case 0: 
+			switch (pSubChInfo->protectLevel) {
+				case 0:
+					*n = pSubChInfo->subChSize / 12;
+					break;
+				case 1:
+					*n = pSubChInfo->subChSize / 8;
+					break;
+				case 2:
+					*n = pSubChInfo->subChSize / 6;
+					break;
+				case 3:
+					*n = pSubChInfo->subChSize / 4;
+					break;
+				default:
+					//PRINTF(NULL, "Unknown Protection Level %d\n", pSubChInfo->protectLevel);
+					result = 1;
+					break;
+			}
+			break;
+		case 1: 
+			switch (pSubChInfo->protectLevel) {
+				case 0:
+					*n = pSubChInfo->subChSize / 27;
+					break;
+				case 1:
+					*n = pSubChInfo->subChSize / 21;
+					break;
+				case 2:
+					*n = pSubChInfo->subChSize / 18;
+					break;
+				case 3:
+					*n = pSubChInfo->subChSize / 15;
+					break;
+				default:
+					//PRINTF(NULL, "Unknown Protection Level %d\n", pSubChInfo->protectLevel);
+					result = 1;
+					break;
+			}
+			break;
+		default:
+			//PRINTF(NULL, "Unknown Option %d\n", pSubChInfo->option);
+			result = 1;
+			break;
+	}
+
+	return result;
+}
+
+int SubChOrgan2DidpReg(subChInfo_t *pSubChInfo, didpInfo_t *pDidp)
+{
+	int index, bitrate, level;
+	int result = 0, n = 0;
+	u16	subChSize = 0;
+	u16	dataRate;
+	u8  intvDepth = 0;
+
+	if(pSubChInfo->flag != 99) 
+		return 1;
+
+	switch(pSubChInfo->mode) {
+		case 0:		// T-DMB
+			pDidp->mode = pSubChInfo->mode;
+			switch (pSubChInfo->formType) {
+				case 0: 	// short form  UEP
+					pDidp->subChId = pSubChInfo->subChId;
+					pDidp->startAddress = pSubChInfo->startAddress;
+					pDidp->formType = pSubChInfo->formType;
+					subChSize = BitRateProfile[pSubChInfo->tableIndex][0];
+					pDidp->speed = BitRateProfile[pSubChInfo->tableIndex][2];
+
+					level = BitRateProfile[pSubChInfo->tableIndex][1];
+					bitrate = BitRateProfile[pSubChInfo->tableIndex][2];
+					index = BitRate2Index(bitrate);
+
+					if(index < 0) {
+						result = 1;
+						break;
+					}
+					
+					pDidp->l1  = UEPProfile[index][level-1][0];
+					pDidp->l2  = UEPProfile[index][level-1][1]; 
+					pDidp->l3  = UEPProfile[index][level-1][2];
+					pDidp->l4  = UEPProfile[index][level-1][3];
+					pDidp->p1  = (u8)UEPProfile[index][level-1][4];
+					pDidp->p2  = (u8)UEPProfile[index][level-1][5];
+					pDidp->p3  = (u8)UEPProfile[index][level-1][6];
+					pDidp->p4  = (u8)UEPProfile[index][level-1][7];
+					pDidp->pad = (u8)UEPProfile[index][level-1][8];
+					break;
+				case 1:		// long form EEP
+					pDidp->subChId = pSubChInfo->subChId;
+					pDidp->startAddress = pSubChInfo->startAddress;
+					pDidp->formType = pSubChInfo->formType;
+					subChSize = pSubChInfo->subChSize;
+					pDidp->l3 = 0;
+					pDidp->p3 = 0;
+					pDidp->l4 = 0;
+					pDidp->p4 = 0;
+					pDidp->pad = 0;
+
+					if(GetN(pSubChInfo, &n)) {
+						result = 1;
+						break;
+					}
+
+					switch (pSubChInfo->option) {
+						case 0: 
+							switch (pSubChInfo->protectLevel) {
+								case 0:
+									pDidp->l1 = 6*n - 3;
+									pDidp->l2 = 3;
+									pDidp->p1 = 24;
+									pDidp->p2 = 23;
+									break;
+								case 1:
+									if(n > 1) {
+										pDidp->l1 = 2*n - 3;
+										pDidp->l2 = 4*n + 3;
+										pDidp->p1 = 14;
+										pDidp->p2 = 13;
+									} else {
+										pDidp->l1 = 5;
+										pDidp->l2 = 1;
+										pDidp->p1 = 13;
+										pDidp->p2 = 12;
+									}
+									break;
+								case 2:
+									pDidp->l1 = 6*n - 3;
+									pDidp->l2 = 3;
+									pDidp->p1 = 8;
+									pDidp->p2 = 7;
+									break;
+								case 3:
+									pDidp->l1 = 4*n - 3;
+									pDidp->l2 = 2*n + 3;
+									pDidp->p1 = 3;
+									pDidp->p2 = 2;
+									break;
+								default:
+									result = 1;
+									break;
+							}
+							pDidp->speed = 8*n;
+							break;
+						case 1:
+							switch (pSubChInfo->protectLevel) {
+								case 0:
+									pDidp->l1 = 24*n - 3;
+									pDidp->l2 = 3;
+									pDidp->p1 = 10;
+									pDidp->p2 = 9;
+									break;
+								case 1:
+									pDidp->l1 = 24*n - 3;
+									pDidp->l2 = 3;
+									pDidp->p1 = 6;
+									pDidp->p2 = 5;
+									break;
+								case 2:
+									pDidp->l1 = 24*n - 3;
+									pDidp->l2 = 3;
+									pDidp->p1 = 4;
+									pDidp->p2 = 3;
+									break;
+								case 3:
+									pDidp->l1 = 24*n - 3;
+									pDidp->l2 = 3;
+									pDidp->p1 = 2;
+									pDidp->p2 = 1;
+									break;
+								default:
+									break;
+							}
+							pDidp->speed = 32*n;
+							break;
+						default:
+							result = 1;
+							break;
+					}
+					break;
+				default:
+					result = 1;
+					break;
+			}
+
+			if(subChSize <= pDidp->subChSize)
+				pDidp->reCfgOffset = 0;
+			else 
+				pDidp->reCfgOffset = 1;
+
+			pDidp->subChSize = subChSize;
+			break;
+		case 1:		// T-MMB
+			pDidp->mode = pSubChInfo->mode;
+			pDidp->startAddress = pSubChInfo->startAddress;
+			pDidp->subChId = pSubChInfo->subChId;
+			pDidp->subChSize = pSubChInfo->subChSize;
+			pDidp->modType = pSubChInfo->modType;
+			pDidp->encType = pSubChInfo->encType;
+			pDidp->intvDepth = pSubChInfo->intvDepth;
+			pDidp->pl = pSubChInfo->pl;
+
+			switch(pDidp->modType) {
+				case 0:
+					n =  pDidp->subChSize / 18;
+					break;
+				case 1:
+					n =  pDidp->subChSize / 12;
+					break;
+				case 2:
+					n =  pDidp->subChSize / 9;
+					break;
+				default:
+					result = 1;
+					break;
+			}
+
+			switch(pDidp->intvDepth) {
+				case 0:
+					intvDepth = 16;
+					break;
+				case 1:
+					intvDepth = 32;
+					break;
+				case 2:
+					intvDepth = 64;
+					break;
+				default:
+					result = 1;
+					break;
+			}
+
+#if 0	// depth 16, 32
+			if(pDidp->pl) {
+				dataRate = n * 32;
+				pDidp->mi = (((dataRate * 3) / 2) * 24) / intvDepth;
+			} else {
+				dataRate = n * 24;
+				pDidp->mi = ((dataRate * 2) * 24) / intvDepth;
+			}
+#else  // depth 64
+			if(result == 1)
+				break;
+			
+			if(pDidp->pl) {
+				dataRate = n * 32;
+				pDidp->mi = (((((dataRate * 3) / 2) * 24) / intvDepth ) * 3) / 4;
+			} else {
+				dataRate = n * 24;
+				pDidp->mi = ((((dataRate * 2) * 24) / intvDepth) * 3) / 4;
+			}
+#endif
+
+#if 0
+			PRINTF(NULL, "mode = 0x%x\n", pDidp->mode);
+			PRINTF(NULL, "startAddress = 0x%x\n", pDidp->startAddress);
+			PRINTF(NULL, "subChId = 0x%x\n", pDidp->subChId);
+			PRINTF(NULL, "subChSize = 0x%x\n", pDidp->subChSize);
+			PRINTF(NULL, "modType = 0x%x\n", pDidp->modType);
+			PRINTF(NULL, "encType = 0x%x\n", pDidp->encType);
+			PRINTF(NULL, "intvDepth = 0x%x\n", pDidp->intvDepth);
+			PRINTF(NULL, "pl = 0x%x\n", pDidp->pl);
+			PRINTF(NULL, "mi = 0x%x\n", pDidp->mi);
+#endif
+			break;
+		default:
+			break;
+	}
+
+	return result;
+}
+
+#if 0
+int FoundAllLabels(void)
+{
+	int NumOfSvcs = 0;
+	int NumOfSubChs = 0;
+	int i;
+	int ret = 1;
+
+	subChInfo_t *pSubChInfo;
+	svcInfo_t *pSvcInfo;
+	
+	if(gEsbInfo[0].label[0] == '\0')
+		return 0;
+#if 0
+	for(i=0; i<MAX_SUBCH_NUM; i++) {
+		pSubChInfo = &subChInfo[i];
+		if(pSubChInfo->flag == 99) {
+			//PRINTF(NULL, "pSubChInfo->SId = 0x%X\n", pSubChInfo->SId);
+			NumOfSubChs++;
+		}
+	}
+
+
+	for(i=0; i<MAX_SUBCH_NUM; i++) {
+		pSubChInfo = &subChInfo[i];
+		if (pSubChInfo->flag == 99) {
+			if(pSubChInfo->SId) {
+				pSvcInfo = GetSvcInfo(pSubChInfo->SId);
+				if(pSvcInfo == NULL) {
+					ret = 0;
+					break;
+				}
+
+				if((pSvcInfo->flag & 0x07) != 0x07) 
+				//if((pSvcInfo->flag & 0x03) != 0x03) 
+				{
+					ret = 0;
+					break;
+				}
+				NumOfSvcs++;
+			}
+		}
+	}
+
+	if(NumOfSvcs != NumOfSubChs) {
+		ret = 0;
+	}
+	
+	//PRINTF(NULL, "NumOfSubChs = 0x%X, NumOfSvcs = 0x%X\n", NumOfSubChs, NumOfSvcs);
+#else
+	for(i=0; i<MAX_SVC_NUM; i++) {
+		pSvcInfo = &gSvcInfo[i];
+		if(pSvcInfo->flag == 0x07) {
+			if(pSvcInfo->label[0] == '\0') {
+				ret = 0;
+				break;
+			} else {
+				NumOfSvcs++;
+			}
+		}
+	}
+	
+	if(NumOfSvcs == 0) {
+		ret = 0;
+	}
+#endif
+	return ret;
+}
+#else
+int FoundAllLabels(void)
+{
+	msWait(1200); 
+	return 1;
+}
+#endif
diff -urN caf/drivers/char/dmb_fci/ficdecoder.h for-diff/drivers/char/dmb_fci/ficdecoder.h
--- caf/drivers/char/dmb_fci/ficdecoder.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/char/dmb_fci/ficdecoder.h	2015-10-08 21:23:59.600842000 +0900
@@ -0,0 +1,168 @@
+/*****************************************************************************
+ Copyright(c) 2009 FCI Inc. All Rights Reserved
+ 
+ File name : ficdecoder.h
+ 
+ Description : fic parser
+ 
+ History : 
+ ----------------------------------------------------------------------
+*******************************************************************************/
+#ifndef __ficdecodera_h__
+#define __ficdecodera_h__
+
+#include "fci_types.h"
+
+#define MAX_ESB_NUM	1
+#define MAX_SVC_NUM	128
+#define MAX_SC_NUM	128
+#define MAX_SUBCH_NUM	64
+#define MAX_DIDP_NUM 	8
+
+#define MAX_USER_APPL_NUM       15
+#define MAX_USER_APPL_DATA_SIZE 24
+
+typedef struct {
+	u8 	head;
+	u8	data[29];
+} Fig;
+
+typedef struct {
+	u8	data[30];
+	u16	crc;
+} Fib;
+
+typedef struct {
+	//Fib 	fib[12];
+	Fib 	fib[32];
+} Fic;
+
+typedef struct {
+	u8	head;
+	u8	data[28];
+} FigData;
+
+typedef struct {
+	u8	flag;
+	u16	EId;
+	u8	label[32];
+} esbInfo_t;
+
+typedef struct {
+	u8	flag;
+	u32	SId;
+	u16	SCId;
+	u8	ASCTy;
+	u8	DSCTy;
+	u8	FIDCId;
+	u8	addrType;		// PD
+	u8	TMId;
+	u8	SubChId;
+	u8	nscps;
+	u8	label[32];
+
+#if 0 // Because of Visual Radio	
+	u16	UAtype;
+#else
+    u8  NumberofUserAppl;
+    u16 UserApplType[MAX_USER_APPL_NUM];
+    u8  UserApplLength[MAX_USER_APPL_NUM];
+    u8  UserApplData[MAX_USER_APPL_NUM][MAX_USER_APPL_DATA_SIZE];
+#endif
+} svcInfo_t;
+
+typedef struct {
+	u8	flag;
+	u16	SCId;
+	u8	DSCTy;
+	u8	SubChId;
+	u8	SCCAFlag;
+	u8	DGFlag;
+	u16	PacketAddress;
+	u16	SCCA;
+	u8	label[32];
+} scInfo_t;
+
+typedef struct {
+	u8	flag;
+	u8 	subChId;			//
+	u16	startAddress;			//
+	u8	formType;			//
+	u8 	tableIndex;			//
+	u8	tableSwitch;		
+	u8 	option;				//
+	u8 	protectLevel;			//
+	u16	subChSize;			//
+	u32	SId;
+	u8	svcChId;			//
+	u8	reCfg;
+#if 1	/* T-MMB */
+	u8	mode;			// 0 T-DMB, 1 T-MMB
+	u8	modType;
+	u8	encType;
+	u8	intvDepth;
+	u8	pl;
+#endif	/* T-MMB */
+
+#if 1 /* FEC */
+	u8  fecScheme;
+#endif
+
+} subChInfo_t;
+
+typedef struct {
+	u8	flag;
+	u8	reCfgOffset;
+	u8	subChId;
+	u16	startAddress;
+	u8	formType;
+	u16	subChSize;
+	u16	speed;			// kbsp
+	u16	l1;
+	u8	p1;
+	u16	l2;
+	u8	p2;
+	u16	l3;
+	u8	p3;
+	u16	l4;
+	u8	p4;
+	u8	pad;
+#if 1	/* T-MMB */
+	u8	mode;			// 0 T-DMB, 1 T-MMB
+	u8	modType;
+	u8	encType;
+	u8	intvDepth;
+	u8	pl;
+	u16	mi;			// kies use
+#endif 	/* T-MMB */
+} didpInfo_t;
+
+#ifdef __cplusplus
+	extern "C" {
+#endif
+
+extern esbInfo_t   	gEsbInfo[MAX_ESB_NUM];
+extern svcInfo_t 	gSvcInfo[MAX_SVC_NUM];
+extern subChInfo_t 	subChInfo[MAX_SUBCH_NUM];
+extern didpInfo_t 	didpInfo[MAX_DIDP_NUM];
+
+
+extern int          fic_decoder(Fic *pFic, u16 length);
+extern int          fib_decoder(Fib *pFib);
+extern esbInfo_t*   GetEsbInfo(void);
+extern subChInfo_t* GetSubChInfo(u8 subChId);
+extern svcInfo_t*   GetSvcInfo(u32 SId);
+extern scInfo_t*    GetScInfo(u16 SCId);
+extern svcInfo_t*   GetSvcInfoList(u8 SvcIdx);
+extern void         SubChannelOrganizationClean(void);
+extern void         SubChannelOrganizationPrn(int subChId);
+extern int          FoundAllLabels(void);
+extern void         DidpPrn(didpInfo_t *pDidp);
+extern int          SetDidpReg(int svcChId, didpInfo_t *pDidp);
+extern int          SubChOrgan2DidpReg(subChInfo_t *pSubChInfo, didpInfo_t *pDidp);
+
+#ifdef __cplusplus
+	} // extern "C" {
+#endif
+
+#endif /* __ficdecoder_h__ */
diff -urN caf/drivers/gpu/msm/adreno.c for-diff/drivers/gpu/msm/adreno.c
--- caf/drivers/gpu/msm/adreno.c	2015-09-08 23:43:50.187167077 +0900
+++ for-diff/drivers/gpu/msm/adreno.c	2015-09-13 14:02:59.665921000 +0900
@@ -612,7 +612,7 @@
 	if (cpu_is_qsd8x50())
 		patchid = 1;
 	else if (cpu_is_msm8960() &&
-			SOCINFO_VERSION_MAJOR(soc_platform_version) == 3)
+			SOCINFO_VERSION_MAJOR(soc_platform_version) >= 3) /* KT Tech : Ensure correct GPU patch ID is set. */
 		patchid = 6;
 	else if (cpu_is_msm8625() && minorid == 0)
 		minorid = 1;
diff -urN caf/drivers/gpu/msm/adreno_ringbuffer.c for-diff/drivers/gpu/msm/adreno_ringbuffer.c
--- caf/drivers/gpu/msm/adreno_ringbuffer.c	2015-09-08 23:43:50.187167077 +0900
+++ for-diff/drivers/gpu/msm/adreno_ringbuffer.c	2015-09-13 14:02:59.669921000 +0900
@@ -29,6 +29,15 @@
 
 #define GSL_RB_NOP_SIZEDWORDS				2
 
+/*
+ * KT Tech : Turn off the CP_DEBUG dynamic clock.
+ * CP DEBUG settings for all cores:
+ * DYNAMIC_CLK_DISABLE [27] - turn off the dynamic clock control
+ * PROG_END_PTR_ENABLE [25] - Allow 128 bit writes to the VBIF
+ */
+
+#define CP_DEBUG_DEFAULT ((1 << 27) | (1 << 25))
+
 void adreno_ringbuffer_submit(struct adreno_ringbuffer *rb)
 {
 	BUG_ON(rb->wptr == 0);
@@ -217,7 +226,7 @@
 	KGSL_DRV_INFO(device, "loading pm4 ucode version: %d\n",
 		adreno_dev->pm4_fw[0]);
 
-	adreno_regwrite(device, REG_CP_DEBUG, 0x02000000);
+	adreno_regwrite(device, REG_CP_DEBUG, CP_DEBUG_DEFAULT); /* KT Tech : Turn off the CP_DEBUG dynamic clock. */
 	adreno_regwrite(device, REG_CP_ME_RAM_WADDR, 0);
 	for (i = 1; i < adreno_dev->pm4_fw_size; i++)
 		adreno_regwrite(device, REG_CP_ME_RAM_DATA,
@@ -258,8 +267,8 @@
 	adreno_regwrite(device, adreno_dev->gpudev->reg_cp_pfp_ucode_addr, 0);
 	for (i = 1; i < adreno_dev->pfp_fw_size; i++)
 		adreno_regwrite(device,
-			adreno_dev->gpudev->reg_cp_pfp_ucode_data,
-			adreno_dev->pfp_fw[i]);
+		adreno_dev->gpudev->reg_cp_pfp_ucode_data,
+		adreno_dev->pfp_fw[i]);
 err:
 	return ret;
 }
@@ -368,7 +377,6 @@
 			     GSL_RB_MEMPTRS_SCRATCH_MASK);
 
 	/* load the CP ucode */
-
 	status = adreno_ringbuffer_load_pm4_ucode(device);
 	if (status != 0)
 		return status;
diff -urN caf/drivers/gpu/msm/kgsl_iommu.c for-diff/drivers/gpu/msm/kgsl_iommu.c
--- caf/drivers/gpu/msm/kgsl_iommu.c	2015-09-08 23:43:50.187167077 +0900
+++ for-diff/drivers/gpu/msm/kgsl_iommu.c	2015-09-13 14:02:59.669921000 +0900
@@ -749,6 +749,7 @@
 		if (status)
 			return -ENOMEM;
 	}
+
 	/* We use the GPU MMU to control access to IOMMU registers on 8960 with
 	 * a225, hence we still keep the MMU active on 8960 */
 	if (cpu_is_msm8960()) {
diff -urN caf/drivers/hwmon/pm8xxx-adc-scale.c for-diff/drivers/hwmon/pm8xxx-adc-scale.c
--- caf/drivers/hwmon/pm8xxx-adc-scale.c	2015-09-08 23:43:50.211167077 +0900
+++ for-diff/drivers/hwmon/pm8xxx-adc-scale.c	2015-09-13 14:02:59.689921000 +0900
@@ -25,6 +25,181 @@
    and provided to the battery driver in the units desired for
    their framework which is 0.1DegC. True resolution of 0.1DegC
    will result in the below table size to increase by 10 times */
+#ifdef CONFIG_MACH_KTTECH
+#if 1 //MP and PP version 
+static const struct pm8xxx_adc_map_pt adcmap_btm_threshold[] = {
+	{-300,	1682}, 
+	{-200,	1539}, 
+	{-100,	1395}, 
+	{0, 1252}, 
+	{10,	1238}, 
+	{20,	1223}, 
+	{30,	1209}, 
+	{40,	1195}, 
+	{50,	1180}, 
+	{60,	1166}, 
+	{70,	1152}, 
+	{80,	1137}, 
+	{90,	1123}, 
+	{100,	1109}, 
+	{110,	1094}, 
+	{120,	1080}, 
+	{130,	1066}, 
+	{140,	1051}, 
+	{150,	1037}, 
+	{160,	1023}, 
+	{170,	1008}, 
+	{180,	994}, 
+	{190,	980}, 
+	{200,	965}, 
+	{210,	951}, 
+	{220,	937}, 
+	{230,	922}, 
+	{240,	908}, 
+	{250,	894}, 
+	{260,	879}, 
+	{270,	865}, 
+	{280,	851}, 
+	{290,	836}, 
+	{300,	822}, 
+	{310,	808}, 
+	{320,	793}, 
+	{330,	779}, 
+	{340,	765}, 
+	{350,	750}, 
+	{360,	736}, 
+	{370,	722}, 
+	{380,	707}, 
+	{390,	693}, 
+	{400,	679}, 
+	{410,	664}, 
+	{420,	650}, 
+	{430,	636}, 
+	{440,	621}, 
+	{450,	607}, 
+	{460,	601}, 
+	{470,	596}, 
+	{480,	591}, 
+	{490,	586}, 
+	{500,	580}, 
+	{510,	575}, 
+	{520,	570}, 
+	{530,	565}, 
+	{540,	560}, 
+	{550,	554}, 
+	{560,	549}, 
+	{570,	544}, 
+	{580,	539}, 
+	{590,	534}, 
+	{600,	528}, 
+	{610,	523}, 
+	{620,	518}, 
+	{630,	513}, 
+	{640,	508}, 
+	{650,	502}, 
+	{660,	497}, 
+	{670,	492}, 
+	{680,	487}, 
+	{690,	482}, 
+	{700,	476}, 
+	{710,	471}, 
+	{720,	466}, 
+	{730,	461}, 
+	{740,	456}, 
+	{750,	450}, 
+	{760,	445}, 
+	{770,	440}, 
+	{780,	435}, 
+	{790,	430}
+};
+#else
+static const struct pm8xxx_adc_map_pt adcmap_btm_threshold[] = {
+	{-300,	1802},
+	{-200,	1638},
+	{-100,	1474},
+	{0,	1310},
+	{10,	1294},
+	{20,	1277},
+	{30,	1261},
+	{40,	1244},
+	{50,	1228},
+	{60,	1212},
+	{70,	1195},
+	{80,	1179},
+	{90,	1162},
+	{100,	1146},
+	{110,	1130},
+	{120,	1113},
+	{130,	1097},
+	{140,	1080},
+	{150,	1064},
+	{160,	1048},
+	{170,	1031},
+	{180,	1015},
+	{190,	998},
+	{200,	982},
+	{210,	966},
+	{220,	949},
+	{230,	933},
+	{240,	916},
+	{250,	900},
+	{260,	884},
+	{270,	867},
+	{280,	851},
+	{290,	834},
+	{300,	818},
+	{310,	802},
+	{320,	785},
+	{330,	769},
+	{340,	752},
+	{350,	736},
+	{360,	720},
+	{370,	703},
+	{380,	687},
+	{390,	670},
+	{400,	654},
+	{410,	638},
+	{420,	621},
+	{430,	605},
+	{440,	588},
+	{450,	572},
+	{460,	556},
+	{470,	539},
+	{480,	523},
+	{490,	506},
+	{500,	490},
+	{510,	474},
+	{520,	457},
+	{530,	441},
+	{540,	424},
+	{550,	408},
+	{560,	392},
+	{570,	375},
+	{580,	359},
+	{590,	342},
+	{600,	326},
+	{610,	309},
+	{620,	293},
+	{630,	277},
+	{640,	260},
+	{650,	244},
+	{660,	227},
+	{670,	211},
+	{680,	195},
+	{690,	178},
+	{700,	162},
+	{710,	145},
+	{720,	129},
+	{730,	113},
+	{740,	96},
+	{750,	80},
+	{760,	63},
+	{770,	47},
+	{780,	31},
+	{790,	14}
+};
+#endif
+#else
 static const struct pm8xxx_adc_map_pt adcmap_btm_threshold[] = {
 	{-300,	1642},
 	{-200,	1544},
@@ -110,6 +285,7 @@
 	{780,	208},
 	{790,	203}
 };
+#endif
 
 static const struct pm8xxx_adc_map_pt adcmap_pa_therm[] = {
 	{1731,	-30},
diff -urN caf/drivers/hwmon/pm8xxx-adc.c for-diff/drivers/hwmon/pm8xxx-adc.c
--- caf/drivers/hwmon/pm8xxx-adc.c	2015-09-08 23:43:50.211167077 +0900
+++ for-diff/drivers/hwmon/pm8xxx-adc.c	2015-09-13 14:02:59.689921000 +0900
@@ -200,6 +200,10 @@
 static bool pm8xxx_adc_calib_first_adc;
 static bool pm8xxx_adc_initialized, pm8xxx_adc_calib_device_init;
 
+#ifdef CONFIG_MACH_KTTECH
+static struct wake_lock adc_wake_lock;
+#endif
+
 static int32_t pm8xxx_adc_check_channel_valid(uint32_t channel)
 {
 	if (channel < CHANNEL_VCOIN ||
@@ -517,6 +521,9 @@
 	int rc, calib_read_1, calib_read_2;
 	u8 data_arb_usrp_cntrl1 = 0;
 
+#ifdef CONFIG_MACH_KTTECH
+	wake_lock_init(&adc_wake_lock, WAKE_LOCK_SUSPEND, "adc_kttech");
+#endif
 	conv.amux_channel = CHANNEL_125V;
 	conv.decimation = ADC_DECIMATION_TYPE2;
 	conv.amux_ip_rsv = AMUX_RSV1;
@@ -676,6 +683,10 @@
 	struct pm8xxx_adc *adc_pmic = pmic_adc;
 	int i = 0, rc = 0, rc_fail, amux_prescaling, scale_type;
 	enum pm8xxx_adc_premux_mpp_scale_type mpp_scale;
+#ifdef CONFIG_MACH_KTTECH
+	long comp_timeout;
+	static int timeout_cnt = 0; 
+#endif
 
 	if (!pm8xxx_adc_initialized)
 		return -ENODEV;
@@ -686,6 +697,9 @@
 	}
 
 	mutex_lock(&adc_pmic->adc_lock);
+#ifdef CONFIG_MACH_KTTECH
+	wake_lock(&adc_wake_lock);
+#endif
 
 	for (i = 0; i < adc_pmic->adc_num_board_channel; i++) {
 		if (channel == adc_pmic->adc_channel[i].channel_name)
@@ -734,7 +748,18 @@
 		goto fail;
 	}
 
+#ifdef CONFIG_MACH_KTTECH
+	comp_timeout = wait_for_completion_timeout(&adc_pmic->adc_rslt_completion, 2*HZ);
+
+	if (!comp_timeout) {
+		timeout_cnt ++;
+		pr_err("PM8xxx ADC read time out with channel: %d (timeout_cnt = %d) \n", channel, timeout_cnt);
+		rc = -ETIMEDOUT;
+		goto fail;
+	}
+#else
 	wait_for_completion(&adc_pmic->adc_rslt_completion);
+#endif
 
 	rc = pm8xxx_adc_read_adc_code(&result->adc_code);
 	if (rc) {
@@ -757,6 +782,9 @@
 		goto fail_unlock;
 	}
 
+#ifdef CONFIG_MACH_KTTECH
+	wake_unlock(&adc_wake_lock);
+#endif
 	mutex_unlock(&adc_pmic->adc_lock);
 
 	return 0;
@@ -765,6 +793,9 @@
 	if (rc_fail)
 		pr_err("pm8xxx adc power disable failed\n");
 fail_unlock:
+#ifdef CONFIG_MACH_KTTECH
+	wake_unlock(&adc_wake_lock);
+#endif
 	mutex_unlock(&adc_pmic->adc_lock);
 	pr_err("pm8xxx adc error with %d\n", rc);
 	return rc;
diff -urN caf/drivers/input/touchscreen/Makefile for-diff/drivers/input/touchscreen/Makefile
--- caf/drivers/input/touchscreen/Makefile	2015-09-08 23:43:50.303167079 +0900
+++ for-diff/drivers/input/touchscreen/Makefile	2015-09-13 14:02:59.777921000 +0900
@@ -79,3 +79,4 @@
 obj-$(CONFIG_TOUCHSCREEN_MSM_LEGACY)		+= msm_touch.o
 obj-$(CONFIG_TOUCHSCREEN_CY8C_TS)	+= cy8c_ts.o
 obj-$(CONFIG_TOUCHSCREEN_CYTTSP_I2C_QC)       += cyttsp-i2c-qc.o
+obj-$(CONFIG_KTTECH_TOUCH_MMS100)			+= mms100_ts/
\ No newline at end of file
diff -urN caf/drivers/input/touchscreen/mms100_ts/BOOT_120223_v1.c for-diff/drivers/input/touchscreen/mms100_ts/BOOT_120223_v1.c
--- caf/drivers/input/touchscreen/mms100_ts/BOOT_120223_v1.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/BOOT_120223_v1.c	2015-10-08 21:26:19.828845000 +0900
@@ -0,0 +1,75 @@
+static const struct firmware_data melfas_BOOT = {
+	.section_name = "BOOT",
+	.section_version = 0x02,
+	.start_page_addr = 0,
+	.end_page_addr = 0,
+	.compatible_version = 0x00,
+	.length = 1029,
+	.data = {
+	0xAE, 0xF1, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x79, 0x00, 0x00, 0x02, 0x39, 0x00, 
+	0x00, 0x02, 0x3D, 0x00, 0x00, 0x02, 0x41, 0x00, 0x00, 0x02, 0x45, 0x00, 0x00, 0x02, 0x49, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x02, 0x4D, 0x00, 0x00, 0x02, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x55, 0x00, 
+	0x00, 0x02, 0x59, 0x00, 0x00, 0x01, 0x39, 0x00, 0x00, 0x01, 0x61, 0x00, 0x00, 0x01, 0x25, 0x00, 
+	0x00, 0x02, 0x21, 0x00, 0x00, 0x02, 0x35, 0x00, 0x00, 0x02, 0x71, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x4B, 0x11, 0xB5, 0x30, 0x88, 0x1B, 0x4A, 0x11, 0x18, 0xD3, 0x78, 0x12, 0x2B, 
+	0xE1, 0xB2, 0xDB, 0x2B, 0xE5, 0xD0, 0x02, 0xE0, 0x09, 0xD1, 0x17, 0x4A, 0x0E, 0x49, 0x0D, 0x3B, 
+	0x01, 0x23, 0x04, 0x5C, 0xC8, 0xB2, 0xDB, 0x2B, 0x00, 0x54, 0x98, 0xE0, 0x0C, 0xD1, 0xF9, 0x48, 
+	0x09, 0x4C, 0x0A, 0x4A, 0x0B, 0x49, 0x0A, 0x3B, 0x01, 0x23, 0x04, 0x5C, 0xE5, 0xB2, 0xDB, 0x5C, 
+	0xCD, 0x54, 0x1D, 0x2B, 0x00, 0x54, 0x9D, 0xBD, 0x30, 0xD1, 0xF7, 0x20, 0x00, 0x00, 0x28, 0x20, 
+	0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x2D, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x35, 0x20, 
+	0x00, 0x00, 0x31, 0x50, 0x00, 0x00, 0x10, 0x23, 0x00, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x13, 0x70, 
+	0x13, 0x05, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x00, 0x22, 0x00, 0x4B, 0x06, 0x23, 
+	0x80, 0x70, 0x5A, 0x69, 0x59, 0x05, 0xDB, 0x40, 0x0A, 0x4A, 0x04, 0x69, 0x59, 0x61, 0x5A, 0x40, 
+	0x0A, 0x4A, 0x03, 0x47, 0x70, 0x61, 0x5A, 0x20, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xEF, 
+	0xFF, 0xFF, 0xFF, 0x23, 0xA0, 0xB5, 0x70, 0x7A, 0x1C, 0x05, 0xDB, 0x22, 0x0F, 0x4D, 0x24, 0x78, 
+	0x2A, 0x40, 0x14, 0x2A, 0x00, 0x4E, 0x23, 0x4B, 0x23, 0xD0, 0x06, 0x47, 0x98, 0x68, 0x1B, 0x70, 
+	0x2B, 0x23, 0x00, 0xE0, 0x3A, 0x70, 0x34, 0x78, 0x32, 0x7A, 0x9B, 0xD5, 0x02, 0x07, 0xE1, 0x80, 
+	0x13, 0x4A, 0x1E, 0x21, 0x08, 0xE0, 0x07, 0xD0, 0x0A, 0x42, 0x0C, 0x78, 0x1A, 0x4B, 0x1C, 0xB2, 
+	0xD2, 0x18, 0x52, 0xF7, 0xFF, 0x70, 0x1A, 0x4B, 0x1A, 0xFF, 0x8D, 0x47, 0x98, 0x68, 0x1B, 0x07, 
+	0xA1, 0xE0, 0x19, 0x2A, 0x08, 0xD5, 0x0D, 0x2A, 0x01, 0xD0, 0x01, 0x4B, 0x16, 0xD1, 0x01, 0x4A, 
+	0x12, 0xE0, 0x02, 0x4B, 0x15, 0x80, 0x13, 0x47, 0x98, 0x68, 0x1B, 0x4B, 0x10, 0x22, 0x00, 0x07, 
+	0x63, 0xE0, 0x08, 0x4B, 0x11, 0xD5, 0x07, 0x47, 0x98, 0x68, 0x1B, 0x78, 0x1A, 0x4B, 0x0C, 0xB2, 
+	0xD2, 0x32, 0x08, 0x4B, 0x07, 0x70, 0x1A, 0x70, 0x1C, 0x22, 0x01, 0x05, 0xDB, 0x23, 0xA0, 0x49, 
+	0x0B, 0x72, 0x1A, 0x72, 0x1A, 0x22, 0x10, 0x70, 0x0A, 0x22, 0x00, 0xBD, 0x70, 0x72, 0x1A, 0x20, 
+	0x00, 0x00, 0x2C, 0x20, 0x00, 0x00, 0x2B, 0x20, 0x00, 0x00, 0x24, 0x20, 0x00, 0x00, 0x28, 0x20, 
+	0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x1C, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x18, 0x20, 
+	0x00, 0x00, 0x0C, 0x23, 0x00, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x93, 0x70, 0x53, 0x05, 0xD2, 0x46, 
+	0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x47, 0x70, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0x23, 0x80, 0xB5, 0x38, 0x21, 
+	0xFB, 0x05, 0xDB, 0x60, 0x59, 0x68, 0x5A, 0x21, 0x08, 0x68, 0x99, 0x22, 0x00, 0x60, 0x99, 0x60, 
+	0xDA, 0x68, 0xD9, 0x21, 0x80, 0x6C, 0x19, 0x64, 0x19, 0x01, 0xC9, 0x49, 0x44, 0x69, 0x19, 0x4B, 
+	0x44, 0x61, 0x19, 0xE0, 0x00, 0x49, 0x44, 0x42, 0x8B, 0xC3, 0x04, 0x4B, 0x43, 0xD3, 0xFC, 0x0A, 
+	0x9B, 0x4A, 0x43, 0x70, 0x13, 0xB2, 0xDB, 0x49, 0x43, 0x4B, 0x42, 0x0A, 0x9B, 0x68, 0x1B, 0x70, 
+	0x53, 0xB2, 0xDB, 0x68, 0x1B, 0x4B, 0x41, 0xB2, 0xDB, 0x0A, 0x9B, 0x4B, 0x40, 0x70, 0x93, 0x0A, 
+	0x9B, 0x68, 0x1B, 0x70, 0xD3, 0xB2, 0xDB, 0x70, 0x0B, 0x23, 0x00, 0xE0, 0x08, 0x23, 0x03, 0x5C, 
+	0x15, 0x1C, 0x58, 0x42, 0xA5, 0x5C, 0xD4, 0x5C, 0xD4, 0xD9, 0x07, 0xB2, 0xE4, 0x34, 0x01, 0x3B, 
+	0x01, 0x54, 0x0C, 0x2B, 0xFF, 0xB2, 0xDB, 0x4A, 0x30, 0xD1, 0xF2, 0x4A, 0x35, 0x78, 0x11, 0x1C, 
+	0x11, 0x70, 0x11, 0xD1, 0x03, 0x2B, 0xFF, 0x78, 0xDB, 0x4B, 0x2D, 0xD9, 0x04, 0x2B, 0x1E, 0x70, 
+	0x4B, 0x23, 0xFF, 0x70, 0xCB, 0x70, 0x8B, 0x4B, 0x2A, 0xE0, 0x0B, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 
+	0x2A, 0x70, 0x53, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 0x29, 0x70, 0x93, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 
+	0x28, 0x70, 0xD3, 0x2A, 0xFF, 0x78, 0xDA, 0x78, 0x9A, 0xD0, 0x08, 0xD0, 0x05, 0x2A, 0xFF, 0x2B, 
+	0xFF, 0x78, 0x5B, 0xF0, 0x00, 0xD0, 0x02, 0xBD, 0x38, 0xF8, 0x67, 0x4A, 0x23, 0x4B, 0x22, 0x60, 
+	0x13, 0x21, 0xC0, 0x00, 0x49, 0x4A, 0x22, 0x4A, 0x22, 0x60, 0x13, 0x60, 0x13, 0x48, 0x22, 0x60, 
+	0x13, 0x4A, 0x22, 0x22, 0x02, 0x4B, 0x22, 0x21, 0xC0, 0x50, 0x5A, 0x58, 0x5C, 0x40, 0x91, 0x50, 
+	0x58, 0x40, 0x20, 0x24, 0x04, 0x49, 0x1F, 0x43, 0x20, 0x69, 0x08, 0xB6, 0x62, 0x61, 0x08, 0x23, 
+	0x80, 0x60, 0x1A, 0x6C, 0x1A, 0x05, 0xDB, 0x02, 0x12, 0x22, 0x80, 0x6C, 0x1A, 0x64, 0x1A, 0x01, 
+	0xD2, 0x22, 0x80, 0x68, 0x9A, 0x64, 0x1A, 0x00, 0x52, 0x22, 0x80, 0x22, 0xA0, 0x60, 0x9A, 0x68, 
+	0x91, 0x05, 0xD2, 0x60, 0x91, 0x49, 0x14, 0x22, 0x00, 0x6C, 0x1A, 0xE7, 0xFE, 0x64, 0x1A, 0x00, 
+	0x00, 0x4F, 0x10, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x03, 0xFF, 0x20, 
+	0x00, 0x00, 0x31, 0x00, 0x00, 0x04, 0x08, 0x20, 0x00, 0x00, 0x35, 0x00, 0x00, 0x04, 0x0C, 0x00, 
+	0x00, 0x04, 0x10, 0x20, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x03, 0xF9, 0x20, 0x00, 0x00, 0x24, 0x20, 
+	0x00, 0x00, 0x18, 0x20, 0x00, 0x00, 0x1C, 0xFF, 0xFF, 0x00, 0xFF, 0x20, 0x00, 0x00, 0x20, 0xE0, 
+	0x00, 0xE1, 0x00, 0xE0, 0x00, 0xED, 0x00, 0x42, 0xC8, 0x00, 0x00, 0xFF, 0xFF, 0x47, 0x70, 0x02, 
+	0xFF, 0xFF, 0xFF, 0xFA, 0xC4, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/BOOT_120307_v2.c for-diff/drivers/input/touchscreen/mms100_ts/BOOT_120307_v2.c
--- caf/drivers/input/touchscreen/mms100_ts/BOOT_120307_v2.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/BOOT_120307_v2.c	2015-10-08 21:26:19.844845000 +0900
@@ -0,0 +1,75 @@
+static const struct firmware_data melfas_BOOT = {
+	.section_name = "BOOT",
+	.section_version = 0x02,
+	.start_page_addr = 0,
+	.end_page_addr = 0,
+	.compatible_version = 0x00,
+	.length = 1029,
+	.data = {
+	0xAE, 0xF1, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x79, 0x00, 0x00, 0x02, 0x39, 0x00, 
+	0x00, 0x02, 0x3D, 0x00, 0x00, 0x02, 0x41, 0x00, 0x00, 0x02, 0x45, 0x00, 0x00, 0x02, 0x49, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x02, 0x4D, 0x00, 0x00, 0x02, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x55, 0x00, 
+	0x00, 0x02, 0x59, 0x00, 0x00, 0x01, 0x39, 0x00, 0x00, 0x01, 0x61, 0x00, 0x00, 0x01, 0x25, 0x00, 
+	0x00, 0x02, 0x21, 0x00, 0x00, 0x02, 0x35, 0x00, 0x00, 0x02, 0x71, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x4B, 0x11, 0xB5, 0x30, 0x88, 0x1B, 0x4A, 0x11, 0x18, 0xD3, 0x78, 0x12, 0x2B, 
+	0xE1, 0xB2, 0xDB, 0x2B, 0xE5, 0xD0, 0x02, 0xE0, 0x09, 0xD1, 0x17, 0x4A, 0x0E, 0x49, 0x0D, 0x3B, 
+	0x01, 0x23, 0x04, 0x5C, 0xC8, 0xB2, 0xDB, 0x2B, 0x00, 0x54, 0x98, 0xE0, 0x0C, 0xD1, 0xF9, 0x48, 
+	0x09, 0x4C, 0x0A, 0x4A, 0x0B, 0x49, 0x0A, 0x3B, 0x01, 0x23, 0x04, 0x5C, 0xE5, 0xB2, 0xDB, 0x5C, 
+	0xCD, 0x54, 0x1D, 0x2B, 0x00, 0x54, 0x9D, 0xBD, 0x30, 0xD1, 0xF7, 0x20, 0x00, 0x00, 0x28, 0x20, 
+	0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x2D, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x35, 0x20, 
+	0x00, 0x00, 0x31, 0x50, 0x00, 0x00, 0x10, 0x23, 0x00, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x13, 0x70, 
+	0x13, 0x05, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x00, 0x22, 0x00, 0x4B, 0x06, 0x23, 
+	0x80, 0x70, 0x5A, 0x69, 0x59, 0x05, 0xDB, 0x40, 0x0A, 0x4A, 0x04, 0x69, 0x59, 0x61, 0x5A, 0x40, 
+	0x0A, 0x4A, 0x03, 0x47, 0x70, 0x61, 0x5A, 0x20, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xEF, 
+	0xFF, 0xFF, 0xFF, 0x23, 0xA0, 0xB5, 0x70, 0x7A, 0x1C, 0x05, 0xDB, 0x22, 0x0F, 0x4D, 0x24, 0x78, 
+	0x2A, 0x40, 0x14, 0x2A, 0x00, 0x4E, 0x23, 0x4B, 0x23, 0xD0, 0x06, 0x47, 0x98, 0x68, 0x1B, 0x70, 
+	0x2B, 0x23, 0x00, 0xE0, 0x3A, 0x70, 0x34, 0x78, 0x32, 0x7A, 0x9B, 0xD5, 0x02, 0x07, 0xE1, 0x80, 
+	0x13, 0x4A, 0x1E, 0x21, 0x08, 0xE0, 0x07, 0xD0, 0x0A, 0x42, 0x0C, 0x78, 0x1A, 0x4B, 0x1C, 0xB2, 
+	0xD2, 0x18, 0x52, 0xF7, 0xFF, 0x70, 0x1A, 0x4B, 0x1A, 0xFF, 0x8D, 0x47, 0x98, 0x68, 0x1B, 0x07, 
+	0xA1, 0xE0, 0x19, 0x2A, 0x08, 0xD5, 0x0D, 0x2A, 0x01, 0xD0, 0x01, 0x4B, 0x16, 0xD1, 0x01, 0x4A, 
+	0x12, 0xE0, 0x02, 0x4B, 0x15, 0x80, 0x13, 0x47, 0x98, 0x68, 0x1B, 0x4B, 0x10, 0x22, 0x00, 0x07, 
+	0x63, 0xE0, 0x08, 0x4B, 0x11, 0xD5, 0x07, 0x47, 0x98, 0x68, 0x1B, 0x78, 0x1A, 0x4B, 0x0C, 0xB2, 
+	0xD2, 0x32, 0x08, 0x4B, 0x07, 0x70, 0x1A, 0x70, 0x1C, 0x22, 0x01, 0x05, 0xDB, 0x23, 0xA0, 0x49, 
+	0x0B, 0x72, 0x1A, 0x72, 0x1A, 0x22, 0x10, 0x70, 0x0A, 0x22, 0x00, 0xBD, 0x70, 0x72, 0x1A, 0x20, 
+	0x00, 0x00, 0x2C, 0x20, 0x00, 0x00, 0x2B, 0x20, 0x00, 0x00, 0x24, 0x20, 0x00, 0x00, 0x28, 0x20, 
+	0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x1C, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x18, 0x20, 
+	0x00, 0x00, 0x0C, 0x23, 0x00, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x93, 0x70, 0x53, 0x05, 0xD2, 0x46, 
+	0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x47, 0x70, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0x23, 0x80, 0xB5, 0x38, 0x21, 
+	0xFB, 0x05, 0xDB, 0x60, 0x59, 0x68, 0x5A, 0x21, 0x08, 0x68, 0x99, 0x22, 0x00, 0x60, 0x99, 0x60, 
+	0xDA, 0x68, 0xD9, 0x21, 0x80, 0x6C, 0x19, 0x64, 0x19, 0x01, 0xC9, 0x49, 0x44, 0x69, 0x19, 0x4B, 
+	0x44, 0x61, 0x19, 0xE0, 0x00, 0x49, 0x44, 0x42, 0x8B, 0xC3, 0x04, 0x4B, 0x43, 0xD3, 0xFC, 0x0A, 
+	0x9B, 0x4A, 0x43, 0x70, 0x13, 0xB2, 0xDB, 0x49, 0x43, 0x4B, 0x42, 0x0A, 0x9B, 0x68, 0x1B, 0x70, 
+	0x53, 0xB2, 0xDB, 0x68, 0x1B, 0x4B, 0x41, 0xB2, 0xDB, 0x0A, 0x9B, 0x4B, 0x40, 0x70, 0x93, 0x0A, 
+	0x9B, 0x68, 0x1B, 0x70, 0xD3, 0xB2, 0xDB, 0x70, 0x0B, 0x23, 0x00, 0xE0, 0x08, 0x23, 0x03, 0x5C, 
+	0x15, 0x1C, 0x58, 0x42, 0xA5, 0x5C, 0xD4, 0x5C, 0xD4, 0xD9, 0x07, 0xB2, 0xE4, 0x34, 0x01, 0x3B, 
+	0x01, 0x54, 0x0C, 0x2B, 0xFF, 0xB2, 0xDB, 0x4A, 0x30, 0xD1, 0xF2, 0x4A, 0x35, 0x78, 0x11, 0x1C, 
+	0x11, 0x70, 0x11, 0xD1, 0x03, 0x2B, 0xFF, 0x78, 0xDB, 0x4B, 0x2D, 0xD9, 0x04, 0x2B, 0x1E, 0x70, 
+	0x4B, 0x23, 0xFF, 0x70, 0xCB, 0x70, 0x8B, 0x4B, 0x2A, 0xE0, 0x0B, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 
+	0x2A, 0x70, 0x53, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 0x29, 0x70, 0x93, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 
+	0x28, 0x70, 0xD3, 0x2A, 0xFF, 0x78, 0xDA, 0x78, 0x9A, 0xD0, 0x08, 0xD0, 0x05, 0x2A, 0xFF, 0x2B, 
+	0xFF, 0x78, 0x5B, 0xF0, 0x00, 0xD0, 0x02, 0xBD, 0x38, 0xF8, 0x67, 0x4A, 0x23, 0x4B, 0x22, 0x60, 
+	0x13, 0x21, 0xC0, 0x00, 0x49, 0x4A, 0x22, 0x4A, 0x22, 0x60, 0x13, 0x60, 0x13, 0x48, 0x22, 0x60, 
+	0x13, 0x4A, 0x22, 0x22, 0x02, 0x4B, 0x22, 0x21, 0xC0, 0x50, 0x5A, 0x58, 0x5C, 0x40, 0x91, 0x50, 
+	0x58, 0x40, 0x20, 0x24, 0x04, 0x49, 0x1F, 0x43, 0x20, 0x69, 0x08, 0xB6, 0x62, 0x61, 0x08, 0x23, 
+	0x80, 0x60, 0x1A, 0x6C, 0x1A, 0x05, 0xDB, 0x02, 0x12, 0x22, 0x80, 0x6C, 0x1A, 0x64, 0x1A, 0x01, 
+	0xD2, 0x22, 0x80, 0x68, 0x9A, 0x64, 0x1A, 0x00, 0x52, 0x22, 0x80, 0x22, 0xA0, 0x60, 0x9A, 0x68, 
+	0x91, 0x05, 0xD2, 0x60, 0x91, 0x49, 0x14, 0x22, 0x00, 0x6C, 0x1A, 0xE7, 0xFE, 0x64, 0x1A, 0x00, 
+	0x00, 0x4F, 0x10, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x03, 0xFF, 0x20, 
+	0x00, 0x00, 0x31, 0x00, 0x00, 0x04, 0x08, 0x20, 0x00, 0x00, 0x35, 0x00, 0x00, 0x04, 0x0C, 0x00, 
+	0x00, 0x04, 0x10, 0x20, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x03, 0xF9, 0x20, 0x00, 0x00, 0x24, 0x20, 
+	0x00, 0x00, 0x18, 0x20, 0x00, 0x00, 0x1C, 0xFF, 0xFF, 0x00, 0xFF, 0x20, 0x00, 0x00, 0x20, 0xE0, 
+	0x00, 0xE1, 0x00, 0xE0, 0x00, 0xED, 0x00, 0x42, 0xC8, 0x00, 0x00, 0xFF, 0xFF, 0x47, 0x70, 0x02, 
+	0xFF, 0xFF, 0xFF, 0xFA, 0xC4, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/BOOT_120317_v5.c for-diff/drivers/input/touchscreen/mms100_ts/BOOT_120317_v5.c
--- caf/drivers/input/touchscreen/mms100_ts/BOOT_120317_v5.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/BOOT_120317_v5.c	2015-10-08 21:26:19.844845000 +0900
@@ -0,0 +1,75 @@
+static const struct firmware_data melfas_BOOT = {
+	.section_name = "BOOT",
+	.section_version = 0x02,
+	.start_page_addr = 0,
+	.end_page_addr = 0,
+	.compatible_version = 0x00,
+	.length = 1029,
+	.data = {
+	0xAE, 0xF1, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x79, 0x00, 0x00, 0x02, 0x39, 0x00, 
+	0x00, 0x02, 0x3D, 0x00, 0x00, 0x02, 0x41, 0x00, 0x00, 0x02, 0x45, 0x00, 0x00, 0x02, 0x49, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x02, 0x4D, 0x00, 0x00, 0x02, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x55, 0x00, 
+	0x00, 0x02, 0x59, 0x00, 0x00, 0x01, 0x39, 0x00, 0x00, 0x01, 0x61, 0x00, 0x00, 0x01, 0x25, 0x00, 
+	0x00, 0x02, 0x21, 0x00, 0x00, 0x02, 0x35, 0x00, 0x00, 0x02, 0x71, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x4B, 0x11, 0xB5, 0x30, 0x88, 0x1B, 0x4A, 0x11, 0x18, 0xD3, 0x78, 0x12, 0x2B, 
+	0xE1, 0xB2, 0xDB, 0x2B, 0xE5, 0xD0, 0x02, 0xE0, 0x09, 0xD1, 0x17, 0x4A, 0x0E, 0x49, 0x0D, 0x3B, 
+	0x01, 0x23, 0x04, 0x5C, 0xC8, 0xB2, 0xDB, 0x2B, 0x00, 0x54, 0x98, 0xE0, 0x0C, 0xD1, 0xF9, 0x48, 
+	0x09, 0x4C, 0x0A, 0x4A, 0x0B, 0x49, 0x0A, 0x3B, 0x01, 0x23, 0x04, 0x5C, 0xE5, 0xB2, 0xDB, 0x5C, 
+	0xCD, 0x54, 0x1D, 0x2B, 0x00, 0x54, 0x9D, 0xBD, 0x30, 0xD1, 0xF7, 0x20, 0x00, 0x00, 0x28, 0x20, 
+	0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x2D, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x35, 0x20, 
+	0x00, 0x00, 0x31, 0x50, 0x00, 0x00, 0x10, 0x23, 0x00, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x13, 0x70, 
+	0x13, 0x05, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x00, 0x22, 0x00, 0x4B, 0x06, 0x23, 
+	0x80, 0x70, 0x5A, 0x69, 0x59, 0x05, 0xDB, 0x40, 0x0A, 0x4A, 0x04, 0x69, 0x59, 0x61, 0x5A, 0x40, 
+	0x0A, 0x4A, 0x03, 0x47, 0x70, 0x61, 0x5A, 0x20, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xEF, 
+	0xFF, 0xFF, 0xFF, 0x23, 0xA0, 0xB5, 0x70, 0x7A, 0x1C, 0x05, 0xDB, 0x22, 0x0F, 0x4D, 0x24, 0x78, 
+	0x2A, 0x40, 0x14, 0x2A, 0x00, 0x4E, 0x23, 0x4B, 0x23, 0xD0, 0x06, 0x47, 0x98, 0x68, 0x1B, 0x70, 
+	0x2B, 0x23, 0x00, 0xE0, 0x3A, 0x70, 0x34, 0x78, 0x32, 0x7A, 0x9B, 0xD5, 0x02, 0x07, 0xE1, 0x80, 
+	0x13, 0x4A, 0x1E, 0x21, 0x08, 0xE0, 0x07, 0xD0, 0x0A, 0x42, 0x0C, 0x78, 0x1A, 0x4B, 0x1C, 0xB2, 
+	0xD2, 0x18, 0x52, 0xF7, 0xFF, 0x70, 0x1A, 0x4B, 0x1A, 0xFF, 0x8D, 0x47, 0x98, 0x68, 0x1B, 0x07, 
+	0xA1, 0xE0, 0x19, 0x2A, 0x08, 0xD5, 0x0D, 0x2A, 0x01, 0xD0, 0x01, 0x4B, 0x16, 0xD1, 0x01, 0x4A, 
+	0x12, 0xE0, 0x02, 0x4B, 0x15, 0x80, 0x13, 0x47, 0x98, 0x68, 0x1B, 0x4B, 0x10, 0x22, 0x00, 0x07, 
+	0x63, 0xE0, 0x08, 0x4B, 0x11, 0xD5, 0x07, 0x47, 0x98, 0x68, 0x1B, 0x78, 0x1A, 0x4B, 0x0C, 0xB2, 
+	0xD2, 0x32, 0x08, 0x4B, 0x07, 0x70, 0x1A, 0x70, 0x1C, 0x22, 0x01, 0x05, 0xDB, 0x23, 0xA0, 0x49, 
+	0x0B, 0x72, 0x1A, 0x72, 0x1A, 0x22, 0x10, 0x70, 0x0A, 0x22, 0x00, 0xBD, 0x70, 0x72, 0x1A, 0x20, 
+	0x00, 0x00, 0x2C, 0x20, 0x00, 0x00, 0x2B, 0x20, 0x00, 0x00, 0x24, 0x20, 0x00, 0x00, 0x28, 0x20, 
+	0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x1C, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x18, 0x20, 
+	0x00, 0x00, 0x0C, 0x23, 0x00, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x93, 0x70, 0x53, 0x05, 0xD2, 0x46, 
+	0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x47, 0x70, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0x23, 0x80, 0xB5, 0x38, 0x21, 
+	0xFB, 0x05, 0xDB, 0x60, 0x59, 0x68, 0x5A, 0x21, 0x08, 0x68, 0x99, 0x22, 0x00, 0x60, 0x99, 0x60, 
+	0xDA, 0x68, 0xD9, 0x21, 0x80, 0x6C, 0x19, 0x64, 0x19, 0x01, 0xC9, 0x49, 0x44, 0x69, 0x19, 0x4B, 
+	0x44, 0x61, 0x19, 0xE0, 0x00, 0x49, 0x44, 0x42, 0x8B, 0xC3, 0x04, 0x4B, 0x43, 0xD3, 0xFC, 0x0A, 
+	0x9B, 0x4A, 0x43, 0x70, 0x13, 0xB2, 0xDB, 0x49, 0x43, 0x4B, 0x42, 0x0A, 0x9B, 0x68, 0x1B, 0x70, 
+	0x53, 0xB2, 0xDB, 0x68, 0x1B, 0x4B, 0x41, 0xB2, 0xDB, 0x0A, 0x9B, 0x4B, 0x40, 0x70, 0x93, 0x0A, 
+	0x9B, 0x68, 0x1B, 0x70, 0xD3, 0xB2, 0xDB, 0x70, 0x0B, 0x23, 0x00, 0xE0, 0x08, 0x23, 0x03, 0x5C, 
+	0x15, 0x1C, 0x58, 0x42, 0xA5, 0x5C, 0xD4, 0x5C, 0xD4, 0xD9, 0x07, 0xB2, 0xE4, 0x34, 0x01, 0x3B, 
+	0x01, 0x54, 0x0C, 0x2B, 0xFF, 0xB2, 0xDB, 0x4A, 0x30, 0xD1, 0xF2, 0x4A, 0x35, 0x78, 0x11, 0x1C, 
+	0x11, 0x70, 0x11, 0xD1, 0x03, 0x2B, 0xFF, 0x78, 0xDB, 0x4B, 0x2D, 0xD9, 0x04, 0x2B, 0x1E, 0x70, 
+	0x4B, 0x23, 0xFF, 0x70, 0xCB, 0x70, 0x8B, 0x4B, 0x2A, 0xE0, 0x0B, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 
+	0x2A, 0x70, 0x53, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 0x29, 0x70, 0x93, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 
+	0x28, 0x70, 0xD3, 0x2A, 0xFF, 0x78, 0xDA, 0x78, 0x9A, 0xD0, 0x08, 0xD0, 0x05, 0x2A, 0xFF, 0x2B, 
+	0xFF, 0x78, 0x5B, 0xF0, 0x00, 0xD0, 0x02, 0xBD, 0x38, 0xF8, 0x67, 0x4A, 0x23, 0x4B, 0x22, 0x60, 
+	0x13, 0x21, 0xC0, 0x00, 0x49, 0x4A, 0x22, 0x4A, 0x22, 0x60, 0x13, 0x60, 0x13, 0x48, 0x22, 0x60, 
+	0x13, 0x4A, 0x22, 0x22, 0x02, 0x4B, 0x22, 0x21, 0xC0, 0x50, 0x5A, 0x58, 0x5C, 0x40, 0x91, 0x50, 
+	0x58, 0x40, 0x20, 0x24, 0x04, 0x49, 0x1F, 0x43, 0x20, 0x69, 0x08, 0xB6, 0x62, 0x61, 0x08, 0x23, 
+	0x80, 0x60, 0x1A, 0x6C, 0x1A, 0x05, 0xDB, 0x02, 0x12, 0x22, 0x80, 0x6C, 0x1A, 0x64, 0x1A, 0x01, 
+	0xD2, 0x22, 0x80, 0x68, 0x9A, 0x64, 0x1A, 0x00, 0x52, 0x22, 0x80, 0x22, 0xA0, 0x60, 0x9A, 0x68, 
+	0x91, 0x05, 0xD2, 0x60, 0x91, 0x49, 0x14, 0x22, 0x00, 0x6C, 0x1A, 0xE7, 0xFE, 0x64, 0x1A, 0x00, 
+	0x00, 0x4F, 0x10, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x03, 0xFF, 0x20, 
+	0x00, 0x00, 0x31, 0x00, 0x00, 0x04, 0x08, 0x20, 0x00, 0x00, 0x35, 0x00, 0x00, 0x04, 0x0C, 0x00, 
+	0x00, 0x04, 0x10, 0x20, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x03, 0xF9, 0x20, 0x00, 0x00, 0x24, 0x20, 
+	0x00, 0x00, 0x18, 0x20, 0x00, 0x00, 0x1C, 0xFF, 0xFF, 0x00, 0xFF, 0x20, 0x00, 0x00, 0x20, 0xE0, 
+	0x00, 0xE1, 0x00, 0xE0, 0x00, 0xED, 0x00, 0x42, 0xC8, 0x00, 0x00, 0xFF, 0xFF, 0x47, 0x70, 0x02, 
+	0xFF, 0xFF, 0xFF, 0xFA, 0xC4, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/BOOT_120327_v7.c for-diff/drivers/input/touchscreen/mms100_ts/BOOT_120327_v7.c
--- caf/drivers/input/touchscreen/mms100_ts/BOOT_120327_v7.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/BOOT_120327_v7.c	2015-10-08 21:26:19.848845000 +0900
@@ -0,0 +1,75 @@
+static const struct firmware_data melfas_BOOT = {
+	.section_name = "BOOT",
+	.section_version = 0x02,
+	.start_page_addr = 0,
+	.end_page_addr = 0,
+	.compatible_version = 0x00,
+	.length = 1029,
+	.data = {
+	0xAE, 0xF1, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x79, 0x00, 0x00, 0x02, 0x39, 0x00, 
+	0x00, 0x02, 0x3D, 0x00, 0x00, 0x02, 0x41, 0x00, 0x00, 0x02, 0x45, 0x00, 0x00, 0x02, 0x49, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x02, 0x4D, 0x00, 0x00, 0x02, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x55, 0x00, 
+	0x00, 0x02, 0x59, 0x00, 0x00, 0x01, 0x39, 0x00, 0x00, 0x01, 0x61, 0x00, 0x00, 0x01, 0x25, 0x00, 
+	0x00, 0x02, 0x21, 0x00, 0x00, 0x02, 0x35, 0x00, 0x00, 0x02, 0x71, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x4B, 0x11, 0xB5, 0x30, 0x88, 0x1B, 0x4A, 0x11, 0x18, 0xD3, 0x78, 0x12, 0x2B, 
+	0xE1, 0xB2, 0xDB, 0x2B, 0xE5, 0xD0, 0x02, 0xE0, 0x09, 0xD1, 0x17, 0x4A, 0x0E, 0x49, 0x0D, 0x3B, 
+	0x01, 0x23, 0x04, 0x5C, 0xC8, 0xB2, 0xDB, 0x2B, 0x00, 0x54, 0x98, 0xE0, 0x0C, 0xD1, 0xF9, 0x48, 
+	0x09, 0x4C, 0x0A, 0x4A, 0x0B, 0x49, 0x0A, 0x3B, 0x01, 0x23, 0x04, 0x5C, 0xE5, 0xB2, 0xDB, 0x5C, 
+	0xCD, 0x54, 0x1D, 0x2B, 0x00, 0x54, 0x9D, 0xBD, 0x30, 0xD1, 0xF7, 0x20, 0x00, 0x00, 0x28, 0x20, 
+	0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x2D, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x35, 0x20, 
+	0x00, 0x00, 0x31, 0x50, 0x00, 0x00, 0x10, 0x23, 0x00, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x13, 0x70, 
+	0x13, 0x05, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x00, 0x22, 0x00, 0x4B, 0x06, 0x23, 
+	0x80, 0x70, 0x5A, 0x69, 0x59, 0x05, 0xDB, 0x40, 0x0A, 0x4A, 0x04, 0x69, 0x59, 0x61, 0x5A, 0x40, 
+	0x0A, 0x4A, 0x03, 0x47, 0x70, 0x61, 0x5A, 0x20, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xEF, 
+	0xFF, 0xFF, 0xFF, 0x23, 0xA0, 0xB5, 0x70, 0x7A, 0x1C, 0x05, 0xDB, 0x22, 0x0F, 0x4D, 0x24, 0x78, 
+	0x2A, 0x40, 0x14, 0x2A, 0x00, 0x4E, 0x23, 0x4B, 0x23, 0xD0, 0x06, 0x47, 0x98, 0x68, 0x1B, 0x70, 
+	0x2B, 0x23, 0x00, 0xE0, 0x3A, 0x70, 0x34, 0x78, 0x32, 0x7A, 0x9B, 0xD5, 0x02, 0x07, 0xE1, 0x80, 
+	0x13, 0x4A, 0x1E, 0x21, 0x08, 0xE0, 0x07, 0xD0, 0x0A, 0x42, 0x0C, 0x78, 0x1A, 0x4B, 0x1C, 0xB2, 
+	0xD2, 0x18, 0x52, 0xF7, 0xFF, 0x70, 0x1A, 0x4B, 0x1A, 0xFF, 0x8D, 0x47, 0x98, 0x68, 0x1B, 0x07, 
+	0xA1, 0xE0, 0x19, 0x2A, 0x08, 0xD5, 0x0D, 0x2A, 0x01, 0xD0, 0x01, 0x4B, 0x16, 0xD1, 0x01, 0x4A, 
+	0x12, 0xE0, 0x02, 0x4B, 0x15, 0x80, 0x13, 0x47, 0x98, 0x68, 0x1B, 0x4B, 0x10, 0x22, 0x00, 0x07, 
+	0x63, 0xE0, 0x08, 0x4B, 0x11, 0xD5, 0x07, 0x47, 0x98, 0x68, 0x1B, 0x78, 0x1A, 0x4B, 0x0C, 0xB2, 
+	0xD2, 0x32, 0x08, 0x4B, 0x07, 0x70, 0x1A, 0x70, 0x1C, 0x22, 0x01, 0x05, 0xDB, 0x23, 0xA0, 0x49, 
+	0x0B, 0x72, 0x1A, 0x72, 0x1A, 0x22, 0x10, 0x70, 0x0A, 0x22, 0x00, 0xBD, 0x70, 0x72, 0x1A, 0x20, 
+	0x00, 0x00, 0x2C, 0x20, 0x00, 0x00, 0x2B, 0x20, 0x00, 0x00, 0x24, 0x20, 0x00, 0x00, 0x28, 0x20, 
+	0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x1C, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x18, 0x20, 
+	0x00, 0x00, 0x0C, 0x23, 0x00, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x93, 0x70, 0x53, 0x05, 0xD2, 0x46, 
+	0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x47, 0x70, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0x23, 0x80, 0xB5, 0x38, 0x21, 
+	0xFB, 0x05, 0xDB, 0x60, 0x59, 0x68, 0x5A, 0x21, 0x08, 0x68, 0x99, 0x22, 0x00, 0x60, 0x99, 0x60, 
+	0xDA, 0x68, 0xD9, 0x21, 0x80, 0x6C, 0x19, 0x64, 0x19, 0x01, 0xC9, 0x49, 0x44, 0x69, 0x19, 0x4B, 
+	0x44, 0x61, 0x19, 0xE0, 0x00, 0x49, 0x44, 0x42, 0x8B, 0xC3, 0x04, 0x4B, 0x43, 0xD3, 0xFC, 0x0A, 
+	0x9B, 0x4A, 0x43, 0x70, 0x13, 0xB2, 0xDB, 0x49, 0x43, 0x4B, 0x42, 0x0A, 0x9B, 0x68, 0x1B, 0x70, 
+	0x53, 0xB2, 0xDB, 0x68, 0x1B, 0x4B, 0x41, 0xB2, 0xDB, 0x0A, 0x9B, 0x4B, 0x40, 0x70, 0x93, 0x0A, 
+	0x9B, 0x68, 0x1B, 0x70, 0xD3, 0xB2, 0xDB, 0x70, 0x0B, 0x23, 0x00, 0xE0, 0x08, 0x23, 0x03, 0x5C, 
+	0x15, 0x1C, 0x58, 0x42, 0xA5, 0x5C, 0xD4, 0x5C, 0xD4, 0xD9, 0x07, 0xB2, 0xE4, 0x34, 0x01, 0x3B, 
+	0x01, 0x54, 0x0C, 0x2B, 0xFF, 0xB2, 0xDB, 0x4A, 0x30, 0xD1, 0xF2, 0x4A, 0x35, 0x78, 0x11, 0x1C, 
+	0x11, 0x70, 0x11, 0xD1, 0x03, 0x2B, 0xFF, 0x78, 0xDB, 0x4B, 0x2D, 0xD9, 0x04, 0x2B, 0x1E, 0x70, 
+	0x4B, 0x23, 0xFF, 0x70, 0xCB, 0x70, 0x8B, 0x4B, 0x2A, 0xE0, 0x0B, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 
+	0x2A, 0x70, 0x53, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 0x29, 0x70, 0x93, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 
+	0x28, 0x70, 0xD3, 0x2A, 0xFF, 0x78, 0xDA, 0x78, 0x9A, 0xD0, 0x08, 0xD0, 0x05, 0x2A, 0xFF, 0x2B, 
+	0xFF, 0x78, 0x5B, 0xF0, 0x00, 0xD0, 0x02, 0xBD, 0x38, 0xF8, 0x67, 0x4A, 0x23, 0x4B, 0x22, 0x60, 
+	0x13, 0x21, 0xC0, 0x00, 0x49, 0x4A, 0x22, 0x4A, 0x22, 0x60, 0x13, 0x60, 0x13, 0x48, 0x22, 0x60, 
+	0x13, 0x4A, 0x22, 0x22, 0x02, 0x4B, 0x22, 0x21, 0xC0, 0x50, 0x5A, 0x58, 0x5C, 0x40, 0x91, 0x50, 
+	0x58, 0x40, 0x20, 0x24, 0x04, 0x49, 0x1F, 0x43, 0x20, 0x69, 0x08, 0xB6, 0x62, 0x61, 0x08, 0x23, 
+	0x80, 0x60, 0x1A, 0x6C, 0x1A, 0x05, 0xDB, 0x02, 0x12, 0x22, 0x80, 0x6C, 0x1A, 0x64, 0x1A, 0x01, 
+	0xD2, 0x22, 0x80, 0x68, 0x9A, 0x64, 0x1A, 0x00, 0x52, 0x22, 0x80, 0x22, 0xA0, 0x60, 0x9A, 0x68, 
+	0x91, 0x05, 0xD2, 0x60, 0x91, 0x49, 0x14, 0x22, 0x00, 0x6C, 0x1A, 0xE7, 0xFE, 0x64, 0x1A, 0x00, 
+	0x00, 0x4F, 0x10, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x03, 0xFF, 0x20, 
+	0x00, 0x00, 0x31, 0x00, 0x00, 0x04, 0x08, 0x20, 0x00, 0x00, 0x35, 0x00, 0x00, 0x04, 0x0C, 0x00, 
+	0x00, 0x04, 0x10, 0x20, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x03, 0xF9, 0x20, 0x00, 0x00, 0x24, 0x20, 
+	0x00, 0x00, 0x18, 0x20, 0x00, 0x00, 0x1C, 0xFF, 0xFF, 0x00, 0xFF, 0x20, 0x00, 0x00, 0x20, 0xE0, 
+	0x00, 0xE1, 0x00, 0xE0, 0x00, 0xED, 0x00, 0x42, 0xC8, 0x00, 0x00, 0xFF, 0xFF, 0x47, 0x70, 0x02, 
+	0xFF, 0xFF, 0xFF, 0xFA, 0xC4, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/BOOT_120409_v8.c for-diff/drivers/input/touchscreen/mms100_ts/BOOT_120409_v8.c
--- caf/drivers/input/touchscreen/mms100_ts/BOOT_120409_v8.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/BOOT_120409_v8.c	2015-10-08 21:26:19.848845000 +0900
@@ -0,0 +1,75 @@
+static const struct firmware_data melfas_BOOT = {
+	.section_name = "BOOT",
+	.section_version = 0x02,
+	.start_page_addr = 0,
+	.end_page_addr = 0,
+	.compatible_version = 0x00,
+	.length = 1029,
+	.data = {
+	0xAE, 0xF1, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x79, 0x00, 0x00, 0x02, 0x39, 0x00, 
+	0x00, 0x02, 0x3D, 0x00, 0x00, 0x02, 0x41, 0x00, 0x00, 0x02, 0x45, 0x00, 0x00, 0x02, 0x49, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x02, 0x4D, 0x00, 0x00, 0x02, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x55, 0x00, 
+	0x00, 0x02, 0x59, 0x00, 0x00, 0x01, 0x39, 0x00, 0x00, 0x01, 0x61, 0x00, 0x00, 0x01, 0x25, 0x00, 
+	0x00, 0x02, 0x21, 0x00, 0x00, 0x02, 0x35, 0x00, 0x00, 0x02, 0x71, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x4B, 0x11, 0xB5, 0x30, 0x88, 0x1B, 0x4A, 0x11, 0x18, 0xD3, 0x78, 0x12, 0x2B, 
+	0xE1, 0xB2, 0xDB, 0x2B, 0xE5, 0xD0, 0x02, 0xE0, 0x09, 0xD1, 0x17, 0x4A, 0x0E, 0x49, 0x0D, 0x3B, 
+	0x01, 0x23, 0x04, 0x5C, 0xC8, 0xB2, 0xDB, 0x2B, 0x00, 0x54, 0x98, 0xE0, 0x0C, 0xD1, 0xF9, 0x48, 
+	0x09, 0x4C, 0x0A, 0x4A, 0x0B, 0x49, 0x0A, 0x3B, 0x01, 0x23, 0x04, 0x5C, 0xE5, 0xB2, 0xDB, 0x5C, 
+	0xCD, 0x54, 0x1D, 0x2B, 0x00, 0x54, 0x9D, 0xBD, 0x30, 0xD1, 0xF7, 0x20, 0x00, 0x00, 0x28, 0x20, 
+	0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x2D, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x35, 0x20, 
+	0x00, 0x00, 0x31, 0x50, 0x00, 0x00, 0x10, 0x23, 0x00, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x13, 0x70, 
+	0x13, 0x05, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x00, 0x22, 0x00, 0x4B, 0x06, 0x23, 
+	0x80, 0x70, 0x5A, 0x69, 0x59, 0x05, 0xDB, 0x40, 0x0A, 0x4A, 0x04, 0x69, 0x59, 0x61, 0x5A, 0x40, 
+	0x0A, 0x4A, 0x03, 0x47, 0x70, 0x61, 0x5A, 0x20, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xEF, 
+	0xFF, 0xFF, 0xFF, 0x23, 0xA0, 0xB5, 0x70, 0x7A, 0x1C, 0x05, 0xDB, 0x22, 0x0F, 0x4D, 0x24, 0x78, 
+	0x2A, 0x40, 0x14, 0x2A, 0x00, 0x4E, 0x23, 0x4B, 0x23, 0xD0, 0x06, 0x47, 0x98, 0x68, 0x1B, 0x70, 
+	0x2B, 0x23, 0x00, 0xE0, 0x3A, 0x70, 0x34, 0x78, 0x32, 0x7A, 0x9B, 0xD5, 0x02, 0x07, 0xE1, 0x80, 
+	0x13, 0x4A, 0x1E, 0x21, 0x08, 0xE0, 0x07, 0xD0, 0x0A, 0x42, 0x0C, 0x78, 0x1A, 0x4B, 0x1C, 0xB2, 
+	0xD2, 0x18, 0x52, 0xF7, 0xFF, 0x70, 0x1A, 0x4B, 0x1A, 0xFF, 0x8D, 0x47, 0x98, 0x68, 0x1B, 0x07, 
+	0xA1, 0xE0, 0x19, 0x2A, 0x08, 0xD5, 0x0D, 0x2A, 0x01, 0xD0, 0x01, 0x4B, 0x16, 0xD1, 0x01, 0x4A, 
+	0x12, 0xE0, 0x02, 0x4B, 0x15, 0x80, 0x13, 0x47, 0x98, 0x68, 0x1B, 0x4B, 0x10, 0x22, 0x00, 0x07, 
+	0x63, 0xE0, 0x08, 0x4B, 0x11, 0xD5, 0x07, 0x47, 0x98, 0x68, 0x1B, 0x78, 0x1A, 0x4B, 0x0C, 0xB2, 
+	0xD2, 0x32, 0x08, 0x4B, 0x07, 0x70, 0x1A, 0x70, 0x1C, 0x22, 0x01, 0x05, 0xDB, 0x23, 0xA0, 0x49, 
+	0x0B, 0x72, 0x1A, 0x72, 0x1A, 0x22, 0x10, 0x70, 0x0A, 0x22, 0x00, 0xBD, 0x70, 0x72, 0x1A, 0x20, 
+	0x00, 0x00, 0x2C, 0x20, 0x00, 0x00, 0x2B, 0x20, 0x00, 0x00, 0x24, 0x20, 0x00, 0x00, 0x28, 0x20, 
+	0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x1C, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x18, 0x20, 
+	0x00, 0x00, 0x0C, 0x23, 0x00, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x93, 0x70, 0x53, 0x05, 0xD2, 0x46, 
+	0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x47, 0x70, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0x23, 0x80, 0xB5, 0x38, 0x21, 
+	0xFB, 0x05, 0xDB, 0x60, 0x59, 0x68, 0x5A, 0x21, 0x08, 0x68, 0x99, 0x22, 0x00, 0x60, 0x99, 0x60, 
+	0xDA, 0x68, 0xD9, 0x21, 0x80, 0x6C, 0x19, 0x64, 0x19, 0x01, 0xC9, 0x49, 0x44, 0x69, 0x19, 0x4B, 
+	0x44, 0x61, 0x19, 0xE0, 0x00, 0x49, 0x44, 0x42, 0x8B, 0xC3, 0x04, 0x4B, 0x43, 0xD3, 0xFC, 0x0A, 
+	0x9B, 0x4A, 0x43, 0x70, 0x13, 0xB2, 0xDB, 0x49, 0x43, 0x4B, 0x42, 0x0A, 0x9B, 0x68, 0x1B, 0x70, 
+	0x53, 0xB2, 0xDB, 0x68, 0x1B, 0x4B, 0x41, 0xB2, 0xDB, 0x0A, 0x9B, 0x4B, 0x40, 0x70, 0x93, 0x0A, 
+	0x9B, 0x68, 0x1B, 0x70, 0xD3, 0xB2, 0xDB, 0x70, 0x0B, 0x23, 0x00, 0xE0, 0x08, 0x23, 0x03, 0x5C, 
+	0x15, 0x1C, 0x58, 0x42, 0xA5, 0x5C, 0xD4, 0x5C, 0xD4, 0xD9, 0x07, 0xB2, 0xE4, 0x34, 0x01, 0x3B, 
+	0x01, 0x54, 0x0C, 0x2B, 0xFF, 0xB2, 0xDB, 0x4A, 0x30, 0xD1, 0xF2, 0x4A, 0x35, 0x78, 0x11, 0x1C, 
+	0x11, 0x70, 0x11, 0xD1, 0x03, 0x2B, 0xFF, 0x78, 0xDB, 0x4B, 0x2D, 0xD9, 0x04, 0x2B, 0x1E, 0x70, 
+	0x4B, 0x23, 0xFF, 0x70, 0xCB, 0x70, 0x8B, 0x4B, 0x2A, 0xE0, 0x0B, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 
+	0x2A, 0x70, 0x53, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 0x29, 0x70, 0x93, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 
+	0x28, 0x70, 0xD3, 0x2A, 0xFF, 0x78, 0xDA, 0x78, 0x9A, 0xD0, 0x08, 0xD0, 0x05, 0x2A, 0xFF, 0x2B, 
+	0xFF, 0x78, 0x5B, 0xF0, 0x00, 0xD0, 0x02, 0xBD, 0x38, 0xF8, 0x67, 0x4A, 0x23, 0x4B, 0x22, 0x60, 
+	0x13, 0x21, 0xC0, 0x00, 0x49, 0x4A, 0x22, 0x4A, 0x22, 0x60, 0x13, 0x60, 0x13, 0x48, 0x22, 0x60, 
+	0x13, 0x4A, 0x22, 0x22, 0x02, 0x4B, 0x22, 0x21, 0xC0, 0x50, 0x5A, 0x58, 0x5C, 0x40, 0x91, 0x50, 
+	0x58, 0x40, 0x20, 0x24, 0x04, 0x49, 0x1F, 0x43, 0x20, 0x69, 0x08, 0xB6, 0x62, 0x61, 0x08, 0x23, 
+	0x80, 0x60, 0x1A, 0x6C, 0x1A, 0x05, 0xDB, 0x02, 0x12, 0x22, 0x80, 0x6C, 0x1A, 0x64, 0x1A, 0x01, 
+	0xD2, 0x22, 0x80, 0x68, 0x9A, 0x64, 0x1A, 0x00, 0x52, 0x22, 0x80, 0x22, 0xA0, 0x60, 0x9A, 0x68, 
+	0x91, 0x05, 0xD2, 0x60, 0x91, 0x49, 0x14, 0x22, 0x00, 0x6C, 0x1A, 0xE7, 0xFE, 0x64, 0x1A, 0x00, 
+	0x00, 0x4F, 0x10, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x03, 0xFF, 0x20, 
+	0x00, 0x00, 0x31, 0x00, 0x00, 0x04, 0x08, 0x20, 0x00, 0x00, 0x35, 0x00, 0x00, 0x04, 0x0C, 0x00, 
+	0x00, 0x04, 0x10, 0x20, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x03, 0xF9, 0x20, 0x00, 0x00, 0x24, 0x20, 
+	0x00, 0x00, 0x18, 0x20, 0x00, 0x00, 0x1C, 0xFF, 0xFF, 0x00, 0xFF, 0x20, 0x00, 0x00, 0x20, 0xE0, 
+	0x00, 0xE1, 0x00, 0xE0, 0x00, 0xED, 0x00, 0x42, 0xC8, 0x00, 0x00, 0xFF, 0xFF, 0x47, 0x70, 0x02, 
+	0xFF, 0xFF, 0xFF, 0xFA, 0xC4, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/BOOT_120529_v28.c for-diff/drivers/input/touchscreen/mms100_ts/BOOT_120529_v28.c
--- caf/drivers/input/touchscreen/mms100_ts/BOOT_120529_v28.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/BOOT_120529_v28.c	2015-10-08 21:26:19.852845000 +0900
@@ -0,0 +1,75 @@
+static const struct firmware_data melfas_BOOT = {
+	.section_name = "BOOT",
+	.section_version = 0x02,
+	.start_page_addr = 0,
+	.end_page_addr = 0,
+	.compatible_version = 0x00,
+	.length = 1029,
+	.data = {
+	0xAE, 0xF1, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x79, 0x00, 0x00, 0x02, 0x39, 0x00, 
+	0x00, 0x02, 0x3D, 0x00, 0x00, 0x02, 0x41, 0x00, 0x00, 0x02, 0x45, 0x00, 0x00, 0x02, 0x49, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x02, 0x4D, 0x00, 0x00, 0x02, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x55, 0x00, 
+	0x00, 0x02, 0x59, 0x00, 0x00, 0x01, 0x39, 0x00, 0x00, 0x01, 0x61, 0x00, 0x00, 0x01, 0x25, 0x00, 
+	0x00, 0x02, 0x21, 0x00, 0x00, 0x02, 0x35, 0x00, 0x00, 0x02, 0x71, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 0x00, 0x02, 0x75, 0x00, 
+	0x00, 0x02, 0x75, 0x4B, 0x11, 0xB5, 0x30, 0x88, 0x1B, 0x4A, 0x11, 0x18, 0xD3, 0x78, 0x12, 0x2B, 
+	0xE1, 0xB2, 0xDB, 0x2B, 0xE5, 0xD0, 0x02, 0xE0, 0x09, 0xD1, 0x17, 0x4A, 0x0E, 0x49, 0x0D, 0x3B, 
+	0x01, 0x23, 0x04, 0x5C, 0xC8, 0xB2, 0xDB, 0x2B, 0x00, 0x54, 0x98, 0xE0, 0x0C, 0xD1, 0xF9, 0x48, 
+	0x09, 0x4C, 0x0A, 0x4A, 0x0B, 0x49, 0x0A, 0x3B, 0x01, 0x23, 0x04, 0x5C, 0xE5, 0xB2, 0xDB, 0x5C, 
+	0xCD, 0x54, 0x1D, 0x2B, 0x00, 0x54, 0x9D, 0xBD, 0x30, 0xD1, 0xF7, 0x20, 0x00, 0x00, 0x28, 0x20, 
+	0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x2D, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x35, 0x20, 
+	0x00, 0x00, 0x31, 0x50, 0x00, 0x00, 0x10, 0x23, 0x00, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x13, 0x70, 
+	0x13, 0x05, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x00, 0x22, 0x00, 0x4B, 0x06, 0x23, 
+	0x80, 0x70, 0x5A, 0x69, 0x59, 0x05, 0xDB, 0x40, 0x0A, 0x4A, 0x04, 0x69, 0x59, 0x61, 0x5A, 0x40, 
+	0x0A, 0x4A, 0x03, 0x47, 0x70, 0x61, 0x5A, 0x20, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xEF, 
+	0xFF, 0xFF, 0xFF, 0x23, 0xA0, 0xB5, 0x70, 0x7A, 0x1C, 0x05, 0xDB, 0x22, 0x0F, 0x4D, 0x24, 0x78, 
+	0x2A, 0x40, 0x14, 0x2A, 0x00, 0x4E, 0x23, 0x4B, 0x23, 0xD0, 0x06, 0x47, 0x98, 0x68, 0x1B, 0x70, 
+	0x2B, 0x23, 0x00, 0xE0, 0x3A, 0x70, 0x34, 0x78, 0x32, 0x7A, 0x9B, 0xD5, 0x02, 0x07, 0xE1, 0x80, 
+	0x13, 0x4A, 0x1E, 0x21, 0x08, 0xE0, 0x07, 0xD0, 0x0A, 0x42, 0x0C, 0x78, 0x1A, 0x4B, 0x1C, 0xB2, 
+	0xD2, 0x18, 0x52, 0xF7, 0xFF, 0x70, 0x1A, 0x4B, 0x1A, 0xFF, 0x8D, 0x47, 0x98, 0x68, 0x1B, 0x07, 
+	0xA1, 0xE0, 0x19, 0x2A, 0x08, 0xD5, 0x0D, 0x2A, 0x01, 0xD0, 0x01, 0x4B, 0x16, 0xD1, 0x01, 0x4A, 
+	0x12, 0xE0, 0x02, 0x4B, 0x15, 0x80, 0x13, 0x47, 0x98, 0x68, 0x1B, 0x4B, 0x10, 0x22, 0x00, 0x07, 
+	0x63, 0xE0, 0x08, 0x4B, 0x11, 0xD5, 0x07, 0x47, 0x98, 0x68, 0x1B, 0x78, 0x1A, 0x4B, 0x0C, 0xB2, 
+	0xD2, 0x32, 0x08, 0x4B, 0x07, 0x70, 0x1A, 0x70, 0x1C, 0x22, 0x01, 0x05, 0xDB, 0x23, 0xA0, 0x49, 
+	0x0B, 0x72, 0x1A, 0x72, 0x1A, 0x22, 0x10, 0x70, 0x0A, 0x22, 0x00, 0xBD, 0x70, 0x72, 0x1A, 0x20, 
+	0x00, 0x00, 0x2C, 0x20, 0x00, 0x00, 0x2B, 0x20, 0x00, 0x00, 0x24, 0x20, 0x00, 0x00, 0x28, 0x20, 
+	0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x1C, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x18, 0x20, 
+	0x00, 0x00, 0x0C, 0x23, 0x00, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x93, 0x70, 0x53, 0x05, 0xD2, 0x46, 
+	0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x47, 0x70, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 
+	0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0xE7, 0xFE, 0xB5, 0x00, 0x23, 0x80, 0xB5, 0x38, 0x21, 
+	0xFB, 0x05, 0xDB, 0x60, 0x59, 0x68, 0x5A, 0x21, 0x08, 0x68, 0x99, 0x22, 0x00, 0x60, 0x99, 0x60, 
+	0xDA, 0x68, 0xD9, 0x21, 0x80, 0x6C, 0x19, 0x64, 0x19, 0x01, 0xC9, 0x49, 0x44, 0x69, 0x19, 0x4B, 
+	0x44, 0x61, 0x19, 0xE0, 0x00, 0x49, 0x44, 0x42, 0x8B, 0xC3, 0x04, 0x4B, 0x43, 0xD3, 0xFC, 0x0A, 
+	0x9B, 0x4A, 0x43, 0x70, 0x13, 0xB2, 0xDB, 0x49, 0x43, 0x4B, 0x42, 0x0A, 0x9B, 0x68, 0x1B, 0x70, 
+	0x53, 0xB2, 0xDB, 0x68, 0x1B, 0x4B, 0x41, 0xB2, 0xDB, 0x0A, 0x9B, 0x4B, 0x40, 0x70, 0x93, 0x0A, 
+	0x9B, 0x68, 0x1B, 0x70, 0xD3, 0xB2, 0xDB, 0x70, 0x0B, 0x23, 0x00, 0xE0, 0x08, 0x23, 0x03, 0x5C, 
+	0x15, 0x1C, 0x58, 0x42, 0xA5, 0x5C, 0xD4, 0x5C, 0xD4, 0xD9, 0x07, 0xB2, 0xE4, 0x34, 0x01, 0x3B, 
+	0x01, 0x54, 0x0C, 0x2B, 0xFF, 0xB2, 0xDB, 0x4A, 0x30, 0xD1, 0xF2, 0x4A, 0x35, 0x78, 0x11, 0x1C, 
+	0x11, 0x70, 0x11, 0xD1, 0x03, 0x2B, 0xFF, 0x78, 0xDB, 0x4B, 0x2D, 0xD9, 0x04, 0x2B, 0x1E, 0x70, 
+	0x4B, 0x23, 0xFF, 0x70, 0xCB, 0x70, 0x8B, 0x4B, 0x2A, 0xE0, 0x0B, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 
+	0x2A, 0x70, 0x53, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 0x29, 0x70, 0x93, 0x78, 0x1B, 0x68, 0x1B, 0x4B, 
+	0x28, 0x70, 0xD3, 0x2A, 0xFF, 0x78, 0xDA, 0x78, 0x9A, 0xD0, 0x08, 0xD0, 0x05, 0x2A, 0xFF, 0x2B, 
+	0xFF, 0x78, 0x5B, 0xF0, 0x00, 0xD0, 0x02, 0xBD, 0x38, 0xF8, 0x67, 0x4A, 0x23, 0x4B, 0x22, 0x60, 
+	0x13, 0x21, 0xC0, 0x00, 0x49, 0x4A, 0x22, 0x4A, 0x22, 0x60, 0x13, 0x60, 0x13, 0x48, 0x22, 0x60, 
+	0x13, 0x4A, 0x22, 0x22, 0x02, 0x4B, 0x22, 0x21, 0xC0, 0x50, 0x5A, 0x58, 0x5C, 0x40, 0x91, 0x50, 
+	0x58, 0x40, 0x20, 0x24, 0x04, 0x49, 0x1F, 0x43, 0x20, 0x69, 0x08, 0xB6, 0x62, 0x61, 0x08, 0x23, 
+	0x80, 0x60, 0x1A, 0x6C, 0x1A, 0x05, 0xDB, 0x02, 0x12, 0x22, 0x80, 0x6C, 0x1A, 0x64, 0x1A, 0x01, 
+	0xD2, 0x22, 0x80, 0x68, 0x9A, 0x64, 0x1A, 0x00, 0x52, 0x22, 0x80, 0x22, 0xA0, 0x60, 0x9A, 0x68, 
+	0x91, 0x05, 0xD2, 0x60, 0x91, 0x49, 0x14, 0x22, 0x00, 0x6C, 0x1A, 0xE7, 0xFE, 0x64, 0x1A, 0x00, 
+	0x00, 0x4F, 0x10, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x03, 0xFF, 0x20, 
+	0x00, 0x00, 0x31, 0x00, 0x00, 0x04, 0x08, 0x20, 0x00, 0x00, 0x35, 0x00, 0x00, 0x04, 0x0C, 0x00, 
+	0x00, 0x04, 0x10, 0x20, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x03, 0xF9, 0x20, 0x00, 0x00, 0x24, 0x20, 
+	0x00, 0x00, 0x18, 0x20, 0x00, 0x00, 0x1C, 0xFF, 0xFF, 0x00, 0xFF, 0x20, 0x00, 0x00, 0x20, 0xE0, 
+	0x00, 0xE1, 0x00, 0xE0, 0x00, 0xED, 0x00, 0x42, 0xC8, 0x00, 0x00, 0xFF, 0xFF, 0x47, 0x70, 0x02, 
+	0xFF, 0xFF, 0xFF, 0xFA, 0xC4, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/CORE_120223_v1.c for-diff/drivers/input/touchscreen/mms100_ts/CORE_120223_v1.c
--- caf/drivers/input/touchscreen/mms100_ts/CORE_120223_v1.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/CORE_120223_v1.c	2015-10-08 21:26:19.912845000 +0900
@@ -0,0 +1,1425 @@
+static const struct firmware_data melfas_CORE = {
+	.section_name = "CORE",
+	.section_version = 0x45,
+	.start_page_addr = 1,
+	.end_page_addr = 22,
+	.compatible_version = 0x02,
+	.length = 22638,
+	.data = {
+	0xAE, 0xF1, 0x01, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x4F, 0x43, 0x00, 0x00, 0x5B, 0xFF, 0x00, 
+	0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0xF0, 0x03, 0xB5, 0xF7, 0xF0, 0x05, 0xFC, 0xC3, 0x20, 
+	0x00, 0xF8, 0x33, 0xFB, 0xF2, 0xF0, 0x05, 0x33, 0x33, 0x4B, 0x4E, 0x42, 0x5E, 0x78, 0x1B, 0x26, 
+	0x10, 0x41, 0x73, 0x4B, 0x4C, 0x1A, 0xF6, 0x4B, 0x4C, 0x70, 0x1E, 0x3A, 0x01, 0x68, 0x1A, 0x41, 
+	0x5A, 0x42, 0x53, 0x70, 0x1A, 0x4B, 0x4A, 0x78, 0x1C, 0x4B, 0x4A, 0xD1, 0x22, 0x2C, 0x00, 0x25, 
+	0x01, 0x4A, 0x49, 0x70, 0x1D, 0x70, 0x14, 0xFA, 0x52, 0xF0, 0x00, 0x1C, 0x28, 0x4B, 0x47, 0x70, 
+	0x9A, 0x78, 0xDA, 0xF0, 0x05, 0x70, 0x5C, 0xF0, 0x03, 0xFB, 0xD1, 0xF0, 0x01, 0xFB, 0x7F, 0x23, 
+	0x80, 0xFB, 0x17, 0x6C, 0x1A, 0x05, 0xDB, 0x43, 0x8A, 0x21, 0x7F, 0xF0, 0x00, 0x64, 0x1A, 0xF0, 
+	0x02, 0xFD, 0xF5, 0xF0, 0x01, 0xFF, 0x4B, 0xF0, 0x01, 0xFB, 0x0B, 0x4B, 0x3C, 0xFA, 0xA3, 0x68, 
+	0x1B, 0x20, 0x02, 0x4C, 0x3B, 0x47, 0x98, 0x2B, 0x00, 0x78, 0x23, 0x4B, 0x3A, 0xD1, 0x03, 0x2B, 
+	0x00, 0x78, 0x1B, 0x78, 0x23, 0xD0, 0x0F, 0xFC, 0x94, 0xF0, 0x00, 0x4B, 0x2E, 0x78, 0x22, 0xD0, 
+	0x01, 0x2A, 0x00, 0xE0, 0x01, 0x70, 0x1E, 0x70, 0x1A, 0x22, 0x0D, 0x23, 0x00, 0x4A, 0x31, 0x4A, 
+	0x31, 0x70, 0x13, 0x4B, 0x2C, 0x70, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4D, 0x2F, 0xD0, 0x2C, 0x2B, 
+	0x00, 0x78, 0x2B, 0x4C, 0x2A, 0xD0, 0x28, 0x68, 0x23, 0x20, 0x13, 0xF0, 0x00, 0x47, 0x98, 0xF0, 
+	0x03, 0xFA, 0x0F, 0xF0, 0x03, 0xFB, 0x08, 0x4B, 0x29, 0xFA, 0x8B, 0xF0, 0x01, 0x78, 0x18, 0xF0, 
+	0x00, 0xF8, 0xA1, 0x4A, 0x27, 0xFD, 0xC7, 0x70, 0x13, 0x23, 0x01, 0x80, 0x13, 0x4A, 0x26, 0xFF, 
+	0xDE, 0xF0, 0x02, 0x2B, 0x00, 0x78, 0x2B, 0x68, 0x23, 0xD1, 0xFC, 0x47, 0x98, 0x20, 0x14, 0xF9, 
+	0xF6, 0xF0, 0x00, 0xFA, 0xEF, 0xF0, 0x03, 0xFA, 0x72, 0xF0, 0x03, 0x78, 0x18, 0x4B, 0x1C, 0xF8, 
+	0x88, 0xF0, 0x01, 0x70, 0x1E, 0x4B, 0x10, 0xFF, 0x7E, 0xF0, 0x00, 0x78, 0x27, 0x4C, 0x0E, 0x28, 
+	0x13, 0xB2, 0x78, 0xE1, 0x8D, 0xD9, 0x00, 0xF8, 0xD4, 0xF0, 0x05, 0x01, 0x8C, 0x00, 0x74, 0x01, 
+	0x8C, 0x01, 0x78, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 
+	0x8C, 0x01, 0x8C, 0x00, 0x68, 0x01, 0x8C, 0x00, 0x3A, 0x01, 0x8C, 0x00, 0x5F, 0x00, 0x30, 0x01, 
+	0x89, 0x01, 0x8C, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x11, 0x50, 0x20, 
+	0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0xE9, 0x20, 0x00, 0x01, 0xEA, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x01, 0xF8, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x01, 0xE7, 0x20, 0x00, 0x01, 0xE5, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x03, 0x08, 0x22, 0x00, 0x4B, 0xB1, 0xF0, 
+	0x00, 0x70, 0x1A, 0x4B, 0xB0, 0xFE, 0x7D, 0x2B, 0x00, 0x78, 0x1B, 0xE1, 0x55, 0xD0, 0x00, 0x78, 
+	0x23, 0x4C, 0xAE, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0xAD, 0x20, 0x00, 0xFC, 0xB8, 0xF0, 0x03, 0x2B, 
+	0x00, 0x78, 0x23, 0x21, 0x01, 0xD0, 0x06, 0x4A, 0xAA, 0x20, 0x00, 0x90, 0x00, 0x1C, 0x0B, 0xFC, 
+	0x56, 0xF0, 0x03, 0x78, 0x98, 0x4B, 0xA8, 0xFA, 0x78, 0xF0, 0x03, 0x7B, 0xE8, 0x4D, 0xA7, 0xF8, 
+	0x52, 0xF0, 0x03, 0x60, 0x20, 0x4C, 0xA6, 0xF0, 0x03, 0x7C, 0x28, 0x23, 0x11, 0xF8, 0x4D, 0x56, 
+	0xEB, 0x60, 0x60, 0x43, 0x53, 0x7B, 0xEA, 0x4B, 0x9A, 0x60, 0xA3, 0x70, 0x1A, 0x22, 0x00, 0x78, 
+	0x1B, 0x4B, 0xA0, 0x78, 0x18, 0x4B, 0xA0, 0xF8, 0x14, 0xF0, 0x01, 0x4D, 0x9D, 0x4B, 0x95, 0x70, 
+	0x1C, 0x24, 0x00, 0xF0, 0x00, 0x78, 0x2B, 0xF0, 0x03, 0xFD, 0x29, 0xF0, 0x00, 0xFF, 0x8B, 0x70, 
+	0x2C, 0xFD, 0x25, 0x24, 0x01, 0x4B, 0x8F, 0xF0, 0x00, 0x70, 0x1C, 0x4B, 0x97, 0xFC, 0x9B, 0x05, 
+	0x9A, 0x68, 0x1B, 0x4A, 0x96, 0xD5, 0x13, 0x20, 0x04, 0x4B, 0x96, 0x4B, 0x96, 0x60, 0x1A, 0x43, 
+	0x01, 0x68, 0x19, 0x68, 0x19, 0x60, 0x19, 0x43, 0x81, 0x20, 0x02, 0x68, 0x19, 0x60, 0x19, 0x60, 
+	0x1C, 0x43, 0x0C, 0x21, 0x00, 0x4B, 0x91, 0x4B, 0x91, 0x60, 0x19, 0x4C, 0x91, 0x60, 0x1A, 0x68, 
+	0x23, 0x20, 0x03, 0xF0, 0x03, 0x47, 0x98, 0x68, 0x23, 0xF8, 0x3F, 0x47, 0x98, 0x20, 0x05, 0xFF, 
+	0xE4, 0xF0, 0x02, 0x4D, 0x8D, 0x4C, 0x8C, 0x42, 0x40, 0x20, 0x01, 0x1C, 0x2A, 0x1C, 0x21, 0xFC, 
+	0x4C, 0xF0, 0x04, 0x78, 0x1B, 0x4B, 0x79, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x88, 0x20, 0x0C, 0xFC, 
+	0x4E, 0xF0, 0x03, 0x68, 0x23, 0x4A, 0x87, 0x68, 0x2B, 0x80, 0x13, 0x4B, 0x73, 0x80, 0x53, 0x2B, 
+	0x00, 0x78, 0x1B, 0x23, 0x01, 0xD0, 0x06, 0x93, 0x00, 0x21, 0x02, 0x1C, 0x0B, 0x20, 0x0C, 0xFB, 
+	0xE6, 0xF0, 0x03, 0x20, 0x06, 0x4C, 0x7B, 0x47, 0x98, 0x68, 0x23, 0xFF, 0xF4, 0xF0, 0x03, 0xF9, 
+	0x64, 0xF0, 0x04, 0xFB, 0x98, 0xF0, 0x04, 0xF9, 0x62, 0xF0, 0x00, 0xFD, 0x06, 0xF0, 0x04, 0xFE, 
+	0x7E, 0xF0, 0x04, 0x78, 0x1B, 0x4B, 0x78, 0xD1, 0x2A, 0x2B, 0x00, 0x20, 0x07, 0x68, 0x23, 0xF0, 
+	0x01, 0x47, 0x98, 0x68, 0x23, 0xFA, 0x51, 0x47, 0x98, 0x20, 0x08, 0xFF, 0xB2, 0xF0, 0x02, 0xFF, 
+	0xBA, 0xF0, 0x02, 0x20, 0x09, 0x68, 0x23, 0xF0, 0x01, 0x47, 0x98, 0xF0, 0x01, 0xFA, 0x69, 0x68, 
+	0x23, 0xFB, 0xD1, 0x47, 0x98, 0x20, 0x0A, 0xFC, 0x6E, 0xF0, 0x01, 0xFB, 0x44, 0xF0, 0x02, 0x20, 
+	0x0B, 0x68, 0x23, 0xF0, 0x01, 0x47, 0x98, 0xF0, 0x01, 0xFE, 0xB8, 0x68, 0x23, 0xFF, 0xD7, 0x47, 
+	0x98, 0x20, 0x0E, 0xF8, 0x84, 0xF0, 0x02, 0xF9, 0xF2, 0xF0, 0x02, 0x20, 0x10, 0x68, 0x23, 0xF0, 
+	0x00, 0x47, 0x98, 0x4B, 0x5B, 0xF9, 0x81, 0x68, 0x1B, 0x20, 0x0F, 0x4B, 0x5E, 0x47, 0x98, 0x2B, 
+	0x00, 0x78, 0x1B, 0xF0, 0x02, 0xD1, 0x3C, 0x4B, 0x5C, 0xFA, 0x4F, 0x4B, 0x5C, 0x68, 0x1A, 0xD1, 
+	0x04, 0x2A, 0x00, 0x68, 0x09, 0x49, 0x5B, 0xDD, 0x00, 0x29, 0x00, 0x4A, 0x47, 0x70, 0x1A, 0x32, 
+	0x32, 0x78, 0x19, 0x42, 0x91, 0x78, 0x12, 0x22, 0x00, 0xD3, 0x01, 0x78, 0x1B, 0x70, 0x1A, 0xD1, 
+	0x21, 0x2B, 0x00, 0x4C, 0x51, 0x4B, 0x53, 0x2B, 0x00, 0x68, 0x1B, 0x68, 0x20, 0xDD, 0x09, 0xD1, 
+	0x06, 0x28, 0x00, 0x78, 0x1B, 0x4B, 0x39, 0xD0, 0x02, 0x2B, 0x00, 0xF0, 0x03, 0x49, 0x4E, 0x4B, 
+	0x4E, 0xFB, 0xCF, 0x47, 0x98, 0x68, 0x1B, 0x2B, 0x00, 0x68, 0x23, 0x4B, 0x49, 0xDD, 0x0A, 0x28, 
+	0x00, 0x68, 0x18, 0x4B, 0x31, 0xD1, 0x06, 0x2B, 0x00, 0x78, 0x1B, 0x49, 0x48, 0xD0, 0x02, 0xFB, 
+	0xBE, 0xF0, 0x03, 0xFA, 0x72, 0xF0, 0x02, 0x78, 0x1A, 0x4B, 0x41, 0x70, 0x1A, 0x32, 0x01, 0x68, 
+	0x1B, 0x4B, 0x32, 0xD5, 0x23, 0x05, 0x9A, 0x68, 0x18, 0x4B, 0x34, 0x79, 0x1A, 0x4B, 0x2A, 0x4B, 
+	0x2F, 0x78, 0x19, 0x1C, 0x53, 0x1A, 0x18, 0xF0, 0x04, 0x40, 0x98, 0x4C, 0x23, 0xFF, 0x8D, 0x78, 
+	0x23, 0x4D, 0x2F, 0x2B, 0x00, 0x60, 0x28, 0x20, 0x00, 0xD0, 0x03, 0xF0, 0x03, 0x49, 0x39, 0x78, 
+	0x23, 0xFB, 0x9F, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x01, 0x20, 0x00, 0x23, 0x04, 0x1C, 0x2A, 0xF0, 
+	0x03, 0x90, 0x00, 0xF8, 0xB2, 0xAE, 0xF1, 0x02, 0x4B, 0x24, 0xFB, 0x3D, 0x68, 0x1A, 0x21, 0x01, 
+	0x60, 0x1A, 0x43, 0x8A, 0x05, 0xDB, 0x23, 0x80, 0x21, 0x01, 0x6C, 0x9A, 0x64, 0x9A, 0x43, 0x0A, 
+	0xFC, 0x1E, 0xF0, 0x00, 0x20, 0x00, 0x4B, 0x2D, 0xF0, 0x00, 0x56, 0x18, 0xE0, 0x17, 0xFE, 0x5D, 
+	0x78, 0x1B, 0x4B, 0x0F, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x29, 0x20, 0x05, 0xFB, 0x7A, 0xF0, 0x03, 
+	0xF0, 0x00, 0x20, 0x01, 0x20, 0x00, 0xFE, 0xF9, 0xFE, 0xF6, 0xF0, 0x00, 0x70, 0x23, 0x23, 0x13, 
+	0xF0, 0x00, 0xE0, 0x06, 0xE0, 0x03, 0xFC, 0x0D, 0x20, 0x11, 0x4B, 0x13, 0x47, 0x98, 0x68, 0x1B, 
+	0x70, 0x1F, 0x4B, 0x20, 0x46, 0xC0, 0xE5, 0xEB, 0x20, 0x00, 0x01, 0xEA, 0x20, 0x00, 0x01, 0xE0, 
+	0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x34, 0x20, 0x00, 0x0A, 0xAC, 0x20, 0x00, 0x0A, 0xAA, 
+	0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0xFC, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x00, 0x58, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 0x10, 
+	0xE0, 0x00, 0xE0, 0x18, 0x20, 0x00, 0x01, 0xFC, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x11, 0x34, 
+	0x20, 0x00, 0x11, 0x38, 0x00, 0x00, 0x59, 0x38, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x11, 0x48, 
+	0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0xCA, 0x20, 0x00, 0x0D, 0x9C, 0x00, 0x00, 0x59, 0x3E, 
+	0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x59, 0x47, 0x00, 0x00, 0x59, 0x51, 0x20, 0x00, 0x01, 0xB3, 
+	0x00, 0x00, 0x59, 0x5E, 0x20, 0x00, 0x00, 0x56, 0xF0, 0x01, 0xB5, 0x08, 0xF0, 0x01, 0xFD, 0x99, 
+	0x4B, 0x03, 0xFD, 0xB3, 0x47, 0x98, 0x68, 0x1B, 0xF9, 0xD2, 0xF0, 0x02, 0x46, 0xC0, 0xBD, 0x08, 
+	0x20, 0x00, 0x02, 0x00, 0xF0, 0x04, 0xB5, 0x10, 0x4C, 0x05, 0xFD, 0xEF, 0x68, 0x23, 0x20, 0x00, 
+	0xF0, 0x04, 0x47, 0x98, 0x68, 0x23, 0xFE, 0x19, 0x47, 0x98, 0x20, 0x01, 0x46, 0xC0, 0xBD, 0x10, 
+	0x20, 0x00, 0x01, 0xF8, 0x4D, 0x17, 0xB5, 0x7F, 0x1B, 0x5B, 0x4B, 0x17, 0x4B, 0x17, 0x93, 0x03, 
+	0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x06, 0xAA, 0x03, 0x21, 0x01, 0x90, 0x00, 0x23, 0x04, 
+	0xFA, 0xA0, 0xF0, 0x03, 0xE0, 0x18, 0x4E, 0x12, 0xDD, 0x00, 0x2C, 0x14, 0xB2, 0xE1, 0x24, 0x14, 
+	0xE0, 0x03, 0x1C, 0x08, 0xB2, 0xC0, 0x38, 0x01, 0x54, 0x33, 0x5C, 0x2B, 0xD1, 0xF9, 0x28, 0x00, 
+	0x78, 0x1B, 0x4B, 0x0A, 0xD0, 0x04, 0x2B, 0x00, 0x23, 0x01, 0x4A, 0x09, 0xF0, 0x03, 0x90, 0x00, 
+	0x9B, 0x03, 0xFA, 0x89, 0x1B, 0x1B, 0x19, 0x2D, 0x9C, 0x03, 0x93, 0x03, 0xD1, 0xE3, 0x2C, 0x00, 
+	0x46, 0xC0, 0xBD, 0x7F, 0x20, 0x00, 0x1E, 0x0C, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x01, 0xEB, 
+	0x20, 0x00, 0x11, 0x54, 0x4B, 0x1E, 0xB5, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4C, 0x1D, 0xD0, 0x37, 
+	0x70, 0x23, 0x23, 0x00, 0x20, 0x04, 0x4B, 0x1C, 0x47, 0x98, 0x68, 0x1B, 0x4A, 0x1C, 0x4B, 0x1B, 
+	0x68, 0x1B, 0x68, 0x59, 0x80, 0x53, 0x80, 0x11, 0x78, 0x1B, 0x4B, 0x1A, 0xD0, 0x06, 0x2B, 0x00, 
+	0x21, 0x02, 0x23, 0x01, 0x20, 0x18, 0x93, 0x00, 0xF0, 0x03, 0x1C, 0x0B, 0x78, 0x23, 0xFA, 0x5B, 
+	0x2B, 0x00, 0x4C, 0x15, 0x4B, 0x13, 0xD0, 0x1A, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x03, 
+	0xF0, 0x03, 0x49, 0x12, 0x4A, 0x12, 0xFA, 0xA7, 0x70, 0x13, 0x23, 0x01, 0x2A, 0x02, 0x68, 0x22, 
+	0x18, 0xD2, 0xDC, 0x04, 0x4A, 0x0F, 0x60, 0x22, 0xE0, 0x08, 0x70, 0x13, 0xFF, 0x74, 0xF7, 0xFF, 
+	0x22, 0x0D, 0x4B, 0x0D, 0x23, 0x00, 0x70, 0x1A, 0xE0, 0x00, 0x60, 0x23, 0xBD, 0x13, 0x60, 0x23, 
+	0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x11, 0x3D, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x01, 0x70, 
+	0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0x84, 0x00, 0x00, 0x58, 0xD0, 
+	0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0xBA, 0xB5, 0xF0, 
+	0x33, 0x04, 0xB0, 0x85, 0x24, 0x00, 0x7F, 0xDB, 0x22, 0x0A, 0x49, 0xB8, 0x3B, 0x01, 0xE0, 0x09, 
+	0x1C, 0x10, 0xB2, 0xDB, 0x18, 0x08, 0x43, 0x58, 0x5F, 0x40, 0x25, 0x3C, 0xD0, 0x00, 0x28, 0x00, 
+	0x2B, 0x00, 0x24, 0x01, 0x4B, 0xB2, 0xD1, 0xF3, 0x78, 0x1B, 0x4A, 0xB2, 0x3B, 0x01, 0xE0, 0x07, 
+	0x1D, 0x19, 0xB2, 0xDB, 0x5E, 0x89, 0x00, 0x49, 0xD0, 0x00, 0x29, 0x00, 0x2B, 0x00, 0x24, 0x01, 
+	0x4A, 0xAD, 0xD1, 0xF5, 0xD1, 0x04, 0x2C, 0x00, 0x49, 0xAC, 0x68, 0x13, 0xD0, 0x01, 0x42, 0x8B, 
+	0x60, 0x13, 0x33, 0x01, 0x22, 0x00, 0x4B, 0xAA, 0x4B, 0xA4, 0x70, 0x1A, 0x4B, 0xA2, 0x68, 0x1A, 
+	0xD1, 0x7C, 0x2A, 0x00, 0x68, 0x12, 0x4A, 0xA3, 0xD1, 0x78, 0x2A, 0x00, 0x32, 0x34, 0x1C, 0x1A, 
+	0x28, 0x00, 0x78, 0x10, 0x4A, 0xA3, 0xD1, 0x41, 0x2A, 0x01, 0x78, 0x12, 0x4B, 0xA2, 0xD1, 0x17, 
+	0x4B, 0xA2, 0x70, 0x18, 0x4B, 0xA2, 0x70, 0x1A, 0x4B, 0xA2, 0x70, 0x18, 0x2B, 0x00, 0x78, 0x1B, 
+	0x49, 0xA1, 0xD0, 0x02, 0xFA, 0x2E, 0xF0, 0x03, 0x22, 0x01, 0x4B, 0x99, 0xF0, 0x01, 0x70, 0x1A, 
+	0xF0, 0x01, 0xFC, 0x9F, 0x4B, 0x97, 0xFC, 0xB9, 0x70, 0x1A, 0x22, 0x00, 0x4A, 0x9B, 0xE1, 0x67, 
+	0x78, 0x1B, 0x33, 0x3C, 0x42, 0x9A, 0x68, 0x12, 0x4B, 0x96, 0xDB, 0x1F, 0x2B, 0x00, 0x78, 0x1B, 
+	0x49, 0x97, 0xD0, 0x02, 0xFA, 0x16, 0xF0, 0x03, 0x49, 0x87, 0x4B, 0x96, 0x31, 0x3D, 0x68, 0x1A, 
+	0x60, 0x1A, 0x32, 0x01, 0x42, 0x8A, 0x78, 0x09, 0x20, 0x00, 0xDB, 0x0F, 0x4B, 0x8A, 0x60, 0x18, 
+	0x4B, 0x8A, 0x70, 0x18, 0x4B, 0x8B, 0x70, 0x18, 0x42, 0x83, 0x78, 0x1B, 0x49, 0x8E, 0xD0, 0x02, 
+	0xFA, 0x00, 0xF0, 0x03, 0x22, 0x02, 0x4B, 0x82, 0x4B, 0x85, 0x70, 0x1A, 0x21, 0x00, 0x4A, 0x8B, 
+	0x68, 0x10, 0x70, 0x19, 0x60, 0x19, 0x4B, 0x85, 0x42, 0x88, 0x1C, 0x13, 0x38, 0x01, 0xDD, 0x0E, 
+	0x42, 0x8C, 0x60, 0x10, 0x60, 0x11, 0xD0, 0x00, 0x2A, 0x01, 0x68, 0x1A, 0xE1, 0x18, 0xD0, 0x00, 
+	0x60, 0x1A, 0x22, 0x00, 0x22, 0x03, 0x4B, 0x76, 0xE1, 0x28, 0x70, 0x1A, 0x49, 0x81, 0x4B, 0x80, 
+	0x8F, 0xDB, 0x33, 0x04, 0xD1, 0x00, 0x42, 0x8B, 0x49, 0x7F, 0xE1, 0x0B, 0x42, 0x99, 0x68, 0x09, 
+	0xE1, 0x06, 0xDA, 0x00, 0x48, 0x6C, 0x4B, 0x68, 0x31, 0x3E, 0x1C, 0x19, 0x68, 0x00, 0x78, 0x09, 
+	0xDA, 0x00, 0x42, 0x88, 0x33, 0x3F, 0xE0, 0xFD, 0x60, 0x13, 0x78, 0x1B, 0x33, 0x04, 0xE0, 0xF9, 
+	0x23, 0x00, 0x7F, 0xD8, 0x49, 0x75, 0x1C, 0x1A, 0x38, 0x01, 0xE0, 0x31, 0x24, 0x0A, 0xB2, 0xC0, 
+	0x4F, 0x5E, 0x43, 0x44, 0x26, 0x3C, 0x19, 0x3D, 0x2D, 0x00, 0x5F, 0xAD, 0x19, 0x0C, 0xDD, 0x27, 
+	0x5F, 0xE4, 0x27, 0x3C, 0xDD, 0x22, 0x2C, 0x00, 0x19, 0x0D, 0x00, 0x44, 0x4D, 0x57, 0x88, 0xAF, 
+	0x19, 0x2C, 0xB2, 0x3E, 0xB2, 0x25, 0x88, 0xA4, 0xD4, 0x02, 0x1B, 0x76, 0xB2, 0xA4, 0x1B, 0x3C, 
+	0x1B, 0xE4, 0xE0, 0x01, 0x1C, 0x05, 0xB2, 0xA4, 0x4F, 0x50, 0x4E, 0x64, 0x00, 0x6D, 0x35, 0x10, 
+	0x5B, 0xAC, 0x18, 0xA2, 0xB2, 0x27, 0x5B, 0xED, 0xB2, 0x92, 0xB2, 0x2E, 0xD4, 0x02, 0x1B, 0xBF, 
+	0xB2, 0xA4, 0x1B, 0x64, 0x1B, 0x2C, 0xE0, 0x01, 0x21, 0xFF, 0xAE, 0xF1, 0x03, 0x18, 0xE3, 0xB2, 
+	0xA4, 0x28, 0x00, 0xB2, 0x9B, 0x49, 0x56, 0xD1, 0xCB, 0x49, 0x4D, 0x60, 0x08, 0x49, 0x43, 0x78, 
+	0x0C, 0xD0, 0x40, 0x2C, 0x00, 0x78, 0x0B, 0x31, 0x34, 0xD0, 0x00, 0x2B, 0x00, 0x4B, 0x4A, 0xE0, 
+	0xB3, 0x2B, 0x00, 0x78, 0x1B, 0x49, 0x53, 0xD0, 0x02, 0xF9, 0x7E, 0xF0, 0x03, 0x4A, 0x52, 0x4C, 
+	0x4F, 0x80, 0x13, 0x68, 0x23, 0x68, 0x1B, 0x4B, 0x51, 0x4B, 0x43, 0x80, 0x53, 0x2B, 0x00, 0x78, 
+	0x1B, 0x23, 0x01, 0xD0, 0x06, 0x93, 0x00, 0x21, 0x02, 0x1C, 0x0B, 0x20, 0x00, 0xF9, 0x14, 0xF0, 
+	0x03, 0x68, 0x20, 0x49, 0x32, 0x4B, 0x3B, 0x8F, 0x4A, 0xDA, 0x14, 0x42, 0x90, 0x48, 0x47, 0x4A, 
+	0x41, 0x78, 0x12, 0x32, 0x45, 0x42, 0x90, 0x68, 0x00, 0x78, 0x1B, 0xDA, 0x0D, 0xD0, 0x00, 0x2B, 
+	0x00, 0x4B, 0x37, 0xE0, 0x89, 0x68, 0x1A, 0x31, 0x3C, 0x42, 0x8A, 0x78, 0x09, 0xE0, 0x82, 0xDB, 
+	0x00, 0x60, 0x1A, 0x32, 0x01, 0x22, 0x01, 0xE0, 0x7F, 0x4A, 0x31, 0x70, 0x1A, 0x60, 0x13, 0x23, 
+	0x00, 0x60, 0x13, 0x4A, 0x31, 0x1C, 0x08, 0xE0, 0x77, 0x78, 0x00, 0x30, 0x34, 0xD1, 0x72, 0x28, 
+	0x00, 0x8F, 0x09, 0x48, 0x32, 0x42, 0x88, 0x68, 0x00, 0x49, 0x2E, 0xDB, 0x09, 0x31, 0x45, 0x48, 
+	0x33, 0x68, 0x00, 0x78, 0x09, 0xDB, 0x02, 0x42, 0x88, 0x20, 0x01, 0x49, 0x22, 0x49, 0x1F, 0x70, 
+	0x08, 0x29, 0x00, 0x78, 0x09, 0x49, 0x15, 0xD1, 0x08, 0x49, 0x27, 0x8F, 0x08, 0xD0, 0x5A, 0x42, 
+	0x88, 0x78, 0x09, 0x49, 0x1C, 0xD0, 0x56, 0x29, 0x00, 0x68, 0x09, 0x49, 0x11, 0xDC, 0x05, 0x29, 
+	0x01, 0x8E, 0xC9, 0x49, 0x0E, 0xD8, 0x01, 0x42, 0x8A, 0xD9, 0x49, 0x42, 0x8B, 0x20, 0x00, 0x4B, 
+	0x13, 0x4B, 0x13, 0x70, 0x18, 0x70, 0x1A, 0x22, 0x01, 0x70, 0x18, 0x4B, 0x12, 0x78, 0x1B, 0x4B, 
+	0x12, 0xD0, 0x02, 0x42, 0x83, 0xF0, 0x03, 0x49, 0x11, 0x4B, 0x0A, 0xF9, 0x0F, 0x70, 0x1A, 0x22, 
+	0x01, 0xFB, 0x80, 0xF0, 0x01, 0xFB, 0x9A, 0xF0, 0x01, 0x46, 0xC0, 0xE0, 0x35, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x01, 
+	0xC8, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x01, 0xB3, 0x20, 0x00, 0x01, 0xB4, 0x20, 0x00, 0x01, 
+	0xDC, 0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x01, 0xD4, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x58, 
+	0xDA, 0x20, 0x00, 0x01, 0xD8, 0x00, 0x00, 0x58, 0xE4, 0x20, 0x00, 0x01, 0xD0, 0x00, 0x00, 0x58, 
+	0xEC, 0x20, 0x00, 0x01, 0xCC, 0x20, 0x00, 0x0D, 0x48, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x00, 0x11, 
+	0x34, 0x20, 0x00, 0x03, 0x20, 0x00, 0x00, 0x58, 0xF5, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x11, 
+	0x38, 0x22, 0x01, 0x4B, 0x0D, 0x4B, 0x0D, 0x70, 0x1A, 0x78, 0x1B, 0x33, 0x34, 0xD0, 0x10, 0x2B, 
+	0x00, 0x78, 0x1A, 0x4B, 0x0B, 0xD0, 0x0C, 0x2A, 0x00, 0x21, 0x00, 0x4A, 0x0A, 0x29, 0x03, 0x56, 
+	0x51, 0x49, 0x09, 0xD0, 0x07, 0x42, 0x48, 0x78, 0x09, 0x31, 0x01, 0x41, 0x41, 0x22, 0x00, 0x70, 
+	0x11, 0xB0, 0x05, 0x70, 0x1A, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x01, 0xB4, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x01, 0xDC, 0x20, 0x00, 0x01, 0xB3, 0x20, 0x00, 0x01, 0xDD, 0x4B, 0x54, 0xB5, 
+	0x10, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x53, 0xD0, 0x0A, 0x47, 0x98, 0x68, 0x1B, 0xFB, 0x1A, 0xF0, 
+	0x01, 0xFB, 0x34, 0xF0, 0x01, 0xFF, 0x56, 0xF0, 0x01, 0xFB, 0x90, 0xF0, 0x02, 0x21, 0x02, 0x4B, 
+	0x4E, 0x43, 0x8A, 0x68, 0x1A, 0x68, 0x19, 0x60, 0x1A, 0x05, 0xD2, 0x22, 0x80, 0x60, 0x91, 0x68, 
+	0x90, 0x20, 0x08, 0x68, 0x19, 0x60, 0x19, 0x43, 0x81, 0x68, 0x90, 0x68, 0x19, 0x68, 0x19, 0x60, 
+	0x91, 0x43, 0x81, 0x20, 0x04, 0x68, 0x1B, 0x60, 0x19, 0x60, 0x93, 0x68, 0x91, 0x78, 0x18, 0x4B, 
+	0x40, 0x78, 0x1B, 0x4B, 0x42, 0xD0, 0x32, 0x28, 0x00, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x40, 0x20, 
+	0x00, 0xF8, 0x7A, 0xF0, 0x03, 0x22, 0x80, 0x4B, 0x3F, 0x00, 0x52, 0x68, 0x19, 0x60, 0x1A, 0x43, 
+	0x0A, 0x23, 0xA0, 0x68, 0x1A, 0x68, 0x99, 0x05, 0xDB, 0x4B, 0x37, 0x60, 0x9A, 0x68, 0x19, 0x4A, 
+	0x3A, 0x60, 0x1A, 0x40, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x68, 0x99, 0x05, 0xDB, 0x4A, 0x37, 0x60, 
+	0x9A, 0x70, 0x11, 0x21, 0x01, 0x22, 0x80, 0x68, 0x19, 0x43, 0x0A, 0x04, 0x52, 0x46, 0xC0, 0x60, 
+	0x1A, 0x46, 0xC0, 0x46, 0xC0, 0xB6, 0x62, 0x46, 0xC0, 0x68, 0x19, 0x4A, 0x31, 0x60, 0x1A, 0x40, 
+	0x0A, 0x8F, 0x6F, 0xF3, 0xBF, 0x00, 0xC0, 0x20, 0xFA, 0xFC, 0x6E, 0xF0, 0x02, 0x2B, 0x00, 0xE0, 
+	0x11, 0x49, 0x2C, 0xD0, 0x02, 0xF8, 0x48, 0xF0, 0x03, 0xF0, 0x02, 0x48, 0x2B, 0x4B, 0x2B, 0xFC, 
+	0x65, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2A, 0xD1, 0x05, 0x2B, 0x00, 0x78, 0x1B, 0xF0, 0x02, 0xD1, 
+	0x01, 0x4B, 0x1D, 0xFE, 0x59, 0x68, 0x1A, 0x21, 0x02, 0x60, 0x1A, 0x43, 0x0A, 0x22, 0x80, 0x68, 
+	0x19, 0x68, 0x90, 0x05, 0xD2, 0x49, 0x23, 0x60, 0x91, 0x7F, 0xC8, 0x31, 0x01, 0x28, 0x00, 0x21, 
+	0x08, 0x68, 0x18, 0xD0, 0x06, 0x60, 0x19, 0x43, 0x01, 0x68, 0x90, 0x68, 0x19, 0xE0, 0x05, 0x60, 
+	0x91, 0x43, 0x88, 0x68, 0x18, 0x68, 0x19, 0x60, 0x18, 0x60, 0x91, 0x68, 0x90, 0x21, 0x04, 0x68, 
+	0x1A, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x20, 0xFA, 0x05, 0xDB, 0x00, 0xC0, 0x68, 
+	0x99, 0xF0, 0x02, 0x60, 0x9A, 0x4B, 0x06, 0xFC, 0x31, 0x2B, 0x00, 0x78, 0x1B, 0x4C, 0x12, 0xD0, 
+	0x06, 0x68, 0x23, 0x20, 0x0D, 0x68, 0x23, 0x47, 0x98, 0x47, 0x98, 0x20, 0x12, 0x46, 0xC0, 0xBD, 
+	0x10, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x00, 0x68, 0x20, 0x00, 0x00, 0x14, 0x20, 0x00, 0x01, 
+	0xEB, 0x00, 0x00, 0x58, 0xFB, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0xFF, 0xFE, 0xFF, 0x20, 0x00, 0x00, 
+	0x2C, 0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x59, 0x01, 0x00, 0x0F, 0x42, 0x40, 0x20, 0x00, 0x01, 
+	0xE5, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xF8, 0x4B, 0x31, 0xB5, 
+	0x10, 0x78, 0x19, 0x24, 0x02, 0xB2, 0x4A, 0x4B, 0x30, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2F, 0xD0, 
+	0x25, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2E, 0xD1, 0x21, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2D, 0xD1, 
+	0x1D, 0xD0, 0x07, 0x42, 0xA2, 0x7B, 0x80, 0x48, 0x2C, 0xD1, 0x03, 0x28, 0x00, 0x68, 0x00, 0x48, 
+	0x2B, 0xD0, 0x03, 0x28, 0x00, 0x60, 0x19, 0x21, 0x00, 0xE0, 0x0E, 0x24, 0x01, 0x68, 0x18, 0x4A, 
+	0x28, 0x42, 0x90, 0x68, 0x92, 0x30, 0x01, 0xDA, 0x01, 0x29, 0x00, 0x60, 0x18, 0x4B, 0x21, 0xD0, 
+	0x36, 0x68, 0x1B, 0x24, 0x00, 0xDA, 0x16, 0x42, 0x93, 0xB2, 0x63, 0xE0, 0x30, 0xD0, 0x2D, 0x42, 
+	0x93, 0xD0, 0x1D, 0x2B, 0x01, 0xD0, 0x02, 0x2B, 0x02, 0xD0, 0x0C, 0x2B, 0x00, 0x4B, 0x1D, 0xE0, 
+	0x24, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x03, 0xF0, 0x02, 0x49, 0x1B, 0x20, 0x00, 0xFF, 
+	0xA5, 0xFB, 0x78, 0xF0, 0x02, 0x4B, 0x17, 0xE0, 0x18, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 
+	0x03, 0xF0, 0x02, 0x49, 0x16, 0x4B, 0x12, 0xFF, 0x99, 0xF0, 0x02, 0x68, 0x58, 0x31, 0x77, 0xAE, 
+	0xF1, 0x04, 0xE0, 0x0B, 0xFB, 0x6B, 0x78, 0x1B, 0x4B, 0x10, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x11, 
+	0x20, 0x00, 0xFF, 0x8C, 0xF0, 0x02, 0x68, 0x18, 0x4B, 0x0B, 0xFB, 0x5E, 0xF0, 0x02, 0x70, 0x1C, 
+	0x4B, 0x02, 0xFB, 0x4C, 0xF0, 0x02, 0x46, 0xC0, 0xBD, 0x10, 0x20, 0x00, 0x00, 0x3C, 0x20, 0x00, 
+	0x03, 0x1C, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x01, 0xE2, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 
+	0x01, 0x70, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x02, 0xFC, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 
+	0x59, 0x09, 0x00, 0x00, 0x59, 0x0E, 0x00, 0x00, 0x59, 0x13, 0xF0, 0x02, 0xB5, 0x08, 0xBD, 0x08, 
+	0xFB, 0x5F, 0xF0, 0x02, 0xB5, 0x08, 0xBD, 0x08, 0xFB, 0x4D, 0xF0, 0x02, 0xB5, 0x08, 0x23, 0x80, 
+	0xFA, 0xE5, 0x6C, 0x9A, 0x05, 0xDB, 0x43, 0x0A, 0x21, 0x01, 0xF7, 0xFF, 0x64, 0x9A, 0xBD, 0x08, 
+	0xFF, 0xF1, 0xB0, 0x87, 0xB5, 0xF0, 0xFF, 0xF0, 0xF7, 0xFF, 0x4C, 0x79, 0x4A, 0x78, 0x78, 0x15, 
+	0x78, 0x53, 0xE0, 0x10, 0x48, 0x78, 0xB2, 0xDB, 0x3B, 0x01, 0x46, 0x67, 0x1C, 0x9A, 0x01, 0x79, 
+	0x18, 0xB2, 0x5B, 0x12, 0x00, 0x52, 0x00, 0x4F, 0x18, 0xC9, 0x4A, 0x73, 0x52, 0x3A, 0x54, 0x8F, 
+	0x27, 0x00, 0xD1, 0xEF, 0x2B, 0x00, 0x1E, 0x5A, 0x46, 0x63, 0x2B, 0x00, 0xB2, 0xD2, 0x1C, 0x56, 
+	0xD0, 0x04, 0x01, 0xB6, 0x1C, 0x2B, 0xE7, 0xF3, 0x46, 0x94, 0x4C, 0x6D, 0x4B, 0x6C, 0x48, 0x6D, 
+	0x78, 0x1B, 0x4A, 0x6D, 0x49, 0x67, 0x3B, 0x01, 0xE0, 0x0E, 0x5C, 0xE5, 0xB2, 0xDB, 0x35, 0x01, 
+	0x5C, 0xC6, 0x01, 0xAD, 0x36, 0x02, 0x00, 0x6D, 0x19, 0xAD, 0x00, 0x5D, 0x5A, 0x6E, 0x4D, 0x67, 
+	0x52, 0xAE, 0x54, 0xEE, 0x26, 0x00, 0xD1, 0xEE, 0x2B, 0x00, 0x95, 0x03, 0x25, 0x65, 0xE0, 0x66, 
+	0x4C, 0x5B, 0xFF, 0xB2, 0xF7, 0xFF, 0x78, 0x63, 0x78, 0x26, 0xE0, 0x2D, 0x96, 0x05, 0xB2, 0xDB, 
+	0x3B, 0x01, 0x18, 0xF0, 0x4F, 0x58, 0x00, 0x40, 0x9D, 0x04, 0x5B, 0xC0, 0x1C, 0x9A, 0x4F, 0x54, 
+	0x18, 0xAD, 0x5B, 0xEF, 0x00, 0x6D, 0xD4, 0x04, 0x1B, 0xC7, 0x5B, 0xED, 0x4F, 0x51, 0x95, 0x02, 
+	0x1B, 0x45, 0x4F, 0x4F, 0xE0, 0x03, 0x1A, 0x2D, 0x5B, 0xED, 0x98, 0x04, 0x95, 0x02, 0x48, 0x4C, 
+	0x18, 0x87, 0x5B, 0xC0, 0x00, 0x7F, 0x46, 0x84, 0x4F, 0x4B, 0x00, 0x42, 0x18, 0xF0, 0x46, 0x62, 
+	0x1C, 0x15, 0x4D, 0x49, 0x53, 0xEA, 0x9D, 0x02, 0x5C, 0x2F, 0xDA, 0x00, 0x42, 0xBD, 0x4F, 0x46, 
+	0x1C, 0x3D, 0x2B, 0x00, 0x54, 0x3D, 0x1C, 0x0B, 0xD1, 0xD2, 0xB2, 0xC9, 0x1E, 0x59, 0xD0, 0x05, 
+	0x2B, 0x00, 0x01, 0x80, 0x1C, 0x48, 0x01, 0x4E, 0x9B, 0x05, 0xE7, 0xF2, 0x90, 0x04, 0x4A, 0x3C, 
+	0x4B, 0x3F, 0xE0, 0x22, 0x78, 0x1B, 0x3B, 0x01, 0x4D, 0x3E, 0x4F, 0x3E, 0xB2, 0xDB, 0x48, 0x3E, 
+	0x5C, 0xEE, 0x00, 0x59, 0x5C, 0xFD, 0x5A, 0x09, 0x36, 0x01, 0x01, 0xB0, 0x35, 0x02, 0x00, 0x40, 
+	0x19, 0x40, 0x5A, 0x80, 0x5A, 0x87, 0xD4, 0x01, 0x1B, 0xCF, 0xE0, 0x00, 0x1A, 0x09, 0x01, 0xB6, 
+	0x1A, 0x41, 0x48, 0x2F, 0x19, 0x75, 0x5B, 0x46, 0x00, 0x6D, 0x00, 0x5D, 0x48, 0x33, 0x48, 0x33, 
+	0x52, 0x2E, 0x42, 0xA9, 0x5C, 0xC5, 0x1C, 0x29, 0xDA, 0x00, 0x2B, 0x00, 0x54, 0xC1, 0x9B, 0x03, 
+	0xD1, 0xDA, 0xB2, 0xDB, 0x3B, 0x01, 0x2B, 0x00, 0x93, 0x03, 0x78, 0x61, 0xD1, 0x92, 0x4A, 0x24, 
+	0x78, 0x24, 0xE0, 0x1E, 0x94, 0x04, 0xB2, 0xDB, 0x3B, 0x01, 0x18, 0xED, 0x01, 0x45, 0x00, 0x6D, 
+	0x4F, 0x21, 0x88, 0x25, 0x5B, 0xEE, 0x1C, 0x9D, 0x46, 0xAC, 0xD9, 0x09, 0x45, 0x66, 0x1B, 0xF6, 
+	0x88, 0x27, 0x46, 0xBC, 0x01, 0x8F, 0x00, 0x6D, 0x44, 0x65, 0x5A, 0xAF, 0xB2, 0xB6, 0xE0, 0x05, 
+	0x52, 0xAE, 0x19, 0x75, 0x01, 0x8E, 0x5A, 0xAE, 0x00, 0x6D, 0x52, 0xAE, 0x26, 0x00, 0xD1, 0xE1, 
+	0x2B, 0x00, 0x1E, 0x48, 0x1C, 0x01, 0x29, 0x00, 0xB2, 0xC0, 0x1C, 0x41, 0xD0, 0x05, 0x01, 0xCC, 
+	0x4F, 0x18, 0x19, 0xE4, 0x9B, 0x04, 0x4B, 0x11, 0xE7, 0xF2, 0x78, 0x1B, 0x4F, 0x13, 0x48, 0x15, 
+	0x4E, 0x10, 0x3B, 0x01, 0xE0, 0x10, 0x5C, 0xF5, 0xB2, 0xDB, 0x01, 0xED, 0x49, 0x13, 0x18, 0x6D, 
+	0x00, 0x5A, 0x88, 0x29, 0x5B, 0xD4, 0xD9, 0x03, 0x42, 0x8C, 0x1B, 0x64, 0x88, 0x2D, 0xE0, 0x01, 
+	0x52, 0x84, 0x52, 0x85, 0x25, 0x00, 0xD1, 0xEC, 0x2B, 0x00, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 
+	0x03, 0x0A, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 
+	0x09, 0x7C, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 
+	0x0A, 0xA4, 0x40, 0x00, 0x40, 0x02, 0x20, 0x00, 0x0D, 0x3C, 0x40, 0x00, 0x40, 0x82, 0xB0, 0x87, 
+	0xB5, 0xF0, 0xF8, 0x4A, 0xF0, 0x02, 0xF9, 0x60, 0xF0, 0x02, 0xD1, 0xFB, 0x28, 0x00, 0x78, 0x1B, 
+	0x4B, 0x52, 0xD0, 0x09, 0x2B, 0x02, 0x49, 0x52, 0x4B, 0x51, 0x78, 0x1A, 0x33, 0x40, 0x18, 0x54, 
+	0x42, 0x53, 0x33, 0x01, 0x54, 0xE0, 0xDD, 0xFA, 0x42, 0x93, 0x4F, 0x4E, 0x4E, 0x4C, 0x33, 0x40, 
+	0x1C, 0x33, 0x42, 0x64, 0x78, 0x1C, 0x78, 0xFA, 0xE0, 0x0C, 0x19, 0x12, 0x23, 0x80, 0x05, 0xDB, 
+	0xB2, 0xD2, 0xF7, 0xFF, 0x71, 0x1A, 0x78, 0x28, 0xFE, 0xC1, 0xF0, 0x03, 0x18, 0x20, 0x34, 0x01, 
+	0xFD, 0xF3, 0x35, 0x40, 0x1C, 0x35, 0x42, 0x9C, 0x78, 0x2B, 0x26, 0x00, 0xDD, 0xED, 0x78, 0x2C, 
+	0xE0, 0x25, 0x42, 0x64, 0x1C, 0x2F, 0xE0, 0x1A, 0x3F, 0x40, 0x78, 0xDA, 0x4B, 0x3E, 0x19, 0x12, 
+	0x23, 0x80, 0xB2, 0xD2, 0x05, 0xDB, 0xF7, 0xFF, 0x71, 0x1A, 0x78, 0x2D, 0xFE, 0xA7, 0x19, 0x65, 
+	0xA9, 0x04, 0x1C, 0x28, 0xAA, 0x05, 0xFD, 0xF8, 0xF0, 0x03, 0x9B, 0x04, 0x49, 0x35, 0x2B, 0xFF, 
+	0x5D, 0x4A, 0x23, 0xFF, 0xDD, 0x00, 0xDA, 0x00, 0x42, 0x9A, 0x55, 0x4A, 0x1C, 0x1A, 0x1C, 0x3D, 
+	0x34, 0x01, 0x78, 0x2B, 0x35, 0x40, 0xDD, 0xDF, 0x42, 0x9C, 0x4A, 0x2F, 0x36, 0x01, 0x78, 0x13, 
+	0x4D, 0x2B, 0x42, 0x9E, 0x35, 0x40, 0xF0, 0x01, 0xDB, 0xD3, 0x49, 0x2C, 0xFF, 0xDF, 0x78, 0x0D, 
+	0x78, 0x2A, 0x48, 0x27, 0x49, 0x2B, 0x23, 0x01, 0x78, 0x09, 0x1A, 0x9B, 0x91, 0x03, 0x4C, 0x29, 
+	0x21, 0x00, 0x46, 0x94, 0x18, 0x10, 0x18, 0xC6, 0xE0, 0x11, 0x78, 0x12, 0x1E, 0x72, 0x43, 0x6A, 
+	0x5C, 0xC7, 0x9A, 0x03, 0x92, 0x02, 0x9A, 0x02, 0x43, 0x57, 0x78, 0x72, 0x19, 0xD7, 0x18, 0xBA, 
+	0x43, 0x6A, 0xDB, 0x01, 0x42, 0x94, 0x1C, 0x19, 0xB2, 0x94, 0x45, 0x9C, 0x33, 0x01, 0x4B, 0x19, 
+	0xDC, 0xEB, 0x78, 0xDA, 0x4C, 0x1D, 0xB2, 0xC9, 0x18, 0x51, 0x4B, 0x13, 0x70, 0x99, 0x28, 0x00, 
+	0x78, 0x18, 0x78, 0x23, 0xD1, 0x05, 0xD0, 0x02, 0x2B, 0x00, 0xF0, 0x02, 0x49, 0x18, 0x78, 0x23, 
+	0xFD, 0xB7, 0xD0, 0x0B, 0x2B, 0x00, 0x20, 0x00, 0x4B, 0x0D, 0x78, 0x19, 0x33, 0x40, 0x00, 0x49, 
+	0x4A, 0x0C, 0xB2, 0xC9, 0x31, 0x01, 0x90, 0x00, 0x23, 0x01, 0xFD, 0x50, 0xF0, 0x02, 0x78, 0x1B, 
+	0x4B, 0x0E, 0xD0, 0x06, 0x2B, 0x00, 0x20, 0x00, 0x21, 0x01, 0x1C, 0x0B, 0x4A, 0x0D, 0xF0, 0x02, 
+	0x90, 0x00, 0xB0, 0x07, 0xFD, 0x45, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x01, 0xE0, 0x20, 0x00, 
+	0x0D, 0x48, 0x18, 0x12, 0xAE, 0xF1, 0x05, 0x20, 0x00, 0x01, 0x93, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x0D, 0x87, 0x20, 0x00, 0x00, 0x54, 0x20, 0x00, 0x00, 0x55, 0x00, 0x00, 0xFF, 0xFF, 0x20, 
+	0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x1A, 0x20, 0x00, 0x0A, 0xAC, 0x4B, 0x24, 0xB5, 0x13, 0x68, 
+	0x1B, 0x4C, 0x24, 0xD0, 0x0E, 0x2B, 0x00, 0x2B, 0x00, 0x78, 0x23, 0x20, 0x00, 0xD0, 0x03, 0xF0, 
+	0x02, 0x49, 0x21, 0xF7, 0xFF, 0xFD, 0x77, 0x78, 0x23, 0xFA, 0x6D, 0xD1, 0x02, 0x2B, 0x00, 0xF8, 
+	0x38, 0xF0, 0x02, 0x78, 0x23, 0xE7, 0xFE, 0xD0, 0x09, 0x2B, 0x00, 0x68, 0x23, 0x4C, 0x1B, 0xD5, 
+	0x05, 0x00, 0xDA, 0xFA, 0x5E, 0xF7, 0xFF, 0x4B, 0x19, 0x68, 0x22, 0x60, 0x23, 0x40, 0x13, 0x78, 
+	0x23, 0x4C, 0x14, 0xD0, 0x22, 0x2B, 0x00, 0x68, 0x1B, 0x4B, 0x14, 0xD5, 0x1E, 0x01, 0x5A, 0x20, 
+	0x00, 0x49, 0x14, 0xFD, 0x56, 0xF0, 0x02, 0x4A, 0x14, 0x4B, 0x13, 0x80, 0x11, 0x88, 0x19, 0x80, 
+	0x51, 0x88, 0x59, 0x80, 0x91, 0x88, 0x99, 0x80, 0xD3, 0x88, 0xDB, 0x78, 0x1B, 0x4B, 0x10, 0x78, 
+	0x23, 0x81, 0x13, 0xD0, 0x05, 0x2B, 0x00, 0x21, 0x05, 0x20, 0x00, 0x90, 0x00, 0x23, 0x02, 0xFC, 
+	0xE8, 0xF0, 0x02, 0x4A, 0x0B, 0x4B, 0x05, 0x40, 0x0A, 0x68, 0x19, 0xBD, 0x13, 0x60, 0x1A, 0x20, 
+	0x00, 0x1E, 0x0C, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x20, 0x20, 0x00, 0x00, 0x58, 0xEF, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x59, 0x27, 0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x11, 0x54, 0x20, 
+	0x00, 0x0A, 0xAA, 0xFB, 0xFF, 0xFF, 0xFF, 0x28, 0x02, 0xB5, 0x10, 0x28, 0x03, 0xD0, 0x04, 0x28, 
+	0x01, 0xD0, 0x45, 0xE0, 0x15, 0xD1, 0x33, 0xF9, 0xF6, 0xF7, 0xFF, 0x4C, 0x2A, 0x4B, 0x29, 0x78, 
+	0x1B, 0x33, 0x40, 0x22, 0x50, 0x49, 0x29, 0x48, 0x29, 0x70, 0x23, 0xF9, 0xA6, 0xF0, 0x04, 0x20, 
+	0x0D, 0x4B, 0x28, 0x47, 0x98, 0x68, 0x1B, 0xF9, 0xF4, 0xF7, 0xFF, 0x2B, 0x10, 0x78, 0x23, 0xE0, 
+	0x14, 0xD1, 0x1A, 0xF9, 0xE0, 0xF7, 0xFF, 0x4C, 0x1F, 0x4B, 0x1E, 0x78, 0x1B, 0x33, 0x40, 0x22, 
+	0x50, 0x49, 0x21, 0x48, 0x1E, 0x70, 0x23, 0xF9, 0x90, 0xF0, 0x04, 0x20, 0x0C, 0x4B, 0x1D, 0x47, 
+	0x98, 0x68, 0x1B, 0xF9, 0xDE, 0xF7, 0xFF, 0x2B, 0x10, 0x78, 0x23, 0x4B, 0x1B, 0xD1, 0x04, 0x70, 
+	0x9A, 0x78, 0xDA, 0xFA, 0xD1, 0xF0, 0x02, 0xFA, 0x54, 0xF0, 0x02, 0x4B, 0x18, 0xE0, 0x20, 0x2A, 
+	0x00, 0x78, 0x1A, 0x4A, 0x17, 0xD0, 0x05, 0x31, 0x01, 0x68, 0x11, 0x22, 0x00, 0x60, 0x11, 0x4B, 
+	0x15, 0x70, 0x1A, 0x2A, 0x13, 0x68, 0x1A, 0x22, 0x00, 0xDD, 0x05, 0x4B, 0x0A, 0x60, 0x1A, 0x70, 
+	0x1A, 0x22, 0x10, 0x4B, 0x0F, 0xE0, 0x0C, 0x2A, 0x3B, 0x68, 0x1A, 0x22, 0x00, 0xDD, 0x08, 0x4B, 
+	0x0E, 0x60, 0x1A, 0x68, 0x1B, 0x20, 0x01, 0x4B, 0x0D, 0x47, 0x98, 0x70, 0x1A, 0x22, 0x01, 0x46, 
+	0xC0, 0xBD, 0x10, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x00, 0x00, 0x74, 0x4A, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x74, 0x9A, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x01, 0xC4, 0x20, 0x00, 0x01, 0xC0, 0x20, 0x00, 0x01, 0xBC, 0x20, 0x00, 0x00, 0x6C, 0x20, 
+	0x00, 0x01, 0xE7, 0x4B, 0x0C, 0xB5, 0x10, 0x79, 0x99, 0x22, 0x01, 0xE0, 0x00, 0x23, 0x00, 0x1C, 
+	0x5C, 0x1C, 0x23, 0xB2, 0xE4, 0x1C, 0x10, 0x42, 0x81, 0x40, 0x98, 0x4A, 0x07, 0xDA, 0xF8, 0x71, 
+	0x13, 0x21, 0x07, 0x05, 0xD2, 0x22, 0x80, 0x02, 0x19, 0x40, 0x0B, 0x4B, 0x04, 0x6C, 0x10, 0x43, 
+	0x0B, 0x40, 0x03, 0xBD, 0x10, 0x64, 0x13, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x00, 0x5C, 0xFF, 
+	0xFF, 0xF8, 0xFF, 0x22, 0x07, 0x4B, 0x06, 0x23, 0x80, 0x79, 0xD9, 0x6C, 0x18, 0x05, 0xDB, 0x4A, 
+	0x04, 0x40, 0x11, 0x40, 0x02, 0x02, 0x09, 0x64, 0x1A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x0D, 0x48, 0xFF, 0xFF, 0xF8, 0xFF, 0xB0, 0x8D, 0xB5, 0xF0, 0xF7, 0xFF, 0x90, 0x04, 0x4B, 
+	0xC7, 0xFF, 0xC9, 0x78, 0xDE, 0x48, 0xC7, 0x96, 0x05, 0x21, 0x00, 0xE0, 0x07, 0x78, 0x9C, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x00, 0x76, 0x18, 0xEE, 0x2B, 0x00, 0x52, 0x31, 0x92, 0x05, 0xD1, 0xF8, 0x9E, 
+	0x05, 0x9A, 0x05, 0xB2, 0xD2, 0x3A, 0x01, 0xD0, 0x02, 0x2E, 0x00, 0x01, 0x55, 0x1C, 0x23, 0x9F, 
+	0x04, 0xE7, 0xF3, 0xD0, 0x05, 0x2F, 0x00, 0x9E, 0x05, 0x4B, 0xBB, 0x96, 0x06, 0x7B, 0x5B, 0xE0, 
+	0x04, 0x93, 0x03, 0x27, 0x02, 0x4B, 0xB9, 0x97, 0x06, 0x78, 0x9B, 0x46, 0x68, 0x93, 0x03, 0x56, 
+	0x0B, 0x21, 0x0C, 0x93, 0x0B, 0x4C, 0xB2, 0x93, 0x09, 0x42, 0x5B, 0x46, 0x6A, 0xE0, 0xAA, 0x56, 
+	0x9A, 0x23, 0x18, 0x1C, 0x27, 0x7A, 0xE6, 0xE0, 0x0D, 0x92, 0x02, 0x21, 0x00, 0x1C, 0x30, 0x9B, 
+	0x02, 0x1C, 0x2A, 0xF9, 0x4C, 0xF0, 0x02, 0x21, 0x01, 0x1C, 0x30, 0x9B, 0x02, 0x1C, 0x2A, 0xF9, 
+	0x46, 0xF0, 0x02, 0xB2, 0xF6, 0x36, 0x01, 0x7A, 0xFA, 0x7A, 0xBB, 0x1C, 0x3B, 0x18, 0xD2, 0xDB, 
+	0xEB, 0x42, 0x96, 0x2E, 0x00, 0x9E, 0x04, 0x3D, 0x0E, 0xD1, 0x00, 0x21, 0x18, 0x46, 0x68, 0x7B, 
+	0x5E, 0x56, 0x08, 0x90, 0x02, 0x4F, 0x9E, 0x1C, 0x30, 0xE0, 0x0D, 0x1C, 0x2A, 0x21, 0x00, 0xF0, 
+	0x02, 0x9B, 0x02, 0x1C, 0x30, 0xF9, 0x2D, 0x1C, 0x2A, 0x21, 0x01, 0xF0, 0x02, 0x9B, 0x02, 0x36, 
+	0x01, 0xF9, 0x27, 0x7B, 0x7A, 0xB2, 0xF6, 0x18, 0xD3, 0x7B, 0x3B, 0xDB, 0xEC, 0x42, 0x9E, 0xFC, 
+	0xAE, 0xF7, 0xFF, 0x78, 0x1B, 0x4B, 0x96, 0xD0, 0x06, 0x2B, 0x00, 0x1C, 0x18, 0x23, 0x01, 0xAA, 
+	0x0B, 0x1C, 0x19, 0xF0, 0x02, 0x93, 0x00, 0x25, 0x00, 0xFB, 0xAD, 0x4F, 0x90, 0x4E, 0x8C, 0x78, 
+	0x3B, 0xE0, 0x0E, 0xD0, 0x09, 0x2B, 0x00, 0x01, 0xEA, 0x4B, 0x8E, 0x23, 0x00, 0x18, 0xD2, 0x20, 
+	0x01, 0x78, 0xB1, 0x23, 0x02, 0x93, 0x00, 0xFB, 0x9C, 0xF0, 0x02, 0xB2, 0xED, 0x35, 0x01, 0x42, 
+	0x9D, 0x78, 0xF3, 0x9A, 0x0B, 0xD3, 0xED, 0xB2, 0xD2, 0x78, 0xB6, 0x92, 0x07, 0x96, 0x02, 0xE0, 
+	0x39, 0x4D, 0x80, 0xB2, 0xDB, 0x3B, 0x01, 0x1C, 0x99, 0x9E, 0x08, 0x4F, 0x82, 0x18, 0x71, 0x5B, 
+	0xCE, 0x00, 0x49, 0x00, 0x48, 0x18, 0xD1, 0xB2, 0xB7, 0x5B, 0x40, 0xDC, 0x14, 0x42, 0xB8, 0x1C, 
+	0x01, 0x1B, 0xC0, 0xDA, 0x01, 0x31, 0x80, 0x42, 0x40, 0x20, 0x80, 0x28, 0x7F, 0x18, 0xD7, 0x20, 
+	0x7F, 0xDD, 0x00, 0x54, 0x78, 0x49, 0x79, 0x00, 0x48, 0x18, 0xD1, 0x27, 0x1C, 0x52, 0x2E, 0x48, 
+	0x77, 0x46, 0x6E, 0x54, 0x0E, 0x5D, 0xBE, 0x9E, 0x04, 0xE0, 0x13, 0xD0, 0x10, 0x2E, 0x00, 0x42, 
+	0xB0, 0x4E, 0x74, 0x4E, 0x71, 0xD0, 0x08, 0x19, 0x80, 0x57, 0x8E, 0xDA, 0x03, 0x42, 0x87, 0x5C, 
+	0x0E, 0x48, 0x6F, 0x54, 0x0E, 0x36, 0x01, 0x27, 0x01, 0x18, 0xD1, 0x42, 0x7F, 0x00, 0x49, 0x2B, 
+	0x00, 0x52, 0x6F, 0x46, 0x63, 0xD1, 0xC6, 0xB2, 0xF6, 0x1E, 0x5E, 0xD0, 0x06, 0x2B, 0x00, 0x01, 
+	0x92, 0x1C, 0x72, 0x9B, 0x02, 0x92, 0x08, 0x46, 0xB4, 0x01, 0x72, 0x9B, 0x0B, 0xE7, 0xF1, 0x93, 
+	0x0B, 0x3B, 0x01, 0x9E, 0x09, 0x9D, 0x0B, 0xDB, 0x00, 0x42, 0xB5, 0x9F, 0x04, 0xE7, 0x4F, 0xD0, 
+	0x45, 0x2F, 0x00, 0x78, 0xE3, 0x78, 0xA0, 0x36, 0x61, 0xAE, 0xF1, 0x06, 0x78, 0x61, 0x90, 0x04, 
+	0x91, 0x06, 0x4A, 0x56, 0x94, 0x02, 0x78, 0x24, 0x7A, 0xD0, 0x7C, 0x11, 0x18, 0x08, 0x4C, 0x5B, 
+	0x90, 0x07, 0xB2, 0xC0, 0x18, 0x89, 0x7B, 0x12, 0x91, 0x08, 0xB2, 0xC9, 0xE0, 0x28, 0x4A, 0x55, 
+	0x3B, 0x01, 0x9E, 0x03, 0x2E, 0x00, 0xB2, 0xDB, 0x18, 0xC7, 0xD1, 0x01, 0x9E, 0x06, 0x55, 0xD6, 
+	0xD2, 0x02, 0x42, 0xB1, 0x42, 0xBB, 0x9F, 0x02, 0x18, 0xEF, 0xD3, 0x0C, 0x97, 0x09, 0x18, 0xC6, 
+	0x46, 0xBC, 0x5D, 0x97, 0x5D, 0xE7, 0x9F, 0x09, 0x9F, 0x08, 0x44, 0xBC, 0x46, 0x67, 0x44, 0xBC, 
+	0xE0, 0x0B, 0x55, 0x97, 0x18, 0xC6, 0x18, 0xEF, 0x5D, 0x97, 0x97, 0x09, 0x9F, 0x09, 0x46, 0xBC, 
+	0x44, 0xBC, 0x5D, 0xE7, 0x44, 0xBC, 0x9F, 0x07, 0x55, 0x97, 0x46, 0x67, 0xD1, 0xD7, 0x2B, 0x00, 
+	0x1E, 0x59, 0x1C, 0x0B, 0x2B, 0x00, 0xB2, 0xC9, 0x25, 0x26, 0xD0, 0x3E, 0x01, 0x48, 0x9B, 0x04, 
+	0xE7, 0xF3, 0x43, 0x4D, 0x79, 0xE2, 0x7C, 0x63, 0x18, 0x9A, 0x25, 0x07, 0x4A, 0x34, 0x92, 0x03, 
+	0x21, 0x02, 0x7B, 0xA0, 0x79, 0x26, 0x5E, 0x52, 0x00, 0x6D, 0x1A, 0xAD, 0xB2, 0xED, 0x19, 0x86, 
+	0x46, 0x84, 0x49, 0x34, 0x18, 0xB8, 0xE0, 0x09, 0x32, 0x01, 0x5C, 0x44, 0x54, 0x44, 0x19, 0x2C, 
+	0x42, 0xB2, 0xB2, 0xD2, 0x33, 0x01, 0xDB, 0xF7, 0x9A, 0x03, 0xB2, 0xDB, 0xDA, 0x02, 0x42, 0x93, 
+	0x01, 0x5F, 0x46, 0x62, 0x4A, 0x23, 0xE7, 0xF5, 0x7C, 0x10, 0x49, 0x2A, 0x79, 0x56, 0x7B, 0xD3, 
+	0x19, 0x9E, 0x79, 0x95, 0x46, 0x84, 0x19, 0x45, 0x18, 0xB8, 0xE0, 0x09, 0x32, 0x01, 0x5C, 0x44, 
+	0x54, 0x44, 0x3C, 0x0E, 0x42, 0xAA, 0xB2, 0xD2, 0x33, 0x01, 0xDB, 0xF7, 0x42, 0xB3, 0xB2, 0xDB, 
+	0x46, 0x62, 0xDA, 0x02, 0xE7, 0xF6, 0x01, 0x5F, 0x78, 0x1B, 0x4B, 0x1A, 0xD0, 0x13, 0x2B, 0x00, 
+	0x49, 0x1F, 0x20, 0x05, 0xFB, 0x10, 0xF0, 0x02, 0x78, 0x2B, 0xE0, 0x0E, 0xD0, 0x08, 0x2B, 0x00, 
+	0x01, 0x72, 0x4B, 0x18, 0x18, 0xD2, 0x78, 0xA1, 0x23, 0x01, 0x20, 0x05, 0xF0, 0x02, 0x93, 0x00, 
+	0x36, 0x01, 0xFA, 0xAB, 0xE0, 0x02, 0xB2, 0xF6, 0x4D, 0x0E, 0x4C, 0x0A, 0x78, 0xE3, 0x9E, 0x05, 
+	0xD8, 0xEA, 0x42, 0xB3, 0x20, 0x01, 0x21, 0x00, 0x42, 0x40, 0x1C, 0x0A, 0xF0, 0x02, 0x23, 0x02, 
+	0x20, 0x01, 0xF8, 0x01, 0x21, 0x01, 0x42, 0x40, 0x23, 0x02, 0x22, 0x00, 0xFF, 0xFA, 0xF0, 0x01, 
+	0xE0, 0x25, 0x78, 0xA4, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x01, 0xEB, 0x40, 0x00, 0x40, 0x84, 0x40, 0x00, 0x40, 0x00, 
+	0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x0A, 0xB3, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x75, 0x36, 
+	0x00, 0x00, 0x59, 0x2E, 0x21, 0x00, 0x3C, 0x01, 0x1C, 0x0A, 0xB2, 0xE4, 0x23, 0x01, 0x1C, 0x20, 
+	0xFF, 0xD8, 0xF0, 0x01, 0x1C, 0x20, 0x21, 0x01, 0x1C, 0x0B, 0x22, 0x00, 0xFF, 0xD2, 0xF0, 0x01, 
+	0xD1, 0xEF, 0x2C, 0x00, 0xFE, 0x30, 0xF7, 0xFF, 0xBD, 0xF0, 0xB0, 0x0D, 0xF0, 0x03, 0xB5, 0x08, 
+	0x4B, 0x05, 0xFD, 0xC5, 0x68, 0x1B, 0x20, 0x01, 0x20, 0x01, 0x47, 0x98, 0xF9, 0x22, 0xF0, 0x04, 
+	0xFD, 0xD6, 0xF0, 0x01, 0x46, 0xC0, 0xBD, 0x08, 0x20, 0x00, 0x01, 0xF8, 0x4A, 0x2C, 0xB5, 0xF7, 
+	0x60, 0x10, 0x20, 0x00, 0x4E, 0x2C, 0x4A, 0x2B, 0x4A, 0x2C, 0x8C, 0x11, 0x1D, 0x72, 0x60, 0x11, 
+	0x7D, 0xF1, 0x7F, 0xD2, 0x42, 0x44, 0x1E, 0x50, 0x4C, 0x29, 0x41, 0x60, 0x90, 0x00, 0x1A, 0x08, 
+	0x1D, 0xB0, 0x60, 0x20, 0x7E, 0x37, 0x7F, 0xC5, 0x42, 0x58, 0x1E, 0x6B, 0x1A, 0x3B, 0x41, 0x58, 
+	0x60, 0x63, 0x93, 0x01, 0xD1, 0x02, 0x2A, 0x01, 0x81, 0x20, 0x20, 0x00, 0x23, 0x26, 0xE0, 0x05, 
+	0x00, 0x49, 0x5E, 0xF0, 0xFE, 0xBA, 0xF0, 0x03, 0x2D, 0x01, 0x81, 0x20, 0x23, 0x00, 0xD1, 0x02, 
+	0xE0, 0x05, 0x81, 0x63, 0x5E, 0xF0, 0x23, 0x28, 0xF0, 0x03, 0x00, 0x79, 0x81, 0x60, 0xFE, 0xAF, 
+	0x9B, 0x01, 0x4F, 0x15, 0x5E, 0x3E, 0x20, 0x28, 0x00, 0x70, 0x00, 0x59, 0xF0, 0x03, 0x19, 0x80, 
+	0x43, 0x40, 0xFE, 0xA5, 0x00, 0x43, 0x4C, 0x12, 0x60, 0xE3, 0x00, 0x80, 0x61, 0x23, 0x18, 0xC3, 
+	0x5E, 0x3D, 0x20, 0x26, 0x00, 0x68, 0x9B, 0x00, 0x19, 0x40, 0x00, 0x59, 0xFE, 0x96, 0xF0, 0x03, 
+	0x61, 0x60, 0x37, 0x2C, 0x78, 0x3B, 0x61, 0xA0, 0xD1, 0x02, 0x2B, 0x00, 0x62, 0x25, 0x61, 0xE6, 
+	0x61, 0xE5, 0xE0, 0x01, 0x4B, 0x07, 0x62, 0x26, 0x42, 0x52, 0x22, 0x01, 0xBD, 0xF7, 0x60, 0x5A, 
+	0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0x20, 
+	0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x00, 0xCC, 0x4B, 0x24, 0xB5, 0xF0, 0x7E, 0x1E, 0xB0, 0x87, 
+	0x1C, 0x72, 0x7D, 0xDB, 0x33, 0x02, 0x1C, 0xD9, 0x92, 0x05, 0x93, 0x03, 0x4A, 0x20, 0x23, 0x00, 
+	0x1C, 0x18, 0x91, 0x04, 0x1A, 0xE5, 0x9C, 0x05, 0x97, 0x01, 0x01, 0xEF, 0x52, 0xB8, 0x5A, 0xBC, 
+	0x01, 0xAD, 0x9C, 0x04, 0x00, 0x4F, 0x19, 0x29, 0x4C, 0x1A, 0x5A, 0xBC, 0x27, 0x00, 0x52, 0xB8, 
+	0x55, 0x0F, 0x55, 0x2F, 0x4F, 0x18, 0x99, 0x01, 0x19, 0xCF, 0x33, 0x01, 0x88, 0x39, 0x97, 0x02, 
+	0x99, 0x03, 0x80, 0x38, 0x00, 0x79, 0x18, 0x6F, 0x5A, 0x89, 0x91, 0x01, 0x52, 0x88, 0x99, 0x01, 
+	0x18, 0x6D, 0x49, 0x12, 0x70, 0x29, 0x21, 0x00, 0x1A, 0xF7, 0x55, 0x39, 0x37, 0x01, 0x4D, 0x0C, 
+	0x22, 0x00, 0xDA, 0xD8, 0x9B, 0x03, 0x36, 0x01, 0x01, 0xB6, 0x1C, 0x11, 0x5A, 0x2F, 0x00, 0x58, 
+	0x18, 0xF0, 0x52, 0x2A, 0x5B, 0xEC, 0x00, 0x47, 0x4F, 0x06, 0x53, 0xEA, 0x3B, 0x01, 0x54, 0xF9, 
+	0x2B, 0x01, 0x54, 0x39, 0xB0, 0x07, 0xD1, 0xF2, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x09, 0xAE, 
+	0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x02, 0x40, 0x00, 0x20, 0x01, 
+	0x4B, 0x0D, 0xB5, 0xF7, 0x7D, 0xDE, 0x7E, 0x19, 0x36, 0x01, 0x1C, 0x48, 0x90, 0x01, 0x23, 0x00, 
+	0x1C, 0x32, 0x9C, 0x01, 0x01, 0xBF, 0x1A, 0xE7, 0x46, 0xAC, 0x1C, 0x95, 0x4C, 0x07, 0x44, 0xBC, 
+	0x46, 0x60, 0x25, 0x00, 0x55, 0x05, 0x3A, 0x01, 0xDA, 0xF5, 0x1C, 0x50, 0x1A, 0xCA, 0x33, 0x01, 
+	0xDA, 0xED, 0x32, 0x01, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x20, 0x00, 
+	0x4B, 0x0D, 0xB5, 0x00, 0x5E, 0x9B, 0x22, 0x08, 0x1C, 0x11, 0x4A, 0x0C, 0x78, 0x09, 0x31, 0x35, 
+	0x43, 0x4B, 0x7F, 0x12, 0x11, 0x9B, 0xB2, 0x52, 0xDA, 0x00, 0x42, 0x93, 0x4A, 0x08, 0x1C, 0x13, 
+	0x22, 0x80, 0x60, 0x13, 0x05, 0x1B, 0x05, 0xD2, 0x69, 0x90, 0x09, 0x19, 0x40, 0x03, 0x4B, 0x05, 
+	0x61, 0x93, 0x43, 0x0B, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x0D, 0x38, 0xF0, 0x00, 0xFF, 0xFF, 0x4A, 0xA9, 0xB5, 0xF0, 0x68, 0x11, 0x48, 0xA9, 
+	0xB0, 0x93, 0x68, 0x07, 0x22, 0x0D, 0x46, 0x8C, 0x25, 0x7F, 0x21, 0x00, 0x97, 0x01, 0x24, 0xFF, 
+	0x18, 0x83, 0x00, 0x90, 0x00, 0x5B, 0x4E, 0xA4, 0x87, 0x99, 0x18, 0xF3, 0x33, 0x38, 0x27, 0x00, 
+	0x46, 0x67, 0x72, 0x1F, 0x3A, 0x01, 0x50, 0x39, 0xB2, 0xD2, 0x9F, 0x01, 0x0F, 0x46, 0xAE, 0xF1, 
+	0x07, 0x26, 0x00, 0x50, 0x39, 0x72, 0x5D, 0x72, 0xDD, 0x72, 0x9C, 0x73, 0x1C, 0x2A, 0xFF, 0x80, 
+	0xD9, 0x4A, 0x9B, 0xD1, 0xE8, 0x7E, 0x11, 0x4B, 0x9B, 0x4C, 0x9B, 0x68, 0x98, 0x39, 0x01, 0x4D, 
+	0x97, 0x81, 0xA6, 0x90, 0x04, 0x42, 0x88, 0x60, 0x2E, 0x30, 0x01, 0xDA, 0x02, 0x60, 0x98, 0x90, 
+	0x04, 0x96, 0x11, 0x68, 0xDE, 0xDD, 0x02, 0x2E, 0x00, 0x96, 0x11, 0x3E, 0x01, 0x7D, 0xD1, 0x60, 
+	0xDE, 0x39, 0x01, 0x68, 0x1A, 0xDA, 0x01, 0x42, 0x8A, 0x60, 0x1A, 0x32, 0x01, 0x2A, 0x00, 0x68, 
+	0x5A, 0x3A, 0x01, 0xDD, 0x01, 0x9F, 0x04, 0x60, 0x5A, 0x42, 0x87, 0x98, 0x11, 0xE0, 0xA3, 0xDA, 
+	0x00, 0x68, 0x5B, 0x68, 0x19, 0x93, 0x06, 0x4A, 0x84, 0x68, 0x12, 0x4B, 0x88, 0x4C, 0x86, 0x68, 
+	0x1B, 0x4B, 0x80, 0x93, 0x0D, 0x68, 0x1B, 0x91, 0x10, 0x93, 0x0A, 0x92, 0x09, 0x48, 0x84, 0x89, 
+	0xA4, 0x9D, 0x06, 0x94, 0x0C, 0x42, 0xB5, 0x9E, 0x10, 0xE0, 0x81, 0xDD, 0x00, 0x46, 0x6F, 0x9A, 
+	0x04, 0x32, 0x01, 0x21, 0x10, 0x01, 0x92, 0x5D, 0xCF, 0x92, 0x02, 0x1C, 0x33, 0xE0, 0x05, 0x97, 
+	0x07, 0x54, 0x2F, 0x27, 0x00, 0x3B, 0x01, 0x9F, 0x06, 0xDC, 0x71, 0x42, 0x9F, 0x1C, 0x9C, 0x99, 
+	0x02, 0x5C, 0x2A, 0x19, 0x0D, 0x00, 0x69, 0x4E, 0x77, 0x2A, 0x0E, 0x5B, 0x89, 0x9D, 0x0D, 0xD8, 
+	0xF0, 0x2A, 0x00, 0x1B, 0x49, 0xE0, 0x71, 0xD1, 0x00, 0xB2, 0xD4, 0x3A, 0x01, 0x9F, 0x04, 0x9E, 
+	0x09, 0x18, 0xB5, 0x00, 0xA2, 0x68, 0x2E, 0x43, 0x4F, 0x44, 0x67, 0x46, 0xB4, 0x9D, 0x0A, 0x60, 
+	0x2F, 0x18, 0xAF, 0x1C, 0x0E, 0x43, 0x5E, 0x68, 0x3D, 0x19, 0x15, 0x46, 0xAC, 0x95, 0x01, 0x00, 
+	0x6D, 0x44, 0x66, 0x4D, 0x62, 0x9D, 0x01, 0x46, 0xAC, 0x44, 0xAC, 0x60, 0x3E, 0x8F, 0xAF, 0x46, 
+	0x65, 0x7A, 0x2E, 0x35, 0x38, 0x96, 0x03, 0x19, 0xCF, 0x57, 0xAE, 0x26, 0x09, 0x96, 0x01, 0x80, 
+	0xAF, 0x46, 0x6F, 0x9E, 0x0C, 0x26, 0x01, 0x46, 0xB4, 0x9E, 0x03, 0x44, 0xB4, 0x96, 0x03, 0x36, 
+	0x01, 0xB2, 0xB6, 0x46, 0x66, 0x26, 0x0C, 0x96, 0x0C, 0x9E, 0x04, 0x5D, 0xF7, 0x9F, 0x01, 0x72, 
+	0x2F, 0xDA, 0x00, 0x42, 0xBE, 0x4E, 0x51, 0x72, 0x6E, 0x00, 0x6D, 0x19, 0x15, 0x35, 0x38, 0x19, 
+	0x75, 0x57, 0xAE, 0x26, 0x0A, 0x42, 0xB7, 0x9F, 0x04, 0x72, 0xAF, 0xDD, 0x00, 0x19, 0x15, 0x4E, 
+	0x4B, 0x19, 0x75, 0x00, 0x6D, 0x26, 0x0B, 0x35, 0x38, 0x42, 0xB3, 0x57, 0xAE, 0x72, 0xEB, 0xDA, 
+	0x00, 0x4F, 0x46, 0x19, 0x15, 0x19, 0x7D, 0x00, 0x6D, 0x26, 0x0C, 0x35, 0x38, 0x42, 0xB3, 0x57, 
+	0xAE, 0x73, 0x2B, 0xDD, 0x00, 0x4C, 0x41, 0x19, 0x12, 0x18, 0xA2, 0x00, 0x52, 0x5F, 0x54, 0x25, 
+	0x3E, 0x42, 0xA1, 0x32, 0x38, 0x9F, 0x06, 0xDD, 0x8E, 0x80, 0xD1, 0x3B, 0x01, 0xDD, 0x8D, 0x42, 
+	0x9F, 0x9A, 0x11, 0x99, 0x04, 0x91, 0x04, 0x39, 0x01, 0xDB, 0x00, 0x42, 0x91, 0x46, 0x6B, 0xE7, 
+	0x71, 0x5A, 0xE4, 0x24, 0x30, 0x81, 0x9C, 0x4B, 0x38, 0xBD, 0xF0, 0xB0, 0x13, 0x43, 0xCA, 0x39, 
+	0x02, 0x40, 0x11, 0x17, 0xD2, 0x9E, 0x04, 0x91, 0x03, 0x43, 0x71, 0x9F, 0x03, 0x91, 0x0E, 0x43, 
+	0x5F, 0xB2, 0xD9, 0x25, 0x00, 0x91, 0x05, 0x97, 0x0F, 0x95, 0x01, 0x22, 0x03, 0x94, 0x08, 0x46, 
+	0x9C, 0x4F, 0x32, 0x4E, 0x31, 0x5C, 0xB1, 0x9C, 0x07, 0x5C, 0xBB, 0x9D, 0x05, 0x18, 0xEB, 0x18, 
+	0x61, 0x31, 0x01, 0xB2, 0x49, 0x01, 0x89, 0xB2, 0x5B, 0x18, 0xCB, 0x33, 0x02, 0xB2, 0x65, 0x5C, 
+	0x1C, 0x29, 0x0D, 0x1E, 0x69, 0x9B, 0x08, 0xD8, 0x27, 0x00, 0x8E, 0x9F, 0x02, 0x97, 0x0B, 0x18, 
+	0xFF, 0x18, 0x71, 0x9F, 0x09, 0x9F, 0x0A, 0x19, 0xBB, 0x19, 0xBF, 0x00, 0x49, 0x97, 0x00, 0x4E, 
+	0x1B, 0x18, 0x71, 0x9F, 0x01, 0x2F, 0x00, 0x31, 0x38, 0xB2, 0xE4, 0xD1, 0x1A, 0x9D, 0x0B, 0x94, 
+	0x01, 0xB2, 0xE4, 0x34, 0x0E, 0x68, 0x1C, 0x54, 0x2C, 0x9F, 0x00, 0x9E, 0x0E, 0x60, 0x1C, 0x19, 
+	0xA4, 0x9C, 0x0F, 0x68, 0x3B, 0x19, 0x1B, 0x9D, 0x03, 0x88, 0x8C, 0x60, 0x3B, 0x19, 0x2C, 0x7A, 
+	0x0B, 0x80, 0x8C, 0x33, 0x01, 0x1E, 0x53, 0x72, 0x0B, 0xD0, 0x10, 0x2A, 0x00, 0xE7, 0xBF, 0xB2, 
+	0xDA, 0x99, 0x08, 0x9E, 0x02, 0x18, 0x73, 0x9C, 0x01, 0xD0, 0xF4, 0x2C, 0x1F, 0xD0, 0xF2, 0x42, 
+	0xAC, 0x26, 0x1F, 0x25, 0x1F, 0x96, 0x01, 0x54, 0x1D, 0x2A, 0x00, 0x1E, 0x53, 0x46, 0x63, 0xD1, 
+	0xEE, 0x46, 0xC0, 0xE7, 0x18, 0x20, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0x48, 0x20, 0x00, 0x02, 
+	0x24, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x0D, 
+	0x38, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x59, 0xF8, 0x00, 0x00, 0x59, 
+	0xF4, 0xB0, 0x89, 0xB5, 0xF0, 0x49, 0x46, 0x23, 0x0F, 0xE0, 0x02, 0x22, 0xFF, 0x38, 0x01, 0x18, 
+	0x58, 0x3B, 0x01, 0x70, 0x02, 0xD1, 0xF9, 0x2B, 0x00, 0x68, 0xD8, 0x4B, 0x42, 0x68, 0x9A, 0x68, 
+	0x19, 0x90, 0x01, 0x68, 0x5B, 0x4B, 0x40, 0x93, 0x03, 0x68, 0x1B, 0x91, 0x02, 0x4B, 0x3F, 0x93, 
+	0x04, 0x93, 0x06, 0x7F, 0x5B, 0x9B, 0x07, 0xE0, 0x68, 0x4A, 0x3D, 0x1C, 0x88, 0x5C, 0x83, 0x18, 
+	0x18, 0x2B, 0x1F, 0xB2, 0x5B, 0x4A, 0x3B, 0xD1, 0x5A, 0x5A, 0x82, 0x00, 0x40, 0x20, 0x04, 0x9D, 
+	0x04, 0x92, 0x05, 0x1B, 0x52, 0x38, 0x01, 0x4A, 0x38, 0x56, 0x14, 0xB2, 0xC0, 0x44, 0x64, 0x4A, 
+	0x37, 0x34, 0x01, 0x56, 0x12, 0x01, 0xA4, 0x18, 0x8A, 0x4E, 0x31, 0x32, 0x02, 0x5C, 0xB4, 0x18, 
+	0xA2, 0xD8, 0x41, 0x2C, 0x0E, 0xD0, 0x3E, 0x2B, 0x1F, 0xD0, 0x3D, 0x42, 0xA3, 0xD0, 0x3B, 0x2C, 
+	0x00, 0x1E, 0x5D, 0x27, 0x0A, 0x4A, 0x2E, 0x43, 0x7D, 0x19, 0x55, 0x4E, 0x2D, 0x43, 0x7A, 0x1E, 
+	0x62, 0x27, 0x3E, 0x18, 0xB2, 0x27, 0x3E, 0x5F, 0xEE, 0x1C, 0x1A, 0x5F, 0xD5, 0xDD, 0x00, 0x42, 
+	0xAE, 0x25, 0x0A, 0x1C, 0x22, 0x43, 0x6A, 0x3A, 0x01, 0x9D, 0x06, 0x4E, 0x25, 0x27, 0x3E, 0x18, 
+	0xB2, 0x9E, 0x05, 0x5F, 0xD2, 0x11, 0x92, 0x43, 0x6A, 0xDD, 0x1D, 0x42, 0x96, 0xD9, 0x02, 0x42, 
+	0x9C, 0x1C, 0x23, 0x1C, 0x1A, 0x1E, 0x5E, 0x1C, 0x14, 0xB2, 0xF6, 0x4A, 0x15, 0x25, 0x00, 0x5D, 
+	0x97, 0x46, 0x6F, 0x97, 0x00, 0x3C, 0x01, 0x57, 0x7D, 0x1C, 0x6F, 0xB2, 0xE4, 0x42, 0xA5, 0xD0, 
+	0x09, 0x46, 0x6D, 0xDA, 0x03, 0x55, 0x15, 0x78, 0x2D, 0x42, 0xA5, 0xE0, 0x06, 0xB2, 0xE4, 0xDD, 
+	0x04, 0x55, 0x94, 0x55, 0x54, 0x1C, 0x23, 0xE0, 0x00, 0xD1, 0xAB, 0x28, 0x00, 0x9E, 0x03, 0x39, 
+	0x01, 0xDA, 0x98, 0x42, 0xB1, 0x3A, 0x01, 0x46, 0x62, 0x42, 0xBA, 0x9F, 0x01, 0x1C, 0x53, 0xDB, 
+	0x05, 0x99, 0x02, 0x01, 0x9B, 0x46, 0x94, 0x93, 0x07, 0xB0, 0x09, 0xE7, 0xF1, 0x46, 0xC0, 0xBD, 
+	0xF0, 0x20, 0x00, 0x02, 0xEC, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x0D, 0x38, 0x20, 0x00, 0x0D, 
+	0x48, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x59, 0xF8, 0x00, 0x00, 0x59, 
+	0xF4, 0x20, 0x00, 0x02, 0x24, 0x4A, 0xD4, 0xB5, 0xF0, 0x68, 0x11, 0xB0, 0x8D, 0x18, 0xD0, 0x23, 
+	0x00, 0x24, 0x00, 0x30, 0xBE, 0x3B, 0x0A, 0x5F, 0x00, 0x41, 0xA0, 0x1E, 0x44, 0x18, 0x09, 0x1C, 
+	0x1D, 0x3F, 0xD5, 0xAE, 0xF1, 0x08, 0xD1, 0xF4, 0x35, 0x8C, 0x60, 0x11, 0x4B, 0xCD, 0x32, 0xBE, 
+	0x68, 0x1B, 0x4B, 0xCC, 0x93, 0x03, 0x68, 0x1B, 0x24, 0x0E, 0x4E, 0xCB, 0x93, 0x05, 0x57, 0x33, 
+	0x3C, 0x01, 0xD1, 0x01, 0x1C, 0x5F, 0x1C, 0x03, 0xE0, 0x73, 0x56, 0xE8, 0x4D, 0xC7, 0xD1, 0xFA, 
+	0x1C, 0x46, 0x1C, 0x5F, 0x55, 0x2B, 0x98, 0x03, 0xD0, 0x6B, 0x19, 0x46, 0x00, 0x9D, 0x00, 0xA0, 
+	0x68, 0x37, 0x9F, 0x03, 0x46, 0xBC, 0x44, 0xBC, 0x58, 0x3F, 0x60, 0x37, 0x46, 0x67, 0x9F, 0x05, 
+	0x9E, 0x05, 0x68, 0x2E, 0x19, 0x75, 0x4F, 0xB9, 0x58, 0x38, 0x26, 0x0A, 0x18, 0x30, 0x1C, 0x30, 
+	0x60, 0x28, 0x18, 0x38, 0x43, 0x58, 0x27, 0x09, 0x30, 0x38, 0x79, 0x55, 0x57, 0xC7, 0xB2, 0x6F, 
+	0x46, 0xBC, 0xDD, 0x00, 0x45, 0xBC, 0x43, 0x5E, 0x72, 0x45, 0x79, 0x90, 0x4D, 0xB0, 0x36, 0x38, 
+	0x19, 0xAE, 0x57, 0xF7, 0x27, 0x0A, 0x42, 0xAF, 0xB2, 0x45, 0x72, 0xB0, 0xDA, 0x00, 0x4F, 0xAB, 
+	0x79, 0xD6, 0x26, 0x0A, 0x96, 0x06, 0x43, 0x58, 0x1C, 0x30, 0x30, 0x38, 0x18, 0x38, 0x57, 0x45, 
+	0x25, 0x0B, 0x46, 0x6D, 0x46, 0xAC, 0x78, 0x2D, 0x35, 0x18, 0x45, 0xAC, 0xB2, 0x6D, 0x46, 0x6F, 
+	0xDD, 0x03, 0x5D, 0xEF, 0x25, 0x18, 0x43, 0x5E, 0x72, 0xC7, 0x7A, 0x10, 0x4D, 0xA0, 0x37, 0x38, 
+	0x19, 0xAF, 0x57, 0xBE, 0x26, 0x0C, 0x42, 0xAE, 0xB2, 0x45, 0x73, 0x38, 0xDA, 0x00, 0x43, 0x58, 
+	0x20, 0x0A, 0x4F, 0x9A, 0x88, 0x56, 0x18, 0x38, 0x96, 0x06, 0x5F, 0x85, 0x26, 0x3E, 0x46, 0xAC, 
+	0x26, 0x18, 0x5F, 0x75, 0x46, 0x6D, 0x26, 0x0A, 0x30, 0x38, 0xDA, 0x03, 0x45, 0xAC, 0x25, 0x18, 
+	0x46, 0x6F, 0x80, 0xC7, 0x5B, 0xEF, 0x48, 0x91, 0x43, 0x5E, 0x19, 0x87, 0x39, 0x01, 0x88, 0x10, 
+	0x8F, 0xBB, 0x87, 0xBB, 0x18, 0xC3, 0x79, 0x10, 0x37, 0x38, 0x18, 0xC3, 0x7A, 0x3B, 0x3A, 0x0A, 
+	0x72, 0x3B, 0xD0, 0x00, 0x2C, 0x00, 0x4F, 0x89, 0xE7, 0x81, 0x1C, 0x3D, 0x1C, 0x26, 0x95, 0x03, 
+	0x35, 0x3C, 0x1C, 0x25, 0x60, 0x39, 0x22, 0x00, 0x48, 0x88, 0x56, 0x9A, 0x18, 0x33, 0xD1, 0x19, 
+	0x32, 0x01, 0x42, 0xB5, 0x70, 0x1D, 0x4B, 0x82, 0xD0, 0x12, 0x68, 0x1A, 0x00, 0xB1, 0x58, 0x50, 
+	0x00, 0xAB, 0x4A, 0x80, 0x50, 0xD0, 0x68, 0x12, 0x48, 0x7D, 0x50, 0xD1, 0x58, 0x51, 0x1C, 0x13, 
+	0x22, 0x0A, 0x18, 0xC0, 0x43, 0x6B, 0x99, 0x03, 0x30, 0x3C, 0xFB, 0x7E, 0xF0, 0x03, 0x35, 0x01, 
+	0x68, 0x3B, 0xDA, 0x05, 0x42, 0x9D, 0x36, 0x01, 0x99, 0x03, 0x91, 0x03, 0x31, 0x0A, 0xD1, 0xD9, 
+	0x2E, 0x0E, 0x68, 0x1B, 0x4B, 0x76, 0xD5, 0x3B, 0x06, 0xDA, 0x78, 0x1B, 0x4B, 0x75, 0xD0, 0x03, 
+	0x2B, 0x00, 0x49, 0x74, 0x20, 0x04, 0xFE, 0xD4, 0xF0, 0x01, 0x4E, 0x73, 0x25, 0x00, 0x1C, 0x69, 
+	0xE0, 0x2C, 0x68, 0x33, 0x01, 0x89, 0x4A, 0x71, 0x68, 0x77, 0x46, 0xA4, 0x91, 0x03, 0x9C, 0x03, 
+	0xE0, 0x12, 0x18, 0x61, 0x1C, 0x99, 0xB2, 0x40, 0x5C, 0x88, 0x2C, 0x0D, 0x1E, 0x44, 0x4C, 0x66, 
+	0xD8, 0x09, 0x38, 0x01, 0x18, 0x20, 0xB2, 0x40, 0x78, 0x00, 0xD0, 0x02, 0x1C, 0x44, 0xB2, 0xC0, 
+	0x30, 0x01, 0x3B, 0x01, 0x54, 0x88, 0xDA, 0xEA, 0x42, 0xBB, 0x46, 0x64, 0x4B, 0x61, 0x2B, 0x00, 
+	0x78, 0x1B, 0x4B, 0x63, 0xD0, 0x09, 0x01, 0xAA, 0x4F, 0x63, 0x19, 0xD2, 0x7D, 0xD9, 0x20, 0x04, 
+	0x23, 0x01, 0xF0, 0x01, 0x93, 0x00, 0x35, 0x01, 0xFE, 0x4D, 0x7E, 0x3B, 0x4F, 0x5D, 0xDB, 0xCE, 
+	0x42, 0x9D, 0x68, 0x1B, 0x4B, 0x5D, 0xDD, 0x10, 0x2B, 0x00, 0x4A, 0x5D, 0x4B, 0x5C, 0x80, 0x11, 
+	0x89, 0x99, 0x80, 0x53, 0x89, 0x1B, 0x78, 0x1B, 0x4B, 0x52, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 
+	0x23, 0x01, 0x20, 0x17, 0x93, 0x00, 0xF0, 0x01, 0x1C, 0x0B, 0x4B, 0x48, 0xFE, 0x33, 0x1C, 0x1D, 
+	0x48, 0x55, 0x49, 0x4F, 0xCD, 0x40, 0x89, 0x47, 0x96, 0x07, 0x8D, 0x0A, 0x97, 0x08, 0xB2, 0x16, 
+	0x68, 0x47, 0x69, 0x86, 0x96, 0x05, 0xB2, 0xB7, 0x97, 0x09, 0x97, 0x04, 0x1B, 0xD2, 0x31, 0x31, 
+	0xB2, 0x92, 0x92, 0x0A, 0x78, 0x09, 0x20, 0x00, 0x4A, 0x3E, 0x68, 0x17, 0x91, 0x06, 0xE0, 0x2F, 
+	0x90, 0x03, 0x23, 0x0A, 0x9A, 0x03, 0xCF, 0x01, 0x43, 0x53, 0x43, 0x48, 0x99, 0x05, 0x18, 0xCB, 
+	0x49, 0x37, 0x5E, 0x99, 0x22, 0x3C, 0x43, 0x59, 0x9B, 0x09, 0xFA, 0x94, 0xF0, 0x03, 0x4A, 0x42, 
+	0x99, 0x08, 0x78, 0x13, 0x18, 0x08, 0x80, 0x28, 0xB2, 0x80, 0xD1, 0x15, 0x2B, 0x00, 0x42, 0xB0, 
+	0xB2, 0x00, 0x9B, 0x06, 0xDA, 0x07, 0x43, 0x58, 0x1B, 0x80, 0x11, 0x80, 0x99, 0x04, 0x80, 0x28, 
+	0x18, 0x08, 0x9A, 0x05, 0xE0, 0x0A, 0x42, 0xB0, 0x1A, 0x10, 0x9B, 0x06, 0xDA, 0x06, 0x43, 0x58, 
+	0x1B, 0x80, 0x11, 0x80, 0x99, 0x0A, 0x80, 0x28, 0x1A, 0x08, 0x35, 0x02, 0x9A, 0x03, 0x92, 0x03, 
+	0x32, 0x01, 0x98, 0x07, 0x9B, 0x03, 0xDB, 0xCB, 0x42, 0x83, 0x49, 0x2E, 0x4D, 0x20, 0x4A, 0x28, 
+	0x68, 0x2D, 0x89, 0x0E, 0x95, 0x05, 0x96, 0x07, 0x68, 0x0D, 0x95, 0x08, 0x8C, 0xD3, 0xB2, 0x1F, 
+	0x69, 0x4D, 0x1C, 0x11, 0xB2, 0xAE, 0x96, 0x06, 0x97, 0x04, 0x78, 0x09, 0x31, 0x2F, 0xB2, 0x9B, 
+	0x1B, 0x9B, 0x32, 0x30, 0x91, 0x09, 0x4E, 0x15, 0x78, 0x12, 0x4B, 0x16, 0x93, 0x0B, 0x92, 0x0A, 
+	0x20, 0x00, 0x36, 0x20, 0x68, 0x1F, 0xE0, 0x50, 0x90, 0x03, 0x23, 0x0A, 0x9A, 0x03, 0xCF, 0x01, 
+	0x43, 0x53, 0x43, 0x48, 0x99, 0x04, 0x18, 0x5B, 0x49, 0x0D, 0x5E, 0x99, 0x22, 0x3C, 0x43, 0x59, 
+	0x9B, 0x08, 0xFA, 0x40, 0xF0, 0x03, 0x4A, 0x18, 0x99, 0x07, 0x78, 0x13, 0x18, 0x08, 0x80, 0x30, 
+	0xB2, 0x80, 0xD1, 0x36, 0x2B, 0x00, 0x42, 0xA8, 0xB2, 0x00, 0x9B, 0x09, 0xDA, 0x28, 0x43, 0x58, 
+	0x1B, 0x40, 0x11, 0x80, 0x99, 0x06, 0x80, 0x30, 0x18, 0x08, 0x46, 0xC0, 0xE0, 0x2B, 0x20, 0x00, 
+	0x02, 0x24, 0x20, 0x00, 0x00, 0x48, 0x20, 0x00, 0x00, 0x44, 0x20, 0x00, 0x02, 0xEC, 0x20, 0x00, 
+	0x00, 0x58, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x64, 0x20, 0x00, 0x10, 0xE4, 0x40, 0x00, 
+	0x20, 0x00, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x20, 0x42, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 
+	0x01, 0x70, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x01, 0xDF, 0x1A, 0x10, 
+	0x9A, 0x04, 0xDA, 0x06, 0x42, 0xA8, 0x1B, 0x40, 0x9B, 0x0A, 0x99, 0x0B, 0x43, 0x58, 0x1A, 0x08, 
+	0x11, 0x80, 0x9A, 0x03, 0x80, 0x30, 0x32, 0x01, 0x36, 0x02, 0x9B, 0x03, 0x92, 0x03, 0x42, 0x83, 
+	0x98, 0x05, 0x4B, 0x1B, 0xDB, 0xAA, 0x32, 0x2A, 0x1C, 0x1A, 0x1C, 0x1A, 0x78, 0x17, 0x78, 0x12, 
+	0x32, 0x2B, 0x5E, 0x5E, 0x21, 0x28, 0x25, 0x26, 0x92, 0x03, 0x33, 0x2C, 0x5F, 0x5A, 0x78, 0x1B, 
+	0x92, 0x04, 0x93, 0x06, 0x49, 0x14, 0x46, 0xB4, 0x25, 0x00, 0x26, 0x00, 0xE0, 0x1D, 0x2B, 0x00, 
+	0x5F, 0x8B, 0x4A, 0x11, 0xD0, 0x16, 0x23, 0x04, 0x18, 0xA8, 0x26, 0x20, 0x5E, 0xC2, 0x2F, 0x00, 
+	0x5F, 0x83, 0x46, 0x66, 0xD0, 0x01, 0x9E, 0x03, 0x1A, 0xB2, 0xD0, 0x01, 0x2E, 0x00, 0x1A, 0xF3, 
+	0x9E, 0x04, 0x2E, 0x00, 0x9E, 0x06, 0x1C, 0x16, 0xD0, 0x02, 0x1C, 0x33, 0x1C, 0x1A, 0x84, 0x03, 
+	0x80, 0x82, 0x31, 0x0A, 0x34, 0x01, 0x78, 0xAF, 0xAE, 0xF1, 0x09, 0x9E, 0x05, 0x35, 0x02, 0xDB, 
+	0xDE, 0x42, 0xB4, 0xBD, 0xF0, 0xB0, 0x0D, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0x60, 0x20, 
+	0x00, 0x02, 0x24, 0x4B, 0x0A, 0xB5, 0x30, 0x33, 0x04, 0x21, 0x00, 0x4A, 0x09, 0x7F, 0xDB, 0x1C, 
+	0x08, 0x24, 0x0A, 0x3B, 0x01, 0xE0, 0x07, 0x1C, 0x25, 0xB2, 0xDB, 0x19, 0x55, 0x43, 0x5D, 0x4D, 
+	0x05, 0x87, 0xA9, 0x2B, 0x00, 0x54, 0xE8, 0x60, 0x13, 0xD1, 0xF5, 0x46, 0xC0, 0xBD, 0x30, 0x20, 
+	0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x01, 0x64, 0x4A, 0x08, 0xB5, 0x00, 0x42, 
+	0x5B, 0x23, 0x01, 0x4B, 0x07, 0x60, 0x53, 0x60, 0x11, 0x21, 0x00, 0xE0, 0x04, 0x78, 0x1B, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x00, 0x40, 0x1D, 0x18, 0x2B, 0x00, 0x52, 0x81, 0xBD, 0x00, 0xD1, 0xF8, 0x20, 
+	0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x43, 0x40, 0x43, 0x49, 0x47, 0x70, 0x18, 0x40, 0xB5, 
+	0xF0, 0x47, 0x70, 0x22, 0x00, 0x4B, 0x83, 0x7F, 0xD9, 0x33, 0x04, 0x1C, 0x0B, 0xB0, 0x87, 0x26, 
+	0x0A, 0x48, 0x81, 0xE0, 0x07, 0x1C, 0x15, 0xB2, 0xDB, 0x3B, 0x01, 0x43, 0x5C, 0x1C, 0x34, 0x87, 
+	0xA2, 0x19, 0x04, 0x72, 0x25, 0x34, 0x38, 0x2B, 0x00, 0x1C, 0x04, 0x4B, 0x7B, 0xD1, 0xF4, 0x1C, 
+	0x0B, 0x68, 0x1A, 0xDD, 0x00, 0x42, 0x91, 0x60, 0x23, 0x1C, 0x13, 0x4A, 0x79, 0x48, 0x78, 0x24, 
+	0x0E, 0x4B, 0x79, 0x3C, 0x01, 0x21, 0xFF, 0x00, 0xA5, 0xB2, 0xE4, 0x50, 0xAB, 0x55, 0x01, 0xD1, 
+	0xF8, 0x2C, 0x00, 0x1C, 0x25, 0x4B, 0x6F, 0x7F, 0xDB, 0x33, 0x04, 0x93, 0x03, 0x1C, 0x26, 0x69, 
+	0x1B, 0x4B, 0x72, 0x4B, 0x6D, 0x93, 0x04, 0x93, 0x05, 0x68, 0x1B, 0x4C, 0x70, 0xE0, 0x47, 0x2B, 
+	0x00, 0x5D, 0x63, 0x4C, 0x6F, 0xD0, 0x42, 0x58, 0xE3, 0x00, 0xAB, 0x01, 0x1B, 0x9C, 0x04, 0x93, 
+	0x01, 0x19, 0x1B, 0x00, 0x6A, 0x4B, 0x6C, 0x18, 0xD3, 0x27, 0x01, 0x42, 0x7F, 0x24, 0x00, 0xE0, 
+	0x20, 0x93, 0x02, 0x43, 0x63, 0x23, 0x0A, 0x18, 0xC3, 0x48, 0x60, 0x5E, 0x5B, 0x21, 0x3C, 0xD0, 
+	0x16, 0x2B, 0x00, 0x00, 0x63, 0x9A, 0x02, 0x88, 0x98, 0x18, 0xC3, 0x4A, 0x5B, 0x88, 0x93, 0x1C, 
+	0x23, 0x1A, 0xC0, 0x00, 0x5B, 0x33, 0x10, 0x9A, 0x02, 0x5A, 0x99, 0x8B, 0x13, 0xB2, 0x00, 0xB2, 
+	0x09, 0x1A, 0xC9, 0xFF, 0x98, 0xF7, 0xFF, 0x42, 0x98, 0x9B, 0x01, 0x1C, 0x27, 0xDA, 0x01, 0x34, 
+	0x01, 0x90, 0x01, 0x98, 0x05, 0xB2, 0xE4, 0xDB, 0xDB, 0x42, 0x84, 0xD0, 0x0D, 0x1C, 0x79, 0x49, 
+	0x50, 0x4B, 0x4F, 0x00, 0xBA, 0x57, 0xD8, 0xD0, 0x04, 0x30, 0x01, 0x9C, 0x01, 0x58, 0x88, 0xDD, 
+	0x03, 0x42, 0xA0, 0x9C, 0x01, 0xE0, 0x00, 0x55, 0xDD, 0x50, 0x8C, 0x9C, 0x03, 0x35, 0x01, 0x42, 
+	0xA3, 0xB2, 0xEB, 0x1C, 0x34, 0xD3, 0xB3, 0x4E, 0x44, 0x25, 0x00, 0x48, 0x44, 0xE0, 0x28, 0xB2, 
+	0x7B, 0x5D, 0x47, 0xD0, 0x21, 0x33, 0x01, 0xB2, 0xFF, 0x00, 0x69, 0x18, 0x71, 0x4B, 0x3E, 0x00, 
+	0x7A, 0x88, 0x89, 0x80, 0x91, 0x18, 0x9A, 0x31, 0x10, 0x1C, 0x29, 0x00, 0x49, 0x1C, 0x3A, 0x32, 
+	0x10, 0x5B, 0x89, 0x52, 0xD1, 0x00, 0x52, 0x1C, 0x10, 0x22, 0x0A, 0x1C, 0x11, 0x43, 0x78, 0x18, 
+	0x1B, 0x43, 0x69, 0x18, 0x71, 0x1C, 0x18, 0x31, 0x3C, 0x30, 0x3C, 0xF9, 0x40, 0xF0, 0x03, 0x00, 
+	0xAA, 0x4B, 0x34, 0x4B, 0x37, 0x58, 0xD2, 0x50, 0xFA, 0x00, 0xBF, 0xB2, 0xED, 0x35, 0x01, 0x42, 
+	0x9D, 0x68, 0x33, 0xE0, 0x3D, 0xDB, 0xD3, 0x57, 0x33, 0x4E, 0x2D, 0xD1, 0x36, 0x33, 0x01, 0x43, 
+	0x63, 0x23, 0x0A, 0x20, 0x3C, 0x18, 0xEB, 0x2B, 0x00, 0x5E, 0x1B, 0x4B, 0x25, 0xD0, 0x2F, 0x33, 
+	0x04, 0x4A, 0x2E, 0x23, 0x00, 0x7F, 0xDF, 0x4E, 0x29, 0xE0, 0x26, 0x2E, 0x00, 0x5C, 0xF6, 0x26, 
+	0x00, 0xD1, 0x20, 0x28, 0x00, 0x5F, 0x90, 0x4A, 0x21, 0xD1, 0x1C, 0x55, 0x11, 0x00, 0x67, 0x48, 
+	0x1D, 0x49, 0x1E, 0x88, 0xBF, 0x19, 0xCF, 0x18, 0x82, 0x00, 0x5A, 0x1C, 0x27, 0x80, 0x97, 0x1C, 
+	0x1A, 0x37, 0x10, 0x5A, 0x7F, 0x00, 0x7F, 0x00, 0x52, 0x32, 0x10, 0x22, 0x0A, 0x52, 0x17, 0x18, 
+	0xC0, 0x43, 0x53, 0x43, 0x63, 0x1C, 0x13, 0x31, 0x3C, 0x18, 0xC9, 0xF0, 0x03, 0x30, 0x3C, 0xE0, 
+	0x04, 0xF8, 0xFF, 0x32, 0x0A, 0x33, 0x01, 0x42, 0xB9, 0xB2, 0xD9, 0x34, 0x01, 0xD3, 0xD5, 0xE0, 
+	0x00, 0xB2, 0xE4, 0x68, 0x2B, 0x4D, 0x0D, 0xDB, 0xBD, 0x42, 0x9C, 0x49, 0x0C, 0x4B, 0x09, 0x7F, 
+	0xDD, 0x33, 0x04, 0x20, 0xFF, 0x4B, 0x12, 0x34, 0x0E, 0x1C, 0x1C, 0x42, 0xAA, 0x78, 0x1A, 0x5C, 
+	0x8A, 0xD2, 0x02, 0xE0, 0x00, 0x70, 0x1A, 0x33, 0x01, 0x70, 0x18, 0xD1, 0xF5, 0x42, 0xA3, 0xBD, 
+	0xF0, 0xB0, 0x07, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x02, 0x24, 0x20, 
+	0x00, 0x03, 0xE8, 0x20, 0x00, 0x10, 0xF8, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x09, 0x24, 0x20, 
+	0x00, 0x01, 0xEC, 0x20, 0x00, 0x00, 0xF8, 0x20, 0x00, 0x09, 0x80, 0x20, 0x00, 0x0D, 0xD8, 0x20, 
+	0x00, 0x02, 0xEC, 0x4B, 0x42, 0xB5, 0xF7, 0x60, 0x19, 0x21, 0x00, 0x24, 0x0A, 0x4B, 0x41, 0x4B, 
+	0x41, 0x60, 0x19, 0x33, 0x04, 0x1C, 0x08, 0x4D, 0x40, 0x7F, 0xDB, 0x46, 0xA4, 0x1C, 0x1A, 0x3A, 
+	0x01, 0xE0, 0x11, 0x1C, 0x26, 0xB2, 0xD2, 0x19, 0xAE, 0x43, 0x56, 0x7A, 0x36, 0x36, 0x38, 0xDA, 
+	0x00, 0x42, 0xB0, 0x46, 0x66, 0x1C, 0x30, 0x19, 0xAE, 0x43, 0x56, 0x5F, 0xF6, 0x27, 0x3C, 0xDA, 
+	0x00, 0x42, 0xB1, 0x2A, 0x00, 0x1C, 0x31, 0x4A, 0x32, 0xD1, 0xEB, 0x60, 0x11, 0x60, 0x50, 0x20, 
+	0x0A, 0x4A, 0x2F, 0x4A, 0x31, 0x68, 0x11, 0x3B, 0x01, 0xE0, 0x07, 0x1C, 0x04, 0xB2, 0xDB, 0x19, 
+	0x14, 0x43, 0x5C, 0x7A, 0x24, 0x34, 0x38, 0x1C, 0x14, 0x19, 0x09, 0xD1, 0xF4, 0x2B, 0x00, 0x60, 
+	0x19, 0x4B, 0x27, 0x2B, 0x00, 0x68, 0x13, 0x4B, 0x26, 0xDD, 0x0F, 0x68, 0x5B, 0x4A, 0x28, 0x80, 
+	0x53, 0x80, 0x11, 0x78, 0x1B, 0x4B, 0x27, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 
+	0x1D, 0x93, 0x00, 0xF0, 0x01, 0x1C, 0x0B, 0x68, 0x23, 0xFB, 0x8F, 0xDD, 0x19, 0x2B, 0x00, 0x23, 
+	0x08, 0x4A, 0x21, 0x4B, 0x21, 0x5E, 0xD1, 0x5F, 0x12, 0x24, 0x0C, 0x33, 0x3D, 0x1C, 0x18, 0x30, 
+	0x3C, 0x78, 0x1B, 0x78, 0x00, 0x43, 0x53, 0x18, 0xC3, 0x11, 0x9B, 0xDC, 0x09, 0x42, 0x99, 0x78, 
+	0x1B, 0x4B, 0x18, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x19, 0x20, 0x00, 0xFB, 0xCC, 0xF0, 0x01, 0xFE, 
+	0x40, 0xF7, 0xFF, 0x4A, 0x17, 0x4B, 0x11, 0x78, 0x12, 0x68, 0x1B, 0xDB, 0x12, 0x42, 0x93, 0x4A, 
+	0x12, 0x4B, 0x0B, 0x8E, 0xD1, 0x68, 0x18, 0x42, 0x88, 0x4B, 0x0A, 0x8F, 0x11, 0xDB, 0x03, 0x42, 
+	0x88, 0x68, 0x58, 0x8F, 0x52, 0xDA, 0x03, 0x42, 0x93, 0x68, 0x5B, 0x4B, 0x0E, 0xDB, 0x07, 0x70, 
+	0x1A, 0x22, 0x01, 0x2B, 0x00, 0xE0, 0x03, 0x4A, 0x0B, 0xD1, 0x01, 0xBD, 0xF7, 0x70, 0x13, 0x20, 
+	0x00, 0x11, 0x4C, 0x20, 0x00, 0x02, 0x0C, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 
+	0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x0D, 0x48, 0x00, 
+	0x00, 0x59, 0x6C, 0x20, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0xF5, 0x45, 0xAB, 0xAE, 0xF1, 0x0A, 
+	0x1C, 0x04, 0xB5, 0x38, 0x2A, 0x00, 0x1C, 0x08, 0x43, 0x54, 0xD0, 0x07, 0x18, 0xD1, 0x43, 0x58, 
+	0x10, 0x4D, 0x18, 0x20, 0xF0, 0x02, 0x19, 0x40, 0xBD, 0x38, 0xFF, 0xBB, 0x1A, 0x43, 0xB5, 0x10, 
+	0x19, 0x1B, 0x17, 0xDC, 0xF7, 0xFF, 0x40, 0x63, 0xBD, 0x10, 0xFF, 0xEB, 0x4B, 0xA9, 0xB5, 0xF0, 
+	0x33, 0x04, 0x25, 0x00, 0x7F, 0xDC, 0xB0, 0x87, 0xE0, 0x46, 0x1C, 0x2E, 0xB2, 0xE4, 0x3C, 0x01, 
+	0x43, 0x62, 0x22, 0x0A, 0x31, 0x38, 0x18, 0x99, 0x28, 0x00, 0x88, 0x88, 0x4F, 0xA2, 0xD0, 0x3D, 
+	0x2F, 0x00, 0x5D, 0x3F, 0x49, 0xA1, 0xD1, 0x2A, 0x29, 0x00, 0x78, 0x09, 0x18, 0x9A, 0xD0, 0x07, 
+	0x32, 0x3C, 0x21, 0x01, 0x23, 0x02, 0x20, 0x1D, 0xF0, 0x01, 0x91, 0x00, 0x20, 0x0A, 0xFB, 0x07, 
+	0x4B, 0x9B, 0x43, 0x60, 0x18, 0x18, 0x49, 0x9B, 0x5F, 0xC2, 0x27, 0x3C, 0x46, 0x94, 0x30, 0x38, 
+	0x5F, 0xCA, 0x27, 0x26, 0x45, 0x94, 0x1C, 0x1F, 0x31, 0x4E, 0xDB, 0x08, 0x49, 0x96, 0x78, 0x0A, 
+	0x68, 0x49, 0x7A, 0x00, 0x11, 0x92, 0x43, 0x4A, 0xDA, 0x16, 0x42, 0x90, 0x43, 0x62, 0x22, 0x0A, 
+	0x87, 0xD5, 0x18, 0xBA, 0x72, 0x16, 0x32, 0x38, 0xE0, 0x08, 0x80, 0x95, 0xB2, 0x00, 0x4A, 0x8D, 
+	0x5F, 0xD2, 0x27, 0x28, 0xDD, 0x08, 0x42, 0x82, 0x72, 0x0E, 0x80, 0xCD, 0x4A, 0x8B, 0x80, 0x8D, 
+	0x50, 0x8D, 0x00, 0xA1, 0x3A, 0x01, 0x68, 0x1A, 0x4B, 0x85, 0x60, 0x1A, 0xD1, 0xB5, 0x2C, 0x00, 
+	0x4B, 0x87, 0x60, 0x1C, 0x4B, 0x7F, 0x73, 0x9C, 0x7F, 0xDC, 0x33, 0x04, 0x3C, 0x01, 0xE0, 0xC7, 
+	0x23, 0x0A, 0xB2, 0xE4, 0x18, 0xED, 0x43, 0x63, 0x35, 0x38, 0x8F, 0xAA, 0xD1, 0x00, 0x2A, 0x00, 
+	0x4B, 0x7C, 0xE0, 0x93, 0x8D, 0x1B, 0xB2, 0x12, 0x1A, 0x52, 0xB2, 0x19, 0x00, 0x5B, 0x10, 0x52, 
+	0x80, 0xAB, 0x18, 0xD3, 0x7B, 0x9A, 0x4B, 0x7A, 0xD1, 0x0D, 0x2A, 0x00, 0x57, 0x12, 0x4A, 0x79, 
+	0xD1, 0x09, 0x2A, 0x00, 0x21, 0x01, 0x4A, 0x78, 0x22, 0x80, 0x70, 0x11, 0x69, 0x50, 0x05, 0xD2, 
+	0x06, 0x00, 0x0E, 0x00, 0x61, 0x51, 0x43, 0x01, 0x73, 0x9A, 0x22, 0x01, 0x4B, 0x71, 0x4E, 0x73, 
+	0x78, 0x33, 0x57, 0x1A, 0xDB, 0x70, 0x42, 0x9A, 0x78, 0x1A, 0x4B, 0x6F, 0xD0, 0x01, 0x2A, 0x00, 
+	0x70, 0x1A, 0x22, 0x00, 0x00, 0x62, 0x4D, 0x66, 0x33, 0x01, 0x68, 0x2B, 0x18, 0xAB, 0x60, 0x2B, 
+	0x5F, 0xD9, 0x27, 0x04, 0x18, 0x9A, 0x4B, 0x6A, 0x5F, 0x90, 0x26, 0x04, 0x32, 0x10, 0x1C, 0x22, 
+	0x5F, 0x57, 0x00, 0x52, 0x5E, 0xD7, 0x97, 0x03, 0x17, 0xD3, 0x1A, 0x0A, 0x18, 0xD2, 0x9E, 0x03, 
+	0x1B, 0xF3, 0x40, 0x5A, 0x19, 0x9B, 0x17, 0xDE, 0x18, 0xD3, 0x40, 0x73, 0x4B, 0x59, 0x93, 0x04, 
+	0x5E, 0x9E, 0x22, 0x2E, 0x1C, 0x32, 0x9B, 0x04, 0xF7, 0xFF, 0x96, 0x05, 0x9A, 0x05, 0xFF, 0x39, 
+	0x1C, 0x06, 0x9B, 0x04, 0x1C, 0x38, 0x99, 0x03, 0xFF, 0x32, 0xF7, 0xFF, 0x1C, 0x13, 0x4A, 0x4D, 
+	0x78, 0x1B, 0x33, 0x2D, 0xB2, 0x5B, 0x1C, 0x2A, 0xDD, 0x07, 0x42, 0x9E, 0x69, 0xC9, 0x49, 0x55, 
+	0x42, 0xBE, 0x1A, 0xCF, 0x1E, 0x4E, 0xDB, 0x03, 0xE0, 0x00, 0x1A, 0xF6, 0x4B, 0x45, 0x1C, 0x1E, 
+	0x78, 0x1B, 0x33, 0x2E, 0x42, 0x98, 0xB2, 0x5B, 0x49, 0x4E, 0xDD, 0x07, 0x1A, 0xCF, 0x6A, 0x09, 
+	0xDB, 0x03, 0x42, 0xB8, 0x1A, 0xC0, 0x1E, 0x48, 0x1C, 0x18, 0xE0, 0x00, 0x18, 0xD3, 0x00, 0x63, 
+	0x1C, 0x23, 0x80, 0x9E, 0x00, 0x5B, 0x33, 0x10, 0x25, 0x0A, 0x52, 0xE8, 0x4B, 0x3D, 0x43, 0x65, 
+	0x20, 0x30, 0x4E, 0x43, 0x19, 0x76, 0x5E, 0x1F, 0x21, 0x3C, 0x19, 0x55, 0x22, 0x3C, 0x5E, 0x70, 
+	0x1C, 0x3A, 0x5E, 0xA9, 0xFF, 0x0A, 0xF7, 0xFF, 0x87, 0xA8, 0x36, 0x38, 0x7A, 0x30, 0x35, 0x38, 
+	0x1C, 0x3A, 0x7A, 0x29, 0xFF, 0x02, 0xF7, 0xFF, 0x4B, 0x31, 0x72, 0x28, 0x18, 0x99, 0x00, 0x62, 
+	0x88, 0x89, 0x48, 0x37, 0x80, 0x91, 0x18, 0x82, 0x32, 0x10, 0x1C, 0x22, 0x5A, 0xD1, 0x00, 0x52, 
+	0x22, 0x0A, 0x52, 0x11, 0x43, 0x61, 0x1C, 0x11, 0x18, 0x59, 0x18, 0x40, 0x30, 0x3C, 0x1C, 0x0D, 
+	0xF0, 0x02, 0x31, 0x3C, 0x23, 0x3C, 0xFF, 0x07, 0x35, 0x38, 0x5E, 0xEA, 0x2A, 0x00, 0x4B, 0x29, 
+	0x49, 0x24, 0xD0, 0x0C, 0x31, 0x32, 0x5D, 0x1A, 0xB2, 0x50, 0x78, 0x09, 0xDA, 0x06, 0x42, 0x88, 
+	0x55, 0x1A, 0x32, 0x01, 0x42, 0x5B, 0x23, 0x01, 0xE0, 0x00, 0x80, 0xAB, 0x4D, 0x1C, 0x55, 0x1A, 
+	0xD0, 0x00, 0x2C, 0x00, 0x4E, 0x22, 0xE7, 0x33, 0x68, 0x32, 0x68, 0x29, 0x42, 0x91, 0x4B, 0x22, 
+	0x68, 0x19, 0xDA, 0x25, 0x31, 0x01, 0x48, 0x17, 0x30, 0x3E, 0x60, 0x19, 0xB2, 0x40, 0x78, 0x00, 
+	0xDA, 0x1C, 0x42, 0x81, 0x60, 0x2A, 0x4B, 0x0F, 0x7F, 0xDC, 0x33, 0x04, 0x3C, 0x01, 0xE0, 0x14, 
+	0x00, 0x63, 0xB2, 0xE4, 0x88, 0x92, 0x18, 0xF2, 0x80, 0x9A, 0x18, 0xEB, 0x33, 0x10, 0x1C, 0x23, 
+	0x5B, 0x9A, 0x00, 0x5B, 0x22, 0x0A, 0x53, 0x5A, 0x43, 0x61, 0x1C, 0x11, 0x18, 0x71, 0x18, 0x68, 
+	0x31, 0x3C, 0x30, 0x3C, 0xFE, 0xC6, 0xF0, 0x02, 0xD1, 0xE8, 0x2C, 0x00, 0x60, 0x1C, 0xE0, 0x00, 
+	0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xEC, 0x20, 0x00, 0x01, 0xEB, 
+	0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x02, 0x0C, 0x20, 0x00, 0x00, 0xF8, 
+	0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x11, 0x3E, 0x20, 0x00, 0x01, 0xE2, 0x20, 0x00, 0x0D, 0x7A, 
+	0x20, 0x00, 0x03, 0x20, 0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x01, 0x60, 0x4B, 0x31, 0xB5, 0xF0, 
+	0x78, 0x1E, 0x4D, 0x31, 0x27, 0x00, 0x4B, 0x31, 0x60, 0x2F, 0x1C, 0x1A, 0x78, 0x12, 0x32, 0x2B, 
+	0x92, 0x04, 0xB0, 0x89, 0x1C, 0x1A, 0x00, 0x50, 0x32, 0x32, 0x90, 0x06, 0x92, 0x07, 0x78, 0x12, 
+	0x5E, 0x99, 0x22, 0x30, 0x91, 0x05, 0x68, 0x6B, 0x97, 0x03, 0x93, 0x02, 0x3E, 0x01, 0xE0, 0x42, 
+	0x1D, 0x33, 0xB2, 0xF6, 0x93, 0x01, 0x00, 0x5B, 0x2B, 0x00, 0x5A, 0xEB, 0x98, 0x04, 0xD0, 0x34, 
+	0x1A, 0x1B, 0xB2, 0x1B, 0x10, 0x5B, 0x99, 0x06, 0x9A, 0x01, 0x18, 0xCB, 0xB2, 0x9B, 0x48, 0x20, 
+	0x00, 0xF2, 0x52, 0xAB, 0x18, 0x84, 0x58, 0x81, 0xB2, 0x1B, 0x98, 0x07, 0xDA, 0x07, 0x42, 0x81, 
+	0x31, 0x01, 0x48, 0x1B, 0x99, 0x01, 0x50, 0x81, 0x60, 0x63, 0x22, 0x00, 0xE0, 0x21, 0x52, 0x6A, 
+	0x37, 0x01, 0x68, 0x60, 0x17, 0xD1, 0x1A, 0x1A, 0x18, 0x50, 0x46, 0x84, 0x40, 0x48, 0x9A, 0x05, 
+	0x90, 0x00, 0x18, 0x11, 0x43, 0x42, 0x46, 0x60, 0x9A, 0x00, 0x46, 0x94, 0x46, 0x62, 0x43, 0x53, 
+	0x10, 0x4B, 0x18, 0xD0, 0xF0, 0x02, 0x18, 0xC0, 0x9B, 0x01, 0xFD, 0xF3, 0x60, 0x60, 0x99, 0x03, 
+	0x42, 0x81, 0x52, 0xE8, 0xE0, 0x05, 0xDB, 0x04, 0x00, 0xF2, 0x48, 0x09, 0xE0, 0x01, 0x50, 0x83, 
+	0x90, 0x03, 0x96, 0x02, 0xD1, 0xBA, 0x2E, 0x00, 0xB0, 0x09, 0x99, 0x02, 0x60, 0x69, 0x60, 0x2F, 
+	0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x09, 0x48, 0x4B, 0x27, 0xB5, 0xF7, 0x33, 0x04, 0x49, 0x27, 0x4A, 0x27, 0x7F, 0xDB, 
+	0xE0, 0x42, 0x48, 0x27, 0xB2, 0xDB, 0x3B, 0x01, 0x34, 0x14, 0x1C, 0x1C, 0x19, 0x04, 0x00, 0x64, 
+	0xC7, 0x44, 0xAE, 0xF1, 0x0B, 0x5F, 0x64, 0x25, 0x04, 0xD0, 0x27, 0x2C, 0x00, 0x43, 0x5C, 0x24, 
+	0x0A, 0x26, 0x3C, 0x19, 0x0C, 0x2C, 0x00, 0x5F, 0xA4, 0x00, 0x5C, 0xD0, 0x20, 0x88, 0xB6, 0x19, 
+	0x0E, 0xB2, 0x37, 0x19, 0x05, 0x27, 0x04, 0x46, 0xBC, 0x46, 0x65, 0x5F, 0xEF, 0x10, 0x6F, 0x1B, 
+	0xED, 0x19, 0x14, 0x19, 0xBE, 0x1C, 0x1C, 0x80, 0xA6, 0x00, 0x64, 0x34, 0x10, 0x1C, 0x1C, 0x5B, 
+	0x0E, 0xB2, 0x37, 0x34, 0x0C, 0x46, 0xBC, 0x00, 0x64, 0x46, 0x67, 0x5E, 0x25, 0x10, 0x7F, 0x1B, 
+	0x7F, 0x52, 0xA6, 0x19, 0xBE, 0x26, 0x01, 0x4C, 0x10, 0xE0, 0x10, 0x54, 0xE6, 0x00, 0x5C, 0x4D, 
+	0x0B, 0x88, 0xB6, 0x19, 0x2E, 0x80, 0xA6, 0x19, 0x14, 0x36, 0x10, 0x1C, 0x1E, 0x00, 0x76, 0x1C, 
+	0x1C, 0x34, 0x0C, 0x5B, 0x76, 0x53, 0x16, 0x00, 0x64, 0x26, 0x00, 0x4C, 0x07, 0x2B, 0x00, 0x54, 
+	0xE6, 0x68, 0x0B, 0xD1, 0xBA, 0xBD, 0xF7, 0x60, 0x13, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 
+	0x9C, 0x20, 0x00, 0x09, 0x80, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x01, 0xEC, 0x4A, 0x35, 0xB5, 
+	0xF7, 0x1C, 0x11, 0x4B, 0x35, 0x32, 0x34, 0x31, 0x33, 0x78, 0x12, 0x78, 0x0E, 0x7F, 0xDB, 0x33, 
+	0x04, 0x92, 0x01, 0x49, 0x32, 0x4A, 0x32, 0x46, 0xB4, 0x48, 0x32, 0xE0, 0x4B, 0xB2, 0xDB, 0x3B, 
+	0x01, 0x98, 0x01, 0x5C, 0xC4, 0xD1, 0x00, 0x2C, 0x00, 0x00, 0x5E, 0x46, 0x60, 0x19, 0x96, 0x19, 
+	0x8D, 0x5F, 0xF6, 0x27, 0x04, 0x96, 0x00, 0x88, 0xAD, 0xB2, 0x2E, 0x9F, 0x00, 0x17, 0xF7, 0x1B, 
+	0xBE, 0x40, 0x7E, 0x19, 0xF6, 0xDA, 0x10, 0x42, 0x86, 0x36, 0x0C, 0x1C, 0x1E, 0x5E, 0xB6, 0x00, 
+	0x76, 0x37, 0x10, 0x1C, 0x1F, 0x00, 0x7F, 0x96, 0x00, 0x9E, 0x00, 0x5F, 0xCF, 0x17, 0xFE, 0x1B, 
+	0xF7, 0x40, 0x77, 0x19, 0xBF, 0x42, 0x87, 0x97, 0x00, 0x00, 0x58, 0xDB, 0x18, 0x1C, 0x1E, 0x18, 
+	0x10, 0x36, 0x10, 0x80, 0x85, 0x1C, 0x18, 0x4D, 0x19, 0x30, 0x0C, 0x00, 0x76, 0x00, 0x40, 0x5B, 
+	0x75, 0x1C, 0x18, 0x52, 0x15, 0x00, 0x40, 0x30, 0x14, 0x27, 0x04, 0x18, 0x10, 0x28, 0x00, 0x5F, 
+	0xC0, 0x2C, 0x00, 0xDD, 0x04, 0x48, 0x13, 0xD1, 0x02, 0x54, 0xC4, 0x24, 0x01, 0x43, 0x5C, 0x24, 
+	0x0A, 0x1C, 0x18, 0x4D, 0x0E, 0x30, 0x14, 0x19, 0x2C, 0x00, 0x40, 0x4D, 0x0D, 0x18, 0x28, 0x8F, 
+	0xA4, 0x2B, 0x00, 0x80, 0x84, 0x68, 0x0A, 0xD1, 0xB1, 0x49, 0x0B, 0x4B, 0x09, 0x4B, 0x0B, 0x60, 
+	0x1A, 0x4B, 0x0B, 0x78, 0x1A, 0x4A, 0x0B, 0x70, 0x1A, 0xCA, 0x31, 0x1C, 0x0B, 0xCA, 0xC0, 0xC3, 
+	0x31, 0xBD, 0xF7, 0xC3, 0xC0, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 
+	0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x01, 0x64, 0x20, 0x00, 0x00, 0xCC, 0x20, 0x00, 0x00, 
+	0xF5, 0x20, 0x00, 0x00, 0xF4, 0x20, 0x00, 0x00, 0xE0, 0x48, 0x19, 0xB5, 0xF7, 0x42, 0x5B, 0x23, 
+	0x01, 0x4B, 0x18, 0x60, 0x43, 0x4B, 0x18, 0x78, 0x1A, 0x33, 0x2B, 0x1C, 0x19, 0x31, 0x2A, 0x78, 
+	0x1E, 0x23, 0x00, 0x78, 0x0F, 0xE0, 0x1E, 0x46, 0xB4, 0xB2, 0xD2, 0x3A, 0x01, 0x00, 0x51, 0x4C, 
+	0x13, 0xB2, 0x0E, 0x5A, 0x61, 0x17, 0xF6, 0x43, 0xF6, 0x1D, 0x11, 0x40, 0x0E, 0xB2, 0xB5, 0x00, 
+	0x49, 0x2D, 0x00, 0x52, 0x0E, 0x4E, 0x0E, 0xD0, 0x0F, 0x5F, 0x8E, 0xB2, 0x2D, 0xDC, 0x04, 0x2E, 
+	0x00, 0xDA, 0x07, 0x42, 0xBD, 0x52, 0x0D, 0x25, 0x00, 0x45, 0x65, 0xE0, 0x05, 0x26, 0x00, 0xDA, 
+	0x02, 0xE0, 0x00, 0x52, 0x0E, 0x2A, 0x00, 0x33, 0x01, 0x4A, 0x01, 0xD1, 0xDE, 0xBD, 0xF7, 0x60, 
+	0x13, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x0D, 
+	0x3C, 0x20, 0x00, 0x00, 0xCC, 0x80, 0x08, 0xF3, 0xEF, 0xBA, 0x00, 0x47, 0x70, 0xBA, 0x40, 0x47, 
+	0x70, 0xBA, 0xC0, 0x47, 0x70, 0xB5, 0x70, 0x47, 0x70, 0xDA, 0x16, 0x28, 0x00, 0x23, 0x0F, 0xB2, 
+	0xC0, 0x3B, 0x08, 0x40, 0x03, 0x08, 0x9B, 0x4A, 0x12, 0x18, 0x9B, 0x00, 0x9B, 0x40, 0x10, 0x22, 
+	0x03, 0x22, 0xFF, 0x40, 0x90, 0x1C, 0x14, 0x68, 0x5D, 0x01, 0x89, 0x40, 0x84, 0x40, 0x0A, 0x43, 
+	0xA5, 0x1C, 0x28, 0x40, 0x82, 0x60, 0x58, 0x43, 0x10, 0x24, 0x03, 0xE0, 0x11, 0x4B, 0x09, 0x08, 
+	0x82, 0x32, 0xC0, 0x40, 0x20, 0x00, 0x92, 0x40, 0xA0, 0x58, 0xD5, 0x24, 0xFF, 0x40, 0x86, 0x1C, 
+	0x26, 0x43, 0xB5, 0x01, 0x89, 0x40, 0x84, 0x40, 0x0C, 0x43, 0x20, 0x1C, 0x28, 0xBD, 0x70, 0x50, 
+	0xD0, 0xE0, 0x00, 0xED, 0x18, 0xE0, 0x00, 0xE1, 0x00, 0x22, 0x40, 0x4B, 0x08, 0x20, 0x7F, 0x68, 
+	0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 
+	0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 
+	0x08, 0x22, 0x3F, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 
+	0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 
+	0x70, 0x20, 0x00, 0x00, 0x08, 0x4A, 0x08, 0x4B, 0x07, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x89, 0x04, 
+	0x89, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 
+	0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x40, 0x4B, 
+	0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 
+	0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 
+	0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x20, 0x4B, 0x08, 0x20, 0x7F, 0x68, 
+	0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 
+	0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 
+	0x08, 0x22, 0x5F, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 
+	0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 
+	0x70, 0x20, 0x00, 0x00, 0x08, 0x21, 0xBE, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 
+	0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 
+	0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x20, 0x4B, 
+	0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 
+	0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 
+	0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x00, 0x80, 0x6C, 
+	0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x10, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 
+	0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 
+	0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x6F, 0x4B, 
+	0x07, 0x20, 0x7F, 0x68, 0x19, 0x59, 0xAA, 0xAE, 0xF1, 0x0C, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 
+	0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4B, 0x0B, 0xB5, 0x00, 0x28, 0x00, 0x68, 0x19, 0x06, 0x49, 
+	0xD0, 0x04, 0x22, 0x10, 0x0E, 0x49, 0xE0, 0x01, 0x43, 0x11, 0x40, 0x11, 0x22, 0x6F, 0x20, 0x7F, 
+	0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x08, 0x21, 0xDE, 0x4B, 0x07, 0x01, 0xC9, 
+	0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 
+	0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 
+	0x80, 0xFF, 0x22, 0x10, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 
+	0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 
+	0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 
+	0x23, 0x80, 0x00, 0xC0, 0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x01, 0x4B, 0x08, 0x20, 0x7F, 
+	0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x00, 0x08, 0x22, 0x7E, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 
+	0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x21, 0xFC, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 
+	0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 
+	0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x01, 
+	0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 
+	0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0xC0, 
+	0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x02, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 
+	0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 
+	0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x7D, 
+	0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x00, 0x08, 0x21, 0xFA, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 
+	0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x02, 0x4B, 0x08, 0x68, 0x18, 
+	0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0x80, 0x6C, 0x18, 0x47, 0x70, 
+	0x0F, 0xC0, 0x22, 0x04, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 
+	0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x7B, 0x4B, 0x07, 0x20, 0x7F, 
+	0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 
+	0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4B, 0x0B, 
+	0xB5, 0x00, 0x28, 0x00, 0x68, 0x19, 0x06, 0x49, 0xD0, 0x04, 0x22, 0x04, 0x0E, 0x49, 0xE0, 0x01, 
+	0x43, 0x11, 0x40, 0x11, 0x22, 0x7B, 0x20, 0x7F, 0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 
+	0x00, 0x08, 0x21, 0xF6, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 
+	0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x04, 0x4B, 0x08, 0x68, 0x18, 
+	0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0x40, 0x6C, 0x18, 0x47, 0x70, 
+	0x0F, 0xC0, 0x23, 0x80, 0xB5, 0x10, 0x1D, 0x04, 0x05, 0xDB, 0x22, 0x3F, 0x69, 0x98, 0x43, 0x90, 
+	0x40, 0x14, 0x24, 0x01, 0x43, 0x20, 0x1C, 0x88, 0x61, 0x98, 0x18, 0x41, 0x40, 0x21, 0x02, 0x11, 
+	0x40, 0x0A, 0x4A, 0x02, 0x69, 0x98, 0x43, 0x0A, 0x40, 0x02, 0xBD, 0x10, 0x61, 0x9A, 0xFF, 0xFF, 
+	0xC0, 0xFF, 0x22, 0x7F, 0x4B, 0x06, 0x23, 0x80, 0x68, 0x19, 0x6C, 0x18, 0x05, 0xDB, 0x43, 0x90, 
+	0x39, 0x01, 0x1C, 0x02, 0x40, 0x11, 0x64, 0x1A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x09, 0x18, 0x05, 0xDB, 0x23, 0x80, 0x21, 0x7F, 0x6C, 0x1A, 0x21, 0x01, 0x43, 0x8A, 0x64, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x47, 0x70, 0x69, 0xDA, 0x05, 0xDB, 0x43, 0x8A, 0x21, 0x0F, 0x43, 0x0A, 
+	0x21, 0x02, 0x69, 0xDA, 0x61, 0xDA, 0x43, 0x8A, 0x21, 0xF0, 0x43, 0x0A, 0x21, 0x30, 0x4A, 0x0C, 
+	0x61, 0xDA, 0x39, 0x01, 0x79, 0x11, 0x77, 0x59, 0xB2, 0xC9, 0x49, 0x0A, 0x69, 0xD8, 0x20, 0x80, 
+	0x40, 0x01, 0x43, 0x01, 0x02, 0xC0, 0x69, 0xD8, 0x61, 0xD9, 0x40, 0x01, 0x49, 0x07, 0x03, 0xC0, 
+	0x20, 0xA0, 0x61, 0xD9, 0x43, 0x01, 0x3A, 0x01, 0x79, 0x92, 0x77, 0xDA, 0xB2, 0xD2, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x02, 0x04, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0x4A, 0x1A, 
+	0xB5, 0x30, 0x88, 0x11, 0x4B, 0x1A, 0x18, 0xC9, 0x4C, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x8C, 0x18, 
+	0xB2, 0x89, 0x8C, 0x59, 0x84, 0x19, 0x84, 0x59, 0x21, 0x00, 0x4D, 0x16, 0x88, 0x50, 0xB2, 0x89, 
+	0x19, 0x01, 0x84, 0x99, 0x8C, 0x9A, 0x8C, 0xDC, 0x1E, 0x42, 0x19, 0x44, 0xB2, 0x92, 0xB2, 0xA4, 
+	0x84, 0xDA, 0x85, 0x1C, 0x8D, 0x1D, 0x19, 0x00, 0x4C, 0x10, 0x8D, 0x5C, 0xB2, 0x80, 0x8D, 0x98, 
+	0x85, 0x58, 0x8D, 0xD8, 0x85, 0x99, 0x8E, 0x18, 0x85, 0xDA, 0x8E, 0x58, 0x86, 0x19, 0x8E, 0x98, 
+	0x86, 0x5A, 0x8E, 0xD8, 0x86, 0x99, 0x8F, 0x18, 0x86, 0xDA, 0xC0, 0x55, 0xAE, 0xF1, 0x0D, 0x8F, 
+	0x58, 0x87, 0x19, 0x8F, 0x98, 0x87, 0x5A, 0x8F, 0xD9, 0x87, 0x99, 0xBD, 0x30, 0x87, 0xDA, 0x20, 
+	0x00, 0x02, 0x04, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x05, 0xFF, 0x00, 
+	0x00, 0x01, 0xFF, 0x4B, 0x22, 0xB5, 0x30, 0x68, 0x1A, 0x24, 0xEE, 0x40, 0x14, 0x01, 0xE4, 0x68, 
+	0x1A, 0x48, 0x20, 0x40, 0x02, 0x21, 0x7F, 0x60, 0x1A, 0x43, 0x22, 0x22, 0x80, 0x68, 0x1C, 0x69, 
+	0x15, 0x05, 0xD2, 0x4C, 0x1C, 0x61, 0x14, 0x2C, 0x00, 0x7C, 0xA4, 0x68, 0x1C, 0xD0, 0x16, 0x04, 
+	0x64, 0x25, 0x04, 0x43, 0x2C, 0x0E, 0x64, 0x40, 0x0C, 0x68, 0x1D, 0x40, 0x28, 0x02, 0x24, 0x60, 
+	0x18, 0x43, 0x20, 0x69, 0x14, 0x68, 0x18, 0x68, 0x1C, 0x61, 0x10, 0x40, 0x20, 0x20, 0x7B, 0x43, 
+	0x8C, 0x68, 0x1C, 0x43, 0x01, 0x1C, 0x21, 0xE0, 0x15, 0x60, 0x19, 0x25, 0x04, 0x68, 0x1C, 0x0E, 
+	0x64, 0x06, 0x64, 0x68, 0x1D, 0x43, 0x2C, 0x43, 0x8D, 0x40, 0x0C, 0x43, 0x21, 0x1C, 0x29, 0x68, 
+	0x19, 0x60, 0x19, 0x61, 0x11, 0x69, 0x14, 0x21, 0xF6, 0x68, 0x1C, 0x40, 0x21, 0x01, 0xC9, 0x40, 
+	0x20, 0x68, 0x1C, 0x60, 0x18, 0x43, 0x08, 0x69, 0x11, 0x68, 0x1B, 0xBD, 0x30, 0x61, 0x13, 0x20, 
+	0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0xB6, 0x72, 0xB5, 0x00, 0x22, 
+	0x01, 0x4B, 0x0F, 0x4B, 0x0F, 0x70, 0x1A, 0x4B, 0x0F, 0x7C, 0x9A, 0xD0, 0x07, 0x2A, 0x00, 0x21, 
+	0xF6, 0x68, 0x1A, 0x40, 0x11, 0x01, 0xC9, 0x4A, 0x0C, 0x68, 0x18, 0xE0, 0x05, 0x40, 0x02, 0x22, 
+	0x7B, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x82, 0x20, 0x7F, 0x60, 0x1A, 0x43, 0x0A, 0x23, 
+	0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0xB6, 0x62, 0x61, 0x1A, 0x46, 0xC0, 0xBD, 0x00, 0x20, 
+	0x00, 0x00, 0x64, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0xB6, 
+	0x72, 0xB5, 0x00, 0x22, 0x00, 0x4B, 0x10, 0x4B, 0x10, 0x70, 0x1A, 0x4B, 0x10, 0x7C, 0x9A, 0x2A, 
+	0x00, 0x68, 0x19, 0x04, 0x49, 0xD0, 0x08, 0x0E, 0x49, 0x22, 0x04, 0x68, 0x18, 0x43, 0x11, 0x02, 
+	0x09, 0x4A, 0x0C, 0xE0, 0x06, 0x40, 0x02, 0x22, 0x04, 0x06, 0x49, 0x43, 0x11, 0x0E, 0x49, 0x20, 
+	0x7F, 0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 
+	0x1A, 0x69, 0x19, 0xBD, 0x00, 0xB6, 0x62, 0x20, 0x00, 0x00, 0x64, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x78, 0x18, 0x4B, 0x01, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x64, 0x23, 0x80, 0xB5, 0x00, 0x6C, 0x19, 0x05, 0xDB, 0x01, 0xD2, 0x22, 0x80, 0x64, 
+	0x1A, 0x43, 0x0A, 0x21, 0x80, 0x4A, 0x23, 0x00, 0x49, 0x68, 0x10, 0x60, 0x11, 0x43, 0x01, 0x68, 
+	0x99, 0x68, 0x12, 0x6C, 0x19, 0x60, 0x9A, 0x02, 0x12, 0x22, 0x80, 0x64, 0x1A, 0x43, 0x0A, 0x4A, 
+	0x1D, 0x6C, 0x19, 0x64, 0x1A, 0x40, 0x0A, 0x22, 0x7F, 0x4B, 0x1C, 0x4B, 0x1C, 0x7B, 0x59, 0x68, 
+	0x18, 0x40, 0x11, 0x04, 0x09, 0x4A, 0x1B, 0x43, 0x0A, 0x40, 0x02, 0x68, 0x19, 0x60, 0x1A, 0x05, 
+	0xD2, 0x22, 0xA0, 0x60, 0x91, 0x68, 0x90, 0x49, 0x17, 0x68, 0x18, 0x20, 0x84, 0x40, 0x01, 0x43, 
+	0x01, 0x05, 0xC0, 0x68, 0x19, 0x60, 0x19, 0x60, 0x91, 0x68, 0x90, 0x78, 0x09, 0x49, 0x13, 0x29, 
+	0x00, 0xB2, 0x49, 0x29, 0x01, 0xD0, 0x02, 0xE0, 0x03, 0xD1, 0x0C, 0x49, 0x10, 0x68, 0x18, 0xE0, 
+	0x03, 0x40, 0x01, 0x21, 0x80, 0x68, 0x18, 0x43, 0x01, 0x04, 0x09, 0x68, 0x1B, 0x60, 0x19, 0x60, 
+	0x93, 0x68, 0x91, 0x05, 0xDB, 0x23, 0x80, 0x4A, 0x0A, 0x6C, 0x19, 0x64, 0x1A, 0x40, 0x0A, 0x46, 
+	0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x14, 0xFF, 0xFF, 0x7F, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x00, 0x0C, 0xFF, 0x80, 0xFF, 0xFF, 0x80, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x02, 0xFA, 0xFF, 
+	0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0x22, 0x01, 0x4B, 0x04, 0x23, 0x80, 0x70, 0x1A, 0x6C, 
+	0x99, 0x05, 0xDB, 0x64, 0x99, 0x43, 0x91, 0x47, 0x70, 0x70, 0x1A, 0x20, 0x00, 0x00, 0x00, 0x23, 
+	0x01, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x13, 0x70, 0x53, 0x05, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x02, 0x4B, 0x06, 0xB5, 0x00, 0x78, 0x1A, 0xB6, 0x72, 0xD0, 0x04, 0x2A, 0x00, 0x46, 
+	0xC0, 0x46, 0xC0, 0xBF, 0x30, 0xB6, 0x62, 0xB6, 0x62, 0xE7, 0xF6, 0x46, 0xC0, 0xBD, 0x00, 0x20, 
+	0x00, 0x00, 0x02, 0x4B, 0x09, 0xB5, 0x38, 0x78, 0x9A, 0x49, 0x09, 0x43, 0x51, 0x79, 0x1C, 0x1C, 
+	0x05, 0x4B, 0x08, 0x48, 0x08, 0x18, 0xC9, 0xF8, 0x7A, 0xF0, 0x02, 0x1C, 0x29, 0x4B, 0x06, 0x43, 
+	0x58, 0x34, 0x01, 0xF0, 0x02, 0x40, 0xA1, 0xBD, 0x38, 0xF8, 0x73, 0x20, 0x00, 0x0A, 0xAA, 0xFF, 
+	0xFF, 0xFE, 0x44, 0x00, 0x02, 0x24, 0xFE, 0x00, 0x0F, 0x42, 0x40, 0x68, 0x19, 0x4B, 0x05, 0x05, 
+	0xDB, 0x23, 0x80, 0x02, 0x09, 0x69, 0x5A, 0x0A, 0x09, 0x0E, 0x12, 0x43, 0x0A, 0x06, 0x12, 0x47, 
+	0x70, 0x61, 0x5A, 0x20, 0x00, 0x00, 0x04, 0x60, 0x18, 0x4B, 0x01, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x04, 0x22, 0x01, 0x4B, 0x05, 0x23, 0x80, 0x70, 0x1A, 0x69, 0x59, 0x05, 0xDB, 0x04, 
+	0x52, 0x22, 0x80, 0x61, 0x5A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x01, 0x4B, 
+	0x05, 0xB5, 0x00, 0x78, 0x1A, 0xB6, 0x72, 0xD0, 0x03, 0x2A, 0x00, 0x46, 0xC0, 0x46, 0xC0, 0xE7, 
+	0xF7, 0xB6, 0x62, 0xBD, 0x00, 0xB6, 0x62, 0x20, 0x00, 0x00, 0x00, 0x4B, 0x10, 0xB5, 0x00, 0x05, 
+	0x9A, 0x68, 0x1B, 0x4A, 0x0F, 0xD5, 0x0C, 0xB6, 0x72, 0x4B, 0x0F, 0x29, 0x00, 0x78, 0x11, 0x78, 
+	0x19, 0xD1, 0x02, 0xD0, 0x11, 0x29, 0x00, 0x46, 0xC0, 0x46, 0xC0, 0xE7, 0xF4, 0xB6, 0x62, 0x4B, 
+	0x09, 0x4A, 0x08, 0x78, 0x11, 0xB6, 0x72, 0xD1, 0x02, 0x29, 0x00, 0x29, 0x00, 0x78, 0x19, 0x46, 
+	0xC0, 0xD0, 0x04, 0xB6, 0x62, 0x46, 0xC0, 0xE7, 0xF3, 0xBF, 0x30, 0xBD, 0x00, 0xB6, 0x62, 0x20, 
+	0x00, 0x00, 0x58, 0x20, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x49, 0x13, 0xB5, 0x70, 0x24, 
+	0x04, 0x4B, 0x13, 0x4B, 0x13, 0x60, 0x19, 0x68, 0x1A, 0x4D, 0x13, 0x60, 0x1A, 0x43, 0x22, 0x24, 
+	0x02, 0x68, 0x1A, 0x60, 0x1A, 0x43, 0xA2, 0x24, 0x01, 0x68, 0x1A, 0x4C, 0x0F, 0x43, 0x22, 0x22, 
+	0x00, 0x60, 0x1A, 0x4A, 0x0E, 0x60, 0x22, 0x78, 0x2E, 0x60, 0x11, 0x43, 0x70, 0x79, 0x2D, 0x40, 
+	0xE8, 0x35, 0x01, 0x60, 0x11, 0x1A, 0x09, 0x68, 0x11, 0x68, 0x20, 0xD2, 0xFB, 0x42, 0x88, 0x21, 
+	0x01, 0x68, 0x1A, 0x60, 0x1A, 0x43, 0x8A, 0x46, 0xC0, 0xBD, 0x70, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 
+	0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 0x10, 0x20, 0x00, 0x0A, 0xAA, 0xE0, 0x00, 0xE0, 0x18, 0x20, 
+	0x00, 0x01, 0xFC, 0x23, 0x00, 0xB5, 0x00, 0x42, 0x98, 0x4A, 0x06, 0x1C, 0xD3, 0xDB, 0x02, 0x43, 
+	0x43, 0x7F, 0xDB, 0x7F, 0xD2, 0x32, 0x02, 0xB2, 0x52, 0x30, 0x01, 0x18, 0x18, 0x40, 0x90, 0xBD, 
+	0x00, 0x18, 0x40, 0x20, 0x00, 0x09, 0xAE, 0xB0, 0x85, 0xB5, 0xF0, 0x1C, 0x0C, 0x1C, 0x05, 0xFA, 
+	0x1B, 0xAE, 0xF1, 0x0E, 0x29, 0x00, 0x1C, 0x16, 0x4B, 0x2B, 0xD0, 0x05, 0x7F, 0xDB, 0x33, 0x02, 
+	0x2B, 0x00, 0xB2, 0x5B, 0x1C, 0x21, 0xD0, 0x4E, 0xF7, 0xFF, 0x1C, 0x28, 0x49, 0x27, 0xFF, 0xDD, 
+	0x7A, 0x4A, 0x4F, 0x27, 0x19, 0x13, 0x7A, 0x09, 0x91, 0x02, 0x18, 0x51, 0x19, 0xCF, 0x01, 0x41, 
+	0x97, 0x03, 0x22, 0x00, 0xE0, 0x13, 0x46, 0x84, 0x56, 0xC1, 0x48, 0x22, 0xB2, 0xC0, 0x1C, 0x58, 
+	0x90, 0x01, 0x0F, 0xCF, 0x98, 0x03, 0x18, 0x7F, 0x19, 0xC7, 0x10, 0x7F, 0x97, 0x00, 0x37, 0x08, 
+	0x79, 0x38, 0x46, 0x6F, 0x33, 0x02, 0x9F, 0x00, 0x27, 0x01, 0x70, 0xB8, 0x43, 0x3A, 0x40, 0x8F, 
+	0x42, 0x83, 0x98, 0x02, 0x4B, 0x15, 0xDB, 0xE8, 0x79, 0xDF, 0x46, 0x60, 0x41, 0x61, 0x42, 0x61, 
+	0x18, 0x79, 0x7C, 0x5B, 0x10, 0x49, 0x19, 0x1C, 0x34, 0x01, 0x39, 0x01, 0x05, 0x24, 0x06, 0x89, 
+	0x43, 0x22, 0x43, 0x0C, 0x4C, 0x10, 0x49, 0x0E, 0x18, 0x43, 0x01, 0x40, 0x19, 0x01, 0x4F, 0x0F, 
+	0x60, 0x4A, 0x68, 0x4C, 0xB2, 0xD2, 0x1C, 0xAA, 0x71, 0x02, 0x19, 0xC0, 0xD0, 0x07, 0x2E, 0x00, 
+	0x21, 0x01, 0x4A, 0x0B, 0x40, 0x91, 0x57, 0x52, 0x69, 0x99, 0x1C, 0x0A, 0xE0, 0x01, 0x61, 0x9A, 
+	0x61, 0x9E, 0x69, 0x9A, 0xBD, 0xF0, 0xB0, 0x05, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x0A, 
+	0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x75, 0x10, 0x40, 0x00, 0x10, 0x18, 0x40, 0x00, 0x10, 0x10, 
+	0x00, 0x00, 0x74, 0xEA, 0x4B, 0x08, 0xB5, 0x10, 0x68, 0x1B, 0x21, 0x00, 0xE0, 0x08, 0x3B, 0x01, 
+	0x01, 0x58, 0x4C, 0x06, 0x19, 0x00, 0x22, 0x09, 0x72, 0xA1, 0x18, 0x84, 0xD2, 0xFB, 0x3A, 0x01, 
+	0x2B, 0x00, 0x3B, 0x01, 0xBD, 0x10, 0xDA, 0xF4, 0x20, 0x00, 0x09, 0x18, 0x40, 0x00, 0x10, 0x00, 
+	0xF7, 0xFF, 0xB5, 0x38, 0x21, 0x00, 0xFF, 0xE7, 0x1C, 0x0A, 0x20, 0x01, 0xF7, 0xFF, 0x42, 0x40, 
+	0x20, 0x01, 0xFF, 0x75, 0x21, 0x01, 0x42, 0x40, 0xF7, 0xFF, 0x22, 0x00, 0x4D, 0x0A, 0xFF, 0x6F, 
+	0xE0, 0x0B, 0x7B, 0xAC, 0x21, 0x00, 0x1C, 0x20, 0xF7, 0xFF, 0x22, 0x01, 0x21, 0x01, 0xFF, 0x67, 
+	0x1C, 0x0A, 0x1C, 0x20, 0xFF, 0x62, 0xF7, 0xFF, 0xB2, 0xE4, 0x34, 0x01, 0x79, 0x2B, 0x7B, 0xAA, 
+	0x42, 0x9C, 0x18, 0xD3, 0xBD, 0x38, 0xDB, 0xEE, 0x20, 0x00, 0x03, 0x0A, 0xB0, 0x85, 0xB5, 0xF0, 
+	0x1C, 0x0E, 0x1C, 0x05, 0x1C, 0x1F, 0x92, 0x02, 0xD0, 0x05, 0x29, 0x00, 0x33, 0x02, 0x4B, 0x21, 
+	0xB2, 0x5B, 0x7F, 0xDB, 0xD0, 0x3B, 0x2B, 0x00, 0x1C, 0x28, 0x1C, 0x31, 0xFF, 0x34, 0xF7, 0xFF, 
+	0xB2, 0xC0, 0x4A, 0x1D, 0x7A, 0x53, 0x90, 0x01, 0x18, 0xF6, 0x7A, 0x12, 0x4B, 0x1B, 0x18, 0x9A, 
+	0x7C, 0x1B, 0x1E, 0xB9, 0x41, 0x81, 0x1E, 0x48, 0xB2, 0xF6, 0x42, 0x49, 0x46, 0x9C, 0x91, 0x03, 
+	0x2F, 0x00, 0xE0, 0x24, 0x21, 0x26, 0xD1, 0x07, 0x4B, 0x15, 0x43, 0x71, 0x5C, 0xCC, 0x19, 0x49, 
+	0xB2, 0xE4, 0x44, 0x64, 0x2F, 0x01, 0xE0, 0x08, 0x01, 0x73, 0xD1, 0x04, 0x19, 0x5B, 0x49, 0x11, 
+	0xE0, 0x01, 0x5C, 0x5C, 0x40, 0x1C, 0x9B, 0x03, 0x99, 0x02, 0x4B, 0x0F, 0x36, 0x02, 0x57, 0x9B, 
+	0x18, 0xC0, 0x0F, 0xD8, 0xB2, 0xDB, 0x18, 0x63, 0x9B, 0x01, 0x93, 0x00, 0x01, 0x59, 0x10, 0x40, 
+	0x18, 0x08, 0x46, 0x6B, 0x49, 0x09, 0x78, 0x1B, 0x54, 0x43, 0xB2, 0xF6, 0xDB, 0xD8, 0x42, 0x96, 
+	0xBD, 0xF0, 0xB0, 0x05, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x0D, 0x48, 
+	0x00, 0x00, 0x75, 0x36, 0x20, 0x00, 0x0A, 0xB3, 0x00, 0x00, 0x75, 0x10, 0x40, 0x00, 0x10, 0x00, 
+	0x4B, 0x2A, 0xB5, 0x70, 0x68, 0x19, 0x4A, 0x2A, 0x40, 0x0A, 0x24, 0x80, 0x68, 0x1A, 0x60, 0x1A, 
+	0x4D, 0x28, 0x05, 0xE4, 0x60, 0xA2, 0x68, 0xA1, 0x22, 0x03, 0x7A, 0x69, 0x40, 0x11, 0x68, 0x18, 
+	0x04, 0x89, 0x4A, 0x25, 0x43, 0x0A, 0x40, 0x02, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 
+	0x22, 0x80, 0x68, 0x19, 0x43, 0x0A, 0x03, 0x52, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 
+	0x68, 0x18, 0x7A, 0x29, 0x4A, 0x1D, 0x26, 0x07, 0x05, 0x49, 0x40, 0x31, 0x43, 0x0A, 0x40, 0x02, 
+	0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 0x29, 0x0F, 0x7B, 0xA9, 0x7B, 0xEA, 0xD8, 0x25, 
+	0xD8, 0x22, 0x2A, 0x0F, 0x07, 0x09, 0x68, 0x18, 0x09, 0x00, 0x01, 0x00, 0x60, 0x19, 0x43, 0x01, 
+	0x40, 0x0A, 0x21, 0x0F, 0x06, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x11, 0x60, 0x1A, 0x43, 0x0A, 
+	0x68, 0xA2, 0x68, 0x1B, 0xF7, 0xFF, 0x60, 0xA3, 0x4A, 0x0E, 0xFC, 0x49, 0x43, 0x13, 0x6C, 0x63, 
+	0xF7, 0xFF, 0x64, 0x63, 0xF7, 0xFF, 0xFC, 0x5C, 0x79, 0xEB, 0xFC, 0x87, 0x40, 0x1E, 0x4A, 0x0A, 
+	0x6C, 0x26, 0x02, 0x33, 0x43, 0x1E, 0x40, 0x16, 0xBD, 0x70, 0x64, 0x26, 0x20, 0x00, 0x00, 0x14, 
+	0xFF, 0xFC, 0xFF, 0xFF, 0x20, 0x00, 0x0D, 0x48, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x1F, 0xFF, 0xFF, 
+	0xF0, 0xFF, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0x21, 0x80, 0xB5, 0x00, 
+	0x79, 0x0B, 0x05, 0xC9, 0xB2, 0xD2, 0x1E, 0x5A, 0xDD, 0x09, 0x42, 0x98, 0x71, 0x0B, 0xE0, 0x00, 
+	0xB2, 0xDB, 0x33, 0x01, 0xDD, 0xFA, 0x42, 0x83, 0x71, 0x0A, 0xE0, 0x04, 0xB2, 0xD2, 0x3A, 0x01, 
+	0xDA, 0xFA, 0x42, 0x82, 0xB5, 0x38, 0xBD, 0x00, 0x78, 0xA0, 0x4C, 0x17, 0xFF, 0xE6, 0xF7, 0xFF, 
+	0x05, 0xDB, 0x23, 0x80, 0x68, 0x5A, 0x79, 0x21, 0x00, 0x52, 0x07, 0xC9, 0x43, 0x0A, 0x08, 0x52, 
+	0x79, 0x60, 0x60, 0x5A, 0x68, 0x5D, 0x22, 0x03, 0x40, 0x10, 0x49, 0x10, 0x40, 0x29, 0x03, 0x80, 
+	0x60, 0x59, 0x43, 0x01, 0x49, 0x0E, 0x79, 0xA0, 0x40, 0x10, 0x68, 0x5D, 0x40, 0x29, 0x03, 0x00, 
+	0x60, 0x59, 0x43, 0x01, 0x49, 0x0B, 0x79, 0xE0, 0x40, 0x10, 0x68, 0x5D, 0x02, 0x80, 0x40, 0x29, 
+	0x60, 0x59, 0x43, 0x01, 0x68, 0x58, 0x7A, 0x21, 0x02, 0x11, 0x40, 0x0A, 0x40, 0x02, 0x4A, 0x06, 
+	0x60, 0x5A, 0x43, 0x0A, 0x46, 0xC0, 0xBD, 0x38, 0x20, 0x00, 0x0A, 0xAA, 0xFF, 0xFF, 0x3F, 0xFF, 
+	0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0x23, 0x80, 0xB5, 0xF8, 
+	0x68, 0x1A, 0x05, 0xDB, 0x21, 0x00, 0x4A, 0x7A, 0x60, 0x19, 0x20, 0x08, 0x68, 0x14, 0x60, 0x10, 
+	0x60, 0x9C, 0x68, 0x9D, 0x60, 0x21, 0x4C, 0x77, 0x68, 0xDD, 0x68, 0x24, 0x25, 0xFE, 0x60, 0xDC, 
+	0x01, 0xED, 0x4C, 0x75, 0x68, 0x24, 0x60, 0x25, 0x61, 0x1C, 0x69, 0x1D, 0x61, 0x59, 0x69, 0x5C, 
+	0x61, 0x99, 0x69, 0x9C, 0x61, 0xD9, 0x69, 0xDC, 0x24, 0x80, 0x6C, 0x1C, 0x64, 0x1C, 0x01, 0xE4, 
+	0x64, 0x59, 0x6C, 0x5C, 0x4C, 0x6D, 0x6C, 0x9C, 0x60, 0x21, 0x64, 0x99, 0x05, 0xE4, 0x24, 0xA0, 
+	0x60, 0xA1, 0x68, 0xA5, 0x49, 0x6A, 0x6C, 0x1C, 0x64, 0x19, 0x40, 0x21, 0x21, 0x80, 0x68, 0x1C, 
+	0x43, 0x21, 0x05, 0x49, 0x49, 0x67, 0x60, 0x19, 0x7F, 0xC9, 0x31, 0x01, 0xD0, 0x03, 0x29, 0x00, 
+	0x43, 0x08, 0x68, 0x11, 0xE0, 0x02, 0x60, 0x10, 0x43, 0x81, 0x68, 0x11, 0x68, 0x11, 0x60, 0x11, 
+	0x60, 0x99, 0x68, 0x98, 0x26, 0x04, 0x68, 0x13, 0x60, 0x13, 0x43, 0x33, 0x25, 0x80, 0x68, 0x13, 
+	0x68, 0xA9, 0x05, 0xED, 0x98, 0x2B, 0xAE, 0xF1, 0x0F, 0x68, 0x13, 0x60, 0xAB, 0x43, 0x3B, 0x27, 
+	0x02, 0x68, 0x13, 0x60, 0x13, 0x60, 0xAB, 0x68, 0xA9, 0x20, 0x01, 0x68, 0x13, 0x60, 0x13, 0x43, 
+	0x83, 0x68, 0xAA, 0x68, 0x13, 0xF7, 0xFF, 0x60, 0xAB, 0x4B, 0x54, 0xFE, 0xED, 0x56, 0x9A, 0x22, 
+	0x1C, 0x4B, 0x53, 0x69, 0xA9, 0x40, 0xF2, 0x05, 0x12, 0x43, 0x13, 0x40, 0x0B, 0xF7, 0xFF, 0x61, 
+	0xAB, 0x4A, 0x50, 0xFE, 0x61, 0x21, 0x01, 0x4B, 0x50, 0x4B, 0x50, 0x60, 0x1A, 0x68, 0x1A, 0x24, 
+	0x08, 0x43, 0x32, 0x20, 0x10, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0x1A, 0x43, 0xBA, 0x22, 0xC0, 0x4B, 
+	0x4C, 0x50, 0x99, 0x00, 0x52, 0x50, 0x9F, 0x21, 0x20, 0x50, 0x9C, 0x50, 0x9E, 0x50, 0x99, 0x50, 
+	0x98, 0x50, 0x99, 0x21, 0x40, 0x40, 0xBA, 0x22, 0xC0, 0x24, 0xFF, 0x58, 0x98, 0x24, 0xC0, 0x43, 
+	0xA0, 0x50, 0x98, 0x43, 0x20, 0x48, 0x43, 0x58, 0x9C, 0x50, 0x9C, 0x40, 0x04, 0x48, 0x42, 0x58, 
+	0x9C, 0x24, 0x80, 0x40, 0x20, 0x43, 0x04, 0x04, 0x24, 0x58, 0x9C, 0x50, 0x9C, 0x0A, 0x24, 0x02, 
+	0x24, 0x50, 0x9C, 0x43, 0x2C, 0x40, 0xBA, 0x22, 0xC1, 0x1C, 0x04, 0x58, 0x98, 0x43, 0x84, 0x20, 
+	0xFF, 0x50, 0x9C, 0x43, 0x0C, 0x48, 0x37, 0x58, 0x9C, 0x24, 0x80, 0x40, 0x20, 0x43, 0x20, 0x02, 
+	0x24, 0x58, 0x98, 0x50, 0x98, 0x40, 0x20, 0x4C, 0x34, 0x4A, 0x34, 0x50, 0x98, 0x43, 0x30, 0x69, 
+	0x10, 0xB6, 0x62, 0x61, 0x10, 0x20, 0x01, 0x22, 0x08, 0x60, 0x18, 0x60, 0x1E, 0x60, 0x1A, 0x60, 
+	0x1F, 0x20, 0x20, 0x4B, 0x2F, 0x67, 0xDC, 0x24, 0x10, 0x67, 0xD9, 0x67, 0xD8, 0xFC, 0x46, 0xF7, 
+	0xFF, 0x7D, 0xE0, 0x4C, 0x21, 0xF7, 0xFF, 0x7E, 0x21, 0x7C, 0xE3, 0xFA, 0xFB, 0xD0, 0x26, 0x2B, 
+	0x00, 0x21, 0x01, 0x4B, 0x1A, 0x4A, 0x27, 0x68, 0x18, 0x0E, 0x40, 0x00, 0x40, 0x68, 0x19, 0x43, 
+	0x08, 0x40, 0x11, 0x06, 0x00, 0x60, 0x19, 0x43, 0x01, 0x69, 0x28, 0x68, 0x19, 0x68, 0x19, 0x61, 
+	0x29, 0x0E, 0x49, 0x00, 0x49, 0x06, 0x39, 0x43, 0x0F, 0x40, 0x17, 0x68, 0x1F, 0x60, 0x1F, 0x43, 
+	0x0F, 0x69, 0x28, 0x68, 0x19, 0x68, 0x19, 0x61, 0x29, 0x0E, 0x49, 0x00, 0x49, 0x68, 0x19, 0x43, 
+	0x0E, 0x40, 0x0A, 0x06, 0x36, 0x60, 0x1A, 0x43, 0x32, 0x69, 0x2A, 0x68, 0x1B, 0xF7, 0xFF, 0x61, 
+	0x2B, 0xF7, 0xFF, 0xFE, 0xD4, 0xF7, 0xFF, 0xF8, 0xC1, 0xF7, 0xFF, 0xF9, 0x0F, 0xF7, 0xFF, 0xF9, 
+	0x7D, 0xBD, 0xF8, 0xFB, 0x65, 0x20, 0x00, 0x00, 0x14, 0x20, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 
+	0x08, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0x7F, 0xFF, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 
+	0x48, 0xF0, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 
+	0x10, 0xE0, 0x00, 0xE1, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xE0, 0x00, 0xED, 
+	0x00, 0xE0, 0x00, 0xE1, 0x04, 0x80, 0xFF, 0xFF, 0xFF, 0x4A, 0x0C, 0xB5, 0x08, 0x49, 0x0D, 0x4B, 
+	0x0C, 0xCA, 0x01, 0xE0, 0x01, 0x42, 0x8B, 0xC3, 0x01, 0x4B, 0x0B, 0xD3, 0xFB, 0x22, 0x00, 0x49, 
+	0x0B, 0xC3, 0x04, 0xE0, 0x00, 0xD3, 0xFC, 0x42, 0x8B, 0xF8, 0x26, 0xF7, 0xFF, 0x22, 0x00, 0x4B, 
+	0x08, 0xC3, 0x04, 0xE0, 0x00, 0xD3, 0xFC, 0x42, 0x83, 0x46, 0xC0, 0xBD, 0x08, 0x00, 0x00, 0x59, 
+	0xFC, 0x20, 0x00, 0x00, 0x3C, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 0x11, 
+	0xEC, 0x20, 0x00, 0x1E, 0x0C, 0x4B, 0x13, 0xB5, 0x00, 0x2B, 0x01, 0x68, 0x1B, 0x2B, 0x08, 0xD0, 
+	0x02, 0xE0, 0x0F, 0xD1, 0x1E, 0x4A, 0x11, 0x4B, 0x10, 0x4A, 0x11, 0x60, 0x1A, 0x4A, 0x11, 0x60, 
+	0x5A, 0x60, 0x1A, 0x4B, 0x11, 0x4A, 0x12, 0x4B, 0x11, 0x4A, 0x12, 0x60, 0x1A, 0x4A, 0x12, 0x60, 
+	0x5A, 0xE0, 0x0D, 0x60, 0x9A, 0x4A, 0x08, 0x4B, 0x09, 0x60, 0x13, 0x49, 0x09, 0x4A, 0x0A, 0x60, 
+	0x51, 0x4A, 0x0A, 0x60, 0x13, 0x60, 0x53, 0x60, 0x13, 0x4B, 0x0C, 0x60, 0x93, 0x70, 0x1A, 0x22, 
+	0x01, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x11, 0x50, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x03, 
+	0xF9, 0x00, 0x00, 0x3F, 0x7D, 0x00, 0x00, 0x3F, 0xB5, 0x20, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 
+	0x18, 0x00, 0x00, 0x40, 0xC1, 0x00, 0x00, 0x42, 0xA9, 0x00, 0x00, 0x44, 0x0D, 0x20, 0x00, 0x01, 
+	0xE4, 0x23, 0x00, 0xB5, 0x00, 0x33, 0x01, 0x5C, 0xC2, 0xD1, 0xFB, 0x2A, 0x00, 0xB2, 0xD8, 0x3B, 
+	0x01, 0x46, 0xC0, 0xBD, 0x00, 0x1C, 0x1C, 0xB5, 0xF7, 0x78, 0x1F, 0xAB, 0x08, 0x1C, 0x0E, 0x4B, 
+	0x26, 0x21, 0x01, 0x68, 0x1B, 0x42, 0x0B, 0x40, 0x81, 0x2F, 0x00, 0xD0, 0x44, 0x2C, 0x04, 0xD0, 
+	0x07, 0x4B, 0x22, 0xD8, 0x32, 0x33, 0x05, 0x5D, 0x19, 0x5D, 0x1F, 0x91, 0x00, 0x2C, 0x04, 0xE0, 
+	0x08, 0x4B, 0x1E, 0xD8, 0x2E, 0x31, 0x0A, 0x1C, 0x19, 0x33, 0x0F, 0x5D, 0x09, 0x91, 0x00, 0x5D, 
+	0x1F, 0xD0, 0x28, 0x2C, 0x03, 0xD0, 0x28, 0x2C, 0x00, 0x20, 0x3A, 0xE0, 0x28, 0xF0, 0x01, 0x1C, 
+	0x21, 0x42, 0x86, 0xFC, 0x63, 0x46, 0x6B, 0xDD, 0x05, 0xB2, 0xC0, 0x78, 0x1B, 0x70, 0x68, 0x70, 
+	0x2B, 0x70, 0x2F, 0xE0, 0x02, 0x70, 0x6E, 0x1C, 0x30, 0x43, 0x60, 0x1A, 0x36, 0x23, 0x00, 0x99, 
+	0x01, 0x60, 0xAB, 0x60, 0x69, 0xB2, 0xF6, 0x18, 0x09, 0xF7, 0xFF, 0x91, 0x01, 0xF7, 0xFF, 0xFA, 
+	0xE3, 0x28, 0x00, 0xFB, 0x37, 0xE0, 0x0B, 0xD1, 0xFB, 0x27, 0x00, 0x23, 0x0F, 0xE0, 0x05, 0x93, 
+	0x00, 0x91, 0x00, 0x21, 0x0F, 0x24, 0x02, 0xE0, 0x02, 0x24, 0x01, 0xE0, 0x00, 0x92, 0x01, 0x4D, 
+	0x04, 0xD1, 0xD2, 0x2E, 0x00, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x00, 0x58, 0x00, 0x00, 0x59, 
+	0x73, 0x20, 0x00, 0x00, 0x70, 0x4B, 0x11, 0xB5, 0x38, 0x68, 0x1B, 0x22, 0x01, 0x1C, 0x0D, 0x40, 
+	0x82, 0xD0, 0x19, 0x42, 0x13, 0x23, 0x0B, 0x4C, 0x0E, 0x1C, 0x08, 0x70, 0x23, 0xFF, 0x90, 0xF7, 
+	0xFF, 0x78, 0x63, 0x70, 0x60, 0x33, 0x02, 0x22, 0x07, 0x42, 0x93, 0x40, 0x13, 0x78, 0x63, 0xD1, 
+	0x03, 0xB2, 0xDB, 0x3B, 0x01, 0x23, 0x00, 0x70, 0x63, 0x60, 0xA3, 0x60, 0x65, 0xFA, 0xAA, 0xF7, 
+	0xFF, 0xFA, 0xFE, 0xF7, 0xFF, 0xD1, 0xFB, 0x28, 0x00, 0x46, 0xC0, 0xBD, 0x38, 0x20, 0x00, 0x00, 
+	0x58, 0x20, 0x00, 0x00, 0x70, 0x4C, 0x0B, 0xB5, 0x1F, 0x73, 0xD8, 0x46, 0x6B, 0x2B, 0x00, 0x78, 
+	0x23, 0x20, 0x00, 0xD0, 0x03, 0xF7, 0xFF, 0x49, 0x08, 0x78, 0x23, 0xFF, 0xCD, 0xD0, 0x07, 0x2B, 
+	0x00, 0x21, 0x01, 0x46, 0x6A, 0x32, 0x0F, 0x20, 0x00, 0x91, 0x00, 0x23, 0x04, 0xFF, 0x6A, 0xF7, 
+	0xFF, 0x46, 0xC0, 0xBD, 0x1F, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x87, 0xF7, 0xFF, 0xB5, 
+	0xF8, 0x28, 0x00, 0xFA, 0xD7, 0x4B, 0x39, 0xD1, 0x70, 0x2A, 0x00, 0x68, 0x1A, 0x4B, 0x38, 0xDC, 
+	0x03, 0x2B, 0x00, 0x68, 0x1B, 0x49, 0x37, 0xDD, 0x3E, 0x70, 0x0B, 0x23, 0x03, 0x33, 0x04, 0x4B, 
+	0x36, 0x1C, 0x1C, 0x7F, 0xDB, 0xDA, 0x00, 0x42, 0x9A, 0x70, 0x4B, 0xB2, 0xD3, 0x46, 0x8C, 0x21, 
+	0x0A, 0x23, 0x00, 0x4A, 0x32, 0xE0, 0x1F, 0x49, 0x2D, 0xE0, 0x03, 0x33, 0x01, 0x43, 0x5E, 0x46, 
+	0x66, 0x18, 0x76, 0x20, 0x00, 0x18, 0x37, 0x30, 0x0A, 0xCC, 0x38, 0xAE, 0xF1, 0x10, 0x5F, 0x7F, 
+	0x25, 0x32, 0xD0, 0xF3, 0x2F, 0x00, 0xDA, 0x13, 0x42, 0xA3, 0x18, 0x08, 0x00, 0x58, 0x00, 0xDE, 
+	0x88, 0x80, 0xB2, 0x00, 0x70, 0x10, 0x19, 0x80, 0x12, 0x00, 0x1C, 0x18, 0x70, 0x50, 0x00, 0x40, 
+	0x30, 0x10, 0x33, 0x01, 0x5A, 0x08, 0x0A, 0x00, 0x70, 0x90, 0x32, 0x04, 0x70, 0xD0, 0xDB, 0xDF, 
+	0x42, 0xA3, 0x4A, 0x1F, 0x4B, 0x1D, 0x22, 0x00, 0x60, 0x5A, 0xF7, 0xFF, 0x60, 0x9A, 0xF7, 0xFF, 
+	0xFA, 0x3D, 0x28, 0x00, 0xFA, 0x91, 0xE0, 0x29, 0xD1, 0xFB, 0x68, 0x53, 0x4A, 0x1A, 0xD0, 0x25, 
+	0x33, 0x01, 0x21, 0x13, 0x4B, 0x15, 0x68, 0x11, 0x70, 0x19, 0x70, 0x59, 0x46, 0x94, 0x49, 0x14, 
+	0x4B, 0x16, 0x1C, 0x03, 0x78, 0x1D, 0x1C, 0x23, 0xE0, 0x0D, 0x00, 0x5E, 0xE0, 0x01, 0x30, 0x02, 
+	0x44, 0x66, 0x22, 0x06, 0x18, 0x34, 0x1C, 0x5C, 0x5E, 0xA7, 0xD0, 0xF4, 0x2F, 0x00, 0x1C, 0x23, 
+	0x70, 0x0B, 0x20, 0x00, 0x31, 0x01, 0xDB, 0xF0, 0x42, 0xAB, 0x4A, 0x09, 0x4B, 0x07, 0x60, 0x5A, 
+	0x60, 0x98, 0xFA, 0x12, 0xF7, 0xFF, 0xFA, 0x66, 0xF7, 0xFF, 0xD1, 0xFB, 0x28, 0x00, 0x46, 0xC0, 
+	0xBD, 0xF8, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0x70, 0x20, 0x00, 
+	0x09, 0xAE, 0x20, 0x00, 0x09, 0xF0, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x4B, 0x64, 
+	0xB5, 0x08, 0x2B, 0x1D, 0x88, 0x1B, 0xD8, 0x1A, 0xD0, 0x47, 0xD1, 0x00, 0x2B, 0x05, 0xD8, 0x0D, 
+	0xE0, 0x96, 0xD0, 0x63, 0x2B, 0x02, 0x2B, 0x01, 0xD8, 0x03, 0xE0, 0xB7, 0xD0, 0x00, 0x2B, 0x03, 
+	0xE0, 0x57, 0xE0, 0x87, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0x04, 0xE0, 0x8F, 0xE0, 0xB0, 0xD0, 0x65, 
+	0x2B, 0x07, 0x2B, 0x1B, 0xD3, 0x5C, 0x2B, 0x1C, 0xD0, 0x1C, 0xE0, 0xA7, 0xD0, 0x00, 0x2B, 0x22, 
+	0xE0, 0x22, 0xD8, 0x08, 0xD0, 0x40, 0xD0, 0x5D, 0x2B, 0x1F, 0x2B, 0x20, 0xD3, 0x2A, 0x2B, 0x21, 
+	0xD0, 0x5E, 0xE0, 0x9B, 0xD0, 0x00, 0x2B, 0x41, 0xE0, 0x5E, 0xD8, 0x03, 0xD0, 0x64, 0xD0, 0x00, 
+	0x2B, 0x40, 0xE0, 0x5B, 0xE0, 0x94, 0xD0, 0x61, 0x2B, 0x42, 0xD0, 0x00, 0x2B, 0x60, 0xE0, 0x72, 
+	0xE0, 0x8E, 0x4B, 0x49, 0x4A, 0x48, 0x20, 0x01, 0x78, 0x12, 0x40, 0x90, 0x68, 0x19, 0x43, 0x0A, 
+	0x1C, 0x02, 0xE0, 0x83, 0x60, 0x1A, 0x4B, 0x44, 0x49, 0x43, 0x68, 0x1A, 0x78, 0x09, 0x40, 0x88, 
+	0x20, 0x01, 0x60, 0x1A, 0x43, 0x82, 0x4B, 0x3F, 0xE0, 0x7A, 0x4B, 0x40, 0x78, 0x1A, 0xE0, 0x75, 
+	0x70, 0x1A, 0x21, 0x0D, 0x4B, 0x3C, 0x4B, 0x3E, 0x78, 0x1A, 0x4A, 0x3C, 0x70, 0x1A, 0x78, 0x1A, 
+	0x70, 0x11, 0x2A, 0x00, 0x4B, 0x3C, 0x22, 0x00, 0xD0, 0x02, 0xE0, 0x67, 0x70, 0x5A, 0x78, 0x52, 
+	0x4A, 0x3A, 0xE0, 0x63, 0x70, 0x5A, 0x78, 0x1A, 0x4B, 0x33, 0x70, 0x1A, 0x4B, 0x38, 0x4B, 0x31, 
+	0xE0, 0x5E, 0x4B, 0x37, 0x78, 0x1A, 0xF7, 0xFD, 0x60, 0x1A, 0xE0, 0x57, 0xFC, 0x09, 0x78, 0x1A, 
+	0x4B, 0x2D, 0x70, 0x9A, 0x4B, 0x34, 0xF7, 0xFF, 0x78, 0x98, 0xE0, 0x4F, 0xFC, 0x8D, 0x78, 0x1A, 
+	0x4B, 0x29, 0x70, 0x9A, 0x4B, 0x30, 0x22, 0x0F, 0x4B, 0x29, 0xE0, 0x47, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x2E, 0xE0, 0x43, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x2D, 0xE0, 0x3F, 0x70, 0x1A, 0xF7, 0xFD, 
+	0x20, 0x0C, 0xE0, 0x3B, 0xF9, 0x85, 0xF7, 0xFD, 0x20, 0x0D, 0xE0, 0x37, 0xF9, 0x81, 0x22, 0x01, 
+	0x4B, 0x28, 0xE0, 0x33, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x27, 0xE0, 0x2F, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x26, 0xE0, 0x2B, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x25, 0xE0, 0x27, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x24, 0x4B, 0x14, 0x70, 0x1A, 0x4B, 0x23, 0x78, 0x1A, 0xE0, 0x1F, 0x70, 0x1A, 0x78, 0x1A, 
+	0x4B, 0x11, 0x70, 0x9A, 0x4B, 0x1E, 0x4B, 0x0F, 0xE0, 0x1A, 0x4B, 0x1F, 0x78, 0x1A, 0x78, 0x1A, 
+	0x70, 0x1A, 0x3A, 0x01, 0x4B, 0x10, 0xD8, 0x03, 0x2A, 0x01, 0x22, 0x0F, 0x33, 0x40, 0xE0, 0x0D, 
+	0x70, 0x1A, 0x33, 0x40, 0x4A, 0x1A, 0x2A, 0x00, 0x78, 0x12, 0x4A, 0x19, 0xD0, 0x04, 0x78, 0x12, 
+	0x32, 0x40, 0xE0, 0x03, 0x70, 0x1A, 0x32, 0x40, 0x4A, 0x08, 0x70, 0x1A, 0x78, 0x12, 0x46, 0xC0, 
+	0xBD, 0x08, 0x20, 0x00, 0x00, 0x28, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x58, 0x20, 0x00, 
+	0x03, 0x1D, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x0D, 0x48, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 
+	0x01, 0xDE, 0x20, 0x00, 0x11, 0x50, 0x20, 0x00, 0x0A, 0xAA, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 
+	0x01, 0xDC, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x01, 0xE7, 0x20, 0x00, 0x01, 0xE5, 0x20, 0x00, 
+	0x01, 0x8B, 0x20, 0x00, 0x01, 0xE6, 0x20, 0x00, 0x01, 0x92, 0x20, 0x00, 0x01, 0xE0, 0x20, 0x00, 
+	0x01, 0xDD, 0x00, 0x00, 0x74, 0x9A, 0x4B, 0x4A, 0xB5, 0x30, 0x2B, 0x34, 0x88, 0x1B, 0xD8, 0x0C, 
+	0xD0, 0x47, 0xD0, 0x4F, 0x2B, 0x2E, 0x2B, 0x00, 0xD8, 0x04, 0x2B, 0x1D, 0xD0, 0x14, 0xE0, 0x16, 
+	0xD1, 0x78, 0xD0, 0x51, 0x2B, 0x2F, 0xD1, 0x73, 0x2B, 0x30, 0x2B, 0x38, 0xE0, 0x56, 0xD8, 0x04, 
+	0xD0, 0x66, 0xD0, 0x39, 0x2B, 0x35, 0xD1, 0x6B, 0x2B, 0x37, 0x2B, 0x39, 0xE0, 0x5B, 0x2B, 0x86, 
+	0xD0, 0x63, 0xE0, 0x09, 0xD1, 0x66, 0x7B, 0x5A, 0x4B, 0x3B, 0x70, 0x1A, 0x4B, 0x3B, 0x4B, 0x3B, 
+	0xE0, 0x6F, 0x4B, 0x39, 0x78, 0x1A, 0xE0, 0x6A, 0x70, 0x1A, 0x4A, 0x3A, 0x49, 0x39, 0x2B, 0x00, 
+	0x78, 0x0B, 0x78, 0x10, 0xD1, 0x0F, 0x70, 0x08, 0x49, 0x34, 0x49, 0x37, 0x78, 0x50, 0x68, 0x52, 
+	0x70, 0x08, 0x4C, 0x36, 0x18, 0xD1, 0x19, 0x19, 0x78, 0x08, 0x70, 0x08, 0x33, 0x01, 0xD1, 0xF7, 
+	0x2B, 0x06, 0x68, 0x52, 0xE0, 0x55, 0x78, 0x08, 0x23, 0x00, 0x18, 0xC0, 0x4D, 0x2B, 0x18, 0x10, 
+	0x38, 0x02, 0x19, 0x58, 0x78, 0x04, 0x70, 0x04, 0x33, 0x01, 0xD1, 0xF4, 0x2B, 0x08, 0x4B, 0x2C, 
+	0xE0, 0x47, 0x4B, 0x25, 0x68, 0x1A, 0xE0, 0x42, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x4B, 0x22, 
+	0x79, 0x1A, 0xE0, 0x3C, 0x70, 0x1A, 0x4A, 0x27, 0x4B, 0x22, 0x49, 0x1F, 0x78, 0x1B, 0x68, 0x1A, 
+	0x18, 0xD3, 0x60, 0x0A, 0x68, 0x5B, 0xE0, 0x32, 0x60, 0x4B, 0x1C, 0x1A, 0x4B, 0x1A, 0x78, 0x11, 
+	0x32, 0x2C, 0x29, 0x00, 0x4A, 0x19, 0xE0, 0x09, 0xD1, 0x07, 0x1C, 0x1A, 0x4B, 0x16, 0x78, 0x11, 
+	0x32, 0x2C, 0x29, 0x00, 0x4A, 0x15, 0x8C, 0xDB, 0xD1, 0x02, 0xE0, 0x20, 0x80, 0x13, 0x80, 0x13, 
+	0x8D, 0x1B, 0x4B, 0x19, 0xE0, 0x1D, 0x4B, 0x10, 0x78, 0x1A, 0xE0, 0x18, 0x70, 0x1A, 0x78, 0x1A, 
+	0x4B, 0x17, 0x70, 0x1A, 0x4B, 0x0D, 0x4B, 0x16, 0xE0, 0x13, 0x4B, 0x0B, 0x78, 0x1A, 0xE0, 0x0E, 
+	0x70, 0x1A, 0xB2, 0x9A, 0x3B, 0x90, 0xD8, 0x0A, 0x2A, 0x13, 0x01, 0x5B, 0x4A, 0x09, 0x49, 0x06, 
+	0x78, 0x12, 0x4A, 0x10, 0x18, 0x9B, 0x68, 0x1A, 0x18, 0x9B, 0x60, 0x0A, 0x68, 0x5B, 0xBD, 0x30, 
+	0x60, 0x4B, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x09, 0xAE, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 
+	0x03, 0x1D, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x70, 0x50, 0x00, 0x00, 0x0D, 0x50, 0x00, 
+	0x00, 0x0E, 0x20, 0x00, 0x09, 0x1C, 0x20, 0x00, 0x09, 0xB1, 0x00, 0x00, 0x5B, 0xFF, 0xFA, 0x33, 
+	0xAE, 0xF1, 0x11, 0x00, 0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0x20, 0x00, 0x0A, 0xB3, 0x4B, 
+	0x08, 0xB5, 0x08, 0x2B, 0x86, 0x88, 0x1B, 0x4B, 0x07, 0xD1, 0x0B, 0x2A, 0x01, 0x68, 0x9A, 0x68, 
+	0x9A, 0xDC, 0x02, 0x60, 0x9A, 0x32, 0x01, 0x2B, 0x02, 0x68, 0x9B, 0xF7, 0xFF, 0xD1, 0x01, 0xBD, 
+	0x08, 0xF8, 0x71, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0x70, 0x4C, 0x31, 0xB5, 0x7F, 0x78, 
+	0x23, 0x90, 0x03, 0x1C, 0x16, 0x1C, 0x0D, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x2E, 0x20, 0x01, 0xFD, 
+	0x6E, 0xF7, 0xFF, 0x2B, 0x00, 0x78, 0x23, 0x21, 0x01, 0xD0, 0x06, 0xAA, 0x03, 0x1C, 0x08, 0x91, 
+	0x00, 0x23, 0x04, 0xFD, 0x0C, 0xF7, 0xFF, 0x99, 0x03, 0x4B, 0x28, 0x4A, 0x28, 0x78, 0x1B, 0xD1, 
+	0x15, 0x2B, 0x00, 0x33, 0x4A, 0x1C, 0x13, 0x5E, 0x1B, 0x20, 0x00, 0x42, 0x9E, 0x1B, 0x8E, 0x1C, 
+	0x13, 0xDC, 0x05, 0x20, 0x00, 0x33, 0x4C, 0x42, 0x9E, 0x5E, 0x1B, 0x48, 0x21, 0xDA, 0x08, 0x70, 
+	0x03, 0x23, 0x01, 0x70, 0x03, 0x48, 0x20, 0x70, 0x03, 0x48, 0x20, 0x70, 0x03, 0x48, 0x20, 0x2B, 
+	0x00, 0x78, 0x53, 0x4B, 0x1F, 0xD0, 0x04, 0x43, 0x59, 0x5D, 0x5B, 0x91, 0x03, 0x11, 0x89, 0x00, 
+	0x6A, 0x4B, 0x1D, 0x4B, 0x1D, 0x5A, 0xD0, 0x5E, 0xD4, 0x99, 0x03, 0x4A, 0x14, 0x08, 0xC0, 0x1B, 
+	0x04, 0xB2, 0x89, 0x7C, 0x56, 0x1A, 0x64, 0x4B, 0x19, 0xB2, 0x24, 0xDC, 0x02, 0x42, 0xB4, 0x42, 
+	0xB4, 0x42, 0x76, 0x24, 0x00, 0xDA, 0x02, 0xE0, 0x05, 0x55, 0x5C, 0x7C, 0x96, 0x5D, 0x5C, 0xD0, 
+	0x01, 0x42, 0xA6, 0x55, 0x5C, 0x34, 0x01, 0xB2, 0x9B, 0x1A, 0x43, 0xB2, 0x19, 0x7E, 0x92, 0xDB, 
+	0x02, 0x42, 0x91, 0x21, 0x01, 0x4A, 0x09, 0x4A, 0x0C, 0x70, 0x11, 0x52, 0xAB, 0x00, 0x6D, 0x46, 
+	0xC0, 0xBD, 0x7F, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x8B, 0x20, 0x00, 0x01, 0xE4, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x11, 0x30, 0x20, 
+	0x00, 0x01, 0xC4, 0x00, 0x00, 0x7B, 0x92, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 0x0D, 0x3C, 0x20, 
+	0x00, 0x0A, 0xA4, 0x4B, 0x48, 0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0x89, 0xD0, 0x03, 0x2B, 0x00, 0x49, 
+	0x46, 0x20, 0x00, 0xFC, 0xF4, 0xF7, 0xFF, 0x23, 0x00, 0x4A, 0x45, 0x4A, 0x45, 0x70, 0x13, 0x38, 
+	0x01, 0x20, 0x0C, 0x00, 0x81, 0xB2, 0xC0, 0x28, 0x00, 0x50, 0x8B, 0x4B, 0x42, 0xD1, 0xF9, 0x70, 
+	0x18, 0x4A, 0x42, 0x70, 0x13, 0x23, 0x01, 0x70, 0x13, 0x4A, 0x41, 0x7E, 0x19, 0x4B, 0x41, 0x7D, 
+	0xDA, 0x91, 0x04, 0x7D, 0x1B, 0x92, 0x05, 0x1C, 0x0B, 0x93, 0x06, 0x3B, 0x01, 0xE0, 0x2D, 0x1C, 
+	0x5D, 0xB2, 0xDB, 0x01, 0xEA, 0x4C, 0x3C, 0x88, 0x16, 0x19, 0x12, 0x00, 0x5A, 0x49, 0x3B, 0x52, 
+	0x56, 0x01, 0x5C, 0x9A, 0x05, 0x01, 0xAD, 0x46, 0x9C, 0x94, 0x07, 0x3A, 0x01, 0xE0, 0x1A, 0x1C, 
+	0x93, 0xB2, 0xD2, 0x4C, 0x36, 0x18, 0xEB, 0x5B, 0x19, 0x00, 0x5B, 0x2B, 0x00, 0x9B, 0x06, 0x1C, 
+	0xD3, 0xD0, 0x05, 0x00, 0x5B, 0x18, 0xEB, 0x18, 0xC9, 0x5B, 0x1B, 0x9C, 0x07, 0x10, 0x49, 0x00, 
+	0x7B, 0x18, 0xA7, 0x4B, 0x2F, 0x1C, 0x1C, 0x4C, 0x2F, 0x52, 0xE1, 0x1B, 0x89, 0x23, 0x01, 0x18, 
+	0x40, 0x55, 0x3B, 0xD1, 0xE2, 0x2A, 0x00, 0x2B, 0x00, 0x46, 0x63, 0x4B, 0x25, 0xD1, 0xCF, 0x7D, 
+	0xD9, 0x9C, 0x04, 0xF0, 0x01, 0x43, 0x61, 0x4B, 0x28, 0xF8, 0xD5, 0x8C, 0x58, 0x1C, 0x05, 0x28, 
+	0x00, 0x4C, 0x27, 0x23, 0x40, 0xD1, 0x02, 0xE0, 0x07, 0x60, 0x23, 0x1C, 0x29, 0x01, 0x80, 0xF8, 
+	0xC8, 0xF0, 0x01, 0xDD, 0x00, 0x28, 0x6E, 0x60, 0x20, 0x20, 0x6E, 0x78, 0x23, 0x4C, 0x12, 0xD0, 
+	0x03, 0x2B, 0x00, 0x49, 0x1F, 0x20, 0x00, 0xFC, 0x8A, 0xF7, 0xFF, 0x4A, 0x1E, 0x4B, 0x1B, 0x80, 
+	0x55, 0x8C, 0x5B, 0x78, 0x23, 0x80, 0x13, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 
+	0x00, 0x93, 0x00, 0xF7, 0xFF, 0x1C, 0x0B, 0x4B, 0x18, 0xFC, 0x23, 0x78, 0x1B, 0x48, 0x18, 0x49, 
+	0x18, 0x22, 0x00, 0x3B, 0x01, 0xE0, 0x04, 0x00, 0x5C, 0xB2, 0xDB, 0x52, 0x62, 0x54, 0xC2, 0xD1, 
+	0xF8, 0x2B, 0x00, 0xBD, 0xF0, 0xB0, 0x09, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x91, 0x20, 
+	0x00, 0x03, 0x1C, 0x20, 0x00, 0x11, 0xBC, 0x20, 0x00, 0x10, 0xF4, 0x20, 0x00, 0x09, 0x20, 0x20, 
+	0x00, 0x11, 0x3C, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x40, 0x02, 0x20, 0x00, 0x11, 0x94, 0x40, 
+	0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x0D, 0x48, 0x20, 
+	0x00, 0x09, 0x78, 0x00, 0x00, 0x59, 0x9A, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x09, 0x7C, 0x20, 
+	0x00, 0x0A, 0xA4, 0x20, 0x00, 0x02, 0x14, 0x4A, 0xA0, 0xB5, 0xF0, 0x70, 0x13, 0x23, 0x00, 0xB0, 
+	0x85, 0x4A, 0x9F, 0x4A, 0x9F, 0x70, 0x13, 0x4A, 0x9F, 0x70, 0x13, 0x4B, 0x9F, 0x70, 0x13, 0x2B, 
+	0x00, 0x78, 0x1B, 0x20, 0x01, 0xD0, 0x03, 0xF7, 0xFF, 0x49, 0x9D, 0x24, 0x00, 0xFC, 0x31, 0x4E, 
+	0x9A, 0x4D, 0x9C, 0x78, 0x33, 0xE0, 0x11, 0xD0, 0x0C, 0x2B, 0x00, 0x7D, 0x29, 0x7D, 0xEB, 0x18, 
+	0xC9, 0x48, 0x99, 0x23, 0x00, 0x01, 0xE2, 0x93, 0x00, 0x18, 0x12, 0x20, 0x01, 0xB2, 0xC9, 0xF7, 
+	0xFF, 0x23, 0x02, 0x34, 0x01, 0xFB, 0xC5, 0x7E, 0x29, 0xB2, 0xE4, 0xD3, 0xEA, 0x42, 0x8C, 0x78, 
+	0x1B, 0x4B, 0x92, 0xD1, 0x00, 0x2B, 0x00, 0x4B, 0x91, 0xE1, 0x0D, 0x2A, 0x00, 0x78, 0x1A, 0x4B, 
+	0x90, 0xD1, 0x1F, 0x2B, 0x00, 0x78, 0x1B, 0x7D, 0xEB, 0xD0, 0x1B, 0xE0, 0x07, 0x4C, 0x8E, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x18, 0x2D, 0x01, 0x5D, 0x2B, 0x00, 0x55, 0x2A, 0x1C, 0x03, 0xD1, 0xF8, 0xB2, 
+	0xC0, 0x1E, 0x58, 0xD0, 0x01, 0x2B, 0x00, 0xE7, 0xF6, 0x1C, 0x0B, 0x48, 0x86, 0x4A, 0x87, 0x01, 
+	0x49, 0x78, 0x12, 0x3A, 0x01, 0xE0, 0x03, 0x18, 0x8C, 0xB2, 0xD2, 0x2A, 0x00, 0x54, 0x23, 0x4B, 
+	0x80, 0xD1, 0xF9, 0x78, 0x19, 0x4A, 0x7E, 0x70, 0x11, 0x78, 0x1B, 0xD0, 0x70, 0x2B, 0x00, 0x7E, 
+	0x1A, 0x4B, 0x78, 0x92, 0x02, 0x7D, 0xD9, 0x93, 0x03, 0x7D, 0x1B, 0x3B, 0x01, 0xE0, 0x22, 0x1C, 
+	0x59, 0xB2, 0xDB, 0x19, 0xC8, 0x01, 0x89, 0x9D, 0x03, 0x4C, 0x79, 0x5B, 0x00, 0x00, 0x40, 0xD0, 
+	0x04, 0x2D, 0x00, 0x00, 0x49, 0x19, 0x89, 0x18, 0x40, 0x5B, 0x09, 0x01, 0x59, 0x10, 0x40, 0x4D, 
+	0x74, 0x18, 0x89, 0x5B, 0x65, 0x00, 0x4C, 0x08, 0xED, 0x4C, 0x6F, 0x1A, 0x28, 0x5D, 0x0C, 0xDA, 
+	0x04, 0x42, 0x84, 0xDD, 0x00, 0x28, 0xFF, 0x4D, 0x6B, 0x20, 0xFF, 0x2B, 0x00, 0x54, 0x68, 0x1C, 
+	0x11, 0xD1, 0xDD, 0xB2, 0xD2, 0x1E, 0x4A, 0xD0, 0x03, 0x29, 0x00, 0x1C, 0x97, 0x9B, 0x02, 0xE7, 
+	0xF4, 0x1C, 0xD6, 0x4B, 0x65, 0x4A, 0x5F, 0x78, 0x1B, 0x7E, 0x17, 0x01, 0x7F, 0x49, 0x62, 0x3B, 
+	0x01, 0xE0, 0x10, 0x4E, 0x64, 0xB2, 0xDB, 0x5B, 0x94, 0x00, 0x5A, 0x56, 0x45, 0x18, 0xF8, 0x1C, 
+	0x2A, 0xB2, 0x26, 0xDA, 0x00, 0x42, 0xB5, 0xB2, 0x12, 0x1C, 0x22, 0xDD, 0x00, 0x2A, 0xFF, 0x54, 
+	0x42, 0x22, 0xFF, 0xD1, 0xEC, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x50, 0xD0, 0x03, 0x2B, 0x00, 0x49, 
+	0x5A, 0x20, 0x03, 0xFA, 0x85, 0xAE, 0xF1, 0x12, 0xFB, 0x94, 0xF7, 0xFF, 0x4D, 0x4E, 0x24, 0x00, 
+	0xE0, 0x0E, 0x4E, 0x4B, 0x2B, 0x00, 0x78, 0x33, 0x4B, 0x50, 0xD0, 0x09, 0x18, 0xD2, 0x01, 0x62, 
+	0x7D, 0xE9, 0x23, 0x00, 0x93, 0x00, 0x20, 0x03, 0xF7, 0xFF, 0x23, 0x01, 0x34, 0x01, 0xFB, 0x2B, 
+	0x7E, 0x2B, 0xB2, 0xE4, 0xD8, 0xED, 0x42, 0xA3, 0x23, 0x01, 0x4A, 0x40, 0x4A, 0x3D, 0x70, 0x13, 
+	0x4A, 0x3B, 0x70, 0x13, 0x4B, 0x3E, 0x70, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x49, 0xD0, 0x6D, 
+	0x02, 0x58, 0x68, 0x1B, 0x4A, 0x3C, 0xD5, 0x69, 0x7D, 0x16, 0x24, 0x80, 0x7D, 0xD2, 0x7E, 0x13, 
+	0x18, 0xB6, 0x4D, 0x45, 0x06, 0x24, 0xB2, 0xF6, 0xE0, 0x18, 0x46, 0xB4, 0xB2, 0xDB, 0x3B, 0x01, 
+	0x00, 0x5A, 0x49, 0x42, 0x5A, 0x56, 0x1C, 0x5F, 0x46, 0x62, 0x01, 0xBF, 0x3A, 0x01, 0xE0, 0x0D, 
+	0x1C, 0x91, 0xB2, 0xD2, 0x48, 0x37, 0x18, 0x79, 0x5A, 0x09, 0x00, 0x49, 0x42, 0x8C, 0x1B, 0x89, 
+	0x1C, 0x0C, 0xDA, 0x00, 0xDD, 0x00, 0x42, 0x8D, 0x2A, 0x00, 0x1C, 0x0D, 0x2B, 0x00, 0xD1, 0xEF, 
+	0x20, 0x16, 0xD1, 0xE4, 0xF7, 0xFF, 0x49, 0x36, 0x4B, 0x25, 0xFB, 0x45, 0x78, 0x1B, 0x4A, 0x35, 
+	0x80, 0x55, 0x80, 0x14, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x16, 0x93, 0x00, 
+	0xF7, 0xFF, 0x1C, 0x0B, 0x4B, 0x26, 0xFA, 0xDF, 0x78, 0x1B, 0x20, 0x80, 0x06, 0x00, 0x49, 0x2A, 
+	0x4D, 0x2E, 0x4E, 0x2D, 0x3B, 0x01, 0xE0, 0x19, 0x5C, 0xF7, 0xB2, 0xDB, 0x46, 0x94, 0x1C, 0x7A, 
+	0x5C, 0xEA, 0x46, 0x64, 0x46, 0xA4, 0x01, 0xA4, 0x44, 0x62, 0x32, 0x02, 0x00, 0x52, 0x4C, 0x1D, 
+	0x4C, 0x22, 0x5B, 0x12, 0x46, 0x94, 0x00, 0x7F, 0x46, 0x64, 0x5B, 0x3A, 0x42, 0x90, 0x1A, 0xA2, 
+	0x1C, 0x10, 0xDA, 0x00, 0xDD, 0x00, 0x42, 0x91, 0x2B, 0x00, 0x1C, 0x11, 0x4B, 0x0C, 0xD1, 0xE3, 
+	0x78, 0x1B, 0x4A, 0x1C, 0x80, 0x51, 0x80, 0x10, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 
+	0x20, 0x16, 0x93, 0x00, 0xF7, 0xFF, 0x1C, 0x0B, 0xB0, 0x05, 0xFA, 0xAD, 0x46, 0xC0, 0xBD, 0xF0, 
+	0x20, 0x00, 0x09, 0xAC, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x11, 0x30, 0x20, 0x00, 0x11, 0x48, 
+	0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0xAB, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x40, 0x84, 
+	0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x01, 0xE1, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x0E, 0x64, 
+	0x20, 0x00, 0x09, 0x7C, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0D, 0x3C, 
+	0x00, 0x00, 0x59, 0xAF, 0x20, 0x00, 0x00, 0x58, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x11, 0x94, 
+	0x00, 0x00, 0x59, 0xB5, 0x20, 0x00, 0x11, 0x54, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 
+	0x4B, 0xB3, 0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0xA5, 0xD0, 0x00, 0x2B, 0x00, 0x4A, 0xB1, 0xE2, 0x01, 
+	0x78, 0x12, 0x4C, 0xB1, 0x4E, 0xB2, 0x4D, 0xB1, 0xB2, 0x52, 0x7C, 0x64, 0x60, 0x2B, 0x60, 0x6B, 
+	0x81, 0x6B, 0x82, 0x6B, 0x81, 0x2B, 0x82, 0x2B, 0x60, 0xB3, 0x60, 0x33, 0x4F, 0xAD, 0x92, 0x1B, 
+	0x4B, 0xAD, 0x22, 0xFF, 0x60, 0xF2, 0x60, 0x72, 0x7E, 0x3F, 0x94, 0x11, 0x4C, 0xA9, 0x78, 0x1B, 
+	0x93, 0x0B, 0x97, 0x09, 0x4D, 0xA4, 0x7D, 0xE4, 0x23, 0x46, 0x94, 0x08, 0x4F, 0xA2, 0x5E, 0xED, 
+	0x23, 0x48, 0x95, 0x0E, 0x4C, 0xA3, 0x5E, 0xFF, 0x7D, 0x24, 0x97, 0x0F, 0x94, 0x0C, 0x23, 0x2D, 
+	0x4E, 0xA2, 0x4D, 0x9D, 0x78, 0x6D, 0x9F, 0x11, 0x42, 0x7F, 0x68, 0x36, 0x95, 0x0D, 0x4C, 0x9A, 
+	0x97, 0x1D, 0x96, 0x12, 0x4D, 0x98, 0x7C, 0xA4, 0x5C, 0xEB, 0x94, 0x22, 0x93, 0x13, 0x9E, 0x1B, 
+	0x1B, 0x9B, 0x23, 0x10, 0x27, 0x18, 0x93, 0x1E, 0x20, 0x1C, 0x57, 0xEF, 0x56, 0x28, 0x97, 0x14, 
+	0x90, 0x18, 0x21, 0x19, 0x23, 0x00, 0x56, 0x69, 0x24, 0x00, 0x22, 0x00, 0x93, 0x05, 0x91, 0x23, 
+	0x26, 0x00, 0x25, 0x00, 0x20, 0xFF, 0x27, 0x00, 0x23, 0xFF, 0x21, 0x00, 0x94, 0x17, 0x92, 0x06, 
+	0x96, 0x1A, 0x95, 0x10, 0x90, 0x19, 0x97, 0x15, 0x92, 0x1F, 0x91, 0x21, 0x94, 0x1C, 0x93, 0x16, 
+	0x2C, 0x00, 0x9C, 0x09, 0xE1, 0x27, 0xD1, 0x00, 0x4D, 0x89, 0x9B, 0x09, 0xB2, 0xDB, 0x3B, 0x01, 
+	0x00, 0x5B, 0x93, 0x09, 0x9E, 0x08, 0x5B, 0x5B, 0x2E, 0x00, 0x93, 0x0A, 0x9F, 0x09, 0xD0, 0xF0, 
+	0x37, 0x01, 0x48, 0x84, 0x18, 0x1B, 0x01, 0xFB, 0x99, 0x0A, 0x88, 0x1B, 0x1A, 0x5A, 0x9C, 0x0E, 
+	0xDA, 0x00, 0x42, 0x94, 0x9D, 0x0F, 0xE1, 0x92, 0xDD, 0x00, 0x42, 0x95, 0x9E, 0x09, 0xE1, 0x8B, 
+	0x21, 0x01, 0x01, 0xBF, 0x22, 0x00, 0x25, 0x02, 0x97, 0x03, 0x01, 0x70, 0x4D, 0x7A, 0xE0, 0x2C, 
+	0x00, 0x64, 0x18, 0x84, 0x27, 0x18, 0x46, 0x6E, 0x5F, 0xBD, 0x5B, 0x2C, 0x42, 0xAC, 0x1A, 0xE4, 
+	0xB2, 0xA7, 0xDD, 0x01, 0x46, 0x6E, 0x97, 0x06, 0x5F, 0xBD, 0x27, 0x14, 0xDA, 0x01, 0x42, 0xAC, 
+	0x94, 0x05, 0xB2, 0xA4, 0x4F, 0x70, 0x18, 0x82, 0x52, 0xBB, 0x00, 0x52, 0xB2, 0xCB, 0x9A, 0x08, 
+	0xD9, 0xBD, 0x42, 0x9A, 0x1C, 0x8D, 0x9A, 0x03, 0x4C, 0x6C, 0x19, 0x53, 0x5B, 0x1B, 0x00, 0x5B, 
+	0x9F, 0x0E, 0x9E, 0x0A, 0x1B, 0x9C, 0x1C, 0x0A, 0xDD, 0x00, 0x42, 0xBC, 0x9E, 0x0F, 0xE1, 0x38, 
+	0x42, 0xB4, 0x31, 0x01, 0xE0, 0xD1, 0xDA, 0x00, 0x2F, 0x00, 0x9F, 0x0C, 0x9E, 0x03, 0xD0, 0x07, 
+	0x19, 0x34, 0x1C, 0xD4, 0x00, 0x64, 0x4F, 0x61, 0x18, 0xE3, 0x5B, 0xE4, 0x9C, 0x0D, 0x10, 0x5B, 
+	0xD0, 0x06, 0x2C, 0x00, 0x18, 0x84, 0x4E, 0x5E, 0x9F, 0x12, 0x5D, 0xA4, 0x43, 0x7B, 0x43, 0x63, 
+	0x9C, 0x0B, 0x13, 0x1B, 0xD0, 0xBA, 0x2C, 0x00, 0x4F, 0x57, 0x18, 0x86, 0x5B, 0x3F, 0x00, 0x74, 
+	0x4F, 0x58, 0x46, 0xBC, 0x46, 0x66, 0x57, 0xBC, 0x1B, 0x34, 0x08, 0xF6, 0x46, 0x6F, 0x94, 0x07, 
+	0x96, 0x04, 0x24, 0x18, 0x9E, 0x07, 0x5F, 0xE7, 0x42, 0xBC, 0x1A, 0xF4, 0xB2, 0xA7, 0xDD, 0x01, 
+	0x46, 0x6E, 0x97, 0x06, 0x5F, 0xBE, 0x27, 0x14, 0xDA, 0x01, 0x42, 0xB4, 0x96, 0x05, 0xB2, 0xA6, 
+	0x42, 0xBC, 0x9F, 0x11, 0x18, 0x84, 0xDD, 0x5D, 0x4C, 0x4B, 0x46, 0xA4, 0x46, 0x66, 0x27, 0x00, 
+	0x9F, 0x04, 0x55, 0x37, 0x1A, 0xFC, 0x9E, 0x13, 0xD0, 0x08, 0x2E, 0x00, 0x9C, 0x07, 0x9F, 0x1B, 
+	0x43, 0x7B, 0x9E, 0x1E, 0x9F, 0x04, 0x43, 0x74, 0x11, 0x24, 0x19, 0x1C, 0x1C, 0x23, 0x1B, 0x3C, 
+	0xDA, 0x17, 0x33, 0x7F, 0x18, 0x82, 0x4E, 0x3F, 0x54, 0xB3, 0x23, 0x80, 0x9E, 0x21, 0x9A, 0x23, 
+	0x18, 0xF6, 0x1A, 0xA3, 0xAF, 0x1F, 0x96, 0x21, 0x5E, 0xFB, 0x23, 0x00, 0xDC, 0x01, 0x42, 0x9C, 
+	0x94, 0x1F, 0xB2, 0xA4, 0x4C, 0x35, 0x9A, 0x03, 0x00, 0x6D, 0x19, 0x55, 0x5B, 0x2B, 0x27, 0x00, 
+	0xE7, 0x83, 0x53, 0x2F, 0x2C, 0x7E, 0x18, 0x83, 0x4E, 0x32, 0xDD, 0x36, 0x54, 0xF7, 0x27, 0x7F, 
+	0x42, 0xBC, 0x9F, 0x14, 0x9E, 0x17, 0xDB, 0x03, 0x18, 0xF6, 0x1B, 0xE3, 0xAF, 0x10, 0x96, 0x17, 
+	0x5E, 0xFB, 0x23, 0x00, 0xDC, 0x24, 0x42, 0x9C, 0x9E, 0x18, 0xB2, 0xA3, 0xDB, 0x11, 0x42, 0xB4, 
+	0x9C, 0x09, 0x9F, 0x1A, 0xDA, 0x00, 0x42, 0xA7, 0x9E, 0x16, 0x94, 0x1A, 0x42, 0xA6, 0x9C, 0x09, 
+	0x94, 0x16, 0xDD, 0x00, 0x42, 0x96, 0x9E, 0x15, 0x5C, 0x96, 0xAE, 0xF1, 0x13, 0x92, 0x15, 0xDA, 
+	0x00, 0x42, 0xBA, 0x9F, 0x19, 0x92, 0x19, 0xDA, 0x00, 0x4C, 0x1D, 0x9A, 0x03, 0x00, 0x6D, 0x19, 
+	0x55, 0x53, 0x2B, 0x5B, 0x2A, 0x9E, 0x1D, 0xE7, 0x54, 0x42, 0xB4, 0x18, 0x87, 0x4C, 0x1B, 0xDA, 
+	0x0E, 0x55, 0x3E, 0x26, 0x00, 0xB2, 0xA3, 0xE7, 0x9F, 0xE7, 0xD8, 0x93, 0x10, 0x54, 0xF4, 0x4E, 
+	0x16, 0xDA, 0xC7, 0x2C, 0x00, 0x42, 0xBC, 0x9F, 0x23, 0xE7, 0xA9, 0xDC, 0xAF, 0x97, 0x20, 0x4E, 
+	0x13, 0x9E, 0x22, 0x5D, 0xBC, 0x42, 0xB7, 0xB2, 0x67, 0x9F, 0x20, 0xD0, 0x8D, 0x34, 0x01, 0x4E, 
+	0x0F, 0xE7, 0x88, 0x55, 0xBC, 0x20, 0x00, 0x09, 0xAC, 0x20, 0x00, 0x00, 0x4C, 0x20, 0x00, 0x0D, 
+	0x48, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 
+	0x1C, 0x20, 0x00, 0x09, 0x78, 0x20, 0x00, 0x11, 0x94, 0x40, 0x00, 0x40, 0x04, 0x20, 0x00, 0x03, 
+	0xF8, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x79, 0x12, 0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x0A, 
+	0xB3, 0x27, 0x01, 0x9C, 0x09, 0x2C, 0x00, 0x97, 0x1C, 0xE6, 0xD7, 0xD0, 0x00, 0x46, 0x6F, 0x46, 
+	0x6D, 0x20, 0x14, 0x26, 0x18, 0x5B, 0xC0, 0x5B, 0x76, 0x99, 0x17, 0x4D, 0x41, 0x1C, 0x2F, 0xAC, 
+	0x10, 0x82, 0x68, 0x82, 0x2E, 0x88, 0x25, 0x60, 0x29, 0x1C, 0x3C, 0x9B, 0x21, 0x9E, 0x1A, 0x81, 
+	0x3D, 0x60, 0x63, 0x4F, 0x3C, 0x88, 0x25, 0xAC, 0x1F, 0x98, 0x16, 0x60, 0xBE, 0x9A, 0x19, 0x99, 
+	0x15, 0x9E, 0x0B, 0x4C, 0x37, 0x60, 0x39, 0x60, 0xF8, 0x81, 0x65, 0x60, 0x7A, 0xD0, 0x24, 0x2E, 
+	0x00, 0x78, 0x1B, 0x4B, 0x35, 0xD0, 0x03, 0x2B, 0x00, 0x68, 0x1B, 0x4B, 0x34, 0xDD, 0x1C, 0x2B, 
+	0x00, 0x78, 0x23, 0x4C, 0x33, 0xD1, 0x56, 0x2B, 0x00, 0x7E, 0x3B, 0x4F, 0x32, 0xD0, 0x14, 0x2B, 
+	0x00, 0x9F, 0x09, 0x4D, 0x31, 0x78, 0x23, 0x26, 0x01, 0xD0, 0x08, 0x2B, 0x00, 0x01, 0x7A, 0x48, 
+	0x2D, 0x19, 0x52, 0x7D, 0xC1, 0x23, 0x01, 0x20, 0x03, 0xF7, 0xFF, 0x96, 0x00, 0x49, 0x29, 0xF8, 
+	0xAD, 0x7E, 0x0B, 0x37, 0x01, 0x42, 0xBB, 0xB2, 0xFF, 0x4C, 0x26, 0xD8, 0xED, 0x2B, 0x00, 0x7D, 
+	0x23, 0x7E, 0x22, 0xD0, 0x13, 0x3A, 0x01, 0x7D, 0xE4, 0xB2, 0xD2, 0x49, 0x24, 0x20, 0x00, 0x34, 
+	0x02, 0x01, 0x9B, 0x1C, 0x53, 0x00, 0x5B, 0x19, 0x1B, 0x5A, 0x5D, 0x3A, 0x01, 0x5A, 0x5D, 0xB2, 
+	0xD2, 0xE7, 0xF5, 0x52, 0x58, 0x96, 0x1C, 0x26, 0x01, 0x4D, 0x1D, 0xE6, 0x74, 0x7E, 0xAB, 0x4E, 
+	0x1D, 0x4F, 0x13, 0x68, 0x32, 0x21, 0x08, 0x43, 0x53, 0x48, 0x1B, 0x5E, 0x79, 0x4A, 0x1B, 0x11, 
+	0x9B, 0x0F, 0xDC, 0x17, 0xCD, 0x42, 0x99, 0x78, 0x00, 0x70, 0x15, 0x41, 0x65, 0xD1, 0x0A, 0x28, 
+	0x00, 0x2C, 0x00, 0x9C, 0x1C, 0x23, 0x01, 0xD0, 0x07, 0x4A, 0x15, 0x70, 0x13, 0x70, 0x13, 0x49, 
+	0x15, 0x70, 0x0B, 0x4A, 0x15, 0xB0, 0x25, 0x70, 0x13, 0x25, 0x01, 0xBD, 0xF0, 0xE6, 0x51, 0x95, 
+	0x1C, 0x94, 0x1C, 0x24, 0x01, 0x20, 0x03, 0xE6, 0x4E, 0xF7, 0xFF, 0x49, 0x10, 0xE7, 0xA3, 0xF8, 
+	0xBD, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x01, 0xDE, 0x20, 0x00, 0x01, 
+	0x20, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0E, 0x64, 0x40, 0x00, 0x40, 
+	0x00, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0x78, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 0x09, 
+	0x14, 0x20, 0x00, 0x11, 0x30, 0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 0x01, 0xC4, 0x00, 0x00, 0x59, 
+	0xF0, 0x4B, 0x2F, 0xB5, 0xF0, 0x78, 0x1C, 0xB0, 0x85, 0x4E, 0x2F, 0x4D, 0x2E, 0x3C, 0x01, 0xE0, 
+	0x10, 0x57, 0x2B, 0xB2, 0xE4, 0x1C, 0x59, 0x57, 0x32, 0x01, 0x89, 0x32, 0x02, 0x4A, 0x2B, 0x18, 
+	0x89, 0x5A, 0x88, 0x00, 0x49, 0x00, 0x5B, 0x4A, 0x2A, 0x1C, 0x21, 0x5A, 0x9A, 0xFB, 0x0A, 0xF7, 
+	0xFF, 0xD1, 0xEC, 0x2C, 0x00, 0x78, 0x1B, 0x4B, 0x27, 0xD0, 0x08, 0x2B, 0x00, 0x20, 0x03, 0x4B, 
+	0x20, 0x23, 0x01, 0x78, 0x19, 0x4A, 0x24, 0x93, 0x00, 0xF7, 0xFF, 0x23, 0x02, 0x4B, 0x23, 0xF8, 
+	0x1D, 0x78, 0x18, 0x49, 0x1E, 0x1C, 0x84, 0x78, 0x9A, 0x78, 0xDE, 0x92, 0x03, 0x94, 0x02, 0x23, 
+	0x00, 0x01, 0xA4, 0xE0, 0x0D, 0x00, 0x64, 0x19, 0xE4, 0x25, 0x00, 0x5A, 0x65, 0x32, 0x01, 0x52, 
+	0x65, 0x9C, 0x02, 0xE0, 0x02, 0x18, 0xE7, 0x22, 0x00, 0xD1, 0xF2, 0x1A, 0xB4, 0x9D, 0x03, 0x33, 
+	0x01, 0x42, 0xAA, 0x18, 0x1A, 0x4B, 0x15, 0xDB, 0xF5, 0x78, 0x58, 0x49, 0x10, 0x1C, 0x42, 0x78, 
+	0xDE, 0x42, 0x5B, 0x23, 0x01, 0x22, 0x00, 0x92, 0x02, 0xE0, 0x08, 0x1C, 0x9F, 0x18, 0xAC, 0x9D, 
+	0x02, 0x19, 0xE4, 0x01, 0xA4, 0x5A, 0x65, 0x00, 0x64, 0x52, 0x65, 0x25, 0x00, 0x18, 0x14, 0x32, 
+	0x01, 0xDB, 0xF3, 0x42, 0xB4, 0x33, 0x01, 0x9A, 0x03, 0xDB, 0xEC, 0x42, 0x93, 0xBD, 0xF0, 0xB0, 
+	0x05, 0x20, 0x00, 0x09, 0x7C, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 0x40, 0x00, 0x40, 
+	0x00, 0x20, 0x00, 0x11, 0x94, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 0x03, 
+	0x0A, 0x4B, 0x0C, 0xB5, 0x30, 0x78, 0xDB, 0x4C, 0x0C, 0xE0, 0x10, 0x49, 0x0C, 0xB2, 0xDB, 0x3B, 
+	0x01, 0x4D, 0x0B, 0x1C, 0x5A, 0x19, 0x52, 0x01, 0xD2, 0xD1, 0x03, 0x1C, 0x45, 0x00, 0x5A, 0x88, 
+	0x15, 0xE0, 0x04, 0x52, 0x55, 0x01, 0x5A, 0x88, 0x15, 0x00, 0x52, 0x18, 0x12, 0x2B, 0x00, 0x53, 
+	0x15, 0xBD, 0x30, 0xD1, 0xEC, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x11, 
+	0x94, 0x40, 0x00, 0x40, 0x02, 0xB0, 0x8D, 0xB5, 0xF0, 0x92, 0x0B, 0x91, 0x0A, 0x1C, 0x41, 0x4B, 
+	0x63, 0x4A, 0x63, 0xD1, 0x0C, 0x7E, 0x12, 0x49, 0x63, 0x92, 0x03, 0x3A, 0x01, 0x78, 0x5E, 0x78, 
+	0xDA, 0x23, 0x00, 0x00, 0x54, 0x18, 0x64, 0x1C, 0x55, 0xE0, 0x0E, 0x46, 0x94, 0x79, 0x5A, 0x7B, 
+	0xDC, 0x3A, 0x01, 0x18, 0xA2, 0x4A, 0x5C, 0xE0, 0x10, 0x01, 0xC9, 0x18, 0xE9, 0x88, 0x0A, 0x18, 
+	0x89, 0x53, 0xE2, 0x00, 0x5F, 0x22, 0x00, 0x88, 0x0A, 0x3B, 0x01, 0x80, 0x0A, 0x19, 0xDA, 0x46, 
+	0x67, 0xDA, 0xF0, 0x42, 0xB2, 0x24, 0x00, 0x9A, 0x03, 0x4D, 0x54, 0x01, 0x56, 0x23, 0x00, 0x18, 
+	0x36, 0x1C, 0x11, 0x00, 0x76, 0x93, 0x07, 0x93, 0x08, 0x93, 0x05, 0x93, 0x06, 0x96, 0x09, 0x95, 
+	0x03, 0xE0, 0x55, 0x46, 0xA4, 0xD1, 0x04, 0x1C, 0x44, 0x00, 0x56, 0x4C, 0x4A, 0x5A, 0xE4, 0x19, 
+	0x34, 0x4C, 0x4B, 0xE0, 0x04, 0x19, 0x3E, 0x9F, 0x09, 0x5B, 0x34, 0x01, 0x5C, 0x4F, 0x46, 0x1C, 
+	0x4E, 0x01, 0xF6, 0x96, 0x04, 0x88, 0x37, 0x19, 0xF6, 0xB2, 0x3E, 0xB2, 0x24, 0x1B, 0xA6, 0x4F, 
+	0x45, 0x19, 0xE7, 0x00, 0x54, 0x52, 0xFE, 0x17, 0xF4, 0x40, 0x66, 0x19, 0x36, 0x24, 0x01, 0x1C, 
+	0x0F, 0x42, 0xB9, 0x43, 0xA7, 0x9C, 0x07, 0xD1, 0x09, 0x94, 0x07, 0x19, 0xA4, 0xDD, 0x00, 0x42, 
+	0xB5, 0x9F, 0x06, 0x1C, 0x35, 0xDB, 0x0B, 0x42, 0xB7, 0x9C, 0x08, 0xE0, 0x0D, 0x19, 0xA4, 0x9F, 
+	0x03, 0x42, 0xB7, 0x94, 0x08, 0x96, 0x03, 0xDD, 0x00, 0x42, 0xB4, 0x9C, 0x05, 0xE0, 0x02, 0xDB, 
+	0x02, 0xE0, 0x00, 0x96, 0x06, 0x9E, 0x04, 0x96, 0x05, 0x4E, 0x2F, 0x01, 0xF4, 0x52, 0x9F, 0xAE, 
+	0xF1, 0x14, 0x1C, 0x47, 0x19, 0xA4, 0x88, 0x27, 0xD1, 0x0E, 0x97, 0x04, 0x4E, 0x2B, 0x19, 0xBE, 
+	0x00, 0x57, 0x27, 0x10, 0x96, 0x02, 0x5B, 0xBF, 0x46, 0x6E, 0x52, 0xF7, 0x9E, 0x02, 0x26, 0x00, 
+	0x88, 0x26, 0xE0, 0x05, 0x80, 0x26, 0x4E, 0x27, 0x88, 0x27, 0x19, 0xA6, 0x9C, 0x09, 0x53, 0x37, 
+	0x01, 0x5C, 0x3B, 0x02, 0x39, 0x01, 0xDA, 0xA7, 0x45, 0x61, 0xD1, 0x13, 0x30, 0x01, 0x78, 0x23, 
+	0x4C, 0x23, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x22, 0x20, 0x01, 0xFF, 0x70, 0xF7, 0xFE, 0x2B, 0x00, 
+	0x78, 0x23, 0x4B, 0x17, 0xD0, 0x08, 0x78, 0xD9, 0x20, 0x01, 0x93, 0x00, 0x23, 0x00, 0x23, 0x02, 
+	0x4A, 0x16, 0xFF, 0x0C, 0xF7, 0xFE, 0x9F, 0x08, 0x9E, 0x07, 0x19, 0xF3, 0x9C, 0x0A, 0x9E, 0x05, 
+	0x60, 0x23, 0x9C, 0x06, 0x9F, 0x03, 0x1B, 0x65, 0x1B, 0xF3, 0xDA, 0x00, 0x42, 0x9D, 0x9E, 0x0B, 
+	0x1C, 0x1D, 0x60, 0x35, 0x4C, 0x12, 0x2B, 0x00, 0x78, 0x23, 0x20, 0x0B, 0xD0, 0x03, 0xF7, 0xFE, 
+	0x49, 0x11, 0x78, 0x23, 0xFF, 0x4D, 0xD0, 0x08, 0x2B, 0x00, 0x20, 0x0B, 0x4B, 0x06, 0x23, 0x01, 
+	0x7E, 0x19, 0x4A, 0x09, 0x93, 0x00, 0xF7, 0xFE, 0x23, 0x02, 0xB0, 0x0D, 0xFE, 0xE9, 0x46, 0xC0, 
+	0xBD, 0xF0, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x11, 0x94, 0x40, 0x00, 
+	0x40, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 
+	0x01, 0xEB, 0x00, 0x00, 0x59, 0xC6, 0x00, 0x00, 0x59, 0xCD, 0x4B, 0xA6, 0xB5, 0xF0, 0x78, 0x1D, 
+	0xB0, 0x85, 0xD0, 0x29, 0x2D, 0x00, 0x4C, 0xA5, 0x4B, 0xA4, 0x4B, 0xA5, 0x78, 0x18, 0x68, 0x19, 
+	0xB2, 0x46, 0x00, 0xB2, 0x68, 0x5B, 0x51, 0x13, 0x18, 0xCB, 0xB2, 0xD2, 0x1D, 0x82, 0x23, 0x06, 
+	0x25, 0x00, 0xB2, 0xDB, 0x3B, 0x01, 0xD5, 0x00, 0x1A, 0xF1, 0x00, 0x89, 0x31, 0x0C, 0x18, 0x6D, 
+	0x59, 0x09, 0x2A, 0x0B, 0x1C, 0x11, 0x39, 0x0C, 0xD9, 0x01, 0x00, 0x89, 0xB2, 0xC9, 0x3A, 0x01, 
+	0x58, 0x61, 0xB2, 0xD2, 0x1A, 0x6D, 0xD1, 0xEB, 0x2B, 0x00, 0x4A, 0x93, 0x30, 0x01, 0x70, 0x10, 
+	0xB2, 0xC0, 0x28, 0x0B, 0xB2, 0x40, 0x70, 0x13, 0xDD, 0x00, 0x78, 0x1B, 0x4B, 0x92, 0xD0, 0x00, 
+	0x2B, 0x00, 0x4B, 0x91, 0xE1, 0x15, 0x5E, 0x5B, 0x21, 0x14, 0xDA, 0x02, 0x42, 0x9D, 0x22, 0x01, 
+	0x4B, 0x8F, 0x4B, 0x8B, 0x70, 0x1A, 0x5E, 0x9E, 0x22, 0x10, 0x5F, 0x1B, 0x24, 0x12, 0x4B, 0x85, 
+	0x1A, 0xF6, 0x28, 0x00, 0x78, 0x18, 0x4B, 0x8A, 0xD1, 0x16, 0x68, 0x1B, 0x4F, 0x8A, 0x80, 0xBB, 
+	0x4C, 0x8A, 0x80, 0x3E, 0x78, 0x23, 0xD0, 0x02, 0x2B, 0x00, 0xF7, 0xFE, 0x49, 0x88, 0x78, 0x23, 
+	0xFE, 0xD7, 0xD0, 0x07, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x00, 0x93, 0x00, 0x1C, 0x0B, 
+	0x1C, 0x3A, 0xFE, 0x74, 0xF7, 0xFE, 0x7D, 0x9A, 0x4B, 0x7C, 0xDC, 0x07, 0x42, 0x96, 0x78, 0x1A, 
+	0x4B, 0x80, 0x29, 0x02, 0xB2, 0x51, 0x32, 0x01, 0xDC, 0x08, 0xE0, 0x05, 0x70, 0x1A, 0x42, 0x9E, 
+	0x7D, 0xDB, 0x4B, 0x7B, 0xDB, 0x02, 0x70, 0x1A, 0x22, 0x00, 0x4A, 0x76, 0x4B, 0x71, 0x68, 0x1B, 
+	0x68, 0x59, 0x18, 0xCB, 0x80, 0x15, 0x4B, 0x74, 0x80, 0x53, 0x78, 0x1B, 0x80, 0x96, 0xD0, 0x06, 
+	0x2B, 0x00, 0x93, 0x00, 0x23, 0x01, 0x21, 0x03, 0x20, 0x19, 0xF7, 0xFE, 0x23, 0x02, 0x4B, 0x6B, 
+	0xFE, 0x4F, 0x78, 0x1B, 0x4C, 0x64, 0xD0, 0x61, 0x2B, 0x00, 0x78, 0x2B, 0x4D, 0x6B, 0xD0, 0x03, 
+	0x2B, 0x00, 0x49, 0x6C, 0x20, 0x19, 0xFE, 0x9A, 0xF7, 0xFE, 0x78, 0x1B, 0x4B, 0x69, 0xD1, 0x05, 
+	0x2B, 0x00, 0x2A, 0x00, 0x78, 0x22, 0x4A, 0x61, 0xD0, 0x52, 0xE0, 0x4F, 0x70, 0x13, 0xD1, 0x4D, 
+	0x2B, 0x03, 0x2B, 0x00, 0x78, 0x2B, 0x20, 0x00, 0xD0, 0x03, 0xF7, 0xFE, 0x49, 0x63, 0x4B, 0x55, 
+	0xFE, 0x87, 0x78, 0x19, 0x4A, 0x62, 0xD1, 0x1A, 0x29, 0x00, 0x70, 0x18, 0x20, 0x01, 0x7D, 0xD6, 
+	0x7E, 0x13, 0x4A, 0x60, 0x4D, 0x5F, 0x3B, 0x01, 0xE0, 0x0B, 0x18, 0xF8, 0xB2, 0xDB, 0x5A, 0xA1, 
+	0x00, 0x44, 0x52, 0xA1, 0x00, 0xC9, 0x55, 0x41, 0x21, 0x00, 0xD1, 0xF4, 0x2B, 0x00, 0x1E, 0x59, 
+	0x46, 0x63, 0x2B, 0x00, 0xB2, 0xC9, 0x1C, 0x33, 0xD0, 0x23, 0x46, 0x8C, 0x01, 0x4F, 0x7E, 0x13, 
+	0xE7, 0xF4, 0x4A, 0x54, 0x7D, 0xD6, 0x3B, 0x01, 0xE0, 0x0E, 0xB2, 0xDB, 0x4D, 0x51, 0x00, 0x60, 
+	0x18, 0xFC, 0x00, 0xE4, 0x57, 0x64, 0x5A, 0x84, 0x94, 0x02, 0x1B, 0x64, 0x9D, 0x02, 0x2B, 0x00, 
+	0x52, 0x84, 0x1C, 0x0B, 0xD1, 0xF1, 0xB2, 0xC9, 0x1E, 0x59, 0xD0, 0x02, 0x2B, 0x00, 0x01, 0x4F, 
+	0x1C, 0x33, 0x4A, 0x3A, 0xE7, 0xF5, 0x31, 0x30, 0x1C, 0x11, 0x42, 0x8A, 0xC2, 0x08, 0x4B, 0x3B, 
+	0xD1, 0xFC, 0x70, 0x1A, 0x22, 0x00, 0x22, 0x01, 0x4B, 0x44, 0xE0, 0x60, 0x70, 0x1A, 0x4B, 0x43, 
+	0x78, 0x22, 0xD1, 0x06, 0x2A, 0x00, 0x21, 0x01, 0x4A, 0x40, 0x68, 0x1A, 0x70, 0x11, 0x60, 0x1A, 
+	0x18, 0x52, 0x22, 0x00, 0xE0, 0x55, 0x4B, 0x39, 0x60, 0x1A, 0x7E, 0x1C, 0x48, 0x3D, 0x49, 0x39, 
+	0x7D, 0xDB, 0x4B, 0x2D, 0x93, 0x02, 0x93, 0x03, 0x7C, 0x9B, 0x3B, 0x01, 0xE0, 0x11, 0x18, 0xF2, 
+	0xB2, 0xDB, 0x9D, 0x03, 0x56, 0x14, 0xD1, 0x07, 0x42, 0xAC, 0x00, 0x54, 0x4D, 0x31, 0x5A, 0x65, 
+	0x57, 0x57, 0x52, 0x67, 0x1B, 0xEF, 0x54, 0x14, 0x24, 0x00, 0xD1, 0xEE, 0x2B, 0x00, 0x1E, 0x65, 
+	0x46, 0x64, 0x2C, 0x00, 0xB2, 0xED, 0x9B, 0x02, 0xD0, 0x03, 0x46, 0xAC, 0x01, 0x6E, 0x4B, 0x2D, 
+	0xE7, 0xF4, 0x07, 0x5D, 0x68, 0x1B, 0x4B, 0x20, 0xD5, 0x2B, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x02, 
+	0xD0, 0x22, 0xF7, 0xFE, 0x49, 0x29, 0xE0, 0x1D, 0xFE, 0x03, 0x01, 0x62, 0x7D, 0xE9, 0x48, 0x21, 
+	0x1C, 0x0B, 0xE0, 0x08, 0x92, 0x02, 0x9A, 0x02, 0x3B, 0x01, 0x18, 0xD2, 0xB2, 0xDB, 0x5A, 0x12, 
+	0x00, 0x52, 0x08, 0xD2, 0x00, 0x5F, 0x2B, 0x00, 0x53, 0xBA, 0x4A, 0x13, 0xD1, 0xF4, 0x2A, 0x00, 
+	0x78, 0x12, 0x20, 0x02, 0xD0, 0x05, 0x4A, 0x0F, 0x93, 0x00, 0xF7, 0xFE, 0x1C, 0x03, 0x34, 0x01, 
+	0xFD, 0x8F, 0xE0, 0x01, 0xB2, 0xE4, 0x4E, 0x0B, 0x4D, 0x11, 0x42, 0xA3, 0x7E, 0x2B, 0xB0, 0x05, 
+	0xD8, 0xDC, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x10, 0xF4, 0x20, 0x00, 
+	0x11, 0xBC, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 
+	0x11, 0x3C, 0x20, 0x00, 0x11, 0x34, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 
+	0x59, 0xD2, 0x20, 0x00, 0x09, 0x20, 0x00, 0x00, 0x59, 0xD9, 0x00, 0x00, 0x59, 0xE2, 0x20, 0x00, 
+	0x09, 0xAE, 0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 
+	0x01, 0xBC, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x00, 0x58, 0x00, 0x00, 0x59, 0xEB, 0x4B, 0x25, 
+	0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0x87, 0xD1, 0x2B, 0x2B, 0x00, 0x4B, 0x24, 0x4A, 0x23, 0x78, 0x1B, 
+	0x7C, 0x90, 0x7E, 0xD2, 0x90, 0x04, 0xB2, 0x52, 0x4D, 0x22, 0x92, 0x05, 0xB2, 0x92, 0xE0, 0x1D, 
+	0x4A, 0x21, 0x4C, 0x21, 0x3B, 0x01, 0x5C, 0xE1, 0xB2, 0xDB, 0x42, 0xB9, 0x9F, 0x04, 0x00, 0x59, 
+	0xD1, 0x16, 0x0D, 0x49, 0xAE, 0xF1, 0x15, 0x28, 0x00, 0x5A, 0x88, 0x5A, 0x6E, 0xD0, 0x07, 0xB2, 
+	0x34, 0x46, 0x6F, 0x24, 0x14, 0x46, 0xA4, 0x45, 0xBC, 0x5F, 0xE7, 0x00, 0x59, 0xDA, 0x05, 0x00, 
+	0xF6, 0x5A, 0x6E, 0x52, 0x50, 0x1B, 0x80, 0x1B, 0x80, 0xE0, 0x01, 0x4F, 0x14, 0x52, 0x88, 0x54, 
+	0xF9, 0x21, 0x00, 0xD1, 0xDF, 0x2B, 0x00, 0x4C, 0x12, 0x4B, 0x0E, 0x48, 0x0F, 0x78, 0x19, 0xE0, 
+	0x05, 0x1C, 0x0B, 0xB2, 0xDB, 0x3B, 0x01, 0x5A, 0x15, 0x00, 0x5A, 0x53, 0x15, 0x08, 0xED, 0xD1, 
+	0xF7, 0x2B, 0x00, 0x78, 0x12, 0x4A, 0x0C, 0xD0, 0x05, 0x2A, 0x00, 0x93, 0x00, 0x20, 0x02, 0x1C, 
+	0x03, 0x4A, 0x08, 0xFD, 0x0E, 0xF7, 0xFE, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x11, 0x30, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 0x02, 0x14, 0x20, 
+	0x00, 0x0A, 0xA4, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x49, 0x09, 0xB5, 0x10, 0x48, 
+	0x09, 0x22, 0x50, 0xF9, 0xE2, 0xF0, 0x00, 0x49, 0x09, 0x4C, 0x08, 0x22, 0x42, 0x1C, 0x20, 0xF9, 
+	0xDC, 0xF0, 0x00, 0x7B, 0xA2, 0x4B, 0x07, 0x7D, 0xE3, 0x60, 0x1A, 0x7E, 0x23, 0x76, 0xE3, 0xBD, 
+	0x10, 0x77, 0x23, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x00, 
+	0x00, 0x74, 0x08, 0x20, 0x00, 0x11, 0x50, 0x49, 0x04, 0xB5, 0x08, 0x43, 0x41, 0x4B, 0x04, 0x18, 
+	0xC9, 0x48, 0x04, 0xF9, 0x60, 0xF0, 0x00, 0xBD, 0x08, 0xB2, 0xC0, 0xFF, 0xFF, 0xFE, 0x44, 0x00, 
+	0x02, 0x24, 0xFE, 0x00, 0x0F, 0x42, 0x40, 0x4C, 0x15, 0xB5, 0x10, 0x71, 0x23, 0x23, 0x00, 0x71, 
+	0x63, 0x23, 0x03, 0x72, 0x23, 0x23, 0x02, 0x78, 0x98, 0x4B, 0x12, 0x28, 0x03, 0x38, 0x02, 0xF0, 
+	0x00, 0xD8, 0x1D, 0x04, 0x0B, 0xF8, 0xE7, 0x20, 0xC7, 0x14, 0x02, 0x20, 0xD7, 0xE0, 0x00, 0xF7, 
+	0xFF, 0x70, 0xE0, 0x23, 0x02, 0xFF, 0xD9, 0xE0, 0x0E, 0x70, 0x20, 0x70, 0xE0, 0x20, 0xF4, 0xFF, 
+	0xD2, 0xF7, 0xFF, 0x70, 0x20, 0x23, 0x02, 0x23, 0x01, 0x71, 0xA3, 0x20, 0xF4, 0xE0, 0x06, 0xF7, 
+	0xFF, 0x70, 0xE0, 0x23, 0x01, 0xFF, 0xC9, 0x71, 0xA3, 0x70, 0x20, 0xBD, 0x10, 0x71, 0xE3, 0x20, 
+	0x00, 0x0A, 0xAA, 0x20, 0x00, 0x0D, 0x48, 0x4B, 0x59, 0xB5, 0xF0, 0x68, 0x1A, 0xB0, 0x87, 0x2A, 
+	0x08, 0x4B, 0x58, 0x22, 0x01, 0xD1, 0x01, 0x22, 0x00, 0xE0, 0x00, 0x4B, 0x56, 0x70, 0x1A, 0x33, 
+	0x01, 0x4C, 0x56, 0x2B, 0x00, 0x7F, 0xDB, 0x71, 0xE3, 0xD1, 0x00, 0x25, 0x01, 0x78, 0x23, 0x1C, 
+	0x28, 0x79, 0xA2, 0x40, 0x90, 0x00, 0xD9, 0x1A, 0xCB, 0xB2, 0x82, 0x4E, 0x50, 0x43, 0x53, 0xB2, 
+	0xDB, 0x10, 0xDB, 0x78, 0x22, 0x80, 0x33, 0x79, 0xA0, 0x23, 0xFA, 0x43, 0x53, 0x00, 0x9B, 0x1C, 
+	0x29, 0x4F, 0x4C, 0xB2, 0x88, 0x40, 0x81, 0x43, 0x58, 0x88, 0xB9, 0xF0, 0x00, 0x01, 0x09, 0xB2, 
+	0xC1, 0xF8, 0xFB, 0x78, 0x23, 0x80, 0x71, 0x79, 0xA0, 0x22, 0x2D, 0x1C, 0x2A, 0x43, 0x53, 0xB2, 
+	0x90, 0x40, 0x82, 0x46, 0x6B, 0x43, 0x58, 0x01, 0x09, 0x81, 0x19, 0xF8, 0xEC, 0xF0, 0x00, 0x80, 
+	0xB0, 0xB2, 0xC0, 0x79, 0xB9, 0x7A, 0x23, 0x1A, 0x18, 0x00, 0xD8, 0x00, 0xC0, 0x40, 0xA9, 0x30, 
+	0xE0, 0x19, 0x49, 0x79, 0xA2, 0x43, 0x48, 0x21, 0x08, 0x46, 0x6C, 0x40, 0x90, 0x5E, 0x61, 0xF0, 
+	0x00, 0x01, 0x49, 0x4A, 0x34, 0xF8, 0x8B, 0x7D, 0x11, 0x80, 0xF0, 0x4B, 0x36, 0x7D, 0xD0, 0xB2, 
+	0xC0, 0x18, 0x08, 0x7E, 0x17, 0x70, 0x18, 0x7E, 0x56, 0x70, 0x5F, 0x7F, 0x96, 0x96, 0x01, 0x43, 
+	0x66, 0x9C, 0x01, 0x18, 0x20, 0xB2, 0xF4, 0x70, 0x98, 0xB2, 0xC0, 0x7E, 0x96, 0x90, 0x02, 0x98, 
+	0x03, 0x96, 0x03, 0x43, 0x46, 0x7F, 0xD6, 0x19, 0xC7, 0xB2, 0xF0, 0x70, 0xDF, 0xB2, 0xFF, 0x46, 
+	0xB4, 0x7E, 0xD6, 0x18, 0x61, 0x44, 0x61, 0x71, 0x19, 0xB2, 0xC9, 0x19, 0x80, 0x7F, 0x16, 0xB2, 
+	0xC0, 0x9E, 0x02, 0x1A, 0x3F, 0x1A, 0x74, 0xB2, 0xFF, 0xB2, 0xE6, 0x71, 0x9E, 0x71, 0x58, 0x46, 
+	0xBC, 0x71, 0xDF, 0x1B, 0xEC, 0x7D, 0x57, 0x1C, 0x27, 0x97, 0x04, 0xB2, 0xFF, 0x43, 0x77, 0x73, 
+	0x9F, 0x97, 0x05, 0x46, 0x64, 0x7D, 0x97, 0x43, 0x65, 0x1B, 0xED, 0x9C, 0x04, 0x43, 0x47, 0x43, 
+	0x4C, 0x74, 0x5F, 0x46, 0x6F, 0x72, 0x18, 0x5D, 0xC7, 0x20, 0x14, 0xB2, 0xE4, 0xB2, 0xED, 0x74, 
+	0x1C, 0x73, 0xDD, 0x72, 0x99, 0x72, 0x5D, 0x73, 0x1E, 0x72, 0xDF, 0x7F, 0x51, 0x73, 0x5C, 0x29, 
+	0x00, 0x4B, 0x12, 0x46, 0x69, 0xD0, 0x03, 0x70, 0x19, 0x79, 0x09, 0x9C, 0x01, 0xE0, 0x03, 0x43, 
+	0x74, 0x9E, 0x03, 0x1C, 0x93, 0x70, 0x1C, 0x9F, 0x02, 0x32, 0x03, 0x7F, 0xDB, 0x7F, 0xD2, 0xB2, 
+	0x5B, 0x18, 0xBA, 0x40, 0x9A, 0x32, 0x01, 0xB0, 0x07, 0x4B, 0x09, 0xBD, 0xF0, 0x60, 0x1A, 0x20, 
+	0x00, 0x11, 0x50, 0x20, 0x00, 0x02, 0xFA, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x02, 0x04, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0x7C, 0x20, 
+	0x00, 0x09, 0x18, 0x46, 0x71, 0xB4, 0x02, 0x00, 0x49, 0x08, 0x49, 0x00, 0x49, 0x5C, 0x09, 0xBC, 
+	0x02, 0x44, 0x8E, 0x46, 0xC0, 0x47, 0x70, 0x46, 0x71, 0xB4, 0x03, 0x00, 0x40, 0x08, 0x49, 0x5A, 
+	0x09, 0x00, 0x49, 0x44, 0x8E, 0x00, 0x49, 0x47, 0x70, 0xBC, 0x03, 0xD0, 0x34, 0x29, 0x00, 0x22, 
+	0x00, 0x23, 0x01, 0x42, 0x88, 0xB4, 0x10, 0x24, 0x01, 0xD3, 0x2C, 0x42, 0xA1, 0x07, 0x24, 0x42, 
+	0x81, 0xD2, 0x04, 0x01, 0x09, 0xD2, 0x02, 0xE7, 0xF8, 0x01, 0x1B, 0x42, 0xA1, 0x00, 0xE4, 0x42, 
+	0x81, 0xD2, 0x04, 0x00, 0x49, 0xD2, 0x02, 0xE7, 0xF8, 0x00, 0x5B, 0xD3, 0x01, 0x42, 0x88, 0x43, 
+	0x1A, 0x1A, 0x40, 0x42, 0xA0, 0x08, 0x4C, 0x1B, 0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0x5C, 0x42, 
+	0xA0, 0x08, 0x8C, 0x1B, 0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0x9C, 0x42, 0xA0, 0x08, 0xCC, 0x1B, 
+	0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0xDC, 0xD0, 0x03, 0x28, 0x00, 0xD0, 0x01, 0x09, 0x1B, 0xE7, 
+	0xE3, 0x09, 0x09, 0xBC, 0x10, 0x1C, 0x10, 0x28, 0x00, 0x47, 0x70, 0x20, 0x00, 0xD0, 0x01, 0xB4, 
+	0x07, 0x43, 0xC0, 0xA1, 0x02, 0x48, 0x02, 0x90, 0x02, 0x18, 0x40, 0x46, 0xC0, 0xBD, 0x03, 0x00, 
+	0x00, 0x00, 0xD9, 0xD0, 0xF0, 0x29, 0x00, 0xF7, 0xFF, 0xB5, 0x03, 0xBC, 0x0E, 0xFF, 0xB9, 0x1A, 
+	0x89, 0x43, 0x42, 0x46, 0xC0, 0x47, 0x18, 0xD0, 0x41, 0x29, 0x00, 0x1C, 0x04, 0xB4, 0x10, 0x46, 
+	0xA4, 0x40, 0x4C, 0x22, 0x00, 0x23, 0x01, 0xD5, 0x00, 0x29, 0x00, 0x28, 0x00, 0x42, 0x49, 0x42, 
+	0x40, 0xD5, 0x00, 0xD3, 0x2C, 0x42, 0x88, 0x07, 0x24, 0x24, 0x01, 0xD2, 0x04, 0x42, 0xA1, 0xD2, 
+	0x02, 0x42, 0x81, 0x01, 0x1B, 0x01, 0x09, 0x00, 0xE4, 0xE7, 0xF8, 0xD2, 0x04, 0x42, 0xA1, 0xD2, 
+	0x02, 0x42, 0x81, 0x00, 0x5B, 0x00, 0x49, 0x42, 0x88, 0xE7, 0xF8, 0x1A, 0x40, 0xD3, 0x01, 0x08, 
+	0x4C, 0x43, 0x1A, 0xD3, 0x02, 0x42, 0xA0, 0x08, 0x5C, 0x1B, 0x00, 0x08, 0x8C, 0x43, 0x22, 0xD3, 
+	0x02, 0x42, 0xA0, 0x08, 0x9C, 0x1B, 0x00, 0x08, 0xCC, 0x43, 0x22, 0xD3, 0x02, 0x42, 0xA0, 0x08, 
+	0xDC, 0x1B, 0x00, 0x28, 0x00, 0x43, 0x22, 0xD7, 0x17, 0xAE, 0xF1, 0x16, 0x09, 0x1B, 0xD0, 0x03, 
+	0x09, 0x09, 0xD0, 0x01, 0x1C, 0x10, 0xE7, 0xE3, 0x2C, 0x00, 0x46, 0x64, 0x42, 0x40, 0xD5, 0x00, 
+	0x47, 0x70, 0xBC, 0x10, 0xD0, 0x06, 0x28, 0x00, 0x20, 0x00, 0xDB, 0x03, 0x08, 0x40, 0x43, 0xC0, 
+	0x20, 0x80, 0xE0, 0x01, 0xB4, 0x07, 0x06, 0x00, 0xA1, 0x02, 0x48, 0x02, 0x90, 0x02, 0x18, 0x40, 
+	0x46, 0xC0, 0xBD, 0x03, 0x00, 0x00, 0x00, 0x19, 0xD0, 0xEB, 0x29, 0x00, 0xF7, 0xFF, 0xB5, 0x03, 
+	0xBC, 0x0E, 0xFF, 0xA7, 0x1A, 0x89, 0x43, 0x42, 0x46, 0xC0, 0x47, 0x18, 0x46, 0xC0, 0x47, 0x70, 
+	0x1C, 0x05, 0xB5, 0xF0, 0xD9, 0x2F, 0x2A, 0x0F, 0x43, 0x03, 0x1C, 0x0B, 0x07, 0x9C, 0x1C, 0x05, 
+	0x1C, 0x0C, 0xD1, 0x2C, 0x1C, 0x15, 0x1C, 0x03, 0x3D, 0x10, 0x68, 0x26, 0x68, 0x66, 0x60, 0x1E, 
+	0x68, 0xA6, 0x60, 0x5E, 0x68, 0xE6, 0x60, 0x9E, 0x60, 0xDE, 0x34, 0x10, 0x2D, 0x0F, 0x33, 0x10, 
+	0x1C, 0x13, 0xD8, 0xF2, 0x09, 0x1B, 0x3B, 0x10, 0x01, 0x1B, 0x33, 0x01, 0x18, 0xC9, 0x18, 0xC5, 
+	0x40, 0x1A, 0x23, 0x0F, 0xD9, 0x0F, 0x2A, 0x03, 0x1C, 0x2C, 0x1C, 0x0E, 0xCE, 0x80, 0x1C, 0x13, 
+	0xC4, 0x80, 0x3B, 0x04, 0xD8, 0xFA, 0x2B, 0x03, 0x08, 0x9B, 0x1F, 0x13, 0x00, 0x9B, 0x33, 0x01, 
+	0x40, 0x22, 0x24, 0x03, 0x18, 0xED, 0x18, 0xC9, 0xD0, 0x05, 0x2A, 0x00, 0x5C, 0xCC, 0x23, 0x00, 
+	0x33, 0x01, 0x54, 0xEC, 0xD1, 0xFA, 0x42, 0x93, 0x46, 0xC0, 0xBD, 0xF0, 0x6D, 0x6C, 0x61, 0x50, 
+	0x69, 0x6E, 0x49, 0x20, 0x45, 0x27, 0x00, 0x74, 0x72, 0x65, 0x74, 0x6E, 0x00, 0x4E, 0x20, 0x27, 
+	0x65, 0x6C, 0x2D, 0x4E, 0x00, 0x21, 0x73, 0x73, 0x69, 0x78, 0x45, 0x27, 0x4E, 0x20, 0x27, 0x74, 
+	0x53, 0x20, 0x4E, 0x00, 0x53, 0x00, 0x50, 0x2F, 0x70, 0x65, 0x65, 0x6C, 0x72, 0x2D, 0x53, 0x00, 
+	0x74, 0x65, 0x73, 0x65, 0x53, 0x41, 0x46, 0x00, 0x64, 0x49, 0x00, 0x54, 0x41, 0x00, 0x65, 0x6C, 
+	0x76, 0x69, 0x74, 0x63, 0x70, 0x53, 0x00, 0x65, 0x00, 0x74, 0x63, 0x65, 0x63, 0x61, 0x74, 0x53, 
+	0x52, 0x00, 0x21, 0x6B, 0x41, 0x56, 0x47, 0x45, 0x65, 0x44, 0x00, 0x4C, 0x00, 0x79, 0x61, 0x6C, 
+	0x00, 0x43, 0x53, 0x4F, 0x53, 0x49, 0x4F, 0x4E, 0x6F, 0x54, 0x00, 0x45, 0x20, 0x68, 0x63, 0x75, 
+	0x54, 0x00, 0x6E, 0x4F, 0x68, 0x63, 0x75, 0x6F, 0x46, 0x46, 0x4F, 0x20, 0x5F, 0x54, 0x4C, 0x00, 
+	0x46, 0x4F, 0x52, 0x50, 0x4E, 0x49, 0x4C, 0x49, 0x69, 0x46, 0x00, 0x47, 0x00, 0x64, 0x65, 0x78, 
+	0x66, 0x41, 0x2D, 0x47, 0x00, 0x72, 0x65, 0x74, 0x76, 0x6F, 0x48, 0x3D, 0x12, 0x00, 0x72, 0x6F, 
+	0x0A, 0x0D, 0x07, 0x0E, 0x0C, 0x06, 0x04, 0x12, 0x05, 0x0F, 0x12, 0x09, 0x00, 0x12, 0x08, 0x11, 
+	0x45, 0x02, 0x10, 0x01, 0x4B, 0x00, 0x72, 0x72, 0x52, 0x20, 0x79, 0x65, 0x46, 0x45, 0x52, 0x00, 
+	0x49, 0x4E, 0x49, 0x20, 0x6D, 0x43, 0x00, 0x54, 0x74, 0x6C, 0x65, 0x44, 0x65, 0x52, 0x20, 0x61, 
+	0x65, 0x52, 0x2F, 0x66, 0x52, 0x00, 0x6C, 0x61, 0x4D, 0x00, 0x77, 0x61, 0x49, 0x20, 0x58, 0x41, 
+	0x5F, 0x4D, 0x43, 0x00, 0x54, 0x4C, 0x45, 0x44, 0x41, 0x4D, 0x5F, 0x41, 0x49, 0x4D, 0x5F, 0x58, 
+	0x78, 0x54, 0x00, 0x4E, 0x73, 0x73, 0x65, 0x6C, 0x66, 0x69, 0x44, 0x00, 0x49, 0x44, 0x00, 0x66, 
+	0x4E, 0x2F, 0x46, 0x46, 0x67, 0x69, 0x42, 0x00, 0x61, 0x72, 0x47, 0x20, 0x65, 0x4E, 0x00, 0x64, 
+	0x64, 0x45, 0x2D, 0x67, 0x52, 0x00, 0x65, 0x67, 0x00, 0x00, 0x66, 0x65, 0x00, 0x00, 0x49, 0x2D, 
+	0x01, 0x00, 0x00, 0xFF, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x01, 
+	0x20, 0x00, 0x0D, 0xA0, 0x20, 0x00, 0x02, 0x28, 0x00, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x11, 0x54, 
+	0x00, 0xFF, 0x02, 0x01, 0x04, 0x00, 0x04, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x45, 0x02, 0xFF, 0xFF, 0x07, 0x5A, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/CORE_120307_v2.c for-diff/drivers/input/touchscreen/mms100_ts/CORE_120307_v2.c
--- caf/drivers/input/touchscreen/mms100_ts/CORE_120307_v2.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/CORE_120307_v2.c	2015-10-08 21:26:19.932845000 +0900
@@ -0,0 +1,1425 @@
+static const struct firmware_data melfas_CORE = {
+	.section_name = "CORE",
+	.section_version = 0x45,
+	.start_page_addr = 1,
+	.end_page_addr = 22,
+	.compatible_version = 0x02,
+	.length = 22638,
+	.data = {
+	0xAE, 0xF1, 0x01, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x4F, 0x43, 0x00, 0x00, 0x5B, 0xFF, 0x00, 
+	0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0xF0, 0x03, 0xB5, 0xF7, 0xF0, 0x05, 0xFC, 0xC3, 0x20, 
+	0x00, 0xF8, 0x33, 0xFB, 0xF2, 0xF0, 0x05, 0x33, 0x33, 0x4B, 0x4E, 0x42, 0x5E, 0x78, 0x1B, 0x26, 
+	0x10, 0x41, 0x73, 0x4B, 0x4C, 0x1A, 0xF6, 0x4B, 0x4C, 0x70, 0x1E, 0x3A, 0x01, 0x68, 0x1A, 0x41, 
+	0x5A, 0x42, 0x53, 0x70, 0x1A, 0x4B, 0x4A, 0x78, 0x1C, 0x4B, 0x4A, 0xD1, 0x22, 0x2C, 0x00, 0x25, 
+	0x01, 0x4A, 0x49, 0x70, 0x1D, 0x70, 0x14, 0xFA, 0x52, 0xF0, 0x00, 0x1C, 0x28, 0x4B, 0x47, 0x70, 
+	0x9A, 0x78, 0xDA, 0xF0, 0x05, 0x70, 0x5C, 0xF0, 0x03, 0xFB, 0xD1, 0xF0, 0x01, 0xFB, 0x7F, 0x23, 
+	0x80, 0xFB, 0x17, 0x6C, 0x1A, 0x05, 0xDB, 0x43, 0x8A, 0x21, 0x7F, 0xF0, 0x00, 0x64, 0x1A, 0xF0, 
+	0x02, 0xFD, 0xF5, 0xF0, 0x01, 0xFF, 0x4B, 0xF0, 0x01, 0xFB, 0x0B, 0x4B, 0x3C, 0xFA, 0xA3, 0x68, 
+	0x1B, 0x20, 0x02, 0x4C, 0x3B, 0x47, 0x98, 0x2B, 0x00, 0x78, 0x23, 0x4B, 0x3A, 0xD1, 0x03, 0x2B, 
+	0x00, 0x78, 0x1B, 0x78, 0x23, 0xD0, 0x0F, 0xFC, 0x94, 0xF0, 0x00, 0x4B, 0x2E, 0x78, 0x22, 0xD0, 
+	0x01, 0x2A, 0x00, 0xE0, 0x01, 0x70, 0x1E, 0x70, 0x1A, 0x22, 0x0D, 0x23, 0x00, 0x4A, 0x31, 0x4A, 
+	0x31, 0x70, 0x13, 0x4B, 0x2C, 0x70, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4D, 0x2F, 0xD0, 0x2C, 0x2B, 
+	0x00, 0x78, 0x2B, 0x4C, 0x2A, 0xD0, 0x28, 0x68, 0x23, 0x20, 0x13, 0xF0, 0x00, 0x47, 0x98, 0xF0, 
+	0x03, 0xFA, 0x0F, 0xF0, 0x03, 0xFB, 0x08, 0x4B, 0x29, 0xFA, 0x8B, 0xF0, 0x01, 0x78, 0x18, 0xF0, 
+	0x00, 0xF8, 0xA1, 0x4A, 0x27, 0xFD, 0xC7, 0x70, 0x13, 0x23, 0x01, 0x80, 0x13, 0x4A, 0x26, 0xFF, 
+	0xDE, 0xF0, 0x02, 0x2B, 0x00, 0x78, 0x2B, 0x68, 0x23, 0xD1, 0xFC, 0x47, 0x98, 0x20, 0x14, 0xF9, 
+	0xF6, 0xF0, 0x00, 0xFA, 0xEF, 0xF0, 0x03, 0xFA, 0x72, 0xF0, 0x03, 0x78, 0x18, 0x4B, 0x1C, 0xF8, 
+	0x88, 0xF0, 0x01, 0x70, 0x1E, 0x4B, 0x10, 0xFF, 0x7E, 0xF0, 0x00, 0x78, 0x27, 0x4C, 0x0E, 0x28, 
+	0x13, 0xB2, 0x78, 0xE1, 0x8D, 0xD9, 0x00, 0xF8, 0xD4, 0xF0, 0x05, 0x01, 0x8C, 0x00, 0x74, 0x01, 
+	0x8C, 0x01, 0x78, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 
+	0x8C, 0x01, 0x8C, 0x00, 0x68, 0x01, 0x8C, 0x00, 0x3A, 0x01, 0x8C, 0x00, 0x5F, 0x00, 0x30, 0x01, 
+	0x89, 0x01, 0x8C, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x11, 0x50, 0x20, 
+	0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0xE9, 0x20, 0x00, 0x01, 0xEA, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x01, 0xF8, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x01, 0xE7, 0x20, 0x00, 0x01, 0xE5, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x03, 0x08, 0x22, 0x00, 0x4B, 0xB1, 0xF0, 
+	0x00, 0x70, 0x1A, 0x4B, 0xB0, 0xFE, 0x7D, 0x2B, 0x00, 0x78, 0x1B, 0xE1, 0x55, 0xD0, 0x00, 0x78, 
+	0x23, 0x4C, 0xAE, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0xAD, 0x20, 0x00, 0xFC, 0xB8, 0xF0, 0x03, 0x2B, 
+	0x00, 0x78, 0x23, 0x21, 0x01, 0xD0, 0x06, 0x4A, 0xAA, 0x20, 0x00, 0x90, 0x00, 0x1C, 0x0B, 0xFC, 
+	0x56, 0xF0, 0x03, 0x78, 0x98, 0x4B, 0xA8, 0xFA, 0x78, 0xF0, 0x03, 0x7B, 0xE8, 0x4D, 0xA7, 0xF8, 
+	0x52, 0xF0, 0x03, 0x60, 0x20, 0x4C, 0xA6, 0xF0, 0x03, 0x7C, 0x28, 0x23, 0x11, 0xF8, 0x4D, 0x56, 
+	0xEB, 0x60, 0x60, 0x43, 0x53, 0x7B, 0xEA, 0x4B, 0x9A, 0x60, 0xA3, 0x70, 0x1A, 0x22, 0x00, 0x78, 
+	0x1B, 0x4B, 0xA0, 0x78, 0x18, 0x4B, 0xA0, 0xF8, 0x14, 0xF0, 0x01, 0x4D, 0x9D, 0x4B, 0x95, 0x70, 
+	0x1C, 0x24, 0x00, 0xF0, 0x00, 0x78, 0x2B, 0xF0, 0x03, 0xFD, 0x29, 0xF0, 0x00, 0xFF, 0x8B, 0x70, 
+	0x2C, 0xFD, 0x25, 0x24, 0x01, 0x4B, 0x8F, 0xF0, 0x00, 0x70, 0x1C, 0x4B, 0x97, 0xFC, 0x9B, 0x05, 
+	0x9A, 0x68, 0x1B, 0x4A, 0x96, 0xD5, 0x13, 0x20, 0x04, 0x4B, 0x96, 0x4B, 0x96, 0x60, 0x1A, 0x43, 
+	0x01, 0x68, 0x19, 0x68, 0x19, 0x60, 0x19, 0x43, 0x81, 0x20, 0x02, 0x68, 0x19, 0x60, 0x19, 0x60, 
+	0x1C, 0x43, 0x0C, 0x21, 0x00, 0x4B, 0x91, 0x4B, 0x91, 0x60, 0x19, 0x4C, 0x91, 0x60, 0x1A, 0x68, 
+	0x23, 0x20, 0x03, 0xF0, 0x03, 0x47, 0x98, 0x68, 0x23, 0xF8, 0x3F, 0x47, 0x98, 0x20, 0x05, 0xFF, 
+	0xE4, 0xF0, 0x02, 0x4D, 0x8D, 0x4C, 0x8C, 0x42, 0x40, 0x20, 0x01, 0x1C, 0x2A, 0x1C, 0x21, 0xFC, 
+	0x4C, 0xF0, 0x04, 0x78, 0x1B, 0x4B, 0x79, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x88, 0x20, 0x0C, 0xFC, 
+	0x4E, 0xF0, 0x03, 0x68, 0x23, 0x4A, 0x87, 0x68, 0x2B, 0x80, 0x13, 0x4B, 0x73, 0x80, 0x53, 0x2B, 
+	0x00, 0x78, 0x1B, 0x23, 0x01, 0xD0, 0x06, 0x93, 0x00, 0x21, 0x02, 0x1C, 0x0B, 0x20, 0x0C, 0xFB, 
+	0xE6, 0xF0, 0x03, 0x20, 0x06, 0x4C, 0x7B, 0x47, 0x98, 0x68, 0x23, 0xFF, 0xF4, 0xF0, 0x03, 0xF9, 
+	0x64, 0xF0, 0x04, 0xFB, 0x98, 0xF0, 0x04, 0xF9, 0x62, 0xF0, 0x00, 0xFD, 0x06, 0xF0, 0x04, 0xFE, 
+	0x7E, 0xF0, 0x04, 0x78, 0x1B, 0x4B, 0x78, 0xD1, 0x2A, 0x2B, 0x00, 0x20, 0x07, 0x68, 0x23, 0xF0, 
+	0x01, 0x47, 0x98, 0x68, 0x23, 0xFA, 0x51, 0x47, 0x98, 0x20, 0x08, 0xFF, 0xB2, 0xF0, 0x02, 0xFF, 
+	0xBA, 0xF0, 0x02, 0x20, 0x09, 0x68, 0x23, 0xF0, 0x01, 0x47, 0x98, 0xF0, 0x01, 0xFA, 0x69, 0x68, 
+	0x23, 0xFB, 0xD1, 0x47, 0x98, 0x20, 0x0A, 0xFC, 0x6E, 0xF0, 0x01, 0xFB, 0x44, 0xF0, 0x02, 0x20, 
+	0x0B, 0x68, 0x23, 0xF0, 0x01, 0x47, 0x98, 0xF0, 0x01, 0xFE, 0xB8, 0x68, 0x23, 0xFF, 0xD7, 0x47, 
+	0x98, 0x20, 0x0E, 0xF8, 0x84, 0xF0, 0x02, 0xF9, 0xF2, 0xF0, 0x02, 0x20, 0x10, 0x68, 0x23, 0xF0, 
+	0x00, 0x47, 0x98, 0x4B, 0x5B, 0xF9, 0x81, 0x68, 0x1B, 0x20, 0x0F, 0x4B, 0x5E, 0x47, 0x98, 0x2B, 
+	0x00, 0x78, 0x1B, 0xF0, 0x02, 0xD1, 0x3C, 0x4B, 0x5C, 0xFA, 0x4F, 0x4B, 0x5C, 0x68, 0x1A, 0xD1, 
+	0x04, 0x2A, 0x00, 0x68, 0x09, 0x49, 0x5B, 0xDD, 0x00, 0x29, 0x00, 0x4A, 0x47, 0x70, 0x1A, 0x32, 
+	0x32, 0x78, 0x19, 0x42, 0x91, 0x78, 0x12, 0x22, 0x00, 0xD3, 0x01, 0x78, 0x1B, 0x70, 0x1A, 0xD1, 
+	0x21, 0x2B, 0x00, 0x4C, 0x51, 0x4B, 0x53, 0x2B, 0x00, 0x68, 0x1B, 0x68, 0x20, 0xDD, 0x09, 0xD1, 
+	0x06, 0x28, 0x00, 0x78, 0x1B, 0x4B, 0x39, 0xD0, 0x02, 0x2B, 0x00, 0xF0, 0x03, 0x49, 0x4E, 0x4B, 
+	0x4E, 0xFB, 0xCF, 0x47, 0x98, 0x68, 0x1B, 0x2B, 0x00, 0x68, 0x23, 0x4B, 0x49, 0xDD, 0x0A, 0x28, 
+	0x00, 0x68, 0x18, 0x4B, 0x31, 0xD1, 0x06, 0x2B, 0x00, 0x78, 0x1B, 0x49, 0x48, 0xD0, 0x02, 0xFB, 
+	0xBE, 0xF0, 0x03, 0xFA, 0x72, 0xF0, 0x02, 0x78, 0x1A, 0x4B, 0x41, 0x70, 0x1A, 0x32, 0x01, 0x68, 
+	0x1B, 0x4B, 0x32, 0xD5, 0x23, 0x05, 0x9A, 0x68, 0x18, 0x4B, 0x34, 0x79, 0x1A, 0x4B, 0x2A, 0x4B, 
+	0x2F, 0x78, 0x19, 0x1C, 0x53, 0x1A, 0x18, 0xF0, 0x04, 0x40, 0x98, 0x4C, 0x23, 0xFF, 0x8D, 0x78, 
+	0x23, 0x4D, 0x2F, 0x2B, 0x00, 0x60, 0x28, 0x20, 0x00, 0xD0, 0x03, 0xF0, 0x03, 0x49, 0x39, 0x78, 
+	0x23, 0xFB, 0x9F, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x01, 0x20, 0x00, 0x23, 0x04, 0x1C, 0x2A, 0xF0, 
+	0x03, 0x90, 0x00, 0xF8, 0xB2, 0xAE, 0xF1, 0x02, 0x4B, 0x24, 0xFB, 0x3D, 0x68, 0x1A, 0x21, 0x01, 
+	0x60, 0x1A, 0x43, 0x8A, 0x05, 0xDB, 0x23, 0x80, 0x21, 0x01, 0x6C, 0x9A, 0x64, 0x9A, 0x43, 0x0A, 
+	0xFC, 0x1E, 0xF0, 0x00, 0x20, 0x00, 0x4B, 0x2D, 0xF0, 0x00, 0x56, 0x18, 0xE0, 0x17, 0xFE, 0x5D, 
+	0x78, 0x1B, 0x4B, 0x0F, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x29, 0x20, 0x05, 0xFB, 0x7A, 0xF0, 0x03, 
+	0xF0, 0x00, 0x20, 0x01, 0x20, 0x00, 0xFE, 0xF9, 0xFE, 0xF6, 0xF0, 0x00, 0x70, 0x23, 0x23, 0x13, 
+	0xF0, 0x00, 0xE0, 0x06, 0xE0, 0x03, 0xFC, 0x0D, 0x20, 0x11, 0x4B, 0x13, 0x47, 0x98, 0x68, 0x1B, 
+	0x70, 0x1F, 0x4B, 0x20, 0x46, 0xC0, 0xE5, 0xEB, 0x20, 0x00, 0x01, 0xEA, 0x20, 0x00, 0x01, 0xE0, 
+	0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x34, 0x20, 0x00, 0x0A, 0xAC, 0x20, 0x00, 0x0A, 0xAA, 
+	0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0xFC, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x00, 0x58, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 0x10, 
+	0xE0, 0x00, 0xE0, 0x18, 0x20, 0x00, 0x01, 0xFC, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x11, 0x34, 
+	0x20, 0x00, 0x11, 0x38, 0x00, 0x00, 0x59, 0x38, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x11, 0x48, 
+	0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0xCA, 0x20, 0x00, 0x0D, 0x9C, 0x00, 0x00, 0x59, 0x3E, 
+	0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x59, 0x47, 0x00, 0x00, 0x59, 0x51, 0x20, 0x00, 0x01, 0xB3, 
+	0x00, 0x00, 0x59, 0x5E, 0x20, 0x00, 0x00, 0x56, 0xF0, 0x01, 0xB5, 0x08, 0xF0, 0x01, 0xFD, 0x99, 
+	0x4B, 0x03, 0xFD, 0xB3, 0x47, 0x98, 0x68, 0x1B, 0xF9, 0xD2, 0xF0, 0x02, 0x46, 0xC0, 0xBD, 0x08, 
+	0x20, 0x00, 0x02, 0x00, 0xF0, 0x04, 0xB5, 0x10, 0x4C, 0x05, 0xFD, 0xEF, 0x68, 0x23, 0x20, 0x00, 
+	0xF0, 0x04, 0x47, 0x98, 0x68, 0x23, 0xFE, 0x19, 0x47, 0x98, 0x20, 0x01, 0x46, 0xC0, 0xBD, 0x10, 
+	0x20, 0x00, 0x01, 0xF8, 0x4D, 0x17, 0xB5, 0x7F, 0x1B, 0x5B, 0x4B, 0x17, 0x4B, 0x17, 0x93, 0x03, 
+	0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x06, 0xAA, 0x03, 0x21, 0x01, 0x90, 0x00, 0x23, 0x04, 
+	0xFA, 0xA0, 0xF0, 0x03, 0xE0, 0x18, 0x4E, 0x12, 0xDD, 0x00, 0x2C, 0x14, 0xB2, 0xE1, 0x24, 0x14, 
+	0xE0, 0x03, 0x1C, 0x08, 0xB2, 0xC0, 0x38, 0x01, 0x54, 0x33, 0x5C, 0x2B, 0xD1, 0xF9, 0x28, 0x00, 
+	0x78, 0x1B, 0x4B, 0x0A, 0xD0, 0x04, 0x2B, 0x00, 0x23, 0x01, 0x4A, 0x09, 0xF0, 0x03, 0x90, 0x00, 
+	0x9B, 0x03, 0xFA, 0x89, 0x1B, 0x1B, 0x19, 0x2D, 0x9C, 0x03, 0x93, 0x03, 0xD1, 0xE3, 0x2C, 0x00, 
+	0x46, 0xC0, 0xBD, 0x7F, 0x20, 0x00, 0x1E, 0x0C, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x01, 0xEB, 
+	0x20, 0x00, 0x11, 0x54, 0x4B, 0x1E, 0xB5, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4C, 0x1D, 0xD0, 0x37, 
+	0x70, 0x23, 0x23, 0x00, 0x20, 0x04, 0x4B, 0x1C, 0x47, 0x98, 0x68, 0x1B, 0x4A, 0x1C, 0x4B, 0x1B, 
+	0x68, 0x1B, 0x68, 0x59, 0x80, 0x53, 0x80, 0x11, 0x78, 0x1B, 0x4B, 0x1A, 0xD0, 0x06, 0x2B, 0x00, 
+	0x21, 0x02, 0x23, 0x01, 0x20, 0x18, 0x93, 0x00, 0xF0, 0x03, 0x1C, 0x0B, 0x78, 0x23, 0xFA, 0x5B, 
+	0x2B, 0x00, 0x4C, 0x15, 0x4B, 0x13, 0xD0, 0x1A, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x03, 
+	0xF0, 0x03, 0x49, 0x12, 0x4A, 0x12, 0xFA, 0xA7, 0x70, 0x13, 0x23, 0x01, 0x2A, 0x02, 0x68, 0x22, 
+	0x18, 0xD2, 0xDC, 0x04, 0x4A, 0x0F, 0x60, 0x22, 0xE0, 0x08, 0x70, 0x13, 0xFF, 0x74, 0xF7, 0xFF, 
+	0x22, 0x0D, 0x4B, 0x0D, 0x23, 0x00, 0x70, 0x1A, 0xE0, 0x00, 0x60, 0x23, 0xBD, 0x13, 0x60, 0x23, 
+	0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x11, 0x3D, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x01, 0x70, 
+	0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0x84, 0x00, 0x00, 0x58, 0xD0, 
+	0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0xBA, 0xB5, 0xF0, 
+	0x33, 0x04, 0xB0, 0x85, 0x24, 0x00, 0x7F, 0xDB, 0x22, 0x0A, 0x49, 0xB8, 0x3B, 0x01, 0xE0, 0x09, 
+	0x1C, 0x10, 0xB2, 0xDB, 0x18, 0x08, 0x43, 0x58, 0x5F, 0x40, 0x25, 0x3C, 0xD0, 0x00, 0x28, 0x00, 
+	0x2B, 0x00, 0x24, 0x01, 0x4B, 0xB2, 0xD1, 0xF3, 0x78, 0x1B, 0x4A, 0xB2, 0x3B, 0x01, 0xE0, 0x07, 
+	0x1D, 0x19, 0xB2, 0xDB, 0x5E, 0x89, 0x00, 0x49, 0xD0, 0x00, 0x29, 0x00, 0x2B, 0x00, 0x24, 0x01, 
+	0x4A, 0xAD, 0xD1, 0xF5, 0xD1, 0x04, 0x2C, 0x00, 0x49, 0xAC, 0x68, 0x13, 0xD0, 0x01, 0x42, 0x8B, 
+	0x60, 0x13, 0x33, 0x01, 0x22, 0x00, 0x4B, 0xAA, 0x4B, 0xA4, 0x70, 0x1A, 0x4B, 0xA2, 0x68, 0x1A, 
+	0xD1, 0x7C, 0x2A, 0x00, 0x68, 0x12, 0x4A, 0xA3, 0xD1, 0x78, 0x2A, 0x00, 0x32, 0x34, 0x1C, 0x1A, 
+	0x28, 0x00, 0x78, 0x10, 0x4A, 0xA3, 0xD1, 0x41, 0x2A, 0x01, 0x78, 0x12, 0x4B, 0xA2, 0xD1, 0x17, 
+	0x4B, 0xA2, 0x70, 0x18, 0x4B, 0xA2, 0x70, 0x1A, 0x4B, 0xA2, 0x70, 0x18, 0x2B, 0x00, 0x78, 0x1B, 
+	0x49, 0xA1, 0xD0, 0x02, 0xFA, 0x2E, 0xF0, 0x03, 0x22, 0x01, 0x4B, 0x99, 0xF0, 0x01, 0x70, 0x1A, 
+	0xF0, 0x01, 0xFC, 0x9F, 0x4B, 0x97, 0xFC, 0xB9, 0x70, 0x1A, 0x22, 0x00, 0x4A, 0x9B, 0xE1, 0x67, 
+	0x78, 0x1B, 0x33, 0x3C, 0x42, 0x9A, 0x68, 0x12, 0x4B, 0x96, 0xDB, 0x1F, 0x2B, 0x00, 0x78, 0x1B, 
+	0x49, 0x97, 0xD0, 0x02, 0xFA, 0x16, 0xF0, 0x03, 0x49, 0x87, 0x4B, 0x96, 0x31, 0x3D, 0x68, 0x1A, 
+	0x60, 0x1A, 0x32, 0x01, 0x42, 0x8A, 0x78, 0x09, 0x20, 0x00, 0xDB, 0x0F, 0x4B, 0x8A, 0x60, 0x18, 
+	0x4B, 0x8A, 0x70, 0x18, 0x4B, 0x8B, 0x70, 0x18, 0x42, 0x83, 0x78, 0x1B, 0x49, 0x8E, 0xD0, 0x02, 
+	0xFA, 0x00, 0xF0, 0x03, 0x22, 0x02, 0x4B, 0x82, 0x4B, 0x85, 0x70, 0x1A, 0x21, 0x00, 0x4A, 0x8B, 
+	0x68, 0x10, 0x70, 0x19, 0x60, 0x19, 0x4B, 0x85, 0x42, 0x88, 0x1C, 0x13, 0x38, 0x01, 0xDD, 0x0E, 
+	0x42, 0x8C, 0x60, 0x10, 0x60, 0x11, 0xD0, 0x00, 0x2A, 0x01, 0x68, 0x1A, 0xE1, 0x18, 0xD0, 0x00, 
+	0x60, 0x1A, 0x22, 0x00, 0x22, 0x03, 0x4B, 0x76, 0xE1, 0x28, 0x70, 0x1A, 0x49, 0x81, 0x4B, 0x80, 
+	0x8F, 0xDB, 0x33, 0x04, 0xD1, 0x00, 0x42, 0x8B, 0x49, 0x7F, 0xE1, 0x0B, 0x42, 0x99, 0x68, 0x09, 
+	0xE1, 0x06, 0xDA, 0x00, 0x48, 0x6C, 0x4B, 0x68, 0x31, 0x3E, 0x1C, 0x19, 0x68, 0x00, 0x78, 0x09, 
+	0xDA, 0x00, 0x42, 0x88, 0x33, 0x3F, 0xE0, 0xFD, 0x60, 0x13, 0x78, 0x1B, 0x33, 0x04, 0xE0, 0xF9, 
+	0x23, 0x00, 0x7F, 0xD8, 0x49, 0x75, 0x1C, 0x1A, 0x38, 0x01, 0xE0, 0x31, 0x24, 0x0A, 0xB2, 0xC0, 
+	0x4F, 0x5E, 0x43, 0x44, 0x26, 0x3C, 0x19, 0x3D, 0x2D, 0x00, 0x5F, 0xAD, 0x19, 0x0C, 0xDD, 0x27, 
+	0x5F, 0xE4, 0x27, 0x3C, 0xDD, 0x22, 0x2C, 0x00, 0x19, 0x0D, 0x00, 0x44, 0x4D, 0x57, 0x88, 0xAF, 
+	0x19, 0x2C, 0xB2, 0x3E, 0xB2, 0x25, 0x88, 0xA4, 0xD4, 0x02, 0x1B, 0x76, 0xB2, 0xA4, 0x1B, 0x3C, 
+	0x1B, 0xE4, 0xE0, 0x01, 0x1C, 0x05, 0xB2, 0xA4, 0x4F, 0x50, 0x4E, 0x64, 0x00, 0x6D, 0x35, 0x10, 
+	0x5B, 0xAC, 0x18, 0xA2, 0xB2, 0x27, 0x5B, 0xED, 0xB2, 0x92, 0xB2, 0x2E, 0xD4, 0x02, 0x1B, 0xBF, 
+	0xB2, 0xA4, 0x1B, 0x64, 0x1B, 0x2C, 0xE0, 0x01, 0x21, 0xFF, 0xAE, 0xF1, 0x03, 0x18, 0xE3, 0xB2, 
+	0xA4, 0x28, 0x00, 0xB2, 0x9B, 0x49, 0x56, 0xD1, 0xCB, 0x49, 0x4D, 0x60, 0x08, 0x49, 0x43, 0x78, 
+	0x0C, 0xD0, 0x40, 0x2C, 0x00, 0x78, 0x0B, 0x31, 0x34, 0xD0, 0x00, 0x2B, 0x00, 0x4B, 0x4A, 0xE0, 
+	0xB3, 0x2B, 0x00, 0x78, 0x1B, 0x49, 0x53, 0xD0, 0x02, 0xF9, 0x7E, 0xF0, 0x03, 0x4A, 0x52, 0x4C, 
+	0x4F, 0x80, 0x13, 0x68, 0x23, 0x68, 0x1B, 0x4B, 0x51, 0x4B, 0x43, 0x80, 0x53, 0x2B, 0x00, 0x78, 
+	0x1B, 0x23, 0x01, 0xD0, 0x06, 0x93, 0x00, 0x21, 0x02, 0x1C, 0x0B, 0x20, 0x00, 0xF9, 0x14, 0xF0, 
+	0x03, 0x68, 0x20, 0x49, 0x32, 0x4B, 0x3B, 0x8F, 0x4A, 0xDA, 0x14, 0x42, 0x90, 0x48, 0x47, 0x4A, 
+	0x41, 0x78, 0x12, 0x32, 0x45, 0x42, 0x90, 0x68, 0x00, 0x78, 0x1B, 0xDA, 0x0D, 0xD0, 0x00, 0x2B, 
+	0x00, 0x4B, 0x37, 0xE0, 0x89, 0x68, 0x1A, 0x31, 0x3C, 0x42, 0x8A, 0x78, 0x09, 0xE0, 0x82, 0xDB, 
+	0x00, 0x60, 0x1A, 0x32, 0x01, 0x22, 0x01, 0xE0, 0x7F, 0x4A, 0x31, 0x70, 0x1A, 0x60, 0x13, 0x23, 
+	0x00, 0x60, 0x13, 0x4A, 0x31, 0x1C, 0x08, 0xE0, 0x77, 0x78, 0x00, 0x30, 0x34, 0xD1, 0x72, 0x28, 
+	0x00, 0x8F, 0x09, 0x48, 0x32, 0x42, 0x88, 0x68, 0x00, 0x49, 0x2E, 0xDB, 0x09, 0x31, 0x45, 0x48, 
+	0x33, 0x68, 0x00, 0x78, 0x09, 0xDB, 0x02, 0x42, 0x88, 0x20, 0x01, 0x49, 0x22, 0x49, 0x1F, 0x70, 
+	0x08, 0x29, 0x00, 0x78, 0x09, 0x49, 0x15, 0xD1, 0x08, 0x49, 0x27, 0x8F, 0x08, 0xD0, 0x5A, 0x42, 
+	0x88, 0x78, 0x09, 0x49, 0x1C, 0xD0, 0x56, 0x29, 0x00, 0x68, 0x09, 0x49, 0x11, 0xDC, 0x05, 0x29, 
+	0x01, 0x8E, 0xC9, 0x49, 0x0E, 0xD8, 0x01, 0x42, 0x8A, 0xD9, 0x49, 0x42, 0x8B, 0x20, 0x00, 0x4B, 
+	0x13, 0x4B, 0x13, 0x70, 0x18, 0x70, 0x1A, 0x22, 0x01, 0x70, 0x18, 0x4B, 0x12, 0x78, 0x1B, 0x4B, 
+	0x12, 0xD0, 0x02, 0x42, 0x83, 0xF0, 0x03, 0x49, 0x11, 0x4B, 0x0A, 0xF9, 0x0F, 0x70, 0x1A, 0x22, 
+	0x01, 0xFB, 0x80, 0xF0, 0x01, 0xFB, 0x9A, 0xF0, 0x01, 0x46, 0xC0, 0xE0, 0x35, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x01, 
+	0xC8, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x01, 0xB3, 0x20, 0x00, 0x01, 0xB4, 0x20, 0x00, 0x01, 
+	0xDC, 0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x01, 0xD4, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x58, 
+	0xDA, 0x20, 0x00, 0x01, 0xD8, 0x00, 0x00, 0x58, 0xE4, 0x20, 0x00, 0x01, 0xD0, 0x00, 0x00, 0x58, 
+	0xEC, 0x20, 0x00, 0x01, 0xCC, 0x20, 0x00, 0x0D, 0x48, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x00, 0x11, 
+	0x34, 0x20, 0x00, 0x03, 0x20, 0x00, 0x00, 0x58, 0xF5, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x11, 
+	0x38, 0x22, 0x01, 0x4B, 0x0D, 0x4B, 0x0D, 0x70, 0x1A, 0x78, 0x1B, 0x33, 0x34, 0xD0, 0x10, 0x2B, 
+	0x00, 0x78, 0x1A, 0x4B, 0x0B, 0xD0, 0x0C, 0x2A, 0x00, 0x21, 0x00, 0x4A, 0x0A, 0x29, 0x03, 0x56, 
+	0x51, 0x49, 0x09, 0xD0, 0x07, 0x42, 0x48, 0x78, 0x09, 0x31, 0x01, 0x41, 0x41, 0x22, 0x00, 0x70, 
+	0x11, 0xB0, 0x05, 0x70, 0x1A, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x01, 0xB4, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x01, 0xDC, 0x20, 0x00, 0x01, 0xB3, 0x20, 0x00, 0x01, 0xDD, 0x4B, 0x54, 0xB5, 
+	0x10, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x53, 0xD0, 0x0A, 0x47, 0x98, 0x68, 0x1B, 0xFB, 0x1A, 0xF0, 
+	0x01, 0xFB, 0x34, 0xF0, 0x01, 0xFF, 0x56, 0xF0, 0x01, 0xFB, 0x90, 0xF0, 0x02, 0x21, 0x02, 0x4B, 
+	0x4E, 0x43, 0x8A, 0x68, 0x1A, 0x68, 0x19, 0x60, 0x1A, 0x05, 0xD2, 0x22, 0x80, 0x60, 0x91, 0x68, 
+	0x90, 0x20, 0x08, 0x68, 0x19, 0x60, 0x19, 0x43, 0x81, 0x68, 0x90, 0x68, 0x19, 0x68, 0x19, 0x60, 
+	0x91, 0x43, 0x81, 0x20, 0x04, 0x68, 0x1B, 0x60, 0x19, 0x60, 0x93, 0x68, 0x91, 0x78, 0x18, 0x4B, 
+	0x40, 0x78, 0x1B, 0x4B, 0x42, 0xD0, 0x32, 0x28, 0x00, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x40, 0x20, 
+	0x00, 0xF8, 0x7A, 0xF0, 0x03, 0x22, 0x80, 0x4B, 0x3F, 0x00, 0x52, 0x68, 0x19, 0x60, 0x1A, 0x43, 
+	0x0A, 0x23, 0xA0, 0x68, 0x1A, 0x68, 0x99, 0x05, 0xDB, 0x4B, 0x37, 0x60, 0x9A, 0x68, 0x19, 0x4A, 
+	0x3A, 0x60, 0x1A, 0x40, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x68, 0x99, 0x05, 0xDB, 0x4A, 0x37, 0x60, 
+	0x9A, 0x70, 0x11, 0x21, 0x01, 0x22, 0x80, 0x68, 0x19, 0x43, 0x0A, 0x04, 0x52, 0x46, 0xC0, 0x60, 
+	0x1A, 0x46, 0xC0, 0x46, 0xC0, 0xB6, 0x62, 0x46, 0xC0, 0x68, 0x19, 0x4A, 0x31, 0x60, 0x1A, 0x40, 
+	0x0A, 0x8F, 0x6F, 0xF3, 0xBF, 0x00, 0xC0, 0x20, 0xFA, 0xFC, 0x6E, 0xF0, 0x02, 0x2B, 0x00, 0xE0, 
+	0x11, 0x49, 0x2C, 0xD0, 0x02, 0xF8, 0x48, 0xF0, 0x03, 0xF0, 0x02, 0x48, 0x2B, 0x4B, 0x2B, 0xFC, 
+	0x65, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2A, 0xD1, 0x05, 0x2B, 0x00, 0x78, 0x1B, 0xF0, 0x02, 0xD1, 
+	0x01, 0x4B, 0x1D, 0xFE, 0x59, 0x68, 0x1A, 0x21, 0x02, 0x60, 0x1A, 0x43, 0x0A, 0x22, 0x80, 0x68, 
+	0x19, 0x68, 0x90, 0x05, 0xD2, 0x49, 0x23, 0x60, 0x91, 0x7F, 0xC8, 0x31, 0x01, 0x28, 0x00, 0x21, 
+	0x08, 0x68, 0x18, 0xD0, 0x06, 0x60, 0x19, 0x43, 0x01, 0x68, 0x90, 0x68, 0x19, 0xE0, 0x05, 0x60, 
+	0x91, 0x43, 0x88, 0x68, 0x18, 0x68, 0x19, 0x60, 0x18, 0x60, 0x91, 0x68, 0x90, 0x21, 0x04, 0x68, 
+	0x1A, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x20, 0xFA, 0x05, 0xDB, 0x00, 0xC0, 0x68, 
+	0x99, 0xF0, 0x02, 0x60, 0x9A, 0x4B, 0x06, 0xFC, 0x31, 0x2B, 0x00, 0x78, 0x1B, 0x4C, 0x12, 0xD0, 
+	0x06, 0x68, 0x23, 0x20, 0x0D, 0x68, 0x23, 0x47, 0x98, 0x47, 0x98, 0x20, 0x12, 0x46, 0xC0, 0xBD, 
+	0x10, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x00, 0x68, 0x20, 0x00, 0x00, 0x14, 0x20, 0x00, 0x01, 
+	0xEB, 0x00, 0x00, 0x58, 0xFB, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0xFF, 0xFE, 0xFF, 0x20, 0x00, 0x00, 
+	0x2C, 0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x59, 0x01, 0x00, 0x0F, 0x42, 0x40, 0x20, 0x00, 0x01, 
+	0xE5, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xF8, 0x4B, 0x31, 0xB5, 
+	0x10, 0x78, 0x19, 0x24, 0x02, 0xB2, 0x4A, 0x4B, 0x30, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2F, 0xD0, 
+	0x25, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2E, 0xD1, 0x21, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2D, 0xD1, 
+	0x1D, 0xD0, 0x07, 0x42, 0xA2, 0x7B, 0x80, 0x48, 0x2C, 0xD1, 0x03, 0x28, 0x00, 0x68, 0x00, 0x48, 
+	0x2B, 0xD0, 0x03, 0x28, 0x00, 0x60, 0x19, 0x21, 0x00, 0xE0, 0x0E, 0x24, 0x01, 0x68, 0x18, 0x4A, 
+	0x28, 0x42, 0x90, 0x68, 0x92, 0x30, 0x01, 0xDA, 0x01, 0x29, 0x00, 0x60, 0x18, 0x4B, 0x21, 0xD0, 
+	0x36, 0x68, 0x1B, 0x24, 0x00, 0xDA, 0x16, 0x42, 0x93, 0xB2, 0x63, 0xE0, 0x30, 0xD0, 0x2D, 0x42, 
+	0x93, 0xD0, 0x1D, 0x2B, 0x01, 0xD0, 0x02, 0x2B, 0x02, 0xD0, 0x0C, 0x2B, 0x00, 0x4B, 0x1D, 0xE0, 
+	0x24, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x03, 0xF0, 0x02, 0x49, 0x1B, 0x20, 0x00, 0xFF, 
+	0xA5, 0xFB, 0x78, 0xF0, 0x02, 0x4B, 0x17, 0xE0, 0x18, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 
+	0x03, 0xF0, 0x02, 0x49, 0x16, 0x4B, 0x12, 0xFF, 0x99, 0xF0, 0x02, 0x68, 0x58, 0x31, 0x77, 0xAE, 
+	0xF1, 0x04, 0xE0, 0x0B, 0xFB, 0x6B, 0x78, 0x1B, 0x4B, 0x10, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x11, 
+	0x20, 0x00, 0xFF, 0x8C, 0xF0, 0x02, 0x68, 0x18, 0x4B, 0x0B, 0xFB, 0x5E, 0xF0, 0x02, 0x70, 0x1C, 
+	0x4B, 0x02, 0xFB, 0x4C, 0xF0, 0x02, 0x46, 0xC0, 0xBD, 0x10, 0x20, 0x00, 0x00, 0x3C, 0x20, 0x00, 
+	0x03, 0x1C, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x01, 0xE2, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 
+	0x01, 0x70, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x02, 0xFC, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 
+	0x59, 0x09, 0x00, 0x00, 0x59, 0x0E, 0x00, 0x00, 0x59, 0x13, 0xF0, 0x02, 0xB5, 0x08, 0xBD, 0x08, 
+	0xFB, 0x5F, 0xF0, 0x02, 0xB5, 0x08, 0xBD, 0x08, 0xFB, 0x4D, 0xF0, 0x02, 0xB5, 0x08, 0x23, 0x80, 
+	0xFA, 0xE5, 0x6C, 0x9A, 0x05, 0xDB, 0x43, 0x0A, 0x21, 0x01, 0xF7, 0xFF, 0x64, 0x9A, 0xBD, 0x08, 
+	0xFF, 0xF1, 0xB0, 0x87, 0xB5, 0xF0, 0xFF, 0xF0, 0xF7, 0xFF, 0x4C, 0x79, 0x4A, 0x78, 0x78, 0x15, 
+	0x78, 0x53, 0xE0, 0x10, 0x48, 0x78, 0xB2, 0xDB, 0x3B, 0x01, 0x46, 0x67, 0x1C, 0x9A, 0x01, 0x79, 
+	0x18, 0xB2, 0x5B, 0x12, 0x00, 0x52, 0x00, 0x4F, 0x18, 0xC9, 0x4A, 0x73, 0x52, 0x3A, 0x54, 0x8F, 
+	0x27, 0x00, 0xD1, 0xEF, 0x2B, 0x00, 0x1E, 0x5A, 0x46, 0x63, 0x2B, 0x00, 0xB2, 0xD2, 0x1C, 0x56, 
+	0xD0, 0x04, 0x01, 0xB6, 0x1C, 0x2B, 0xE7, 0xF3, 0x46, 0x94, 0x4C, 0x6D, 0x4B, 0x6C, 0x48, 0x6D, 
+	0x78, 0x1B, 0x4A, 0x6D, 0x49, 0x67, 0x3B, 0x01, 0xE0, 0x0E, 0x5C, 0xE5, 0xB2, 0xDB, 0x35, 0x01, 
+	0x5C, 0xC6, 0x01, 0xAD, 0x36, 0x02, 0x00, 0x6D, 0x19, 0xAD, 0x00, 0x5D, 0x5A, 0x6E, 0x4D, 0x67, 
+	0x52, 0xAE, 0x54, 0xEE, 0x26, 0x00, 0xD1, 0xEE, 0x2B, 0x00, 0x95, 0x03, 0x25, 0x65, 0xE0, 0x66, 
+	0x4C, 0x5B, 0xFF, 0xB2, 0xF7, 0xFF, 0x78, 0x63, 0x78, 0x26, 0xE0, 0x2D, 0x96, 0x05, 0xB2, 0xDB, 
+	0x3B, 0x01, 0x18, 0xF0, 0x4F, 0x58, 0x00, 0x40, 0x9D, 0x04, 0x5B, 0xC0, 0x1C, 0x9A, 0x4F, 0x54, 
+	0x18, 0xAD, 0x5B, 0xEF, 0x00, 0x6D, 0xD4, 0x04, 0x1B, 0xC7, 0x5B, 0xED, 0x4F, 0x51, 0x95, 0x02, 
+	0x1B, 0x45, 0x4F, 0x4F, 0xE0, 0x03, 0x1A, 0x2D, 0x5B, 0xED, 0x98, 0x04, 0x95, 0x02, 0x48, 0x4C, 
+	0x18, 0x87, 0x5B, 0xC0, 0x00, 0x7F, 0x46, 0x84, 0x4F, 0x4B, 0x00, 0x42, 0x18, 0xF0, 0x46, 0x62, 
+	0x1C, 0x15, 0x4D, 0x49, 0x53, 0xEA, 0x9D, 0x02, 0x5C, 0x2F, 0xDA, 0x00, 0x42, 0xBD, 0x4F, 0x46, 
+	0x1C, 0x3D, 0x2B, 0x00, 0x54, 0x3D, 0x1C, 0x0B, 0xD1, 0xD2, 0xB2, 0xC9, 0x1E, 0x59, 0xD0, 0x05, 
+	0x2B, 0x00, 0x01, 0x80, 0x1C, 0x48, 0x01, 0x4E, 0x9B, 0x05, 0xE7, 0xF2, 0x90, 0x04, 0x4A, 0x3C, 
+	0x4B, 0x3F, 0xE0, 0x22, 0x78, 0x1B, 0x3B, 0x01, 0x4D, 0x3E, 0x4F, 0x3E, 0xB2, 0xDB, 0x48, 0x3E, 
+	0x5C, 0xEE, 0x00, 0x59, 0x5C, 0xFD, 0x5A, 0x09, 0x36, 0x01, 0x01, 0xB0, 0x35, 0x02, 0x00, 0x40, 
+	0x19, 0x40, 0x5A, 0x80, 0x5A, 0x87, 0xD4, 0x01, 0x1B, 0xCF, 0xE0, 0x00, 0x1A, 0x09, 0x01, 0xB6, 
+	0x1A, 0x41, 0x48, 0x2F, 0x19, 0x75, 0x5B, 0x46, 0x00, 0x6D, 0x00, 0x5D, 0x48, 0x33, 0x48, 0x33, 
+	0x52, 0x2E, 0x42, 0xA9, 0x5C, 0xC5, 0x1C, 0x29, 0xDA, 0x00, 0x2B, 0x00, 0x54, 0xC1, 0x9B, 0x03, 
+	0xD1, 0xDA, 0xB2, 0xDB, 0x3B, 0x01, 0x2B, 0x00, 0x93, 0x03, 0x78, 0x61, 0xD1, 0x92, 0x4A, 0x24, 
+	0x78, 0x24, 0xE0, 0x1E, 0x94, 0x04, 0xB2, 0xDB, 0x3B, 0x01, 0x18, 0xED, 0x01, 0x45, 0x00, 0x6D, 
+	0x4F, 0x21, 0x88, 0x25, 0x5B, 0xEE, 0x1C, 0x9D, 0x46, 0xAC, 0xD9, 0x09, 0x45, 0x66, 0x1B, 0xF6, 
+	0x88, 0x27, 0x46, 0xBC, 0x01, 0x8F, 0x00, 0x6D, 0x44, 0x65, 0x5A, 0xAF, 0xB2, 0xB6, 0xE0, 0x05, 
+	0x52, 0xAE, 0x19, 0x75, 0x01, 0x8E, 0x5A, 0xAE, 0x00, 0x6D, 0x52, 0xAE, 0x26, 0x00, 0xD1, 0xE1, 
+	0x2B, 0x00, 0x1E, 0x48, 0x1C, 0x01, 0x29, 0x00, 0xB2, 0xC0, 0x1C, 0x41, 0xD0, 0x05, 0x01, 0xCC, 
+	0x4F, 0x18, 0x19, 0xE4, 0x9B, 0x04, 0x4B, 0x11, 0xE7, 0xF2, 0x78, 0x1B, 0x4F, 0x13, 0x48, 0x15, 
+	0x4E, 0x10, 0x3B, 0x01, 0xE0, 0x10, 0x5C, 0xF5, 0xB2, 0xDB, 0x01, 0xED, 0x49, 0x13, 0x18, 0x6D, 
+	0x00, 0x5A, 0x88, 0x29, 0x5B, 0xD4, 0xD9, 0x03, 0x42, 0x8C, 0x1B, 0x64, 0x88, 0x2D, 0xE0, 0x01, 
+	0x52, 0x84, 0x52, 0x85, 0x25, 0x00, 0xD1, 0xEC, 0x2B, 0x00, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 
+	0x03, 0x0A, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 
+	0x09, 0x7C, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 
+	0x0A, 0xA4, 0x40, 0x00, 0x40, 0x02, 0x20, 0x00, 0x0D, 0x3C, 0x40, 0x00, 0x40, 0x82, 0xB0, 0x87, 
+	0xB5, 0xF0, 0xF8, 0x4A, 0xF0, 0x02, 0xF9, 0x60, 0xF0, 0x02, 0xD1, 0xFB, 0x28, 0x00, 0x78, 0x1B, 
+	0x4B, 0x52, 0xD0, 0x09, 0x2B, 0x02, 0x49, 0x52, 0x4B, 0x51, 0x78, 0x1A, 0x33, 0x40, 0x18, 0x54, 
+	0x42, 0x53, 0x33, 0x01, 0x54, 0xE0, 0xDD, 0xFA, 0x42, 0x93, 0x4F, 0x4E, 0x4E, 0x4C, 0x33, 0x40, 
+	0x1C, 0x33, 0x42, 0x64, 0x78, 0x1C, 0x78, 0xFA, 0xE0, 0x0C, 0x19, 0x12, 0x23, 0x80, 0x05, 0xDB, 
+	0xB2, 0xD2, 0xF7, 0xFF, 0x71, 0x1A, 0x78, 0x28, 0xFE, 0xC1, 0xF0, 0x03, 0x18, 0x20, 0x34, 0x01, 
+	0xFD, 0xF3, 0x35, 0x40, 0x1C, 0x35, 0x42, 0x9C, 0x78, 0x2B, 0x26, 0x00, 0xDD, 0xED, 0x78, 0x2C, 
+	0xE0, 0x25, 0x42, 0x64, 0x1C, 0x2F, 0xE0, 0x1A, 0x3F, 0x40, 0x78, 0xDA, 0x4B, 0x3E, 0x19, 0x12, 
+	0x23, 0x80, 0xB2, 0xD2, 0x05, 0xDB, 0xF7, 0xFF, 0x71, 0x1A, 0x78, 0x2D, 0xFE, 0xA7, 0x19, 0x65, 
+	0xA9, 0x04, 0x1C, 0x28, 0xAA, 0x05, 0xFD, 0xF8, 0xF0, 0x03, 0x9B, 0x04, 0x49, 0x35, 0x2B, 0xFF, 
+	0x5D, 0x4A, 0x23, 0xFF, 0xDD, 0x00, 0xDA, 0x00, 0x42, 0x9A, 0x55, 0x4A, 0x1C, 0x1A, 0x1C, 0x3D, 
+	0x34, 0x01, 0x78, 0x2B, 0x35, 0x40, 0xDD, 0xDF, 0x42, 0x9C, 0x4A, 0x2F, 0x36, 0x01, 0x78, 0x13, 
+	0x4D, 0x2B, 0x42, 0x9E, 0x35, 0x40, 0xF0, 0x01, 0xDB, 0xD3, 0x49, 0x2C, 0xFF, 0xDF, 0x78, 0x0D, 
+	0x78, 0x2A, 0x48, 0x27, 0x49, 0x2B, 0x23, 0x01, 0x78, 0x09, 0x1A, 0x9B, 0x91, 0x03, 0x4C, 0x29, 
+	0x21, 0x00, 0x46, 0x94, 0x18, 0x10, 0x18, 0xC6, 0xE0, 0x11, 0x78, 0x12, 0x1E, 0x72, 0x43, 0x6A, 
+	0x5C, 0xC7, 0x9A, 0x03, 0x92, 0x02, 0x9A, 0x02, 0x43, 0x57, 0x78, 0x72, 0x19, 0xD7, 0x18, 0xBA, 
+	0x43, 0x6A, 0xDB, 0x01, 0x42, 0x94, 0x1C, 0x19, 0xB2, 0x94, 0x45, 0x9C, 0x33, 0x01, 0x4B, 0x19, 
+	0xDC, 0xEB, 0x78, 0xDA, 0x4C, 0x1D, 0xB2, 0xC9, 0x18, 0x51, 0x4B, 0x13, 0x70, 0x99, 0x28, 0x00, 
+	0x78, 0x18, 0x78, 0x23, 0xD1, 0x05, 0xD0, 0x02, 0x2B, 0x00, 0xF0, 0x02, 0x49, 0x18, 0x78, 0x23, 
+	0xFD, 0xB7, 0xD0, 0x0B, 0x2B, 0x00, 0x20, 0x00, 0x4B, 0x0D, 0x78, 0x19, 0x33, 0x40, 0x00, 0x49, 
+	0x4A, 0x0C, 0xB2, 0xC9, 0x31, 0x01, 0x90, 0x00, 0x23, 0x01, 0xFD, 0x50, 0xF0, 0x02, 0x78, 0x1B, 
+	0x4B, 0x0E, 0xD0, 0x06, 0x2B, 0x00, 0x20, 0x00, 0x21, 0x01, 0x1C, 0x0B, 0x4A, 0x0D, 0xF0, 0x02, 
+	0x90, 0x00, 0xB0, 0x07, 0xFD, 0x45, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x01, 0xE0, 0x20, 0x00, 
+	0x0D, 0x48, 0x18, 0x12, 0xAE, 0xF1, 0x05, 0x20, 0x00, 0x01, 0x93, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x0D, 0x87, 0x20, 0x00, 0x00, 0x54, 0x20, 0x00, 0x00, 0x55, 0x00, 0x00, 0xFF, 0xFF, 0x20, 
+	0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x1A, 0x20, 0x00, 0x0A, 0xAC, 0x4B, 0x24, 0xB5, 0x13, 0x68, 
+	0x1B, 0x4C, 0x24, 0xD0, 0x0E, 0x2B, 0x00, 0x2B, 0x00, 0x78, 0x23, 0x20, 0x00, 0xD0, 0x03, 0xF0, 
+	0x02, 0x49, 0x21, 0xF7, 0xFF, 0xFD, 0x77, 0x78, 0x23, 0xFA, 0x6D, 0xD1, 0x02, 0x2B, 0x00, 0xF8, 
+	0x38, 0xF0, 0x02, 0x78, 0x23, 0xE7, 0xFE, 0xD0, 0x09, 0x2B, 0x00, 0x68, 0x23, 0x4C, 0x1B, 0xD5, 
+	0x05, 0x00, 0xDA, 0xFA, 0x5E, 0xF7, 0xFF, 0x4B, 0x19, 0x68, 0x22, 0x60, 0x23, 0x40, 0x13, 0x78, 
+	0x23, 0x4C, 0x14, 0xD0, 0x22, 0x2B, 0x00, 0x68, 0x1B, 0x4B, 0x14, 0xD5, 0x1E, 0x01, 0x5A, 0x20, 
+	0x00, 0x49, 0x14, 0xFD, 0x56, 0xF0, 0x02, 0x4A, 0x14, 0x4B, 0x13, 0x80, 0x11, 0x88, 0x19, 0x80, 
+	0x51, 0x88, 0x59, 0x80, 0x91, 0x88, 0x99, 0x80, 0xD3, 0x88, 0xDB, 0x78, 0x1B, 0x4B, 0x10, 0x78, 
+	0x23, 0x81, 0x13, 0xD0, 0x05, 0x2B, 0x00, 0x21, 0x05, 0x20, 0x00, 0x90, 0x00, 0x23, 0x02, 0xFC, 
+	0xE8, 0xF0, 0x02, 0x4A, 0x0B, 0x4B, 0x05, 0x40, 0x0A, 0x68, 0x19, 0xBD, 0x13, 0x60, 0x1A, 0x20, 
+	0x00, 0x1E, 0x0C, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x20, 0x20, 0x00, 0x00, 0x58, 0xEF, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x59, 0x27, 0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x11, 0x54, 0x20, 
+	0x00, 0x0A, 0xAA, 0xFB, 0xFF, 0xFF, 0xFF, 0x28, 0x02, 0xB5, 0x10, 0x28, 0x03, 0xD0, 0x04, 0x28, 
+	0x01, 0xD0, 0x45, 0xE0, 0x15, 0xD1, 0x33, 0xF9, 0xF6, 0xF7, 0xFF, 0x4C, 0x2A, 0x4B, 0x29, 0x78, 
+	0x1B, 0x33, 0x40, 0x22, 0x50, 0x49, 0x29, 0x48, 0x29, 0x70, 0x23, 0xF9, 0xA6, 0xF0, 0x04, 0x20, 
+	0x0D, 0x4B, 0x28, 0x47, 0x98, 0x68, 0x1B, 0xF9, 0xF4, 0xF7, 0xFF, 0x2B, 0x10, 0x78, 0x23, 0xE0, 
+	0x14, 0xD1, 0x1A, 0xF9, 0xE0, 0xF7, 0xFF, 0x4C, 0x1F, 0x4B, 0x1E, 0x78, 0x1B, 0x33, 0x40, 0x22, 
+	0x50, 0x49, 0x21, 0x48, 0x1E, 0x70, 0x23, 0xF9, 0x90, 0xF0, 0x04, 0x20, 0x0C, 0x4B, 0x1D, 0x47, 
+	0x98, 0x68, 0x1B, 0xF9, 0xDE, 0xF7, 0xFF, 0x2B, 0x10, 0x78, 0x23, 0x4B, 0x1B, 0xD1, 0x04, 0x70, 
+	0x9A, 0x78, 0xDA, 0xFA, 0xD1, 0xF0, 0x02, 0xFA, 0x54, 0xF0, 0x02, 0x4B, 0x18, 0xE0, 0x20, 0x2A, 
+	0x00, 0x78, 0x1A, 0x4A, 0x17, 0xD0, 0x05, 0x31, 0x01, 0x68, 0x11, 0x22, 0x00, 0x60, 0x11, 0x4B, 
+	0x15, 0x70, 0x1A, 0x2A, 0x13, 0x68, 0x1A, 0x22, 0x00, 0xDD, 0x05, 0x4B, 0x0A, 0x60, 0x1A, 0x70, 
+	0x1A, 0x22, 0x10, 0x4B, 0x0F, 0xE0, 0x0C, 0x2A, 0x3B, 0x68, 0x1A, 0x22, 0x00, 0xDD, 0x08, 0x4B, 
+	0x0E, 0x60, 0x1A, 0x68, 0x1B, 0x20, 0x01, 0x4B, 0x0D, 0x47, 0x98, 0x70, 0x1A, 0x22, 0x01, 0x46, 
+	0xC0, 0xBD, 0x10, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x00, 0x00, 0x74, 0x4A, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x74, 0x9A, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x01, 0xC4, 0x20, 0x00, 0x01, 0xC0, 0x20, 0x00, 0x01, 0xBC, 0x20, 0x00, 0x00, 0x6C, 0x20, 
+	0x00, 0x01, 0xE7, 0x4B, 0x0C, 0xB5, 0x10, 0x79, 0x99, 0x22, 0x01, 0xE0, 0x00, 0x23, 0x00, 0x1C, 
+	0x5C, 0x1C, 0x23, 0xB2, 0xE4, 0x1C, 0x10, 0x42, 0x81, 0x40, 0x98, 0x4A, 0x07, 0xDA, 0xF8, 0x71, 
+	0x13, 0x21, 0x07, 0x05, 0xD2, 0x22, 0x80, 0x02, 0x19, 0x40, 0x0B, 0x4B, 0x04, 0x6C, 0x10, 0x43, 
+	0x0B, 0x40, 0x03, 0xBD, 0x10, 0x64, 0x13, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x00, 0x5C, 0xFF, 
+	0xFF, 0xF8, 0xFF, 0x22, 0x07, 0x4B, 0x06, 0x23, 0x80, 0x79, 0xD9, 0x6C, 0x18, 0x05, 0xDB, 0x4A, 
+	0x04, 0x40, 0x11, 0x40, 0x02, 0x02, 0x09, 0x64, 0x1A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x0D, 0x48, 0xFF, 0xFF, 0xF8, 0xFF, 0xB0, 0x8D, 0xB5, 0xF0, 0xF7, 0xFF, 0x90, 0x04, 0x4B, 
+	0xC7, 0xFF, 0xC9, 0x78, 0xDE, 0x48, 0xC7, 0x96, 0x05, 0x21, 0x00, 0xE0, 0x07, 0x78, 0x9C, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x00, 0x76, 0x18, 0xEE, 0x2B, 0x00, 0x52, 0x31, 0x92, 0x05, 0xD1, 0xF8, 0x9E, 
+	0x05, 0x9A, 0x05, 0xB2, 0xD2, 0x3A, 0x01, 0xD0, 0x02, 0x2E, 0x00, 0x01, 0x55, 0x1C, 0x23, 0x9F, 
+	0x04, 0xE7, 0xF3, 0xD0, 0x05, 0x2F, 0x00, 0x9E, 0x05, 0x4B, 0xBB, 0x96, 0x06, 0x7B, 0x5B, 0xE0, 
+	0x04, 0x93, 0x03, 0x27, 0x02, 0x4B, 0xB9, 0x97, 0x06, 0x78, 0x9B, 0x46, 0x68, 0x93, 0x03, 0x56, 
+	0x0B, 0x21, 0x0C, 0x93, 0x0B, 0x4C, 0xB2, 0x93, 0x09, 0x42, 0x5B, 0x46, 0x6A, 0xE0, 0xAA, 0x56, 
+	0x9A, 0x23, 0x18, 0x1C, 0x27, 0x7A, 0xE6, 0xE0, 0x0D, 0x92, 0x02, 0x21, 0x00, 0x1C, 0x30, 0x9B, 
+	0x02, 0x1C, 0x2A, 0xF9, 0x4C, 0xF0, 0x02, 0x21, 0x01, 0x1C, 0x30, 0x9B, 0x02, 0x1C, 0x2A, 0xF9, 
+	0x46, 0xF0, 0x02, 0xB2, 0xF6, 0x36, 0x01, 0x7A, 0xFA, 0x7A, 0xBB, 0x1C, 0x3B, 0x18, 0xD2, 0xDB, 
+	0xEB, 0x42, 0x96, 0x2E, 0x00, 0x9E, 0x04, 0x3D, 0x0E, 0xD1, 0x00, 0x21, 0x18, 0x46, 0x68, 0x7B, 
+	0x5E, 0x56, 0x08, 0x90, 0x02, 0x4F, 0x9E, 0x1C, 0x30, 0xE0, 0x0D, 0x1C, 0x2A, 0x21, 0x00, 0xF0, 
+	0x02, 0x9B, 0x02, 0x1C, 0x30, 0xF9, 0x2D, 0x1C, 0x2A, 0x21, 0x01, 0xF0, 0x02, 0x9B, 0x02, 0x36, 
+	0x01, 0xF9, 0x27, 0x7B, 0x7A, 0xB2, 0xF6, 0x18, 0xD3, 0x7B, 0x3B, 0xDB, 0xEC, 0x42, 0x9E, 0xFC, 
+	0xAE, 0xF7, 0xFF, 0x78, 0x1B, 0x4B, 0x96, 0xD0, 0x06, 0x2B, 0x00, 0x1C, 0x18, 0x23, 0x01, 0xAA, 
+	0x0B, 0x1C, 0x19, 0xF0, 0x02, 0x93, 0x00, 0x25, 0x00, 0xFB, 0xAD, 0x4F, 0x90, 0x4E, 0x8C, 0x78, 
+	0x3B, 0xE0, 0x0E, 0xD0, 0x09, 0x2B, 0x00, 0x01, 0xEA, 0x4B, 0x8E, 0x23, 0x00, 0x18, 0xD2, 0x20, 
+	0x01, 0x78, 0xB1, 0x23, 0x02, 0x93, 0x00, 0xFB, 0x9C, 0xF0, 0x02, 0xB2, 0xED, 0x35, 0x01, 0x42, 
+	0x9D, 0x78, 0xF3, 0x9A, 0x0B, 0xD3, 0xED, 0xB2, 0xD2, 0x78, 0xB6, 0x92, 0x07, 0x96, 0x02, 0xE0, 
+	0x39, 0x4D, 0x80, 0xB2, 0xDB, 0x3B, 0x01, 0x1C, 0x99, 0x9E, 0x08, 0x4F, 0x82, 0x18, 0x71, 0x5B, 
+	0xCE, 0x00, 0x49, 0x00, 0x48, 0x18, 0xD1, 0xB2, 0xB7, 0x5B, 0x40, 0xDC, 0x14, 0x42, 0xB8, 0x1C, 
+	0x01, 0x1B, 0xC0, 0xDA, 0x01, 0x31, 0x80, 0x42, 0x40, 0x20, 0x80, 0x28, 0x7F, 0x18, 0xD7, 0x20, 
+	0x7F, 0xDD, 0x00, 0x54, 0x78, 0x49, 0x79, 0x00, 0x48, 0x18, 0xD1, 0x27, 0x1C, 0x52, 0x2E, 0x48, 
+	0x77, 0x46, 0x6E, 0x54, 0x0E, 0x5D, 0xBE, 0x9E, 0x04, 0xE0, 0x13, 0xD0, 0x10, 0x2E, 0x00, 0x42, 
+	0xB0, 0x4E, 0x74, 0x4E, 0x71, 0xD0, 0x08, 0x19, 0x80, 0x57, 0x8E, 0xDA, 0x03, 0x42, 0x87, 0x5C, 
+	0x0E, 0x48, 0x6F, 0x54, 0x0E, 0x36, 0x01, 0x27, 0x01, 0x18, 0xD1, 0x42, 0x7F, 0x00, 0x49, 0x2B, 
+	0x00, 0x52, 0x6F, 0x46, 0x63, 0xD1, 0xC6, 0xB2, 0xF6, 0x1E, 0x5E, 0xD0, 0x06, 0x2B, 0x00, 0x01, 
+	0x92, 0x1C, 0x72, 0x9B, 0x02, 0x92, 0x08, 0x46, 0xB4, 0x01, 0x72, 0x9B, 0x0B, 0xE7, 0xF1, 0x93, 
+	0x0B, 0x3B, 0x01, 0x9E, 0x09, 0x9D, 0x0B, 0xDB, 0x00, 0x42, 0xB5, 0x9F, 0x04, 0xE7, 0x4F, 0xD0, 
+	0x45, 0x2F, 0x00, 0x78, 0xE3, 0x78, 0xA0, 0x36, 0x61, 0xAE, 0xF1, 0x06, 0x78, 0x61, 0x90, 0x04, 
+	0x91, 0x06, 0x4A, 0x56, 0x94, 0x02, 0x78, 0x24, 0x7A, 0xD0, 0x7C, 0x11, 0x18, 0x08, 0x4C, 0x5B, 
+	0x90, 0x07, 0xB2, 0xC0, 0x18, 0x89, 0x7B, 0x12, 0x91, 0x08, 0xB2, 0xC9, 0xE0, 0x28, 0x4A, 0x55, 
+	0x3B, 0x01, 0x9E, 0x03, 0x2E, 0x00, 0xB2, 0xDB, 0x18, 0xC7, 0xD1, 0x01, 0x9E, 0x06, 0x55, 0xD6, 
+	0xD2, 0x02, 0x42, 0xB1, 0x42, 0xBB, 0x9F, 0x02, 0x18, 0xEF, 0xD3, 0x0C, 0x97, 0x09, 0x18, 0xC6, 
+	0x46, 0xBC, 0x5D, 0x97, 0x5D, 0xE7, 0x9F, 0x09, 0x9F, 0x08, 0x44, 0xBC, 0x46, 0x67, 0x44, 0xBC, 
+	0xE0, 0x0B, 0x55, 0x97, 0x18, 0xC6, 0x18, 0xEF, 0x5D, 0x97, 0x97, 0x09, 0x9F, 0x09, 0x46, 0xBC, 
+	0x44, 0xBC, 0x5D, 0xE7, 0x44, 0xBC, 0x9F, 0x07, 0x55, 0x97, 0x46, 0x67, 0xD1, 0xD7, 0x2B, 0x00, 
+	0x1E, 0x59, 0x1C, 0x0B, 0x2B, 0x00, 0xB2, 0xC9, 0x25, 0x26, 0xD0, 0x3E, 0x01, 0x48, 0x9B, 0x04, 
+	0xE7, 0xF3, 0x43, 0x4D, 0x79, 0xE2, 0x7C, 0x63, 0x18, 0x9A, 0x25, 0x07, 0x4A, 0x34, 0x92, 0x03, 
+	0x21, 0x02, 0x7B, 0xA0, 0x79, 0x26, 0x5E, 0x52, 0x00, 0x6D, 0x1A, 0xAD, 0xB2, 0xED, 0x19, 0x86, 
+	0x46, 0x84, 0x49, 0x34, 0x18, 0xB8, 0xE0, 0x09, 0x32, 0x01, 0x5C, 0x44, 0x54, 0x44, 0x19, 0x2C, 
+	0x42, 0xB2, 0xB2, 0xD2, 0x33, 0x01, 0xDB, 0xF7, 0x9A, 0x03, 0xB2, 0xDB, 0xDA, 0x02, 0x42, 0x93, 
+	0x01, 0x5F, 0x46, 0x62, 0x4A, 0x23, 0xE7, 0xF5, 0x7C, 0x10, 0x49, 0x2A, 0x79, 0x56, 0x7B, 0xD3, 
+	0x19, 0x9E, 0x79, 0x95, 0x46, 0x84, 0x19, 0x45, 0x18, 0xB8, 0xE0, 0x09, 0x32, 0x01, 0x5C, 0x44, 
+	0x54, 0x44, 0x3C, 0x0E, 0x42, 0xAA, 0xB2, 0xD2, 0x33, 0x01, 0xDB, 0xF7, 0x42, 0xB3, 0xB2, 0xDB, 
+	0x46, 0x62, 0xDA, 0x02, 0xE7, 0xF6, 0x01, 0x5F, 0x78, 0x1B, 0x4B, 0x1A, 0xD0, 0x13, 0x2B, 0x00, 
+	0x49, 0x1F, 0x20, 0x05, 0xFB, 0x10, 0xF0, 0x02, 0x78, 0x2B, 0xE0, 0x0E, 0xD0, 0x08, 0x2B, 0x00, 
+	0x01, 0x72, 0x4B, 0x18, 0x18, 0xD2, 0x78, 0xA1, 0x23, 0x01, 0x20, 0x05, 0xF0, 0x02, 0x93, 0x00, 
+	0x36, 0x01, 0xFA, 0xAB, 0xE0, 0x02, 0xB2, 0xF6, 0x4D, 0x0E, 0x4C, 0x0A, 0x78, 0xE3, 0x9E, 0x05, 
+	0xD8, 0xEA, 0x42, 0xB3, 0x20, 0x01, 0x21, 0x00, 0x42, 0x40, 0x1C, 0x0A, 0xF0, 0x02, 0x23, 0x02, 
+	0x20, 0x01, 0xF8, 0x01, 0x21, 0x01, 0x42, 0x40, 0x23, 0x02, 0x22, 0x00, 0xFF, 0xFA, 0xF0, 0x01, 
+	0xE0, 0x25, 0x78, 0xA4, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x01, 0xEB, 0x40, 0x00, 0x40, 0x84, 0x40, 0x00, 0x40, 0x00, 
+	0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x0A, 0xB3, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x75, 0x36, 
+	0x00, 0x00, 0x59, 0x2E, 0x21, 0x00, 0x3C, 0x01, 0x1C, 0x0A, 0xB2, 0xE4, 0x23, 0x01, 0x1C, 0x20, 
+	0xFF, 0xD8, 0xF0, 0x01, 0x1C, 0x20, 0x21, 0x01, 0x1C, 0x0B, 0x22, 0x00, 0xFF, 0xD2, 0xF0, 0x01, 
+	0xD1, 0xEF, 0x2C, 0x00, 0xFE, 0x30, 0xF7, 0xFF, 0xBD, 0xF0, 0xB0, 0x0D, 0xF0, 0x03, 0xB5, 0x08, 
+	0x4B, 0x05, 0xFD, 0xC5, 0x68, 0x1B, 0x20, 0x01, 0x20, 0x01, 0x47, 0x98, 0xF9, 0x22, 0xF0, 0x04, 
+	0xFD, 0xD6, 0xF0, 0x01, 0x46, 0xC0, 0xBD, 0x08, 0x20, 0x00, 0x01, 0xF8, 0x4A, 0x2C, 0xB5, 0xF7, 
+	0x60, 0x10, 0x20, 0x00, 0x4E, 0x2C, 0x4A, 0x2B, 0x4A, 0x2C, 0x8C, 0x11, 0x1D, 0x72, 0x60, 0x11, 
+	0x7D, 0xF1, 0x7F, 0xD2, 0x42, 0x44, 0x1E, 0x50, 0x4C, 0x29, 0x41, 0x60, 0x90, 0x00, 0x1A, 0x08, 
+	0x1D, 0xB0, 0x60, 0x20, 0x7E, 0x37, 0x7F, 0xC5, 0x42, 0x58, 0x1E, 0x6B, 0x1A, 0x3B, 0x41, 0x58, 
+	0x60, 0x63, 0x93, 0x01, 0xD1, 0x02, 0x2A, 0x01, 0x81, 0x20, 0x20, 0x00, 0x23, 0x26, 0xE0, 0x05, 
+	0x00, 0x49, 0x5E, 0xF0, 0xFE, 0xBA, 0xF0, 0x03, 0x2D, 0x01, 0x81, 0x20, 0x23, 0x00, 0xD1, 0x02, 
+	0xE0, 0x05, 0x81, 0x63, 0x5E, 0xF0, 0x23, 0x28, 0xF0, 0x03, 0x00, 0x79, 0x81, 0x60, 0xFE, 0xAF, 
+	0x9B, 0x01, 0x4F, 0x15, 0x5E, 0x3E, 0x20, 0x28, 0x00, 0x70, 0x00, 0x59, 0xF0, 0x03, 0x19, 0x80, 
+	0x43, 0x40, 0xFE, 0xA5, 0x00, 0x43, 0x4C, 0x12, 0x60, 0xE3, 0x00, 0x80, 0x61, 0x23, 0x18, 0xC3, 
+	0x5E, 0x3D, 0x20, 0x26, 0x00, 0x68, 0x9B, 0x00, 0x19, 0x40, 0x00, 0x59, 0xFE, 0x96, 0xF0, 0x03, 
+	0x61, 0x60, 0x37, 0x2C, 0x78, 0x3B, 0x61, 0xA0, 0xD1, 0x02, 0x2B, 0x00, 0x62, 0x25, 0x61, 0xE6, 
+	0x61, 0xE5, 0xE0, 0x01, 0x4B, 0x07, 0x62, 0x26, 0x42, 0x52, 0x22, 0x01, 0xBD, 0xF7, 0x60, 0x5A, 
+	0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0x20, 
+	0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x00, 0xCC, 0x4B, 0x24, 0xB5, 0xF0, 0x7E, 0x1E, 0xB0, 0x87, 
+	0x1C, 0x72, 0x7D, 0xDB, 0x33, 0x02, 0x1C, 0xD9, 0x92, 0x05, 0x93, 0x03, 0x4A, 0x20, 0x23, 0x00, 
+	0x1C, 0x18, 0x91, 0x04, 0x1A, 0xE5, 0x9C, 0x05, 0x97, 0x01, 0x01, 0xEF, 0x52, 0xB8, 0x5A, 0xBC, 
+	0x01, 0xAD, 0x9C, 0x04, 0x00, 0x4F, 0x19, 0x29, 0x4C, 0x1A, 0x5A, 0xBC, 0x27, 0x00, 0x52, 0xB8, 
+	0x55, 0x0F, 0x55, 0x2F, 0x4F, 0x18, 0x99, 0x01, 0x19, 0xCF, 0x33, 0x01, 0x88, 0x39, 0x97, 0x02, 
+	0x99, 0x03, 0x80, 0x38, 0x00, 0x79, 0x18, 0x6F, 0x5A, 0x89, 0x91, 0x01, 0x52, 0x88, 0x99, 0x01, 
+	0x18, 0x6D, 0x49, 0x12, 0x70, 0x29, 0x21, 0x00, 0x1A, 0xF7, 0x55, 0x39, 0x37, 0x01, 0x4D, 0x0C, 
+	0x22, 0x00, 0xDA, 0xD8, 0x9B, 0x03, 0x36, 0x01, 0x01, 0xB6, 0x1C, 0x11, 0x5A, 0x2F, 0x00, 0x58, 
+	0x18, 0xF0, 0x52, 0x2A, 0x5B, 0xEC, 0x00, 0x47, 0x4F, 0x06, 0x53, 0xEA, 0x3B, 0x01, 0x54, 0xF9, 
+	0x2B, 0x01, 0x54, 0x39, 0xB0, 0x07, 0xD1, 0xF2, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x09, 0xAE, 
+	0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x02, 0x40, 0x00, 0x20, 0x01, 
+	0x4B, 0x0D, 0xB5, 0xF7, 0x7D, 0xDE, 0x7E, 0x19, 0x36, 0x01, 0x1C, 0x48, 0x90, 0x01, 0x23, 0x00, 
+	0x1C, 0x32, 0x9C, 0x01, 0x01, 0xBF, 0x1A, 0xE7, 0x46, 0xAC, 0x1C, 0x95, 0x4C, 0x07, 0x44, 0xBC, 
+	0x46, 0x60, 0x25, 0x00, 0x55, 0x05, 0x3A, 0x01, 0xDA, 0xF5, 0x1C, 0x50, 0x1A, 0xCA, 0x33, 0x01, 
+	0xDA, 0xED, 0x32, 0x01, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x20, 0x00, 
+	0x4B, 0x0D, 0xB5, 0x00, 0x5E, 0x9B, 0x22, 0x08, 0x1C, 0x11, 0x4A, 0x0C, 0x78, 0x09, 0x31, 0x35, 
+	0x43, 0x4B, 0x7F, 0x12, 0x11, 0x9B, 0xB2, 0x52, 0xDA, 0x00, 0x42, 0x93, 0x4A, 0x08, 0x1C, 0x13, 
+	0x22, 0x80, 0x60, 0x13, 0x05, 0x1B, 0x05, 0xD2, 0x69, 0x90, 0x09, 0x19, 0x40, 0x03, 0x4B, 0x05, 
+	0x61, 0x93, 0x43, 0x0B, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x0D, 0x38, 0xF0, 0x00, 0xFF, 0xFF, 0x4A, 0xA9, 0xB5, 0xF0, 0x68, 0x11, 0x48, 0xA9, 
+	0xB0, 0x93, 0x68, 0x07, 0x22, 0x0D, 0x46, 0x8C, 0x25, 0x7F, 0x21, 0x00, 0x97, 0x01, 0x24, 0xFF, 
+	0x18, 0x83, 0x00, 0x90, 0x00, 0x5B, 0x4E, 0xA4, 0x87, 0x99, 0x18, 0xF3, 0x33, 0x38, 0x27, 0x00, 
+	0x46, 0x67, 0x72, 0x1F, 0x3A, 0x01, 0x50, 0x39, 0xB2, 0xD2, 0x9F, 0x01, 0x0F, 0x46, 0xAE, 0xF1, 
+	0x07, 0x26, 0x00, 0x50, 0x39, 0x72, 0x5D, 0x72, 0xDD, 0x72, 0x9C, 0x73, 0x1C, 0x2A, 0xFF, 0x80, 
+	0xD9, 0x4A, 0x9B, 0xD1, 0xE8, 0x7E, 0x11, 0x4B, 0x9B, 0x4C, 0x9B, 0x68, 0x98, 0x39, 0x01, 0x4D, 
+	0x97, 0x81, 0xA6, 0x90, 0x04, 0x42, 0x88, 0x60, 0x2E, 0x30, 0x01, 0xDA, 0x02, 0x60, 0x98, 0x90, 
+	0x04, 0x96, 0x11, 0x68, 0xDE, 0xDD, 0x02, 0x2E, 0x00, 0x96, 0x11, 0x3E, 0x01, 0x7D, 0xD1, 0x60, 
+	0xDE, 0x39, 0x01, 0x68, 0x1A, 0xDA, 0x01, 0x42, 0x8A, 0x60, 0x1A, 0x32, 0x01, 0x2A, 0x00, 0x68, 
+	0x5A, 0x3A, 0x01, 0xDD, 0x01, 0x9F, 0x04, 0x60, 0x5A, 0x42, 0x87, 0x98, 0x11, 0xE0, 0xA3, 0xDA, 
+	0x00, 0x68, 0x5B, 0x68, 0x19, 0x93, 0x06, 0x4A, 0x84, 0x68, 0x12, 0x4B, 0x88, 0x4C, 0x86, 0x68, 
+	0x1B, 0x4B, 0x80, 0x93, 0x0D, 0x68, 0x1B, 0x91, 0x10, 0x93, 0x0A, 0x92, 0x09, 0x48, 0x84, 0x89, 
+	0xA4, 0x9D, 0x06, 0x94, 0x0C, 0x42, 0xB5, 0x9E, 0x10, 0xE0, 0x81, 0xDD, 0x00, 0x46, 0x6F, 0x9A, 
+	0x04, 0x32, 0x01, 0x21, 0x10, 0x01, 0x92, 0x5D, 0xCF, 0x92, 0x02, 0x1C, 0x33, 0xE0, 0x05, 0x97, 
+	0x07, 0x54, 0x2F, 0x27, 0x00, 0x3B, 0x01, 0x9F, 0x06, 0xDC, 0x71, 0x42, 0x9F, 0x1C, 0x9C, 0x99, 
+	0x02, 0x5C, 0x2A, 0x19, 0x0D, 0x00, 0x69, 0x4E, 0x77, 0x2A, 0x0E, 0x5B, 0x89, 0x9D, 0x0D, 0xD8, 
+	0xF0, 0x2A, 0x00, 0x1B, 0x49, 0xE0, 0x71, 0xD1, 0x00, 0xB2, 0xD4, 0x3A, 0x01, 0x9F, 0x04, 0x9E, 
+	0x09, 0x18, 0xB5, 0x00, 0xA2, 0x68, 0x2E, 0x43, 0x4F, 0x44, 0x67, 0x46, 0xB4, 0x9D, 0x0A, 0x60, 
+	0x2F, 0x18, 0xAF, 0x1C, 0x0E, 0x43, 0x5E, 0x68, 0x3D, 0x19, 0x15, 0x46, 0xAC, 0x95, 0x01, 0x00, 
+	0x6D, 0x44, 0x66, 0x4D, 0x62, 0x9D, 0x01, 0x46, 0xAC, 0x44, 0xAC, 0x60, 0x3E, 0x8F, 0xAF, 0x46, 
+	0x65, 0x7A, 0x2E, 0x35, 0x38, 0x96, 0x03, 0x19, 0xCF, 0x57, 0xAE, 0x26, 0x09, 0x96, 0x01, 0x80, 
+	0xAF, 0x46, 0x6F, 0x9E, 0x0C, 0x26, 0x01, 0x46, 0xB4, 0x9E, 0x03, 0x44, 0xB4, 0x96, 0x03, 0x36, 
+	0x01, 0xB2, 0xB6, 0x46, 0x66, 0x26, 0x0C, 0x96, 0x0C, 0x9E, 0x04, 0x5D, 0xF7, 0x9F, 0x01, 0x72, 
+	0x2F, 0xDA, 0x00, 0x42, 0xBE, 0x4E, 0x51, 0x72, 0x6E, 0x00, 0x6D, 0x19, 0x15, 0x35, 0x38, 0x19, 
+	0x75, 0x57, 0xAE, 0x26, 0x0A, 0x42, 0xB7, 0x9F, 0x04, 0x72, 0xAF, 0xDD, 0x00, 0x19, 0x15, 0x4E, 
+	0x4B, 0x19, 0x75, 0x00, 0x6D, 0x26, 0x0B, 0x35, 0x38, 0x42, 0xB3, 0x57, 0xAE, 0x72, 0xEB, 0xDA, 
+	0x00, 0x4F, 0x46, 0x19, 0x15, 0x19, 0x7D, 0x00, 0x6D, 0x26, 0x0C, 0x35, 0x38, 0x42, 0xB3, 0x57, 
+	0xAE, 0x73, 0x2B, 0xDD, 0x00, 0x4C, 0x41, 0x19, 0x12, 0x18, 0xA2, 0x00, 0x52, 0x5F, 0x54, 0x25, 
+	0x3E, 0x42, 0xA1, 0x32, 0x38, 0x9F, 0x06, 0xDD, 0x8E, 0x80, 0xD1, 0x3B, 0x01, 0xDD, 0x8D, 0x42, 
+	0x9F, 0x9A, 0x11, 0x99, 0x04, 0x91, 0x04, 0x39, 0x01, 0xDB, 0x00, 0x42, 0x91, 0x46, 0x6B, 0xE7, 
+	0x71, 0x5A, 0xE4, 0x24, 0x30, 0x81, 0x9C, 0x4B, 0x38, 0xBD, 0xF0, 0xB0, 0x13, 0x43, 0xCA, 0x39, 
+	0x02, 0x40, 0x11, 0x17, 0xD2, 0x9E, 0x04, 0x91, 0x03, 0x43, 0x71, 0x9F, 0x03, 0x91, 0x0E, 0x43, 
+	0x5F, 0xB2, 0xD9, 0x25, 0x00, 0x91, 0x05, 0x97, 0x0F, 0x95, 0x01, 0x22, 0x03, 0x94, 0x08, 0x46, 
+	0x9C, 0x4F, 0x32, 0x4E, 0x31, 0x5C, 0xB1, 0x9C, 0x07, 0x5C, 0xBB, 0x9D, 0x05, 0x18, 0xEB, 0x18, 
+	0x61, 0x31, 0x01, 0xB2, 0x49, 0x01, 0x89, 0xB2, 0x5B, 0x18, 0xCB, 0x33, 0x02, 0xB2, 0x65, 0x5C, 
+	0x1C, 0x29, 0x0D, 0x1E, 0x69, 0x9B, 0x08, 0xD8, 0x27, 0x00, 0x8E, 0x9F, 0x02, 0x97, 0x0B, 0x18, 
+	0xFF, 0x18, 0x71, 0x9F, 0x09, 0x9F, 0x0A, 0x19, 0xBB, 0x19, 0xBF, 0x00, 0x49, 0x97, 0x00, 0x4E, 
+	0x1B, 0x18, 0x71, 0x9F, 0x01, 0x2F, 0x00, 0x31, 0x38, 0xB2, 0xE4, 0xD1, 0x1A, 0x9D, 0x0B, 0x94, 
+	0x01, 0xB2, 0xE4, 0x34, 0x0E, 0x68, 0x1C, 0x54, 0x2C, 0x9F, 0x00, 0x9E, 0x0E, 0x60, 0x1C, 0x19, 
+	0xA4, 0x9C, 0x0F, 0x68, 0x3B, 0x19, 0x1B, 0x9D, 0x03, 0x88, 0x8C, 0x60, 0x3B, 0x19, 0x2C, 0x7A, 
+	0x0B, 0x80, 0x8C, 0x33, 0x01, 0x1E, 0x53, 0x72, 0x0B, 0xD0, 0x10, 0x2A, 0x00, 0xE7, 0xBF, 0xB2, 
+	0xDA, 0x99, 0x08, 0x9E, 0x02, 0x18, 0x73, 0x9C, 0x01, 0xD0, 0xF4, 0x2C, 0x1F, 0xD0, 0xF2, 0x42, 
+	0xAC, 0x26, 0x1F, 0x25, 0x1F, 0x96, 0x01, 0x54, 0x1D, 0x2A, 0x00, 0x1E, 0x53, 0x46, 0x63, 0xD1, 
+	0xEE, 0x46, 0xC0, 0xE7, 0x18, 0x20, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0x48, 0x20, 0x00, 0x02, 
+	0x24, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x0D, 
+	0x38, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x59, 0xF8, 0x00, 0x00, 0x59, 
+	0xF4, 0xB0, 0x89, 0xB5, 0xF0, 0x49, 0x46, 0x23, 0x0F, 0xE0, 0x02, 0x22, 0xFF, 0x38, 0x01, 0x18, 
+	0x58, 0x3B, 0x01, 0x70, 0x02, 0xD1, 0xF9, 0x2B, 0x00, 0x68, 0xD8, 0x4B, 0x42, 0x68, 0x9A, 0x68, 
+	0x19, 0x90, 0x01, 0x68, 0x5B, 0x4B, 0x40, 0x93, 0x03, 0x68, 0x1B, 0x91, 0x02, 0x4B, 0x3F, 0x93, 
+	0x04, 0x93, 0x06, 0x7F, 0x5B, 0x9B, 0x07, 0xE0, 0x68, 0x4A, 0x3D, 0x1C, 0x88, 0x5C, 0x83, 0x18, 
+	0x18, 0x2B, 0x1F, 0xB2, 0x5B, 0x4A, 0x3B, 0xD1, 0x5A, 0x5A, 0x82, 0x00, 0x40, 0x20, 0x04, 0x9D, 
+	0x04, 0x92, 0x05, 0x1B, 0x52, 0x38, 0x01, 0x4A, 0x38, 0x56, 0x14, 0xB2, 0xC0, 0x44, 0x64, 0x4A, 
+	0x37, 0x34, 0x01, 0x56, 0x12, 0x01, 0xA4, 0x18, 0x8A, 0x4E, 0x31, 0x32, 0x02, 0x5C, 0xB4, 0x18, 
+	0xA2, 0xD8, 0x41, 0x2C, 0x0E, 0xD0, 0x3E, 0x2B, 0x1F, 0xD0, 0x3D, 0x42, 0xA3, 0xD0, 0x3B, 0x2C, 
+	0x00, 0x1E, 0x5D, 0x27, 0x0A, 0x4A, 0x2E, 0x43, 0x7D, 0x19, 0x55, 0x4E, 0x2D, 0x43, 0x7A, 0x1E, 
+	0x62, 0x27, 0x3E, 0x18, 0xB2, 0x27, 0x3E, 0x5F, 0xEE, 0x1C, 0x1A, 0x5F, 0xD5, 0xDD, 0x00, 0x42, 
+	0xAE, 0x25, 0x0A, 0x1C, 0x22, 0x43, 0x6A, 0x3A, 0x01, 0x9D, 0x06, 0x4E, 0x25, 0x27, 0x3E, 0x18, 
+	0xB2, 0x9E, 0x05, 0x5F, 0xD2, 0x11, 0x92, 0x43, 0x6A, 0xDD, 0x1D, 0x42, 0x96, 0xD9, 0x02, 0x42, 
+	0x9C, 0x1C, 0x23, 0x1C, 0x1A, 0x1E, 0x5E, 0x1C, 0x14, 0xB2, 0xF6, 0x4A, 0x15, 0x25, 0x00, 0x5D, 
+	0x97, 0x46, 0x6F, 0x97, 0x00, 0x3C, 0x01, 0x57, 0x7D, 0x1C, 0x6F, 0xB2, 0xE4, 0x42, 0xA5, 0xD0, 
+	0x09, 0x46, 0x6D, 0xDA, 0x03, 0x55, 0x15, 0x78, 0x2D, 0x42, 0xA5, 0xE0, 0x06, 0xB2, 0xE4, 0xDD, 
+	0x04, 0x55, 0x94, 0x55, 0x54, 0x1C, 0x23, 0xE0, 0x00, 0xD1, 0xAB, 0x28, 0x00, 0x9E, 0x03, 0x39, 
+	0x01, 0xDA, 0x98, 0x42, 0xB1, 0x3A, 0x01, 0x46, 0x62, 0x42, 0xBA, 0x9F, 0x01, 0x1C, 0x53, 0xDB, 
+	0x05, 0x99, 0x02, 0x01, 0x9B, 0x46, 0x94, 0x93, 0x07, 0xB0, 0x09, 0xE7, 0xF1, 0x46, 0xC0, 0xBD, 
+	0xF0, 0x20, 0x00, 0x02, 0xEC, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x0D, 0x38, 0x20, 0x00, 0x0D, 
+	0x48, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x59, 0xF8, 0x00, 0x00, 0x59, 
+	0xF4, 0x20, 0x00, 0x02, 0x24, 0x4A, 0xD4, 0xB5, 0xF0, 0x68, 0x11, 0xB0, 0x8D, 0x18, 0xD0, 0x23, 
+	0x00, 0x24, 0x00, 0x30, 0xBE, 0x3B, 0x0A, 0x5F, 0x00, 0x41, 0xA0, 0x1E, 0x44, 0x18, 0x09, 0x1C, 
+	0x1D, 0x3F, 0xD5, 0xAE, 0xF1, 0x08, 0xD1, 0xF4, 0x35, 0x8C, 0x60, 0x11, 0x4B, 0xCD, 0x32, 0xBE, 
+	0x68, 0x1B, 0x4B, 0xCC, 0x93, 0x03, 0x68, 0x1B, 0x24, 0x0E, 0x4E, 0xCB, 0x93, 0x05, 0x57, 0x33, 
+	0x3C, 0x01, 0xD1, 0x01, 0x1C, 0x5F, 0x1C, 0x03, 0xE0, 0x73, 0x56, 0xE8, 0x4D, 0xC7, 0xD1, 0xFA, 
+	0x1C, 0x46, 0x1C, 0x5F, 0x55, 0x2B, 0x98, 0x03, 0xD0, 0x6B, 0x19, 0x46, 0x00, 0x9D, 0x00, 0xA0, 
+	0x68, 0x37, 0x9F, 0x03, 0x46, 0xBC, 0x44, 0xBC, 0x58, 0x3F, 0x60, 0x37, 0x46, 0x67, 0x9F, 0x05, 
+	0x9E, 0x05, 0x68, 0x2E, 0x19, 0x75, 0x4F, 0xB9, 0x58, 0x38, 0x26, 0x0A, 0x18, 0x30, 0x1C, 0x30, 
+	0x60, 0x28, 0x18, 0x38, 0x43, 0x58, 0x27, 0x09, 0x30, 0x38, 0x79, 0x55, 0x57, 0xC7, 0xB2, 0x6F, 
+	0x46, 0xBC, 0xDD, 0x00, 0x45, 0xBC, 0x43, 0x5E, 0x72, 0x45, 0x79, 0x90, 0x4D, 0xB0, 0x36, 0x38, 
+	0x19, 0xAE, 0x57, 0xF7, 0x27, 0x0A, 0x42, 0xAF, 0xB2, 0x45, 0x72, 0xB0, 0xDA, 0x00, 0x4F, 0xAB, 
+	0x79, 0xD6, 0x26, 0x0A, 0x96, 0x06, 0x43, 0x58, 0x1C, 0x30, 0x30, 0x38, 0x18, 0x38, 0x57, 0x45, 
+	0x25, 0x0B, 0x46, 0x6D, 0x46, 0xAC, 0x78, 0x2D, 0x35, 0x18, 0x45, 0xAC, 0xB2, 0x6D, 0x46, 0x6F, 
+	0xDD, 0x03, 0x5D, 0xEF, 0x25, 0x18, 0x43, 0x5E, 0x72, 0xC7, 0x7A, 0x10, 0x4D, 0xA0, 0x37, 0x38, 
+	0x19, 0xAF, 0x57, 0xBE, 0x26, 0x0C, 0x42, 0xAE, 0xB2, 0x45, 0x73, 0x38, 0xDA, 0x00, 0x43, 0x58, 
+	0x20, 0x0A, 0x4F, 0x9A, 0x88, 0x56, 0x18, 0x38, 0x96, 0x06, 0x5F, 0x85, 0x26, 0x3E, 0x46, 0xAC, 
+	0x26, 0x18, 0x5F, 0x75, 0x46, 0x6D, 0x26, 0x0A, 0x30, 0x38, 0xDA, 0x03, 0x45, 0xAC, 0x25, 0x18, 
+	0x46, 0x6F, 0x80, 0xC7, 0x5B, 0xEF, 0x48, 0x91, 0x43, 0x5E, 0x19, 0x87, 0x39, 0x01, 0x88, 0x10, 
+	0x8F, 0xBB, 0x87, 0xBB, 0x18, 0xC3, 0x79, 0x10, 0x37, 0x38, 0x18, 0xC3, 0x7A, 0x3B, 0x3A, 0x0A, 
+	0x72, 0x3B, 0xD0, 0x00, 0x2C, 0x00, 0x4F, 0x89, 0xE7, 0x81, 0x1C, 0x3D, 0x1C, 0x26, 0x95, 0x03, 
+	0x35, 0x3C, 0x1C, 0x25, 0x60, 0x39, 0x22, 0x00, 0x48, 0x88, 0x56, 0x9A, 0x18, 0x33, 0xD1, 0x19, 
+	0x32, 0x01, 0x42, 0xB5, 0x70, 0x1D, 0x4B, 0x82, 0xD0, 0x12, 0x68, 0x1A, 0x00, 0xB1, 0x58, 0x50, 
+	0x00, 0xAB, 0x4A, 0x80, 0x50, 0xD0, 0x68, 0x12, 0x48, 0x7D, 0x50, 0xD1, 0x58, 0x51, 0x1C, 0x13, 
+	0x22, 0x0A, 0x18, 0xC0, 0x43, 0x6B, 0x99, 0x03, 0x30, 0x3C, 0xFB, 0x7E, 0xF0, 0x03, 0x35, 0x01, 
+	0x68, 0x3B, 0xDA, 0x05, 0x42, 0x9D, 0x36, 0x01, 0x99, 0x03, 0x91, 0x03, 0x31, 0x0A, 0xD1, 0xD9, 
+	0x2E, 0x0E, 0x68, 0x1B, 0x4B, 0x76, 0xD5, 0x3B, 0x06, 0xDA, 0x78, 0x1B, 0x4B, 0x75, 0xD0, 0x03, 
+	0x2B, 0x00, 0x49, 0x74, 0x20, 0x04, 0xFE, 0xD4, 0xF0, 0x01, 0x4E, 0x73, 0x25, 0x00, 0x1C, 0x69, 
+	0xE0, 0x2C, 0x68, 0x33, 0x01, 0x89, 0x4A, 0x71, 0x68, 0x77, 0x46, 0xA4, 0x91, 0x03, 0x9C, 0x03, 
+	0xE0, 0x12, 0x18, 0x61, 0x1C, 0x99, 0xB2, 0x40, 0x5C, 0x88, 0x2C, 0x0D, 0x1E, 0x44, 0x4C, 0x66, 
+	0xD8, 0x09, 0x38, 0x01, 0x18, 0x20, 0xB2, 0x40, 0x78, 0x00, 0xD0, 0x02, 0x1C, 0x44, 0xB2, 0xC0, 
+	0x30, 0x01, 0x3B, 0x01, 0x54, 0x88, 0xDA, 0xEA, 0x42, 0xBB, 0x46, 0x64, 0x4B, 0x61, 0x2B, 0x00, 
+	0x78, 0x1B, 0x4B, 0x63, 0xD0, 0x09, 0x01, 0xAA, 0x4F, 0x63, 0x19, 0xD2, 0x7D, 0xD9, 0x20, 0x04, 
+	0x23, 0x01, 0xF0, 0x01, 0x93, 0x00, 0x35, 0x01, 0xFE, 0x4D, 0x7E, 0x3B, 0x4F, 0x5D, 0xDB, 0xCE, 
+	0x42, 0x9D, 0x68, 0x1B, 0x4B, 0x5D, 0xDD, 0x10, 0x2B, 0x00, 0x4A, 0x5D, 0x4B, 0x5C, 0x80, 0x11, 
+	0x89, 0x99, 0x80, 0x53, 0x89, 0x1B, 0x78, 0x1B, 0x4B, 0x52, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 
+	0x23, 0x01, 0x20, 0x17, 0x93, 0x00, 0xF0, 0x01, 0x1C, 0x0B, 0x4B, 0x48, 0xFE, 0x33, 0x1C, 0x1D, 
+	0x48, 0x55, 0x49, 0x4F, 0xCD, 0x40, 0x89, 0x47, 0x96, 0x07, 0x8D, 0x0A, 0x97, 0x08, 0xB2, 0x16, 
+	0x68, 0x47, 0x69, 0x86, 0x96, 0x05, 0xB2, 0xB7, 0x97, 0x09, 0x97, 0x04, 0x1B, 0xD2, 0x31, 0x31, 
+	0xB2, 0x92, 0x92, 0x0A, 0x78, 0x09, 0x20, 0x00, 0x4A, 0x3E, 0x68, 0x17, 0x91, 0x06, 0xE0, 0x2F, 
+	0x90, 0x03, 0x23, 0x0A, 0x9A, 0x03, 0xCF, 0x01, 0x43, 0x53, 0x43, 0x48, 0x99, 0x05, 0x18, 0xCB, 
+	0x49, 0x37, 0x5E, 0x99, 0x22, 0x3C, 0x43, 0x59, 0x9B, 0x09, 0xFA, 0x94, 0xF0, 0x03, 0x4A, 0x42, 
+	0x99, 0x08, 0x78, 0x13, 0x18, 0x08, 0x80, 0x28, 0xB2, 0x80, 0xD1, 0x15, 0x2B, 0x00, 0x42, 0xB0, 
+	0xB2, 0x00, 0x9B, 0x06, 0xDA, 0x07, 0x43, 0x58, 0x1B, 0x80, 0x11, 0x80, 0x99, 0x04, 0x80, 0x28, 
+	0x18, 0x08, 0x9A, 0x05, 0xE0, 0x0A, 0x42, 0xB0, 0x1A, 0x10, 0x9B, 0x06, 0xDA, 0x06, 0x43, 0x58, 
+	0x1B, 0x80, 0x11, 0x80, 0x99, 0x0A, 0x80, 0x28, 0x1A, 0x08, 0x35, 0x02, 0x9A, 0x03, 0x92, 0x03, 
+	0x32, 0x01, 0x98, 0x07, 0x9B, 0x03, 0xDB, 0xCB, 0x42, 0x83, 0x49, 0x2E, 0x4D, 0x20, 0x4A, 0x28, 
+	0x68, 0x2D, 0x89, 0x0E, 0x95, 0x05, 0x96, 0x07, 0x68, 0x0D, 0x95, 0x08, 0x8C, 0xD3, 0xB2, 0x1F, 
+	0x69, 0x4D, 0x1C, 0x11, 0xB2, 0xAE, 0x96, 0x06, 0x97, 0x04, 0x78, 0x09, 0x31, 0x2F, 0xB2, 0x9B, 
+	0x1B, 0x9B, 0x32, 0x30, 0x91, 0x09, 0x4E, 0x15, 0x78, 0x12, 0x4B, 0x16, 0x93, 0x0B, 0x92, 0x0A, 
+	0x20, 0x00, 0x36, 0x20, 0x68, 0x1F, 0xE0, 0x50, 0x90, 0x03, 0x23, 0x0A, 0x9A, 0x03, 0xCF, 0x01, 
+	0x43, 0x53, 0x43, 0x48, 0x99, 0x04, 0x18, 0x5B, 0x49, 0x0D, 0x5E, 0x99, 0x22, 0x3C, 0x43, 0x59, 
+	0x9B, 0x08, 0xFA, 0x40, 0xF0, 0x03, 0x4A, 0x18, 0x99, 0x07, 0x78, 0x13, 0x18, 0x08, 0x80, 0x30, 
+	0xB2, 0x80, 0xD1, 0x36, 0x2B, 0x00, 0x42, 0xA8, 0xB2, 0x00, 0x9B, 0x09, 0xDA, 0x28, 0x43, 0x58, 
+	0x1B, 0x40, 0x11, 0x80, 0x99, 0x06, 0x80, 0x30, 0x18, 0x08, 0x46, 0xC0, 0xE0, 0x2B, 0x20, 0x00, 
+	0x02, 0x24, 0x20, 0x00, 0x00, 0x48, 0x20, 0x00, 0x00, 0x44, 0x20, 0x00, 0x02, 0xEC, 0x20, 0x00, 
+	0x00, 0x58, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x64, 0x20, 0x00, 0x10, 0xE4, 0x40, 0x00, 
+	0x20, 0x00, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x20, 0x42, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 
+	0x01, 0x70, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x01, 0xDF, 0x1A, 0x10, 
+	0x9A, 0x04, 0xDA, 0x06, 0x42, 0xA8, 0x1B, 0x40, 0x9B, 0x0A, 0x99, 0x0B, 0x43, 0x58, 0x1A, 0x08, 
+	0x11, 0x80, 0x9A, 0x03, 0x80, 0x30, 0x32, 0x01, 0x36, 0x02, 0x9B, 0x03, 0x92, 0x03, 0x42, 0x83, 
+	0x98, 0x05, 0x4B, 0x1B, 0xDB, 0xAA, 0x32, 0x2A, 0x1C, 0x1A, 0x1C, 0x1A, 0x78, 0x17, 0x78, 0x12, 
+	0x32, 0x2B, 0x5E, 0x5E, 0x21, 0x28, 0x25, 0x26, 0x92, 0x03, 0x33, 0x2C, 0x5F, 0x5A, 0x78, 0x1B, 
+	0x92, 0x04, 0x93, 0x06, 0x49, 0x14, 0x46, 0xB4, 0x25, 0x00, 0x26, 0x00, 0xE0, 0x1D, 0x2B, 0x00, 
+	0x5F, 0x8B, 0x4A, 0x11, 0xD0, 0x16, 0x23, 0x04, 0x18, 0xA8, 0x26, 0x20, 0x5E, 0xC2, 0x2F, 0x00, 
+	0x5F, 0x83, 0x46, 0x66, 0xD0, 0x01, 0x9E, 0x03, 0x1A, 0xB2, 0xD0, 0x01, 0x2E, 0x00, 0x1A, 0xF3, 
+	0x9E, 0x04, 0x2E, 0x00, 0x9E, 0x06, 0x1C, 0x16, 0xD0, 0x02, 0x1C, 0x33, 0x1C, 0x1A, 0x84, 0x03, 
+	0x80, 0x82, 0x31, 0x0A, 0x34, 0x01, 0x78, 0xAF, 0xAE, 0xF1, 0x09, 0x9E, 0x05, 0x35, 0x02, 0xDB, 
+	0xDE, 0x42, 0xB4, 0xBD, 0xF0, 0xB0, 0x0D, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0x60, 0x20, 
+	0x00, 0x02, 0x24, 0x4B, 0x0A, 0xB5, 0x30, 0x33, 0x04, 0x21, 0x00, 0x4A, 0x09, 0x7F, 0xDB, 0x1C, 
+	0x08, 0x24, 0x0A, 0x3B, 0x01, 0xE0, 0x07, 0x1C, 0x25, 0xB2, 0xDB, 0x19, 0x55, 0x43, 0x5D, 0x4D, 
+	0x05, 0x87, 0xA9, 0x2B, 0x00, 0x54, 0xE8, 0x60, 0x13, 0xD1, 0xF5, 0x46, 0xC0, 0xBD, 0x30, 0x20, 
+	0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x01, 0x64, 0x4A, 0x08, 0xB5, 0x00, 0x42, 
+	0x5B, 0x23, 0x01, 0x4B, 0x07, 0x60, 0x53, 0x60, 0x11, 0x21, 0x00, 0xE0, 0x04, 0x78, 0x1B, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x00, 0x40, 0x1D, 0x18, 0x2B, 0x00, 0x52, 0x81, 0xBD, 0x00, 0xD1, 0xF8, 0x20, 
+	0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x43, 0x40, 0x43, 0x49, 0x47, 0x70, 0x18, 0x40, 0xB5, 
+	0xF0, 0x47, 0x70, 0x22, 0x00, 0x4B, 0x83, 0x7F, 0xD9, 0x33, 0x04, 0x1C, 0x0B, 0xB0, 0x87, 0x26, 
+	0x0A, 0x48, 0x81, 0xE0, 0x07, 0x1C, 0x15, 0xB2, 0xDB, 0x3B, 0x01, 0x43, 0x5C, 0x1C, 0x34, 0x87, 
+	0xA2, 0x19, 0x04, 0x72, 0x25, 0x34, 0x38, 0x2B, 0x00, 0x1C, 0x04, 0x4B, 0x7B, 0xD1, 0xF4, 0x1C, 
+	0x0B, 0x68, 0x1A, 0xDD, 0x00, 0x42, 0x91, 0x60, 0x23, 0x1C, 0x13, 0x4A, 0x79, 0x48, 0x78, 0x24, 
+	0x0E, 0x4B, 0x79, 0x3C, 0x01, 0x21, 0xFF, 0x00, 0xA5, 0xB2, 0xE4, 0x50, 0xAB, 0x55, 0x01, 0xD1, 
+	0xF8, 0x2C, 0x00, 0x1C, 0x25, 0x4B, 0x6F, 0x7F, 0xDB, 0x33, 0x04, 0x93, 0x03, 0x1C, 0x26, 0x69, 
+	0x1B, 0x4B, 0x72, 0x4B, 0x6D, 0x93, 0x04, 0x93, 0x05, 0x68, 0x1B, 0x4C, 0x70, 0xE0, 0x47, 0x2B, 
+	0x00, 0x5D, 0x63, 0x4C, 0x6F, 0xD0, 0x42, 0x58, 0xE3, 0x00, 0xAB, 0x01, 0x1B, 0x9C, 0x04, 0x93, 
+	0x01, 0x19, 0x1B, 0x00, 0x6A, 0x4B, 0x6C, 0x18, 0xD3, 0x27, 0x01, 0x42, 0x7F, 0x24, 0x00, 0xE0, 
+	0x20, 0x93, 0x02, 0x43, 0x63, 0x23, 0x0A, 0x18, 0xC3, 0x48, 0x60, 0x5E, 0x5B, 0x21, 0x3C, 0xD0, 
+	0x16, 0x2B, 0x00, 0x00, 0x63, 0x9A, 0x02, 0x88, 0x98, 0x18, 0xC3, 0x4A, 0x5B, 0x88, 0x93, 0x1C, 
+	0x23, 0x1A, 0xC0, 0x00, 0x5B, 0x33, 0x10, 0x9A, 0x02, 0x5A, 0x99, 0x8B, 0x13, 0xB2, 0x00, 0xB2, 
+	0x09, 0x1A, 0xC9, 0xFF, 0x98, 0xF7, 0xFF, 0x42, 0x98, 0x9B, 0x01, 0x1C, 0x27, 0xDA, 0x01, 0x34, 
+	0x01, 0x90, 0x01, 0x98, 0x05, 0xB2, 0xE4, 0xDB, 0xDB, 0x42, 0x84, 0xD0, 0x0D, 0x1C, 0x79, 0x49, 
+	0x50, 0x4B, 0x4F, 0x00, 0xBA, 0x57, 0xD8, 0xD0, 0x04, 0x30, 0x01, 0x9C, 0x01, 0x58, 0x88, 0xDD, 
+	0x03, 0x42, 0xA0, 0x9C, 0x01, 0xE0, 0x00, 0x55, 0xDD, 0x50, 0x8C, 0x9C, 0x03, 0x35, 0x01, 0x42, 
+	0xA3, 0xB2, 0xEB, 0x1C, 0x34, 0xD3, 0xB3, 0x4E, 0x44, 0x25, 0x00, 0x48, 0x44, 0xE0, 0x28, 0xB2, 
+	0x7B, 0x5D, 0x47, 0xD0, 0x21, 0x33, 0x01, 0xB2, 0xFF, 0x00, 0x69, 0x18, 0x71, 0x4B, 0x3E, 0x00, 
+	0x7A, 0x88, 0x89, 0x80, 0x91, 0x18, 0x9A, 0x31, 0x10, 0x1C, 0x29, 0x00, 0x49, 0x1C, 0x3A, 0x32, 
+	0x10, 0x5B, 0x89, 0x52, 0xD1, 0x00, 0x52, 0x1C, 0x10, 0x22, 0x0A, 0x1C, 0x11, 0x43, 0x78, 0x18, 
+	0x1B, 0x43, 0x69, 0x18, 0x71, 0x1C, 0x18, 0x31, 0x3C, 0x30, 0x3C, 0xF9, 0x40, 0xF0, 0x03, 0x00, 
+	0xAA, 0x4B, 0x34, 0x4B, 0x37, 0x58, 0xD2, 0x50, 0xFA, 0x00, 0xBF, 0xB2, 0xED, 0x35, 0x01, 0x42, 
+	0x9D, 0x68, 0x33, 0xE0, 0x3D, 0xDB, 0xD3, 0x57, 0x33, 0x4E, 0x2D, 0xD1, 0x36, 0x33, 0x01, 0x43, 
+	0x63, 0x23, 0x0A, 0x20, 0x3C, 0x18, 0xEB, 0x2B, 0x00, 0x5E, 0x1B, 0x4B, 0x25, 0xD0, 0x2F, 0x33, 
+	0x04, 0x4A, 0x2E, 0x23, 0x00, 0x7F, 0xDF, 0x4E, 0x29, 0xE0, 0x26, 0x2E, 0x00, 0x5C, 0xF6, 0x26, 
+	0x00, 0xD1, 0x20, 0x28, 0x00, 0x5F, 0x90, 0x4A, 0x21, 0xD1, 0x1C, 0x55, 0x11, 0x00, 0x67, 0x48, 
+	0x1D, 0x49, 0x1E, 0x88, 0xBF, 0x19, 0xCF, 0x18, 0x82, 0x00, 0x5A, 0x1C, 0x27, 0x80, 0x97, 0x1C, 
+	0x1A, 0x37, 0x10, 0x5A, 0x7F, 0x00, 0x7F, 0x00, 0x52, 0x32, 0x10, 0x22, 0x0A, 0x52, 0x17, 0x18, 
+	0xC0, 0x43, 0x53, 0x43, 0x63, 0x1C, 0x13, 0x31, 0x3C, 0x18, 0xC9, 0xF0, 0x03, 0x30, 0x3C, 0xE0, 
+	0x04, 0xF8, 0xFF, 0x32, 0x0A, 0x33, 0x01, 0x42, 0xB9, 0xB2, 0xD9, 0x34, 0x01, 0xD3, 0xD5, 0xE0, 
+	0x00, 0xB2, 0xE4, 0x68, 0x2B, 0x4D, 0x0D, 0xDB, 0xBD, 0x42, 0x9C, 0x49, 0x0C, 0x4B, 0x09, 0x7F, 
+	0xDD, 0x33, 0x04, 0x20, 0xFF, 0x4B, 0x12, 0x34, 0x0E, 0x1C, 0x1C, 0x42, 0xAA, 0x78, 0x1A, 0x5C, 
+	0x8A, 0xD2, 0x02, 0xE0, 0x00, 0x70, 0x1A, 0x33, 0x01, 0x70, 0x18, 0xD1, 0xF5, 0x42, 0xA3, 0xBD, 
+	0xF0, 0xB0, 0x07, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x02, 0x24, 0x20, 
+	0x00, 0x03, 0xE8, 0x20, 0x00, 0x10, 0xF8, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x09, 0x24, 0x20, 
+	0x00, 0x01, 0xEC, 0x20, 0x00, 0x00, 0xF8, 0x20, 0x00, 0x09, 0x80, 0x20, 0x00, 0x0D, 0xD8, 0x20, 
+	0x00, 0x02, 0xEC, 0x4B, 0x42, 0xB5, 0xF7, 0x60, 0x19, 0x21, 0x00, 0x24, 0x0A, 0x4B, 0x41, 0x4B, 
+	0x41, 0x60, 0x19, 0x33, 0x04, 0x1C, 0x08, 0x4D, 0x40, 0x7F, 0xDB, 0x46, 0xA4, 0x1C, 0x1A, 0x3A, 
+	0x01, 0xE0, 0x11, 0x1C, 0x26, 0xB2, 0xD2, 0x19, 0xAE, 0x43, 0x56, 0x7A, 0x36, 0x36, 0x38, 0xDA, 
+	0x00, 0x42, 0xB0, 0x46, 0x66, 0x1C, 0x30, 0x19, 0xAE, 0x43, 0x56, 0x5F, 0xF6, 0x27, 0x3C, 0xDA, 
+	0x00, 0x42, 0xB1, 0x2A, 0x00, 0x1C, 0x31, 0x4A, 0x32, 0xD1, 0xEB, 0x60, 0x11, 0x60, 0x50, 0x20, 
+	0x0A, 0x4A, 0x2F, 0x4A, 0x31, 0x68, 0x11, 0x3B, 0x01, 0xE0, 0x07, 0x1C, 0x04, 0xB2, 0xDB, 0x19, 
+	0x14, 0x43, 0x5C, 0x7A, 0x24, 0x34, 0x38, 0x1C, 0x14, 0x19, 0x09, 0xD1, 0xF4, 0x2B, 0x00, 0x60, 
+	0x19, 0x4B, 0x27, 0x2B, 0x00, 0x68, 0x13, 0x4B, 0x26, 0xDD, 0x0F, 0x68, 0x5B, 0x4A, 0x28, 0x80, 
+	0x53, 0x80, 0x11, 0x78, 0x1B, 0x4B, 0x27, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 
+	0x1D, 0x93, 0x00, 0xF0, 0x01, 0x1C, 0x0B, 0x68, 0x23, 0xFB, 0x8F, 0xDD, 0x19, 0x2B, 0x00, 0x23, 
+	0x08, 0x4A, 0x21, 0x4B, 0x21, 0x5E, 0xD1, 0x5F, 0x12, 0x24, 0x0C, 0x33, 0x3D, 0x1C, 0x18, 0x30, 
+	0x3C, 0x78, 0x1B, 0x78, 0x00, 0x43, 0x53, 0x18, 0xC3, 0x11, 0x9B, 0xDC, 0x09, 0x42, 0x99, 0x78, 
+	0x1B, 0x4B, 0x18, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x19, 0x20, 0x00, 0xFB, 0xCC, 0xF0, 0x01, 0xFE, 
+	0x40, 0xF7, 0xFF, 0x4A, 0x17, 0x4B, 0x11, 0x78, 0x12, 0x68, 0x1B, 0xDB, 0x12, 0x42, 0x93, 0x4A, 
+	0x12, 0x4B, 0x0B, 0x8E, 0xD1, 0x68, 0x18, 0x42, 0x88, 0x4B, 0x0A, 0x8F, 0x11, 0xDB, 0x03, 0x42, 
+	0x88, 0x68, 0x58, 0x8F, 0x52, 0xDA, 0x03, 0x42, 0x93, 0x68, 0x5B, 0x4B, 0x0E, 0xDB, 0x07, 0x70, 
+	0x1A, 0x22, 0x01, 0x2B, 0x00, 0xE0, 0x03, 0x4A, 0x0B, 0xD1, 0x01, 0xBD, 0xF7, 0x70, 0x13, 0x20, 
+	0x00, 0x11, 0x4C, 0x20, 0x00, 0x02, 0x0C, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 
+	0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x0D, 0x48, 0x00, 
+	0x00, 0x59, 0x6C, 0x20, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0xF5, 0x45, 0xAB, 0xAE, 0xF1, 0x0A, 
+	0x1C, 0x04, 0xB5, 0x38, 0x2A, 0x00, 0x1C, 0x08, 0x43, 0x54, 0xD0, 0x07, 0x18, 0xD1, 0x43, 0x58, 
+	0x10, 0x4D, 0x18, 0x20, 0xF0, 0x02, 0x19, 0x40, 0xBD, 0x38, 0xFF, 0xBB, 0x1A, 0x43, 0xB5, 0x10, 
+	0x19, 0x1B, 0x17, 0xDC, 0xF7, 0xFF, 0x40, 0x63, 0xBD, 0x10, 0xFF, 0xEB, 0x4B, 0xA9, 0xB5, 0xF0, 
+	0x33, 0x04, 0x25, 0x00, 0x7F, 0xDC, 0xB0, 0x87, 0xE0, 0x46, 0x1C, 0x2E, 0xB2, 0xE4, 0x3C, 0x01, 
+	0x43, 0x62, 0x22, 0x0A, 0x31, 0x38, 0x18, 0x99, 0x28, 0x00, 0x88, 0x88, 0x4F, 0xA2, 0xD0, 0x3D, 
+	0x2F, 0x00, 0x5D, 0x3F, 0x49, 0xA1, 0xD1, 0x2A, 0x29, 0x00, 0x78, 0x09, 0x18, 0x9A, 0xD0, 0x07, 
+	0x32, 0x3C, 0x21, 0x01, 0x23, 0x02, 0x20, 0x1D, 0xF0, 0x01, 0x91, 0x00, 0x20, 0x0A, 0xFB, 0x07, 
+	0x4B, 0x9B, 0x43, 0x60, 0x18, 0x18, 0x49, 0x9B, 0x5F, 0xC2, 0x27, 0x3C, 0x46, 0x94, 0x30, 0x38, 
+	0x5F, 0xCA, 0x27, 0x26, 0x45, 0x94, 0x1C, 0x1F, 0x31, 0x4E, 0xDB, 0x08, 0x49, 0x96, 0x78, 0x0A, 
+	0x68, 0x49, 0x7A, 0x00, 0x11, 0x92, 0x43, 0x4A, 0xDA, 0x16, 0x42, 0x90, 0x43, 0x62, 0x22, 0x0A, 
+	0x87, 0xD5, 0x18, 0xBA, 0x72, 0x16, 0x32, 0x38, 0xE0, 0x08, 0x80, 0x95, 0xB2, 0x00, 0x4A, 0x8D, 
+	0x5F, 0xD2, 0x27, 0x28, 0xDD, 0x08, 0x42, 0x82, 0x72, 0x0E, 0x80, 0xCD, 0x4A, 0x8B, 0x80, 0x8D, 
+	0x50, 0x8D, 0x00, 0xA1, 0x3A, 0x01, 0x68, 0x1A, 0x4B, 0x85, 0x60, 0x1A, 0xD1, 0xB5, 0x2C, 0x00, 
+	0x4B, 0x87, 0x60, 0x1C, 0x4B, 0x7F, 0x73, 0x9C, 0x7F, 0xDC, 0x33, 0x04, 0x3C, 0x01, 0xE0, 0xC7, 
+	0x23, 0x0A, 0xB2, 0xE4, 0x18, 0xED, 0x43, 0x63, 0x35, 0x38, 0x8F, 0xAA, 0xD1, 0x00, 0x2A, 0x00, 
+	0x4B, 0x7C, 0xE0, 0x93, 0x8D, 0x1B, 0xB2, 0x12, 0x1A, 0x52, 0xB2, 0x19, 0x00, 0x5B, 0x10, 0x52, 
+	0x80, 0xAB, 0x18, 0xD3, 0x7B, 0x9A, 0x4B, 0x7A, 0xD1, 0x0D, 0x2A, 0x00, 0x57, 0x12, 0x4A, 0x79, 
+	0xD1, 0x09, 0x2A, 0x00, 0x21, 0x01, 0x4A, 0x78, 0x22, 0x80, 0x70, 0x11, 0x69, 0x50, 0x05, 0xD2, 
+	0x06, 0x00, 0x0E, 0x00, 0x61, 0x51, 0x43, 0x01, 0x73, 0x9A, 0x22, 0x01, 0x4B, 0x71, 0x4E, 0x73, 
+	0x78, 0x33, 0x57, 0x1A, 0xDB, 0x70, 0x42, 0x9A, 0x78, 0x1A, 0x4B, 0x6F, 0xD0, 0x01, 0x2A, 0x00, 
+	0x70, 0x1A, 0x22, 0x00, 0x00, 0x62, 0x4D, 0x66, 0x33, 0x01, 0x68, 0x2B, 0x18, 0xAB, 0x60, 0x2B, 
+	0x5F, 0xD9, 0x27, 0x04, 0x18, 0x9A, 0x4B, 0x6A, 0x5F, 0x90, 0x26, 0x04, 0x32, 0x10, 0x1C, 0x22, 
+	0x5F, 0x57, 0x00, 0x52, 0x5E, 0xD7, 0x97, 0x03, 0x17, 0xD3, 0x1A, 0x0A, 0x18, 0xD2, 0x9E, 0x03, 
+	0x1B, 0xF3, 0x40, 0x5A, 0x19, 0x9B, 0x17, 0xDE, 0x18, 0xD3, 0x40, 0x73, 0x4B, 0x59, 0x93, 0x04, 
+	0x5E, 0x9E, 0x22, 0x2E, 0x1C, 0x32, 0x9B, 0x04, 0xF7, 0xFF, 0x96, 0x05, 0x9A, 0x05, 0xFF, 0x39, 
+	0x1C, 0x06, 0x9B, 0x04, 0x1C, 0x38, 0x99, 0x03, 0xFF, 0x32, 0xF7, 0xFF, 0x1C, 0x13, 0x4A, 0x4D, 
+	0x78, 0x1B, 0x33, 0x2D, 0xB2, 0x5B, 0x1C, 0x2A, 0xDD, 0x07, 0x42, 0x9E, 0x69, 0xC9, 0x49, 0x55, 
+	0x42, 0xBE, 0x1A, 0xCF, 0x1E, 0x4E, 0xDB, 0x03, 0xE0, 0x00, 0x1A, 0xF6, 0x4B, 0x45, 0x1C, 0x1E, 
+	0x78, 0x1B, 0x33, 0x2E, 0x42, 0x98, 0xB2, 0x5B, 0x49, 0x4E, 0xDD, 0x07, 0x1A, 0xCF, 0x6A, 0x09, 
+	0xDB, 0x03, 0x42, 0xB8, 0x1A, 0xC0, 0x1E, 0x48, 0x1C, 0x18, 0xE0, 0x00, 0x18, 0xD3, 0x00, 0x63, 
+	0x1C, 0x23, 0x80, 0x9E, 0x00, 0x5B, 0x33, 0x10, 0x25, 0x0A, 0x52, 0xE8, 0x4B, 0x3D, 0x43, 0x65, 
+	0x20, 0x30, 0x4E, 0x43, 0x19, 0x76, 0x5E, 0x1F, 0x21, 0x3C, 0x19, 0x55, 0x22, 0x3C, 0x5E, 0x70, 
+	0x1C, 0x3A, 0x5E, 0xA9, 0xFF, 0x0A, 0xF7, 0xFF, 0x87, 0xA8, 0x36, 0x38, 0x7A, 0x30, 0x35, 0x38, 
+	0x1C, 0x3A, 0x7A, 0x29, 0xFF, 0x02, 0xF7, 0xFF, 0x4B, 0x31, 0x72, 0x28, 0x18, 0x99, 0x00, 0x62, 
+	0x88, 0x89, 0x48, 0x37, 0x80, 0x91, 0x18, 0x82, 0x32, 0x10, 0x1C, 0x22, 0x5A, 0xD1, 0x00, 0x52, 
+	0x22, 0x0A, 0x52, 0x11, 0x43, 0x61, 0x1C, 0x11, 0x18, 0x59, 0x18, 0x40, 0x30, 0x3C, 0x1C, 0x0D, 
+	0xF0, 0x02, 0x31, 0x3C, 0x23, 0x3C, 0xFF, 0x07, 0x35, 0x38, 0x5E, 0xEA, 0x2A, 0x00, 0x4B, 0x29, 
+	0x49, 0x24, 0xD0, 0x0C, 0x31, 0x32, 0x5D, 0x1A, 0xB2, 0x50, 0x78, 0x09, 0xDA, 0x06, 0x42, 0x88, 
+	0x55, 0x1A, 0x32, 0x01, 0x42, 0x5B, 0x23, 0x01, 0xE0, 0x00, 0x80, 0xAB, 0x4D, 0x1C, 0x55, 0x1A, 
+	0xD0, 0x00, 0x2C, 0x00, 0x4E, 0x22, 0xE7, 0x33, 0x68, 0x32, 0x68, 0x29, 0x42, 0x91, 0x4B, 0x22, 
+	0x68, 0x19, 0xDA, 0x25, 0x31, 0x01, 0x48, 0x17, 0x30, 0x3E, 0x60, 0x19, 0xB2, 0x40, 0x78, 0x00, 
+	0xDA, 0x1C, 0x42, 0x81, 0x60, 0x2A, 0x4B, 0x0F, 0x7F, 0xDC, 0x33, 0x04, 0x3C, 0x01, 0xE0, 0x14, 
+	0x00, 0x63, 0xB2, 0xE4, 0x88, 0x92, 0x18, 0xF2, 0x80, 0x9A, 0x18, 0xEB, 0x33, 0x10, 0x1C, 0x23, 
+	0x5B, 0x9A, 0x00, 0x5B, 0x22, 0x0A, 0x53, 0x5A, 0x43, 0x61, 0x1C, 0x11, 0x18, 0x71, 0x18, 0x68, 
+	0x31, 0x3C, 0x30, 0x3C, 0xFE, 0xC6, 0xF0, 0x02, 0xD1, 0xE8, 0x2C, 0x00, 0x60, 0x1C, 0xE0, 0x00, 
+	0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xEC, 0x20, 0x00, 0x01, 0xEB, 
+	0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x02, 0x0C, 0x20, 0x00, 0x00, 0xF8, 
+	0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x11, 0x3E, 0x20, 0x00, 0x01, 0xE2, 0x20, 0x00, 0x0D, 0x7A, 
+	0x20, 0x00, 0x03, 0x20, 0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x01, 0x60, 0x4B, 0x31, 0xB5, 0xF0, 
+	0x78, 0x1E, 0x4D, 0x31, 0x27, 0x00, 0x4B, 0x31, 0x60, 0x2F, 0x1C, 0x1A, 0x78, 0x12, 0x32, 0x2B, 
+	0x92, 0x04, 0xB0, 0x89, 0x1C, 0x1A, 0x00, 0x50, 0x32, 0x32, 0x90, 0x06, 0x92, 0x07, 0x78, 0x12, 
+	0x5E, 0x99, 0x22, 0x30, 0x91, 0x05, 0x68, 0x6B, 0x97, 0x03, 0x93, 0x02, 0x3E, 0x01, 0xE0, 0x42, 
+	0x1D, 0x33, 0xB2, 0xF6, 0x93, 0x01, 0x00, 0x5B, 0x2B, 0x00, 0x5A, 0xEB, 0x98, 0x04, 0xD0, 0x34, 
+	0x1A, 0x1B, 0xB2, 0x1B, 0x10, 0x5B, 0x99, 0x06, 0x9A, 0x01, 0x18, 0xCB, 0xB2, 0x9B, 0x48, 0x20, 
+	0x00, 0xF2, 0x52, 0xAB, 0x18, 0x84, 0x58, 0x81, 0xB2, 0x1B, 0x98, 0x07, 0xDA, 0x07, 0x42, 0x81, 
+	0x31, 0x01, 0x48, 0x1B, 0x99, 0x01, 0x50, 0x81, 0x60, 0x63, 0x22, 0x00, 0xE0, 0x21, 0x52, 0x6A, 
+	0x37, 0x01, 0x68, 0x60, 0x17, 0xD1, 0x1A, 0x1A, 0x18, 0x50, 0x46, 0x84, 0x40, 0x48, 0x9A, 0x05, 
+	0x90, 0x00, 0x18, 0x11, 0x43, 0x42, 0x46, 0x60, 0x9A, 0x00, 0x46, 0x94, 0x46, 0x62, 0x43, 0x53, 
+	0x10, 0x4B, 0x18, 0xD0, 0xF0, 0x02, 0x18, 0xC0, 0x9B, 0x01, 0xFD, 0xF3, 0x60, 0x60, 0x99, 0x03, 
+	0x42, 0x81, 0x52, 0xE8, 0xE0, 0x05, 0xDB, 0x04, 0x00, 0xF2, 0x48, 0x09, 0xE0, 0x01, 0x50, 0x83, 
+	0x90, 0x03, 0x96, 0x02, 0xD1, 0xBA, 0x2E, 0x00, 0xB0, 0x09, 0x99, 0x02, 0x60, 0x69, 0x60, 0x2F, 
+	0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x09, 0x48, 0x4B, 0x27, 0xB5, 0xF7, 0x33, 0x04, 0x49, 0x27, 0x4A, 0x27, 0x7F, 0xDB, 
+	0xE0, 0x42, 0x48, 0x27, 0xB2, 0xDB, 0x3B, 0x01, 0x34, 0x14, 0x1C, 0x1C, 0x19, 0x04, 0x00, 0x64, 
+	0xC7, 0x44, 0xAE, 0xF1, 0x0B, 0x5F, 0x64, 0x25, 0x04, 0xD0, 0x27, 0x2C, 0x00, 0x43, 0x5C, 0x24, 
+	0x0A, 0x26, 0x3C, 0x19, 0x0C, 0x2C, 0x00, 0x5F, 0xA4, 0x00, 0x5C, 0xD0, 0x20, 0x88, 0xB6, 0x19, 
+	0x0E, 0xB2, 0x37, 0x19, 0x05, 0x27, 0x04, 0x46, 0xBC, 0x46, 0x65, 0x5F, 0xEF, 0x10, 0x6F, 0x1B, 
+	0xED, 0x19, 0x14, 0x19, 0xBE, 0x1C, 0x1C, 0x80, 0xA6, 0x00, 0x64, 0x34, 0x10, 0x1C, 0x1C, 0x5B, 
+	0x0E, 0xB2, 0x37, 0x34, 0x0C, 0x46, 0xBC, 0x00, 0x64, 0x46, 0x67, 0x5E, 0x25, 0x10, 0x7F, 0x1B, 
+	0x7F, 0x52, 0xA6, 0x19, 0xBE, 0x26, 0x01, 0x4C, 0x10, 0xE0, 0x10, 0x54, 0xE6, 0x00, 0x5C, 0x4D, 
+	0x0B, 0x88, 0xB6, 0x19, 0x2E, 0x80, 0xA6, 0x19, 0x14, 0x36, 0x10, 0x1C, 0x1E, 0x00, 0x76, 0x1C, 
+	0x1C, 0x34, 0x0C, 0x5B, 0x76, 0x53, 0x16, 0x00, 0x64, 0x26, 0x00, 0x4C, 0x07, 0x2B, 0x00, 0x54, 
+	0xE6, 0x68, 0x0B, 0xD1, 0xBA, 0xBD, 0xF7, 0x60, 0x13, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 
+	0x9C, 0x20, 0x00, 0x09, 0x80, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x01, 0xEC, 0x4A, 0x35, 0xB5, 
+	0xF7, 0x1C, 0x11, 0x4B, 0x35, 0x32, 0x34, 0x31, 0x33, 0x78, 0x12, 0x78, 0x0E, 0x7F, 0xDB, 0x33, 
+	0x04, 0x92, 0x01, 0x49, 0x32, 0x4A, 0x32, 0x46, 0xB4, 0x48, 0x32, 0xE0, 0x4B, 0xB2, 0xDB, 0x3B, 
+	0x01, 0x98, 0x01, 0x5C, 0xC4, 0xD1, 0x00, 0x2C, 0x00, 0x00, 0x5E, 0x46, 0x60, 0x19, 0x96, 0x19, 
+	0x8D, 0x5F, 0xF6, 0x27, 0x04, 0x96, 0x00, 0x88, 0xAD, 0xB2, 0x2E, 0x9F, 0x00, 0x17, 0xF7, 0x1B, 
+	0xBE, 0x40, 0x7E, 0x19, 0xF6, 0xDA, 0x10, 0x42, 0x86, 0x36, 0x0C, 0x1C, 0x1E, 0x5E, 0xB6, 0x00, 
+	0x76, 0x37, 0x10, 0x1C, 0x1F, 0x00, 0x7F, 0x96, 0x00, 0x9E, 0x00, 0x5F, 0xCF, 0x17, 0xFE, 0x1B, 
+	0xF7, 0x40, 0x77, 0x19, 0xBF, 0x42, 0x87, 0x97, 0x00, 0x00, 0x58, 0xDB, 0x18, 0x1C, 0x1E, 0x18, 
+	0x10, 0x36, 0x10, 0x80, 0x85, 0x1C, 0x18, 0x4D, 0x19, 0x30, 0x0C, 0x00, 0x76, 0x00, 0x40, 0x5B, 
+	0x75, 0x1C, 0x18, 0x52, 0x15, 0x00, 0x40, 0x30, 0x14, 0x27, 0x04, 0x18, 0x10, 0x28, 0x00, 0x5F, 
+	0xC0, 0x2C, 0x00, 0xDD, 0x04, 0x48, 0x13, 0xD1, 0x02, 0x54, 0xC4, 0x24, 0x01, 0x43, 0x5C, 0x24, 
+	0x0A, 0x1C, 0x18, 0x4D, 0x0E, 0x30, 0x14, 0x19, 0x2C, 0x00, 0x40, 0x4D, 0x0D, 0x18, 0x28, 0x8F, 
+	0xA4, 0x2B, 0x00, 0x80, 0x84, 0x68, 0x0A, 0xD1, 0xB1, 0x49, 0x0B, 0x4B, 0x09, 0x4B, 0x0B, 0x60, 
+	0x1A, 0x4B, 0x0B, 0x78, 0x1A, 0x4A, 0x0B, 0x70, 0x1A, 0xCA, 0x31, 0x1C, 0x0B, 0xCA, 0xC0, 0xC3, 
+	0x31, 0xBD, 0xF7, 0xC3, 0xC0, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 
+	0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x01, 0x64, 0x20, 0x00, 0x00, 0xCC, 0x20, 0x00, 0x00, 
+	0xF5, 0x20, 0x00, 0x00, 0xF4, 0x20, 0x00, 0x00, 0xE0, 0x48, 0x19, 0xB5, 0xF7, 0x42, 0x5B, 0x23, 
+	0x01, 0x4B, 0x18, 0x60, 0x43, 0x4B, 0x18, 0x78, 0x1A, 0x33, 0x2B, 0x1C, 0x19, 0x31, 0x2A, 0x78, 
+	0x1E, 0x23, 0x00, 0x78, 0x0F, 0xE0, 0x1E, 0x46, 0xB4, 0xB2, 0xD2, 0x3A, 0x01, 0x00, 0x51, 0x4C, 
+	0x13, 0xB2, 0x0E, 0x5A, 0x61, 0x17, 0xF6, 0x43, 0xF6, 0x1D, 0x11, 0x40, 0x0E, 0xB2, 0xB5, 0x00, 
+	0x49, 0x2D, 0x00, 0x52, 0x0E, 0x4E, 0x0E, 0xD0, 0x0F, 0x5F, 0x8E, 0xB2, 0x2D, 0xDC, 0x04, 0x2E, 
+	0x00, 0xDA, 0x07, 0x42, 0xBD, 0x52, 0x0D, 0x25, 0x00, 0x45, 0x65, 0xE0, 0x05, 0x26, 0x00, 0xDA, 
+	0x02, 0xE0, 0x00, 0x52, 0x0E, 0x2A, 0x00, 0x33, 0x01, 0x4A, 0x01, 0xD1, 0xDE, 0xBD, 0xF7, 0x60, 
+	0x13, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x0D, 
+	0x3C, 0x20, 0x00, 0x00, 0xCC, 0x80, 0x08, 0xF3, 0xEF, 0xBA, 0x00, 0x47, 0x70, 0xBA, 0x40, 0x47, 
+	0x70, 0xBA, 0xC0, 0x47, 0x70, 0xB5, 0x70, 0x47, 0x70, 0xDA, 0x16, 0x28, 0x00, 0x23, 0x0F, 0xB2, 
+	0xC0, 0x3B, 0x08, 0x40, 0x03, 0x08, 0x9B, 0x4A, 0x12, 0x18, 0x9B, 0x00, 0x9B, 0x40, 0x10, 0x22, 
+	0x03, 0x22, 0xFF, 0x40, 0x90, 0x1C, 0x14, 0x68, 0x5D, 0x01, 0x89, 0x40, 0x84, 0x40, 0x0A, 0x43, 
+	0xA5, 0x1C, 0x28, 0x40, 0x82, 0x60, 0x58, 0x43, 0x10, 0x24, 0x03, 0xE0, 0x11, 0x4B, 0x09, 0x08, 
+	0x82, 0x32, 0xC0, 0x40, 0x20, 0x00, 0x92, 0x40, 0xA0, 0x58, 0xD5, 0x24, 0xFF, 0x40, 0x86, 0x1C, 
+	0x26, 0x43, 0xB5, 0x01, 0x89, 0x40, 0x84, 0x40, 0x0C, 0x43, 0x20, 0x1C, 0x28, 0xBD, 0x70, 0x50, 
+	0xD0, 0xE0, 0x00, 0xED, 0x18, 0xE0, 0x00, 0xE1, 0x00, 0x22, 0x40, 0x4B, 0x08, 0x20, 0x7F, 0x68, 
+	0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 
+	0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 
+	0x08, 0x22, 0x3F, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 
+	0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 
+	0x70, 0x20, 0x00, 0x00, 0x08, 0x4A, 0x08, 0x4B, 0x07, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x89, 0x04, 
+	0x89, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 
+	0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x40, 0x4B, 
+	0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 
+	0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 
+	0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x20, 0x4B, 0x08, 0x20, 0x7F, 0x68, 
+	0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 
+	0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 
+	0x08, 0x22, 0x5F, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 
+	0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 
+	0x70, 0x20, 0x00, 0x00, 0x08, 0x21, 0xBE, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 
+	0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 
+	0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x20, 0x4B, 
+	0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 
+	0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 
+	0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x00, 0x80, 0x6C, 
+	0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x10, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 
+	0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 
+	0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x6F, 0x4B, 
+	0x07, 0x20, 0x7F, 0x68, 0x19, 0x59, 0xAA, 0xAE, 0xF1, 0x0C, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 
+	0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4B, 0x0B, 0xB5, 0x00, 0x28, 0x00, 0x68, 0x19, 0x06, 0x49, 
+	0xD0, 0x04, 0x22, 0x10, 0x0E, 0x49, 0xE0, 0x01, 0x43, 0x11, 0x40, 0x11, 0x22, 0x6F, 0x20, 0x7F, 
+	0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x08, 0x21, 0xDE, 0x4B, 0x07, 0x01, 0xC9, 
+	0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 
+	0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 
+	0x80, 0xFF, 0x22, 0x10, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 
+	0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 
+	0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 
+	0x23, 0x80, 0x00, 0xC0, 0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x01, 0x4B, 0x08, 0x20, 0x7F, 
+	0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x00, 0x08, 0x22, 0x7E, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 
+	0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x21, 0xFC, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 
+	0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 
+	0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x01, 
+	0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 
+	0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0xC0, 
+	0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x02, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 
+	0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 
+	0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x7D, 
+	0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x00, 0x08, 0x21, 0xFA, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 
+	0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x02, 0x4B, 0x08, 0x68, 0x18, 
+	0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0x80, 0x6C, 0x18, 0x47, 0x70, 
+	0x0F, 0xC0, 0x22, 0x04, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 
+	0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x7B, 0x4B, 0x07, 0x20, 0x7F, 
+	0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 
+	0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4B, 0x0B, 
+	0xB5, 0x00, 0x28, 0x00, 0x68, 0x19, 0x06, 0x49, 0xD0, 0x04, 0x22, 0x04, 0x0E, 0x49, 0xE0, 0x01, 
+	0x43, 0x11, 0x40, 0x11, 0x22, 0x7B, 0x20, 0x7F, 0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 
+	0x00, 0x08, 0x21, 0xF6, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 
+	0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x04, 0x4B, 0x08, 0x68, 0x18, 
+	0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0x40, 0x6C, 0x18, 0x47, 0x70, 
+	0x0F, 0xC0, 0x23, 0x80, 0xB5, 0x10, 0x1D, 0x04, 0x05, 0xDB, 0x22, 0x3F, 0x69, 0x98, 0x43, 0x90, 
+	0x40, 0x14, 0x24, 0x01, 0x43, 0x20, 0x1C, 0x88, 0x61, 0x98, 0x18, 0x41, 0x40, 0x21, 0x02, 0x11, 
+	0x40, 0x0A, 0x4A, 0x02, 0x69, 0x98, 0x43, 0x0A, 0x40, 0x02, 0xBD, 0x10, 0x61, 0x9A, 0xFF, 0xFF, 
+	0xC0, 0xFF, 0x22, 0x7F, 0x4B, 0x06, 0x23, 0x80, 0x68, 0x19, 0x6C, 0x18, 0x05, 0xDB, 0x43, 0x90, 
+	0x39, 0x01, 0x1C, 0x02, 0x40, 0x11, 0x64, 0x1A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x09, 0x18, 0x05, 0xDB, 0x23, 0x80, 0x21, 0x7F, 0x6C, 0x1A, 0x21, 0x01, 0x43, 0x8A, 0x64, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x47, 0x70, 0x69, 0xDA, 0x05, 0xDB, 0x43, 0x8A, 0x21, 0x0F, 0x43, 0x0A, 
+	0x21, 0x02, 0x69, 0xDA, 0x61, 0xDA, 0x43, 0x8A, 0x21, 0xF0, 0x43, 0x0A, 0x21, 0x30, 0x4A, 0x0C, 
+	0x61, 0xDA, 0x39, 0x01, 0x79, 0x11, 0x77, 0x59, 0xB2, 0xC9, 0x49, 0x0A, 0x69, 0xD8, 0x20, 0x80, 
+	0x40, 0x01, 0x43, 0x01, 0x02, 0xC0, 0x69, 0xD8, 0x61, 0xD9, 0x40, 0x01, 0x49, 0x07, 0x03, 0xC0, 
+	0x20, 0xA0, 0x61, 0xD9, 0x43, 0x01, 0x3A, 0x01, 0x79, 0x92, 0x77, 0xDA, 0xB2, 0xD2, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x02, 0x04, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0x4A, 0x1A, 
+	0xB5, 0x30, 0x88, 0x11, 0x4B, 0x1A, 0x18, 0xC9, 0x4C, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x8C, 0x18, 
+	0xB2, 0x89, 0x8C, 0x59, 0x84, 0x19, 0x84, 0x59, 0x21, 0x00, 0x4D, 0x16, 0x88, 0x50, 0xB2, 0x89, 
+	0x19, 0x01, 0x84, 0x99, 0x8C, 0x9A, 0x8C, 0xDC, 0x1E, 0x42, 0x19, 0x44, 0xB2, 0x92, 0xB2, 0xA4, 
+	0x84, 0xDA, 0x85, 0x1C, 0x8D, 0x1D, 0x19, 0x00, 0x4C, 0x10, 0x8D, 0x5C, 0xB2, 0x80, 0x8D, 0x98, 
+	0x85, 0x58, 0x8D, 0xD8, 0x85, 0x99, 0x8E, 0x18, 0x85, 0xDA, 0x8E, 0x58, 0x86, 0x19, 0x8E, 0x98, 
+	0x86, 0x5A, 0x8E, 0xD8, 0x86, 0x99, 0x8F, 0x18, 0x86, 0xDA, 0xC0, 0x55, 0xAE, 0xF1, 0x0D, 0x8F, 
+	0x58, 0x87, 0x19, 0x8F, 0x98, 0x87, 0x5A, 0x8F, 0xD9, 0x87, 0x99, 0xBD, 0x30, 0x87, 0xDA, 0x20, 
+	0x00, 0x02, 0x04, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x05, 0xFF, 0x00, 
+	0x00, 0x01, 0xFF, 0x4B, 0x22, 0xB5, 0x30, 0x68, 0x1A, 0x24, 0xEE, 0x40, 0x14, 0x01, 0xE4, 0x68, 
+	0x1A, 0x48, 0x20, 0x40, 0x02, 0x21, 0x7F, 0x60, 0x1A, 0x43, 0x22, 0x22, 0x80, 0x68, 0x1C, 0x69, 
+	0x15, 0x05, 0xD2, 0x4C, 0x1C, 0x61, 0x14, 0x2C, 0x00, 0x7C, 0xA4, 0x68, 0x1C, 0xD0, 0x16, 0x04, 
+	0x64, 0x25, 0x04, 0x43, 0x2C, 0x0E, 0x64, 0x40, 0x0C, 0x68, 0x1D, 0x40, 0x28, 0x02, 0x24, 0x60, 
+	0x18, 0x43, 0x20, 0x69, 0x14, 0x68, 0x18, 0x68, 0x1C, 0x61, 0x10, 0x40, 0x20, 0x20, 0x7B, 0x43, 
+	0x8C, 0x68, 0x1C, 0x43, 0x01, 0x1C, 0x21, 0xE0, 0x15, 0x60, 0x19, 0x25, 0x04, 0x68, 0x1C, 0x0E, 
+	0x64, 0x06, 0x64, 0x68, 0x1D, 0x43, 0x2C, 0x43, 0x8D, 0x40, 0x0C, 0x43, 0x21, 0x1C, 0x29, 0x68, 
+	0x19, 0x60, 0x19, 0x61, 0x11, 0x69, 0x14, 0x21, 0xF6, 0x68, 0x1C, 0x40, 0x21, 0x01, 0xC9, 0x40, 
+	0x20, 0x68, 0x1C, 0x60, 0x18, 0x43, 0x08, 0x69, 0x11, 0x68, 0x1B, 0xBD, 0x30, 0x61, 0x13, 0x20, 
+	0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0xB6, 0x72, 0xB5, 0x00, 0x22, 
+	0x01, 0x4B, 0x0F, 0x4B, 0x0F, 0x70, 0x1A, 0x4B, 0x0F, 0x7C, 0x9A, 0xD0, 0x07, 0x2A, 0x00, 0x21, 
+	0xF6, 0x68, 0x1A, 0x40, 0x11, 0x01, 0xC9, 0x4A, 0x0C, 0x68, 0x18, 0xE0, 0x05, 0x40, 0x02, 0x22, 
+	0x7B, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x82, 0x20, 0x7F, 0x60, 0x1A, 0x43, 0x0A, 0x23, 
+	0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0xB6, 0x62, 0x61, 0x1A, 0x46, 0xC0, 0xBD, 0x00, 0x20, 
+	0x00, 0x00, 0x64, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0xB6, 
+	0x72, 0xB5, 0x00, 0x22, 0x00, 0x4B, 0x10, 0x4B, 0x10, 0x70, 0x1A, 0x4B, 0x10, 0x7C, 0x9A, 0x2A, 
+	0x00, 0x68, 0x19, 0x04, 0x49, 0xD0, 0x08, 0x0E, 0x49, 0x22, 0x04, 0x68, 0x18, 0x43, 0x11, 0x02, 
+	0x09, 0x4A, 0x0C, 0xE0, 0x06, 0x40, 0x02, 0x22, 0x04, 0x06, 0x49, 0x43, 0x11, 0x0E, 0x49, 0x20, 
+	0x7F, 0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 
+	0x1A, 0x69, 0x19, 0xBD, 0x00, 0xB6, 0x62, 0x20, 0x00, 0x00, 0x64, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x78, 0x18, 0x4B, 0x01, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x64, 0x23, 0x80, 0xB5, 0x00, 0x6C, 0x19, 0x05, 0xDB, 0x01, 0xD2, 0x22, 0x80, 0x64, 
+	0x1A, 0x43, 0x0A, 0x21, 0x80, 0x4A, 0x23, 0x00, 0x49, 0x68, 0x10, 0x60, 0x11, 0x43, 0x01, 0x68, 
+	0x99, 0x68, 0x12, 0x6C, 0x19, 0x60, 0x9A, 0x02, 0x12, 0x22, 0x80, 0x64, 0x1A, 0x43, 0x0A, 0x4A, 
+	0x1D, 0x6C, 0x19, 0x64, 0x1A, 0x40, 0x0A, 0x22, 0x7F, 0x4B, 0x1C, 0x4B, 0x1C, 0x7B, 0x59, 0x68, 
+	0x18, 0x40, 0x11, 0x04, 0x09, 0x4A, 0x1B, 0x43, 0x0A, 0x40, 0x02, 0x68, 0x19, 0x60, 0x1A, 0x05, 
+	0xD2, 0x22, 0xA0, 0x60, 0x91, 0x68, 0x90, 0x49, 0x17, 0x68, 0x18, 0x20, 0x84, 0x40, 0x01, 0x43, 
+	0x01, 0x05, 0xC0, 0x68, 0x19, 0x60, 0x19, 0x60, 0x91, 0x68, 0x90, 0x78, 0x09, 0x49, 0x13, 0x29, 
+	0x00, 0xB2, 0x49, 0x29, 0x01, 0xD0, 0x02, 0xE0, 0x03, 0xD1, 0x0C, 0x49, 0x10, 0x68, 0x18, 0xE0, 
+	0x03, 0x40, 0x01, 0x21, 0x80, 0x68, 0x18, 0x43, 0x01, 0x04, 0x09, 0x68, 0x1B, 0x60, 0x19, 0x60, 
+	0x93, 0x68, 0x91, 0x05, 0xDB, 0x23, 0x80, 0x4A, 0x0A, 0x6C, 0x19, 0x64, 0x1A, 0x40, 0x0A, 0x46, 
+	0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x14, 0xFF, 0xFF, 0x7F, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x00, 0x0C, 0xFF, 0x80, 0xFF, 0xFF, 0x80, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x02, 0xFA, 0xFF, 
+	0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0x22, 0x01, 0x4B, 0x04, 0x23, 0x80, 0x70, 0x1A, 0x6C, 
+	0x99, 0x05, 0xDB, 0x64, 0x99, 0x43, 0x91, 0x47, 0x70, 0x70, 0x1A, 0x20, 0x00, 0x00, 0x00, 0x23, 
+	0x01, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x13, 0x70, 0x53, 0x05, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x02, 0x4B, 0x06, 0xB5, 0x00, 0x78, 0x1A, 0xB6, 0x72, 0xD0, 0x04, 0x2A, 0x00, 0x46, 
+	0xC0, 0x46, 0xC0, 0xBF, 0x30, 0xB6, 0x62, 0xB6, 0x62, 0xE7, 0xF6, 0x46, 0xC0, 0xBD, 0x00, 0x20, 
+	0x00, 0x00, 0x02, 0x4B, 0x09, 0xB5, 0x38, 0x78, 0x9A, 0x49, 0x09, 0x43, 0x51, 0x79, 0x1C, 0x1C, 
+	0x05, 0x4B, 0x08, 0x48, 0x08, 0x18, 0xC9, 0xF8, 0x7A, 0xF0, 0x02, 0x1C, 0x29, 0x4B, 0x06, 0x43, 
+	0x58, 0x34, 0x01, 0xF0, 0x02, 0x40, 0xA1, 0xBD, 0x38, 0xF8, 0x73, 0x20, 0x00, 0x0A, 0xAA, 0xFF, 
+	0xFF, 0xFE, 0x44, 0x00, 0x02, 0x24, 0xFE, 0x00, 0x0F, 0x42, 0x40, 0x68, 0x19, 0x4B, 0x05, 0x05, 
+	0xDB, 0x23, 0x80, 0x02, 0x09, 0x69, 0x5A, 0x0A, 0x09, 0x0E, 0x12, 0x43, 0x0A, 0x06, 0x12, 0x47, 
+	0x70, 0x61, 0x5A, 0x20, 0x00, 0x00, 0x04, 0x60, 0x18, 0x4B, 0x01, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x04, 0x22, 0x01, 0x4B, 0x05, 0x23, 0x80, 0x70, 0x1A, 0x69, 0x59, 0x05, 0xDB, 0x04, 
+	0x52, 0x22, 0x80, 0x61, 0x5A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x01, 0x4B, 
+	0x05, 0xB5, 0x00, 0x78, 0x1A, 0xB6, 0x72, 0xD0, 0x03, 0x2A, 0x00, 0x46, 0xC0, 0x46, 0xC0, 0xE7, 
+	0xF7, 0xB6, 0x62, 0xBD, 0x00, 0xB6, 0x62, 0x20, 0x00, 0x00, 0x00, 0x4B, 0x10, 0xB5, 0x00, 0x05, 
+	0x9A, 0x68, 0x1B, 0x4A, 0x0F, 0xD5, 0x0C, 0xB6, 0x72, 0x4B, 0x0F, 0x29, 0x00, 0x78, 0x11, 0x78, 
+	0x19, 0xD1, 0x02, 0xD0, 0x11, 0x29, 0x00, 0x46, 0xC0, 0x46, 0xC0, 0xE7, 0xF4, 0xB6, 0x62, 0x4B, 
+	0x09, 0x4A, 0x08, 0x78, 0x11, 0xB6, 0x72, 0xD1, 0x02, 0x29, 0x00, 0x29, 0x00, 0x78, 0x19, 0x46, 
+	0xC0, 0xD0, 0x04, 0xB6, 0x62, 0x46, 0xC0, 0xE7, 0xF3, 0xBF, 0x30, 0xBD, 0x00, 0xB6, 0x62, 0x20, 
+	0x00, 0x00, 0x58, 0x20, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x49, 0x13, 0xB5, 0x70, 0x24, 
+	0x04, 0x4B, 0x13, 0x4B, 0x13, 0x60, 0x19, 0x68, 0x1A, 0x4D, 0x13, 0x60, 0x1A, 0x43, 0x22, 0x24, 
+	0x02, 0x68, 0x1A, 0x60, 0x1A, 0x43, 0xA2, 0x24, 0x01, 0x68, 0x1A, 0x4C, 0x0F, 0x43, 0x22, 0x22, 
+	0x00, 0x60, 0x1A, 0x4A, 0x0E, 0x60, 0x22, 0x78, 0x2E, 0x60, 0x11, 0x43, 0x70, 0x79, 0x2D, 0x40, 
+	0xE8, 0x35, 0x01, 0x60, 0x11, 0x1A, 0x09, 0x68, 0x11, 0x68, 0x20, 0xD2, 0xFB, 0x42, 0x88, 0x21, 
+	0x01, 0x68, 0x1A, 0x60, 0x1A, 0x43, 0x8A, 0x46, 0xC0, 0xBD, 0x70, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 
+	0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 0x10, 0x20, 0x00, 0x0A, 0xAA, 0xE0, 0x00, 0xE0, 0x18, 0x20, 
+	0x00, 0x01, 0xFC, 0x23, 0x00, 0xB5, 0x00, 0x42, 0x98, 0x4A, 0x06, 0x1C, 0xD3, 0xDB, 0x02, 0x43, 
+	0x43, 0x7F, 0xDB, 0x7F, 0xD2, 0x32, 0x02, 0xB2, 0x52, 0x30, 0x01, 0x18, 0x18, 0x40, 0x90, 0xBD, 
+	0x00, 0x18, 0x40, 0x20, 0x00, 0x09, 0xAE, 0xB0, 0x85, 0xB5, 0xF0, 0x1C, 0x0C, 0x1C, 0x05, 0xFA, 
+	0x1B, 0xAE, 0xF1, 0x0E, 0x29, 0x00, 0x1C, 0x16, 0x4B, 0x2B, 0xD0, 0x05, 0x7F, 0xDB, 0x33, 0x02, 
+	0x2B, 0x00, 0xB2, 0x5B, 0x1C, 0x21, 0xD0, 0x4E, 0xF7, 0xFF, 0x1C, 0x28, 0x49, 0x27, 0xFF, 0xDD, 
+	0x7A, 0x4A, 0x4F, 0x27, 0x19, 0x13, 0x7A, 0x09, 0x91, 0x02, 0x18, 0x51, 0x19, 0xCF, 0x01, 0x41, 
+	0x97, 0x03, 0x22, 0x00, 0xE0, 0x13, 0x46, 0x84, 0x56, 0xC1, 0x48, 0x22, 0xB2, 0xC0, 0x1C, 0x58, 
+	0x90, 0x01, 0x0F, 0xCF, 0x98, 0x03, 0x18, 0x7F, 0x19, 0xC7, 0x10, 0x7F, 0x97, 0x00, 0x37, 0x08, 
+	0x79, 0x38, 0x46, 0x6F, 0x33, 0x02, 0x9F, 0x00, 0x27, 0x01, 0x70, 0xB8, 0x43, 0x3A, 0x40, 0x8F, 
+	0x42, 0x83, 0x98, 0x02, 0x4B, 0x15, 0xDB, 0xE8, 0x79, 0xDF, 0x46, 0x60, 0x41, 0x61, 0x42, 0x61, 
+	0x18, 0x79, 0x7C, 0x5B, 0x10, 0x49, 0x19, 0x1C, 0x34, 0x01, 0x39, 0x01, 0x05, 0x24, 0x06, 0x89, 
+	0x43, 0x22, 0x43, 0x0C, 0x4C, 0x10, 0x49, 0x0E, 0x18, 0x43, 0x01, 0x40, 0x19, 0x01, 0x4F, 0x0F, 
+	0x60, 0x4A, 0x68, 0x4C, 0xB2, 0xD2, 0x1C, 0xAA, 0x71, 0x02, 0x19, 0xC0, 0xD0, 0x07, 0x2E, 0x00, 
+	0x21, 0x01, 0x4A, 0x0B, 0x40, 0x91, 0x57, 0x52, 0x69, 0x99, 0x1C, 0x0A, 0xE0, 0x01, 0x61, 0x9A, 
+	0x61, 0x9E, 0x69, 0x9A, 0xBD, 0xF0, 0xB0, 0x05, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x0A, 
+	0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x75, 0x10, 0x40, 0x00, 0x10, 0x18, 0x40, 0x00, 0x10, 0x10, 
+	0x00, 0x00, 0x74, 0xEA, 0x4B, 0x08, 0xB5, 0x10, 0x68, 0x1B, 0x21, 0x00, 0xE0, 0x08, 0x3B, 0x01, 
+	0x01, 0x58, 0x4C, 0x06, 0x19, 0x00, 0x22, 0x09, 0x72, 0xA1, 0x18, 0x84, 0xD2, 0xFB, 0x3A, 0x01, 
+	0x2B, 0x00, 0x3B, 0x01, 0xBD, 0x10, 0xDA, 0xF4, 0x20, 0x00, 0x09, 0x18, 0x40, 0x00, 0x10, 0x00, 
+	0xF7, 0xFF, 0xB5, 0x38, 0x21, 0x00, 0xFF, 0xE7, 0x1C, 0x0A, 0x20, 0x01, 0xF7, 0xFF, 0x42, 0x40, 
+	0x20, 0x01, 0xFF, 0x75, 0x21, 0x01, 0x42, 0x40, 0xF7, 0xFF, 0x22, 0x00, 0x4D, 0x0A, 0xFF, 0x6F, 
+	0xE0, 0x0B, 0x7B, 0xAC, 0x21, 0x00, 0x1C, 0x20, 0xF7, 0xFF, 0x22, 0x01, 0x21, 0x01, 0xFF, 0x67, 
+	0x1C, 0x0A, 0x1C, 0x20, 0xFF, 0x62, 0xF7, 0xFF, 0xB2, 0xE4, 0x34, 0x01, 0x79, 0x2B, 0x7B, 0xAA, 
+	0x42, 0x9C, 0x18, 0xD3, 0xBD, 0x38, 0xDB, 0xEE, 0x20, 0x00, 0x03, 0x0A, 0xB0, 0x85, 0xB5, 0xF0, 
+	0x1C, 0x0E, 0x1C, 0x05, 0x1C, 0x1F, 0x92, 0x02, 0xD0, 0x05, 0x29, 0x00, 0x33, 0x02, 0x4B, 0x21, 
+	0xB2, 0x5B, 0x7F, 0xDB, 0xD0, 0x3B, 0x2B, 0x00, 0x1C, 0x28, 0x1C, 0x31, 0xFF, 0x34, 0xF7, 0xFF, 
+	0xB2, 0xC0, 0x4A, 0x1D, 0x7A, 0x53, 0x90, 0x01, 0x18, 0xF6, 0x7A, 0x12, 0x4B, 0x1B, 0x18, 0x9A, 
+	0x7C, 0x1B, 0x1E, 0xB9, 0x41, 0x81, 0x1E, 0x48, 0xB2, 0xF6, 0x42, 0x49, 0x46, 0x9C, 0x91, 0x03, 
+	0x2F, 0x00, 0xE0, 0x24, 0x21, 0x26, 0xD1, 0x07, 0x4B, 0x15, 0x43, 0x71, 0x5C, 0xCC, 0x19, 0x49, 
+	0xB2, 0xE4, 0x44, 0x64, 0x2F, 0x01, 0xE0, 0x08, 0x01, 0x73, 0xD1, 0x04, 0x19, 0x5B, 0x49, 0x11, 
+	0xE0, 0x01, 0x5C, 0x5C, 0x40, 0x1C, 0x9B, 0x03, 0x99, 0x02, 0x4B, 0x0F, 0x36, 0x02, 0x57, 0x9B, 
+	0x18, 0xC0, 0x0F, 0xD8, 0xB2, 0xDB, 0x18, 0x63, 0x9B, 0x01, 0x93, 0x00, 0x01, 0x59, 0x10, 0x40, 
+	0x18, 0x08, 0x46, 0x6B, 0x49, 0x09, 0x78, 0x1B, 0x54, 0x43, 0xB2, 0xF6, 0xDB, 0xD8, 0x42, 0x96, 
+	0xBD, 0xF0, 0xB0, 0x05, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x0D, 0x48, 
+	0x00, 0x00, 0x75, 0x36, 0x20, 0x00, 0x0A, 0xB3, 0x00, 0x00, 0x75, 0x10, 0x40, 0x00, 0x10, 0x00, 
+	0x4B, 0x2A, 0xB5, 0x70, 0x68, 0x19, 0x4A, 0x2A, 0x40, 0x0A, 0x24, 0x80, 0x68, 0x1A, 0x60, 0x1A, 
+	0x4D, 0x28, 0x05, 0xE4, 0x60, 0xA2, 0x68, 0xA1, 0x22, 0x03, 0x7A, 0x69, 0x40, 0x11, 0x68, 0x18, 
+	0x04, 0x89, 0x4A, 0x25, 0x43, 0x0A, 0x40, 0x02, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 
+	0x22, 0x80, 0x68, 0x19, 0x43, 0x0A, 0x03, 0x52, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 
+	0x68, 0x18, 0x7A, 0x29, 0x4A, 0x1D, 0x26, 0x07, 0x05, 0x49, 0x40, 0x31, 0x43, 0x0A, 0x40, 0x02, 
+	0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 0x29, 0x0F, 0x7B, 0xA9, 0x7B, 0xEA, 0xD8, 0x25, 
+	0xD8, 0x22, 0x2A, 0x0F, 0x07, 0x09, 0x68, 0x18, 0x09, 0x00, 0x01, 0x00, 0x60, 0x19, 0x43, 0x01, 
+	0x40, 0x0A, 0x21, 0x0F, 0x06, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x11, 0x60, 0x1A, 0x43, 0x0A, 
+	0x68, 0xA2, 0x68, 0x1B, 0xF7, 0xFF, 0x60, 0xA3, 0x4A, 0x0E, 0xFC, 0x49, 0x43, 0x13, 0x6C, 0x63, 
+	0xF7, 0xFF, 0x64, 0x63, 0xF7, 0xFF, 0xFC, 0x5C, 0x79, 0xEB, 0xFC, 0x87, 0x40, 0x1E, 0x4A, 0x0A, 
+	0x6C, 0x26, 0x02, 0x33, 0x43, 0x1E, 0x40, 0x16, 0xBD, 0x70, 0x64, 0x26, 0x20, 0x00, 0x00, 0x14, 
+	0xFF, 0xFC, 0xFF, 0xFF, 0x20, 0x00, 0x0D, 0x48, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x1F, 0xFF, 0xFF, 
+	0xF0, 0xFF, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0x21, 0x80, 0xB5, 0x00, 
+	0x79, 0x0B, 0x05, 0xC9, 0xB2, 0xD2, 0x1E, 0x5A, 0xDD, 0x09, 0x42, 0x98, 0x71, 0x0B, 0xE0, 0x00, 
+	0xB2, 0xDB, 0x33, 0x01, 0xDD, 0xFA, 0x42, 0x83, 0x71, 0x0A, 0xE0, 0x04, 0xB2, 0xD2, 0x3A, 0x01, 
+	0xDA, 0xFA, 0x42, 0x82, 0xB5, 0x38, 0xBD, 0x00, 0x78, 0xA0, 0x4C, 0x17, 0xFF, 0xE6, 0xF7, 0xFF, 
+	0x05, 0xDB, 0x23, 0x80, 0x68, 0x5A, 0x79, 0x21, 0x00, 0x52, 0x07, 0xC9, 0x43, 0x0A, 0x08, 0x52, 
+	0x79, 0x60, 0x60, 0x5A, 0x68, 0x5D, 0x22, 0x03, 0x40, 0x10, 0x49, 0x10, 0x40, 0x29, 0x03, 0x80, 
+	0x60, 0x59, 0x43, 0x01, 0x49, 0x0E, 0x79, 0xA0, 0x40, 0x10, 0x68, 0x5D, 0x40, 0x29, 0x03, 0x00, 
+	0x60, 0x59, 0x43, 0x01, 0x49, 0x0B, 0x79, 0xE0, 0x40, 0x10, 0x68, 0x5D, 0x02, 0x80, 0x40, 0x29, 
+	0x60, 0x59, 0x43, 0x01, 0x68, 0x58, 0x7A, 0x21, 0x02, 0x11, 0x40, 0x0A, 0x40, 0x02, 0x4A, 0x06, 
+	0x60, 0x5A, 0x43, 0x0A, 0x46, 0xC0, 0xBD, 0x38, 0x20, 0x00, 0x0A, 0xAA, 0xFF, 0xFF, 0x3F, 0xFF, 
+	0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0x23, 0x80, 0xB5, 0xF8, 
+	0x68, 0x1A, 0x05, 0xDB, 0x21, 0x00, 0x4A, 0x7A, 0x60, 0x19, 0x20, 0x08, 0x68, 0x14, 0x60, 0x10, 
+	0x60, 0x9C, 0x68, 0x9D, 0x60, 0x21, 0x4C, 0x77, 0x68, 0xDD, 0x68, 0x24, 0x25, 0xFE, 0x60, 0xDC, 
+	0x01, 0xED, 0x4C, 0x75, 0x68, 0x24, 0x60, 0x25, 0x61, 0x1C, 0x69, 0x1D, 0x61, 0x59, 0x69, 0x5C, 
+	0x61, 0x99, 0x69, 0x9C, 0x61, 0xD9, 0x69, 0xDC, 0x24, 0x80, 0x6C, 0x1C, 0x64, 0x1C, 0x01, 0xE4, 
+	0x64, 0x59, 0x6C, 0x5C, 0x4C, 0x6D, 0x6C, 0x9C, 0x60, 0x21, 0x64, 0x99, 0x05, 0xE4, 0x24, 0xA0, 
+	0x60, 0xA1, 0x68, 0xA5, 0x49, 0x6A, 0x6C, 0x1C, 0x64, 0x19, 0x40, 0x21, 0x21, 0x80, 0x68, 0x1C, 
+	0x43, 0x21, 0x05, 0x49, 0x49, 0x67, 0x60, 0x19, 0x7F, 0xC9, 0x31, 0x01, 0xD0, 0x03, 0x29, 0x00, 
+	0x43, 0x08, 0x68, 0x11, 0xE0, 0x02, 0x60, 0x10, 0x43, 0x81, 0x68, 0x11, 0x68, 0x11, 0x60, 0x11, 
+	0x60, 0x99, 0x68, 0x98, 0x26, 0x04, 0x68, 0x13, 0x60, 0x13, 0x43, 0x33, 0x25, 0x80, 0x68, 0x13, 
+	0x68, 0xA9, 0x05, 0xED, 0x98, 0x2B, 0xAE, 0xF1, 0x0F, 0x68, 0x13, 0x60, 0xAB, 0x43, 0x3B, 0x27, 
+	0x02, 0x68, 0x13, 0x60, 0x13, 0x60, 0xAB, 0x68, 0xA9, 0x20, 0x01, 0x68, 0x13, 0x60, 0x13, 0x43, 
+	0x83, 0x68, 0xAA, 0x68, 0x13, 0xF7, 0xFF, 0x60, 0xAB, 0x4B, 0x54, 0xFE, 0xED, 0x56, 0x9A, 0x22, 
+	0x1C, 0x4B, 0x53, 0x69, 0xA9, 0x40, 0xF2, 0x05, 0x12, 0x43, 0x13, 0x40, 0x0B, 0xF7, 0xFF, 0x61, 
+	0xAB, 0x4A, 0x50, 0xFE, 0x61, 0x21, 0x01, 0x4B, 0x50, 0x4B, 0x50, 0x60, 0x1A, 0x68, 0x1A, 0x24, 
+	0x08, 0x43, 0x32, 0x20, 0x10, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0x1A, 0x43, 0xBA, 0x22, 0xC0, 0x4B, 
+	0x4C, 0x50, 0x99, 0x00, 0x52, 0x50, 0x9F, 0x21, 0x20, 0x50, 0x9C, 0x50, 0x9E, 0x50, 0x99, 0x50, 
+	0x98, 0x50, 0x99, 0x21, 0x40, 0x40, 0xBA, 0x22, 0xC0, 0x24, 0xFF, 0x58, 0x98, 0x24, 0xC0, 0x43, 
+	0xA0, 0x50, 0x98, 0x43, 0x20, 0x48, 0x43, 0x58, 0x9C, 0x50, 0x9C, 0x40, 0x04, 0x48, 0x42, 0x58, 
+	0x9C, 0x24, 0x80, 0x40, 0x20, 0x43, 0x04, 0x04, 0x24, 0x58, 0x9C, 0x50, 0x9C, 0x0A, 0x24, 0x02, 
+	0x24, 0x50, 0x9C, 0x43, 0x2C, 0x40, 0xBA, 0x22, 0xC1, 0x1C, 0x04, 0x58, 0x98, 0x43, 0x84, 0x20, 
+	0xFF, 0x50, 0x9C, 0x43, 0x0C, 0x48, 0x37, 0x58, 0x9C, 0x24, 0x80, 0x40, 0x20, 0x43, 0x20, 0x02, 
+	0x24, 0x58, 0x98, 0x50, 0x98, 0x40, 0x20, 0x4C, 0x34, 0x4A, 0x34, 0x50, 0x98, 0x43, 0x30, 0x69, 
+	0x10, 0xB6, 0x62, 0x61, 0x10, 0x20, 0x01, 0x22, 0x08, 0x60, 0x18, 0x60, 0x1E, 0x60, 0x1A, 0x60, 
+	0x1F, 0x20, 0x20, 0x4B, 0x2F, 0x67, 0xDC, 0x24, 0x10, 0x67, 0xD9, 0x67, 0xD8, 0xFC, 0x46, 0xF7, 
+	0xFF, 0x7D, 0xE0, 0x4C, 0x21, 0xF7, 0xFF, 0x7E, 0x21, 0x7C, 0xE3, 0xFA, 0xFB, 0xD0, 0x26, 0x2B, 
+	0x00, 0x21, 0x01, 0x4B, 0x1A, 0x4A, 0x27, 0x68, 0x18, 0x0E, 0x40, 0x00, 0x40, 0x68, 0x19, 0x43, 
+	0x08, 0x40, 0x11, 0x06, 0x00, 0x60, 0x19, 0x43, 0x01, 0x69, 0x28, 0x68, 0x19, 0x68, 0x19, 0x61, 
+	0x29, 0x0E, 0x49, 0x00, 0x49, 0x06, 0x39, 0x43, 0x0F, 0x40, 0x17, 0x68, 0x1F, 0x60, 0x1F, 0x43, 
+	0x0F, 0x69, 0x28, 0x68, 0x19, 0x68, 0x19, 0x61, 0x29, 0x0E, 0x49, 0x00, 0x49, 0x68, 0x19, 0x43, 
+	0x0E, 0x40, 0x0A, 0x06, 0x36, 0x60, 0x1A, 0x43, 0x32, 0x69, 0x2A, 0x68, 0x1B, 0xF7, 0xFF, 0x61, 
+	0x2B, 0xF7, 0xFF, 0xFE, 0xD4, 0xF7, 0xFF, 0xF8, 0xC1, 0xF7, 0xFF, 0xF9, 0x0F, 0xF7, 0xFF, 0xF9, 
+	0x7D, 0xBD, 0xF8, 0xFB, 0x65, 0x20, 0x00, 0x00, 0x14, 0x20, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 
+	0x08, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0x7F, 0xFF, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 
+	0x48, 0xF0, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 
+	0x10, 0xE0, 0x00, 0xE1, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xE0, 0x00, 0xED, 
+	0x00, 0xE0, 0x00, 0xE1, 0x04, 0x80, 0xFF, 0xFF, 0xFF, 0x4A, 0x0C, 0xB5, 0x08, 0x49, 0x0D, 0x4B, 
+	0x0C, 0xCA, 0x01, 0xE0, 0x01, 0x42, 0x8B, 0xC3, 0x01, 0x4B, 0x0B, 0xD3, 0xFB, 0x22, 0x00, 0x49, 
+	0x0B, 0xC3, 0x04, 0xE0, 0x00, 0xD3, 0xFC, 0x42, 0x8B, 0xF8, 0x26, 0xF7, 0xFF, 0x22, 0x00, 0x4B, 
+	0x08, 0xC3, 0x04, 0xE0, 0x00, 0xD3, 0xFC, 0x42, 0x83, 0x46, 0xC0, 0xBD, 0x08, 0x00, 0x00, 0x59, 
+	0xFC, 0x20, 0x00, 0x00, 0x3C, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 0x11, 
+	0xEC, 0x20, 0x00, 0x1E, 0x0C, 0x4B, 0x13, 0xB5, 0x00, 0x2B, 0x01, 0x68, 0x1B, 0x2B, 0x08, 0xD0, 
+	0x02, 0xE0, 0x0F, 0xD1, 0x1E, 0x4A, 0x11, 0x4B, 0x10, 0x4A, 0x11, 0x60, 0x1A, 0x4A, 0x11, 0x60, 
+	0x5A, 0x60, 0x1A, 0x4B, 0x11, 0x4A, 0x12, 0x4B, 0x11, 0x4A, 0x12, 0x60, 0x1A, 0x4A, 0x12, 0x60, 
+	0x5A, 0xE0, 0x0D, 0x60, 0x9A, 0x4A, 0x08, 0x4B, 0x09, 0x60, 0x13, 0x49, 0x09, 0x4A, 0x0A, 0x60, 
+	0x51, 0x4A, 0x0A, 0x60, 0x13, 0x60, 0x53, 0x60, 0x13, 0x4B, 0x0C, 0x60, 0x93, 0x70, 0x1A, 0x22, 
+	0x01, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x11, 0x50, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x03, 
+	0xF9, 0x00, 0x00, 0x3F, 0x7D, 0x00, 0x00, 0x3F, 0xB5, 0x20, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 
+	0x18, 0x00, 0x00, 0x40, 0xC1, 0x00, 0x00, 0x42, 0xA9, 0x00, 0x00, 0x44, 0x0D, 0x20, 0x00, 0x01, 
+	0xE4, 0x23, 0x00, 0xB5, 0x00, 0x33, 0x01, 0x5C, 0xC2, 0xD1, 0xFB, 0x2A, 0x00, 0xB2, 0xD8, 0x3B, 
+	0x01, 0x46, 0xC0, 0xBD, 0x00, 0x1C, 0x1C, 0xB5, 0xF7, 0x78, 0x1F, 0xAB, 0x08, 0x1C, 0x0E, 0x4B, 
+	0x26, 0x21, 0x01, 0x68, 0x1B, 0x42, 0x0B, 0x40, 0x81, 0x2F, 0x00, 0xD0, 0x44, 0x2C, 0x04, 0xD0, 
+	0x07, 0x4B, 0x22, 0xD8, 0x32, 0x33, 0x05, 0x5D, 0x19, 0x5D, 0x1F, 0x91, 0x00, 0x2C, 0x04, 0xE0, 
+	0x08, 0x4B, 0x1E, 0xD8, 0x2E, 0x31, 0x0A, 0x1C, 0x19, 0x33, 0x0F, 0x5D, 0x09, 0x91, 0x00, 0x5D, 
+	0x1F, 0xD0, 0x28, 0x2C, 0x03, 0xD0, 0x28, 0x2C, 0x00, 0x20, 0x3A, 0xE0, 0x28, 0xF0, 0x01, 0x1C, 
+	0x21, 0x42, 0x86, 0xFC, 0x63, 0x46, 0x6B, 0xDD, 0x05, 0xB2, 0xC0, 0x78, 0x1B, 0x70, 0x68, 0x70, 
+	0x2B, 0x70, 0x2F, 0xE0, 0x02, 0x70, 0x6E, 0x1C, 0x30, 0x43, 0x60, 0x1A, 0x36, 0x23, 0x00, 0x99, 
+	0x01, 0x60, 0xAB, 0x60, 0x69, 0xB2, 0xF6, 0x18, 0x09, 0xF7, 0xFF, 0x91, 0x01, 0xF7, 0xFF, 0xFA, 
+	0xE3, 0x28, 0x00, 0xFB, 0x37, 0xE0, 0x0B, 0xD1, 0xFB, 0x27, 0x00, 0x23, 0x0F, 0xE0, 0x05, 0x93, 
+	0x00, 0x91, 0x00, 0x21, 0x0F, 0x24, 0x02, 0xE0, 0x02, 0x24, 0x01, 0xE0, 0x00, 0x92, 0x01, 0x4D, 
+	0x04, 0xD1, 0xD2, 0x2E, 0x00, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x00, 0x58, 0x00, 0x00, 0x59, 
+	0x73, 0x20, 0x00, 0x00, 0x70, 0x4B, 0x11, 0xB5, 0x38, 0x68, 0x1B, 0x22, 0x01, 0x1C, 0x0D, 0x40, 
+	0x82, 0xD0, 0x19, 0x42, 0x13, 0x23, 0x0B, 0x4C, 0x0E, 0x1C, 0x08, 0x70, 0x23, 0xFF, 0x90, 0xF7, 
+	0xFF, 0x78, 0x63, 0x70, 0x60, 0x33, 0x02, 0x22, 0x07, 0x42, 0x93, 0x40, 0x13, 0x78, 0x63, 0xD1, 
+	0x03, 0xB2, 0xDB, 0x3B, 0x01, 0x23, 0x00, 0x70, 0x63, 0x60, 0xA3, 0x60, 0x65, 0xFA, 0xAA, 0xF7, 
+	0xFF, 0xFA, 0xFE, 0xF7, 0xFF, 0xD1, 0xFB, 0x28, 0x00, 0x46, 0xC0, 0xBD, 0x38, 0x20, 0x00, 0x00, 
+	0x58, 0x20, 0x00, 0x00, 0x70, 0x4C, 0x0B, 0xB5, 0x1F, 0x73, 0xD8, 0x46, 0x6B, 0x2B, 0x00, 0x78, 
+	0x23, 0x20, 0x00, 0xD0, 0x03, 0xF7, 0xFF, 0x49, 0x08, 0x78, 0x23, 0xFF, 0xCD, 0xD0, 0x07, 0x2B, 
+	0x00, 0x21, 0x01, 0x46, 0x6A, 0x32, 0x0F, 0x20, 0x00, 0x91, 0x00, 0x23, 0x04, 0xFF, 0x6A, 0xF7, 
+	0xFF, 0x46, 0xC0, 0xBD, 0x1F, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x87, 0xF7, 0xFF, 0xB5, 
+	0xF8, 0x28, 0x00, 0xFA, 0xD7, 0x4B, 0x39, 0xD1, 0x70, 0x2A, 0x00, 0x68, 0x1A, 0x4B, 0x38, 0xDC, 
+	0x03, 0x2B, 0x00, 0x68, 0x1B, 0x49, 0x37, 0xDD, 0x3E, 0x70, 0x0B, 0x23, 0x03, 0x33, 0x04, 0x4B, 
+	0x36, 0x1C, 0x1C, 0x7F, 0xDB, 0xDA, 0x00, 0x42, 0x9A, 0x70, 0x4B, 0xB2, 0xD3, 0x46, 0x8C, 0x21, 
+	0x0A, 0x23, 0x00, 0x4A, 0x32, 0xE0, 0x1F, 0x49, 0x2D, 0xE0, 0x03, 0x33, 0x01, 0x43, 0x5E, 0x46, 
+	0x66, 0x18, 0x76, 0x20, 0x00, 0x18, 0x37, 0x30, 0x0A, 0xCC, 0x38, 0xAE, 0xF1, 0x10, 0x5F, 0x7F, 
+	0x25, 0x32, 0xD0, 0xF3, 0x2F, 0x00, 0xDA, 0x13, 0x42, 0xA3, 0x18, 0x08, 0x00, 0x58, 0x00, 0xDE, 
+	0x88, 0x80, 0xB2, 0x00, 0x70, 0x10, 0x19, 0x80, 0x12, 0x00, 0x1C, 0x18, 0x70, 0x50, 0x00, 0x40, 
+	0x30, 0x10, 0x33, 0x01, 0x5A, 0x08, 0x0A, 0x00, 0x70, 0x90, 0x32, 0x04, 0x70, 0xD0, 0xDB, 0xDF, 
+	0x42, 0xA3, 0x4A, 0x1F, 0x4B, 0x1D, 0x22, 0x00, 0x60, 0x5A, 0xF7, 0xFF, 0x60, 0x9A, 0xF7, 0xFF, 
+	0xFA, 0x3D, 0x28, 0x00, 0xFA, 0x91, 0xE0, 0x29, 0xD1, 0xFB, 0x68, 0x53, 0x4A, 0x1A, 0xD0, 0x25, 
+	0x33, 0x01, 0x21, 0x13, 0x4B, 0x15, 0x68, 0x11, 0x70, 0x19, 0x70, 0x59, 0x46, 0x94, 0x49, 0x14, 
+	0x4B, 0x16, 0x1C, 0x03, 0x78, 0x1D, 0x1C, 0x23, 0xE0, 0x0D, 0x00, 0x5E, 0xE0, 0x01, 0x30, 0x02, 
+	0x44, 0x66, 0x22, 0x06, 0x18, 0x34, 0x1C, 0x5C, 0x5E, 0xA7, 0xD0, 0xF4, 0x2F, 0x00, 0x1C, 0x23, 
+	0x70, 0x0B, 0x20, 0x00, 0x31, 0x01, 0xDB, 0xF0, 0x42, 0xAB, 0x4A, 0x09, 0x4B, 0x07, 0x60, 0x5A, 
+	0x60, 0x98, 0xFA, 0x12, 0xF7, 0xFF, 0xFA, 0x66, 0xF7, 0xFF, 0xD1, 0xFB, 0x28, 0x00, 0x46, 0xC0, 
+	0xBD, 0xF8, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0x70, 0x20, 0x00, 
+	0x09, 0xAE, 0x20, 0x00, 0x09, 0xF0, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x4B, 0x64, 
+	0xB5, 0x08, 0x2B, 0x1D, 0x88, 0x1B, 0xD8, 0x1A, 0xD0, 0x47, 0xD1, 0x00, 0x2B, 0x05, 0xD8, 0x0D, 
+	0xE0, 0x96, 0xD0, 0x63, 0x2B, 0x02, 0x2B, 0x01, 0xD8, 0x03, 0xE0, 0xB7, 0xD0, 0x00, 0x2B, 0x03, 
+	0xE0, 0x57, 0xE0, 0x87, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0x04, 0xE0, 0x8F, 0xE0, 0xB0, 0xD0, 0x65, 
+	0x2B, 0x07, 0x2B, 0x1B, 0xD3, 0x5C, 0x2B, 0x1C, 0xD0, 0x1C, 0xE0, 0xA7, 0xD0, 0x00, 0x2B, 0x22, 
+	0xE0, 0x22, 0xD8, 0x08, 0xD0, 0x40, 0xD0, 0x5D, 0x2B, 0x1F, 0x2B, 0x20, 0xD3, 0x2A, 0x2B, 0x21, 
+	0xD0, 0x5E, 0xE0, 0x9B, 0xD0, 0x00, 0x2B, 0x41, 0xE0, 0x5E, 0xD8, 0x03, 0xD0, 0x64, 0xD0, 0x00, 
+	0x2B, 0x40, 0xE0, 0x5B, 0xE0, 0x94, 0xD0, 0x61, 0x2B, 0x42, 0xD0, 0x00, 0x2B, 0x60, 0xE0, 0x72, 
+	0xE0, 0x8E, 0x4B, 0x49, 0x4A, 0x48, 0x20, 0x01, 0x78, 0x12, 0x40, 0x90, 0x68, 0x19, 0x43, 0x0A, 
+	0x1C, 0x02, 0xE0, 0x83, 0x60, 0x1A, 0x4B, 0x44, 0x49, 0x43, 0x68, 0x1A, 0x78, 0x09, 0x40, 0x88, 
+	0x20, 0x01, 0x60, 0x1A, 0x43, 0x82, 0x4B, 0x3F, 0xE0, 0x7A, 0x4B, 0x40, 0x78, 0x1A, 0xE0, 0x75, 
+	0x70, 0x1A, 0x21, 0x0D, 0x4B, 0x3C, 0x4B, 0x3E, 0x78, 0x1A, 0x4A, 0x3C, 0x70, 0x1A, 0x78, 0x1A, 
+	0x70, 0x11, 0x2A, 0x00, 0x4B, 0x3C, 0x22, 0x00, 0xD0, 0x02, 0xE0, 0x67, 0x70, 0x5A, 0x78, 0x52, 
+	0x4A, 0x3A, 0xE0, 0x63, 0x70, 0x5A, 0x78, 0x1A, 0x4B, 0x33, 0x70, 0x1A, 0x4B, 0x38, 0x4B, 0x31, 
+	0xE0, 0x5E, 0x4B, 0x37, 0x78, 0x1A, 0xF7, 0xFD, 0x60, 0x1A, 0xE0, 0x57, 0xFC, 0x09, 0x78, 0x1A, 
+	0x4B, 0x2D, 0x70, 0x9A, 0x4B, 0x34, 0xF7, 0xFF, 0x78, 0x98, 0xE0, 0x4F, 0xFC, 0x8D, 0x78, 0x1A, 
+	0x4B, 0x29, 0x70, 0x9A, 0x4B, 0x30, 0x22, 0x0F, 0x4B, 0x29, 0xE0, 0x47, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x2E, 0xE0, 0x43, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x2D, 0xE0, 0x3F, 0x70, 0x1A, 0xF7, 0xFD, 
+	0x20, 0x0C, 0xE0, 0x3B, 0xF9, 0x85, 0xF7, 0xFD, 0x20, 0x0D, 0xE0, 0x37, 0xF9, 0x81, 0x22, 0x01, 
+	0x4B, 0x28, 0xE0, 0x33, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x27, 0xE0, 0x2F, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x26, 0xE0, 0x2B, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x25, 0xE0, 0x27, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x24, 0x4B, 0x14, 0x70, 0x1A, 0x4B, 0x23, 0x78, 0x1A, 0xE0, 0x1F, 0x70, 0x1A, 0x78, 0x1A, 
+	0x4B, 0x11, 0x70, 0x9A, 0x4B, 0x1E, 0x4B, 0x0F, 0xE0, 0x1A, 0x4B, 0x1F, 0x78, 0x1A, 0x78, 0x1A, 
+	0x70, 0x1A, 0x3A, 0x01, 0x4B, 0x10, 0xD8, 0x03, 0x2A, 0x01, 0x22, 0x0F, 0x33, 0x40, 0xE0, 0x0D, 
+	0x70, 0x1A, 0x33, 0x40, 0x4A, 0x1A, 0x2A, 0x00, 0x78, 0x12, 0x4A, 0x19, 0xD0, 0x04, 0x78, 0x12, 
+	0x32, 0x40, 0xE0, 0x03, 0x70, 0x1A, 0x32, 0x40, 0x4A, 0x08, 0x70, 0x1A, 0x78, 0x12, 0x46, 0xC0, 
+	0xBD, 0x08, 0x20, 0x00, 0x00, 0x28, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x58, 0x20, 0x00, 
+	0x03, 0x1D, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x0D, 0x48, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 
+	0x01, 0xDE, 0x20, 0x00, 0x11, 0x50, 0x20, 0x00, 0x0A, 0xAA, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 
+	0x01, 0xDC, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x01, 0xE7, 0x20, 0x00, 0x01, 0xE5, 0x20, 0x00, 
+	0x01, 0x8B, 0x20, 0x00, 0x01, 0xE6, 0x20, 0x00, 0x01, 0x92, 0x20, 0x00, 0x01, 0xE0, 0x20, 0x00, 
+	0x01, 0xDD, 0x00, 0x00, 0x74, 0x9A, 0x4B, 0x4A, 0xB5, 0x30, 0x2B, 0x34, 0x88, 0x1B, 0xD8, 0x0C, 
+	0xD0, 0x47, 0xD0, 0x4F, 0x2B, 0x2E, 0x2B, 0x00, 0xD8, 0x04, 0x2B, 0x1D, 0xD0, 0x14, 0xE0, 0x16, 
+	0xD1, 0x78, 0xD0, 0x51, 0x2B, 0x2F, 0xD1, 0x73, 0x2B, 0x30, 0x2B, 0x38, 0xE0, 0x56, 0xD8, 0x04, 
+	0xD0, 0x66, 0xD0, 0x39, 0x2B, 0x35, 0xD1, 0x6B, 0x2B, 0x37, 0x2B, 0x39, 0xE0, 0x5B, 0x2B, 0x86, 
+	0xD0, 0x63, 0xE0, 0x09, 0xD1, 0x66, 0x7B, 0x5A, 0x4B, 0x3B, 0x70, 0x1A, 0x4B, 0x3B, 0x4B, 0x3B, 
+	0xE0, 0x6F, 0x4B, 0x39, 0x78, 0x1A, 0xE0, 0x6A, 0x70, 0x1A, 0x4A, 0x3A, 0x49, 0x39, 0x2B, 0x00, 
+	0x78, 0x0B, 0x78, 0x10, 0xD1, 0x0F, 0x70, 0x08, 0x49, 0x34, 0x49, 0x37, 0x78, 0x50, 0x68, 0x52, 
+	0x70, 0x08, 0x4C, 0x36, 0x18, 0xD1, 0x19, 0x19, 0x78, 0x08, 0x70, 0x08, 0x33, 0x01, 0xD1, 0xF7, 
+	0x2B, 0x06, 0x68, 0x52, 0xE0, 0x55, 0x78, 0x08, 0x23, 0x00, 0x18, 0xC0, 0x4D, 0x2B, 0x18, 0x10, 
+	0x38, 0x02, 0x19, 0x58, 0x78, 0x04, 0x70, 0x04, 0x33, 0x01, 0xD1, 0xF4, 0x2B, 0x08, 0x4B, 0x2C, 
+	0xE0, 0x47, 0x4B, 0x25, 0x68, 0x1A, 0xE0, 0x42, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x4B, 0x22, 
+	0x79, 0x1A, 0xE0, 0x3C, 0x70, 0x1A, 0x4A, 0x27, 0x4B, 0x22, 0x49, 0x1F, 0x78, 0x1B, 0x68, 0x1A, 
+	0x18, 0xD3, 0x60, 0x0A, 0x68, 0x5B, 0xE0, 0x32, 0x60, 0x4B, 0x1C, 0x1A, 0x4B, 0x1A, 0x78, 0x11, 
+	0x32, 0x2C, 0x29, 0x00, 0x4A, 0x19, 0xE0, 0x09, 0xD1, 0x07, 0x1C, 0x1A, 0x4B, 0x16, 0x78, 0x11, 
+	0x32, 0x2C, 0x29, 0x00, 0x4A, 0x15, 0x8C, 0xDB, 0xD1, 0x02, 0xE0, 0x20, 0x80, 0x13, 0x80, 0x13, 
+	0x8D, 0x1B, 0x4B, 0x19, 0xE0, 0x1D, 0x4B, 0x10, 0x78, 0x1A, 0xE0, 0x18, 0x70, 0x1A, 0x78, 0x1A, 
+	0x4B, 0x17, 0x70, 0x1A, 0x4B, 0x0D, 0x4B, 0x16, 0xE0, 0x13, 0x4B, 0x0B, 0x78, 0x1A, 0xE0, 0x0E, 
+	0x70, 0x1A, 0xB2, 0x9A, 0x3B, 0x90, 0xD8, 0x0A, 0x2A, 0x13, 0x01, 0x5B, 0x4A, 0x09, 0x49, 0x06, 
+	0x78, 0x12, 0x4A, 0x10, 0x18, 0x9B, 0x68, 0x1A, 0x18, 0x9B, 0x60, 0x0A, 0x68, 0x5B, 0xBD, 0x30, 
+	0x60, 0x4B, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x09, 0xAE, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 
+	0x03, 0x1D, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x70, 0x50, 0x00, 0x00, 0x0D, 0x50, 0x00, 
+	0x00, 0x0E, 0x20, 0x00, 0x09, 0x1C, 0x20, 0x00, 0x09, 0xB1, 0x00, 0x00, 0x5B, 0xFF, 0xFA, 0x33, 
+	0xAE, 0xF1, 0x11, 0x00, 0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0x20, 0x00, 0x0A, 0xB3, 0x4B, 
+	0x08, 0xB5, 0x08, 0x2B, 0x86, 0x88, 0x1B, 0x4B, 0x07, 0xD1, 0x0B, 0x2A, 0x01, 0x68, 0x9A, 0x68, 
+	0x9A, 0xDC, 0x02, 0x60, 0x9A, 0x32, 0x01, 0x2B, 0x02, 0x68, 0x9B, 0xF7, 0xFF, 0xD1, 0x01, 0xBD, 
+	0x08, 0xF8, 0x71, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0x70, 0x4C, 0x31, 0xB5, 0x7F, 0x78, 
+	0x23, 0x90, 0x03, 0x1C, 0x16, 0x1C, 0x0D, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x2E, 0x20, 0x01, 0xFD, 
+	0x6E, 0xF7, 0xFF, 0x2B, 0x00, 0x78, 0x23, 0x21, 0x01, 0xD0, 0x06, 0xAA, 0x03, 0x1C, 0x08, 0x91, 
+	0x00, 0x23, 0x04, 0xFD, 0x0C, 0xF7, 0xFF, 0x99, 0x03, 0x4B, 0x28, 0x4A, 0x28, 0x78, 0x1B, 0xD1, 
+	0x15, 0x2B, 0x00, 0x33, 0x4A, 0x1C, 0x13, 0x5E, 0x1B, 0x20, 0x00, 0x42, 0x9E, 0x1B, 0x8E, 0x1C, 
+	0x13, 0xDC, 0x05, 0x20, 0x00, 0x33, 0x4C, 0x42, 0x9E, 0x5E, 0x1B, 0x48, 0x21, 0xDA, 0x08, 0x70, 
+	0x03, 0x23, 0x01, 0x70, 0x03, 0x48, 0x20, 0x70, 0x03, 0x48, 0x20, 0x70, 0x03, 0x48, 0x20, 0x2B, 
+	0x00, 0x78, 0x53, 0x4B, 0x1F, 0xD0, 0x04, 0x43, 0x59, 0x5D, 0x5B, 0x91, 0x03, 0x11, 0x89, 0x00, 
+	0x6A, 0x4B, 0x1D, 0x4B, 0x1D, 0x5A, 0xD0, 0x5E, 0xD4, 0x99, 0x03, 0x4A, 0x14, 0x08, 0xC0, 0x1B, 
+	0x04, 0xB2, 0x89, 0x7C, 0x56, 0x1A, 0x64, 0x4B, 0x19, 0xB2, 0x24, 0xDC, 0x02, 0x42, 0xB4, 0x42, 
+	0xB4, 0x42, 0x76, 0x24, 0x00, 0xDA, 0x02, 0xE0, 0x05, 0x55, 0x5C, 0x7C, 0x96, 0x5D, 0x5C, 0xD0, 
+	0x01, 0x42, 0xA6, 0x55, 0x5C, 0x34, 0x01, 0xB2, 0x9B, 0x1A, 0x43, 0xB2, 0x19, 0x7E, 0x92, 0xDB, 
+	0x02, 0x42, 0x91, 0x21, 0x01, 0x4A, 0x09, 0x4A, 0x0C, 0x70, 0x11, 0x52, 0xAB, 0x00, 0x6D, 0x46, 
+	0xC0, 0xBD, 0x7F, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x8B, 0x20, 0x00, 0x01, 0xE4, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x11, 0x30, 0x20, 
+	0x00, 0x01, 0xC4, 0x00, 0x00, 0x7B, 0x92, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 0x0D, 0x3C, 0x20, 
+	0x00, 0x0A, 0xA4, 0x4B, 0x48, 0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0x89, 0xD0, 0x03, 0x2B, 0x00, 0x49, 
+	0x46, 0x20, 0x00, 0xFC, 0xF4, 0xF7, 0xFF, 0x23, 0x00, 0x4A, 0x45, 0x4A, 0x45, 0x70, 0x13, 0x38, 
+	0x01, 0x20, 0x0C, 0x00, 0x81, 0xB2, 0xC0, 0x28, 0x00, 0x50, 0x8B, 0x4B, 0x42, 0xD1, 0xF9, 0x70, 
+	0x18, 0x4A, 0x42, 0x70, 0x13, 0x23, 0x01, 0x70, 0x13, 0x4A, 0x41, 0x7E, 0x19, 0x4B, 0x41, 0x7D, 
+	0xDA, 0x91, 0x04, 0x7D, 0x1B, 0x92, 0x05, 0x1C, 0x0B, 0x93, 0x06, 0x3B, 0x01, 0xE0, 0x2D, 0x1C, 
+	0x5D, 0xB2, 0xDB, 0x01, 0xEA, 0x4C, 0x3C, 0x88, 0x16, 0x19, 0x12, 0x00, 0x5A, 0x49, 0x3B, 0x52, 
+	0x56, 0x01, 0x5C, 0x9A, 0x05, 0x01, 0xAD, 0x46, 0x9C, 0x94, 0x07, 0x3A, 0x01, 0xE0, 0x1A, 0x1C, 
+	0x93, 0xB2, 0xD2, 0x4C, 0x36, 0x18, 0xEB, 0x5B, 0x19, 0x00, 0x5B, 0x2B, 0x00, 0x9B, 0x06, 0x1C, 
+	0xD3, 0xD0, 0x05, 0x00, 0x5B, 0x18, 0xEB, 0x18, 0xC9, 0x5B, 0x1B, 0x9C, 0x07, 0x10, 0x49, 0x00, 
+	0x7B, 0x18, 0xA7, 0x4B, 0x2F, 0x1C, 0x1C, 0x4C, 0x2F, 0x52, 0xE1, 0x1B, 0x89, 0x23, 0x01, 0x18, 
+	0x40, 0x55, 0x3B, 0xD1, 0xE2, 0x2A, 0x00, 0x2B, 0x00, 0x46, 0x63, 0x4B, 0x25, 0xD1, 0xCF, 0x7D, 
+	0xD9, 0x9C, 0x04, 0xF0, 0x01, 0x43, 0x61, 0x4B, 0x28, 0xF8, 0xD5, 0x8C, 0x58, 0x1C, 0x05, 0x28, 
+	0x00, 0x4C, 0x27, 0x23, 0x40, 0xD1, 0x02, 0xE0, 0x07, 0x60, 0x23, 0x1C, 0x29, 0x01, 0x80, 0xF8, 
+	0xC8, 0xF0, 0x01, 0xDD, 0x00, 0x28, 0x6E, 0x60, 0x20, 0x20, 0x6E, 0x78, 0x23, 0x4C, 0x12, 0xD0, 
+	0x03, 0x2B, 0x00, 0x49, 0x1F, 0x20, 0x00, 0xFC, 0x8A, 0xF7, 0xFF, 0x4A, 0x1E, 0x4B, 0x1B, 0x80, 
+	0x55, 0x8C, 0x5B, 0x78, 0x23, 0x80, 0x13, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 
+	0x00, 0x93, 0x00, 0xF7, 0xFF, 0x1C, 0x0B, 0x4B, 0x18, 0xFC, 0x23, 0x78, 0x1B, 0x48, 0x18, 0x49, 
+	0x18, 0x22, 0x00, 0x3B, 0x01, 0xE0, 0x04, 0x00, 0x5C, 0xB2, 0xDB, 0x52, 0x62, 0x54, 0xC2, 0xD1, 
+	0xF8, 0x2B, 0x00, 0xBD, 0xF0, 0xB0, 0x09, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x91, 0x20, 
+	0x00, 0x03, 0x1C, 0x20, 0x00, 0x11, 0xBC, 0x20, 0x00, 0x10, 0xF4, 0x20, 0x00, 0x09, 0x20, 0x20, 
+	0x00, 0x11, 0x3C, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x40, 0x02, 0x20, 0x00, 0x11, 0x94, 0x40, 
+	0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x0D, 0x48, 0x20, 
+	0x00, 0x09, 0x78, 0x00, 0x00, 0x59, 0x9A, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x09, 0x7C, 0x20, 
+	0x00, 0x0A, 0xA4, 0x20, 0x00, 0x02, 0x14, 0x4A, 0xA0, 0xB5, 0xF0, 0x70, 0x13, 0x23, 0x00, 0xB0, 
+	0x85, 0x4A, 0x9F, 0x4A, 0x9F, 0x70, 0x13, 0x4A, 0x9F, 0x70, 0x13, 0x4B, 0x9F, 0x70, 0x13, 0x2B, 
+	0x00, 0x78, 0x1B, 0x20, 0x01, 0xD0, 0x03, 0xF7, 0xFF, 0x49, 0x9D, 0x24, 0x00, 0xFC, 0x31, 0x4E, 
+	0x9A, 0x4D, 0x9C, 0x78, 0x33, 0xE0, 0x11, 0xD0, 0x0C, 0x2B, 0x00, 0x7D, 0x29, 0x7D, 0xEB, 0x18, 
+	0xC9, 0x48, 0x99, 0x23, 0x00, 0x01, 0xE2, 0x93, 0x00, 0x18, 0x12, 0x20, 0x01, 0xB2, 0xC9, 0xF7, 
+	0xFF, 0x23, 0x02, 0x34, 0x01, 0xFB, 0xC5, 0x7E, 0x29, 0xB2, 0xE4, 0xD3, 0xEA, 0x42, 0x8C, 0x78, 
+	0x1B, 0x4B, 0x92, 0xD1, 0x00, 0x2B, 0x00, 0x4B, 0x91, 0xE1, 0x0D, 0x2A, 0x00, 0x78, 0x1A, 0x4B, 
+	0x90, 0xD1, 0x1F, 0x2B, 0x00, 0x78, 0x1B, 0x7D, 0xEB, 0xD0, 0x1B, 0xE0, 0x07, 0x4C, 0x8E, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x18, 0x2D, 0x01, 0x5D, 0x2B, 0x00, 0x55, 0x2A, 0x1C, 0x03, 0xD1, 0xF8, 0xB2, 
+	0xC0, 0x1E, 0x58, 0xD0, 0x01, 0x2B, 0x00, 0xE7, 0xF6, 0x1C, 0x0B, 0x48, 0x86, 0x4A, 0x87, 0x01, 
+	0x49, 0x78, 0x12, 0x3A, 0x01, 0xE0, 0x03, 0x18, 0x8C, 0xB2, 0xD2, 0x2A, 0x00, 0x54, 0x23, 0x4B, 
+	0x80, 0xD1, 0xF9, 0x78, 0x19, 0x4A, 0x7E, 0x70, 0x11, 0x78, 0x1B, 0xD0, 0x70, 0x2B, 0x00, 0x7E, 
+	0x1A, 0x4B, 0x78, 0x92, 0x02, 0x7D, 0xD9, 0x93, 0x03, 0x7D, 0x1B, 0x3B, 0x01, 0xE0, 0x22, 0x1C, 
+	0x59, 0xB2, 0xDB, 0x19, 0xC8, 0x01, 0x89, 0x9D, 0x03, 0x4C, 0x79, 0x5B, 0x00, 0x00, 0x40, 0xD0, 
+	0x04, 0x2D, 0x00, 0x00, 0x49, 0x19, 0x89, 0x18, 0x40, 0x5B, 0x09, 0x01, 0x59, 0x10, 0x40, 0x4D, 
+	0x74, 0x18, 0x89, 0x5B, 0x65, 0x00, 0x4C, 0x08, 0xED, 0x4C, 0x6F, 0x1A, 0x28, 0x5D, 0x0C, 0xDA, 
+	0x04, 0x42, 0x84, 0xDD, 0x00, 0x28, 0xFF, 0x4D, 0x6B, 0x20, 0xFF, 0x2B, 0x00, 0x54, 0x68, 0x1C, 
+	0x11, 0xD1, 0xDD, 0xB2, 0xD2, 0x1E, 0x4A, 0xD0, 0x03, 0x29, 0x00, 0x1C, 0x97, 0x9B, 0x02, 0xE7, 
+	0xF4, 0x1C, 0xD6, 0x4B, 0x65, 0x4A, 0x5F, 0x78, 0x1B, 0x7E, 0x17, 0x01, 0x7F, 0x49, 0x62, 0x3B, 
+	0x01, 0xE0, 0x10, 0x4E, 0x64, 0xB2, 0xDB, 0x5B, 0x94, 0x00, 0x5A, 0x56, 0x45, 0x18, 0xF8, 0x1C, 
+	0x2A, 0xB2, 0x26, 0xDA, 0x00, 0x42, 0xB5, 0xB2, 0x12, 0x1C, 0x22, 0xDD, 0x00, 0x2A, 0xFF, 0x54, 
+	0x42, 0x22, 0xFF, 0xD1, 0xEC, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x50, 0xD0, 0x03, 0x2B, 0x00, 0x49, 
+	0x5A, 0x20, 0x03, 0xFA, 0x85, 0xAE, 0xF1, 0x12, 0xFB, 0x94, 0xF7, 0xFF, 0x4D, 0x4E, 0x24, 0x00, 
+	0xE0, 0x0E, 0x4E, 0x4B, 0x2B, 0x00, 0x78, 0x33, 0x4B, 0x50, 0xD0, 0x09, 0x18, 0xD2, 0x01, 0x62, 
+	0x7D, 0xE9, 0x23, 0x00, 0x93, 0x00, 0x20, 0x03, 0xF7, 0xFF, 0x23, 0x01, 0x34, 0x01, 0xFB, 0x2B, 
+	0x7E, 0x2B, 0xB2, 0xE4, 0xD8, 0xED, 0x42, 0xA3, 0x23, 0x01, 0x4A, 0x40, 0x4A, 0x3D, 0x70, 0x13, 
+	0x4A, 0x3B, 0x70, 0x13, 0x4B, 0x3E, 0x70, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x49, 0xD0, 0x6D, 
+	0x02, 0x58, 0x68, 0x1B, 0x4A, 0x3C, 0xD5, 0x69, 0x7D, 0x16, 0x24, 0x80, 0x7D, 0xD2, 0x7E, 0x13, 
+	0x18, 0xB6, 0x4D, 0x45, 0x06, 0x24, 0xB2, 0xF6, 0xE0, 0x18, 0x46, 0xB4, 0xB2, 0xDB, 0x3B, 0x01, 
+	0x00, 0x5A, 0x49, 0x42, 0x5A, 0x56, 0x1C, 0x5F, 0x46, 0x62, 0x01, 0xBF, 0x3A, 0x01, 0xE0, 0x0D, 
+	0x1C, 0x91, 0xB2, 0xD2, 0x48, 0x37, 0x18, 0x79, 0x5A, 0x09, 0x00, 0x49, 0x42, 0x8C, 0x1B, 0x89, 
+	0x1C, 0x0C, 0xDA, 0x00, 0xDD, 0x00, 0x42, 0x8D, 0x2A, 0x00, 0x1C, 0x0D, 0x2B, 0x00, 0xD1, 0xEF, 
+	0x20, 0x16, 0xD1, 0xE4, 0xF7, 0xFF, 0x49, 0x36, 0x4B, 0x25, 0xFB, 0x45, 0x78, 0x1B, 0x4A, 0x35, 
+	0x80, 0x55, 0x80, 0x14, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x16, 0x93, 0x00, 
+	0xF7, 0xFF, 0x1C, 0x0B, 0x4B, 0x26, 0xFA, 0xDF, 0x78, 0x1B, 0x20, 0x80, 0x06, 0x00, 0x49, 0x2A, 
+	0x4D, 0x2E, 0x4E, 0x2D, 0x3B, 0x01, 0xE0, 0x19, 0x5C, 0xF7, 0xB2, 0xDB, 0x46, 0x94, 0x1C, 0x7A, 
+	0x5C, 0xEA, 0x46, 0x64, 0x46, 0xA4, 0x01, 0xA4, 0x44, 0x62, 0x32, 0x02, 0x00, 0x52, 0x4C, 0x1D, 
+	0x4C, 0x22, 0x5B, 0x12, 0x46, 0x94, 0x00, 0x7F, 0x46, 0x64, 0x5B, 0x3A, 0x42, 0x90, 0x1A, 0xA2, 
+	0x1C, 0x10, 0xDA, 0x00, 0xDD, 0x00, 0x42, 0x91, 0x2B, 0x00, 0x1C, 0x11, 0x4B, 0x0C, 0xD1, 0xE3, 
+	0x78, 0x1B, 0x4A, 0x1C, 0x80, 0x51, 0x80, 0x10, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 
+	0x20, 0x16, 0x93, 0x00, 0xF7, 0xFF, 0x1C, 0x0B, 0xB0, 0x05, 0xFA, 0xAD, 0x46, 0xC0, 0xBD, 0xF0, 
+	0x20, 0x00, 0x09, 0xAC, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x11, 0x30, 0x20, 0x00, 0x11, 0x48, 
+	0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0xAB, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x40, 0x84, 
+	0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x01, 0xE1, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x0E, 0x64, 
+	0x20, 0x00, 0x09, 0x7C, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0D, 0x3C, 
+	0x00, 0x00, 0x59, 0xAF, 0x20, 0x00, 0x00, 0x58, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x11, 0x94, 
+	0x00, 0x00, 0x59, 0xB5, 0x20, 0x00, 0x11, 0x54, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 
+	0x4B, 0xB3, 0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0xA5, 0xD0, 0x00, 0x2B, 0x00, 0x4A, 0xB1, 0xE2, 0x01, 
+	0x78, 0x12, 0x4C, 0xB1, 0x4E, 0xB2, 0x4D, 0xB1, 0xB2, 0x52, 0x7C, 0x64, 0x60, 0x2B, 0x60, 0x6B, 
+	0x81, 0x6B, 0x82, 0x6B, 0x81, 0x2B, 0x82, 0x2B, 0x60, 0xB3, 0x60, 0x33, 0x4F, 0xAD, 0x92, 0x1B, 
+	0x4B, 0xAD, 0x22, 0xFF, 0x60, 0xF2, 0x60, 0x72, 0x7E, 0x3F, 0x94, 0x11, 0x4C, 0xA9, 0x78, 0x1B, 
+	0x93, 0x0B, 0x97, 0x09, 0x4D, 0xA4, 0x7D, 0xE4, 0x23, 0x46, 0x94, 0x08, 0x4F, 0xA2, 0x5E, 0xED, 
+	0x23, 0x48, 0x95, 0x0E, 0x4C, 0xA3, 0x5E, 0xFF, 0x7D, 0x24, 0x97, 0x0F, 0x94, 0x0C, 0x23, 0x2D, 
+	0x4E, 0xA2, 0x4D, 0x9D, 0x78, 0x6D, 0x9F, 0x11, 0x42, 0x7F, 0x68, 0x36, 0x95, 0x0D, 0x4C, 0x9A, 
+	0x97, 0x1D, 0x96, 0x12, 0x4D, 0x98, 0x7C, 0xA4, 0x5C, 0xEB, 0x94, 0x22, 0x93, 0x13, 0x9E, 0x1B, 
+	0x1B, 0x9B, 0x23, 0x10, 0x27, 0x18, 0x93, 0x1E, 0x20, 0x1C, 0x57, 0xEF, 0x56, 0x28, 0x97, 0x14, 
+	0x90, 0x18, 0x21, 0x19, 0x23, 0x00, 0x56, 0x69, 0x24, 0x00, 0x22, 0x00, 0x93, 0x05, 0x91, 0x23, 
+	0x26, 0x00, 0x25, 0x00, 0x20, 0xFF, 0x27, 0x00, 0x23, 0xFF, 0x21, 0x00, 0x94, 0x17, 0x92, 0x06, 
+	0x96, 0x1A, 0x95, 0x10, 0x90, 0x19, 0x97, 0x15, 0x92, 0x1F, 0x91, 0x21, 0x94, 0x1C, 0x93, 0x16, 
+	0x2C, 0x00, 0x9C, 0x09, 0xE1, 0x27, 0xD1, 0x00, 0x4D, 0x89, 0x9B, 0x09, 0xB2, 0xDB, 0x3B, 0x01, 
+	0x00, 0x5B, 0x93, 0x09, 0x9E, 0x08, 0x5B, 0x5B, 0x2E, 0x00, 0x93, 0x0A, 0x9F, 0x09, 0xD0, 0xF0, 
+	0x37, 0x01, 0x48, 0x84, 0x18, 0x1B, 0x01, 0xFB, 0x99, 0x0A, 0x88, 0x1B, 0x1A, 0x5A, 0x9C, 0x0E, 
+	0xDA, 0x00, 0x42, 0x94, 0x9D, 0x0F, 0xE1, 0x92, 0xDD, 0x00, 0x42, 0x95, 0x9E, 0x09, 0xE1, 0x8B, 
+	0x21, 0x01, 0x01, 0xBF, 0x22, 0x00, 0x25, 0x02, 0x97, 0x03, 0x01, 0x70, 0x4D, 0x7A, 0xE0, 0x2C, 
+	0x00, 0x64, 0x18, 0x84, 0x27, 0x18, 0x46, 0x6E, 0x5F, 0xBD, 0x5B, 0x2C, 0x42, 0xAC, 0x1A, 0xE4, 
+	0xB2, 0xA7, 0xDD, 0x01, 0x46, 0x6E, 0x97, 0x06, 0x5F, 0xBD, 0x27, 0x14, 0xDA, 0x01, 0x42, 0xAC, 
+	0x94, 0x05, 0xB2, 0xA4, 0x4F, 0x70, 0x18, 0x82, 0x52, 0xBB, 0x00, 0x52, 0xB2, 0xCB, 0x9A, 0x08, 
+	0xD9, 0xBD, 0x42, 0x9A, 0x1C, 0x8D, 0x9A, 0x03, 0x4C, 0x6C, 0x19, 0x53, 0x5B, 0x1B, 0x00, 0x5B, 
+	0x9F, 0x0E, 0x9E, 0x0A, 0x1B, 0x9C, 0x1C, 0x0A, 0xDD, 0x00, 0x42, 0xBC, 0x9E, 0x0F, 0xE1, 0x38, 
+	0x42, 0xB4, 0x31, 0x01, 0xE0, 0xD1, 0xDA, 0x00, 0x2F, 0x00, 0x9F, 0x0C, 0x9E, 0x03, 0xD0, 0x07, 
+	0x19, 0x34, 0x1C, 0xD4, 0x00, 0x64, 0x4F, 0x61, 0x18, 0xE3, 0x5B, 0xE4, 0x9C, 0x0D, 0x10, 0x5B, 
+	0xD0, 0x06, 0x2C, 0x00, 0x18, 0x84, 0x4E, 0x5E, 0x9F, 0x12, 0x5D, 0xA4, 0x43, 0x7B, 0x43, 0x63, 
+	0x9C, 0x0B, 0x13, 0x1B, 0xD0, 0xBA, 0x2C, 0x00, 0x4F, 0x57, 0x18, 0x86, 0x5B, 0x3F, 0x00, 0x74, 
+	0x4F, 0x58, 0x46, 0xBC, 0x46, 0x66, 0x57, 0xBC, 0x1B, 0x34, 0x08, 0xF6, 0x46, 0x6F, 0x94, 0x07, 
+	0x96, 0x04, 0x24, 0x18, 0x9E, 0x07, 0x5F, 0xE7, 0x42, 0xBC, 0x1A, 0xF4, 0xB2, 0xA7, 0xDD, 0x01, 
+	0x46, 0x6E, 0x97, 0x06, 0x5F, 0xBE, 0x27, 0x14, 0xDA, 0x01, 0x42, 0xB4, 0x96, 0x05, 0xB2, 0xA6, 
+	0x42, 0xBC, 0x9F, 0x11, 0x18, 0x84, 0xDD, 0x5D, 0x4C, 0x4B, 0x46, 0xA4, 0x46, 0x66, 0x27, 0x00, 
+	0x9F, 0x04, 0x55, 0x37, 0x1A, 0xFC, 0x9E, 0x13, 0xD0, 0x08, 0x2E, 0x00, 0x9C, 0x07, 0x9F, 0x1B, 
+	0x43, 0x7B, 0x9E, 0x1E, 0x9F, 0x04, 0x43, 0x74, 0x11, 0x24, 0x19, 0x1C, 0x1C, 0x23, 0x1B, 0x3C, 
+	0xDA, 0x17, 0x33, 0x7F, 0x18, 0x82, 0x4E, 0x3F, 0x54, 0xB3, 0x23, 0x80, 0x9E, 0x21, 0x9A, 0x23, 
+	0x18, 0xF6, 0x1A, 0xA3, 0xAF, 0x1F, 0x96, 0x21, 0x5E, 0xFB, 0x23, 0x00, 0xDC, 0x01, 0x42, 0x9C, 
+	0x94, 0x1F, 0xB2, 0xA4, 0x4C, 0x35, 0x9A, 0x03, 0x00, 0x6D, 0x19, 0x55, 0x5B, 0x2B, 0x27, 0x00, 
+	0xE7, 0x83, 0x53, 0x2F, 0x2C, 0x7E, 0x18, 0x83, 0x4E, 0x32, 0xDD, 0x36, 0x54, 0xF7, 0x27, 0x7F, 
+	0x42, 0xBC, 0x9F, 0x14, 0x9E, 0x17, 0xDB, 0x03, 0x18, 0xF6, 0x1B, 0xE3, 0xAF, 0x10, 0x96, 0x17, 
+	0x5E, 0xFB, 0x23, 0x00, 0xDC, 0x24, 0x42, 0x9C, 0x9E, 0x18, 0xB2, 0xA3, 0xDB, 0x11, 0x42, 0xB4, 
+	0x9C, 0x09, 0x9F, 0x1A, 0xDA, 0x00, 0x42, 0xA7, 0x9E, 0x16, 0x94, 0x1A, 0x42, 0xA6, 0x9C, 0x09, 
+	0x94, 0x16, 0xDD, 0x00, 0x42, 0x96, 0x9E, 0x15, 0x5C, 0x96, 0xAE, 0xF1, 0x13, 0x92, 0x15, 0xDA, 
+	0x00, 0x42, 0xBA, 0x9F, 0x19, 0x92, 0x19, 0xDA, 0x00, 0x4C, 0x1D, 0x9A, 0x03, 0x00, 0x6D, 0x19, 
+	0x55, 0x53, 0x2B, 0x5B, 0x2A, 0x9E, 0x1D, 0xE7, 0x54, 0x42, 0xB4, 0x18, 0x87, 0x4C, 0x1B, 0xDA, 
+	0x0E, 0x55, 0x3E, 0x26, 0x00, 0xB2, 0xA3, 0xE7, 0x9F, 0xE7, 0xD8, 0x93, 0x10, 0x54, 0xF4, 0x4E, 
+	0x16, 0xDA, 0xC7, 0x2C, 0x00, 0x42, 0xBC, 0x9F, 0x23, 0xE7, 0xA9, 0xDC, 0xAF, 0x97, 0x20, 0x4E, 
+	0x13, 0x9E, 0x22, 0x5D, 0xBC, 0x42, 0xB7, 0xB2, 0x67, 0x9F, 0x20, 0xD0, 0x8D, 0x34, 0x01, 0x4E, 
+	0x0F, 0xE7, 0x88, 0x55, 0xBC, 0x20, 0x00, 0x09, 0xAC, 0x20, 0x00, 0x00, 0x4C, 0x20, 0x00, 0x0D, 
+	0x48, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 
+	0x1C, 0x20, 0x00, 0x09, 0x78, 0x20, 0x00, 0x11, 0x94, 0x40, 0x00, 0x40, 0x04, 0x20, 0x00, 0x03, 
+	0xF8, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x79, 0x12, 0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x0A, 
+	0xB3, 0x27, 0x01, 0x9C, 0x09, 0x2C, 0x00, 0x97, 0x1C, 0xE6, 0xD7, 0xD0, 0x00, 0x46, 0x6F, 0x46, 
+	0x6D, 0x20, 0x14, 0x26, 0x18, 0x5B, 0xC0, 0x5B, 0x76, 0x99, 0x17, 0x4D, 0x41, 0x1C, 0x2F, 0xAC, 
+	0x10, 0x82, 0x68, 0x82, 0x2E, 0x88, 0x25, 0x60, 0x29, 0x1C, 0x3C, 0x9B, 0x21, 0x9E, 0x1A, 0x81, 
+	0x3D, 0x60, 0x63, 0x4F, 0x3C, 0x88, 0x25, 0xAC, 0x1F, 0x98, 0x16, 0x60, 0xBE, 0x9A, 0x19, 0x99, 
+	0x15, 0x9E, 0x0B, 0x4C, 0x37, 0x60, 0x39, 0x60, 0xF8, 0x81, 0x65, 0x60, 0x7A, 0xD0, 0x24, 0x2E, 
+	0x00, 0x78, 0x1B, 0x4B, 0x35, 0xD0, 0x03, 0x2B, 0x00, 0x68, 0x1B, 0x4B, 0x34, 0xDD, 0x1C, 0x2B, 
+	0x00, 0x78, 0x23, 0x4C, 0x33, 0xD1, 0x56, 0x2B, 0x00, 0x7E, 0x3B, 0x4F, 0x32, 0xD0, 0x14, 0x2B, 
+	0x00, 0x9F, 0x09, 0x4D, 0x31, 0x78, 0x23, 0x26, 0x01, 0xD0, 0x08, 0x2B, 0x00, 0x01, 0x7A, 0x48, 
+	0x2D, 0x19, 0x52, 0x7D, 0xC1, 0x23, 0x01, 0x20, 0x03, 0xF7, 0xFF, 0x96, 0x00, 0x49, 0x29, 0xF8, 
+	0xAD, 0x7E, 0x0B, 0x37, 0x01, 0x42, 0xBB, 0xB2, 0xFF, 0x4C, 0x26, 0xD8, 0xED, 0x2B, 0x00, 0x7D, 
+	0x23, 0x7E, 0x22, 0xD0, 0x13, 0x3A, 0x01, 0x7D, 0xE4, 0xB2, 0xD2, 0x49, 0x24, 0x20, 0x00, 0x34, 
+	0x02, 0x01, 0x9B, 0x1C, 0x53, 0x00, 0x5B, 0x19, 0x1B, 0x5A, 0x5D, 0x3A, 0x01, 0x5A, 0x5D, 0xB2, 
+	0xD2, 0xE7, 0xF5, 0x52, 0x58, 0x96, 0x1C, 0x26, 0x01, 0x4D, 0x1D, 0xE6, 0x74, 0x7E, 0xAB, 0x4E, 
+	0x1D, 0x4F, 0x13, 0x68, 0x32, 0x21, 0x08, 0x43, 0x53, 0x48, 0x1B, 0x5E, 0x79, 0x4A, 0x1B, 0x11, 
+	0x9B, 0x0F, 0xDC, 0x17, 0xCD, 0x42, 0x99, 0x78, 0x00, 0x70, 0x15, 0x41, 0x65, 0xD1, 0x0A, 0x28, 
+	0x00, 0x2C, 0x00, 0x9C, 0x1C, 0x23, 0x01, 0xD0, 0x07, 0x4A, 0x15, 0x70, 0x13, 0x70, 0x13, 0x49, 
+	0x15, 0x70, 0x0B, 0x4A, 0x15, 0xB0, 0x25, 0x70, 0x13, 0x25, 0x01, 0xBD, 0xF0, 0xE6, 0x51, 0x95, 
+	0x1C, 0x94, 0x1C, 0x24, 0x01, 0x20, 0x03, 0xE6, 0x4E, 0xF7, 0xFF, 0x49, 0x10, 0xE7, 0xA3, 0xF8, 
+	0xBD, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x01, 0xDE, 0x20, 0x00, 0x01, 
+	0x20, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0E, 0x64, 0x40, 0x00, 0x40, 
+	0x00, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0x78, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 0x09, 
+	0x14, 0x20, 0x00, 0x11, 0x30, 0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 0x01, 0xC4, 0x00, 0x00, 0x59, 
+	0xF0, 0x4B, 0x2F, 0xB5, 0xF0, 0x78, 0x1C, 0xB0, 0x85, 0x4E, 0x2F, 0x4D, 0x2E, 0x3C, 0x01, 0xE0, 
+	0x10, 0x57, 0x2B, 0xB2, 0xE4, 0x1C, 0x59, 0x57, 0x32, 0x01, 0x89, 0x32, 0x02, 0x4A, 0x2B, 0x18, 
+	0x89, 0x5A, 0x88, 0x00, 0x49, 0x00, 0x5B, 0x4A, 0x2A, 0x1C, 0x21, 0x5A, 0x9A, 0xFB, 0x0A, 0xF7, 
+	0xFF, 0xD1, 0xEC, 0x2C, 0x00, 0x78, 0x1B, 0x4B, 0x27, 0xD0, 0x08, 0x2B, 0x00, 0x20, 0x03, 0x4B, 
+	0x20, 0x23, 0x01, 0x78, 0x19, 0x4A, 0x24, 0x93, 0x00, 0xF7, 0xFF, 0x23, 0x02, 0x4B, 0x23, 0xF8, 
+	0x1D, 0x78, 0x18, 0x49, 0x1E, 0x1C, 0x84, 0x78, 0x9A, 0x78, 0xDE, 0x92, 0x03, 0x94, 0x02, 0x23, 
+	0x00, 0x01, 0xA4, 0xE0, 0x0D, 0x00, 0x64, 0x19, 0xE4, 0x25, 0x00, 0x5A, 0x65, 0x32, 0x01, 0x52, 
+	0x65, 0x9C, 0x02, 0xE0, 0x02, 0x18, 0xE7, 0x22, 0x00, 0xD1, 0xF2, 0x1A, 0xB4, 0x9D, 0x03, 0x33, 
+	0x01, 0x42, 0xAA, 0x18, 0x1A, 0x4B, 0x15, 0xDB, 0xF5, 0x78, 0x58, 0x49, 0x10, 0x1C, 0x42, 0x78, 
+	0xDE, 0x42, 0x5B, 0x23, 0x01, 0x22, 0x00, 0x92, 0x02, 0xE0, 0x08, 0x1C, 0x9F, 0x18, 0xAC, 0x9D, 
+	0x02, 0x19, 0xE4, 0x01, 0xA4, 0x5A, 0x65, 0x00, 0x64, 0x52, 0x65, 0x25, 0x00, 0x18, 0x14, 0x32, 
+	0x01, 0xDB, 0xF3, 0x42, 0xB4, 0x33, 0x01, 0x9A, 0x03, 0xDB, 0xEC, 0x42, 0x93, 0xBD, 0xF0, 0xB0, 
+	0x05, 0x20, 0x00, 0x09, 0x7C, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 0x40, 0x00, 0x40, 
+	0x00, 0x20, 0x00, 0x11, 0x94, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 0x03, 
+	0x0A, 0x4B, 0x0C, 0xB5, 0x30, 0x78, 0xDB, 0x4C, 0x0C, 0xE0, 0x10, 0x49, 0x0C, 0xB2, 0xDB, 0x3B, 
+	0x01, 0x4D, 0x0B, 0x1C, 0x5A, 0x19, 0x52, 0x01, 0xD2, 0xD1, 0x03, 0x1C, 0x45, 0x00, 0x5A, 0x88, 
+	0x15, 0xE0, 0x04, 0x52, 0x55, 0x01, 0x5A, 0x88, 0x15, 0x00, 0x52, 0x18, 0x12, 0x2B, 0x00, 0x53, 
+	0x15, 0xBD, 0x30, 0xD1, 0xEC, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x11, 
+	0x94, 0x40, 0x00, 0x40, 0x02, 0xB0, 0x8D, 0xB5, 0xF0, 0x92, 0x0B, 0x91, 0x0A, 0x1C, 0x41, 0x4B, 
+	0x63, 0x4A, 0x63, 0xD1, 0x0C, 0x7E, 0x12, 0x49, 0x63, 0x92, 0x03, 0x3A, 0x01, 0x78, 0x5E, 0x78, 
+	0xDA, 0x23, 0x00, 0x00, 0x54, 0x18, 0x64, 0x1C, 0x55, 0xE0, 0x0E, 0x46, 0x94, 0x79, 0x5A, 0x7B, 
+	0xDC, 0x3A, 0x01, 0x18, 0xA2, 0x4A, 0x5C, 0xE0, 0x10, 0x01, 0xC9, 0x18, 0xE9, 0x88, 0x0A, 0x18, 
+	0x89, 0x53, 0xE2, 0x00, 0x5F, 0x22, 0x00, 0x88, 0x0A, 0x3B, 0x01, 0x80, 0x0A, 0x19, 0xDA, 0x46, 
+	0x67, 0xDA, 0xF0, 0x42, 0xB2, 0x24, 0x00, 0x9A, 0x03, 0x4D, 0x54, 0x01, 0x56, 0x23, 0x00, 0x18, 
+	0x36, 0x1C, 0x11, 0x00, 0x76, 0x93, 0x07, 0x93, 0x08, 0x93, 0x05, 0x93, 0x06, 0x96, 0x09, 0x95, 
+	0x03, 0xE0, 0x55, 0x46, 0xA4, 0xD1, 0x04, 0x1C, 0x44, 0x00, 0x56, 0x4C, 0x4A, 0x5A, 0xE4, 0x19, 
+	0x34, 0x4C, 0x4B, 0xE0, 0x04, 0x19, 0x3E, 0x9F, 0x09, 0x5B, 0x34, 0x01, 0x5C, 0x4F, 0x46, 0x1C, 
+	0x4E, 0x01, 0xF6, 0x96, 0x04, 0x88, 0x37, 0x19, 0xF6, 0xB2, 0x3E, 0xB2, 0x24, 0x1B, 0xA6, 0x4F, 
+	0x45, 0x19, 0xE7, 0x00, 0x54, 0x52, 0xFE, 0x17, 0xF4, 0x40, 0x66, 0x19, 0x36, 0x24, 0x01, 0x1C, 
+	0x0F, 0x42, 0xB9, 0x43, 0xA7, 0x9C, 0x07, 0xD1, 0x09, 0x94, 0x07, 0x19, 0xA4, 0xDD, 0x00, 0x42, 
+	0xB5, 0x9F, 0x06, 0x1C, 0x35, 0xDB, 0x0B, 0x42, 0xB7, 0x9C, 0x08, 0xE0, 0x0D, 0x19, 0xA4, 0x9F, 
+	0x03, 0x42, 0xB7, 0x94, 0x08, 0x96, 0x03, 0xDD, 0x00, 0x42, 0xB4, 0x9C, 0x05, 0xE0, 0x02, 0xDB, 
+	0x02, 0xE0, 0x00, 0x96, 0x06, 0x9E, 0x04, 0x96, 0x05, 0x4E, 0x2F, 0x01, 0xF4, 0x52, 0x9F, 0xAE, 
+	0xF1, 0x14, 0x1C, 0x47, 0x19, 0xA4, 0x88, 0x27, 0xD1, 0x0E, 0x97, 0x04, 0x4E, 0x2B, 0x19, 0xBE, 
+	0x00, 0x57, 0x27, 0x10, 0x96, 0x02, 0x5B, 0xBF, 0x46, 0x6E, 0x52, 0xF7, 0x9E, 0x02, 0x26, 0x00, 
+	0x88, 0x26, 0xE0, 0x05, 0x80, 0x26, 0x4E, 0x27, 0x88, 0x27, 0x19, 0xA6, 0x9C, 0x09, 0x53, 0x37, 
+	0x01, 0x5C, 0x3B, 0x02, 0x39, 0x01, 0xDA, 0xA7, 0x45, 0x61, 0xD1, 0x13, 0x30, 0x01, 0x78, 0x23, 
+	0x4C, 0x23, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x22, 0x20, 0x01, 0xFF, 0x70, 0xF7, 0xFE, 0x2B, 0x00, 
+	0x78, 0x23, 0x4B, 0x17, 0xD0, 0x08, 0x78, 0xD9, 0x20, 0x01, 0x93, 0x00, 0x23, 0x00, 0x23, 0x02, 
+	0x4A, 0x16, 0xFF, 0x0C, 0xF7, 0xFE, 0x9F, 0x08, 0x9E, 0x07, 0x19, 0xF3, 0x9C, 0x0A, 0x9E, 0x05, 
+	0x60, 0x23, 0x9C, 0x06, 0x9F, 0x03, 0x1B, 0x65, 0x1B, 0xF3, 0xDA, 0x00, 0x42, 0x9D, 0x9E, 0x0B, 
+	0x1C, 0x1D, 0x60, 0x35, 0x4C, 0x12, 0x2B, 0x00, 0x78, 0x23, 0x20, 0x0B, 0xD0, 0x03, 0xF7, 0xFE, 
+	0x49, 0x11, 0x78, 0x23, 0xFF, 0x4D, 0xD0, 0x08, 0x2B, 0x00, 0x20, 0x0B, 0x4B, 0x06, 0x23, 0x01, 
+	0x7E, 0x19, 0x4A, 0x09, 0x93, 0x00, 0xF7, 0xFE, 0x23, 0x02, 0xB0, 0x0D, 0xFE, 0xE9, 0x46, 0xC0, 
+	0xBD, 0xF0, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x11, 0x94, 0x40, 0x00, 
+	0x40, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 
+	0x01, 0xEB, 0x00, 0x00, 0x59, 0xC6, 0x00, 0x00, 0x59, 0xCD, 0x4B, 0xA6, 0xB5, 0xF0, 0x78, 0x1D, 
+	0xB0, 0x85, 0xD0, 0x29, 0x2D, 0x00, 0x4C, 0xA5, 0x4B, 0xA4, 0x4B, 0xA5, 0x78, 0x18, 0x68, 0x19, 
+	0xB2, 0x46, 0x00, 0xB2, 0x68, 0x5B, 0x51, 0x13, 0x18, 0xCB, 0xB2, 0xD2, 0x1D, 0x82, 0x23, 0x06, 
+	0x25, 0x00, 0xB2, 0xDB, 0x3B, 0x01, 0xD5, 0x00, 0x1A, 0xF1, 0x00, 0x89, 0x31, 0x0C, 0x18, 0x6D, 
+	0x59, 0x09, 0x2A, 0x0B, 0x1C, 0x11, 0x39, 0x0C, 0xD9, 0x01, 0x00, 0x89, 0xB2, 0xC9, 0x3A, 0x01, 
+	0x58, 0x61, 0xB2, 0xD2, 0x1A, 0x6D, 0xD1, 0xEB, 0x2B, 0x00, 0x4A, 0x93, 0x30, 0x01, 0x70, 0x10, 
+	0xB2, 0xC0, 0x28, 0x0B, 0xB2, 0x40, 0x70, 0x13, 0xDD, 0x00, 0x78, 0x1B, 0x4B, 0x92, 0xD0, 0x00, 
+	0x2B, 0x00, 0x4B, 0x91, 0xE1, 0x15, 0x5E, 0x5B, 0x21, 0x14, 0xDA, 0x02, 0x42, 0x9D, 0x22, 0x01, 
+	0x4B, 0x8F, 0x4B, 0x8B, 0x70, 0x1A, 0x5E, 0x9E, 0x22, 0x10, 0x5F, 0x1B, 0x24, 0x12, 0x4B, 0x85, 
+	0x1A, 0xF6, 0x28, 0x00, 0x78, 0x18, 0x4B, 0x8A, 0xD1, 0x16, 0x68, 0x1B, 0x4F, 0x8A, 0x80, 0xBB, 
+	0x4C, 0x8A, 0x80, 0x3E, 0x78, 0x23, 0xD0, 0x02, 0x2B, 0x00, 0xF7, 0xFE, 0x49, 0x88, 0x78, 0x23, 
+	0xFE, 0xD7, 0xD0, 0x07, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x00, 0x93, 0x00, 0x1C, 0x0B, 
+	0x1C, 0x3A, 0xFE, 0x74, 0xF7, 0xFE, 0x7D, 0x9A, 0x4B, 0x7C, 0xDC, 0x07, 0x42, 0x96, 0x78, 0x1A, 
+	0x4B, 0x80, 0x29, 0x02, 0xB2, 0x51, 0x32, 0x01, 0xDC, 0x08, 0xE0, 0x05, 0x70, 0x1A, 0x42, 0x9E, 
+	0x7D, 0xDB, 0x4B, 0x7B, 0xDB, 0x02, 0x70, 0x1A, 0x22, 0x00, 0x4A, 0x76, 0x4B, 0x71, 0x68, 0x1B, 
+	0x68, 0x59, 0x18, 0xCB, 0x80, 0x15, 0x4B, 0x74, 0x80, 0x53, 0x78, 0x1B, 0x80, 0x96, 0xD0, 0x06, 
+	0x2B, 0x00, 0x93, 0x00, 0x23, 0x01, 0x21, 0x03, 0x20, 0x19, 0xF7, 0xFE, 0x23, 0x02, 0x4B, 0x6B, 
+	0xFE, 0x4F, 0x78, 0x1B, 0x4C, 0x64, 0xD0, 0x61, 0x2B, 0x00, 0x78, 0x2B, 0x4D, 0x6B, 0xD0, 0x03, 
+	0x2B, 0x00, 0x49, 0x6C, 0x20, 0x19, 0xFE, 0x9A, 0xF7, 0xFE, 0x78, 0x1B, 0x4B, 0x69, 0xD1, 0x05, 
+	0x2B, 0x00, 0x2A, 0x00, 0x78, 0x22, 0x4A, 0x61, 0xD0, 0x52, 0xE0, 0x4F, 0x70, 0x13, 0xD1, 0x4D, 
+	0x2B, 0x03, 0x2B, 0x00, 0x78, 0x2B, 0x20, 0x00, 0xD0, 0x03, 0xF7, 0xFE, 0x49, 0x63, 0x4B, 0x55, 
+	0xFE, 0x87, 0x78, 0x19, 0x4A, 0x62, 0xD1, 0x1A, 0x29, 0x00, 0x70, 0x18, 0x20, 0x01, 0x7D, 0xD6, 
+	0x7E, 0x13, 0x4A, 0x60, 0x4D, 0x5F, 0x3B, 0x01, 0xE0, 0x0B, 0x18, 0xF8, 0xB2, 0xDB, 0x5A, 0xA1, 
+	0x00, 0x44, 0x52, 0xA1, 0x00, 0xC9, 0x55, 0x41, 0x21, 0x00, 0xD1, 0xF4, 0x2B, 0x00, 0x1E, 0x59, 
+	0x46, 0x63, 0x2B, 0x00, 0xB2, 0xC9, 0x1C, 0x33, 0xD0, 0x23, 0x46, 0x8C, 0x01, 0x4F, 0x7E, 0x13, 
+	0xE7, 0xF4, 0x4A, 0x54, 0x7D, 0xD6, 0x3B, 0x01, 0xE0, 0x0E, 0xB2, 0xDB, 0x4D, 0x51, 0x00, 0x60, 
+	0x18, 0xFC, 0x00, 0xE4, 0x57, 0x64, 0x5A, 0x84, 0x94, 0x02, 0x1B, 0x64, 0x9D, 0x02, 0x2B, 0x00, 
+	0x52, 0x84, 0x1C, 0x0B, 0xD1, 0xF1, 0xB2, 0xC9, 0x1E, 0x59, 0xD0, 0x02, 0x2B, 0x00, 0x01, 0x4F, 
+	0x1C, 0x33, 0x4A, 0x3A, 0xE7, 0xF5, 0x31, 0x30, 0x1C, 0x11, 0x42, 0x8A, 0xC2, 0x08, 0x4B, 0x3B, 
+	0xD1, 0xFC, 0x70, 0x1A, 0x22, 0x00, 0x22, 0x01, 0x4B, 0x44, 0xE0, 0x60, 0x70, 0x1A, 0x4B, 0x43, 
+	0x78, 0x22, 0xD1, 0x06, 0x2A, 0x00, 0x21, 0x01, 0x4A, 0x40, 0x68, 0x1A, 0x70, 0x11, 0x60, 0x1A, 
+	0x18, 0x52, 0x22, 0x00, 0xE0, 0x55, 0x4B, 0x39, 0x60, 0x1A, 0x7E, 0x1C, 0x48, 0x3D, 0x49, 0x39, 
+	0x7D, 0xDB, 0x4B, 0x2D, 0x93, 0x02, 0x93, 0x03, 0x7C, 0x9B, 0x3B, 0x01, 0xE0, 0x11, 0x18, 0xF2, 
+	0xB2, 0xDB, 0x9D, 0x03, 0x56, 0x14, 0xD1, 0x07, 0x42, 0xAC, 0x00, 0x54, 0x4D, 0x31, 0x5A, 0x65, 
+	0x57, 0x57, 0x52, 0x67, 0x1B, 0xEF, 0x54, 0x14, 0x24, 0x00, 0xD1, 0xEE, 0x2B, 0x00, 0x1E, 0x65, 
+	0x46, 0x64, 0x2C, 0x00, 0xB2, 0xED, 0x9B, 0x02, 0xD0, 0x03, 0x46, 0xAC, 0x01, 0x6E, 0x4B, 0x2D, 
+	0xE7, 0xF4, 0x07, 0x5D, 0x68, 0x1B, 0x4B, 0x20, 0xD5, 0x2B, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x02, 
+	0xD0, 0x22, 0xF7, 0xFE, 0x49, 0x29, 0xE0, 0x1D, 0xFE, 0x03, 0x01, 0x62, 0x7D, 0xE9, 0x48, 0x21, 
+	0x1C, 0x0B, 0xE0, 0x08, 0x92, 0x02, 0x9A, 0x02, 0x3B, 0x01, 0x18, 0xD2, 0xB2, 0xDB, 0x5A, 0x12, 
+	0x00, 0x52, 0x08, 0xD2, 0x00, 0x5F, 0x2B, 0x00, 0x53, 0xBA, 0x4A, 0x13, 0xD1, 0xF4, 0x2A, 0x00, 
+	0x78, 0x12, 0x20, 0x02, 0xD0, 0x05, 0x4A, 0x0F, 0x93, 0x00, 0xF7, 0xFE, 0x1C, 0x03, 0x34, 0x01, 
+	0xFD, 0x8F, 0xE0, 0x01, 0xB2, 0xE4, 0x4E, 0x0B, 0x4D, 0x11, 0x42, 0xA3, 0x7E, 0x2B, 0xB0, 0x05, 
+	0xD8, 0xDC, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x10, 0xF4, 0x20, 0x00, 
+	0x11, 0xBC, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 
+	0x11, 0x3C, 0x20, 0x00, 0x11, 0x34, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 
+	0x59, 0xD2, 0x20, 0x00, 0x09, 0x20, 0x00, 0x00, 0x59, 0xD9, 0x00, 0x00, 0x59, 0xE2, 0x20, 0x00, 
+	0x09, 0xAE, 0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 
+	0x01, 0xBC, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x00, 0x58, 0x00, 0x00, 0x59, 0xEB, 0x4B, 0x25, 
+	0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0x87, 0xD1, 0x2B, 0x2B, 0x00, 0x4B, 0x24, 0x4A, 0x23, 0x78, 0x1B, 
+	0x7C, 0x90, 0x7E, 0xD2, 0x90, 0x04, 0xB2, 0x52, 0x4D, 0x22, 0x92, 0x05, 0xB2, 0x92, 0xE0, 0x1D, 
+	0x4A, 0x21, 0x4C, 0x21, 0x3B, 0x01, 0x5C, 0xE1, 0xB2, 0xDB, 0x42, 0xB9, 0x9F, 0x04, 0x00, 0x59, 
+	0xD1, 0x16, 0x0D, 0x49, 0xAE, 0xF1, 0x15, 0x28, 0x00, 0x5A, 0x88, 0x5A, 0x6E, 0xD0, 0x07, 0xB2, 
+	0x34, 0x46, 0x6F, 0x24, 0x14, 0x46, 0xA4, 0x45, 0xBC, 0x5F, 0xE7, 0x00, 0x59, 0xDA, 0x05, 0x00, 
+	0xF6, 0x5A, 0x6E, 0x52, 0x50, 0x1B, 0x80, 0x1B, 0x80, 0xE0, 0x01, 0x4F, 0x14, 0x52, 0x88, 0x54, 
+	0xF9, 0x21, 0x00, 0xD1, 0xDF, 0x2B, 0x00, 0x4C, 0x12, 0x4B, 0x0E, 0x48, 0x0F, 0x78, 0x19, 0xE0, 
+	0x05, 0x1C, 0x0B, 0xB2, 0xDB, 0x3B, 0x01, 0x5A, 0x15, 0x00, 0x5A, 0x53, 0x15, 0x08, 0xED, 0xD1, 
+	0xF7, 0x2B, 0x00, 0x78, 0x12, 0x4A, 0x0C, 0xD0, 0x05, 0x2A, 0x00, 0x93, 0x00, 0x20, 0x02, 0x1C, 
+	0x03, 0x4A, 0x08, 0xFD, 0x0E, 0xF7, 0xFE, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x11, 0x30, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 0x02, 0x14, 0x20, 
+	0x00, 0x0A, 0xA4, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x49, 0x09, 0xB5, 0x10, 0x48, 
+	0x09, 0x22, 0x50, 0xF9, 0xE2, 0xF0, 0x00, 0x49, 0x09, 0x4C, 0x08, 0x22, 0x42, 0x1C, 0x20, 0xF9, 
+	0xDC, 0xF0, 0x00, 0x7B, 0xA2, 0x4B, 0x07, 0x7D, 0xE3, 0x60, 0x1A, 0x7E, 0x23, 0x76, 0xE3, 0xBD, 
+	0x10, 0x77, 0x23, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x00, 
+	0x00, 0x74, 0x08, 0x20, 0x00, 0x11, 0x50, 0x49, 0x04, 0xB5, 0x08, 0x43, 0x41, 0x4B, 0x04, 0x18, 
+	0xC9, 0x48, 0x04, 0xF9, 0x60, 0xF0, 0x00, 0xBD, 0x08, 0xB2, 0xC0, 0xFF, 0xFF, 0xFE, 0x44, 0x00, 
+	0x02, 0x24, 0xFE, 0x00, 0x0F, 0x42, 0x40, 0x4C, 0x15, 0xB5, 0x10, 0x71, 0x23, 0x23, 0x00, 0x71, 
+	0x63, 0x23, 0x03, 0x72, 0x23, 0x23, 0x02, 0x78, 0x98, 0x4B, 0x12, 0x28, 0x03, 0x38, 0x02, 0xF0, 
+	0x00, 0xD8, 0x1D, 0x04, 0x0B, 0xF8, 0xE7, 0x20, 0xC7, 0x14, 0x02, 0x20, 0xD7, 0xE0, 0x00, 0xF7, 
+	0xFF, 0x70, 0xE0, 0x23, 0x02, 0xFF, 0xD9, 0xE0, 0x0E, 0x70, 0x20, 0x70, 0xE0, 0x20, 0xF4, 0xFF, 
+	0xD2, 0xF7, 0xFF, 0x70, 0x20, 0x23, 0x02, 0x23, 0x01, 0x71, 0xA3, 0x20, 0xF4, 0xE0, 0x06, 0xF7, 
+	0xFF, 0x70, 0xE0, 0x23, 0x01, 0xFF, 0xC9, 0x71, 0xA3, 0x70, 0x20, 0xBD, 0x10, 0x71, 0xE3, 0x20, 
+	0x00, 0x0A, 0xAA, 0x20, 0x00, 0x0D, 0x48, 0x4B, 0x59, 0xB5, 0xF0, 0x68, 0x1A, 0xB0, 0x87, 0x2A, 
+	0x08, 0x4B, 0x58, 0x22, 0x01, 0xD1, 0x01, 0x22, 0x00, 0xE0, 0x00, 0x4B, 0x56, 0x70, 0x1A, 0x33, 
+	0x01, 0x4C, 0x56, 0x2B, 0x00, 0x7F, 0xDB, 0x71, 0xE3, 0xD1, 0x00, 0x25, 0x01, 0x78, 0x23, 0x1C, 
+	0x28, 0x79, 0xA2, 0x40, 0x90, 0x00, 0xD9, 0x1A, 0xCB, 0xB2, 0x82, 0x4E, 0x50, 0x43, 0x53, 0xB2, 
+	0xDB, 0x10, 0xDB, 0x78, 0x22, 0x80, 0x33, 0x79, 0xA0, 0x23, 0xFA, 0x43, 0x53, 0x00, 0x9B, 0x1C, 
+	0x29, 0x4F, 0x4C, 0xB2, 0x88, 0x40, 0x81, 0x43, 0x58, 0x88, 0xB9, 0xF0, 0x00, 0x01, 0x09, 0xB2, 
+	0xC1, 0xF8, 0xFB, 0x78, 0x23, 0x80, 0x71, 0x79, 0xA0, 0x22, 0x2D, 0x1C, 0x2A, 0x43, 0x53, 0xB2, 
+	0x90, 0x40, 0x82, 0x46, 0x6B, 0x43, 0x58, 0x01, 0x09, 0x81, 0x19, 0xF8, 0xEC, 0xF0, 0x00, 0x80, 
+	0xB0, 0xB2, 0xC0, 0x79, 0xB9, 0x7A, 0x23, 0x1A, 0x18, 0x00, 0xD8, 0x00, 0xC0, 0x40, 0xA9, 0x30, 
+	0xE0, 0x19, 0x49, 0x79, 0xA2, 0x43, 0x48, 0x21, 0x08, 0x46, 0x6C, 0x40, 0x90, 0x5E, 0x61, 0xF0, 
+	0x00, 0x01, 0x49, 0x4A, 0x34, 0xF8, 0x8B, 0x7D, 0x11, 0x80, 0xF0, 0x4B, 0x36, 0x7D, 0xD0, 0xB2, 
+	0xC0, 0x18, 0x08, 0x7E, 0x17, 0x70, 0x18, 0x7E, 0x56, 0x70, 0x5F, 0x7F, 0x96, 0x96, 0x01, 0x43, 
+	0x66, 0x9C, 0x01, 0x18, 0x20, 0xB2, 0xF4, 0x70, 0x98, 0xB2, 0xC0, 0x7E, 0x96, 0x90, 0x02, 0x98, 
+	0x03, 0x96, 0x03, 0x43, 0x46, 0x7F, 0xD6, 0x19, 0xC7, 0xB2, 0xF0, 0x70, 0xDF, 0xB2, 0xFF, 0x46, 
+	0xB4, 0x7E, 0xD6, 0x18, 0x61, 0x44, 0x61, 0x71, 0x19, 0xB2, 0xC9, 0x19, 0x80, 0x7F, 0x16, 0xB2, 
+	0xC0, 0x9E, 0x02, 0x1A, 0x3F, 0x1A, 0x74, 0xB2, 0xFF, 0xB2, 0xE6, 0x71, 0x9E, 0x71, 0x58, 0x46, 
+	0xBC, 0x71, 0xDF, 0x1B, 0xEC, 0x7D, 0x57, 0x1C, 0x27, 0x97, 0x04, 0xB2, 0xFF, 0x43, 0x77, 0x73, 
+	0x9F, 0x97, 0x05, 0x46, 0x64, 0x7D, 0x97, 0x43, 0x65, 0x1B, 0xED, 0x9C, 0x04, 0x43, 0x47, 0x43, 
+	0x4C, 0x74, 0x5F, 0x46, 0x6F, 0x72, 0x18, 0x5D, 0xC7, 0x20, 0x14, 0xB2, 0xE4, 0xB2, 0xED, 0x74, 
+	0x1C, 0x73, 0xDD, 0x72, 0x99, 0x72, 0x5D, 0x73, 0x1E, 0x72, 0xDF, 0x7F, 0x51, 0x73, 0x5C, 0x29, 
+	0x00, 0x4B, 0x12, 0x46, 0x69, 0xD0, 0x03, 0x70, 0x19, 0x79, 0x09, 0x9C, 0x01, 0xE0, 0x03, 0x43, 
+	0x74, 0x9E, 0x03, 0x1C, 0x93, 0x70, 0x1C, 0x9F, 0x02, 0x32, 0x03, 0x7F, 0xDB, 0x7F, 0xD2, 0xB2, 
+	0x5B, 0x18, 0xBA, 0x40, 0x9A, 0x32, 0x01, 0xB0, 0x07, 0x4B, 0x09, 0xBD, 0xF0, 0x60, 0x1A, 0x20, 
+	0x00, 0x11, 0x50, 0x20, 0x00, 0x02, 0xFA, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x02, 0x04, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0x7C, 0x20, 
+	0x00, 0x09, 0x18, 0x46, 0x71, 0xB4, 0x02, 0x00, 0x49, 0x08, 0x49, 0x00, 0x49, 0x5C, 0x09, 0xBC, 
+	0x02, 0x44, 0x8E, 0x46, 0xC0, 0x47, 0x70, 0x46, 0x71, 0xB4, 0x03, 0x00, 0x40, 0x08, 0x49, 0x5A, 
+	0x09, 0x00, 0x49, 0x44, 0x8E, 0x00, 0x49, 0x47, 0x70, 0xBC, 0x03, 0xD0, 0x34, 0x29, 0x00, 0x22, 
+	0x00, 0x23, 0x01, 0x42, 0x88, 0xB4, 0x10, 0x24, 0x01, 0xD3, 0x2C, 0x42, 0xA1, 0x07, 0x24, 0x42, 
+	0x81, 0xD2, 0x04, 0x01, 0x09, 0xD2, 0x02, 0xE7, 0xF8, 0x01, 0x1B, 0x42, 0xA1, 0x00, 0xE4, 0x42, 
+	0x81, 0xD2, 0x04, 0x00, 0x49, 0xD2, 0x02, 0xE7, 0xF8, 0x00, 0x5B, 0xD3, 0x01, 0x42, 0x88, 0x43, 
+	0x1A, 0x1A, 0x40, 0x42, 0xA0, 0x08, 0x4C, 0x1B, 0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0x5C, 0x42, 
+	0xA0, 0x08, 0x8C, 0x1B, 0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0x9C, 0x42, 0xA0, 0x08, 0xCC, 0x1B, 
+	0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0xDC, 0xD0, 0x03, 0x28, 0x00, 0xD0, 0x01, 0x09, 0x1B, 0xE7, 
+	0xE3, 0x09, 0x09, 0xBC, 0x10, 0x1C, 0x10, 0x28, 0x00, 0x47, 0x70, 0x20, 0x00, 0xD0, 0x01, 0xB4, 
+	0x07, 0x43, 0xC0, 0xA1, 0x02, 0x48, 0x02, 0x90, 0x02, 0x18, 0x40, 0x46, 0xC0, 0xBD, 0x03, 0x00, 
+	0x00, 0x00, 0xD9, 0xD0, 0xF0, 0x29, 0x00, 0xF7, 0xFF, 0xB5, 0x03, 0xBC, 0x0E, 0xFF, 0xB9, 0x1A, 
+	0x89, 0x43, 0x42, 0x46, 0xC0, 0x47, 0x18, 0xD0, 0x41, 0x29, 0x00, 0x1C, 0x04, 0xB4, 0x10, 0x46, 
+	0xA4, 0x40, 0x4C, 0x22, 0x00, 0x23, 0x01, 0xD5, 0x00, 0x29, 0x00, 0x28, 0x00, 0x42, 0x49, 0x42, 
+	0x40, 0xD5, 0x00, 0xD3, 0x2C, 0x42, 0x88, 0x07, 0x24, 0x24, 0x01, 0xD2, 0x04, 0x42, 0xA1, 0xD2, 
+	0x02, 0x42, 0x81, 0x01, 0x1B, 0x01, 0x09, 0x00, 0xE4, 0xE7, 0xF8, 0xD2, 0x04, 0x42, 0xA1, 0xD2, 
+	0x02, 0x42, 0x81, 0x00, 0x5B, 0x00, 0x49, 0x42, 0x88, 0xE7, 0xF8, 0x1A, 0x40, 0xD3, 0x01, 0x08, 
+	0x4C, 0x43, 0x1A, 0xD3, 0x02, 0x42, 0xA0, 0x08, 0x5C, 0x1B, 0x00, 0x08, 0x8C, 0x43, 0x22, 0xD3, 
+	0x02, 0x42, 0xA0, 0x08, 0x9C, 0x1B, 0x00, 0x08, 0xCC, 0x43, 0x22, 0xD3, 0x02, 0x42, 0xA0, 0x08, 
+	0xDC, 0x1B, 0x00, 0x28, 0x00, 0x43, 0x22, 0xD7, 0x17, 0xAE, 0xF1, 0x16, 0x09, 0x1B, 0xD0, 0x03, 
+	0x09, 0x09, 0xD0, 0x01, 0x1C, 0x10, 0xE7, 0xE3, 0x2C, 0x00, 0x46, 0x64, 0x42, 0x40, 0xD5, 0x00, 
+	0x47, 0x70, 0xBC, 0x10, 0xD0, 0x06, 0x28, 0x00, 0x20, 0x00, 0xDB, 0x03, 0x08, 0x40, 0x43, 0xC0, 
+	0x20, 0x80, 0xE0, 0x01, 0xB4, 0x07, 0x06, 0x00, 0xA1, 0x02, 0x48, 0x02, 0x90, 0x02, 0x18, 0x40, 
+	0x46, 0xC0, 0xBD, 0x03, 0x00, 0x00, 0x00, 0x19, 0xD0, 0xEB, 0x29, 0x00, 0xF7, 0xFF, 0xB5, 0x03, 
+	0xBC, 0x0E, 0xFF, 0xA7, 0x1A, 0x89, 0x43, 0x42, 0x46, 0xC0, 0x47, 0x18, 0x46, 0xC0, 0x47, 0x70, 
+	0x1C, 0x05, 0xB5, 0xF0, 0xD9, 0x2F, 0x2A, 0x0F, 0x43, 0x03, 0x1C, 0x0B, 0x07, 0x9C, 0x1C, 0x05, 
+	0x1C, 0x0C, 0xD1, 0x2C, 0x1C, 0x15, 0x1C, 0x03, 0x3D, 0x10, 0x68, 0x26, 0x68, 0x66, 0x60, 0x1E, 
+	0x68, 0xA6, 0x60, 0x5E, 0x68, 0xE6, 0x60, 0x9E, 0x60, 0xDE, 0x34, 0x10, 0x2D, 0x0F, 0x33, 0x10, 
+	0x1C, 0x13, 0xD8, 0xF2, 0x09, 0x1B, 0x3B, 0x10, 0x01, 0x1B, 0x33, 0x01, 0x18, 0xC9, 0x18, 0xC5, 
+	0x40, 0x1A, 0x23, 0x0F, 0xD9, 0x0F, 0x2A, 0x03, 0x1C, 0x2C, 0x1C, 0x0E, 0xCE, 0x80, 0x1C, 0x13, 
+	0xC4, 0x80, 0x3B, 0x04, 0xD8, 0xFA, 0x2B, 0x03, 0x08, 0x9B, 0x1F, 0x13, 0x00, 0x9B, 0x33, 0x01, 
+	0x40, 0x22, 0x24, 0x03, 0x18, 0xED, 0x18, 0xC9, 0xD0, 0x05, 0x2A, 0x00, 0x5C, 0xCC, 0x23, 0x00, 
+	0x33, 0x01, 0x54, 0xEC, 0xD1, 0xFA, 0x42, 0x93, 0x46, 0xC0, 0xBD, 0xF0, 0x6D, 0x6C, 0x61, 0x50, 
+	0x69, 0x6E, 0x49, 0x20, 0x45, 0x27, 0x00, 0x74, 0x72, 0x65, 0x74, 0x6E, 0x00, 0x4E, 0x20, 0x27, 
+	0x65, 0x6C, 0x2D, 0x4E, 0x00, 0x21, 0x73, 0x73, 0x69, 0x78, 0x45, 0x27, 0x4E, 0x20, 0x27, 0x74, 
+	0x53, 0x20, 0x4E, 0x00, 0x53, 0x00, 0x50, 0x2F, 0x70, 0x65, 0x65, 0x6C, 0x72, 0x2D, 0x53, 0x00, 
+	0x74, 0x65, 0x73, 0x65, 0x53, 0x41, 0x46, 0x00, 0x64, 0x49, 0x00, 0x54, 0x41, 0x00, 0x65, 0x6C, 
+	0x76, 0x69, 0x74, 0x63, 0x70, 0x53, 0x00, 0x65, 0x00, 0x74, 0x63, 0x65, 0x63, 0x61, 0x74, 0x53, 
+	0x52, 0x00, 0x21, 0x6B, 0x41, 0x56, 0x47, 0x45, 0x65, 0x44, 0x00, 0x4C, 0x00, 0x79, 0x61, 0x6C, 
+	0x00, 0x43, 0x53, 0x4F, 0x53, 0x49, 0x4F, 0x4E, 0x6F, 0x54, 0x00, 0x45, 0x20, 0x68, 0x63, 0x75, 
+	0x54, 0x00, 0x6E, 0x4F, 0x68, 0x63, 0x75, 0x6F, 0x46, 0x46, 0x4F, 0x20, 0x5F, 0x54, 0x4C, 0x00, 
+	0x46, 0x4F, 0x52, 0x50, 0x4E, 0x49, 0x4C, 0x49, 0x69, 0x46, 0x00, 0x47, 0x00, 0x64, 0x65, 0x78, 
+	0x66, 0x41, 0x2D, 0x47, 0x00, 0x72, 0x65, 0x74, 0x76, 0x6F, 0x48, 0x3D, 0x12, 0x00, 0x72, 0x6F, 
+	0x0A, 0x0D, 0x07, 0x0E, 0x0C, 0x06, 0x04, 0x12, 0x05, 0x0F, 0x12, 0x09, 0x00, 0x12, 0x08, 0x11, 
+	0x45, 0x02, 0x10, 0x01, 0x4B, 0x00, 0x72, 0x72, 0x52, 0x20, 0x79, 0x65, 0x46, 0x45, 0x52, 0x00, 
+	0x49, 0x4E, 0x49, 0x20, 0x6D, 0x43, 0x00, 0x54, 0x74, 0x6C, 0x65, 0x44, 0x65, 0x52, 0x20, 0x61, 
+	0x65, 0x52, 0x2F, 0x66, 0x52, 0x00, 0x6C, 0x61, 0x4D, 0x00, 0x77, 0x61, 0x49, 0x20, 0x58, 0x41, 
+	0x5F, 0x4D, 0x43, 0x00, 0x54, 0x4C, 0x45, 0x44, 0x41, 0x4D, 0x5F, 0x41, 0x49, 0x4D, 0x5F, 0x58, 
+	0x78, 0x54, 0x00, 0x4E, 0x73, 0x73, 0x65, 0x6C, 0x66, 0x69, 0x44, 0x00, 0x49, 0x44, 0x00, 0x66, 
+	0x4E, 0x2F, 0x46, 0x46, 0x67, 0x69, 0x42, 0x00, 0x61, 0x72, 0x47, 0x20, 0x65, 0x4E, 0x00, 0x64, 
+	0x64, 0x45, 0x2D, 0x67, 0x52, 0x00, 0x65, 0x67, 0x00, 0x00, 0x66, 0x65, 0x00, 0x00, 0x49, 0x2D, 
+	0x01, 0x00, 0x00, 0xFF, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x01, 
+	0x20, 0x00, 0x0D, 0xA0, 0x20, 0x00, 0x02, 0x28, 0x00, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x11, 0x54, 
+	0x00, 0xFF, 0x02, 0x01, 0x04, 0x00, 0x04, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x45, 0x02, 0xFF, 0xFF, 0x07, 0x5A, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/CORE_120317_v5.c for-diff/drivers/input/touchscreen/mms100_ts/CORE_120317_v5.c
--- caf/drivers/input/touchscreen/mms100_ts/CORE_120317_v5.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/CORE_120317_v5.c	2015-10-08 21:26:19.992845000 +0900
@@ -0,0 +1,1425 @@
+static const struct firmware_data melfas_CORE = {
+	.section_name = "CORE",
+	.section_version = 0x45,
+	.start_page_addr = 1,
+	.end_page_addr = 22,
+	.compatible_version = 0x02,
+	.length = 22638,
+	.data = {
+	0xAE, 0xF1, 0x01, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x4F, 0x43, 0x00, 0x00, 0x5B, 0xFF, 0x00, 
+	0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0xF0, 0x03, 0xB5, 0xF7, 0xF0, 0x05, 0xFC, 0xC3, 0x20, 
+	0x00, 0xF8, 0x33, 0xFB, 0xF2, 0xF0, 0x05, 0x33, 0x33, 0x4B, 0x4E, 0x42, 0x5E, 0x78, 0x1B, 0x26, 
+	0x10, 0x41, 0x73, 0x4B, 0x4C, 0x1A, 0xF6, 0x4B, 0x4C, 0x70, 0x1E, 0x3A, 0x01, 0x68, 0x1A, 0x41, 
+	0x5A, 0x42, 0x53, 0x70, 0x1A, 0x4B, 0x4A, 0x78, 0x1C, 0x4B, 0x4A, 0xD1, 0x22, 0x2C, 0x00, 0x25, 
+	0x01, 0x4A, 0x49, 0x70, 0x1D, 0x70, 0x14, 0xFA, 0x52, 0xF0, 0x00, 0x1C, 0x28, 0x4B, 0x47, 0x70, 
+	0x9A, 0x78, 0xDA, 0xF0, 0x05, 0x70, 0x5C, 0xF0, 0x03, 0xFB, 0xD1, 0xF0, 0x01, 0xFB, 0x7F, 0x23, 
+	0x80, 0xFB, 0x17, 0x6C, 0x1A, 0x05, 0xDB, 0x43, 0x8A, 0x21, 0x7F, 0xF0, 0x00, 0x64, 0x1A, 0xF0, 
+	0x02, 0xFD, 0xF5, 0xF0, 0x01, 0xFF, 0x4B, 0xF0, 0x01, 0xFB, 0x0B, 0x4B, 0x3C, 0xFA, 0xA3, 0x68, 
+	0x1B, 0x20, 0x02, 0x4C, 0x3B, 0x47, 0x98, 0x2B, 0x00, 0x78, 0x23, 0x4B, 0x3A, 0xD1, 0x03, 0x2B, 
+	0x00, 0x78, 0x1B, 0x78, 0x23, 0xD0, 0x0F, 0xFC, 0x94, 0xF0, 0x00, 0x4B, 0x2E, 0x78, 0x22, 0xD0, 
+	0x01, 0x2A, 0x00, 0xE0, 0x01, 0x70, 0x1E, 0x70, 0x1A, 0x22, 0x0D, 0x23, 0x00, 0x4A, 0x31, 0x4A, 
+	0x31, 0x70, 0x13, 0x4B, 0x2C, 0x70, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4D, 0x2F, 0xD0, 0x2C, 0x2B, 
+	0x00, 0x78, 0x2B, 0x4C, 0x2A, 0xD0, 0x28, 0x68, 0x23, 0x20, 0x13, 0xF0, 0x00, 0x47, 0x98, 0xF0, 
+	0x03, 0xFA, 0x0F, 0xF0, 0x03, 0xFB, 0x08, 0x4B, 0x29, 0xFA, 0x8B, 0xF0, 0x01, 0x78, 0x18, 0xF0, 
+	0x00, 0xF8, 0xA1, 0x4A, 0x27, 0xFD, 0xC7, 0x70, 0x13, 0x23, 0x01, 0x80, 0x13, 0x4A, 0x26, 0xFF, 
+	0xDE, 0xF0, 0x02, 0x2B, 0x00, 0x78, 0x2B, 0x68, 0x23, 0xD1, 0xFC, 0x47, 0x98, 0x20, 0x14, 0xF9, 
+	0xF6, 0xF0, 0x00, 0xFA, 0xEF, 0xF0, 0x03, 0xFA, 0x72, 0xF0, 0x03, 0x78, 0x18, 0x4B, 0x1C, 0xF8, 
+	0x88, 0xF0, 0x01, 0x70, 0x1E, 0x4B, 0x10, 0xFF, 0x7E, 0xF0, 0x00, 0x78, 0x27, 0x4C, 0x0E, 0x28, 
+	0x13, 0xB2, 0x78, 0xE1, 0x8D, 0xD9, 0x00, 0xF8, 0xD4, 0xF0, 0x05, 0x01, 0x8C, 0x00, 0x74, 0x01, 
+	0x8C, 0x01, 0x78, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 
+	0x8C, 0x01, 0x8C, 0x00, 0x68, 0x01, 0x8C, 0x00, 0x3A, 0x01, 0x8C, 0x00, 0x5F, 0x00, 0x30, 0x01, 
+	0x89, 0x01, 0x8C, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x11, 0x50, 0x20, 
+	0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0xE9, 0x20, 0x00, 0x01, 0xEA, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x01, 0xF8, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x01, 0xE7, 0x20, 0x00, 0x01, 0xE5, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x03, 0x08, 0x22, 0x00, 0x4B, 0xB1, 0xF0, 
+	0x00, 0x70, 0x1A, 0x4B, 0xB0, 0xFE, 0x7D, 0x2B, 0x00, 0x78, 0x1B, 0xE1, 0x55, 0xD0, 0x00, 0x78, 
+	0x23, 0x4C, 0xAE, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0xAD, 0x20, 0x00, 0xFC, 0xB8, 0xF0, 0x03, 0x2B, 
+	0x00, 0x78, 0x23, 0x21, 0x01, 0xD0, 0x06, 0x4A, 0xAA, 0x20, 0x00, 0x90, 0x00, 0x1C, 0x0B, 0xFC, 
+	0x56, 0xF0, 0x03, 0x78, 0x98, 0x4B, 0xA8, 0xFA, 0x78, 0xF0, 0x03, 0x7B, 0xE8, 0x4D, 0xA7, 0xF8, 
+	0x52, 0xF0, 0x03, 0x60, 0x20, 0x4C, 0xA6, 0xF0, 0x03, 0x7C, 0x28, 0x23, 0x11, 0xF8, 0x4D, 0x56, 
+	0xEB, 0x60, 0x60, 0x43, 0x53, 0x7B, 0xEA, 0x4B, 0x9A, 0x60, 0xA3, 0x70, 0x1A, 0x22, 0x00, 0x78, 
+	0x1B, 0x4B, 0xA0, 0x78, 0x18, 0x4B, 0xA0, 0xF8, 0x14, 0xF0, 0x01, 0x4D, 0x9D, 0x4B, 0x95, 0x70, 
+	0x1C, 0x24, 0x00, 0xF0, 0x00, 0x78, 0x2B, 0xF0, 0x03, 0xFD, 0x29, 0xF0, 0x00, 0xFF, 0x8B, 0x70, 
+	0x2C, 0xFD, 0x25, 0x24, 0x01, 0x4B, 0x8F, 0xF0, 0x00, 0x70, 0x1C, 0x4B, 0x97, 0xFC, 0x9B, 0x05, 
+	0x9A, 0x68, 0x1B, 0x4A, 0x96, 0xD5, 0x13, 0x20, 0x04, 0x4B, 0x96, 0x4B, 0x96, 0x60, 0x1A, 0x43, 
+	0x01, 0x68, 0x19, 0x68, 0x19, 0x60, 0x19, 0x43, 0x81, 0x20, 0x02, 0x68, 0x19, 0x60, 0x19, 0x60, 
+	0x1C, 0x43, 0x0C, 0x21, 0x00, 0x4B, 0x91, 0x4B, 0x91, 0x60, 0x19, 0x4C, 0x91, 0x60, 0x1A, 0x68, 
+	0x23, 0x20, 0x03, 0xF0, 0x03, 0x47, 0x98, 0x68, 0x23, 0xF8, 0x3F, 0x47, 0x98, 0x20, 0x05, 0xFF, 
+	0xE4, 0xF0, 0x02, 0x4D, 0x8D, 0x4C, 0x8C, 0x42, 0x40, 0x20, 0x01, 0x1C, 0x2A, 0x1C, 0x21, 0xFC, 
+	0x4C, 0xF0, 0x04, 0x78, 0x1B, 0x4B, 0x79, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x88, 0x20, 0x0C, 0xFC, 
+	0x4E, 0xF0, 0x03, 0x68, 0x23, 0x4A, 0x87, 0x68, 0x2B, 0x80, 0x13, 0x4B, 0x73, 0x80, 0x53, 0x2B, 
+	0x00, 0x78, 0x1B, 0x23, 0x01, 0xD0, 0x06, 0x93, 0x00, 0x21, 0x02, 0x1C, 0x0B, 0x20, 0x0C, 0xFB, 
+	0xE6, 0xF0, 0x03, 0x20, 0x06, 0x4C, 0x7B, 0x47, 0x98, 0x68, 0x23, 0xFF, 0xF4, 0xF0, 0x03, 0xF9, 
+	0x64, 0xF0, 0x04, 0xFB, 0x98, 0xF0, 0x04, 0xF9, 0x62, 0xF0, 0x00, 0xFD, 0x06, 0xF0, 0x04, 0xFE, 
+	0x7E, 0xF0, 0x04, 0x78, 0x1B, 0x4B, 0x78, 0xD1, 0x2A, 0x2B, 0x00, 0x20, 0x07, 0x68, 0x23, 0xF0, 
+	0x01, 0x47, 0x98, 0x68, 0x23, 0xFA, 0x51, 0x47, 0x98, 0x20, 0x08, 0xFF, 0xB2, 0xF0, 0x02, 0xFF, 
+	0xBA, 0xF0, 0x02, 0x20, 0x09, 0x68, 0x23, 0xF0, 0x01, 0x47, 0x98, 0xF0, 0x01, 0xFA, 0x69, 0x68, 
+	0x23, 0xFB, 0xD1, 0x47, 0x98, 0x20, 0x0A, 0xFC, 0x6E, 0xF0, 0x01, 0xFB, 0x44, 0xF0, 0x02, 0x20, 
+	0x0B, 0x68, 0x23, 0xF0, 0x01, 0x47, 0x98, 0xF0, 0x01, 0xFE, 0xB8, 0x68, 0x23, 0xFF, 0xD7, 0x47, 
+	0x98, 0x20, 0x0E, 0xF8, 0x84, 0xF0, 0x02, 0xF9, 0xF2, 0xF0, 0x02, 0x20, 0x10, 0x68, 0x23, 0xF0, 
+	0x00, 0x47, 0x98, 0x4B, 0x5B, 0xF9, 0x81, 0x68, 0x1B, 0x20, 0x0F, 0x4B, 0x5E, 0x47, 0x98, 0x2B, 
+	0x00, 0x78, 0x1B, 0xF0, 0x02, 0xD1, 0x3C, 0x4B, 0x5C, 0xFA, 0x4F, 0x4B, 0x5C, 0x68, 0x1A, 0xD1, 
+	0x04, 0x2A, 0x00, 0x68, 0x09, 0x49, 0x5B, 0xDD, 0x00, 0x29, 0x00, 0x4A, 0x47, 0x70, 0x1A, 0x32, 
+	0x32, 0x78, 0x19, 0x42, 0x91, 0x78, 0x12, 0x22, 0x00, 0xD3, 0x01, 0x78, 0x1B, 0x70, 0x1A, 0xD1, 
+	0x21, 0x2B, 0x00, 0x4C, 0x51, 0x4B, 0x53, 0x2B, 0x00, 0x68, 0x1B, 0x68, 0x20, 0xDD, 0x09, 0xD1, 
+	0x06, 0x28, 0x00, 0x78, 0x1B, 0x4B, 0x39, 0xD0, 0x02, 0x2B, 0x00, 0xF0, 0x03, 0x49, 0x4E, 0x4B, 
+	0x4E, 0xFB, 0xCF, 0x47, 0x98, 0x68, 0x1B, 0x2B, 0x00, 0x68, 0x23, 0x4B, 0x49, 0xDD, 0x0A, 0x28, 
+	0x00, 0x68, 0x18, 0x4B, 0x31, 0xD1, 0x06, 0x2B, 0x00, 0x78, 0x1B, 0x49, 0x48, 0xD0, 0x02, 0xFB, 
+	0xBE, 0xF0, 0x03, 0xFA, 0x72, 0xF0, 0x02, 0x78, 0x1A, 0x4B, 0x41, 0x70, 0x1A, 0x32, 0x01, 0x68, 
+	0x1B, 0x4B, 0x32, 0xD5, 0x23, 0x05, 0x9A, 0x68, 0x18, 0x4B, 0x34, 0x79, 0x1A, 0x4B, 0x2A, 0x4B, 
+	0x2F, 0x78, 0x19, 0x1C, 0x53, 0x1A, 0x18, 0xF0, 0x04, 0x40, 0x98, 0x4C, 0x23, 0xFF, 0x8D, 0x78, 
+	0x23, 0x4D, 0x2F, 0x2B, 0x00, 0x60, 0x28, 0x20, 0x00, 0xD0, 0x03, 0xF0, 0x03, 0x49, 0x39, 0x78, 
+	0x23, 0xFB, 0x9F, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x01, 0x20, 0x00, 0x23, 0x04, 0x1C, 0x2A, 0xF0, 
+	0x03, 0x90, 0x00, 0xF8, 0xB2, 0xAE, 0xF1, 0x02, 0x4B, 0x24, 0xFB, 0x3D, 0x68, 0x1A, 0x21, 0x01, 
+	0x60, 0x1A, 0x43, 0x8A, 0x05, 0xDB, 0x23, 0x80, 0x21, 0x01, 0x6C, 0x9A, 0x64, 0x9A, 0x43, 0x0A, 
+	0xFC, 0x1E, 0xF0, 0x00, 0x20, 0x00, 0x4B, 0x2D, 0xF0, 0x00, 0x56, 0x18, 0xE0, 0x17, 0xFE, 0x5D, 
+	0x78, 0x1B, 0x4B, 0x0F, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x29, 0x20, 0x05, 0xFB, 0x7A, 0xF0, 0x03, 
+	0xF0, 0x00, 0x20, 0x01, 0x20, 0x00, 0xFE, 0xF9, 0xFE, 0xF6, 0xF0, 0x00, 0x70, 0x23, 0x23, 0x13, 
+	0xF0, 0x00, 0xE0, 0x06, 0xE0, 0x03, 0xFC, 0x0D, 0x20, 0x11, 0x4B, 0x13, 0x47, 0x98, 0x68, 0x1B, 
+	0x70, 0x1F, 0x4B, 0x20, 0x46, 0xC0, 0xE5, 0xEB, 0x20, 0x00, 0x01, 0xEA, 0x20, 0x00, 0x01, 0xE0, 
+	0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x34, 0x20, 0x00, 0x0A, 0xAC, 0x20, 0x00, 0x0A, 0xAA, 
+	0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0xFC, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x00, 0x58, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 0x10, 
+	0xE0, 0x00, 0xE0, 0x18, 0x20, 0x00, 0x01, 0xFC, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x11, 0x34, 
+	0x20, 0x00, 0x11, 0x38, 0x00, 0x00, 0x59, 0x38, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x11, 0x48, 
+	0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0xCA, 0x20, 0x00, 0x0D, 0x9C, 0x00, 0x00, 0x59, 0x3E, 
+	0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x59, 0x47, 0x00, 0x00, 0x59, 0x51, 0x20, 0x00, 0x01, 0xB3, 
+	0x00, 0x00, 0x59, 0x5E, 0x20, 0x00, 0x00, 0x56, 0xF0, 0x01, 0xB5, 0x08, 0xF0, 0x01, 0xFD, 0x99, 
+	0x4B, 0x03, 0xFD, 0xB3, 0x47, 0x98, 0x68, 0x1B, 0xF9, 0xD2, 0xF0, 0x02, 0x46, 0xC0, 0xBD, 0x08, 
+	0x20, 0x00, 0x02, 0x00, 0xF0, 0x04, 0xB5, 0x10, 0x4C, 0x05, 0xFD, 0xEF, 0x68, 0x23, 0x20, 0x00, 
+	0xF0, 0x04, 0x47, 0x98, 0x68, 0x23, 0xFE, 0x19, 0x47, 0x98, 0x20, 0x01, 0x46, 0xC0, 0xBD, 0x10, 
+	0x20, 0x00, 0x01, 0xF8, 0x4D, 0x17, 0xB5, 0x7F, 0x1B, 0x5B, 0x4B, 0x17, 0x4B, 0x17, 0x93, 0x03, 
+	0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x06, 0xAA, 0x03, 0x21, 0x01, 0x90, 0x00, 0x23, 0x04, 
+	0xFA, 0xA0, 0xF0, 0x03, 0xE0, 0x18, 0x4E, 0x12, 0xDD, 0x00, 0x2C, 0x14, 0xB2, 0xE1, 0x24, 0x14, 
+	0xE0, 0x03, 0x1C, 0x08, 0xB2, 0xC0, 0x38, 0x01, 0x54, 0x33, 0x5C, 0x2B, 0xD1, 0xF9, 0x28, 0x00, 
+	0x78, 0x1B, 0x4B, 0x0A, 0xD0, 0x04, 0x2B, 0x00, 0x23, 0x01, 0x4A, 0x09, 0xF0, 0x03, 0x90, 0x00, 
+	0x9B, 0x03, 0xFA, 0x89, 0x1B, 0x1B, 0x19, 0x2D, 0x9C, 0x03, 0x93, 0x03, 0xD1, 0xE3, 0x2C, 0x00, 
+	0x46, 0xC0, 0xBD, 0x7F, 0x20, 0x00, 0x1E, 0x0C, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x01, 0xEB, 
+	0x20, 0x00, 0x11, 0x54, 0x4B, 0x1E, 0xB5, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4C, 0x1D, 0xD0, 0x37, 
+	0x70, 0x23, 0x23, 0x00, 0x20, 0x04, 0x4B, 0x1C, 0x47, 0x98, 0x68, 0x1B, 0x4A, 0x1C, 0x4B, 0x1B, 
+	0x68, 0x1B, 0x68, 0x59, 0x80, 0x53, 0x80, 0x11, 0x78, 0x1B, 0x4B, 0x1A, 0xD0, 0x06, 0x2B, 0x00, 
+	0x21, 0x02, 0x23, 0x01, 0x20, 0x18, 0x93, 0x00, 0xF0, 0x03, 0x1C, 0x0B, 0x78, 0x23, 0xFA, 0x5B, 
+	0x2B, 0x00, 0x4C, 0x15, 0x4B, 0x13, 0xD0, 0x1A, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x03, 
+	0xF0, 0x03, 0x49, 0x12, 0x4A, 0x12, 0xFA, 0xA7, 0x70, 0x13, 0x23, 0x01, 0x2A, 0x02, 0x68, 0x22, 
+	0x18, 0xD2, 0xDC, 0x04, 0x4A, 0x0F, 0x60, 0x22, 0xE0, 0x08, 0x70, 0x13, 0xFF, 0x74, 0xF7, 0xFF, 
+	0x22, 0x0D, 0x4B, 0x0D, 0x23, 0x00, 0x70, 0x1A, 0xE0, 0x00, 0x60, 0x23, 0xBD, 0x13, 0x60, 0x23, 
+	0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x11, 0x3D, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x01, 0x70, 
+	0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0x84, 0x00, 0x00, 0x58, 0xD0, 
+	0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0xBA, 0xB5, 0xF0, 
+	0x33, 0x04, 0xB0, 0x85, 0x24, 0x00, 0x7F, 0xDB, 0x22, 0x0A, 0x49, 0xB8, 0x3B, 0x01, 0xE0, 0x09, 
+	0x1C, 0x10, 0xB2, 0xDB, 0x18, 0x08, 0x43, 0x58, 0x5F, 0x40, 0x25, 0x3C, 0xD0, 0x00, 0x28, 0x00, 
+	0x2B, 0x00, 0x24, 0x01, 0x4B, 0xB2, 0xD1, 0xF3, 0x78, 0x1B, 0x4A, 0xB2, 0x3B, 0x01, 0xE0, 0x07, 
+	0x1D, 0x19, 0xB2, 0xDB, 0x5E, 0x89, 0x00, 0x49, 0xD0, 0x00, 0x29, 0x00, 0x2B, 0x00, 0x24, 0x01, 
+	0x4A, 0xAD, 0xD1, 0xF5, 0xD1, 0x04, 0x2C, 0x00, 0x49, 0xAC, 0x68, 0x13, 0xD0, 0x01, 0x42, 0x8B, 
+	0x60, 0x13, 0x33, 0x01, 0x22, 0x00, 0x4B, 0xAA, 0x4B, 0xA4, 0x70, 0x1A, 0x4B, 0xA2, 0x68, 0x1A, 
+	0xD1, 0x7C, 0x2A, 0x00, 0x68, 0x12, 0x4A, 0xA3, 0xD1, 0x78, 0x2A, 0x00, 0x32, 0x34, 0x1C, 0x1A, 
+	0x28, 0x00, 0x78, 0x10, 0x4A, 0xA3, 0xD1, 0x41, 0x2A, 0x01, 0x78, 0x12, 0x4B, 0xA2, 0xD1, 0x17, 
+	0x4B, 0xA2, 0x70, 0x18, 0x4B, 0xA2, 0x70, 0x1A, 0x4B, 0xA2, 0x70, 0x18, 0x2B, 0x00, 0x78, 0x1B, 
+	0x49, 0xA1, 0xD0, 0x02, 0xFA, 0x2E, 0xF0, 0x03, 0x22, 0x01, 0x4B, 0x99, 0xF0, 0x01, 0x70, 0x1A, 
+	0xF0, 0x01, 0xFC, 0x9F, 0x4B, 0x97, 0xFC, 0xB9, 0x70, 0x1A, 0x22, 0x00, 0x4A, 0x9B, 0xE1, 0x67, 
+	0x78, 0x1B, 0x33, 0x3C, 0x42, 0x9A, 0x68, 0x12, 0x4B, 0x96, 0xDB, 0x1F, 0x2B, 0x00, 0x78, 0x1B, 
+	0x49, 0x97, 0xD0, 0x02, 0xFA, 0x16, 0xF0, 0x03, 0x49, 0x87, 0x4B, 0x96, 0x31, 0x3D, 0x68, 0x1A, 
+	0x60, 0x1A, 0x32, 0x01, 0x42, 0x8A, 0x78, 0x09, 0x20, 0x00, 0xDB, 0x0F, 0x4B, 0x8A, 0x60, 0x18, 
+	0x4B, 0x8A, 0x70, 0x18, 0x4B, 0x8B, 0x70, 0x18, 0x42, 0x83, 0x78, 0x1B, 0x49, 0x8E, 0xD0, 0x02, 
+	0xFA, 0x00, 0xF0, 0x03, 0x22, 0x02, 0x4B, 0x82, 0x4B, 0x85, 0x70, 0x1A, 0x21, 0x00, 0x4A, 0x8B, 
+	0x68, 0x10, 0x70, 0x19, 0x60, 0x19, 0x4B, 0x85, 0x42, 0x88, 0x1C, 0x13, 0x38, 0x01, 0xDD, 0x0E, 
+	0x42, 0x8C, 0x60, 0x10, 0x60, 0x11, 0xD0, 0x00, 0x2A, 0x01, 0x68, 0x1A, 0xE1, 0x18, 0xD0, 0x00, 
+	0x60, 0x1A, 0x22, 0x00, 0x22, 0x03, 0x4B, 0x76, 0xE1, 0x28, 0x70, 0x1A, 0x49, 0x81, 0x4B, 0x80, 
+	0x8F, 0xDB, 0x33, 0x04, 0xD1, 0x00, 0x42, 0x8B, 0x49, 0x7F, 0xE1, 0x0B, 0x42, 0x99, 0x68, 0x09, 
+	0xE1, 0x06, 0xDA, 0x00, 0x48, 0x6C, 0x4B, 0x68, 0x31, 0x3E, 0x1C, 0x19, 0x68, 0x00, 0x78, 0x09, 
+	0xDA, 0x00, 0x42, 0x88, 0x33, 0x3F, 0xE0, 0xFD, 0x60, 0x13, 0x78, 0x1B, 0x33, 0x04, 0xE0, 0xF9, 
+	0x23, 0x00, 0x7F, 0xD8, 0x49, 0x75, 0x1C, 0x1A, 0x38, 0x01, 0xE0, 0x31, 0x24, 0x0A, 0xB2, 0xC0, 
+	0x4F, 0x5E, 0x43, 0x44, 0x26, 0x3C, 0x19, 0x3D, 0x2D, 0x00, 0x5F, 0xAD, 0x19, 0x0C, 0xDD, 0x27, 
+	0x5F, 0xE4, 0x27, 0x3C, 0xDD, 0x22, 0x2C, 0x00, 0x19, 0x0D, 0x00, 0x44, 0x4D, 0x57, 0x88, 0xAF, 
+	0x19, 0x2C, 0xB2, 0x3E, 0xB2, 0x25, 0x88, 0xA4, 0xD4, 0x02, 0x1B, 0x76, 0xB2, 0xA4, 0x1B, 0x3C, 
+	0x1B, 0xE4, 0xE0, 0x01, 0x1C, 0x05, 0xB2, 0xA4, 0x4F, 0x50, 0x4E, 0x64, 0x00, 0x6D, 0x35, 0x10, 
+	0x5B, 0xAC, 0x18, 0xA2, 0xB2, 0x27, 0x5B, 0xED, 0xB2, 0x92, 0xB2, 0x2E, 0xD4, 0x02, 0x1B, 0xBF, 
+	0xB2, 0xA4, 0x1B, 0x64, 0x1B, 0x2C, 0xE0, 0x01, 0x21, 0xFF, 0xAE, 0xF1, 0x03, 0x18, 0xE3, 0xB2, 
+	0xA4, 0x28, 0x00, 0xB2, 0x9B, 0x49, 0x56, 0xD1, 0xCB, 0x49, 0x4D, 0x60, 0x08, 0x49, 0x43, 0x78, 
+	0x0C, 0xD0, 0x40, 0x2C, 0x00, 0x78, 0x0B, 0x31, 0x34, 0xD0, 0x00, 0x2B, 0x00, 0x4B, 0x4A, 0xE0, 
+	0xB3, 0x2B, 0x00, 0x78, 0x1B, 0x49, 0x53, 0xD0, 0x02, 0xF9, 0x7E, 0xF0, 0x03, 0x4A, 0x52, 0x4C, 
+	0x4F, 0x80, 0x13, 0x68, 0x23, 0x68, 0x1B, 0x4B, 0x51, 0x4B, 0x43, 0x80, 0x53, 0x2B, 0x00, 0x78, 
+	0x1B, 0x23, 0x01, 0xD0, 0x06, 0x93, 0x00, 0x21, 0x02, 0x1C, 0x0B, 0x20, 0x00, 0xF9, 0x14, 0xF0, 
+	0x03, 0x68, 0x20, 0x49, 0x32, 0x4B, 0x3B, 0x8F, 0x4A, 0xDA, 0x14, 0x42, 0x90, 0x48, 0x47, 0x4A, 
+	0x41, 0x78, 0x12, 0x32, 0x45, 0x42, 0x90, 0x68, 0x00, 0x78, 0x1B, 0xDA, 0x0D, 0xD0, 0x00, 0x2B, 
+	0x00, 0x4B, 0x37, 0xE0, 0x89, 0x68, 0x1A, 0x31, 0x3C, 0x42, 0x8A, 0x78, 0x09, 0xE0, 0x82, 0xDB, 
+	0x00, 0x60, 0x1A, 0x32, 0x01, 0x22, 0x01, 0xE0, 0x7F, 0x4A, 0x31, 0x70, 0x1A, 0x60, 0x13, 0x23, 
+	0x00, 0x60, 0x13, 0x4A, 0x31, 0x1C, 0x08, 0xE0, 0x77, 0x78, 0x00, 0x30, 0x34, 0xD1, 0x72, 0x28, 
+	0x00, 0x8F, 0x09, 0x48, 0x32, 0x42, 0x88, 0x68, 0x00, 0x49, 0x2E, 0xDB, 0x09, 0x31, 0x45, 0x48, 
+	0x33, 0x68, 0x00, 0x78, 0x09, 0xDB, 0x02, 0x42, 0x88, 0x20, 0x01, 0x49, 0x22, 0x49, 0x1F, 0x70, 
+	0x08, 0x29, 0x00, 0x78, 0x09, 0x49, 0x15, 0xD1, 0x08, 0x49, 0x27, 0x8F, 0x08, 0xD0, 0x5A, 0x42, 
+	0x88, 0x78, 0x09, 0x49, 0x1C, 0xD0, 0x56, 0x29, 0x00, 0x68, 0x09, 0x49, 0x11, 0xDC, 0x05, 0x29, 
+	0x01, 0x8E, 0xC9, 0x49, 0x0E, 0xD8, 0x01, 0x42, 0x8A, 0xD9, 0x49, 0x42, 0x8B, 0x20, 0x00, 0x4B, 
+	0x13, 0x4B, 0x13, 0x70, 0x18, 0x70, 0x1A, 0x22, 0x01, 0x70, 0x18, 0x4B, 0x12, 0x78, 0x1B, 0x4B, 
+	0x12, 0xD0, 0x02, 0x42, 0x83, 0xF0, 0x03, 0x49, 0x11, 0x4B, 0x0A, 0xF9, 0x0F, 0x70, 0x1A, 0x22, 
+	0x01, 0xFB, 0x80, 0xF0, 0x01, 0xFB, 0x9A, 0xF0, 0x01, 0x46, 0xC0, 0xE0, 0x35, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x01, 
+	0xC8, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x01, 0xB3, 0x20, 0x00, 0x01, 0xB4, 0x20, 0x00, 0x01, 
+	0xDC, 0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x01, 0xD4, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x58, 
+	0xDA, 0x20, 0x00, 0x01, 0xD8, 0x00, 0x00, 0x58, 0xE4, 0x20, 0x00, 0x01, 0xD0, 0x00, 0x00, 0x58, 
+	0xEC, 0x20, 0x00, 0x01, 0xCC, 0x20, 0x00, 0x0D, 0x48, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x00, 0x11, 
+	0x34, 0x20, 0x00, 0x03, 0x20, 0x00, 0x00, 0x58, 0xF5, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x11, 
+	0x38, 0x22, 0x01, 0x4B, 0x0D, 0x4B, 0x0D, 0x70, 0x1A, 0x78, 0x1B, 0x33, 0x34, 0xD0, 0x10, 0x2B, 
+	0x00, 0x78, 0x1A, 0x4B, 0x0B, 0xD0, 0x0C, 0x2A, 0x00, 0x21, 0x00, 0x4A, 0x0A, 0x29, 0x03, 0x56, 
+	0x51, 0x49, 0x09, 0xD0, 0x07, 0x42, 0x48, 0x78, 0x09, 0x31, 0x01, 0x41, 0x41, 0x22, 0x00, 0x70, 
+	0x11, 0xB0, 0x05, 0x70, 0x1A, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x01, 0xB4, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x01, 0xDC, 0x20, 0x00, 0x01, 0xB3, 0x20, 0x00, 0x01, 0xDD, 0x4B, 0x54, 0xB5, 
+	0x10, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x53, 0xD0, 0x0A, 0x47, 0x98, 0x68, 0x1B, 0xFB, 0x1A, 0xF0, 
+	0x01, 0xFB, 0x34, 0xF0, 0x01, 0xFF, 0x56, 0xF0, 0x01, 0xFB, 0x90, 0xF0, 0x02, 0x21, 0x02, 0x4B, 
+	0x4E, 0x43, 0x8A, 0x68, 0x1A, 0x68, 0x19, 0x60, 0x1A, 0x05, 0xD2, 0x22, 0x80, 0x60, 0x91, 0x68, 
+	0x90, 0x20, 0x08, 0x68, 0x19, 0x60, 0x19, 0x43, 0x81, 0x68, 0x90, 0x68, 0x19, 0x68, 0x19, 0x60, 
+	0x91, 0x43, 0x81, 0x20, 0x04, 0x68, 0x1B, 0x60, 0x19, 0x60, 0x93, 0x68, 0x91, 0x78, 0x18, 0x4B, 
+	0x40, 0x78, 0x1B, 0x4B, 0x42, 0xD0, 0x32, 0x28, 0x00, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x40, 0x20, 
+	0x00, 0xF8, 0x7A, 0xF0, 0x03, 0x22, 0x80, 0x4B, 0x3F, 0x00, 0x52, 0x68, 0x19, 0x60, 0x1A, 0x43, 
+	0x0A, 0x23, 0xA0, 0x68, 0x1A, 0x68, 0x99, 0x05, 0xDB, 0x4B, 0x37, 0x60, 0x9A, 0x68, 0x19, 0x4A, 
+	0x3A, 0x60, 0x1A, 0x40, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x68, 0x99, 0x05, 0xDB, 0x4A, 0x37, 0x60, 
+	0x9A, 0x70, 0x11, 0x21, 0x01, 0x22, 0x80, 0x68, 0x19, 0x43, 0x0A, 0x04, 0x52, 0x46, 0xC0, 0x60, 
+	0x1A, 0x46, 0xC0, 0x46, 0xC0, 0xB6, 0x62, 0x46, 0xC0, 0x68, 0x19, 0x4A, 0x31, 0x60, 0x1A, 0x40, 
+	0x0A, 0x8F, 0x6F, 0xF3, 0xBF, 0x00, 0xC0, 0x20, 0xFA, 0xFC, 0x6E, 0xF0, 0x02, 0x2B, 0x00, 0xE0, 
+	0x11, 0x49, 0x2C, 0xD0, 0x02, 0xF8, 0x48, 0xF0, 0x03, 0xF0, 0x02, 0x48, 0x2B, 0x4B, 0x2B, 0xFC, 
+	0x65, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2A, 0xD1, 0x05, 0x2B, 0x00, 0x78, 0x1B, 0xF0, 0x02, 0xD1, 
+	0x01, 0x4B, 0x1D, 0xFE, 0x59, 0x68, 0x1A, 0x21, 0x02, 0x60, 0x1A, 0x43, 0x0A, 0x22, 0x80, 0x68, 
+	0x19, 0x68, 0x90, 0x05, 0xD2, 0x49, 0x23, 0x60, 0x91, 0x7F, 0xC8, 0x31, 0x01, 0x28, 0x00, 0x21, 
+	0x08, 0x68, 0x18, 0xD0, 0x06, 0x60, 0x19, 0x43, 0x01, 0x68, 0x90, 0x68, 0x19, 0xE0, 0x05, 0x60, 
+	0x91, 0x43, 0x88, 0x68, 0x18, 0x68, 0x19, 0x60, 0x18, 0x60, 0x91, 0x68, 0x90, 0x21, 0x04, 0x68, 
+	0x1A, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x20, 0xFA, 0x05, 0xDB, 0x00, 0xC0, 0x68, 
+	0x99, 0xF0, 0x02, 0x60, 0x9A, 0x4B, 0x06, 0xFC, 0x31, 0x2B, 0x00, 0x78, 0x1B, 0x4C, 0x12, 0xD0, 
+	0x06, 0x68, 0x23, 0x20, 0x0D, 0x68, 0x23, 0x47, 0x98, 0x47, 0x98, 0x20, 0x12, 0x46, 0xC0, 0xBD, 
+	0x10, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x00, 0x68, 0x20, 0x00, 0x00, 0x14, 0x20, 0x00, 0x01, 
+	0xEB, 0x00, 0x00, 0x58, 0xFB, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0xFF, 0xFE, 0xFF, 0x20, 0x00, 0x00, 
+	0x2C, 0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x59, 0x01, 0x00, 0x0F, 0x42, 0x40, 0x20, 0x00, 0x01, 
+	0xE5, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xF8, 0x4B, 0x31, 0xB5, 
+	0x10, 0x78, 0x19, 0x24, 0x02, 0xB2, 0x4A, 0x4B, 0x30, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2F, 0xD0, 
+	0x25, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2E, 0xD1, 0x21, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2D, 0xD1, 
+	0x1D, 0xD0, 0x07, 0x42, 0xA2, 0x7B, 0x80, 0x48, 0x2C, 0xD1, 0x03, 0x28, 0x00, 0x68, 0x00, 0x48, 
+	0x2B, 0xD0, 0x03, 0x28, 0x00, 0x60, 0x19, 0x21, 0x00, 0xE0, 0x0E, 0x24, 0x01, 0x68, 0x18, 0x4A, 
+	0x28, 0x42, 0x90, 0x68, 0x92, 0x30, 0x01, 0xDA, 0x01, 0x29, 0x00, 0x60, 0x18, 0x4B, 0x21, 0xD0, 
+	0x36, 0x68, 0x1B, 0x24, 0x00, 0xDA, 0x16, 0x42, 0x93, 0xB2, 0x63, 0xE0, 0x30, 0xD0, 0x2D, 0x42, 
+	0x93, 0xD0, 0x1D, 0x2B, 0x01, 0xD0, 0x02, 0x2B, 0x02, 0xD0, 0x0C, 0x2B, 0x00, 0x4B, 0x1D, 0xE0, 
+	0x24, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x03, 0xF0, 0x02, 0x49, 0x1B, 0x20, 0x00, 0xFF, 
+	0xA5, 0xFB, 0x78, 0xF0, 0x02, 0x4B, 0x17, 0xE0, 0x18, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 
+	0x03, 0xF0, 0x02, 0x49, 0x16, 0x4B, 0x12, 0xFF, 0x99, 0xF0, 0x02, 0x68, 0x58, 0x31, 0x77, 0xAE, 
+	0xF1, 0x04, 0xE0, 0x0B, 0xFB, 0x6B, 0x78, 0x1B, 0x4B, 0x10, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x11, 
+	0x20, 0x00, 0xFF, 0x8C, 0xF0, 0x02, 0x68, 0x18, 0x4B, 0x0B, 0xFB, 0x5E, 0xF0, 0x02, 0x70, 0x1C, 
+	0x4B, 0x02, 0xFB, 0x4C, 0xF0, 0x02, 0x46, 0xC0, 0xBD, 0x10, 0x20, 0x00, 0x00, 0x3C, 0x20, 0x00, 
+	0x03, 0x1C, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x01, 0xE2, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 
+	0x01, 0x70, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x02, 0xFC, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 
+	0x59, 0x09, 0x00, 0x00, 0x59, 0x0E, 0x00, 0x00, 0x59, 0x13, 0xF0, 0x02, 0xB5, 0x08, 0xBD, 0x08, 
+	0xFB, 0x5F, 0xF0, 0x02, 0xB5, 0x08, 0xBD, 0x08, 0xFB, 0x4D, 0xF0, 0x02, 0xB5, 0x08, 0x23, 0x80, 
+	0xFA, 0xE5, 0x6C, 0x9A, 0x05, 0xDB, 0x43, 0x0A, 0x21, 0x01, 0xF7, 0xFF, 0x64, 0x9A, 0xBD, 0x08, 
+	0xFF, 0xF1, 0xB0, 0x87, 0xB5, 0xF0, 0xFF, 0xF0, 0xF7, 0xFF, 0x4C, 0x79, 0x4A, 0x78, 0x78, 0x15, 
+	0x78, 0x53, 0xE0, 0x10, 0x48, 0x78, 0xB2, 0xDB, 0x3B, 0x01, 0x46, 0x67, 0x1C, 0x9A, 0x01, 0x79, 
+	0x18, 0xB2, 0x5B, 0x12, 0x00, 0x52, 0x00, 0x4F, 0x18, 0xC9, 0x4A, 0x73, 0x52, 0x3A, 0x54, 0x8F, 
+	0x27, 0x00, 0xD1, 0xEF, 0x2B, 0x00, 0x1E, 0x5A, 0x46, 0x63, 0x2B, 0x00, 0xB2, 0xD2, 0x1C, 0x56, 
+	0xD0, 0x04, 0x01, 0xB6, 0x1C, 0x2B, 0xE7, 0xF3, 0x46, 0x94, 0x4C, 0x6D, 0x4B, 0x6C, 0x48, 0x6D, 
+	0x78, 0x1B, 0x4A, 0x6D, 0x49, 0x67, 0x3B, 0x01, 0xE0, 0x0E, 0x5C, 0xE5, 0xB2, 0xDB, 0x35, 0x01, 
+	0x5C, 0xC6, 0x01, 0xAD, 0x36, 0x02, 0x00, 0x6D, 0x19, 0xAD, 0x00, 0x5D, 0x5A, 0x6E, 0x4D, 0x67, 
+	0x52, 0xAE, 0x54, 0xEE, 0x26, 0x00, 0xD1, 0xEE, 0x2B, 0x00, 0x95, 0x03, 0x25, 0x65, 0xE0, 0x66, 
+	0x4C, 0x5B, 0xFF, 0xB2, 0xF7, 0xFF, 0x78, 0x63, 0x78, 0x26, 0xE0, 0x2D, 0x96, 0x05, 0xB2, 0xDB, 
+	0x3B, 0x01, 0x18, 0xF0, 0x4F, 0x58, 0x00, 0x40, 0x9D, 0x04, 0x5B, 0xC0, 0x1C, 0x9A, 0x4F, 0x54, 
+	0x18, 0xAD, 0x5B, 0xEF, 0x00, 0x6D, 0xD4, 0x04, 0x1B, 0xC7, 0x5B, 0xED, 0x4F, 0x51, 0x95, 0x02, 
+	0x1B, 0x45, 0x4F, 0x4F, 0xE0, 0x03, 0x1A, 0x2D, 0x5B, 0xED, 0x98, 0x04, 0x95, 0x02, 0x48, 0x4C, 
+	0x18, 0x87, 0x5B, 0xC0, 0x00, 0x7F, 0x46, 0x84, 0x4F, 0x4B, 0x00, 0x42, 0x18, 0xF0, 0x46, 0x62, 
+	0x1C, 0x15, 0x4D, 0x49, 0x53, 0xEA, 0x9D, 0x02, 0x5C, 0x2F, 0xDA, 0x00, 0x42, 0xBD, 0x4F, 0x46, 
+	0x1C, 0x3D, 0x2B, 0x00, 0x54, 0x3D, 0x1C, 0x0B, 0xD1, 0xD2, 0xB2, 0xC9, 0x1E, 0x59, 0xD0, 0x05, 
+	0x2B, 0x00, 0x01, 0x80, 0x1C, 0x48, 0x01, 0x4E, 0x9B, 0x05, 0xE7, 0xF2, 0x90, 0x04, 0x4A, 0x3C, 
+	0x4B, 0x3F, 0xE0, 0x22, 0x78, 0x1B, 0x3B, 0x01, 0x4D, 0x3E, 0x4F, 0x3E, 0xB2, 0xDB, 0x48, 0x3E, 
+	0x5C, 0xEE, 0x00, 0x59, 0x5C, 0xFD, 0x5A, 0x09, 0x36, 0x01, 0x01, 0xB0, 0x35, 0x02, 0x00, 0x40, 
+	0x19, 0x40, 0x5A, 0x80, 0x5A, 0x87, 0xD4, 0x01, 0x1B, 0xCF, 0xE0, 0x00, 0x1A, 0x09, 0x01, 0xB6, 
+	0x1A, 0x41, 0x48, 0x2F, 0x19, 0x75, 0x5B, 0x46, 0x00, 0x6D, 0x00, 0x5D, 0x48, 0x33, 0x48, 0x33, 
+	0x52, 0x2E, 0x42, 0xA9, 0x5C, 0xC5, 0x1C, 0x29, 0xDA, 0x00, 0x2B, 0x00, 0x54, 0xC1, 0x9B, 0x03, 
+	0xD1, 0xDA, 0xB2, 0xDB, 0x3B, 0x01, 0x2B, 0x00, 0x93, 0x03, 0x78, 0x61, 0xD1, 0x92, 0x4A, 0x24, 
+	0x78, 0x24, 0xE0, 0x1E, 0x94, 0x04, 0xB2, 0xDB, 0x3B, 0x01, 0x18, 0xED, 0x01, 0x45, 0x00, 0x6D, 
+	0x4F, 0x21, 0x88, 0x25, 0x5B, 0xEE, 0x1C, 0x9D, 0x46, 0xAC, 0xD9, 0x09, 0x45, 0x66, 0x1B, 0xF6, 
+	0x88, 0x27, 0x46, 0xBC, 0x01, 0x8F, 0x00, 0x6D, 0x44, 0x65, 0x5A, 0xAF, 0xB2, 0xB6, 0xE0, 0x05, 
+	0x52, 0xAE, 0x19, 0x75, 0x01, 0x8E, 0x5A, 0xAE, 0x00, 0x6D, 0x52, 0xAE, 0x26, 0x00, 0xD1, 0xE1, 
+	0x2B, 0x00, 0x1E, 0x48, 0x1C, 0x01, 0x29, 0x00, 0xB2, 0xC0, 0x1C, 0x41, 0xD0, 0x05, 0x01, 0xCC, 
+	0x4F, 0x18, 0x19, 0xE4, 0x9B, 0x04, 0x4B, 0x11, 0xE7, 0xF2, 0x78, 0x1B, 0x4F, 0x13, 0x48, 0x15, 
+	0x4E, 0x10, 0x3B, 0x01, 0xE0, 0x10, 0x5C, 0xF5, 0xB2, 0xDB, 0x01, 0xED, 0x49, 0x13, 0x18, 0x6D, 
+	0x00, 0x5A, 0x88, 0x29, 0x5B, 0xD4, 0xD9, 0x03, 0x42, 0x8C, 0x1B, 0x64, 0x88, 0x2D, 0xE0, 0x01, 
+	0x52, 0x84, 0x52, 0x85, 0x25, 0x00, 0xD1, 0xEC, 0x2B, 0x00, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 
+	0x03, 0x0A, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 
+	0x09, 0x7C, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 
+	0x0A, 0xA4, 0x40, 0x00, 0x40, 0x02, 0x20, 0x00, 0x0D, 0x3C, 0x40, 0x00, 0x40, 0x82, 0xB0, 0x87, 
+	0xB5, 0xF0, 0xF8, 0x4A, 0xF0, 0x02, 0xF9, 0x60, 0xF0, 0x02, 0xD1, 0xFB, 0x28, 0x00, 0x78, 0x1B, 
+	0x4B, 0x52, 0xD0, 0x09, 0x2B, 0x02, 0x49, 0x52, 0x4B, 0x51, 0x78, 0x1A, 0x33, 0x40, 0x18, 0x54, 
+	0x42, 0x53, 0x33, 0x01, 0x54, 0xE0, 0xDD, 0xFA, 0x42, 0x93, 0x4F, 0x4E, 0x4E, 0x4C, 0x33, 0x40, 
+	0x1C, 0x33, 0x42, 0x64, 0x78, 0x1C, 0x78, 0xFA, 0xE0, 0x0C, 0x19, 0x12, 0x23, 0x80, 0x05, 0xDB, 
+	0xB2, 0xD2, 0xF7, 0xFF, 0x71, 0x1A, 0x78, 0x28, 0xFE, 0xC1, 0xF0, 0x03, 0x18, 0x20, 0x34, 0x01, 
+	0xFD, 0xF3, 0x35, 0x40, 0x1C, 0x35, 0x42, 0x9C, 0x78, 0x2B, 0x26, 0x00, 0xDD, 0xED, 0x78, 0x2C, 
+	0xE0, 0x25, 0x42, 0x64, 0x1C, 0x2F, 0xE0, 0x1A, 0x3F, 0x40, 0x78, 0xDA, 0x4B, 0x3E, 0x19, 0x12, 
+	0x23, 0x80, 0xB2, 0xD2, 0x05, 0xDB, 0xF7, 0xFF, 0x71, 0x1A, 0x78, 0x2D, 0xFE, 0xA7, 0x19, 0x65, 
+	0xA9, 0x04, 0x1C, 0x28, 0xAA, 0x05, 0xFD, 0xF8, 0xF0, 0x03, 0x9B, 0x04, 0x49, 0x35, 0x2B, 0xFF, 
+	0x5D, 0x4A, 0x23, 0xFF, 0xDD, 0x00, 0xDA, 0x00, 0x42, 0x9A, 0x55, 0x4A, 0x1C, 0x1A, 0x1C, 0x3D, 
+	0x34, 0x01, 0x78, 0x2B, 0x35, 0x40, 0xDD, 0xDF, 0x42, 0x9C, 0x4A, 0x2F, 0x36, 0x01, 0x78, 0x13, 
+	0x4D, 0x2B, 0x42, 0x9E, 0x35, 0x40, 0xF0, 0x01, 0xDB, 0xD3, 0x49, 0x2C, 0xFF, 0xDF, 0x78, 0x0D, 
+	0x78, 0x2A, 0x48, 0x27, 0x49, 0x2B, 0x23, 0x01, 0x78, 0x09, 0x1A, 0x9B, 0x91, 0x03, 0x4C, 0x29, 
+	0x21, 0x00, 0x46, 0x94, 0x18, 0x10, 0x18, 0xC6, 0xE0, 0x11, 0x78, 0x12, 0x1E, 0x72, 0x43, 0x6A, 
+	0x5C, 0xC7, 0x9A, 0x03, 0x92, 0x02, 0x9A, 0x02, 0x43, 0x57, 0x78, 0x72, 0x19, 0xD7, 0x18, 0xBA, 
+	0x43, 0x6A, 0xDB, 0x01, 0x42, 0x94, 0x1C, 0x19, 0xB2, 0x94, 0x45, 0x9C, 0x33, 0x01, 0x4B, 0x19, 
+	0xDC, 0xEB, 0x78, 0xDA, 0x4C, 0x1D, 0xB2, 0xC9, 0x18, 0x51, 0x4B, 0x13, 0x70, 0x99, 0x28, 0x00, 
+	0x78, 0x18, 0x78, 0x23, 0xD1, 0x05, 0xD0, 0x02, 0x2B, 0x00, 0xF0, 0x02, 0x49, 0x18, 0x78, 0x23, 
+	0xFD, 0xB7, 0xD0, 0x0B, 0x2B, 0x00, 0x20, 0x00, 0x4B, 0x0D, 0x78, 0x19, 0x33, 0x40, 0x00, 0x49, 
+	0x4A, 0x0C, 0xB2, 0xC9, 0x31, 0x01, 0x90, 0x00, 0x23, 0x01, 0xFD, 0x50, 0xF0, 0x02, 0x78, 0x1B, 
+	0x4B, 0x0E, 0xD0, 0x06, 0x2B, 0x00, 0x20, 0x00, 0x21, 0x01, 0x1C, 0x0B, 0x4A, 0x0D, 0xF0, 0x02, 
+	0x90, 0x00, 0xB0, 0x07, 0xFD, 0x45, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x01, 0xE0, 0x20, 0x00, 
+	0x0D, 0x48, 0x18, 0x12, 0xAE, 0xF1, 0x05, 0x20, 0x00, 0x01, 0x93, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x0D, 0x87, 0x20, 0x00, 0x00, 0x54, 0x20, 0x00, 0x00, 0x55, 0x00, 0x00, 0xFF, 0xFF, 0x20, 
+	0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x1A, 0x20, 0x00, 0x0A, 0xAC, 0x4B, 0x24, 0xB5, 0x13, 0x68, 
+	0x1B, 0x4C, 0x24, 0xD0, 0x0E, 0x2B, 0x00, 0x2B, 0x00, 0x78, 0x23, 0x20, 0x00, 0xD0, 0x03, 0xF0, 
+	0x02, 0x49, 0x21, 0xF7, 0xFF, 0xFD, 0x77, 0x78, 0x23, 0xFA, 0x6D, 0xD1, 0x02, 0x2B, 0x00, 0xF8, 
+	0x38, 0xF0, 0x02, 0x78, 0x23, 0xE7, 0xFE, 0xD0, 0x09, 0x2B, 0x00, 0x68, 0x23, 0x4C, 0x1B, 0xD5, 
+	0x05, 0x00, 0xDA, 0xFA, 0x5E, 0xF7, 0xFF, 0x4B, 0x19, 0x68, 0x22, 0x60, 0x23, 0x40, 0x13, 0x78, 
+	0x23, 0x4C, 0x14, 0xD0, 0x22, 0x2B, 0x00, 0x68, 0x1B, 0x4B, 0x14, 0xD5, 0x1E, 0x01, 0x5A, 0x20, 
+	0x00, 0x49, 0x14, 0xFD, 0x56, 0xF0, 0x02, 0x4A, 0x14, 0x4B, 0x13, 0x80, 0x11, 0x88, 0x19, 0x80, 
+	0x51, 0x88, 0x59, 0x80, 0x91, 0x88, 0x99, 0x80, 0xD3, 0x88, 0xDB, 0x78, 0x1B, 0x4B, 0x10, 0x78, 
+	0x23, 0x81, 0x13, 0xD0, 0x05, 0x2B, 0x00, 0x21, 0x05, 0x20, 0x00, 0x90, 0x00, 0x23, 0x02, 0xFC, 
+	0xE8, 0xF0, 0x02, 0x4A, 0x0B, 0x4B, 0x05, 0x40, 0x0A, 0x68, 0x19, 0xBD, 0x13, 0x60, 0x1A, 0x20, 
+	0x00, 0x1E, 0x0C, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x20, 0x20, 0x00, 0x00, 0x58, 0xEF, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x59, 0x27, 0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x11, 0x54, 0x20, 
+	0x00, 0x0A, 0xAA, 0xFB, 0xFF, 0xFF, 0xFF, 0x28, 0x02, 0xB5, 0x10, 0x28, 0x03, 0xD0, 0x04, 0x28, 
+	0x01, 0xD0, 0x45, 0xE0, 0x15, 0xD1, 0x33, 0xF9, 0xF6, 0xF7, 0xFF, 0x4C, 0x2A, 0x4B, 0x29, 0x78, 
+	0x1B, 0x33, 0x40, 0x22, 0x50, 0x49, 0x29, 0x48, 0x29, 0x70, 0x23, 0xF9, 0xA6, 0xF0, 0x04, 0x20, 
+	0x0D, 0x4B, 0x28, 0x47, 0x98, 0x68, 0x1B, 0xF9, 0xF4, 0xF7, 0xFF, 0x2B, 0x10, 0x78, 0x23, 0xE0, 
+	0x14, 0xD1, 0x1A, 0xF9, 0xE0, 0xF7, 0xFF, 0x4C, 0x1F, 0x4B, 0x1E, 0x78, 0x1B, 0x33, 0x40, 0x22, 
+	0x50, 0x49, 0x21, 0x48, 0x1E, 0x70, 0x23, 0xF9, 0x90, 0xF0, 0x04, 0x20, 0x0C, 0x4B, 0x1D, 0x47, 
+	0x98, 0x68, 0x1B, 0xF9, 0xDE, 0xF7, 0xFF, 0x2B, 0x10, 0x78, 0x23, 0x4B, 0x1B, 0xD1, 0x04, 0x70, 
+	0x9A, 0x78, 0xDA, 0xFA, 0xD1, 0xF0, 0x02, 0xFA, 0x54, 0xF0, 0x02, 0x4B, 0x18, 0xE0, 0x20, 0x2A, 
+	0x00, 0x78, 0x1A, 0x4A, 0x17, 0xD0, 0x05, 0x31, 0x01, 0x68, 0x11, 0x22, 0x00, 0x60, 0x11, 0x4B, 
+	0x15, 0x70, 0x1A, 0x2A, 0x13, 0x68, 0x1A, 0x22, 0x00, 0xDD, 0x05, 0x4B, 0x0A, 0x60, 0x1A, 0x70, 
+	0x1A, 0x22, 0x10, 0x4B, 0x0F, 0xE0, 0x0C, 0x2A, 0x3B, 0x68, 0x1A, 0x22, 0x00, 0xDD, 0x08, 0x4B, 
+	0x0E, 0x60, 0x1A, 0x68, 0x1B, 0x20, 0x01, 0x4B, 0x0D, 0x47, 0x98, 0x70, 0x1A, 0x22, 0x01, 0x46, 
+	0xC0, 0xBD, 0x10, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x00, 0x00, 0x74, 0x4A, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x74, 0x9A, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x01, 0xC4, 0x20, 0x00, 0x01, 0xC0, 0x20, 0x00, 0x01, 0xBC, 0x20, 0x00, 0x00, 0x6C, 0x20, 
+	0x00, 0x01, 0xE7, 0x4B, 0x0C, 0xB5, 0x10, 0x79, 0x99, 0x22, 0x01, 0xE0, 0x00, 0x23, 0x00, 0x1C, 
+	0x5C, 0x1C, 0x23, 0xB2, 0xE4, 0x1C, 0x10, 0x42, 0x81, 0x40, 0x98, 0x4A, 0x07, 0xDA, 0xF8, 0x71, 
+	0x13, 0x21, 0x07, 0x05, 0xD2, 0x22, 0x80, 0x02, 0x19, 0x40, 0x0B, 0x4B, 0x04, 0x6C, 0x10, 0x43, 
+	0x0B, 0x40, 0x03, 0xBD, 0x10, 0x64, 0x13, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x00, 0x5C, 0xFF, 
+	0xFF, 0xF8, 0xFF, 0x22, 0x07, 0x4B, 0x06, 0x23, 0x80, 0x79, 0xD9, 0x6C, 0x18, 0x05, 0xDB, 0x4A, 
+	0x04, 0x40, 0x11, 0x40, 0x02, 0x02, 0x09, 0x64, 0x1A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x0D, 0x48, 0xFF, 0xFF, 0xF8, 0xFF, 0xB0, 0x8D, 0xB5, 0xF0, 0xF7, 0xFF, 0x90, 0x04, 0x4B, 
+	0xC7, 0xFF, 0xC9, 0x78, 0xDE, 0x48, 0xC7, 0x96, 0x05, 0x21, 0x00, 0xE0, 0x07, 0x78, 0x9C, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x00, 0x76, 0x18, 0xEE, 0x2B, 0x00, 0x52, 0x31, 0x92, 0x05, 0xD1, 0xF8, 0x9E, 
+	0x05, 0x9A, 0x05, 0xB2, 0xD2, 0x3A, 0x01, 0xD0, 0x02, 0x2E, 0x00, 0x01, 0x55, 0x1C, 0x23, 0x9F, 
+	0x04, 0xE7, 0xF3, 0xD0, 0x05, 0x2F, 0x00, 0x9E, 0x05, 0x4B, 0xBB, 0x96, 0x06, 0x7B, 0x5B, 0xE0, 
+	0x04, 0x93, 0x03, 0x27, 0x02, 0x4B, 0xB9, 0x97, 0x06, 0x78, 0x9B, 0x46, 0x68, 0x93, 0x03, 0x56, 
+	0x0B, 0x21, 0x0C, 0x93, 0x0B, 0x4C, 0xB2, 0x93, 0x09, 0x42, 0x5B, 0x46, 0x6A, 0xE0, 0xAA, 0x56, 
+	0x9A, 0x23, 0x18, 0x1C, 0x27, 0x7A, 0xE6, 0xE0, 0x0D, 0x92, 0x02, 0x21, 0x00, 0x1C, 0x30, 0x9B, 
+	0x02, 0x1C, 0x2A, 0xF9, 0x4C, 0xF0, 0x02, 0x21, 0x01, 0x1C, 0x30, 0x9B, 0x02, 0x1C, 0x2A, 0xF9, 
+	0x46, 0xF0, 0x02, 0xB2, 0xF6, 0x36, 0x01, 0x7A, 0xFA, 0x7A, 0xBB, 0x1C, 0x3B, 0x18, 0xD2, 0xDB, 
+	0xEB, 0x42, 0x96, 0x2E, 0x00, 0x9E, 0x04, 0x3D, 0x0E, 0xD1, 0x00, 0x21, 0x18, 0x46, 0x68, 0x7B, 
+	0x5E, 0x56, 0x08, 0x90, 0x02, 0x4F, 0x9E, 0x1C, 0x30, 0xE0, 0x0D, 0x1C, 0x2A, 0x21, 0x00, 0xF0, 
+	0x02, 0x9B, 0x02, 0x1C, 0x30, 0xF9, 0x2D, 0x1C, 0x2A, 0x21, 0x01, 0xF0, 0x02, 0x9B, 0x02, 0x36, 
+	0x01, 0xF9, 0x27, 0x7B, 0x7A, 0xB2, 0xF6, 0x18, 0xD3, 0x7B, 0x3B, 0xDB, 0xEC, 0x42, 0x9E, 0xFC, 
+	0xAE, 0xF7, 0xFF, 0x78, 0x1B, 0x4B, 0x96, 0xD0, 0x06, 0x2B, 0x00, 0x1C, 0x18, 0x23, 0x01, 0xAA, 
+	0x0B, 0x1C, 0x19, 0xF0, 0x02, 0x93, 0x00, 0x25, 0x00, 0xFB, 0xAD, 0x4F, 0x90, 0x4E, 0x8C, 0x78, 
+	0x3B, 0xE0, 0x0E, 0xD0, 0x09, 0x2B, 0x00, 0x01, 0xEA, 0x4B, 0x8E, 0x23, 0x00, 0x18, 0xD2, 0x20, 
+	0x01, 0x78, 0xB1, 0x23, 0x02, 0x93, 0x00, 0xFB, 0x9C, 0xF0, 0x02, 0xB2, 0xED, 0x35, 0x01, 0x42, 
+	0x9D, 0x78, 0xF3, 0x9A, 0x0B, 0xD3, 0xED, 0xB2, 0xD2, 0x78, 0xB6, 0x92, 0x07, 0x96, 0x02, 0xE0, 
+	0x39, 0x4D, 0x80, 0xB2, 0xDB, 0x3B, 0x01, 0x1C, 0x99, 0x9E, 0x08, 0x4F, 0x82, 0x18, 0x71, 0x5B, 
+	0xCE, 0x00, 0x49, 0x00, 0x48, 0x18, 0xD1, 0xB2, 0xB7, 0x5B, 0x40, 0xDC, 0x14, 0x42, 0xB8, 0x1C, 
+	0x01, 0x1B, 0xC0, 0xDA, 0x01, 0x31, 0x80, 0x42, 0x40, 0x20, 0x80, 0x28, 0x7F, 0x18, 0xD7, 0x20, 
+	0x7F, 0xDD, 0x00, 0x54, 0x78, 0x49, 0x79, 0x00, 0x48, 0x18, 0xD1, 0x27, 0x1C, 0x52, 0x2E, 0x48, 
+	0x77, 0x46, 0x6E, 0x54, 0x0E, 0x5D, 0xBE, 0x9E, 0x04, 0xE0, 0x13, 0xD0, 0x10, 0x2E, 0x00, 0x42, 
+	0xB0, 0x4E, 0x74, 0x4E, 0x71, 0xD0, 0x08, 0x19, 0x80, 0x57, 0x8E, 0xDA, 0x03, 0x42, 0x87, 0x5C, 
+	0x0E, 0x48, 0x6F, 0x54, 0x0E, 0x36, 0x01, 0x27, 0x01, 0x18, 0xD1, 0x42, 0x7F, 0x00, 0x49, 0x2B, 
+	0x00, 0x52, 0x6F, 0x46, 0x63, 0xD1, 0xC6, 0xB2, 0xF6, 0x1E, 0x5E, 0xD0, 0x06, 0x2B, 0x00, 0x01, 
+	0x92, 0x1C, 0x72, 0x9B, 0x02, 0x92, 0x08, 0x46, 0xB4, 0x01, 0x72, 0x9B, 0x0B, 0xE7, 0xF1, 0x93, 
+	0x0B, 0x3B, 0x01, 0x9E, 0x09, 0x9D, 0x0B, 0xDB, 0x00, 0x42, 0xB5, 0x9F, 0x04, 0xE7, 0x4F, 0xD0, 
+	0x45, 0x2F, 0x00, 0x78, 0xE3, 0x78, 0xA0, 0x36, 0x61, 0xAE, 0xF1, 0x06, 0x78, 0x61, 0x90, 0x04, 
+	0x91, 0x06, 0x4A, 0x56, 0x94, 0x02, 0x78, 0x24, 0x7A, 0xD0, 0x7C, 0x11, 0x18, 0x08, 0x4C, 0x5B, 
+	0x90, 0x07, 0xB2, 0xC0, 0x18, 0x89, 0x7B, 0x12, 0x91, 0x08, 0xB2, 0xC9, 0xE0, 0x28, 0x4A, 0x55, 
+	0x3B, 0x01, 0x9E, 0x03, 0x2E, 0x00, 0xB2, 0xDB, 0x18, 0xC7, 0xD1, 0x01, 0x9E, 0x06, 0x55, 0xD6, 
+	0xD2, 0x02, 0x42, 0xB1, 0x42, 0xBB, 0x9F, 0x02, 0x18, 0xEF, 0xD3, 0x0C, 0x97, 0x09, 0x18, 0xC6, 
+	0x46, 0xBC, 0x5D, 0x97, 0x5D, 0xE7, 0x9F, 0x09, 0x9F, 0x08, 0x44, 0xBC, 0x46, 0x67, 0x44, 0xBC, 
+	0xE0, 0x0B, 0x55, 0x97, 0x18, 0xC6, 0x18, 0xEF, 0x5D, 0x97, 0x97, 0x09, 0x9F, 0x09, 0x46, 0xBC, 
+	0x44, 0xBC, 0x5D, 0xE7, 0x44, 0xBC, 0x9F, 0x07, 0x55, 0x97, 0x46, 0x67, 0xD1, 0xD7, 0x2B, 0x00, 
+	0x1E, 0x59, 0x1C, 0x0B, 0x2B, 0x00, 0xB2, 0xC9, 0x25, 0x26, 0xD0, 0x3E, 0x01, 0x48, 0x9B, 0x04, 
+	0xE7, 0xF3, 0x43, 0x4D, 0x79, 0xE2, 0x7C, 0x63, 0x18, 0x9A, 0x25, 0x07, 0x4A, 0x34, 0x92, 0x03, 
+	0x21, 0x02, 0x7B, 0xA0, 0x79, 0x26, 0x5E, 0x52, 0x00, 0x6D, 0x1A, 0xAD, 0xB2, 0xED, 0x19, 0x86, 
+	0x46, 0x84, 0x49, 0x34, 0x18, 0xB8, 0xE0, 0x09, 0x32, 0x01, 0x5C, 0x44, 0x54, 0x44, 0x19, 0x2C, 
+	0x42, 0xB2, 0xB2, 0xD2, 0x33, 0x01, 0xDB, 0xF7, 0x9A, 0x03, 0xB2, 0xDB, 0xDA, 0x02, 0x42, 0x93, 
+	0x01, 0x5F, 0x46, 0x62, 0x4A, 0x23, 0xE7, 0xF5, 0x7C, 0x10, 0x49, 0x2A, 0x79, 0x56, 0x7B, 0xD3, 
+	0x19, 0x9E, 0x79, 0x95, 0x46, 0x84, 0x19, 0x45, 0x18, 0xB8, 0xE0, 0x09, 0x32, 0x01, 0x5C, 0x44, 
+	0x54, 0x44, 0x3C, 0x0E, 0x42, 0xAA, 0xB2, 0xD2, 0x33, 0x01, 0xDB, 0xF7, 0x42, 0xB3, 0xB2, 0xDB, 
+	0x46, 0x62, 0xDA, 0x02, 0xE7, 0xF6, 0x01, 0x5F, 0x78, 0x1B, 0x4B, 0x1A, 0xD0, 0x13, 0x2B, 0x00, 
+	0x49, 0x1F, 0x20, 0x05, 0xFB, 0x10, 0xF0, 0x02, 0x78, 0x2B, 0xE0, 0x0E, 0xD0, 0x08, 0x2B, 0x00, 
+	0x01, 0x72, 0x4B, 0x18, 0x18, 0xD2, 0x78, 0xA1, 0x23, 0x01, 0x20, 0x05, 0xF0, 0x02, 0x93, 0x00, 
+	0x36, 0x01, 0xFA, 0xAB, 0xE0, 0x02, 0xB2, 0xF6, 0x4D, 0x0E, 0x4C, 0x0A, 0x78, 0xE3, 0x9E, 0x05, 
+	0xD8, 0xEA, 0x42, 0xB3, 0x20, 0x01, 0x21, 0x00, 0x42, 0x40, 0x1C, 0x0A, 0xF0, 0x02, 0x23, 0x02, 
+	0x20, 0x01, 0xF8, 0x01, 0x21, 0x01, 0x42, 0x40, 0x23, 0x02, 0x22, 0x00, 0xFF, 0xFA, 0xF0, 0x01, 
+	0xE0, 0x25, 0x78, 0xA4, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x01, 0xEB, 0x40, 0x00, 0x40, 0x84, 0x40, 0x00, 0x40, 0x00, 
+	0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x0A, 0xB3, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x75, 0x36, 
+	0x00, 0x00, 0x59, 0x2E, 0x21, 0x00, 0x3C, 0x01, 0x1C, 0x0A, 0xB2, 0xE4, 0x23, 0x01, 0x1C, 0x20, 
+	0xFF, 0xD8, 0xF0, 0x01, 0x1C, 0x20, 0x21, 0x01, 0x1C, 0x0B, 0x22, 0x00, 0xFF, 0xD2, 0xF0, 0x01, 
+	0xD1, 0xEF, 0x2C, 0x00, 0xFE, 0x30, 0xF7, 0xFF, 0xBD, 0xF0, 0xB0, 0x0D, 0xF0, 0x03, 0xB5, 0x08, 
+	0x4B, 0x05, 0xFD, 0xC5, 0x68, 0x1B, 0x20, 0x01, 0x20, 0x01, 0x47, 0x98, 0xF9, 0x22, 0xF0, 0x04, 
+	0xFD, 0xD6, 0xF0, 0x01, 0x46, 0xC0, 0xBD, 0x08, 0x20, 0x00, 0x01, 0xF8, 0x4A, 0x2C, 0xB5, 0xF7, 
+	0x60, 0x10, 0x20, 0x00, 0x4E, 0x2C, 0x4A, 0x2B, 0x4A, 0x2C, 0x8C, 0x11, 0x1D, 0x72, 0x60, 0x11, 
+	0x7D, 0xF1, 0x7F, 0xD2, 0x42, 0x44, 0x1E, 0x50, 0x4C, 0x29, 0x41, 0x60, 0x90, 0x00, 0x1A, 0x08, 
+	0x1D, 0xB0, 0x60, 0x20, 0x7E, 0x37, 0x7F, 0xC5, 0x42, 0x58, 0x1E, 0x6B, 0x1A, 0x3B, 0x41, 0x58, 
+	0x60, 0x63, 0x93, 0x01, 0xD1, 0x02, 0x2A, 0x01, 0x81, 0x20, 0x20, 0x00, 0x23, 0x26, 0xE0, 0x05, 
+	0x00, 0x49, 0x5E, 0xF0, 0xFE, 0xBA, 0xF0, 0x03, 0x2D, 0x01, 0x81, 0x20, 0x23, 0x00, 0xD1, 0x02, 
+	0xE0, 0x05, 0x81, 0x63, 0x5E, 0xF0, 0x23, 0x28, 0xF0, 0x03, 0x00, 0x79, 0x81, 0x60, 0xFE, 0xAF, 
+	0x9B, 0x01, 0x4F, 0x15, 0x5E, 0x3E, 0x20, 0x28, 0x00, 0x70, 0x00, 0x59, 0xF0, 0x03, 0x19, 0x80, 
+	0x43, 0x40, 0xFE, 0xA5, 0x00, 0x43, 0x4C, 0x12, 0x60, 0xE3, 0x00, 0x80, 0x61, 0x23, 0x18, 0xC3, 
+	0x5E, 0x3D, 0x20, 0x26, 0x00, 0x68, 0x9B, 0x00, 0x19, 0x40, 0x00, 0x59, 0xFE, 0x96, 0xF0, 0x03, 
+	0x61, 0x60, 0x37, 0x2C, 0x78, 0x3B, 0x61, 0xA0, 0xD1, 0x02, 0x2B, 0x00, 0x62, 0x25, 0x61, 0xE6, 
+	0x61, 0xE5, 0xE0, 0x01, 0x4B, 0x07, 0x62, 0x26, 0x42, 0x52, 0x22, 0x01, 0xBD, 0xF7, 0x60, 0x5A, 
+	0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0x20, 
+	0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x00, 0xCC, 0x4B, 0x24, 0xB5, 0xF0, 0x7E, 0x1E, 0xB0, 0x87, 
+	0x1C, 0x72, 0x7D, 0xDB, 0x33, 0x02, 0x1C, 0xD9, 0x92, 0x05, 0x93, 0x03, 0x4A, 0x20, 0x23, 0x00, 
+	0x1C, 0x18, 0x91, 0x04, 0x1A, 0xE5, 0x9C, 0x05, 0x97, 0x01, 0x01, 0xEF, 0x52, 0xB8, 0x5A, 0xBC, 
+	0x01, 0xAD, 0x9C, 0x04, 0x00, 0x4F, 0x19, 0x29, 0x4C, 0x1A, 0x5A, 0xBC, 0x27, 0x00, 0x52, 0xB8, 
+	0x55, 0x0F, 0x55, 0x2F, 0x4F, 0x18, 0x99, 0x01, 0x19, 0xCF, 0x33, 0x01, 0x88, 0x39, 0x97, 0x02, 
+	0x99, 0x03, 0x80, 0x38, 0x00, 0x79, 0x18, 0x6F, 0x5A, 0x89, 0x91, 0x01, 0x52, 0x88, 0x99, 0x01, 
+	0x18, 0x6D, 0x49, 0x12, 0x70, 0x29, 0x21, 0x00, 0x1A, 0xF7, 0x55, 0x39, 0x37, 0x01, 0x4D, 0x0C, 
+	0x22, 0x00, 0xDA, 0xD8, 0x9B, 0x03, 0x36, 0x01, 0x01, 0xB6, 0x1C, 0x11, 0x5A, 0x2F, 0x00, 0x58, 
+	0x18, 0xF0, 0x52, 0x2A, 0x5B, 0xEC, 0x00, 0x47, 0x4F, 0x06, 0x53, 0xEA, 0x3B, 0x01, 0x54, 0xF9, 
+	0x2B, 0x01, 0x54, 0x39, 0xB0, 0x07, 0xD1, 0xF2, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x09, 0xAE, 
+	0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x02, 0x40, 0x00, 0x20, 0x01, 
+	0x4B, 0x0D, 0xB5, 0xF7, 0x7D, 0xDE, 0x7E, 0x19, 0x36, 0x01, 0x1C, 0x48, 0x90, 0x01, 0x23, 0x00, 
+	0x1C, 0x32, 0x9C, 0x01, 0x01, 0xBF, 0x1A, 0xE7, 0x46, 0xAC, 0x1C, 0x95, 0x4C, 0x07, 0x44, 0xBC, 
+	0x46, 0x60, 0x25, 0x00, 0x55, 0x05, 0x3A, 0x01, 0xDA, 0xF5, 0x1C, 0x50, 0x1A, 0xCA, 0x33, 0x01, 
+	0xDA, 0xED, 0x32, 0x01, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x20, 0x00, 
+	0x4B, 0x0D, 0xB5, 0x00, 0x5E, 0x9B, 0x22, 0x08, 0x1C, 0x11, 0x4A, 0x0C, 0x78, 0x09, 0x31, 0x35, 
+	0x43, 0x4B, 0x7F, 0x12, 0x11, 0x9B, 0xB2, 0x52, 0xDA, 0x00, 0x42, 0x93, 0x4A, 0x08, 0x1C, 0x13, 
+	0x22, 0x80, 0x60, 0x13, 0x05, 0x1B, 0x05, 0xD2, 0x69, 0x90, 0x09, 0x19, 0x40, 0x03, 0x4B, 0x05, 
+	0x61, 0x93, 0x43, 0x0B, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x0D, 0x38, 0xF0, 0x00, 0xFF, 0xFF, 0x4A, 0xA9, 0xB5, 0xF0, 0x68, 0x11, 0x48, 0xA9, 
+	0xB0, 0x93, 0x68, 0x07, 0x22, 0x0D, 0x46, 0x8C, 0x25, 0x7F, 0x21, 0x00, 0x97, 0x01, 0x24, 0xFF, 
+	0x18, 0x83, 0x00, 0x90, 0x00, 0x5B, 0x4E, 0xA4, 0x87, 0x99, 0x18, 0xF3, 0x33, 0x38, 0x27, 0x00, 
+	0x46, 0x67, 0x72, 0x1F, 0x3A, 0x01, 0x50, 0x39, 0xB2, 0xD2, 0x9F, 0x01, 0x0F, 0x46, 0xAE, 0xF1, 
+	0x07, 0x26, 0x00, 0x50, 0x39, 0x72, 0x5D, 0x72, 0xDD, 0x72, 0x9C, 0x73, 0x1C, 0x2A, 0xFF, 0x80, 
+	0xD9, 0x4A, 0x9B, 0xD1, 0xE8, 0x7E, 0x11, 0x4B, 0x9B, 0x4C, 0x9B, 0x68, 0x98, 0x39, 0x01, 0x4D, 
+	0x97, 0x81, 0xA6, 0x90, 0x04, 0x42, 0x88, 0x60, 0x2E, 0x30, 0x01, 0xDA, 0x02, 0x60, 0x98, 0x90, 
+	0x04, 0x96, 0x11, 0x68, 0xDE, 0xDD, 0x02, 0x2E, 0x00, 0x96, 0x11, 0x3E, 0x01, 0x7D, 0xD1, 0x60, 
+	0xDE, 0x39, 0x01, 0x68, 0x1A, 0xDA, 0x01, 0x42, 0x8A, 0x60, 0x1A, 0x32, 0x01, 0x2A, 0x00, 0x68, 
+	0x5A, 0x3A, 0x01, 0xDD, 0x01, 0x9F, 0x04, 0x60, 0x5A, 0x42, 0x87, 0x98, 0x11, 0xE0, 0xA3, 0xDA, 
+	0x00, 0x68, 0x5B, 0x68, 0x19, 0x93, 0x06, 0x4A, 0x84, 0x68, 0x12, 0x4B, 0x88, 0x4C, 0x86, 0x68, 
+	0x1B, 0x4B, 0x80, 0x93, 0x0D, 0x68, 0x1B, 0x91, 0x10, 0x93, 0x0A, 0x92, 0x09, 0x48, 0x84, 0x89, 
+	0xA4, 0x9D, 0x06, 0x94, 0x0C, 0x42, 0xB5, 0x9E, 0x10, 0xE0, 0x81, 0xDD, 0x00, 0x46, 0x6F, 0x9A, 
+	0x04, 0x32, 0x01, 0x21, 0x10, 0x01, 0x92, 0x5D, 0xCF, 0x92, 0x02, 0x1C, 0x33, 0xE0, 0x05, 0x97, 
+	0x07, 0x54, 0x2F, 0x27, 0x00, 0x3B, 0x01, 0x9F, 0x06, 0xDC, 0x71, 0x42, 0x9F, 0x1C, 0x9C, 0x99, 
+	0x02, 0x5C, 0x2A, 0x19, 0x0D, 0x00, 0x69, 0x4E, 0x77, 0x2A, 0x0E, 0x5B, 0x89, 0x9D, 0x0D, 0xD8, 
+	0xF0, 0x2A, 0x00, 0x1B, 0x49, 0xE0, 0x71, 0xD1, 0x00, 0xB2, 0xD4, 0x3A, 0x01, 0x9F, 0x04, 0x9E, 
+	0x09, 0x18, 0xB5, 0x00, 0xA2, 0x68, 0x2E, 0x43, 0x4F, 0x44, 0x67, 0x46, 0xB4, 0x9D, 0x0A, 0x60, 
+	0x2F, 0x18, 0xAF, 0x1C, 0x0E, 0x43, 0x5E, 0x68, 0x3D, 0x19, 0x15, 0x46, 0xAC, 0x95, 0x01, 0x00, 
+	0x6D, 0x44, 0x66, 0x4D, 0x62, 0x9D, 0x01, 0x46, 0xAC, 0x44, 0xAC, 0x60, 0x3E, 0x8F, 0xAF, 0x46, 
+	0x65, 0x7A, 0x2E, 0x35, 0x38, 0x96, 0x03, 0x19, 0xCF, 0x57, 0xAE, 0x26, 0x09, 0x96, 0x01, 0x80, 
+	0xAF, 0x46, 0x6F, 0x9E, 0x0C, 0x26, 0x01, 0x46, 0xB4, 0x9E, 0x03, 0x44, 0xB4, 0x96, 0x03, 0x36, 
+	0x01, 0xB2, 0xB6, 0x46, 0x66, 0x26, 0x0C, 0x96, 0x0C, 0x9E, 0x04, 0x5D, 0xF7, 0x9F, 0x01, 0x72, 
+	0x2F, 0xDA, 0x00, 0x42, 0xBE, 0x4E, 0x51, 0x72, 0x6E, 0x00, 0x6D, 0x19, 0x15, 0x35, 0x38, 0x19, 
+	0x75, 0x57, 0xAE, 0x26, 0x0A, 0x42, 0xB7, 0x9F, 0x04, 0x72, 0xAF, 0xDD, 0x00, 0x19, 0x15, 0x4E, 
+	0x4B, 0x19, 0x75, 0x00, 0x6D, 0x26, 0x0B, 0x35, 0x38, 0x42, 0xB3, 0x57, 0xAE, 0x72, 0xEB, 0xDA, 
+	0x00, 0x4F, 0x46, 0x19, 0x15, 0x19, 0x7D, 0x00, 0x6D, 0x26, 0x0C, 0x35, 0x38, 0x42, 0xB3, 0x57, 
+	0xAE, 0x73, 0x2B, 0xDD, 0x00, 0x4C, 0x41, 0x19, 0x12, 0x18, 0xA2, 0x00, 0x52, 0x5F, 0x54, 0x25, 
+	0x3E, 0x42, 0xA1, 0x32, 0x38, 0x9F, 0x06, 0xDD, 0x8E, 0x80, 0xD1, 0x3B, 0x01, 0xDD, 0x8D, 0x42, 
+	0x9F, 0x9A, 0x11, 0x99, 0x04, 0x91, 0x04, 0x39, 0x01, 0xDB, 0x00, 0x42, 0x91, 0x46, 0x6B, 0xE7, 
+	0x71, 0x5A, 0xE4, 0x24, 0x30, 0x81, 0x9C, 0x4B, 0x38, 0xBD, 0xF0, 0xB0, 0x13, 0x43, 0xCA, 0x39, 
+	0x02, 0x40, 0x11, 0x17, 0xD2, 0x9E, 0x04, 0x91, 0x03, 0x43, 0x71, 0x9F, 0x03, 0x91, 0x0E, 0x43, 
+	0x5F, 0xB2, 0xD9, 0x25, 0x00, 0x91, 0x05, 0x97, 0x0F, 0x95, 0x01, 0x22, 0x03, 0x94, 0x08, 0x46, 
+	0x9C, 0x4F, 0x32, 0x4E, 0x31, 0x5C, 0xB1, 0x9C, 0x07, 0x5C, 0xBB, 0x9D, 0x05, 0x18, 0xEB, 0x18, 
+	0x61, 0x31, 0x01, 0xB2, 0x49, 0x01, 0x89, 0xB2, 0x5B, 0x18, 0xCB, 0x33, 0x02, 0xB2, 0x65, 0x5C, 
+	0x1C, 0x29, 0x0D, 0x1E, 0x69, 0x9B, 0x08, 0xD8, 0x27, 0x00, 0x8E, 0x9F, 0x02, 0x97, 0x0B, 0x18, 
+	0xFF, 0x18, 0x71, 0x9F, 0x09, 0x9F, 0x0A, 0x19, 0xBB, 0x19, 0xBF, 0x00, 0x49, 0x97, 0x00, 0x4E, 
+	0x1B, 0x18, 0x71, 0x9F, 0x01, 0x2F, 0x00, 0x31, 0x38, 0xB2, 0xE4, 0xD1, 0x1A, 0x9D, 0x0B, 0x94, 
+	0x01, 0xB2, 0xE4, 0x34, 0x0E, 0x68, 0x1C, 0x54, 0x2C, 0x9F, 0x00, 0x9E, 0x0E, 0x60, 0x1C, 0x19, 
+	0xA4, 0x9C, 0x0F, 0x68, 0x3B, 0x19, 0x1B, 0x9D, 0x03, 0x88, 0x8C, 0x60, 0x3B, 0x19, 0x2C, 0x7A, 
+	0x0B, 0x80, 0x8C, 0x33, 0x01, 0x1E, 0x53, 0x72, 0x0B, 0xD0, 0x10, 0x2A, 0x00, 0xE7, 0xBF, 0xB2, 
+	0xDA, 0x99, 0x08, 0x9E, 0x02, 0x18, 0x73, 0x9C, 0x01, 0xD0, 0xF4, 0x2C, 0x1F, 0xD0, 0xF2, 0x42, 
+	0xAC, 0x26, 0x1F, 0x25, 0x1F, 0x96, 0x01, 0x54, 0x1D, 0x2A, 0x00, 0x1E, 0x53, 0x46, 0x63, 0xD1, 
+	0xEE, 0x46, 0xC0, 0xE7, 0x18, 0x20, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0x48, 0x20, 0x00, 0x02, 
+	0x24, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x0D, 
+	0x38, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x59, 0xF8, 0x00, 0x00, 0x59, 
+	0xF4, 0xB0, 0x89, 0xB5, 0xF0, 0x49, 0x46, 0x23, 0x0F, 0xE0, 0x02, 0x22, 0xFF, 0x38, 0x01, 0x18, 
+	0x58, 0x3B, 0x01, 0x70, 0x02, 0xD1, 0xF9, 0x2B, 0x00, 0x68, 0xD8, 0x4B, 0x42, 0x68, 0x9A, 0x68, 
+	0x19, 0x90, 0x01, 0x68, 0x5B, 0x4B, 0x40, 0x93, 0x03, 0x68, 0x1B, 0x91, 0x02, 0x4B, 0x3F, 0x93, 
+	0x04, 0x93, 0x06, 0x7F, 0x5B, 0x9B, 0x07, 0xE0, 0x68, 0x4A, 0x3D, 0x1C, 0x88, 0x5C, 0x83, 0x18, 
+	0x18, 0x2B, 0x1F, 0xB2, 0x5B, 0x4A, 0x3B, 0xD1, 0x5A, 0x5A, 0x82, 0x00, 0x40, 0x20, 0x04, 0x9D, 
+	0x04, 0x92, 0x05, 0x1B, 0x52, 0x38, 0x01, 0x4A, 0x38, 0x56, 0x14, 0xB2, 0xC0, 0x44, 0x64, 0x4A, 
+	0x37, 0x34, 0x01, 0x56, 0x12, 0x01, 0xA4, 0x18, 0x8A, 0x4E, 0x31, 0x32, 0x02, 0x5C, 0xB4, 0x18, 
+	0xA2, 0xD8, 0x41, 0x2C, 0x0E, 0xD0, 0x3E, 0x2B, 0x1F, 0xD0, 0x3D, 0x42, 0xA3, 0xD0, 0x3B, 0x2C, 
+	0x00, 0x1E, 0x5D, 0x27, 0x0A, 0x4A, 0x2E, 0x43, 0x7D, 0x19, 0x55, 0x4E, 0x2D, 0x43, 0x7A, 0x1E, 
+	0x62, 0x27, 0x3E, 0x18, 0xB2, 0x27, 0x3E, 0x5F, 0xEE, 0x1C, 0x1A, 0x5F, 0xD5, 0xDD, 0x00, 0x42, 
+	0xAE, 0x25, 0x0A, 0x1C, 0x22, 0x43, 0x6A, 0x3A, 0x01, 0x9D, 0x06, 0x4E, 0x25, 0x27, 0x3E, 0x18, 
+	0xB2, 0x9E, 0x05, 0x5F, 0xD2, 0x11, 0x92, 0x43, 0x6A, 0xDD, 0x1D, 0x42, 0x96, 0xD9, 0x02, 0x42, 
+	0x9C, 0x1C, 0x23, 0x1C, 0x1A, 0x1E, 0x5E, 0x1C, 0x14, 0xB2, 0xF6, 0x4A, 0x15, 0x25, 0x00, 0x5D, 
+	0x97, 0x46, 0x6F, 0x97, 0x00, 0x3C, 0x01, 0x57, 0x7D, 0x1C, 0x6F, 0xB2, 0xE4, 0x42, 0xA5, 0xD0, 
+	0x09, 0x46, 0x6D, 0xDA, 0x03, 0x55, 0x15, 0x78, 0x2D, 0x42, 0xA5, 0xE0, 0x06, 0xB2, 0xE4, 0xDD, 
+	0x04, 0x55, 0x94, 0x55, 0x54, 0x1C, 0x23, 0xE0, 0x00, 0xD1, 0xAB, 0x28, 0x00, 0x9E, 0x03, 0x39, 
+	0x01, 0xDA, 0x98, 0x42, 0xB1, 0x3A, 0x01, 0x46, 0x62, 0x42, 0xBA, 0x9F, 0x01, 0x1C, 0x53, 0xDB, 
+	0x05, 0x99, 0x02, 0x01, 0x9B, 0x46, 0x94, 0x93, 0x07, 0xB0, 0x09, 0xE7, 0xF1, 0x46, 0xC0, 0xBD, 
+	0xF0, 0x20, 0x00, 0x02, 0xEC, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x0D, 0x38, 0x20, 0x00, 0x0D, 
+	0x48, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x59, 0xF8, 0x00, 0x00, 0x59, 
+	0xF4, 0x20, 0x00, 0x02, 0x24, 0x4A, 0xD4, 0xB5, 0xF0, 0x68, 0x11, 0xB0, 0x8D, 0x18, 0xD0, 0x23, 
+	0x00, 0x24, 0x00, 0x30, 0xBE, 0x3B, 0x0A, 0x5F, 0x00, 0x41, 0xA0, 0x1E, 0x44, 0x18, 0x09, 0x1C, 
+	0x1D, 0x3F, 0xD5, 0xAE, 0xF1, 0x08, 0xD1, 0xF4, 0x35, 0x8C, 0x60, 0x11, 0x4B, 0xCD, 0x32, 0xBE, 
+	0x68, 0x1B, 0x4B, 0xCC, 0x93, 0x03, 0x68, 0x1B, 0x24, 0x0E, 0x4E, 0xCB, 0x93, 0x05, 0x57, 0x33, 
+	0x3C, 0x01, 0xD1, 0x01, 0x1C, 0x5F, 0x1C, 0x03, 0xE0, 0x73, 0x56, 0xE8, 0x4D, 0xC7, 0xD1, 0xFA, 
+	0x1C, 0x46, 0x1C, 0x5F, 0x55, 0x2B, 0x98, 0x03, 0xD0, 0x6B, 0x19, 0x46, 0x00, 0x9D, 0x00, 0xA0, 
+	0x68, 0x37, 0x9F, 0x03, 0x46, 0xBC, 0x44, 0xBC, 0x58, 0x3F, 0x60, 0x37, 0x46, 0x67, 0x9F, 0x05, 
+	0x9E, 0x05, 0x68, 0x2E, 0x19, 0x75, 0x4F, 0xB9, 0x58, 0x38, 0x26, 0x0A, 0x18, 0x30, 0x1C, 0x30, 
+	0x60, 0x28, 0x18, 0x38, 0x43, 0x58, 0x27, 0x09, 0x30, 0x38, 0x79, 0x55, 0x57, 0xC7, 0xB2, 0x6F, 
+	0x46, 0xBC, 0xDD, 0x00, 0x45, 0xBC, 0x43, 0x5E, 0x72, 0x45, 0x79, 0x90, 0x4D, 0xB0, 0x36, 0x38, 
+	0x19, 0xAE, 0x57, 0xF7, 0x27, 0x0A, 0x42, 0xAF, 0xB2, 0x45, 0x72, 0xB0, 0xDA, 0x00, 0x4F, 0xAB, 
+	0x79, 0xD6, 0x26, 0x0A, 0x96, 0x06, 0x43, 0x58, 0x1C, 0x30, 0x30, 0x38, 0x18, 0x38, 0x57, 0x45, 
+	0x25, 0x0B, 0x46, 0x6D, 0x46, 0xAC, 0x78, 0x2D, 0x35, 0x18, 0x45, 0xAC, 0xB2, 0x6D, 0x46, 0x6F, 
+	0xDD, 0x03, 0x5D, 0xEF, 0x25, 0x18, 0x43, 0x5E, 0x72, 0xC7, 0x7A, 0x10, 0x4D, 0xA0, 0x37, 0x38, 
+	0x19, 0xAF, 0x57, 0xBE, 0x26, 0x0C, 0x42, 0xAE, 0xB2, 0x45, 0x73, 0x38, 0xDA, 0x00, 0x43, 0x58, 
+	0x20, 0x0A, 0x4F, 0x9A, 0x88, 0x56, 0x18, 0x38, 0x96, 0x06, 0x5F, 0x85, 0x26, 0x3E, 0x46, 0xAC, 
+	0x26, 0x18, 0x5F, 0x75, 0x46, 0x6D, 0x26, 0x0A, 0x30, 0x38, 0xDA, 0x03, 0x45, 0xAC, 0x25, 0x18, 
+	0x46, 0x6F, 0x80, 0xC7, 0x5B, 0xEF, 0x48, 0x91, 0x43, 0x5E, 0x19, 0x87, 0x39, 0x01, 0x88, 0x10, 
+	0x8F, 0xBB, 0x87, 0xBB, 0x18, 0xC3, 0x79, 0x10, 0x37, 0x38, 0x18, 0xC3, 0x7A, 0x3B, 0x3A, 0x0A, 
+	0x72, 0x3B, 0xD0, 0x00, 0x2C, 0x00, 0x4F, 0x89, 0xE7, 0x81, 0x1C, 0x3D, 0x1C, 0x26, 0x95, 0x03, 
+	0x35, 0x3C, 0x1C, 0x25, 0x60, 0x39, 0x22, 0x00, 0x48, 0x88, 0x56, 0x9A, 0x18, 0x33, 0xD1, 0x19, 
+	0x32, 0x01, 0x42, 0xB5, 0x70, 0x1D, 0x4B, 0x82, 0xD0, 0x12, 0x68, 0x1A, 0x00, 0xB1, 0x58, 0x50, 
+	0x00, 0xAB, 0x4A, 0x80, 0x50, 0xD0, 0x68, 0x12, 0x48, 0x7D, 0x50, 0xD1, 0x58, 0x51, 0x1C, 0x13, 
+	0x22, 0x0A, 0x18, 0xC0, 0x43, 0x6B, 0x99, 0x03, 0x30, 0x3C, 0xFB, 0x7E, 0xF0, 0x03, 0x35, 0x01, 
+	0x68, 0x3B, 0xDA, 0x05, 0x42, 0x9D, 0x36, 0x01, 0x99, 0x03, 0x91, 0x03, 0x31, 0x0A, 0xD1, 0xD9, 
+	0x2E, 0x0E, 0x68, 0x1B, 0x4B, 0x76, 0xD5, 0x3B, 0x06, 0xDA, 0x78, 0x1B, 0x4B, 0x75, 0xD0, 0x03, 
+	0x2B, 0x00, 0x49, 0x74, 0x20, 0x04, 0xFE, 0xD4, 0xF0, 0x01, 0x4E, 0x73, 0x25, 0x00, 0x1C, 0x69, 
+	0xE0, 0x2C, 0x68, 0x33, 0x01, 0x89, 0x4A, 0x71, 0x68, 0x77, 0x46, 0xA4, 0x91, 0x03, 0x9C, 0x03, 
+	0xE0, 0x12, 0x18, 0x61, 0x1C, 0x99, 0xB2, 0x40, 0x5C, 0x88, 0x2C, 0x0D, 0x1E, 0x44, 0x4C, 0x66, 
+	0xD8, 0x09, 0x38, 0x01, 0x18, 0x20, 0xB2, 0x40, 0x78, 0x00, 0xD0, 0x02, 0x1C, 0x44, 0xB2, 0xC0, 
+	0x30, 0x01, 0x3B, 0x01, 0x54, 0x88, 0xDA, 0xEA, 0x42, 0xBB, 0x46, 0x64, 0x4B, 0x61, 0x2B, 0x00, 
+	0x78, 0x1B, 0x4B, 0x63, 0xD0, 0x09, 0x01, 0xAA, 0x4F, 0x63, 0x19, 0xD2, 0x7D, 0xD9, 0x20, 0x04, 
+	0x23, 0x01, 0xF0, 0x01, 0x93, 0x00, 0x35, 0x01, 0xFE, 0x4D, 0x7E, 0x3B, 0x4F, 0x5D, 0xDB, 0xCE, 
+	0x42, 0x9D, 0x68, 0x1B, 0x4B, 0x5D, 0xDD, 0x10, 0x2B, 0x00, 0x4A, 0x5D, 0x4B, 0x5C, 0x80, 0x11, 
+	0x89, 0x99, 0x80, 0x53, 0x89, 0x1B, 0x78, 0x1B, 0x4B, 0x52, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 
+	0x23, 0x01, 0x20, 0x17, 0x93, 0x00, 0xF0, 0x01, 0x1C, 0x0B, 0x4B, 0x48, 0xFE, 0x33, 0x1C, 0x1D, 
+	0x48, 0x55, 0x49, 0x4F, 0xCD, 0x40, 0x89, 0x47, 0x96, 0x07, 0x8D, 0x0A, 0x97, 0x08, 0xB2, 0x16, 
+	0x68, 0x47, 0x69, 0x86, 0x96, 0x05, 0xB2, 0xB7, 0x97, 0x09, 0x97, 0x04, 0x1B, 0xD2, 0x31, 0x31, 
+	0xB2, 0x92, 0x92, 0x0A, 0x78, 0x09, 0x20, 0x00, 0x4A, 0x3E, 0x68, 0x17, 0x91, 0x06, 0xE0, 0x2F, 
+	0x90, 0x03, 0x23, 0x0A, 0x9A, 0x03, 0xCF, 0x01, 0x43, 0x53, 0x43, 0x48, 0x99, 0x05, 0x18, 0xCB, 
+	0x49, 0x37, 0x5E, 0x99, 0x22, 0x3C, 0x43, 0x59, 0x9B, 0x09, 0xFA, 0x94, 0xF0, 0x03, 0x4A, 0x42, 
+	0x99, 0x08, 0x78, 0x13, 0x18, 0x08, 0x80, 0x28, 0xB2, 0x80, 0xD1, 0x15, 0x2B, 0x00, 0x42, 0xB0, 
+	0xB2, 0x00, 0x9B, 0x06, 0xDA, 0x07, 0x43, 0x58, 0x1B, 0x80, 0x11, 0x80, 0x99, 0x04, 0x80, 0x28, 
+	0x18, 0x08, 0x9A, 0x05, 0xE0, 0x0A, 0x42, 0xB0, 0x1A, 0x10, 0x9B, 0x06, 0xDA, 0x06, 0x43, 0x58, 
+	0x1B, 0x80, 0x11, 0x80, 0x99, 0x0A, 0x80, 0x28, 0x1A, 0x08, 0x35, 0x02, 0x9A, 0x03, 0x92, 0x03, 
+	0x32, 0x01, 0x98, 0x07, 0x9B, 0x03, 0xDB, 0xCB, 0x42, 0x83, 0x49, 0x2E, 0x4D, 0x20, 0x4A, 0x28, 
+	0x68, 0x2D, 0x89, 0x0E, 0x95, 0x05, 0x96, 0x07, 0x68, 0x0D, 0x95, 0x08, 0x8C, 0xD3, 0xB2, 0x1F, 
+	0x69, 0x4D, 0x1C, 0x11, 0xB2, 0xAE, 0x96, 0x06, 0x97, 0x04, 0x78, 0x09, 0x31, 0x2F, 0xB2, 0x9B, 
+	0x1B, 0x9B, 0x32, 0x30, 0x91, 0x09, 0x4E, 0x15, 0x78, 0x12, 0x4B, 0x16, 0x93, 0x0B, 0x92, 0x0A, 
+	0x20, 0x00, 0x36, 0x20, 0x68, 0x1F, 0xE0, 0x50, 0x90, 0x03, 0x23, 0x0A, 0x9A, 0x03, 0xCF, 0x01, 
+	0x43, 0x53, 0x43, 0x48, 0x99, 0x04, 0x18, 0x5B, 0x49, 0x0D, 0x5E, 0x99, 0x22, 0x3C, 0x43, 0x59, 
+	0x9B, 0x08, 0xFA, 0x40, 0xF0, 0x03, 0x4A, 0x18, 0x99, 0x07, 0x78, 0x13, 0x18, 0x08, 0x80, 0x30, 
+	0xB2, 0x80, 0xD1, 0x36, 0x2B, 0x00, 0x42, 0xA8, 0xB2, 0x00, 0x9B, 0x09, 0xDA, 0x28, 0x43, 0x58, 
+	0x1B, 0x40, 0x11, 0x80, 0x99, 0x06, 0x80, 0x30, 0x18, 0x08, 0x46, 0xC0, 0xE0, 0x2B, 0x20, 0x00, 
+	0x02, 0x24, 0x20, 0x00, 0x00, 0x48, 0x20, 0x00, 0x00, 0x44, 0x20, 0x00, 0x02, 0xEC, 0x20, 0x00, 
+	0x00, 0x58, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x64, 0x20, 0x00, 0x10, 0xE4, 0x40, 0x00, 
+	0x20, 0x00, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x20, 0x42, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 
+	0x01, 0x70, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x01, 0xDF, 0x1A, 0x10, 
+	0x9A, 0x04, 0xDA, 0x06, 0x42, 0xA8, 0x1B, 0x40, 0x9B, 0x0A, 0x99, 0x0B, 0x43, 0x58, 0x1A, 0x08, 
+	0x11, 0x80, 0x9A, 0x03, 0x80, 0x30, 0x32, 0x01, 0x36, 0x02, 0x9B, 0x03, 0x92, 0x03, 0x42, 0x83, 
+	0x98, 0x05, 0x4B, 0x1B, 0xDB, 0xAA, 0x32, 0x2A, 0x1C, 0x1A, 0x1C, 0x1A, 0x78, 0x17, 0x78, 0x12, 
+	0x32, 0x2B, 0x5E, 0x5E, 0x21, 0x28, 0x25, 0x26, 0x92, 0x03, 0x33, 0x2C, 0x5F, 0x5A, 0x78, 0x1B, 
+	0x92, 0x04, 0x93, 0x06, 0x49, 0x14, 0x46, 0xB4, 0x25, 0x00, 0x26, 0x00, 0xE0, 0x1D, 0x2B, 0x00, 
+	0x5F, 0x8B, 0x4A, 0x11, 0xD0, 0x16, 0x23, 0x04, 0x18, 0xA8, 0x26, 0x20, 0x5E, 0xC2, 0x2F, 0x00, 
+	0x5F, 0x83, 0x46, 0x66, 0xD0, 0x01, 0x9E, 0x03, 0x1A, 0xB2, 0xD0, 0x01, 0x2E, 0x00, 0x1A, 0xF3, 
+	0x9E, 0x04, 0x2E, 0x00, 0x9E, 0x06, 0x1C, 0x16, 0xD0, 0x02, 0x1C, 0x33, 0x1C, 0x1A, 0x84, 0x03, 
+	0x80, 0x82, 0x31, 0x0A, 0x34, 0x01, 0x78, 0xAF, 0xAE, 0xF1, 0x09, 0x9E, 0x05, 0x35, 0x02, 0xDB, 
+	0xDE, 0x42, 0xB4, 0xBD, 0xF0, 0xB0, 0x0D, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0x60, 0x20, 
+	0x00, 0x02, 0x24, 0x4B, 0x0A, 0xB5, 0x30, 0x33, 0x04, 0x21, 0x00, 0x4A, 0x09, 0x7F, 0xDB, 0x1C, 
+	0x08, 0x24, 0x0A, 0x3B, 0x01, 0xE0, 0x07, 0x1C, 0x25, 0xB2, 0xDB, 0x19, 0x55, 0x43, 0x5D, 0x4D, 
+	0x05, 0x87, 0xA9, 0x2B, 0x00, 0x54, 0xE8, 0x60, 0x13, 0xD1, 0xF5, 0x46, 0xC0, 0xBD, 0x30, 0x20, 
+	0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x01, 0x64, 0x4A, 0x08, 0xB5, 0x00, 0x42, 
+	0x5B, 0x23, 0x01, 0x4B, 0x07, 0x60, 0x53, 0x60, 0x11, 0x21, 0x00, 0xE0, 0x04, 0x78, 0x1B, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x00, 0x40, 0x1D, 0x18, 0x2B, 0x00, 0x52, 0x81, 0xBD, 0x00, 0xD1, 0xF8, 0x20, 
+	0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x43, 0x40, 0x43, 0x49, 0x47, 0x70, 0x18, 0x40, 0xB5, 
+	0xF0, 0x47, 0x70, 0x22, 0x00, 0x4B, 0x83, 0x7F, 0xD9, 0x33, 0x04, 0x1C, 0x0B, 0xB0, 0x87, 0x26, 
+	0x0A, 0x48, 0x81, 0xE0, 0x07, 0x1C, 0x15, 0xB2, 0xDB, 0x3B, 0x01, 0x43, 0x5C, 0x1C, 0x34, 0x87, 
+	0xA2, 0x19, 0x04, 0x72, 0x25, 0x34, 0x38, 0x2B, 0x00, 0x1C, 0x04, 0x4B, 0x7B, 0xD1, 0xF4, 0x1C, 
+	0x0B, 0x68, 0x1A, 0xDD, 0x00, 0x42, 0x91, 0x60, 0x23, 0x1C, 0x13, 0x4A, 0x79, 0x48, 0x78, 0x24, 
+	0x0E, 0x4B, 0x79, 0x3C, 0x01, 0x21, 0xFF, 0x00, 0xA5, 0xB2, 0xE4, 0x50, 0xAB, 0x55, 0x01, 0xD1, 
+	0xF8, 0x2C, 0x00, 0x1C, 0x25, 0x4B, 0x6F, 0x7F, 0xDB, 0x33, 0x04, 0x93, 0x03, 0x1C, 0x26, 0x69, 
+	0x1B, 0x4B, 0x72, 0x4B, 0x6D, 0x93, 0x04, 0x93, 0x05, 0x68, 0x1B, 0x4C, 0x70, 0xE0, 0x47, 0x2B, 
+	0x00, 0x5D, 0x63, 0x4C, 0x6F, 0xD0, 0x42, 0x58, 0xE3, 0x00, 0xAB, 0x01, 0x1B, 0x9C, 0x04, 0x93, 
+	0x01, 0x19, 0x1B, 0x00, 0x6A, 0x4B, 0x6C, 0x18, 0xD3, 0x27, 0x01, 0x42, 0x7F, 0x24, 0x00, 0xE0, 
+	0x20, 0x93, 0x02, 0x43, 0x63, 0x23, 0x0A, 0x18, 0xC3, 0x48, 0x60, 0x5E, 0x5B, 0x21, 0x3C, 0xD0, 
+	0x16, 0x2B, 0x00, 0x00, 0x63, 0x9A, 0x02, 0x88, 0x98, 0x18, 0xC3, 0x4A, 0x5B, 0x88, 0x93, 0x1C, 
+	0x23, 0x1A, 0xC0, 0x00, 0x5B, 0x33, 0x10, 0x9A, 0x02, 0x5A, 0x99, 0x8B, 0x13, 0xB2, 0x00, 0xB2, 
+	0x09, 0x1A, 0xC9, 0xFF, 0x98, 0xF7, 0xFF, 0x42, 0x98, 0x9B, 0x01, 0x1C, 0x27, 0xDA, 0x01, 0x34, 
+	0x01, 0x90, 0x01, 0x98, 0x05, 0xB2, 0xE4, 0xDB, 0xDB, 0x42, 0x84, 0xD0, 0x0D, 0x1C, 0x79, 0x49, 
+	0x50, 0x4B, 0x4F, 0x00, 0xBA, 0x57, 0xD8, 0xD0, 0x04, 0x30, 0x01, 0x9C, 0x01, 0x58, 0x88, 0xDD, 
+	0x03, 0x42, 0xA0, 0x9C, 0x01, 0xE0, 0x00, 0x55, 0xDD, 0x50, 0x8C, 0x9C, 0x03, 0x35, 0x01, 0x42, 
+	0xA3, 0xB2, 0xEB, 0x1C, 0x34, 0xD3, 0xB3, 0x4E, 0x44, 0x25, 0x00, 0x48, 0x44, 0xE0, 0x28, 0xB2, 
+	0x7B, 0x5D, 0x47, 0xD0, 0x21, 0x33, 0x01, 0xB2, 0xFF, 0x00, 0x69, 0x18, 0x71, 0x4B, 0x3E, 0x00, 
+	0x7A, 0x88, 0x89, 0x80, 0x91, 0x18, 0x9A, 0x31, 0x10, 0x1C, 0x29, 0x00, 0x49, 0x1C, 0x3A, 0x32, 
+	0x10, 0x5B, 0x89, 0x52, 0xD1, 0x00, 0x52, 0x1C, 0x10, 0x22, 0x0A, 0x1C, 0x11, 0x43, 0x78, 0x18, 
+	0x1B, 0x43, 0x69, 0x18, 0x71, 0x1C, 0x18, 0x31, 0x3C, 0x30, 0x3C, 0xF9, 0x40, 0xF0, 0x03, 0x00, 
+	0xAA, 0x4B, 0x34, 0x4B, 0x37, 0x58, 0xD2, 0x50, 0xFA, 0x00, 0xBF, 0xB2, 0xED, 0x35, 0x01, 0x42, 
+	0x9D, 0x68, 0x33, 0xE0, 0x3D, 0xDB, 0xD3, 0x57, 0x33, 0x4E, 0x2D, 0xD1, 0x36, 0x33, 0x01, 0x43, 
+	0x63, 0x23, 0x0A, 0x20, 0x3C, 0x18, 0xEB, 0x2B, 0x00, 0x5E, 0x1B, 0x4B, 0x25, 0xD0, 0x2F, 0x33, 
+	0x04, 0x4A, 0x2E, 0x23, 0x00, 0x7F, 0xDF, 0x4E, 0x29, 0xE0, 0x26, 0x2E, 0x00, 0x5C, 0xF6, 0x26, 
+	0x00, 0xD1, 0x20, 0x28, 0x00, 0x5F, 0x90, 0x4A, 0x21, 0xD1, 0x1C, 0x55, 0x11, 0x00, 0x67, 0x48, 
+	0x1D, 0x49, 0x1E, 0x88, 0xBF, 0x19, 0xCF, 0x18, 0x82, 0x00, 0x5A, 0x1C, 0x27, 0x80, 0x97, 0x1C, 
+	0x1A, 0x37, 0x10, 0x5A, 0x7F, 0x00, 0x7F, 0x00, 0x52, 0x32, 0x10, 0x22, 0x0A, 0x52, 0x17, 0x18, 
+	0xC0, 0x43, 0x53, 0x43, 0x63, 0x1C, 0x13, 0x31, 0x3C, 0x18, 0xC9, 0xF0, 0x03, 0x30, 0x3C, 0xE0, 
+	0x04, 0xF8, 0xFF, 0x32, 0x0A, 0x33, 0x01, 0x42, 0xB9, 0xB2, 0xD9, 0x34, 0x01, 0xD3, 0xD5, 0xE0, 
+	0x00, 0xB2, 0xE4, 0x68, 0x2B, 0x4D, 0x0D, 0xDB, 0xBD, 0x42, 0x9C, 0x49, 0x0C, 0x4B, 0x09, 0x7F, 
+	0xDD, 0x33, 0x04, 0x20, 0xFF, 0x4B, 0x12, 0x34, 0x0E, 0x1C, 0x1C, 0x42, 0xAA, 0x78, 0x1A, 0x5C, 
+	0x8A, 0xD2, 0x02, 0xE0, 0x00, 0x70, 0x1A, 0x33, 0x01, 0x70, 0x18, 0xD1, 0xF5, 0x42, 0xA3, 0xBD, 
+	0xF0, 0xB0, 0x07, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x02, 0x24, 0x20, 
+	0x00, 0x03, 0xE8, 0x20, 0x00, 0x10, 0xF8, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x09, 0x24, 0x20, 
+	0x00, 0x01, 0xEC, 0x20, 0x00, 0x00, 0xF8, 0x20, 0x00, 0x09, 0x80, 0x20, 0x00, 0x0D, 0xD8, 0x20, 
+	0x00, 0x02, 0xEC, 0x4B, 0x42, 0xB5, 0xF7, 0x60, 0x19, 0x21, 0x00, 0x24, 0x0A, 0x4B, 0x41, 0x4B, 
+	0x41, 0x60, 0x19, 0x33, 0x04, 0x1C, 0x08, 0x4D, 0x40, 0x7F, 0xDB, 0x46, 0xA4, 0x1C, 0x1A, 0x3A, 
+	0x01, 0xE0, 0x11, 0x1C, 0x26, 0xB2, 0xD2, 0x19, 0xAE, 0x43, 0x56, 0x7A, 0x36, 0x36, 0x38, 0xDA, 
+	0x00, 0x42, 0xB0, 0x46, 0x66, 0x1C, 0x30, 0x19, 0xAE, 0x43, 0x56, 0x5F, 0xF6, 0x27, 0x3C, 0xDA, 
+	0x00, 0x42, 0xB1, 0x2A, 0x00, 0x1C, 0x31, 0x4A, 0x32, 0xD1, 0xEB, 0x60, 0x11, 0x60, 0x50, 0x20, 
+	0x0A, 0x4A, 0x2F, 0x4A, 0x31, 0x68, 0x11, 0x3B, 0x01, 0xE0, 0x07, 0x1C, 0x04, 0xB2, 0xDB, 0x19, 
+	0x14, 0x43, 0x5C, 0x7A, 0x24, 0x34, 0x38, 0x1C, 0x14, 0x19, 0x09, 0xD1, 0xF4, 0x2B, 0x00, 0x60, 
+	0x19, 0x4B, 0x27, 0x2B, 0x00, 0x68, 0x13, 0x4B, 0x26, 0xDD, 0x0F, 0x68, 0x5B, 0x4A, 0x28, 0x80, 
+	0x53, 0x80, 0x11, 0x78, 0x1B, 0x4B, 0x27, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 
+	0x1D, 0x93, 0x00, 0xF0, 0x01, 0x1C, 0x0B, 0x68, 0x23, 0xFB, 0x8F, 0xDD, 0x19, 0x2B, 0x00, 0x23, 
+	0x08, 0x4A, 0x21, 0x4B, 0x21, 0x5E, 0xD1, 0x5F, 0x12, 0x24, 0x0C, 0x33, 0x3D, 0x1C, 0x18, 0x30, 
+	0x3C, 0x78, 0x1B, 0x78, 0x00, 0x43, 0x53, 0x18, 0xC3, 0x11, 0x9B, 0xDC, 0x09, 0x42, 0x99, 0x78, 
+	0x1B, 0x4B, 0x18, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x19, 0x20, 0x00, 0xFB, 0xCC, 0xF0, 0x01, 0xFE, 
+	0x40, 0xF7, 0xFF, 0x4A, 0x17, 0x4B, 0x11, 0x78, 0x12, 0x68, 0x1B, 0xDB, 0x12, 0x42, 0x93, 0x4A, 
+	0x12, 0x4B, 0x0B, 0x8E, 0xD1, 0x68, 0x18, 0x42, 0x88, 0x4B, 0x0A, 0x8F, 0x11, 0xDB, 0x03, 0x42, 
+	0x88, 0x68, 0x58, 0x8F, 0x52, 0xDA, 0x03, 0x42, 0x93, 0x68, 0x5B, 0x4B, 0x0E, 0xDB, 0x07, 0x70, 
+	0x1A, 0x22, 0x01, 0x2B, 0x00, 0xE0, 0x03, 0x4A, 0x0B, 0xD1, 0x01, 0xBD, 0xF7, 0x70, 0x13, 0x20, 
+	0x00, 0x11, 0x4C, 0x20, 0x00, 0x02, 0x0C, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 
+	0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x0D, 0x48, 0x00, 
+	0x00, 0x59, 0x6C, 0x20, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0xF5, 0x45, 0xAB, 0xAE, 0xF1, 0x0A, 
+	0x1C, 0x04, 0xB5, 0x38, 0x2A, 0x00, 0x1C, 0x08, 0x43, 0x54, 0xD0, 0x07, 0x18, 0xD1, 0x43, 0x58, 
+	0x10, 0x4D, 0x18, 0x20, 0xF0, 0x02, 0x19, 0x40, 0xBD, 0x38, 0xFF, 0xBB, 0x1A, 0x43, 0xB5, 0x10, 
+	0x19, 0x1B, 0x17, 0xDC, 0xF7, 0xFF, 0x40, 0x63, 0xBD, 0x10, 0xFF, 0xEB, 0x4B, 0xA9, 0xB5, 0xF0, 
+	0x33, 0x04, 0x25, 0x00, 0x7F, 0xDC, 0xB0, 0x87, 0xE0, 0x46, 0x1C, 0x2E, 0xB2, 0xE4, 0x3C, 0x01, 
+	0x43, 0x62, 0x22, 0x0A, 0x31, 0x38, 0x18, 0x99, 0x28, 0x00, 0x88, 0x88, 0x4F, 0xA2, 0xD0, 0x3D, 
+	0x2F, 0x00, 0x5D, 0x3F, 0x49, 0xA1, 0xD1, 0x2A, 0x29, 0x00, 0x78, 0x09, 0x18, 0x9A, 0xD0, 0x07, 
+	0x32, 0x3C, 0x21, 0x01, 0x23, 0x02, 0x20, 0x1D, 0xF0, 0x01, 0x91, 0x00, 0x20, 0x0A, 0xFB, 0x07, 
+	0x4B, 0x9B, 0x43, 0x60, 0x18, 0x18, 0x49, 0x9B, 0x5F, 0xC2, 0x27, 0x3C, 0x46, 0x94, 0x30, 0x38, 
+	0x5F, 0xCA, 0x27, 0x26, 0x45, 0x94, 0x1C, 0x1F, 0x31, 0x4E, 0xDB, 0x08, 0x49, 0x96, 0x78, 0x0A, 
+	0x68, 0x49, 0x7A, 0x00, 0x11, 0x92, 0x43, 0x4A, 0xDA, 0x16, 0x42, 0x90, 0x43, 0x62, 0x22, 0x0A, 
+	0x87, 0xD5, 0x18, 0xBA, 0x72, 0x16, 0x32, 0x38, 0xE0, 0x08, 0x80, 0x95, 0xB2, 0x00, 0x4A, 0x8D, 
+	0x5F, 0xD2, 0x27, 0x28, 0xDD, 0x08, 0x42, 0x82, 0x72, 0x0E, 0x80, 0xCD, 0x4A, 0x8B, 0x80, 0x8D, 
+	0x50, 0x8D, 0x00, 0xA1, 0x3A, 0x01, 0x68, 0x1A, 0x4B, 0x85, 0x60, 0x1A, 0xD1, 0xB5, 0x2C, 0x00, 
+	0x4B, 0x87, 0x60, 0x1C, 0x4B, 0x7F, 0x73, 0x9C, 0x7F, 0xDC, 0x33, 0x04, 0x3C, 0x01, 0xE0, 0xC7, 
+	0x23, 0x0A, 0xB2, 0xE4, 0x18, 0xED, 0x43, 0x63, 0x35, 0x38, 0x8F, 0xAA, 0xD1, 0x00, 0x2A, 0x00, 
+	0x4B, 0x7C, 0xE0, 0x93, 0x8D, 0x1B, 0xB2, 0x12, 0x1A, 0x52, 0xB2, 0x19, 0x00, 0x5B, 0x10, 0x52, 
+	0x80, 0xAB, 0x18, 0xD3, 0x7B, 0x9A, 0x4B, 0x7A, 0xD1, 0x0D, 0x2A, 0x00, 0x57, 0x12, 0x4A, 0x79, 
+	0xD1, 0x09, 0x2A, 0x00, 0x21, 0x01, 0x4A, 0x78, 0x22, 0x80, 0x70, 0x11, 0x69, 0x50, 0x05, 0xD2, 
+	0x06, 0x00, 0x0E, 0x00, 0x61, 0x51, 0x43, 0x01, 0x73, 0x9A, 0x22, 0x01, 0x4B, 0x71, 0x4E, 0x73, 
+	0x78, 0x33, 0x57, 0x1A, 0xDB, 0x70, 0x42, 0x9A, 0x78, 0x1A, 0x4B, 0x6F, 0xD0, 0x01, 0x2A, 0x00, 
+	0x70, 0x1A, 0x22, 0x00, 0x00, 0x62, 0x4D, 0x66, 0x33, 0x01, 0x68, 0x2B, 0x18, 0xAB, 0x60, 0x2B, 
+	0x5F, 0xD9, 0x27, 0x04, 0x18, 0x9A, 0x4B, 0x6A, 0x5F, 0x90, 0x26, 0x04, 0x32, 0x10, 0x1C, 0x22, 
+	0x5F, 0x57, 0x00, 0x52, 0x5E, 0xD7, 0x97, 0x03, 0x17, 0xD3, 0x1A, 0x0A, 0x18, 0xD2, 0x9E, 0x03, 
+	0x1B, 0xF3, 0x40, 0x5A, 0x19, 0x9B, 0x17, 0xDE, 0x18, 0xD3, 0x40, 0x73, 0x4B, 0x59, 0x93, 0x04, 
+	0x5E, 0x9E, 0x22, 0x2E, 0x1C, 0x32, 0x9B, 0x04, 0xF7, 0xFF, 0x96, 0x05, 0x9A, 0x05, 0xFF, 0x39, 
+	0x1C, 0x06, 0x9B, 0x04, 0x1C, 0x38, 0x99, 0x03, 0xFF, 0x32, 0xF7, 0xFF, 0x1C, 0x13, 0x4A, 0x4D, 
+	0x78, 0x1B, 0x33, 0x2D, 0xB2, 0x5B, 0x1C, 0x2A, 0xDD, 0x07, 0x42, 0x9E, 0x69, 0xC9, 0x49, 0x55, 
+	0x42, 0xBE, 0x1A, 0xCF, 0x1E, 0x4E, 0xDB, 0x03, 0xE0, 0x00, 0x1A, 0xF6, 0x4B, 0x45, 0x1C, 0x1E, 
+	0x78, 0x1B, 0x33, 0x2E, 0x42, 0x98, 0xB2, 0x5B, 0x49, 0x4E, 0xDD, 0x07, 0x1A, 0xCF, 0x6A, 0x09, 
+	0xDB, 0x03, 0x42, 0xB8, 0x1A, 0xC0, 0x1E, 0x48, 0x1C, 0x18, 0xE0, 0x00, 0x18, 0xD3, 0x00, 0x63, 
+	0x1C, 0x23, 0x80, 0x9E, 0x00, 0x5B, 0x33, 0x10, 0x25, 0x0A, 0x52, 0xE8, 0x4B, 0x3D, 0x43, 0x65, 
+	0x20, 0x30, 0x4E, 0x43, 0x19, 0x76, 0x5E, 0x1F, 0x21, 0x3C, 0x19, 0x55, 0x22, 0x3C, 0x5E, 0x70, 
+	0x1C, 0x3A, 0x5E, 0xA9, 0xFF, 0x0A, 0xF7, 0xFF, 0x87, 0xA8, 0x36, 0x38, 0x7A, 0x30, 0x35, 0x38, 
+	0x1C, 0x3A, 0x7A, 0x29, 0xFF, 0x02, 0xF7, 0xFF, 0x4B, 0x31, 0x72, 0x28, 0x18, 0x99, 0x00, 0x62, 
+	0x88, 0x89, 0x48, 0x37, 0x80, 0x91, 0x18, 0x82, 0x32, 0x10, 0x1C, 0x22, 0x5A, 0xD1, 0x00, 0x52, 
+	0x22, 0x0A, 0x52, 0x11, 0x43, 0x61, 0x1C, 0x11, 0x18, 0x59, 0x18, 0x40, 0x30, 0x3C, 0x1C, 0x0D, 
+	0xF0, 0x02, 0x31, 0x3C, 0x23, 0x3C, 0xFF, 0x07, 0x35, 0x38, 0x5E, 0xEA, 0x2A, 0x00, 0x4B, 0x29, 
+	0x49, 0x24, 0xD0, 0x0C, 0x31, 0x32, 0x5D, 0x1A, 0xB2, 0x50, 0x78, 0x09, 0xDA, 0x06, 0x42, 0x88, 
+	0x55, 0x1A, 0x32, 0x01, 0x42, 0x5B, 0x23, 0x01, 0xE0, 0x00, 0x80, 0xAB, 0x4D, 0x1C, 0x55, 0x1A, 
+	0xD0, 0x00, 0x2C, 0x00, 0x4E, 0x22, 0xE7, 0x33, 0x68, 0x32, 0x68, 0x29, 0x42, 0x91, 0x4B, 0x22, 
+	0x68, 0x19, 0xDA, 0x25, 0x31, 0x01, 0x48, 0x17, 0x30, 0x3E, 0x60, 0x19, 0xB2, 0x40, 0x78, 0x00, 
+	0xDA, 0x1C, 0x42, 0x81, 0x60, 0x2A, 0x4B, 0x0F, 0x7F, 0xDC, 0x33, 0x04, 0x3C, 0x01, 0xE0, 0x14, 
+	0x00, 0x63, 0xB2, 0xE4, 0x88, 0x92, 0x18, 0xF2, 0x80, 0x9A, 0x18, 0xEB, 0x33, 0x10, 0x1C, 0x23, 
+	0x5B, 0x9A, 0x00, 0x5B, 0x22, 0x0A, 0x53, 0x5A, 0x43, 0x61, 0x1C, 0x11, 0x18, 0x71, 0x18, 0x68, 
+	0x31, 0x3C, 0x30, 0x3C, 0xFE, 0xC6, 0xF0, 0x02, 0xD1, 0xE8, 0x2C, 0x00, 0x60, 0x1C, 0xE0, 0x00, 
+	0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xEC, 0x20, 0x00, 0x01, 0xEB, 
+	0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x02, 0x0C, 0x20, 0x00, 0x00, 0xF8, 
+	0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x11, 0x3E, 0x20, 0x00, 0x01, 0xE2, 0x20, 0x00, 0x0D, 0x7A, 
+	0x20, 0x00, 0x03, 0x20, 0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x01, 0x60, 0x4B, 0x31, 0xB5, 0xF0, 
+	0x78, 0x1E, 0x4D, 0x31, 0x27, 0x00, 0x4B, 0x31, 0x60, 0x2F, 0x1C, 0x1A, 0x78, 0x12, 0x32, 0x2B, 
+	0x92, 0x04, 0xB0, 0x89, 0x1C, 0x1A, 0x00, 0x50, 0x32, 0x32, 0x90, 0x06, 0x92, 0x07, 0x78, 0x12, 
+	0x5E, 0x99, 0x22, 0x30, 0x91, 0x05, 0x68, 0x6B, 0x97, 0x03, 0x93, 0x02, 0x3E, 0x01, 0xE0, 0x42, 
+	0x1D, 0x33, 0xB2, 0xF6, 0x93, 0x01, 0x00, 0x5B, 0x2B, 0x00, 0x5A, 0xEB, 0x98, 0x04, 0xD0, 0x34, 
+	0x1A, 0x1B, 0xB2, 0x1B, 0x10, 0x5B, 0x99, 0x06, 0x9A, 0x01, 0x18, 0xCB, 0xB2, 0x9B, 0x48, 0x20, 
+	0x00, 0xF2, 0x52, 0xAB, 0x18, 0x84, 0x58, 0x81, 0xB2, 0x1B, 0x98, 0x07, 0xDA, 0x07, 0x42, 0x81, 
+	0x31, 0x01, 0x48, 0x1B, 0x99, 0x01, 0x50, 0x81, 0x60, 0x63, 0x22, 0x00, 0xE0, 0x21, 0x52, 0x6A, 
+	0x37, 0x01, 0x68, 0x60, 0x17, 0xD1, 0x1A, 0x1A, 0x18, 0x50, 0x46, 0x84, 0x40, 0x48, 0x9A, 0x05, 
+	0x90, 0x00, 0x18, 0x11, 0x43, 0x42, 0x46, 0x60, 0x9A, 0x00, 0x46, 0x94, 0x46, 0x62, 0x43, 0x53, 
+	0x10, 0x4B, 0x18, 0xD0, 0xF0, 0x02, 0x18, 0xC0, 0x9B, 0x01, 0xFD, 0xF3, 0x60, 0x60, 0x99, 0x03, 
+	0x42, 0x81, 0x52, 0xE8, 0xE0, 0x05, 0xDB, 0x04, 0x00, 0xF2, 0x48, 0x09, 0xE0, 0x01, 0x50, 0x83, 
+	0x90, 0x03, 0x96, 0x02, 0xD1, 0xBA, 0x2E, 0x00, 0xB0, 0x09, 0x99, 0x02, 0x60, 0x69, 0x60, 0x2F, 
+	0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x09, 0x48, 0x4B, 0x27, 0xB5, 0xF7, 0x33, 0x04, 0x49, 0x27, 0x4A, 0x27, 0x7F, 0xDB, 
+	0xE0, 0x42, 0x48, 0x27, 0xB2, 0xDB, 0x3B, 0x01, 0x34, 0x14, 0x1C, 0x1C, 0x19, 0x04, 0x00, 0x64, 
+	0xC7, 0x44, 0xAE, 0xF1, 0x0B, 0x5F, 0x64, 0x25, 0x04, 0xD0, 0x27, 0x2C, 0x00, 0x43, 0x5C, 0x24, 
+	0x0A, 0x26, 0x3C, 0x19, 0x0C, 0x2C, 0x00, 0x5F, 0xA4, 0x00, 0x5C, 0xD0, 0x20, 0x88, 0xB6, 0x19, 
+	0x0E, 0xB2, 0x37, 0x19, 0x05, 0x27, 0x04, 0x46, 0xBC, 0x46, 0x65, 0x5F, 0xEF, 0x10, 0x6F, 0x1B, 
+	0xED, 0x19, 0x14, 0x19, 0xBE, 0x1C, 0x1C, 0x80, 0xA6, 0x00, 0x64, 0x34, 0x10, 0x1C, 0x1C, 0x5B, 
+	0x0E, 0xB2, 0x37, 0x34, 0x0C, 0x46, 0xBC, 0x00, 0x64, 0x46, 0x67, 0x5E, 0x25, 0x10, 0x7F, 0x1B, 
+	0x7F, 0x52, 0xA6, 0x19, 0xBE, 0x26, 0x01, 0x4C, 0x10, 0xE0, 0x10, 0x54, 0xE6, 0x00, 0x5C, 0x4D, 
+	0x0B, 0x88, 0xB6, 0x19, 0x2E, 0x80, 0xA6, 0x19, 0x14, 0x36, 0x10, 0x1C, 0x1E, 0x00, 0x76, 0x1C, 
+	0x1C, 0x34, 0x0C, 0x5B, 0x76, 0x53, 0x16, 0x00, 0x64, 0x26, 0x00, 0x4C, 0x07, 0x2B, 0x00, 0x54, 
+	0xE6, 0x68, 0x0B, 0xD1, 0xBA, 0xBD, 0xF7, 0x60, 0x13, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 
+	0x9C, 0x20, 0x00, 0x09, 0x80, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x01, 0xEC, 0x4A, 0x35, 0xB5, 
+	0xF7, 0x1C, 0x11, 0x4B, 0x35, 0x32, 0x34, 0x31, 0x33, 0x78, 0x12, 0x78, 0x0E, 0x7F, 0xDB, 0x33, 
+	0x04, 0x92, 0x01, 0x49, 0x32, 0x4A, 0x32, 0x46, 0xB4, 0x48, 0x32, 0xE0, 0x4B, 0xB2, 0xDB, 0x3B, 
+	0x01, 0x98, 0x01, 0x5C, 0xC4, 0xD1, 0x00, 0x2C, 0x00, 0x00, 0x5E, 0x46, 0x60, 0x19, 0x96, 0x19, 
+	0x8D, 0x5F, 0xF6, 0x27, 0x04, 0x96, 0x00, 0x88, 0xAD, 0xB2, 0x2E, 0x9F, 0x00, 0x17, 0xF7, 0x1B, 
+	0xBE, 0x40, 0x7E, 0x19, 0xF6, 0xDA, 0x10, 0x42, 0x86, 0x36, 0x0C, 0x1C, 0x1E, 0x5E, 0xB6, 0x00, 
+	0x76, 0x37, 0x10, 0x1C, 0x1F, 0x00, 0x7F, 0x96, 0x00, 0x9E, 0x00, 0x5F, 0xCF, 0x17, 0xFE, 0x1B, 
+	0xF7, 0x40, 0x77, 0x19, 0xBF, 0x42, 0x87, 0x97, 0x00, 0x00, 0x58, 0xDB, 0x18, 0x1C, 0x1E, 0x18, 
+	0x10, 0x36, 0x10, 0x80, 0x85, 0x1C, 0x18, 0x4D, 0x19, 0x30, 0x0C, 0x00, 0x76, 0x00, 0x40, 0x5B, 
+	0x75, 0x1C, 0x18, 0x52, 0x15, 0x00, 0x40, 0x30, 0x14, 0x27, 0x04, 0x18, 0x10, 0x28, 0x00, 0x5F, 
+	0xC0, 0x2C, 0x00, 0xDD, 0x04, 0x48, 0x13, 0xD1, 0x02, 0x54, 0xC4, 0x24, 0x01, 0x43, 0x5C, 0x24, 
+	0x0A, 0x1C, 0x18, 0x4D, 0x0E, 0x30, 0x14, 0x19, 0x2C, 0x00, 0x40, 0x4D, 0x0D, 0x18, 0x28, 0x8F, 
+	0xA4, 0x2B, 0x00, 0x80, 0x84, 0x68, 0x0A, 0xD1, 0xB1, 0x49, 0x0B, 0x4B, 0x09, 0x4B, 0x0B, 0x60, 
+	0x1A, 0x4B, 0x0B, 0x78, 0x1A, 0x4A, 0x0B, 0x70, 0x1A, 0xCA, 0x31, 0x1C, 0x0B, 0xCA, 0xC0, 0xC3, 
+	0x31, 0xBD, 0xF7, 0xC3, 0xC0, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 
+	0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x01, 0x64, 0x20, 0x00, 0x00, 0xCC, 0x20, 0x00, 0x00, 
+	0xF5, 0x20, 0x00, 0x00, 0xF4, 0x20, 0x00, 0x00, 0xE0, 0x48, 0x19, 0xB5, 0xF7, 0x42, 0x5B, 0x23, 
+	0x01, 0x4B, 0x18, 0x60, 0x43, 0x4B, 0x18, 0x78, 0x1A, 0x33, 0x2B, 0x1C, 0x19, 0x31, 0x2A, 0x78, 
+	0x1E, 0x23, 0x00, 0x78, 0x0F, 0xE0, 0x1E, 0x46, 0xB4, 0xB2, 0xD2, 0x3A, 0x01, 0x00, 0x51, 0x4C, 
+	0x13, 0xB2, 0x0E, 0x5A, 0x61, 0x17, 0xF6, 0x43, 0xF6, 0x1D, 0x11, 0x40, 0x0E, 0xB2, 0xB5, 0x00, 
+	0x49, 0x2D, 0x00, 0x52, 0x0E, 0x4E, 0x0E, 0xD0, 0x0F, 0x5F, 0x8E, 0xB2, 0x2D, 0xDC, 0x04, 0x2E, 
+	0x00, 0xDA, 0x07, 0x42, 0xBD, 0x52, 0x0D, 0x25, 0x00, 0x45, 0x65, 0xE0, 0x05, 0x26, 0x00, 0xDA, 
+	0x02, 0xE0, 0x00, 0x52, 0x0E, 0x2A, 0x00, 0x33, 0x01, 0x4A, 0x01, 0xD1, 0xDE, 0xBD, 0xF7, 0x60, 
+	0x13, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x0D, 
+	0x3C, 0x20, 0x00, 0x00, 0xCC, 0x80, 0x08, 0xF3, 0xEF, 0xBA, 0x00, 0x47, 0x70, 0xBA, 0x40, 0x47, 
+	0x70, 0xBA, 0xC0, 0x47, 0x70, 0xB5, 0x70, 0x47, 0x70, 0xDA, 0x16, 0x28, 0x00, 0x23, 0x0F, 0xB2, 
+	0xC0, 0x3B, 0x08, 0x40, 0x03, 0x08, 0x9B, 0x4A, 0x12, 0x18, 0x9B, 0x00, 0x9B, 0x40, 0x10, 0x22, 
+	0x03, 0x22, 0xFF, 0x40, 0x90, 0x1C, 0x14, 0x68, 0x5D, 0x01, 0x89, 0x40, 0x84, 0x40, 0x0A, 0x43, 
+	0xA5, 0x1C, 0x28, 0x40, 0x82, 0x60, 0x58, 0x43, 0x10, 0x24, 0x03, 0xE0, 0x11, 0x4B, 0x09, 0x08, 
+	0x82, 0x32, 0xC0, 0x40, 0x20, 0x00, 0x92, 0x40, 0xA0, 0x58, 0xD5, 0x24, 0xFF, 0x40, 0x86, 0x1C, 
+	0x26, 0x43, 0xB5, 0x01, 0x89, 0x40, 0x84, 0x40, 0x0C, 0x43, 0x20, 0x1C, 0x28, 0xBD, 0x70, 0x50, 
+	0xD0, 0xE0, 0x00, 0xED, 0x18, 0xE0, 0x00, 0xE1, 0x00, 0x22, 0x40, 0x4B, 0x08, 0x20, 0x7F, 0x68, 
+	0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 
+	0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 
+	0x08, 0x22, 0x3F, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 
+	0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 
+	0x70, 0x20, 0x00, 0x00, 0x08, 0x4A, 0x08, 0x4B, 0x07, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x89, 0x04, 
+	0x89, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 
+	0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x40, 0x4B, 
+	0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 
+	0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 
+	0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x20, 0x4B, 0x08, 0x20, 0x7F, 0x68, 
+	0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 
+	0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 
+	0x08, 0x22, 0x5F, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 
+	0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 
+	0x70, 0x20, 0x00, 0x00, 0x08, 0x21, 0xBE, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 
+	0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 
+	0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x20, 0x4B, 
+	0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 
+	0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 
+	0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x00, 0x80, 0x6C, 
+	0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x10, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 
+	0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 
+	0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x6F, 0x4B, 
+	0x07, 0x20, 0x7F, 0x68, 0x19, 0x59, 0xAA, 0xAE, 0xF1, 0x0C, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 
+	0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4B, 0x0B, 0xB5, 0x00, 0x28, 0x00, 0x68, 0x19, 0x06, 0x49, 
+	0xD0, 0x04, 0x22, 0x10, 0x0E, 0x49, 0xE0, 0x01, 0x43, 0x11, 0x40, 0x11, 0x22, 0x6F, 0x20, 0x7F, 
+	0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x08, 0x21, 0xDE, 0x4B, 0x07, 0x01, 0xC9, 
+	0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 
+	0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 
+	0x80, 0xFF, 0x22, 0x10, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 
+	0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 
+	0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 
+	0x23, 0x80, 0x00, 0xC0, 0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x01, 0x4B, 0x08, 0x20, 0x7F, 
+	0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x00, 0x08, 0x22, 0x7E, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 
+	0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x21, 0xFC, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 
+	0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 
+	0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x01, 
+	0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 
+	0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0xC0, 
+	0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x02, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 
+	0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 
+	0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x7D, 
+	0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x00, 0x08, 0x21, 0xFA, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 
+	0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x02, 0x4B, 0x08, 0x68, 0x18, 
+	0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0x80, 0x6C, 0x18, 0x47, 0x70, 
+	0x0F, 0xC0, 0x22, 0x04, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 
+	0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x7B, 0x4B, 0x07, 0x20, 0x7F, 
+	0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 
+	0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4B, 0x0B, 
+	0xB5, 0x00, 0x28, 0x00, 0x68, 0x19, 0x06, 0x49, 0xD0, 0x04, 0x22, 0x04, 0x0E, 0x49, 0xE0, 0x01, 
+	0x43, 0x11, 0x40, 0x11, 0x22, 0x7B, 0x20, 0x7F, 0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 
+	0x00, 0x08, 0x21, 0xF6, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 
+	0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x04, 0x4B, 0x08, 0x68, 0x18, 
+	0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0x40, 0x6C, 0x18, 0x47, 0x70, 
+	0x0F, 0xC0, 0x23, 0x80, 0xB5, 0x10, 0x1D, 0x04, 0x05, 0xDB, 0x22, 0x3F, 0x69, 0x98, 0x43, 0x90, 
+	0x40, 0x14, 0x24, 0x01, 0x43, 0x20, 0x1C, 0x88, 0x61, 0x98, 0x18, 0x41, 0x40, 0x21, 0x02, 0x11, 
+	0x40, 0x0A, 0x4A, 0x02, 0x69, 0x98, 0x43, 0x0A, 0x40, 0x02, 0xBD, 0x10, 0x61, 0x9A, 0xFF, 0xFF, 
+	0xC0, 0xFF, 0x22, 0x7F, 0x4B, 0x06, 0x23, 0x80, 0x68, 0x19, 0x6C, 0x18, 0x05, 0xDB, 0x43, 0x90, 
+	0x39, 0x01, 0x1C, 0x02, 0x40, 0x11, 0x64, 0x1A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x09, 0x18, 0x05, 0xDB, 0x23, 0x80, 0x21, 0x7F, 0x6C, 0x1A, 0x21, 0x01, 0x43, 0x8A, 0x64, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x47, 0x70, 0x69, 0xDA, 0x05, 0xDB, 0x43, 0x8A, 0x21, 0x0F, 0x43, 0x0A, 
+	0x21, 0x02, 0x69, 0xDA, 0x61, 0xDA, 0x43, 0x8A, 0x21, 0xF0, 0x43, 0x0A, 0x21, 0x30, 0x4A, 0x0C, 
+	0x61, 0xDA, 0x39, 0x01, 0x79, 0x11, 0x77, 0x59, 0xB2, 0xC9, 0x49, 0x0A, 0x69, 0xD8, 0x20, 0x80, 
+	0x40, 0x01, 0x43, 0x01, 0x02, 0xC0, 0x69, 0xD8, 0x61, 0xD9, 0x40, 0x01, 0x49, 0x07, 0x03, 0xC0, 
+	0x20, 0xA0, 0x61, 0xD9, 0x43, 0x01, 0x3A, 0x01, 0x79, 0x92, 0x77, 0xDA, 0xB2, 0xD2, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x02, 0x04, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0x4A, 0x1A, 
+	0xB5, 0x30, 0x88, 0x11, 0x4B, 0x1A, 0x18, 0xC9, 0x4C, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x8C, 0x18, 
+	0xB2, 0x89, 0x8C, 0x59, 0x84, 0x19, 0x84, 0x59, 0x21, 0x00, 0x4D, 0x16, 0x88, 0x50, 0xB2, 0x89, 
+	0x19, 0x01, 0x84, 0x99, 0x8C, 0x9A, 0x8C, 0xDC, 0x1E, 0x42, 0x19, 0x44, 0xB2, 0x92, 0xB2, 0xA4, 
+	0x84, 0xDA, 0x85, 0x1C, 0x8D, 0x1D, 0x19, 0x00, 0x4C, 0x10, 0x8D, 0x5C, 0xB2, 0x80, 0x8D, 0x98, 
+	0x85, 0x58, 0x8D, 0xD8, 0x85, 0x99, 0x8E, 0x18, 0x85, 0xDA, 0x8E, 0x58, 0x86, 0x19, 0x8E, 0x98, 
+	0x86, 0x5A, 0x8E, 0xD8, 0x86, 0x99, 0x8F, 0x18, 0x86, 0xDA, 0xC0, 0x55, 0xAE, 0xF1, 0x0D, 0x8F, 
+	0x58, 0x87, 0x19, 0x8F, 0x98, 0x87, 0x5A, 0x8F, 0xD9, 0x87, 0x99, 0xBD, 0x30, 0x87, 0xDA, 0x20, 
+	0x00, 0x02, 0x04, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x05, 0xFF, 0x00, 
+	0x00, 0x01, 0xFF, 0x4B, 0x22, 0xB5, 0x30, 0x68, 0x1A, 0x24, 0xEE, 0x40, 0x14, 0x01, 0xE4, 0x68, 
+	0x1A, 0x48, 0x20, 0x40, 0x02, 0x21, 0x7F, 0x60, 0x1A, 0x43, 0x22, 0x22, 0x80, 0x68, 0x1C, 0x69, 
+	0x15, 0x05, 0xD2, 0x4C, 0x1C, 0x61, 0x14, 0x2C, 0x00, 0x7C, 0xA4, 0x68, 0x1C, 0xD0, 0x16, 0x04, 
+	0x64, 0x25, 0x04, 0x43, 0x2C, 0x0E, 0x64, 0x40, 0x0C, 0x68, 0x1D, 0x40, 0x28, 0x02, 0x24, 0x60, 
+	0x18, 0x43, 0x20, 0x69, 0x14, 0x68, 0x18, 0x68, 0x1C, 0x61, 0x10, 0x40, 0x20, 0x20, 0x7B, 0x43, 
+	0x8C, 0x68, 0x1C, 0x43, 0x01, 0x1C, 0x21, 0xE0, 0x15, 0x60, 0x19, 0x25, 0x04, 0x68, 0x1C, 0x0E, 
+	0x64, 0x06, 0x64, 0x68, 0x1D, 0x43, 0x2C, 0x43, 0x8D, 0x40, 0x0C, 0x43, 0x21, 0x1C, 0x29, 0x68, 
+	0x19, 0x60, 0x19, 0x61, 0x11, 0x69, 0x14, 0x21, 0xF6, 0x68, 0x1C, 0x40, 0x21, 0x01, 0xC9, 0x40, 
+	0x20, 0x68, 0x1C, 0x60, 0x18, 0x43, 0x08, 0x69, 0x11, 0x68, 0x1B, 0xBD, 0x30, 0x61, 0x13, 0x20, 
+	0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0xB6, 0x72, 0xB5, 0x00, 0x22, 
+	0x01, 0x4B, 0x0F, 0x4B, 0x0F, 0x70, 0x1A, 0x4B, 0x0F, 0x7C, 0x9A, 0xD0, 0x07, 0x2A, 0x00, 0x21, 
+	0xF6, 0x68, 0x1A, 0x40, 0x11, 0x01, 0xC9, 0x4A, 0x0C, 0x68, 0x18, 0xE0, 0x05, 0x40, 0x02, 0x22, 
+	0x7B, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x82, 0x20, 0x7F, 0x60, 0x1A, 0x43, 0x0A, 0x23, 
+	0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0xB6, 0x62, 0x61, 0x1A, 0x46, 0xC0, 0xBD, 0x00, 0x20, 
+	0x00, 0x00, 0x64, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0xB6, 
+	0x72, 0xB5, 0x00, 0x22, 0x00, 0x4B, 0x10, 0x4B, 0x10, 0x70, 0x1A, 0x4B, 0x10, 0x7C, 0x9A, 0x2A, 
+	0x00, 0x68, 0x19, 0x04, 0x49, 0xD0, 0x08, 0x0E, 0x49, 0x22, 0x04, 0x68, 0x18, 0x43, 0x11, 0x02, 
+	0x09, 0x4A, 0x0C, 0xE0, 0x06, 0x40, 0x02, 0x22, 0x04, 0x06, 0x49, 0x43, 0x11, 0x0E, 0x49, 0x20, 
+	0x7F, 0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 
+	0x1A, 0x69, 0x19, 0xBD, 0x00, 0xB6, 0x62, 0x20, 0x00, 0x00, 0x64, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x78, 0x18, 0x4B, 0x01, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x64, 0x23, 0x80, 0xB5, 0x00, 0x6C, 0x19, 0x05, 0xDB, 0x01, 0xD2, 0x22, 0x80, 0x64, 
+	0x1A, 0x43, 0x0A, 0x21, 0x80, 0x4A, 0x23, 0x00, 0x49, 0x68, 0x10, 0x60, 0x11, 0x43, 0x01, 0x68, 
+	0x99, 0x68, 0x12, 0x6C, 0x19, 0x60, 0x9A, 0x02, 0x12, 0x22, 0x80, 0x64, 0x1A, 0x43, 0x0A, 0x4A, 
+	0x1D, 0x6C, 0x19, 0x64, 0x1A, 0x40, 0x0A, 0x22, 0x7F, 0x4B, 0x1C, 0x4B, 0x1C, 0x7B, 0x59, 0x68, 
+	0x18, 0x40, 0x11, 0x04, 0x09, 0x4A, 0x1B, 0x43, 0x0A, 0x40, 0x02, 0x68, 0x19, 0x60, 0x1A, 0x05, 
+	0xD2, 0x22, 0xA0, 0x60, 0x91, 0x68, 0x90, 0x49, 0x17, 0x68, 0x18, 0x20, 0x84, 0x40, 0x01, 0x43, 
+	0x01, 0x05, 0xC0, 0x68, 0x19, 0x60, 0x19, 0x60, 0x91, 0x68, 0x90, 0x78, 0x09, 0x49, 0x13, 0x29, 
+	0x00, 0xB2, 0x49, 0x29, 0x01, 0xD0, 0x02, 0xE0, 0x03, 0xD1, 0x0C, 0x49, 0x10, 0x68, 0x18, 0xE0, 
+	0x03, 0x40, 0x01, 0x21, 0x80, 0x68, 0x18, 0x43, 0x01, 0x04, 0x09, 0x68, 0x1B, 0x60, 0x19, 0x60, 
+	0x93, 0x68, 0x91, 0x05, 0xDB, 0x23, 0x80, 0x4A, 0x0A, 0x6C, 0x19, 0x64, 0x1A, 0x40, 0x0A, 0x46, 
+	0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x14, 0xFF, 0xFF, 0x7F, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x00, 0x0C, 0xFF, 0x80, 0xFF, 0xFF, 0x80, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x02, 0xFA, 0xFF, 
+	0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0x22, 0x01, 0x4B, 0x04, 0x23, 0x80, 0x70, 0x1A, 0x6C, 
+	0x99, 0x05, 0xDB, 0x64, 0x99, 0x43, 0x91, 0x47, 0x70, 0x70, 0x1A, 0x20, 0x00, 0x00, 0x00, 0x23, 
+	0x01, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x13, 0x70, 0x53, 0x05, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x02, 0x4B, 0x06, 0xB5, 0x00, 0x78, 0x1A, 0xB6, 0x72, 0xD0, 0x04, 0x2A, 0x00, 0x46, 
+	0xC0, 0x46, 0xC0, 0xBF, 0x30, 0xB6, 0x62, 0xB6, 0x62, 0xE7, 0xF6, 0x46, 0xC0, 0xBD, 0x00, 0x20, 
+	0x00, 0x00, 0x02, 0x4B, 0x09, 0xB5, 0x38, 0x78, 0x9A, 0x49, 0x09, 0x43, 0x51, 0x79, 0x1C, 0x1C, 
+	0x05, 0x4B, 0x08, 0x48, 0x08, 0x18, 0xC9, 0xF8, 0x7A, 0xF0, 0x02, 0x1C, 0x29, 0x4B, 0x06, 0x43, 
+	0x58, 0x34, 0x01, 0xF0, 0x02, 0x40, 0xA1, 0xBD, 0x38, 0xF8, 0x73, 0x20, 0x00, 0x0A, 0xAA, 0xFF, 
+	0xFF, 0xFE, 0x44, 0x00, 0x02, 0x24, 0xFE, 0x00, 0x0F, 0x42, 0x40, 0x68, 0x19, 0x4B, 0x05, 0x05, 
+	0xDB, 0x23, 0x80, 0x02, 0x09, 0x69, 0x5A, 0x0A, 0x09, 0x0E, 0x12, 0x43, 0x0A, 0x06, 0x12, 0x47, 
+	0x70, 0x61, 0x5A, 0x20, 0x00, 0x00, 0x04, 0x60, 0x18, 0x4B, 0x01, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x04, 0x22, 0x01, 0x4B, 0x05, 0x23, 0x80, 0x70, 0x1A, 0x69, 0x59, 0x05, 0xDB, 0x04, 
+	0x52, 0x22, 0x80, 0x61, 0x5A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x01, 0x4B, 
+	0x05, 0xB5, 0x00, 0x78, 0x1A, 0xB6, 0x72, 0xD0, 0x03, 0x2A, 0x00, 0x46, 0xC0, 0x46, 0xC0, 0xE7, 
+	0xF7, 0xB6, 0x62, 0xBD, 0x00, 0xB6, 0x62, 0x20, 0x00, 0x00, 0x00, 0x4B, 0x10, 0xB5, 0x00, 0x05, 
+	0x9A, 0x68, 0x1B, 0x4A, 0x0F, 0xD5, 0x0C, 0xB6, 0x72, 0x4B, 0x0F, 0x29, 0x00, 0x78, 0x11, 0x78, 
+	0x19, 0xD1, 0x02, 0xD0, 0x11, 0x29, 0x00, 0x46, 0xC0, 0x46, 0xC0, 0xE7, 0xF4, 0xB6, 0x62, 0x4B, 
+	0x09, 0x4A, 0x08, 0x78, 0x11, 0xB6, 0x72, 0xD1, 0x02, 0x29, 0x00, 0x29, 0x00, 0x78, 0x19, 0x46, 
+	0xC0, 0xD0, 0x04, 0xB6, 0x62, 0x46, 0xC0, 0xE7, 0xF3, 0xBF, 0x30, 0xBD, 0x00, 0xB6, 0x62, 0x20, 
+	0x00, 0x00, 0x58, 0x20, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x49, 0x13, 0xB5, 0x70, 0x24, 
+	0x04, 0x4B, 0x13, 0x4B, 0x13, 0x60, 0x19, 0x68, 0x1A, 0x4D, 0x13, 0x60, 0x1A, 0x43, 0x22, 0x24, 
+	0x02, 0x68, 0x1A, 0x60, 0x1A, 0x43, 0xA2, 0x24, 0x01, 0x68, 0x1A, 0x4C, 0x0F, 0x43, 0x22, 0x22, 
+	0x00, 0x60, 0x1A, 0x4A, 0x0E, 0x60, 0x22, 0x78, 0x2E, 0x60, 0x11, 0x43, 0x70, 0x79, 0x2D, 0x40, 
+	0xE8, 0x35, 0x01, 0x60, 0x11, 0x1A, 0x09, 0x68, 0x11, 0x68, 0x20, 0xD2, 0xFB, 0x42, 0x88, 0x21, 
+	0x01, 0x68, 0x1A, 0x60, 0x1A, 0x43, 0x8A, 0x46, 0xC0, 0xBD, 0x70, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 
+	0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 0x10, 0x20, 0x00, 0x0A, 0xAA, 0xE0, 0x00, 0xE0, 0x18, 0x20, 
+	0x00, 0x01, 0xFC, 0x23, 0x00, 0xB5, 0x00, 0x42, 0x98, 0x4A, 0x06, 0x1C, 0xD3, 0xDB, 0x02, 0x43, 
+	0x43, 0x7F, 0xDB, 0x7F, 0xD2, 0x32, 0x02, 0xB2, 0x52, 0x30, 0x01, 0x18, 0x18, 0x40, 0x90, 0xBD, 
+	0x00, 0x18, 0x40, 0x20, 0x00, 0x09, 0xAE, 0xB0, 0x85, 0xB5, 0xF0, 0x1C, 0x0C, 0x1C, 0x05, 0xFA, 
+	0x1B, 0xAE, 0xF1, 0x0E, 0x29, 0x00, 0x1C, 0x16, 0x4B, 0x2B, 0xD0, 0x05, 0x7F, 0xDB, 0x33, 0x02, 
+	0x2B, 0x00, 0xB2, 0x5B, 0x1C, 0x21, 0xD0, 0x4E, 0xF7, 0xFF, 0x1C, 0x28, 0x49, 0x27, 0xFF, 0xDD, 
+	0x7A, 0x4A, 0x4F, 0x27, 0x19, 0x13, 0x7A, 0x09, 0x91, 0x02, 0x18, 0x51, 0x19, 0xCF, 0x01, 0x41, 
+	0x97, 0x03, 0x22, 0x00, 0xE0, 0x13, 0x46, 0x84, 0x56, 0xC1, 0x48, 0x22, 0xB2, 0xC0, 0x1C, 0x58, 
+	0x90, 0x01, 0x0F, 0xCF, 0x98, 0x03, 0x18, 0x7F, 0x19, 0xC7, 0x10, 0x7F, 0x97, 0x00, 0x37, 0x08, 
+	0x79, 0x38, 0x46, 0x6F, 0x33, 0x02, 0x9F, 0x00, 0x27, 0x01, 0x70, 0xB8, 0x43, 0x3A, 0x40, 0x8F, 
+	0x42, 0x83, 0x98, 0x02, 0x4B, 0x15, 0xDB, 0xE8, 0x79, 0xDF, 0x46, 0x60, 0x41, 0x61, 0x42, 0x61, 
+	0x18, 0x79, 0x7C, 0x5B, 0x10, 0x49, 0x19, 0x1C, 0x34, 0x01, 0x39, 0x01, 0x05, 0x24, 0x06, 0x89, 
+	0x43, 0x22, 0x43, 0x0C, 0x4C, 0x10, 0x49, 0x0E, 0x18, 0x43, 0x01, 0x40, 0x19, 0x01, 0x4F, 0x0F, 
+	0x60, 0x4A, 0x68, 0x4C, 0xB2, 0xD2, 0x1C, 0xAA, 0x71, 0x02, 0x19, 0xC0, 0xD0, 0x07, 0x2E, 0x00, 
+	0x21, 0x01, 0x4A, 0x0B, 0x40, 0x91, 0x57, 0x52, 0x69, 0x99, 0x1C, 0x0A, 0xE0, 0x01, 0x61, 0x9A, 
+	0x61, 0x9E, 0x69, 0x9A, 0xBD, 0xF0, 0xB0, 0x05, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x0A, 
+	0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x75, 0x10, 0x40, 0x00, 0x10, 0x18, 0x40, 0x00, 0x10, 0x10, 
+	0x00, 0x00, 0x74, 0xEA, 0x4B, 0x08, 0xB5, 0x10, 0x68, 0x1B, 0x21, 0x00, 0xE0, 0x08, 0x3B, 0x01, 
+	0x01, 0x58, 0x4C, 0x06, 0x19, 0x00, 0x22, 0x09, 0x72, 0xA1, 0x18, 0x84, 0xD2, 0xFB, 0x3A, 0x01, 
+	0x2B, 0x00, 0x3B, 0x01, 0xBD, 0x10, 0xDA, 0xF4, 0x20, 0x00, 0x09, 0x18, 0x40, 0x00, 0x10, 0x00, 
+	0xF7, 0xFF, 0xB5, 0x38, 0x21, 0x00, 0xFF, 0xE7, 0x1C, 0x0A, 0x20, 0x01, 0xF7, 0xFF, 0x42, 0x40, 
+	0x20, 0x01, 0xFF, 0x75, 0x21, 0x01, 0x42, 0x40, 0xF7, 0xFF, 0x22, 0x00, 0x4D, 0x0A, 0xFF, 0x6F, 
+	0xE0, 0x0B, 0x7B, 0xAC, 0x21, 0x00, 0x1C, 0x20, 0xF7, 0xFF, 0x22, 0x01, 0x21, 0x01, 0xFF, 0x67, 
+	0x1C, 0x0A, 0x1C, 0x20, 0xFF, 0x62, 0xF7, 0xFF, 0xB2, 0xE4, 0x34, 0x01, 0x79, 0x2B, 0x7B, 0xAA, 
+	0x42, 0x9C, 0x18, 0xD3, 0xBD, 0x38, 0xDB, 0xEE, 0x20, 0x00, 0x03, 0x0A, 0xB0, 0x85, 0xB5, 0xF0, 
+	0x1C, 0x0E, 0x1C, 0x05, 0x1C, 0x1F, 0x92, 0x02, 0xD0, 0x05, 0x29, 0x00, 0x33, 0x02, 0x4B, 0x21, 
+	0xB2, 0x5B, 0x7F, 0xDB, 0xD0, 0x3B, 0x2B, 0x00, 0x1C, 0x28, 0x1C, 0x31, 0xFF, 0x34, 0xF7, 0xFF, 
+	0xB2, 0xC0, 0x4A, 0x1D, 0x7A, 0x53, 0x90, 0x01, 0x18, 0xF6, 0x7A, 0x12, 0x4B, 0x1B, 0x18, 0x9A, 
+	0x7C, 0x1B, 0x1E, 0xB9, 0x41, 0x81, 0x1E, 0x48, 0xB2, 0xF6, 0x42, 0x49, 0x46, 0x9C, 0x91, 0x03, 
+	0x2F, 0x00, 0xE0, 0x24, 0x21, 0x26, 0xD1, 0x07, 0x4B, 0x15, 0x43, 0x71, 0x5C, 0xCC, 0x19, 0x49, 
+	0xB2, 0xE4, 0x44, 0x64, 0x2F, 0x01, 0xE0, 0x08, 0x01, 0x73, 0xD1, 0x04, 0x19, 0x5B, 0x49, 0x11, 
+	0xE0, 0x01, 0x5C, 0x5C, 0x40, 0x1C, 0x9B, 0x03, 0x99, 0x02, 0x4B, 0x0F, 0x36, 0x02, 0x57, 0x9B, 
+	0x18, 0xC0, 0x0F, 0xD8, 0xB2, 0xDB, 0x18, 0x63, 0x9B, 0x01, 0x93, 0x00, 0x01, 0x59, 0x10, 0x40, 
+	0x18, 0x08, 0x46, 0x6B, 0x49, 0x09, 0x78, 0x1B, 0x54, 0x43, 0xB2, 0xF6, 0xDB, 0xD8, 0x42, 0x96, 
+	0xBD, 0xF0, 0xB0, 0x05, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x0D, 0x48, 
+	0x00, 0x00, 0x75, 0x36, 0x20, 0x00, 0x0A, 0xB3, 0x00, 0x00, 0x75, 0x10, 0x40, 0x00, 0x10, 0x00, 
+	0x4B, 0x2A, 0xB5, 0x70, 0x68, 0x19, 0x4A, 0x2A, 0x40, 0x0A, 0x24, 0x80, 0x68, 0x1A, 0x60, 0x1A, 
+	0x4D, 0x28, 0x05, 0xE4, 0x60, 0xA2, 0x68, 0xA1, 0x22, 0x03, 0x7A, 0x69, 0x40, 0x11, 0x68, 0x18, 
+	0x04, 0x89, 0x4A, 0x25, 0x43, 0x0A, 0x40, 0x02, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 
+	0x22, 0x80, 0x68, 0x19, 0x43, 0x0A, 0x03, 0x52, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 
+	0x68, 0x18, 0x7A, 0x29, 0x4A, 0x1D, 0x26, 0x07, 0x05, 0x49, 0x40, 0x31, 0x43, 0x0A, 0x40, 0x02, 
+	0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 0x29, 0x0F, 0x7B, 0xA9, 0x7B, 0xEA, 0xD8, 0x25, 
+	0xD8, 0x22, 0x2A, 0x0F, 0x07, 0x09, 0x68, 0x18, 0x09, 0x00, 0x01, 0x00, 0x60, 0x19, 0x43, 0x01, 
+	0x40, 0x0A, 0x21, 0x0F, 0x06, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x11, 0x60, 0x1A, 0x43, 0x0A, 
+	0x68, 0xA2, 0x68, 0x1B, 0xF7, 0xFF, 0x60, 0xA3, 0x4A, 0x0E, 0xFC, 0x49, 0x43, 0x13, 0x6C, 0x63, 
+	0xF7, 0xFF, 0x64, 0x63, 0xF7, 0xFF, 0xFC, 0x5C, 0x79, 0xEB, 0xFC, 0x87, 0x40, 0x1E, 0x4A, 0x0A, 
+	0x6C, 0x26, 0x02, 0x33, 0x43, 0x1E, 0x40, 0x16, 0xBD, 0x70, 0x64, 0x26, 0x20, 0x00, 0x00, 0x14, 
+	0xFF, 0xFC, 0xFF, 0xFF, 0x20, 0x00, 0x0D, 0x48, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x1F, 0xFF, 0xFF, 
+	0xF0, 0xFF, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0x21, 0x80, 0xB5, 0x00, 
+	0x79, 0x0B, 0x05, 0xC9, 0xB2, 0xD2, 0x1E, 0x5A, 0xDD, 0x09, 0x42, 0x98, 0x71, 0x0B, 0xE0, 0x00, 
+	0xB2, 0xDB, 0x33, 0x01, 0xDD, 0xFA, 0x42, 0x83, 0x71, 0x0A, 0xE0, 0x04, 0xB2, 0xD2, 0x3A, 0x01, 
+	0xDA, 0xFA, 0x42, 0x82, 0xB5, 0x38, 0xBD, 0x00, 0x78, 0xA0, 0x4C, 0x17, 0xFF, 0xE6, 0xF7, 0xFF, 
+	0x05, 0xDB, 0x23, 0x80, 0x68, 0x5A, 0x79, 0x21, 0x00, 0x52, 0x07, 0xC9, 0x43, 0x0A, 0x08, 0x52, 
+	0x79, 0x60, 0x60, 0x5A, 0x68, 0x5D, 0x22, 0x03, 0x40, 0x10, 0x49, 0x10, 0x40, 0x29, 0x03, 0x80, 
+	0x60, 0x59, 0x43, 0x01, 0x49, 0x0E, 0x79, 0xA0, 0x40, 0x10, 0x68, 0x5D, 0x40, 0x29, 0x03, 0x00, 
+	0x60, 0x59, 0x43, 0x01, 0x49, 0x0B, 0x79, 0xE0, 0x40, 0x10, 0x68, 0x5D, 0x02, 0x80, 0x40, 0x29, 
+	0x60, 0x59, 0x43, 0x01, 0x68, 0x58, 0x7A, 0x21, 0x02, 0x11, 0x40, 0x0A, 0x40, 0x02, 0x4A, 0x06, 
+	0x60, 0x5A, 0x43, 0x0A, 0x46, 0xC0, 0xBD, 0x38, 0x20, 0x00, 0x0A, 0xAA, 0xFF, 0xFF, 0x3F, 0xFF, 
+	0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0x23, 0x80, 0xB5, 0xF8, 
+	0x68, 0x1A, 0x05, 0xDB, 0x21, 0x00, 0x4A, 0x7A, 0x60, 0x19, 0x20, 0x08, 0x68, 0x14, 0x60, 0x10, 
+	0x60, 0x9C, 0x68, 0x9D, 0x60, 0x21, 0x4C, 0x77, 0x68, 0xDD, 0x68, 0x24, 0x25, 0xFE, 0x60, 0xDC, 
+	0x01, 0xED, 0x4C, 0x75, 0x68, 0x24, 0x60, 0x25, 0x61, 0x1C, 0x69, 0x1D, 0x61, 0x59, 0x69, 0x5C, 
+	0x61, 0x99, 0x69, 0x9C, 0x61, 0xD9, 0x69, 0xDC, 0x24, 0x80, 0x6C, 0x1C, 0x64, 0x1C, 0x01, 0xE4, 
+	0x64, 0x59, 0x6C, 0x5C, 0x4C, 0x6D, 0x6C, 0x9C, 0x60, 0x21, 0x64, 0x99, 0x05, 0xE4, 0x24, 0xA0, 
+	0x60, 0xA1, 0x68, 0xA5, 0x49, 0x6A, 0x6C, 0x1C, 0x64, 0x19, 0x40, 0x21, 0x21, 0x80, 0x68, 0x1C, 
+	0x43, 0x21, 0x05, 0x49, 0x49, 0x67, 0x60, 0x19, 0x7F, 0xC9, 0x31, 0x01, 0xD0, 0x03, 0x29, 0x00, 
+	0x43, 0x08, 0x68, 0x11, 0xE0, 0x02, 0x60, 0x10, 0x43, 0x81, 0x68, 0x11, 0x68, 0x11, 0x60, 0x11, 
+	0x60, 0x99, 0x68, 0x98, 0x26, 0x04, 0x68, 0x13, 0x60, 0x13, 0x43, 0x33, 0x25, 0x80, 0x68, 0x13, 
+	0x68, 0xA9, 0x05, 0xED, 0x98, 0x2B, 0xAE, 0xF1, 0x0F, 0x68, 0x13, 0x60, 0xAB, 0x43, 0x3B, 0x27, 
+	0x02, 0x68, 0x13, 0x60, 0x13, 0x60, 0xAB, 0x68, 0xA9, 0x20, 0x01, 0x68, 0x13, 0x60, 0x13, 0x43, 
+	0x83, 0x68, 0xAA, 0x68, 0x13, 0xF7, 0xFF, 0x60, 0xAB, 0x4B, 0x54, 0xFE, 0xED, 0x56, 0x9A, 0x22, 
+	0x1C, 0x4B, 0x53, 0x69, 0xA9, 0x40, 0xF2, 0x05, 0x12, 0x43, 0x13, 0x40, 0x0B, 0xF7, 0xFF, 0x61, 
+	0xAB, 0x4A, 0x50, 0xFE, 0x61, 0x21, 0x01, 0x4B, 0x50, 0x4B, 0x50, 0x60, 0x1A, 0x68, 0x1A, 0x24, 
+	0x08, 0x43, 0x32, 0x20, 0x10, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0x1A, 0x43, 0xBA, 0x22, 0xC0, 0x4B, 
+	0x4C, 0x50, 0x99, 0x00, 0x52, 0x50, 0x9F, 0x21, 0x20, 0x50, 0x9C, 0x50, 0x9E, 0x50, 0x99, 0x50, 
+	0x98, 0x50, 0x99, 0x21, 0x40, 0x40, 0xBA, 0x22, 0xC0, 0x24, 0xFF, 0x58, 0x98, 0x24, 0xC0, 0x43, 
+	0xA0, 0x50, 0x98, 0x43, 0x20, 0x48, 0x43, 0x58, 0x9C, 0x50, 0x9C, 0x40, 0x04, 0x48, 0x42, 0x58, 
+	0x9C, 0x24, 0x80, 0x40, 0x20, 0x43, 0x04, 0x04, 0x24, 0x58, 0x9C, 0x50, 0x9C, 0x0A, 0x24, 0x02, 
+	0x24, 0x50, 0x9C, 0x43, 0x2C, 0x40, 0xBA, 0x22, 0xC1, 0x1C, 0x04, 0x58, 0x98, 0x43, 0x84, 0x20, 
+	0xFF, 0x50, 0x9C, 0x43, 0x0C, 0x48, 0x37, 0x58, 0x9C, 0x24, 0x80, 0x40, 0x20, 0x43, 0x20, 0x02, 
+	0x24, 0x58, 0x98, 0x50, 0x98, 0x40, 0x20, 0x4C, 0x34, 0x4A, 0x34, 0x50, 0x98, 0x43, 0x30, 0x69, 
+	0x10, 0xB6, 0x62, 0x61, 0x10, 0x20, 0x01, 0x22, 0x08, 0x60, 0x18, 0x60, 0x1E, 0x60, 0x1A, 0x60, 
+	0x1F, 0x20, 0x20, 0x4B, 0x2F, 0x67, 0xDC, 0x24, 0x10, 0x67, 0xD9, 0x67, 0xD8, 0xFC, 0x46, 0xF7, 
+	0xFF, 0x7D, 0xE0, 0x4C, 0x21, 0xF7, 0xFF, 0x7E, 0x21, 0x7C, 0xE3, 0xFA, 0xFB, 0xD0, 0x26, 0x2B, 
+	0x00, 0x21, 0x01, 0x4B, 0x1A, 0x4A, 0x27, 0x68, 0x18, 0x0E, 0x40, 0x00, 0x40, 0x68, 0x19, 0x43, 
+	0x08, 0x40, 0x11, 0x06, 0x00, 0x60, 0x19, 0x43, 0x01, 0x69, 0x28, 0x68, 0x19, 0x68, 0x19, 0x61, 
+	0x29, 0x0E, 0x49, 0x00, 0x49, 0x06, 0x39, 0x43, 0x0F, 0x40, 0x17, 0x68, 0x1F, 0x60, 0x1F, 0x43, 
+	0x0F, 0x69, 0x28, 0x68, 0x19, 0x68, 0x19, 0x61, 0x29, 0x0E, 0x49, 0x00, 0x49, 0x68, 0x19, 0x43, 
+	0x0E, 0x40, 0x0A, 0x06, 0x36, 0x60, 0x1A, 0x43, 0x32, 0x69, 0x2A, 0x68, 0x1B, 0xF7, 0xFF, 0x61, 
+	0x2B, 0xF7, 0xFF, 0xFE, 0xD4, 0xF7, 0xFF, 0xF8, 0xC1, 0xF7, 0xFF, 0xF9, 0x0F, 0xF7, 0xFF, 0xF9, 
+	0x7D, 0xBD, 0xF8, 0xFB, 0x65, 0x20, 0x00, 0x00, 0x14, 0x20, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 
+	0x08, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0x7F, 0xFF, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 
+	0x48, 0xF0, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 
+	0x10, 0xE0, 0x00, 0xE1, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xE0, 0x00, 0xED, 
+	0x00, 0xE0, 0x00, 0xE1, 0x04, 0x80, 0xFF, 0xFF, 0xFF, 0x4A, 0x0C, 0xB5, 0x08, 0x49, 0x0D, 0x4B, 
+	0x0C, 0xCA, 0x01, 0xE0, 0x01, 0x42, 0x8B, 0xC3, 0x01, 0x4B, 0x0B, 0xD3, 0xFB, 0x22, 0x00, 0x49, 
+	0x0B, 0xC3, 0x04, 0xE0, 0x00, 0xD3, 0xFC, 0x42, 0x8B, 0xF8, 0x26, 0xF7, 0xFF, 0x22, 0x00, 0x4B, 
+	0x08, 0xC3, 0x04, 0xE0, 0x00, 0xD3, 0xFC, 0x42, 0x83, 0x46, 0xC0, 0xBD, 0x08, 0x00, 0x00, 0x59, 
+	0xFC, 0x20, 0x00, 0x00, 0x3C, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 0x11, 
+	0xEC, 0x20, 0x00, 0x1E, 0x0C, 0x4B, 0x13, 0xB5, 0x00, 0x2B, 0x01, 0x68, 0x1B, 0x2B, 0x08, 0xD0, 
+	0x02, 0xE0, 0x0F, 0xD1, 0x1E, 0x4A, 0x11, 0x4B, 0x10, 0x4A, 0x11, 0x60, 0x1A, 0x4A, 0x11, 0x60, 
+	0x5A, 0x60, 0x1A, 0x4B, 0x11, 0x4A, 0x12, 0x4B, 0x11, 0x4A, 0x12, 0x60, 0x1A, 0x4A, 0x12, 0x60, 
+	0x5A, 0xE0, 0x0D, 0x60, 0x9A, 0x4A, 0x08, 0x4B, 0x09, 0x60, 0x13, 0x49, 0x09, 0x4A, 0x0A, 0x60, 
+	0x51, 0x4A, 0x0A, 0x60, 0x13, 0x60, 0x53, 0x60, 0x13, 0x4B, 0x0C, 0x60, 0x93, 0x70, 0x1A, 0x22, 
+	0x01, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x11, 0x50, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x03, 
+	0xF9, 0x00, 0x00, 0x3F, 0x7D, 0x00, 0x00, 0x3F, 0xB5, 0x20, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 
+	0x18, 0x00, 0x00, 0x40, 0xC1, 0x00, 0x00, 0x42, 0xA9, 0x00, 0x00, 0x44, 0x0D, 0x20, 0x00, 0x01, 
+	0xE4, 0x23, 0x00, 0xB5, 0x00, 0x33, 0x01, 0x5C, 0xC2, 0xD1, 0xFB, 0x2A, 0x00, 0xB2, 0xD8, 0x3B, 
+	0x01, 0x46, 0xC0, 0xBD, 0x00, 0x1C, 0x1C, 0xB5, 0xF7, 0x78, 0x1F, 0xAB, 0x08, 0x1C, 0x0E, 0x4B, 
+	0x26, 0x21, 0x01, 0x68, 0x1B, 0x42, 0x0B, 0x40, 0x81, 0x2F, 0x00, 0xD0, 0x44, 0x2C, 0x04, 0xD0, 
+	0x07, 0x4B, 0x22, 0xD8, 0x32, 0x33, 0x05, 0x5D, 0x19, 0x5D, 0x1F, 0x91, 0x00, 0x2C, 0x04, 0xE0, 
+	0x08, 0x4B, 0x1E, 0xD8, 0x2E, 0x31, 0x0A, 0x1C, 0x19, 0x33, 0x0F, 0x5D, 0x09, 0x91, 0x00, 0x5D, 
+	0x1F, 0xD0, 0x28, 0x2C, 0x03, 0xD0, 0x28, 0x2C, 0x00, 0x20, 0x3A, 0xE0, 0x28, 0xF0, 0x01, 0x1C, 
+	0x21, 0x42, 0x86, 0xFC, 0x63, 0x46, 0x6B, 0xDD, 0x05, 0xB2, 0xC0, 0x78, 0x1B, 0x70, 0x68, 0x70, 
+	0x2B, 0x70, 0x2F, 0xE0, 0x02, 0x70, 0x6E, 0x1C, 0x30, 0x43, 0x60, 0x1A, 0x36, 0x23, 0x00, 0x99, 
+	0x01, 0x60, 0xAB, 0x60, 0x69, 0xB2, 0xF6, 0x18, 0x09, 0xF7, 0xFF, 0x91, 0x01, 0xF7, 0xFF, 0xFA, 
+	0xE3, 0x28, 0x00, 0xFB, 0x37, 0xE0, 0x0B, 0xD1, 0xFB, 0x27, 0x00, 0x23, 0x0F, 0xE0, 0x05, 0x93, 
+	0x00, 0x91, 0x00, 0x21, 0x0F, 0x24, 0x02, 0xE0, 0x02, 0x24, 0x01, 0xE0, 0x00, 0x92, 0x01, 0x4D, 
+	0x04, 0xD1, 0xD2, 0x2E, 0x00, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x00, 0x58, 0x00, 0x00, 0x59, 
+	0x73, 0x20, 0x00, 0x00, 0x70, 0x4B, 0x11, 0xB5, 0x38, 0x68, 0x1B, 0x22, 0x01, 0x1C, 0x0D, 0x40, 
+	0x82, 0xD0, 0x19, 0x42, 0x13, 0x23, 0x0B, 0x4C, 0x0E, 0x1C, 0x08, 0x70, 0x23, 0xFF, 0x90, 0xF7, 
+	0xFF, 0x78, 0x63, 0x70, 0x60, 0x33, 0x02, 0x22, 0x07, 0x42, 0x93, 0x40, 0x13, 0x78, 0x63, 0xD1, 
+	0x03, 0xB2, 0xDB, 0x3B, 0x01, 0x23, 0x00, 0x70, 0x63, 0x60, 0xA3, 0x60, 0x65, 0xFA, 0xAA, 0xF7, 
+	0xFF, 0xFA, 0xFE, 0xF7, 0xFF, 0xD1, 0xFB, 0x28, 0x00, 0x46, 0xC0, 0xBD, 0x38, 0x20, 0x00, 0x00, 
+	0x58, 0x20, 0x00, 0x00, 0x70, 0x4C, 0x0B, 0xB5, 0x1F, 0x73, 0xD8, 0x46, 0x6B, 0x2B, 0x00, 0x78, 
+	0x23, 0x20, 0x00, 0xD0, 0x03, 0xF7, 0xFF, 0x49, 0x08, 0x78, 0x23, 0xFF, 0xCD, 0xD0, 0x07, 0x2B, 
+	0x00, 0x21, 0x01, 0x46, 0x6A, 0x32, 0x0F, 0x20, 0x00, 0x91, 0x00, 0x23, 0x04, 0xFF, 0x6A, 0xF7, 
+	0xFF, 0x46, 0xC0, 0xBD, 0x1F, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x87, 0xF7, 0xFF, 0xB5, 
+	0xF8, 0x28, 0x00, 0xFA, 0xD7, 0x4B, 0x39, 0xD1, 0x70, 0x2A, 0x00, 0x68, 0x1A, 0x4B, 0x38, 0xDC, 
+	0x03, 0x2B, 0x00, 0x68, 0x1B, 0x49, 0x37, 0xDD, 0x3E, 0x70, 0x0B, 0x23, 0x03, 0x33, 0x04, 0x4B, 
+	0x36, 0x1C, 0x1C, 0x7F, 0xDB, 0xDA, 0x00, 0x42, 0x9A, 0x70, 0x4B, 0xB2, 0xD3, 0x46, 0x8C, 0x21, 
+	0x0A, 0x23, 0x00, 0x4A, 0x32, 0xE0, 0x1F, 0x49, 0x2D, 0xE0, 0x03, 0x33, 0x01, 0x43, 0x5E, 0x46, 
+	0x66, 0x18, 0x76, 0x20, 0x00, 0x18, 0x37, 0x30, 0x0A, 0xCC, 0x38, 0xAE, 0xF1, 0x10, 0x5F, 0x7F, 
+	0x25, 0x32, 0xD0, 0xF3, 0x2F, 0x00, 0xDA, 0x13, 0x42, 0xA3, 0x18, 0x08, 0x00, 0x58, 0x00, 0xDE, 
+	0x88, 0x80, 0xB2, 0x00, 0x70, 0x10, 0x19, 0x80, 0x12, 0x00, 0x1C, 0x18, 0x70, 0x50, 0x00, 0x40, 
+	0x30, 0x10, 0x33, 0x01, 0x5A, 0x08, 0x0A, 0x00, 0x70, 0x90, 0x32, 0x04, 0x70, 0xD0, 0xDB, 0xDF, 
+	0x42, 0xA3, 0x4A, 0x1F, 0x4B, 0x1D, 0x22, 0x00, 0x60, 0x5A, 0xF7, 0xFF, 0x60, 0x9A, 0xF7, 0xFF, 
+	0xFA, 0x3D, 0x28, 0x00, 0xFA, 0x91, 0xE0, 0x29, 0xD1, 0xFB, 0x68, 0x53, 0x4A, 0x1A, 0xD0, 0x25, 
+	0x33, 0x01, 0x21, 0x13, 0x4B, 0x15, 0x68, 0x11, 0x70, 0x19, 0x70, 0x59, 0x46, 0x94, 0x49, 0x14, 
+	0x4B, 0x16, 0x1C, 0x03, 0x78, 0x1D, 0x1C, 0x23, 0xE0, 0x0D, 0x00, 0x5E, 0xE0, 0x01, 0x30, 0x02, 
+	0x44, 0x66, 0x22, 0x06, 0x18, 0x34, 0x1C, 0x5C, 0x5E, 0xA7, 0xD0, 0xF4, 0x2F, 0x00, 0x1C, 0x23, 
+	0x70, 0x0B, 0x20, 0x00, 0x31, 0x01, 0xDB, 0xF0, 0x42, 0xAB, 0x4A, 0x09, 0x4B, 0x07, 0x60, 0x5A, 
+	0x60, 0x98, 0xFA, 0x12, 0xF7, 0xFF, 0xFA, 0x66, 0xF7, 0xFF, 0xD1, 0xFB, 0x28, 0x00, 0x46, 0xC0, 
+	0xBD, 0xF8, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0x70, 0x20, 0x00, 
+	0x09, 0xAE, 0x20, 0x00, 0x09, 0xF0, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x4B, 0x64, 
+	0xB5, 0x08, 0x2B, 0x1D, 0x88, 0x1B, 0xD8, 0x1A, 0xD0, 0x47, 0xD1, 0x00, 0x2B, 0x05, 0xD8, 0x0D, 
+	0xE0, 0x96, 0xD0, 0x63, 0x2B, 0x02, 0x2B, 0x01, 0xD8, 0x03, 0xE0, 0xB7, 0xD0, 0x00, 0x2B, 0x03, 
+	0xE0, 0x57, 0xE0, 0x87, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0x04, 0xE0, 0x8F, 0xE0, 0xB0, 0xD0, 0x65, 
+	0x2B, 0x07, 0x2B, 0x1B, 0xD3, 0x5C, 0x2B, 0x1C, 0xD0, 0x1C, 0xE0, 0xA7, 0xD0, 0x00, 0x2B, 0x22, 
+	0xE0, 0x22, 0xD8, 0x08, 0xD0, 0x40, 0xD0, 0x5D, 0x2B, 0x1F, 0x2B, 0x20, 0xD3, 0x2A, 0x2B, 0x21, 
+	0xD0, 0x5E, 0xE0, 0x9B, 0xD0, 0x00, 0x2B, 0x41, 0xE0, 0x5E, 0xD8, 0x03, 0xD0, 0x64, 0xD0, 0x00, 
+	0x2B, 0x40, 0xE0, 0x5B, 0xE0, 0x94, 0xD0, 0x61, 0x2B, 0x42, 0xD0, 0x00, 0x2B, 0x60, 0xE0, 0x72, 
+	0xE0, 0x8E, 0x4B, 0x49, 0x4A, 0x48, 0x20, 0x01, 0x78, 0x12, 0x40, 0x90, 0x68, 0x19, 0x43, 0x0A, 
+	0x1C, 0x02, 0xE0, 0x83, 0x60, 0x1A, 0x4B, 0x44, 0x49, 0x43, 0x68, 0x1A, 0x78, 0x09, 0x40, 0x88, 
+	0x20, 0x01, 0x60, 0x1A, 0x43, 0x82, 0x4B, 0x3F, 0xE0, 0x7A, 0x4B, 0x40, 0x78, 0x1A, 0xE0, 0x75, 
+	0x70, 0x1A, 0x21, 0x0D, 0x4B, 0x3C, 0x4B, 0x3E, 0x78, 0x1A, 0x4A, 0x3C, 0x70, 0x1A, 0x78, 0x1A, 
+	0x70, 0x11, 0x2A, 0x00, 0x4B, 0x3C, 0x22, 0x00, 0xD0, 0x02, 0xE0, 0x67, 0x70, 0x5A, 0x78, 0x52, 
+	0x4A, 0x3A, 0xE0, 0x63, 0x70, 0x5A, 0x78, 0x1A, 0x4B, 0x33, 0x70, 0x1A, 0x4B, 0x38, 0x4B, 0x31, 
+	0xE0, 0x5E, 0x4B, 0x37, 0x78, 0x1A, 0xF7, 0xFD, 0x60, 0x1A, 0xE0, 0x57, 0xFC, 0x09, 0x78, 0x1A, 
+	0x4B, 0x2D, 0x70, 0x9A, 0x4B, 0x34, 0xF7, 0xFF, 0x78, 0x98, 0xE0, 0x4F, 0xFC, 0x8D, 0x78, 0x1A, 
+	0x4B, 0x29, 0x70, 0x9A, 0x4B, 0x30, 0x22, 0x0F, 0x4B, 0x29, 0xE0, 0x47, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x2E, 0xE0, 0x43, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x2D, 0xE0, 0x3F, 0x70, 0x1A, 0xF7, 0xFD, 
+	0x20, 0x0C, 0xE0, 0x3B, 0xF9, 0x85, 0xF7, 0xFD, 0x20, 0x0D, 0xE0, 0x37, 0xF9, 0x81, 0x22, 0x01, 
+	0x4B, 0x28, 0xE0, 0x33, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x27, 0xE0, 0x2F, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x26, 0xE0, 0x2B, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x25, 0xE0, 0x27, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x24, 0x4B, 0x14, 0x70, 0x1A, 0x4B, 0x23, 0x78, 0x1A, 0xE0, 0x1F, 0x70, 0x1A, 0x78, 0x1A, 
+	0x4B, 0x11, 0x70, 0x9A, 0x4B, 0x1E, 0x4B, 0x0F, 0xE0, 0x1A, 0x4B, 0x1F, 0x78, 0x1A, 0x78, 0x1A, 
+	0x70, 0x1A, 0x3A, 0x01, 0x4B, 0x10, 0xD8, 0x03, 0x2A, 0x01, 0x22, 0x0F, 0x33, 0x40, 0xE0, 0x0D, 
+	0x70, 0x1A, 0x33, 0x40, 0x4A, 0x1A, 0x2A, 0x00, 0x78, 0x12, 0x4A, 0x19, 0xD0, 0x04, 0x78, 0x12, 
+	0x32, 0x40, 0xE0, 0x03, 0x70, 0x1A, 0x32, 0x40, 0x4A, 0x08, 0x70, 0x1A, 0x78, 0x12, 0x46, 0xC0, 
+	0xBD, 0x08, 0x20, 0x00, 0x00, 0x28, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x58, 0x20, 0x00, 
+	0x03, 0x1D, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x0D, 0x48, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 
+	0x01, 0xDE, 0x20, 0x00, 0x11, 0x50, 0x20, 0x00, 0x0A, 0xAA, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 
+	0x01, 0xDC, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x01, 0xE7, 0x20, 0x00, 0x01, 0xE5, 0x20, 0x00, 
+	0x01, 0x8B, 0x20, 0x00, 0x01, 0xE6, 0x20, 0x00, 0x01, 0x92, 0x20, 0x00, 0x01, 0xE0, 0x20, 0x00, 
+	0x01, 0xDD, 0x00, 0x00, 0x74, 0x9A, 0x4B, 0x4A, 0xB5, 0x30, 0x2B, 0x34, 0x88, 0x1B, 0xD8, 0x0C, 
+	0xD0, 0x47, 0xD0, 0x4F, 0x2B, 0x2E, 0x2B, 0x00, 0xD8, 0x04, 0x2B, 0x1D, 0xD0, 0x14, 0xE0, 0x16, 
+	0xD1, 0x78, 0xD0, 0x51, 0x2B, 0x2F, 0xD1, 0x73, 0x2B, 0x30, 0x2B, 0x38, 0xE0, 0x56, 0xD8, 0x04, 
+	0xD0, 0x66, 0xD0, 0x39, 0x2B, 0x35, 0xD1, 0x6B, 0x2B, 0x37, 0x2B, 0x39, 0xE0, 0x5B, 0x2B, 0x86, 
+	0xD0, 0x63, 0xE0, 0x09, 0xD1, 0x66, 0x7B, 0x5A, 0x4B, 0x3B, 0x70, 0x1A, 0x4B, 0x3B, 0x4B, 0x3B, 
+	0xE0, 0x6F, 0x4B, 0x39, 0x78, 0x1A, 0xE0, 0x6A, 0x70, 0x1A, 0x4A, 0x3A, 0x49, 0x39, 0x2B, 0x00, 
+	0x78, 0x0B, 0x78, 0x10, 0xD1, 0x0F, 0x70, 0x08, 0x49, 0x34, 0x49, 0x37, 0x78, 0x50, 0x68, 0x52, 
+	0x70, 0x08, 0x4C, 0x36, 0x18, 0xD1, 0x19, 0x19, 0x78, 0x08, 0x70, 0x08, 0x33, 0x01, 0xD1, 0xF7, 
+	0x2B, 0x06, 0x68, 0x52, 0xE0, 0x55, 0x78, 0x08, 0x23, 0x00, 0x18, 0xC0, 0x4D, 0x2B, 0x18, 0x10, 
+	0x38, 0x02, 0x19, 0x58, 0x78, 0x04, 0x70, 0x04, 0x33, 0x01, 0xD1, 0xF4, 0x2B, 0x08, 0x4B, 0x2C, 
+	0xE0, 0x47, 0x4B, 0x25, 0x68, 0x1A, 0xE0, 0x42, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x4B, 0x22, 
+	0x79, 0x1A, 0xE0, 0x3C, 0x70, 0x1A, 0x4A, 0x27, 0x4B, 0x22, 0x49, 0x1F, 0x78, 0x1B, 0x68, 0x1A, 
+	0x18, 0xD3, 0x60, 0x0A, 0x68, 0x5B, 0xE0, 0x32, 0x60, 0x4B, 0x1C, 0x1A, 0x4B, 0x1A, 0x78, 0x11, 
+	0x32, 0x2C, 0x29, 0x00, 0x4A, 0x19, 0xE0, 0x09, 0xD1, 0x07, 0x1C, 0x1A, 0x4B, 0x16, 0x78, 0x11, 
+	0x32, 0x2C, 0x29, 0x00, 0x4A, 0x15, 0x8C, 0xDB, 0xD1, 0x02, 0xE0, 0x20, 0x80, 0x13, 0x80, 0x13, 
+	0x8D, 0x1B, 0x4B, 0x19, 0xE0, 0x1D, 0x4B, 0x10, 0x78, 0x1A, 0xE0, 0x18, 0x70, 0x1A, 0x78, 0x1A, 
+	0x4B, 0x17, 0x70, 0x1A, 0x4B, 0x0D, 0x4B, 0x16, 0xE0, 0x13, 0x4B, 0x0B, 0x78, 0x1A, 0xE0, 0x0E, 
+	0x70, 0x1A, 0xB2, 0x9A, 0x3B, 0x90, 0xD8, 0x0A, 0x2A, 0x13, 0x01, 0x5B, 0x4A, 0x09, 0x49, 0x06, 
+	0x78, 0x12, 0x4A, 0x10, 0x18, 0x9B, 0x68, 0x1A, 0x18, 0x9B, 0x60, 0x0A, 0x68, 0x5B, 0xBD, 0x30, 
+	0x60, 0x4B, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x09, 0xAE, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 
+	0x03, 0x1D, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x70, 0x50, 0x00, 0x00, 0x0D, 0x50, 0x00, 
+	0x00, 0x0E, 0x20, 0x00, 0x09, 0x1C, 0x20, 0x00, 0x09, 0xB1, 0x00, 0x00, 0x5B, 0xFF, 0xFA, 0x33, 
+	0xAE, 0xF1, 0x11, 0x00, 0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0x20, 0x00, 0x0A, 0xB3, 0x4B, 
+	0x08, 0xB5, 0x08, 0x2B, 0x86, 0x88, 0x1B, 0x4B, 0x07, 0xD1, 0x0B, 0x2A, 0x01, 0x68, 0x9A, 0x68, 
+	0x9A, 0xDC, 0x02, 0x60, 0x9A, 0x32, 0x01, 0x2B, 0x02, 0x68, 0x9B, 0xF7, 0xFF, 0xD1, 0x01, 0xBD, 
+	0x08, 0xF8, 0x71, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0x70, 0x4C, 0x31, 0xB5, 0x7F, 0x78, 
+	0x23, 0x90, 0x03, 0x1C, 0x16, 0x1C, 0x0D, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x2E, 0x20, 0x01, 0xFD, 
+	0x6E, 0xF7, 0xFF, 0x2B, 0x00, 0x78, 0x23, 0x21, 0x01, 0xD0, 0x06, 0xAA, 0x03, 0x1C, 0x08, 0x91, 
+	0x00, 0x23, 0x04, 0xFD, 0x0C, 0xF7, 0xFF, 0x99, 0x03, 0x4B, 0x28, 0x4A, 0x28, 0x78, 0x1B, 0xD1, 
+	0x15, 0x2B, 0x00, 0x33, 0x4A, 0x1C, 0x13, 0x5E, 0x1B, 0x20, 0x00, 0x42, 0x9E, 0x1B, 0x8E, 0x1C, 
+	0x13, 0xDC, 0x05, 0x20, 0x00, 0x33, 0x4C, 0x42, 0x9E, 0x5E, 0x1B, 0x48, 0x21, 0xDA, 0x08, 0x70, 
+	0x03, 0x23, 0x01, 0x70, 0x03, 0x48, 0x20, 0x70, 0x03, 0x48, 0x20, 0x70, 0x03, 0x48, 0x20, 0x2B, 
+	0x00, 0x78, 0x53, 0x4B, 0x1F, 0xD0, 0x04, 0x43, 0x59, 0x5D, 0x5B, 0x91, 0x03, 0x11, 0x89, 0x00, 
+	0x6A, 0x4B, 0x1D, 0x4B, 0x1D, 0x5A, 0xD0, 0x5E, 0xD4, 0x99, 0x03, 0x4A, 0x14, 0x08, 0xC0, 0x1B, 
+	0x04, 0xB2, 0x89, 0x7C, 0x56, 0x1A, 0x64, 0x4B, 0x19, 0xB2, 0x24, 0xDC, 0x02, 0x42, 0xB4, 0x42, 
+	0xB4, 0x42, 0x76, 0x24, 0x00, 0xDA, 0x02, 0xE0, 0x05, 0x55, 0x5C, 0x7C, 0x96, 0x5D, 0x5C, 0xD0, 
+	0x01, 0x42, 0xA6, 0x55, 0x5C, 0x34, 0x01, 0xB2, 0x9B, 0x1A, 0x43, 0xB2, 0x19, 0x7E, 0x92, 0xDB, 
+	0x02, 0x42, 0x91, 0x21, 0x01, 0x4A, 0x09, 0x4A, 0x0C, 0x70, 0x11, 0x52, 0xAB, 0x00, 0x6D, 0x46, 
+	0xC0, 0xBD, 0x7F, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x8B, 0x20, 0x00, 0x01, 0xE4, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x11, 0x30, 0x20, 
+	0x00, 0x01, 0xC4, 0x00, 0x00, 0x7B, 0x92, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 0x0D, 0x3C, 0x20, 
+	0x00, 0x0A, 0xA4, 0x4B, 0x48, 0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0x89, 0xD0, 0x03, 0x2B, 0x00, 0x49, 
+	0x46, 0x20, 0x00, 0xFC, 0xF4, 0xF7, 0xFF, 0x23, 0x00, 0x4A, 0x45, 0x4A, 0x45, 0x70, 0x13, 0x38, 
+	0x01, 0x20, 0x0C, 0x00, 0x81, 0xB2, 0xC0, 0x28, 0x00, 0x50, 0x8B, 0x4B, 0x42, 0xD1, 0xF9, 0x70, 
+	0x18, 0x4A, 0x42, 0x70, 0x13, 0x23, 0x01, 0x70, 0x13, 0x4A, 0x41, 0x7E, 0x19, 0x4B, 0x41, 0x7D, 
+	0xDA, 0x91, 0x04, 0x7D, 0x1B, 0x92, 0x05, 0x1C, 0x0B, 0x93, 0x06, 0x3B, 0x01, 0xE0, 0x2D, 0x1C, 
+	0x5D, 0xB2, 0xDB, 0x01, 0xEA, 0x4C, 0x3C, 0x88, 0x16, 0x19, 0x12, 0x00, 0x5A, 0x49, 0x3B, 0x52, 
+	0x56, 0x01, 0x5C, 0x9A, 0x05, 0x01, 0xAD, 0x46, 0x9C, 0x94, 0x07, 0x3A, 0x01, 0xE0, 0x1A, 0x1C, 
+	0x93, 0xB2, 0xD2, 0x4C, 0x36, 0x18, 0xEB, 0x5B, 0x19, 0x00, 0x5B, 0x2B, 0x00, 0x9B, 0x06, 0x1C, 
+	0xD3, 0xD0, 0x05, 0x00, 0x5B, 0x18, 0xEB, 0x18, 0xC9, 0x5B, 0x1B, 0x9C, 0x07, 0x10, 0x49, 0x00, 
+	0x7B, 0x18, 0xA7, 0x4B, 0x2F, 0x1C, 0x1C, 0x4C, 0x2F, 0x52, 0xE1, 0x1B, 0x89, 0x23, 0x01, 0x18, 
+	0x40, 0x55, 0x3B, 0xD1, 0xE2, 0x2A, 0x00, 0x2B, 0x00, 0x46, 0x63, 0x4B, 0x25, 0xD1, 0xCF, 0x7D, 
+	0xD9, 0x9C, 0x04, 0xF0, 0x01, 0x43, 0x61, 0x4B, 0x28, 0xF8, 0xD5, 0x8C, 0x58, 0x1C, 0x05, 0x28, 
+	0x00, 0x4C, 0x27, 0x23, 0x40, 0xD1, 0x02, 0xE0, 0x07, 0x60, 0x23, 0x1C, 0x29, 0x01, 0x80, 0xF8, 
+	0xC8, 0xF0, 0x01, 0xDD, 0x00, 0x28, 0x6E, 0x60, 0x20, 0x20, 0x6E, 0x78, 0x23, 0x4C, 0x12, 0xD0, 
+	0x03, 0x2B, 0x00, 0x49, 0x1F, 0x20, 0x00, 0xFC, 0x8A, 0xF7, 0xFF, 0x4A, 0x1E, 0x4B, 0x1B, 0x80, 
+	0x55, 0x8C, 0x5B, 0x78, 0x23, 0x80, 0x13, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 
+	0x00, 0x93, 0x00, 0xF7, 0xFF, 0x1C, 0x0B, 0x4B, 0x18, 0xFC, 0x23, 0x78, 0x1B, 0x48, 0x18, 0x49, 
+	0x18, 0x22, 0x00, 0x3B, 0x01, 0xE0, 0x04, 0x00, 0x5C, 0xB2, 0xDB, 0x52, 0x62, 0x54, 0xC2, 0xD1, 
+	0xF8, 0x2B, 0x00, 0xBD, 0xF0, 0xB0, 0x09, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x91, 0x20, 
+	0x00, 0x03, 0x1C, 0x20, 0x00, 0x11, 0xBC, 0x20, 0x00, 0x10, 0xF4, 0x20, 0x00, 0x09, 0x20, 0x20, 
+	0x00, 0x11, 0x3C, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x40, 0x02, 0x20, 0x00, 0x11, 0x94, 0x40, 
+	0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x0D, 0x48, 0x20, 
+	0x00, 0x09, 0x78, 0x00, 0x00, 0x59, 0x9A, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x09, 0x7C, 0x20, 
+	0x00, 0x0A, 0xA4, 0x20, 0x00, 0x02, 0x14, 0x4A, 0xA0, 0xB5, 0xF0, 0x70, 0x13, 0x23, 0x00, 0xB0, 
+	0x85, 0x4A, 0x9F, 0x4A, 0x9F, 0x70, 0x13, 0x4A, 0x9F, 0x70, 0x13, 0x4B, 0x9F, 0x70, 0x13, 0x2B, 
+	0x00, 0x78, 0x1B, 0x20, 0x01, 0xD0, 0x03, 0xF7, 0xFF, 0x49, 0x9D, 0x24, 0x00, 0xFC, 0x31, 0x4E, 
+	0x9A, 0x4D, 0x9C, 0x78, 0x33, 0xE0, 0x11, 0xD0, 0x0C, 0x2B, 0x00, 0x7D, 0x29, 0x7D, 0xEB, 0x18, 
+	0xC9, 0x48, 0x99, 0x23, 0x00, 0x01, 0xE2, 0x93, 0x00, 0x18, 0x12, 0x20, 0x01, 0xB2, 0xC9, 0xF7, 
+	0xFF, 0x23, 0x02, 0x34, 0x01, 0xFB, 0xC5, 0x7E, 0x29, 0xB2, 0xE4, 0xD3, 0xEA, 0x42, 0x8C, 0x78, 
+	0x1B, 0x4B, 0x92, 0xD1, 0x00, 0x2B, 0x00, 0x4B, 0x91, 0xE1, 0x0D, 0x2A, 0x00, 0x78, 0x1A, 0x4B, 
+	0x90, 0xD1, 0x1F, 0x2B, 0x00, 0x78, 0x1B, 0x7D, 0xEB, 0xD0, 0x1B, 0xE0, 0x07, 0x4C, 0x8E, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x18, 0x2D, 0x01, 0x5D, 0x2B, 0x00, 0x55, 0x2A, 0x1C, 0x03, 0xD1, 0xF8, 0xB2, 
+	0xC0, 0x1E, 0x58, 0xD0, 0x01, 0x2B, 0x00, 0xE7, 0xF6, 0x1C, 0x0B, 0x48, 0x86, 0x4A, 0x87, 0x01, 
+	0x49, 0x78, 0x12, 0x3A, 0x01, 0xE0, 0x03, 0x18, 0x8C, 0xB2, 0xD2, 0x2A, 0x00, 0x54, 0x23, 0x4B, 
+	0x80, 0xD1, 0xF9, 0x78, 0x19, 0x4A, 0x7E, 0x70, 0x11, 0x78, 0x1B, 0xD0, 0x70, 0x2B, 0x00, 0x7E, 
+	0x1A, 0x4B, 0x78, 0x92, 0x02, 0x7D, 0xD9, 0x93, 0x03, 0x7D, 0x1B, 0x3B, 0x01, 0xE0, 0x22, 0x1C, 
+	0x59, 0xB2, 0xDB, 0x19, 0xC8, 0x01, 0x89, 0x9D, 0x03, 0x4C, 0x79, 0x5B, 0x00, 0x00, 0x40, 0xD0, 
+	0x04, 0x2D, 0x00, 0x00, 0x49, 0x19, 0x89, 0x18, 0x40, 0x5B, 0x09, 0x01, 0x59, 0x10, 0x40, 0x4D, 
+	0x74, 0x18, 0x89, 0x5B, 0x65, 0x00, 0x4C, 0x08, 0xED, 0x4C, 0x6F, 0x1A, 0x28, 0x5D, 0x0C, 0xDA, 
+	0x04, 0x42, 0x84, 0xDD, 0x00, 0x28, 0xFF, 0x4D, 0x6B, 0x20, 0xFF, 0x2B, 0x00, 0x54, 0x68, 0x1C, 
+	0x11, 0xD1, 0xDD, 0xB2, 0xD2, 0x1E, 0x4A, 0xD0, 0x03, 0x29, 0x00, 0x1C, 0x97, 0x9B, 0x02, 0xE7, 
+	0xF4, 0x1C, 0xD6, 0x4B, 0x65, 0x4A, 0x5F, 0x78, 0x1B, 0x7E, 0x17, 0x01, 0x7F, 0x49, 0x62, 0x3B, 
+	0x01, 0xE0, 0x10, 0x4E, 0x64, 0xB2, 0xDB, 0x5B, 0x94, 0x00, 0x5A, 0x56, 0x45, 0x18, 0xF8, 0x1C, 
+	0x2A, 0xB2, 0x26, 0xDA, 0x00, 0x42, 0xB5, 0xB2, 0x12, 0x1C, 0x22, 0xDD, 0x00, 0x2A, 0xFF, 0x54, 
+	0x42, 0x22, 0xFF, 0xD1, 0xEC, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x50, 0xD0, 0x03, 0x2B, 0x00, 0x49, 
+	0x5A, 0x20, 0x03, 0xFA, 0x85, 0xAE, 0xF1, 0x12, 0xFB, 0x94, 0xF7, 0xFF, 0x4D, 0x4E, 0x24, 0x00, 
+	0xE0, 0x0E, 0x4E, 0x4B, 0x2B, 0x00, 0x78, 0x33, 0x4B, 0x50, 0xD0, 0x09, 0x18, 0xD2, 0x01, 0x62, 
+	0x7D, 0xE9, 0x23, 0x00, 0x93, 0x00, 0x20, 0x03, 0xF7, 0xFF, 0x23, 0x01, 0x34, 0x01, 0xFB, 0x2B, 
+	0x7E, 0x2B, 0xB2, 0xE4, 0xD8, 0xED, 0x42, 0xA3, 0x23, 0x01, 0x4A, 0x40, 0x4A, 0x3D, 0x70, 0x13, 
+	0x4A, 0x3B, 0x70, 0x13, 0x4B, 0x3E, 0x70, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x49, 0xD0, 0x6D, 
+	0x02, 0x58, 0x68, 0x1B, 0x4A, 0x3C, 0xD5, 0x69, 0x7D, 0x16, 0x24, 0x80, 0x7D, 0xD2, 0x7E, 0x13, 
+	0x18, 0xB6, 0x4D, 0x45, 0x06, 0x24, 0xB2, 0xF6, 0xE0, 0x18, 0x46, 0xB4, 0xB2, 0xDB, 0x3B, 0x01, 
+	0x00, 0x5A, 0x49, 0x42, 0x5A, 0x56, 0x1C, 0x5F, 0x46, 0x62, 0x01, 0xBF, 0x3A, 0x01, 0xE0, 0x0D, 
+	0x1C, 0x91, 0xB2, 0xD2, 0x48, 0x37, 0x18, 0x79, 0x5A, 0x09, 0x00, 0x49, 0x42, 0x8C, 0x1B, 0x89, 
+	0x1C, 0x0C, 0xDA, 0x00, 0xDD, 0x00, 0x42, 0x8D, 0x2A, 0x00, 0x1C, 0x0D, 0x2B, 0x00, 0xD1, 0xEF, 
+	0x20, 0x16, 0xD1, 0xE4, 0xF7, 0xFF, 0x49, 0x36, 0x4B, 0x25, 0xFB, 0x45, 0x78, 0x1B, 0x4A, 0x35, 
+	0x80, 0x55, 0x80, 0x14, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x16, 0x93, 0x00, 
+	0xF7, 0xFF, 0x1C, 0x0B, 0x4B, 0x26, 0xFA, 0xDF, 0x78, 0x1B, 0x20, 0x80, 0x06, 0x00, 0x49, 0x2A, 
+	0x4D, 0x2E, 0x4E, 0x2D, 0x3B, 0x01, 0xE0, 0x19, 0x5C, 0xF7, 0xB2, 0xDB, 0x46, 0x94, 0x1C, 0x7A, 
+	0x5C, 0xEA, 0x46, 0x64, 0x46, 0xA4, 0x01, 0xA4, 0x44, 0x62, 0x32, 0x02, 0x00, 0x52, 0x4C, 0x1D, 
+	0x4C, 0x22, 0x5B, 0x12, 0x46, 0x94, 0x00, 0x7F, 0x46, 0x64, 0x5B, 0x3A, 0x42, 0x90, 0x1A, 0xA2, 
+	0x1C, 0x10, 0xDA, 0x00, 0xDD, 0x00, 0x42, 0x91, 0x2B, 0x00, 0x1C, 0x11, 0x4B, 0x0C, 0xD1, 0xE3, 
+	0x78, 0x1B, 0x4A, 0x1C, 0x80, 0x51, 0x80, 0x10, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 
+	0x20, 0x16, 0x93, 0x00, 0xF7, 0xFF, 0x1C, 0x0B, 0xB0, 0x05, 0xFA, 0xAD, 0x46, 0xC0, 0xBD, 0xF0, 
+	0x20, 0x00, 0x09, 0xAC, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x11, 0x30, 0x20, 0x00, 0x11, 0x48, 
+	0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0xAB, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x40, 0x84, 
+	0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x01, 0xE1, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x0E, 0x64, 
+	0x20, 0x00, 0x09, 0x7C, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0D, 0x3C, 
+	0x00, 0x00, 0x59, 0xAF, 0x20, 0x00, 0x00, 0x58, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x11, 0x94, 
+	0x00, 0x00, 0x59, 0xB5, 0x20, 0x00, 0x11, 0x54, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 
+	0x4B, 0xB3, 0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0xA5, 0xD0, 0x00, 0x2B, 0x00, 0x4A, 0xB1, 0xE2, 0x01, 
+	0x78, 0x12, 0x4C, 0xB1, 0x4E, 0xB2, 0x4D, 0xB1, 0xB2, 0x52, 0x7C, 0x64, 0x60, 0x2B, 0x60, 0x6B, 
+	0x81, 0x6B, 0x82, 0x6B, 0x81, 0x2B, 0x82, 0x2B, 0x60, 0xB3, 0x60, 0x33, 0x4F, 0xAD, 0x92, 0x1B, 
+	0x4B, 0xAD, 0x22, 0xFF, 0x60, 0xF2, 0x60, 0x72, 0x7E, 0x3F, 0x94, 0x11, 0x4C, 0xA9, 0x78, 0x1B, 
+	0x93, 0x0B, 0x97, 0x09, 0x4D, 0xA4, 0x7D, 0xE4, 0x23, 0x46, 0x94, 0x08, 0x4F, 0xA2, 0x5E, 0xED, 
+	0x23, 0x48, 0x95, 0x0E, 0x4C, 0xA3, 0x5E, 0xFF, 0x7D, 0x24, 0x97, 0x0F, 0x94, 0x0C, 0x23, 0x2D, 
+	0x4E, 0xA2, 0x4D, 0x9D, 0x78, 0x6D, 0x9F, 0x11, 0x42, 0x7F, 0x68, 0x36, 0x95, 0x0D, 0x4C, 0x9A, 
+	0x97, 0x1D, 0x96, 0x12, 0x4D, 0x98, 0x7C, 0xA4, 0x5C, 0xEB, 0x94, 0x22, 0x93, 0x13, 0x9E, 0x1B, 
+	0x1B, 0x9B, 0x23, 0x10, 0x27, 0x18, 0x93, 0x1E, 0x20, 0x1C, 0x57, 0xEF, 0x56, 0x28, 0x97, 0x14, 
+	0x90, 0x18, 0x21, 0x19, 0x23, 0x00, 0x56, 0x69, 0x24, 0x00, 0x22, 0x00, 0x93, 0x05, 0x91, 0x23, 
+	0x26, 0x00, 0x25, 0x00, 0x20, 0xFF, 0x27, 0x00, 0x23, 0xFF, 0x21, 0x00, 0x94, 0x17, 0x92, 0x06, 
+	0x96, 0x1A, 0x95, 0x10, 0x90, 0x19, 0x97, 0x15, 0x92, 0x1F, 0x91, 0x21, 0x94, 0x1C, 0x93, 0x16, 
+	0x2C, 0x00, 0x9C, 0x09, 0xE1, 0x27, 0xD1, 0x00, 0x4D, 0x89, 0x9B, 0x09, 0xB2, 0xDB, 0x3B, 0x01, 
+	0x00, 0x5B, 0x93, 0x09, 0x9E, 0x08, 0x5B, 0x5B, 0x2E, 0x00, 0x93, 0x0A, 0x9F, 0x09, 0xD0, 0xF0, 
+	0x37, 0x01, 0x48, 0x84, 0x18, 0x1B, 0x01, 0xFB, 0x99, 0x0A, 0x88, 0x1B, 0x1A, 0x5A, 0x9C, 0x0E, 
+	0xDA, 0x00, 0x42, 0x94, 0x9D, 0x0F, 0xE1, 0x92, 0xDD, 0x00, 0x42, 0x95, 0x9E, 0x09, 0xE1, 0x8B, 
+	0x21, 0x01, 0x01, 0xBF, 0x22, 0x00, 0x25, 0x02, 0x97, 0x03, 0x01, 0x70, 0x4D, 0x7A, 0xE0, 0x2C, 
+	0x00, 0x64, 0x18, 0x84, 0x27, 0x18, 0x46, 0x6E, 0x5F, 0xBD, 0x5B, 0x2C, 0x42, 0xAC, 0x1A, 0xE4, 
+	0xB2, 0xA7, 0xDD, 0x01, 0x46, 0x6E, 0x97, 0x06, 0x5F, 0xBD, 0x27, 0x14, 0xDA, 0x01, 0x42, 0xAC, 
+	0x94, 0x05, 0xB2, 0xA4, 0x4F, 0x70, 0x18, 0x82, 0x52, 0xBB, 0x00, 0x52, 0xB2, 0xCB, 0x9A, 0x08, 
+	0xD9, 0xBD, 0x42, 0x9A, 0x1C, 0x8D, 0x9A, 0x03, 0x4C, 0x6C, 0x19, 0x53, 0x5B, 0x1B, 0x00, 0x5B, 
+	0x9F, 0x0E, 0x9E, 0x0A, 0x1B, 0x9C, 0x1C, 0x0A, 0xDD, 0x00, 0x42, 0xBC, 0x9E, 0x0F, 0xE1, 0x38, 
+	0x42, 0xB4, 0x31, 0x01, 0xE0, 0xD1, 0xDA, 0x00, 0x2F, 0x00, 0x9F, 0x0C, 0x9E, 0x03, 0xD0, 0x07, 
+	0x19, 0x34, 0x1C, 0xD4, 0x00, 0x64, 0x4F, 0x61, 0x18, 0xE3, 0x5B, 0xE4, 0x9C, 0x0D, 0x10, 0x5B, 
+	0xD0, 0x06, 0x2C, 0x00, 0x18, 0x84, 0x4E, 0x5E, 0x9F, 0x12, 0x5D, 0xA4, 0x43, 0x7B, 0x43, 0x63, 
+	0x9C, 0x0B, 0x13, 0x1B, 0xD0, 0xBA, 0x2C, 0x00, 0x4F, 0x57, 0x18, 0x86, 0x5B, 0x3F, 0x00, 0x74, 
+	0x4F, 0x58, 0x46, 0xBC, 0x46, 0x66, 0x57, 0xBC, 0x1B, 0x34, 0x08, 0xF6, 0x46, 0x6F, 0x94, 0x07, 
+	0x96, 0x04, 0x24, 0x18, 0x9E, 0x07, 0x5F, 0xE7, 0x42, 0xBC, 0x1A, 0xF4, 0xB2, 0xA7, 0xDD, 0x01, 
+	0x46, 0x6E, 0x97, 0x06, 0x5F, 0xBE, 0x27, 0x14, 0xDA, 0x01, 0x42, 0xB4, 0x96, 0x05, 0xB2, 0xA6, 
+	0x42, 0xBC, 0x9F, 0x11, 0x18, 0x84, 0xDD, 0x5D, 0x4C, 0x4B, 0x46, 0xA4, 0x46, 0x66, 0x27, 0x00, 
+	0x9F, 0x04, 0x55, 0x37, 0x1A, 0xFC, 0x9E, 0x13, 0xD0, 0x08, 0x2E, 0x00, 0x9C, 0x07, 0x9F, 0x1B, 
+	0x43, 0x7B, 0x9E, 0x1E, 0x9F, 0x04, 0x43, 0x74, 0x11, 0x24, 0x19, 0x1C, 0x1C, 0x23, 0x1B, 0x3C, 
+	0xDA, 0x17, 0x33, 0x7F, 0x18, 0x82, 0x4E, 0x3F, 0x54, 0xB3, 0x23, 0x80, 0x9E, 0x21, 0x9A, 0x23, 
+	0x18, 0xF6, 0x1A, 0xA3, 0xAF, 0x1F, 0x96, 0x21, 0x5E, 0xFB, 0x23, 0x00, 0xDC, 0x01, 0x42, 0x9C, 
+	0x94, 0x1F, 0xB2, 0xA4, 0x4C, 0x35, 0x9A, 0x03, 0x00, 0x6D, 0x19, 0x55, 0x5B, 0x2B, 0x27, 0x00, 
+	0xE7, 0x83, 0x53, 0x2F, 0x2C, 0x7E, 0x18, 0x83, 0x4E, 0x32, 0xDD, 0x36, 0x54, 0xF7, 0x27, 0x7F, 
+	0x42, 0xBC, 0x9F, 0x14, 0x9E, 0x17, 0xDB, 0x03, 0x18, 0xF6, 0x1B, 0xE3, 0xAF, 0x10, 0x96, 0x17, 
+	0x5E, 0xFB, 0x23, 0x00, 0xDC, 0x24, 0x42, 0x9C, 0x9E, 0x18, 0xB2, 0xA3, 0xDB, 0x11, 0x42, 0xB4, 
+	0x9C, 0x09, 0x9F, 0x1A, 0xDA, 0x00, 0x42, 0xA7, 0x9E, 0x16, 0x94, 0x1A, 0x42, 0xA6, 0x9C, 0x09, 
+	0x94, 0x16, 0xDD, 0x00, 0x42, 0x96, 0x9E, 0x15, 0x5C, 0x96, 0xAE, 0xF1, 0x13, 0x92, 0x15, 0xDA, 
+	0x00, 0x42, 0xBA, 0x9F, 0x19, 0x92, 0x19, 0xDA, 0x00, 0x4C, 0x1D, 0x9A, 0x03, 0x00, 0x6D, 0x19, 
+	0x55, 0x53, 0x2B, 0x5B, 0x2A, 0x9E, 0x1D, 0xE7, 0x54, 0x42, 0xB4, 0x18, 0x87, 0x4C, 0x1B, 0xDA, 
+	0x0E, 0x55, 0x3E, 0x26, 0x00, 0xB2, 0xA3, 0xE7, 0x9F, 0xE7, 0xD8, 0x93, 0x10, 0x54, 0xF4, 0x4E, 
+	0x16, 0xDA, 0xC7, 0x2C, 0x00, 0x42, 0xBC, 0x9F, 0x23, 0xE7, 0xA9, 0xDC, 0xAF, 0x97, 0x20, 0x4E, 
+	0x13, 0x9E, 0x22, 0x5D, 0xBC, 0x42, 0xB7, 0xB2, 0x67, 0x9F, 0x20, 0xD0, 0x8D, 0x34, 0x01, 0x4E, 
+	0x0F, 0xE7, 0x88, 0x55, 0xBC, 0x20, 0x00, 0x09, 0xAC, 0x20, 0x00, 0x00, 0x4C, 0x20, 0x00, 0x0D, 
+	0x48, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 
+	0x1C, 0x20, 0x00, 0x09, 0x78, 0x20, 0x00, 0x11, 0x94, 0x40, 0x00, 0x40, 0x04, 0x20, 0x00, 0x03, 
+	0xF8, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x79, 0x12, 0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x0A, 
+	0xB3, 0x27, 0x01, 0x9C, 0x09, 0x2C, 0x00, 0x97, 0x1C, 0xE6, 0xD7, 0xD0, 0x00, 0x46, 0x6F, 0x46, 
+	0x6D, 0x20, 0x14, 0x26, 0x18, 0x5B, 0xC0, 0x5B, 0x76, 0x99, 0x17, 0x4D, 0x41, 0x1C, 0x2F, 0xAC, 
+	0x10, 0x82, 0x68, 0x82, 0x2E, 0x88, 0x25, 0x60, 0x29, 0x1C, 0x3C, 0x9B, 0x21, 0x9E, 0x1A, 0x81, 
+	0x3D, 0x60, 0x63, 0x4F, 0x3C, 0x88, 0x25, 0xAC, 0x1F, 0x98, 0x16, 0x60, 0xBE, 0x9A, 0x19, 0x99, 
+	0x15, 0x9E, 0x0B, 0x4C, 0x37, 0x60, 0x39, 0x60, 0xF8, 0x81, 0x65, 0x60, 0x7A, 0xD0, 0x24, 0x2E, 
+	0x00, 0x78, 0x1B, 0x4B, 0x35, 0xD0, 0x03, 0x2B, 0x00, 0x68, 0x1B, 0x4B, 0x34, 0xDD, 0x1C, 0x2B, 
+	0x00, 0x78, 0x23, 0x4C, 0x33, 0xD1, 0x56, 0x2B, 0x00, 0x7E, 0x3B, 0x4F, 0x32, 0xD0, 0x14, 0x2B, 
+	0x00, 0x9F, 0x09, 0x4D, 0x31, 0x78, 0x23, 0x26, 0x01, 0xD0, 0x08, 0x2B, 0x00, 0x01, 0x7A, 0x48, 
+	0x2D, 0x19, 0x52, 0x7D, 0xC1, 0x23, 0x01, 0x20, 0x03, 0xF7, 0xFF, 0x96, 0x00, 0x49, 0x29, 0xF8, 
+	0xAD, 0x7E, 0x0B, 0x37, 0x01, 0x42, 0xBB, 0xB2, 0xFF, 0x4C, 0x26, 0xD8, 0xED, 0x2B, 0x00, 0x7D, 
+	0x23, 0x7E, 0x22, 0xD0, 0x13, 0x3A, 0x01, 0x7D, 0xE4, 0xB2, 0xD2, 0x49, 0x24, 0x20, 0x00, 0x34, 
+	0x02, 0x01, 0x9B, 0x1C, 0x53, 0x00, 0x5B, 0x19, 0x1B, 0x5A, 0x5D, 0x3A, 0x01, 0x5A, 0x5D, 0xB2, 
+	0xD2, 0xE7, 0xF5, 0x52, 0x58, 0x96, 0x1C, 0x26, 0x01, 0x4D, 0x1D, 0xE6, 0x74, 0x7E, 0xAB, 0x4E, 
+	0x1D, 0x4F, 0x13, 0x68, 0x32, 0x21, 0x08, 0x43, 0x53, 0x48, 0x1B, 0x5E, 0x79, 0x4A, 0x1B, 0x11, 
+	0x9B, 0x0F, 0xDC, 0x17, 0xCD, 0x42, 0x99, 0x78, 0x00, 0x70, 0x15, 0x41, 0x65, 0xD1, 0x0A, 0x28, 
+	0x00, 0x2C, 0x00, 0x9C, 0x1C, 0x23, 0x01, 0xD0, 0x07, 0x4A, 0x15, 0x70, 0x13, 0x70, 0x13, 0x49, 
+	0x15, 0x70, 0x0B, 0x4A, 0x15, 0xB0, 0x25, 0x70, 0x13, 0x25, 0x01, 0xBD, 0xF0, 0xE6, 0x51, 0x95, 
+	0x1C, 0x94, 0x1C, 0x24, 0x01, 0x20, 0x03, 0xE6, 0x4E, 0xF7, 0xFF, 0x49, 0x10, 0xE7, 0xA3, 0xF8, 
+	0xBD, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x01, 0xDE, 0x20, 0x00, 0x01, 
+	0x20, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0E, 0x64, 0x40, 0x00, 0x40, 
+	0x00, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0x78, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 0x09, 
+	0x14, 0x20, 0x00, 0x11, 0x30, 0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 0x01, 0xC4, 0x00, 0x00, 0x59, 
+	0xF0, 0x4B, 0x2F, 0xB5, 0xF0, 0x78, 0x1C, 0xB0, 0x85, 0x4E, 0x2F, 0x4D, 0x2E, 0x3C, 0x01, 0xE0, 
+	0x10, 0x57, 0x2B, 0xB2, 0xE4, 0x1C, 0x59, 0x57, 0x32, 0x01, 0x89, 0x32, 0x02, 0x4A, 0x2B, 0x18, 
+	0x89, 0x5A, 0x88, 0x00, 0x49, 0x00, 0x5B, 0x4A, 0x2A, 0x1C, 0x21, 0x5A, 0x9A, 0xFB, 0x0A, 0xF7, 
+	0xFF, 0xD1, 0xEC, 0x2C, 0x00, 0x78, 0x1B, 0x4B, 0x27, 0xD0, 0x08, 0x2B, 0x00, 0x20, 0x03, 0x4B, 
+	0x20, 0x23, 0x01, 0x78, 0x19, 0x4A, 0x24, 0x93, 0x00, 0xF7, 0xFF, 0x23, 0x02, 0x4B, 0x23, 0xF8, 
+	0x1D, 0x78, 0x18, 0x49, 0x1E, 0x1C, 0x84, 0x78, 0x9A, 0x78, 0xDE, 0x92, 0x03, 0x94, 0x02, 0x23, 
+	0x00, 0x01, 0xA4, 0xE0, 0x0D, 0x00, 0x64, 0x19, 0xE4, 0x25, 0x00, 0x5A, 0x65, 0x32, 0x01, 0x52, 
+	0x65, 0x9C, 0x02, 0xE0, 0x02, 0x18, 0xE7, 0x22, 0x00, 0xD1, 0xF2, 0x1A, 0xB4, 0x9D, 0x03, 0x33, 
+	0x01, 0x42, 0xAA, 0x18, 0x1A, 0x4B, 0x15, 0xDB, 0xF5, 0x78, 0x58, 0x49, 0x10, 0x1C, 0x42, 0x78, 
+	0xDE, 0x42, 0x5B, 0x23, 0x01, 0x22, 0x00, 0x92, 0x02, 0xE0, 0x08, 0x1C, 0x9F, 0x18, 0xAC, 0x9D, 
+	0x02, 0x19, 0xE4, 0x01, 0xA4, 0x5A, 0x65, 0x00, 0x64, 0x52, 0x65, 0x25, 0x00, 0x18, 0x14, 0x32, 
+	0x01, 0xDB, 0xF3, 0x42, 0xB4, 0x33, 0x01, 0x9A, 0x03, 0xDB, 0xEC, 0x42, 0x93, 0xBD, 0xF0, 0xB0, 
+	0x05, 0x20, 0x00, 0x09, 0x7C, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 0x40, 0x00, 0x40, 
+	0x00, 0x20, 0x00, 0x11, 0x94, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 0x03, 
+	0x0A, 0x4B, 0x0C, 0xB5, 0x30, 0x78, 0xDB, 0x4C, 0x0C, 0xE0, 0x10, 0x49, 0x0C, 0xB2, 0xDB, 0x3B, 
+	0x01, 0x4D, 0x0B, 0x1C, 0x5A, 0x19, 0x52, 0x01, 0xD2, 0xD1, 0x03, 0x1C, 0x45, 0x00, 0x5A, 0x88, 
+	0x15, 0xE0, 0x04, 0x52, 0x55, 0x01, 0x5A, 0x88, 0x15, 0x00, 0x52, 0x18, 0x12, 0x2B, 0x00, 0x53, 
+	0x15, 0xBD, 0x30, 0xD1, 0xEC, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x11, 
+	0x94, 0x40, 0x00, 0x40, 0x02, 0xB0, 0x8D, 0xB5, 0xF0, 0x92, 0x0B, 0x91, 0x0A, 0x1C, 0x41, 0x4B, 
+	0x63, 0x4A, 0x63, 0xD1, 0x0C, 0x7E, 0x12, 0x49, 0x63, 0x92, 0x03, 0x3A, 0x01, 0x78, 0x5E, 0x78, 
+	0xDA, 0x23, 0x00, 0x00, 0x54, 0x18, 0x64, 0x1C, 0x55, 0xE0, 0x0E, 0x46, 0x94, 0x79, 0x5A, 0x7B, 
+	0xDC, 0x3A, 0x01, 0x18, 0xA2, 0x4A, 0x5C, 0xE0, 0x10, 0x01, 0xC9, 0x18, 0xE9, 0x88, 0x0A, 0x18, 
+	0x89, 0x53, 0xE2, 0x00, 0x5F, 0x22, 0x00, 0x88, 0x0A, 0x3B, 0x01, 0x80, 0x0A, 0x19, 0xDA, 0x46, 
+	0x67, 0xDA, 0xF0, 0x42, 0xB2, 0x24, 0x00, 0x9A, 0x03, 0x4D, 0x54, 0x01, 0x56, 0x23, 0x00, 0x18, 
+	0x36, 0x1C, 0x11, 0x00, 0x76, 0x93, 0x07, 0x93, 0x08, 0x93, 0x05, 0x93, 0x06, 0x96, 0x09, 0x95, 
+	0x03, 0xE0, 0x55, 0x46, 0xA4, 0xD1, 0x04, 0x1C, 0x44, 0x00, 0x56, 0x4C, 0x4A, 0x5A, 0xE4, 0x19, 
+	0x34, 0x4C, 0x4B, 0xE0, 0x04, 0x19, 0x3E, 0x9F, 0x09, 0x5B, 0x34, 0x01, 0x5C, 0x4F, 0x46, 0x1C, 
+	0x4E, 0x01, 0xF6, 0x96, 0x04, 0x88, 0x37, 0x19, 0xF6, 0xB2, 0x3E, 0xB2, 0x24, 0x1B, 0xA6, 0x4F, 
+	0x45, 0x19, 0xE7, 0x00, 0x54, 0x52, 0xFE, 0x17, 0xF4, 0x40, 0x66, 0x19, 0x36, 0x24, 0x01, 0x1C, 
+	0x0F, 0x42, 0xB9, 0x43, 0xA7, 0x9C, 0x07, 0xD1, 0x09, 0x94, 0x07, 0x19, 0xA4, 0xDD, 0x00, 0x42, 
+	0xB5, 0x9F, 0x06, 0x1C, 0x35, 0xDB, 0x0B, 0x42, 0xB7, 0x9C, 0x08, 0xE0, 0x0D, 0x19, 0xA4, 0x9F, 
+	0x03, 0x42, 0xB7, 0x94, 0x08, 0x96, 0x03, 0xDD, 0x00, 0x42, 0xB4, 0x9C, 0x05, 0xE0, 0x02, 0xDB, 
+	0x02, 0xE0, 0x00, 0x96, 0x06, 0x9E, 0x04, 0x96, 0x05, 0x4E, 0x2F, 0x01, 0xF4, 0x52, 0x9F, 0xAE, 
+	0xF1, 0x14, 0x1C, 0x47, 0x19, 0xA4, 0x88, 0x27, 0xD1, 0x0E, 0x97, 0x04, 0x4E, 0x2B, 0x19, 0xBE, 
+	0x00, 0x57, 0x27, 0x10, 0x96, 0x02, 0x5B, 0xBF, 0x46, 0x6E, 0x52, 0xF7, 0x9E, 0x02, 0x26, 0x00, 
+	0x88, 0x26, 0xE0, 0x05, 0x80, 0x26, 0x4E, 0x27, 0x88, 0x27, 0x19, 0xA6, 0x9C, 0x09, 0x53, 0x37, 
+	0x01, 0x5C, 0x3B, 0x02, 0x39, 0x01, 0xDA, 0xA7, 0x45, 0x61, 0xD1, 0x13, 0x30, 0x01, 0x78, 0x23, 
+	0x4C, 0x23, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x22, 0x20, 0x01, 0xFF, 0x70, 0xF7, 0xFE, 0x2B, 0x00, 
+	0x78, 0x23, 0x4B, 0x17, 0xD0, 0x08, 0x78, 0xD9, 0x20, 0x01, 0x93, 0x00, 0x23, 0x00, 0x23, 0x02, 
+	0x4A, 0x16, 0xFF, 0x0C, 0xF7, 0xFE, 0x9F, 0x08, 0x9E, 0x07, 0x19, 0xF3, 0x9C, 0x0A, 0x9E, 0x05, 
+	0x60, 0x23, 0x9C, 0x06, 0x9F, 0x03, 0x1B, 0x65, 0x1B, 0xF3, 0xDA, 0x00, 0x42, 0x9D, 0x9E, 0x0B, 
+	0x1C, 0x1D, 0x60, 0x35, 0x4C, 0x12, 0x2B, 0x00, 0x78, 0x23, 0x20, 0x0B, 0xD0, 0x03, 0xF7, 0xFE, 
+	0x49, 0x11, 0x78, 0x23, 0xFF, 0x4D, 0xD0, 0x08, 0x2B, 0x00, 0x20, 0x0B, 0x4B, 0x06, 0x23, 0x01, 
+	0x7E, 0x19, 0x4A, 0x09, 0x93, 0x00, 0xF7, 0xFE, 0x23, 0x02, 0xB0, 0x0D, 0xFE, 0xE9, 0x46, 0xC0, 
+	0xBD, 0xF0, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x11, 0x94, 0x40, 0x00, 
+	0x40, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 
+	0x01, 0xEB, 0x00, 0x00, 0x59, 0xC6, 0x00, 0x00, 0x59, 0xCD, 0x4B, 0xA6, 0xB5, 0xF0, 0x78, 0x1D, 
+	0xB0, 0x85, 0xD0, 0x29, 0x2D, 0x00, 0x4C, 0xA5, 0x4B, 0xA4, 0x4B, 0xA5, 0x78, 0x18, 0x68, 0x19, 
+	0xB2, 0x46, 0x00, 0xB2, 0x68, 0x5B, 0x51, 0x13, 0x18, 0xCB, 0xB2, 0xD2, 0x1D, 0x82, 0x23, 0x06, 
+	0x25, 0x00, 0xB2, 0xDB, 0x3B, 0x01, 0xD5, 0x00, 0x1A, 0xF1, 0x00, 0x89, 0x31, 0x0C, 0x18, 0x6D, 
+	0x59, 0x09, 0x2A, 0x0B, 0x1C, 0x11, 0x39, 0x0C, 0xD9, 0x01, 0x00, 0x89, 0xB2, 0xC9, 0x3A, 0x01, 
+	0x58, 0x61, 0xB2, 0xD2, 0x1A, 0x6D, 0xD1, 0xEB, 0x2B, 0x00, 0x4A, 0x93, 0x30, 0x01, 0x70, 0x10, 
+	0xB2, 0xC0, 0x28, 0x0B, 0xB2, 0x40, 0x70, 0x13, 0xDD, 0x00, 0x78, 0x1B, 0x4B, 0x92, 0xD0, 0x00, 
+	0x2B, 0x00, 0x4B, 0x91, 0xE1, 0x15, 0x5E, 0x5B, 0x21, 0x14, 0xDA, 0x02, 0x42, 0x9D, 0x22, 0x01, 
+	0x4B, 0x8F, 0x4B, 0x8B, 0x70, 0x1A, 0x5E, 0x9E, 0x22, 0x10, 0x5F, 0x1B, 0x24, 0x12, 0x4B, 0x85, 
+	0x1A, 0xF6, 0x28, 0x00, 0x78, 0x18, 0x4B, 0x8A, 0xD1, 0x16, 0x68, 0x1B, 0x4F, 0x8A, 0x80, 0xBB, 
+	0x4C, 0x8A, 0x80, 0x3E, 0x78, 0x23, 0xD0, 0x02, 0x2B, 0x00, 0xF7, 0xFE, 0x49, 0x88, 0x78, 0x23, 
+	0xFE, 0xD7, 0xD0, 0x07, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x00, 0x93, 0x00, 0x1C, 0x0B, 
+	0x1C, 0x3A, 0xFE, 0x74, 0xF7, 0xFE, 0x7D, 0x9A, 0x4B, 0x7C, 0xDC, 0x07, 0x42, 0x96, 0x78, 0x1A, 
+	0x4B, 0x80, 0x29, 0x02, 0xB2, 0x51, 0x32, 0x01, 0xDC, 0x08, 0xE0, 0x05, 0x70, 0x1A, 0x42, 0x9E, 
+	0x7D, 0xDB, 0x4B, 0x7B, 0xDB, 0x02, 0x70, 0x1A, 0x22, 0x00, 0x4A, 0x76, 0x4B, 0x71, 0x68, 0x1B, 
+	0x68, 0x59, 0x18, 0xCB, 0x80, 0x15, 0x4B, 0x74, 0x80, 0x53, 0x78, 0x1B, 0x80, 0x96, 0xD0, 0x06, 
+	0x2B, 0x00, 0x93, 0x00, 0x23, 0x01, 0x21, 0x03, 0x20, 0x19, 0xF7, 0xFE, 0x23, 0x02, 0x4B, 0x6B, 
+	0xFE, 0x4F, 0x78, 0x1B, 0x4C, 0x64, 0xD0, 0x61, 0x2B, 0x00, 0x78, 0x2B, 0x4D, 0x6B, 0xD0, 0x03, 
+	0x2B, 0x00, 0x49, 0x6C, 0x20, 0x19, 0xFE, 0x9A, 0xF7, 0xFE, 0x78, 0x1B, 0x4B, 0x69, 0xD1, 0x05, 
+	0x2B, 0x00, 0x2A, 0x00, 0x78, 0x22, 0x4A, 0x61, 0xD0, 0x52, 0xE0, 0x4F, 0x70, 0x13, 0xD1, 0x4D, 
+	0x2B, 0x03, 0x2B, 0x00, 0x78, 0x2B, 0x20, 0x00, 0xD0, 0x03, 0xF7, 0xFE, 0x49, 0x63, 0x4B, 0x55, 
+	0xFE, 0x87, 0x78, 0x19, 0x4A, 0x62, 0xD1, 0x1A, 0x29, 0x00, 0x70, 0x18, 0x20, 0x01, 0x7D, 0xD6, 
+	0x7E, 0x13, 0x4A, 0x60, 0x4D, 0x5F, 0x3B, 0x01, 0xE0, 0x0B, 0x18, 0xF8, 0xB2, 0xDB, 0x5A, 0xA1, 
+	0x00, 0x44, 0x52, 0xA1, 0x00, 0xC9, 0x55, 0x41, 0x21, 0x00, 0xD1, 0xF4, 0x2B, 0x00, 0x1E, 0x59, 
+	0x46, 0x63, 0x2B, 0x00, 0xB2, 0xC9, 0x1C, 0x33, 0xD0, 0x23, 0x46, 0x8C, 0x01, 0x4F, 0x7E, 0x13, 
+	0xE7, 0xF4, 0x4A, 0x54, 0x7D, 0xD6, 0x3B, 0x01, 0xE0, 0x0E, 0xB2, 0xDB, 0x4D, 0x51, 0x00, 0x60, 
+	0x18, 0xFC, 0x00, 0xE4, 0x57, 0x64, 0x5A, 0x84, 0x94, 0x02, 0x1B, 0x64, 0x9D, 0x02, 0x2B, 0x00, 
+	0x52, 0x84, 0x1C, 0x0B, 0xD1, 0xF1, 0xB2, 0xC9, 0x1E, 0x59, 0xD0, 0x02, 0x2B, 0x00, 0x01, 0x4F, 
+	0x1C, 0x33, 0x4A, 0x3A, 0xE7, 0xF5, 0x31, 0x30, 0x1C, 0x11, 0x42, 0x8A, 0xC2, 0x08, 0x4B, 0x3B, 
+	0xD1, 0xFC, 0x70, 0x1A, 0x22, 0x00, 0x22, 0x01, 0x4B, 0x44, 0xE0, 0x60, 0x70, 0x1A, 0x4B, 0x43, 
+	0x78, 0x22, 0xD1, 0x06, 0x2A, 0x00, 0x21, 0x01, 0x4A, 0x40, 0x68, 0x1A, 0x70, 0x11, 0x60, 0x1A, 
+	0x18, 0x52, 0x22, 0x00, 0xE0, 0x55, 0x4B, 0x39, 0x60, 0x1A, 0x7E, 0x1C, 0x48, 0x3D, 0x49, 0x39, 
+	0x7D, 0xDB, 0x4B, 0x2D, 0x93, 0x02, 0x93, 0x03, 0x7C, 0x9B, 0x3B, 0x01, 0xE0, 0x11, 0x18, 0xF2, 
+	0xB2, 0xDB, 0x9D, 0x03, 0x56, 0x14, 0xD1, 0x07, 0x42, 0xAC, 0x00, 0x54, 0x4D, 0x31, 0x5A, 0x65, 
+	0x57, 0x57, 0x52, 0x67, 0x1B, 0xEF, 0x54, 0x14, 0x24, 0x00, 0xD1, 0xEE, 0x2B, 0x00, 0x1E, 0x65, 
+	0x46, 0x64, 0x2C, 0x00, 0xB2, 0xED, 0x9B, 0x02, 0xD0, 0x03, 0x46, 0xAC, 0x01, 0x6E, 0x4B, 0x2D, 
+	0xE7, 0xF4, 0x07, 0x5D, 0x68, 0x1B, 0x4B, 0x20, 0xD5, 0x2B, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x02, 
+	0xD0, 0x22, 0xF7, 0xFE, 0x49, 0x29, 0xE0, 0x1D, 0xFE, 0x03, 0x01, 0x62, 0x7D, 0xE9, 0x48, 0x21, 
+	0x1C, 0x0B, 0xE0, 0x08, 0x92, 0x02, 0x9A, 0x02, 0x3B, 0x01, 0x18, 0xD2, 0xB2, 0xDB, 0x5A, 0x12, 
+	0x00, 0x52, 0x08, 0xD2, 0x00, 0x5F, 0x2B, 0x00, 0x53, 0xBA, 0x4A, 0x13, 0xD1, 0xF4, 0x2A, 0x00, 
+	0x78, 0x12, 0x20, 0x02, 0xD0, 0x05, 0x4A, 0x0F, 0x93, 0x00, 0xF7, 0xFE, 0x1C, 0x03, 0x34, 0x01, 
+	0xFD, 0x8F, 0xE0, 0x01, 0xB2, 0xE4, 0x4E, 0x0B, 0x4D, 0x11, 0x42, 0xA3, 0x7E, 0x2B, 0xB0, 0x05, 
+	0xD8, 0xDC, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x10, 0xF4, 0x20, 0x00, 
+	0x11, 0xBC, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 
+	0x11, 0x3C, 0x20, 0x00, 0x11, 0x34, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 
+	0x59, 0xD2, 0x20, 0x00, 0x09, 0x20, 0x00, 0x00, 0x59, 0xD9, 0x00, 0x00, 0x59, 0xE2, 0x20, 0x00, 
+	0x09, 0xAE, 0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 
+	0x01, 0xBC, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x00, 0x58, 0x00, 0x00, 0x59, 0xEB, 0x4B, 0x25, 
+	0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0x87, 0xD1, 0x2B, 0x2B, 0x00, 0x4B, 0x24, 0x4A, 0x23, 0x78, 0x1B, 
+	0x7C, 0x90, 0x7E, 0xD2, 0x90, 0x04, 0xB2, 0x52, 0x4D, 0x22, 0x92, 0x05, 0xB2, 0x92, 0xE0, 0x1D, 
+	0x4A, 0x21, 0x4C, 0x21, 0x3B, 0x01, 0x5C, 0xE1, 0xB2, 0xDB, 0x42, 0xB9, 0x9F, 0x04, 0x00, 0x59, 
+	0xD1, 0x16, 0x0D, 0x49, 0xAE, 0xF1, 0x15, 0x28, 0x00, 0x5A, 0x88, 0x5A, 0x6E, 0xD0, 0x07, 0xB2, 
+	0x34, 0x46, 0x6F, 0x24, 0x14, 0x46, 0xA4, 0x45, 0xBC, 0x5F, 0xE7, 0x00, 0x59, 0xDA, 0x05, 0x00, 
+	0xF6, 0x5A, 0x6E, 0x52, 0x50, 0x1B, 0x80, 0x1B, 0x80, 0xE0, 0x01, 0x4F, 0x14, 0x52, 0x88, 0x54, 
+	0xF9, 0x21, 0x00, 0xD1, 0xDF, 0x2B, 0x00, 0x4C, 0x12, 0x4B, 0x0E, 0x48, 0x0F, 0x78, 0x19, 0xE0, 
+	0x05, 0x1C, 0x0B, 0xB2, 0xDB, 0x3B, 0x01, 0x5A, 0x15, 0x00, 0x5A, 0x53, 0x15, 0x08, 0xED, 0xD1, 
+	0xF7, 0x2B, 0x00, 0x78, 0x12, 0x4A, 0x0C, 0xD0, 0x05, 0x2A, 0x00, 0x93, 0x00, 0x20, 0x02, 0x1C, 
+	0x03, 0x4A, 0x08, 0xFD, 0x0E, 0xF7, 0xFE, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x11, 0x30, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 0x02, 0x14, 0x20, 
+	0x00, 0x0A, 0xA4, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x49, 0x09, 0xB5, 0x10, 0x48, 
+	0x09, 0x22, 0x50, 0xF9, 0xE2, 0xF0, 0x00, 0x49, 0x09, 0x4C, 0x08, 0x22, 0x42, 0x1C, 0x20, 0xF9, 
+	0xDC, 0xF0, 0x00, 0x7B, 0xA2, 0x4B, 0x07, 0x7D, 0xE3, 0x60, 0x1A, 0x7E, 0x23, 0x76, 0xE3, 0xBD, 
+	0x10, 0x77, 0x23, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x00, 
+	0x00, 0x74, 0x08, 0x20, 0x00, 0x11, 0x50, 0x49, 0x04, 0xB5, 0x08, 0x43, 0x41, 0x4B, 0x04, 0x18, 
+	0xC9, 0x48, 0x04, 0xF9, 0x60, 0xF0, 0x00, 0xBD, 0x08, 0xB2, 0xC0, 0xFF, 0xFF, 0xFE, 0x44, 0x00, 
+	0x02, 0x24, 0xFE, 0x00, 0x0F, 0x42, 0x40, 0x4C, 0x15, 0xB5, 0x10, 0x71, 0x23, 0x23, 0x00, 0x71, 
+	0x63, 0x23, 0x03, 0x72, 0x23, 0x23, 0x02, 0x78, 0x98, 0x4B, 0x12, 0x28, 0x03, 0x38, 0x02, 0xF0, 
+	0x00, 0xD8, 0x1D, 0x04, 0x0B, 0xF8, 0xE7, 0x20, 0xC7, 0x14, 0x02, 0x20, 0xD7, 0xE0, 0x00, 0xF7, 
+	0xFF, 0x70, 0xE0, 0x23, 0x02, 0xFF, 0xD9, 0xE0, 0x0E, 0x70, 0x20, 0x70, 0xE0, 0x20, 0xF4, 0xFF, 
+	0xD2, 0xF7, 0xFF, 0x70, 0x20, 0x23, 0x02, 0x23, 0x01, 0x71, 0xA3, 0x20, 0xF4, 0xE0, 0x06, 0xF7, 
+	0xFF, 0x70, 0xE0, 0x23, 0x01, 0xFF, 0xC9, 0x71, 0xA3, 0x70, 0x20, 0xBD, 0x10, 0x71, 0xE3, 0x20, 
+	0x00, 0x0A, 0xAA, 0x20, 0x00, 0x0D, 0x48, 0x4B, 0x59, 0xB5, 0xF0, 0x68, 0x1A, 0xB0, 0x87, 0x2A, 
+	0x08, 0x4B, 0x58, 0x22, 0x01, 0xD1, 0x01, 0x22, 0x00, 0xE0, 0x00, 0x4B, 0x56, 0x70, 0x1A, 0x33, 
+	0x01, 0x4C, 0x56, 0x2B, 0x00, 0x7F, 0xDB, 0x71, 0xE3, 0xD1, 0x00, 0x25, 0x01, 0x78, 0x23, 0x1C, 
+	0x28, 0x79, 0xA2, 0x40, 0x90, 0x00, 0xD9, 0x1A, 0xCB, 0xB2, 0x82, 0x4E, 0x50, 0x43, 0x53, 0xB2, 
+	0xDB, 0x10, 0xDB, 0x78, 0x22, 0x80, 0x33, 0x79, 0xA0, 0x23, 0xFA, 0x43, 0x53, 0x00, 0x9B, 0x1C, 
+	0x29, 0x4F, 0x4C, 0xB2, 0x88, 0x40, 0x81, 0x43, 0x58, 0x88, 0xB9, 0xF0, 0x00, 0x01, 0x09, 0xB2, 
+	0xC1, 0xF8, 0xFB, 0x78, 0x23, 0x80, 0x71, 0x79, 0xA0, 0x22, 0x2D, 0x1C, 0x2A, 0x43, 0x53, 0xB2, 
+	0x90, 0x40, 0x82, 0x46, 0x6B, 0x43, 0x58, 0x01, 0x09, 0x81, 0x19, 0xF8, 0xEC, 0xF0, 0x00, 0x80, 
+	0xB0, 0xB2, 0xC0, 0x79, 0xB9, 0x7A, 0x23, 0x1A, 0x18, 0x00, 0xD8, 0x00, 0xC0, 0x40, 0xA9, 0x30, 
+	0xE0, 0x19, 0x49, 0x79, 0xA2, 0x43, 0x48, 0x21, 0x08, 0x46, 0x6C, 0x40, 0x90, 0x5E, 0x61, 0xF0, 
+	0x00, 0x01, 0x49, 0x4A, 0x34, 0xF8, 0x8B, 0x7D, 0x11, 0x80, 0xF0, 0x4B, 0x36, 0x7D, 0xD0, 0xB2, 
+	0xC0, 0x18, 0x08, 0x7E, 0x17, 0x70, 0x18, 0x7E, 0x56, 0x70, 0x5F, 0x7F, 0x96, 0x96, 0x01, 0x43, 
+	0x66, 0x9C, 0x01, 0x18, 0x20, 0xB2, 0xF4, 0x70, 0x98, 0xB2, 0xC0, 0x7E, 0x96, 0x90, 0x02, 0x98, 
+	0x03, 0x96, 0x03, 0x43, 0x46, 0x7F, 0xD6, 0x19, 0xC7, 0xB2, 0xF0, 0x70, 0xDF, 0xB2, 0xFF, 0x46, 
+	0xB4, 0x7E, 0xD6, 0x18, 0x61, 0x44, 0x61, 0x71, 0x19, 0xB2, 0xC9, 0x19, 0x80, 0x7F, 0x16, 0xB2, 
+	0xC0, 0x9E, 0x02, 0x1A, 0x3F, 0x1A, 0x74, 0xB2, 0xFF, 0xB2, 0xE6, 0x71, 0x9E, 0x71, 0x58, 0x46, 
+	0xBC, 0x71, 0xDF, 0x1B, 0xEC, 0x7D, 0x57, 0x1C, 0x27, 0x97, 0x04, 0xB2, 0xFF, 0x43, 0x77, 0x73, 
+	0x9F, 0x97, 0x05, 0x46, 0x64, 0x7D, 0x97, 0x43, 0x65, 0x1B, 0xED, 0x9C, 0x04, 0x43, 0x47, 0x43, 
+	0x4C, 0x74, 0x5F, 0x46, 0x6F, 0x72, 0x18, 0x5D, 0xC7, 0x20, 0x14, 0xB2, 0xE4, 0xB2, 0xED, 0x74, 
+	0x1C, 0x73, 0xDD, 0x72, 0x99, 0x72, 0x5D, 0x73, 0x1E, 0x72, 0xDF, 0x7F, 0x51, 0x73, 0x5C, 0x29, 
+	0x00, 0x4B, 0x12, 0x46, 0x69, 0xD0, 0x03, 0x70, 0x19, 0x79, 0x09, 0x9C, 0x01, 0xE0, 0x03, 0x43, 
+	0x74, 0x9E, 0x03, 0x1C, 0x93, 0x70, 0x1C, 0x9F, 0x02, 0x32, 0x03, 0x7F, 0xDB, 0x7F, 0xD2, 0xB2, 
+	0x5B, 0x18, 0xBA, 0x40, 0x9A, 0x32, 0x01, 0xB0, 0x07, 0x4B, 0x09, 0xBD, 0xF0, 0x60, 0x1A, 0x20, 
+	0x00, 0x11, 0x50, 0x20, 0x00, 0x02, 0xFA, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x02, 0x04, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0x7C, 0x20, 
+	0x00, 0x09, 0x18, 0x46, 0x71, 0xB4, 0x02, 0x00, 0x49, 0x08, 0x49, 0x00, 0x49, 0x5C, 0x09, 0xBC, 
+	0x02, 0x44, 0x8E, 0x46, 0xC0, 0x47, 0x70, 0x46, 0x71, 0xB4, 0x03, 0x00, 0x40, 0x08, 0x49, 0x5A, 
+	0x09, 0x00, 0x49, 0x44, 0x8E, 0x00, 0x49, 0x47, 0x70, 0xBC, 0x03, 0xD0, 0x34, 0x29, 0x00, 0x22, 
+	0x00, 0x23, 0x01, 0x42, 0x88, 0xB4, 0x10, 0x24, 0x01, 0xD3, 0x2C, 0x42, 0xA1, 0x07, 0x24, 0x42, 
+	0x81, 0xD2, 0x04, 0x01, 0x09, 0xD2, 0x02, 0xE7, 0xF8, 0x01, 0x1B, 0x42, 0xA1, 0x00, 0xE4, 0x42, 
+	0x81, 0xD2, 0x04, 0x00, 0x49, 0xD2, 0x02, 0xE7, 0xF8, 0x00, 0x5B, 0xD3, 0x01, 0x42, 0x88, 0x43, 
+	0x1A, 0x1A, 0x40, 0x42, 0xA0, 0x08, 0x4C, 0x1B, 0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0x5C, 0x42, 
+	0xA0, 0x08, 0x8C, 0x1B, 0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0x9C, 0x42, 0xA0, 0x08, 0xCC, 0x1B, 
+	0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0xDC, 0xD0, 0x03, 0x28, 0x00, 0xD0, 0x01, 0x09, 0x1B, 0xE7, 
+	0xE3, 0x09, 0x09, 0xBC, 0x10, 0x1C, 0x10, 0x28, 0x00, 0x47, 0x70, 0x20, 0x00, 0xD0, 0x01, 0xB4, 
+	0x07, 0x43, 0xC0, 0xA1, 0x02, 0x48, 0x02, 0x90, 0x02, 0x18, 0x40, 0x46, 0xC0, 0xBD, 0x03, 0x00, 
+	0x00, 0x00, 0xD9, 0xD0, 0xF0, 0x29, 0x00, 0xF7, 0xFF, 0xB5, 0x03, 0xBC, 0x0E, 0xFF, 0xB9, 0x1A, 
+	0x89, 0x43, 0x42, 0x46, 0xC0, 0x47, 0x18, 0xD0, 0x41, 0x29, 0x00, 0x1C, 0x04, 0xB4, 0x10, 0x46, 
+	0xA4, 0x40, 0x4C, 0x22, 0x00, 0x23, 0x01, 0xD5, 0x00, 0x29, 0x00, 0x28, 0x00, 0x42, 0x49, 0x42, 
+	0x40, 0xD5, 0x00, 0xD3, 0x2C, 0x42, 0x88, 0x07, 0x24, 0x24, 0x01, 0xD2, 0x04, 0x42, 0xA1, 0xD2, 
+	0x02, 0x42, 0x81, 0x01, 0x1B, 0x01, 0x09, 0x00, 0xE4, 0xE7, 0xF8, 0xD2, 0x04, 0x42, 0xA1, 0xD2, 
+	0x02, 0x42, 0x81, 0x00, 0x5B, 0x00, 0x49, 0x42, 0x88, 0xE7, 0xF8, 0x1A, 0x40, 0xD3, 0x01, 0x08, 
+	0x4C, 0x43, 0x1A, 0xD3, 0x02, 0x42, 0xA0, 0x08, 0x5C, 0x1B, 0x00, 0x08, 0x8C, 0x43, 0x22, 0xD3, 
+	0x02, 0x42, 0xA0, 0x08, 0x9C, 0x1B, 0x00, 0x08, 0xCC, 0x43, 0x22, 0xD3, 0x02, 0x42, 0xA0, 0x08, 
+	0xDC, 0x1B, 0x00, 0x28, 0x00, 0x43, 0x22, 0xD7, 0x17, 0xAE, 0xF1, 0x16, 0x09, 0x1B, 0xD0, 0x03, 
+	0x09, 0x09, 0xD0, 0x01, 0x1C, 0x10, 0xE7, 0xE3, 0x2C, 0x00, 0x46, 0x64, 0x42, 0x40, 0xD5, 0x00, 
+	0x47, 0x70, 0xBC, 0x10, 0xD0, 0x06, 0x28, 0x00, 0x20, 0x00, 0xDB, 0x03, 0x08, 0x40, 0x43, 0xC0, 
+	0x20, 0x80, 0xE0, 0x01, 0xB4, 0x07, 0x06, 0x00, 0xA1, 0x02, 0x48, 0x02, 0x90, 0x02, 0x18, 0x40, 
+	0x46, 0xC0, 0xBD, 0x03, 0x00, 0x00, 0x00, 0x19, 0xD0, 0xEB, 0x29, 0x00, 0xF7, 0xFF, 0xB5, 0x03, 
+	0xBC, 0x0E, 0xFF, 0xA7, 0x1A, 0x89, 0x43, 0x42, 0x46, 0xC0, 0x47, 0x18, 0x46, 0xC0, 0x47, 0x70, 
+	0x1C, 0x05, 0xB5, 0xF0, 0xD9, 0x2F, 0x2A, 0x0F, 0x43, 0x03, 0x1C, 0x0B, 0x07, 0x9C, 0x1C, 0x05, 
+	0x1C, 0x0C, 0xD1, 0x2C, 0x1C, 0x15, 0x1C, 0x03, 0x3D, 0x10, 0x68, 0x26, 0x68, 0x66, 0x60, 0x1E, 
+	0x68, 0xA6, 0x60, 0x5E, 0x68, 0xE6, 0x60, 0x9E, 0x60, 0xDE, 0x34, 0x10, 0x2D, 0x0F, 0x33, 0x10, 
+	0x1C, 0x13, 0xD8, 0xF2, 0x09, 0x1B, 0x3B, 0x10, 0x01, 0x1B, 0x33, 0x01, 0x18, 0xC9, 0x18, 0xC5, 
+	0x40, 0x1A, 0x23, 0x0F, 0xD9, 0x0F, 0x2A, 0x03, 0x1C, 0x2C, 0x1C, 0x0E, 0xCE, 0x80, 0x1C, 0x13, 
+	0xC4, 0x80, 0x3B, 0x04, 0xD8, 0xFA, 0x2B, 0x03, 0x08, 0x9B, 0x1F, 0x13, 0x00, 0x9B, 0x33, 0x01, 
+	0x40, 0x22, 0x24, 0x03, 0x18, 0xED, 0x18, 0xC9, 0xD0, 0x05, 0x2A, 0x00, 0x5C, 0xCC, 0x23, 0x00, 
+	0x33, 0x01, 0x54, 0xEC, 0xD1, 0xFA, 0x42, 0x93, 0x46, 0xC0, 0xBD, 0xF0, 0x6D, 0x6C, 0x61, 0x50, 
+	0x69, 0x6E, 0x49, 0x20, 0x45, 0x27, 0x00, 0x74, 0x72, 0x65, 0x74, 0x6E, 0x00, 0x4E, 0x20, 0x27, 
+	0x65, 0x6C, 0x2D, 0x4E, 0x00, 0x21, 0x73, 0x73, 0x69, 0x78, 0x45, 0x27, 0x4E, 0x20, 0x27, 0x74, 
+	0x53, 0x20, 0x4E, 0x00, 0x53, 0x00, 0x50, 0x2F, 0x70, 0x65, 0x65, 0x6C, 0x72, 0x2D, 0x53, 0x00, 
+	0x74, 0x65, 0x73, 0x65, 0x53, 0x41, 0x46, 0x00, 0x64, 0x49, 0x00, 0x54, 0x41, 0x00, 0x65, 0x6C, 
+	0x76, 0x69, 0x74, 0x63, 0x70, 0x53, 0x00, 0x65, 0x00, 0x74, 0x63, 0x65, 0x63, 0x61, 0x74, 0x53, 
+	0x52, 0x00, 0x21, 0x6B, 0x41, 0x56, 0x47, 0x45, 0x65, 0x44, 0x00, 0x4C, 0x00, 0x79, 0x61, 0x6C, 
+	0x00, 0x43, 0x53, 0x4F, 0x53, 0x49, 0x4F, 0x4E, 0x6F, 0x54, 0x00, 0x45, 0x20, 0x68, 0x63, 0x75, 
+	0x54, 0x00, 0x6E, 0x4F, 0x68, 0x63, 0x75, 0x6F, 0x46, 0x46, 0x4F, 0x20, 0x5F, 0x54, 0x4C, 0x00, 
+	0x46, 0x4F, 0x52, 0x50, 0x4E, 0x49, 0x4C, 0x49, 0x69, 0x46, 0x00, 0x47, 0x00, 0x64, 0x65, 0x78, 
+	0x66, 0x41, 0x2D, 0x47, 0x00, 0x72, 0x65, 0x74, 0x76, 0x6F, 0x48, 0x3D, 0x12, 0x00, 0x72, 0x6F, 
+	0x0A, 0x0D, 0x07, 0x0E, 0x0C, 0x06, 0x04, 0x12, 0x05, 0x0F, 0x12, 0x09, 0x00, 0x12, 0x08, 0x11, 
+	0x45, 0x02, 0x10, 0x01, 0x4B, 0x00, 0x72, 0x72, 0x52, 0x20, 0x79, 0x65, 0x46, 0x45, 0x52, 0x00, 
+	0x49, 0x4E, 0x49, 0x20, 0x6D, 0x43, 0x00, 0x54, 0x74, 0x6C, 0x65, 0x44, 0x65, 0x52, 0x20, 0x61, 
+	0x65, 0x52, 0x2F, 0x66, 0x52, 0x00, 0x6C, 0x61, 0x4D, 0x00, 0x77, 0x61, 0x49, 0x20, 0x58, 0x41, 
+	0x5F, 0x4D, 0x43, 0x00, 0x54, 0x4C, 0x45, 0x44, 0x41, 0x4D, 0x5F, 0x41, 0x49, 0x4D, 0x5F, 0x58, 
+	0x78, 0x54, 0x00, 0x4E, 0x73, 0x73, 0x65, 0x6C, 0x66, 0x69, 0x44, 0x00, 0x49, 0x44, 0x00, 0x66, 
+	0x4E, 0x2F, 0x46, 0x46, 0x67, 0x69, 0x42, 0x00, 0x61, 0x72, 0x47, 0x20, 0x65, 0x4E, 0x00, 0x64, 
+	0x64, 0x45, 0x2D, 0x67, 0x52, 0x00, 0x65, 0x67, 0x00, 0x00, 0x66, 0x65, 0x00, 0x00, 0x49, 0x2D, 
+	0x01, 0x00, 0x00, 0xFF, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x01, 
+	0x20, 0x00, 0x0D, 0xA0, 0x20, 0x00, 0x02, 0x28, 0x00, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x11, 0x54, 
+	0x00, 0xFF, 0x02, 0x01, 0x04, 0x00, 0x04, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x45, 0x02, 0xFF, 0xFF, 0x07, 0x5A, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/CORE_120327_v7.c for-diff/drivers/input/touchscreen/mms100_ts/CORE_120327_v7.c
--- caf/drivers/input/touchscreen/mms100_ts/CORE_120327_v7.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/CORE_120327_v7.c	2015-10-08 21:26:20.032845000 +0900
@@ -0,0 +1,1425 @@
+static const struct firmware_data melfas_CORE = {
+	.section_name = "CORE",
+	.section_version = 0x45,
+	.start_page_addr = 1,
+	.end_page_addr = 22,
+	.compatible_version = 0x02,
+	.length = 22638,
+	.data = {
+	0xAE, 0xF1, 0x01, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x4F, 0x43, 0x00, 0x00, 0x5B, 0xFF, 0x00, 
+	0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0xF0, 0x03, 0xB5, 0xF7, 0xF0, 0x05, 0xFC, 0xC3, 0x20, 
+	0x00, 0xF8, 0x33, 0xFB, 0xF2, 0xF0, 0x05, 0x33, 0x33, 0x4B, 0x4E, 0x42, 0x5E, 0x78, 0x1B, 0x26, 
+	0x10, 0x41, 0x73, 0x4B, 0x4C, 0x1A, 0xF6, 0x4B, 0x4C, 0x70, 0x1E, 0x3A, 0x01, 0x68, 0x1A, 0x41, 
+	0x5A, 0x42, 0x53, 0x70, 0x1A, 0x4B, 0x4A, 0x78, 0x1C, 0x4B, 0x4A, 0xD1, 0x22, 0x2C, 0x00, 0x25, 
+	0x01, 0x4A, 0x49, 0x70, 0x1D, 0x70, 0x14, 0xFA, 0x52, 0xF0, 0x00, 0x1C, 0x28, 0x4B, 0x47, 0x70, 
+	0x9A, 0x78, 0xDA, 0xF0, 0x05, 0x70, 0x5C, 0xF0, 0x03, 0xFB, 0xD1, 0xF0, 0x01, 0xFB, 0x7F, 0x23, 
+	0x80, 0xFB, 0x17, 0x6C, 0x1A, 0x05, 0xDB, 0x43, 0x8A, 0x21, 0x7F, 0xF0, 0x00, 0x64, 0x1A, 0xF0, 
+	0x02, 0xFD, 0xF5, 0xF0, 0x01, 0xFF, 0x4B, 0xF0, 0x01, 0xFB, 0x0B, 0x4B, 0x3C, 0xFA, 0xA3, 0x68, 
+	0x1B, 0x20, 0x02, 0x4C, 0x3B, 0x47, 0x98, 0x2B, 0x00, 0x78, 0x23, 0x4B, 0x3A, 0xD1, 0x03, 0x2B, 
+	0x00, 0x78, 0x1B, 0x78, 0x23, 0xD0, 0x0F, 0xFC, 0x94, 0xF0, 0x00, 0x4B, 0x2E, 0x78, 0x22, 0xD0, 
+	0x01, 0x2A, 0x00, 0xE0, 0x01, 0x70, 0x1E, 0x70, 0x1A, 0x22, 0x0D, 0x23, 0x00, 0x4A, 0x31, 0x4A, 
+	0x31, 0x70, 0x13, 0x4B, 0x2C, 0x70, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4D, 0x2F, 0xD0, 0x2C, 0x2B, 
+	0x00, 0x78, 0x2B, 0x4C, 0x2A, 0xD0, 0x28, 0x68, 0x23, 0x20, 0x13, 0xF0, 0x00, 0x47, 0x98, 0xF0, 
+	0x03, 0xFA, 0x0F, 0xF0, 0x03, 0xFB, 0x08, 0x4B, 0x29, 0xFA, 0x8B, 0xF0, 0x01, 0x78, 0x18, 0xF0, 
+	0x00, 0xF8, 0xA1, 0x4A, 0x27, 0xFD, 0xC7, 0x70, 0x13, 0x23, 0x01, 0x80, 0x13, 0x4A, 0x26, 0xFF, 
+	0xDE, 0xF0, 0x02, 0x2B, 0x00, 0x78, 0x2B, 0x68, 0x23, 0xD1, 0xFC, 0x47, 0x98, 0x20, 0x14, 0xF9, 
+	0xF6, 0xF0, 0x00, 0xFA, 0xEF, 0xF0, 0x03, 0xFA, 0x72, 0xF0, 0x03, 0x78, 0x18, 0x4B, 0x1C, 0xF8, 
+	0x88, 0xF0, 0x01, 0x70, 0x1E, 0x4B, 0x10, 0xFF, 0x7E, 0xF0, 0x00, 0x78, 0x27, 0x4C, 0x0E, 0x28, 
+	0x13, 0xB2, 0x78, 0xE1, 0x8D, 0xD9, 0x00, 0xF8, 0xD4, 0xF0, 0x05, 0x01, 0x8C, 0x00, 0x74, 0x01, 
+	0x8C, 0x01, 0x78, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 
+	0x8C, 0x01, 0x8C, 0x00, 0x68, 0x01, 0x8C, 0x00, 0x3A, 0x01, 0x8C, 0x00, 0x5F, 0x00, 0x30, 0x01, 
+	0x89, 0x01, 0x8C, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x11, 0x50, 0x20, 
+	0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0xE9, 0x20, 0x00, 0x01, 0xEA, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x01, 0xF8, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x01, 0xE7, 0x20, 0x00, 0x01, 0xE5, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x03, 0x08, 0x22, 0x00, 0x4B, 0xB1, 0xF0, 
+	0x00, 0x70, 0x1A, 0x4B, 0xB0, 0xFE, 0x7D, 0x2B, 0x00, 0x78, 0x1B, 0xE1, 0x55, 0xD0, 0x00, 0x78, 
+	0x23, 0x4C, 0xAE, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0xAD, 0x20, 0x00, 0xFC, 0xB8, 0xF0, 0x03, 0x2B, 
+	0x00, 0x78, 0x23, 0x21, 0x01, 0xD0, 0x06, 0x4A, 0xAA, 0x20, 0x00, 0x90, 0x00, 0x1C, 0x0B, 0xFC, 
+	0x56, 0xF0, 0x03, 0x78, 0x98, 0x4B, 0xA8, 0xFA, 0x78, 0xF0, 0x03, 0x7B, 0xE8, 0x4D, 0xA7, 0xF8, 
+	0x52, 0xF0, 0x03, 0x60, 0x20, 0x4C, 0xA6, 0xF0, 0x03, 0x7C, 0x28, 0x23, 0x11, 0xF8, 0x4D, 0x56, 
+	0xEB, 0x60, 0x60, 0x43, 0x53, 0x7B, 0xEA, 0x4B, 0x9A, 0x60, 0xA3, 0x70, 0x1A, 0x22, 0x00, 0x78, 
+	0x1B, 0x4B, 0xA0, 0x78, 0x18, 0x4B, 0xA0, 0xF8, 0x14, 0xF0, 0x01, 0x4D, 0x9D, 0x4B, 0x95, 0x70, 
+	0x1C, 0x24, 0x00, 0xF0, 0x00, 0x78, 0x2B, 0xF0, 0x03, 0xFD, 0x29, 0xF0, 0x00, 0xFF, 0x8B, 0x70, 
+	0x2C, 0xFD, 0x25, 0x24, 0x01, 0x4B, 0x8F, 0xF0, 0x00, 0x70, 0x1C, 0x4B, 0x97, 0xFC, 0x9B, 0x05, 
+	0x9A, 0x68, 0x1B, 0x4A, 0x96, 0xD5, 0x13, 0x20, 0x04, 0x4B, 0x96, 0x4B, 0x96, 0x60, 0x1A, 0x43, 
+	0x01, 0x68, 0x19, 0x68, 0x19, 0x60, 0x19, 0x43, 0x81, 0x20, 0x02, 0x68, 0x19, 0x60, 0x19, 0x60, 
+	0x1C, 0x43, 0x0C, 0x21, 0x00, 0x4B, 0x91, 0x4B, 0x91, 0x60, 0x19, 0x4C, 0x91, 0x60, 0x1A, 0x68, 
+	0x23, 0x20, 0x03, 0xF0, 0x03, 0x47, 0x98, 0x68, 0x23, 0xF8, 0x3F, 0x47, 0x98, 0x20, 0x05, 0xFF, 
+	0xE4, 0xF0, 0x02, 0x4D, 0x8D, 0x4C, 0x8C, 0x42, 0x40, 0x20, 0x01, 0x1C, 0x2A, 0x1C, 0x21, 0xFC, 
+	0x4C, 0xF0, 0x04, 0x78, 0x1B, 0x4B, 0x79, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x88, 0x20, 0x0C, 0xFC, 
+	0x4E, 0xF0, 0x03, 0x68, 0x23, 0x4A, 0x87, 0x68, 0x2B, 0x80, 0x13, 0x4B, 0x73, 0x80, 0x53, 0x2B, 
+	0x00, 0x78, 0x1B, 0x23, 0x01, 0xD0, 0x06, 0x93, 0x00, 0x21, 0x02, 0x1C, 0x0B, 0x20, 0x0C, 0xFB, 
+	0xE6, 0xF0, 0x03, 0x20, 0x06, 0x4C, 0x7B, 0x47, 0x98, 0x68, 0x23, 0xFF, 0xF4, 0xF0, 0x03, 0xF9, 
+	0x64, 0xF0, 0x04, 0xFB, 0x98, 0xF0, 0x04, 0xF9, 0x62, 0xF0, 0x00, 0xFD, 0x06, 0xF0, 0x04, 0xFE, 
+	0x7E, 0xF0, 0x04, 0x78, 0x1B, 0x4B, 0x78, 0xD1, 0x2A, 0x2B, 0x00, 0x20, 0x07, 0x68, 0x23, 0xF0, 
+	0x01, 0x47, 0x98, 0x68, 0x23, 0xFA, 0x51, 0x47, 0x98, 0x20, 0x08, 0xFF, 0xB2, 0xF0, 0x02, 0xFF, 
+	0xBA, 0xF0, 0x02, 0x20, 0x09, 0x68, 0x23, 0xF0, 0x01, 0x47, 0x98, 0xF0, 0x01, 0xFA, 0x69, 0x68, 
+	0x23, 0xFB, 0xD1, 0x47, 0x98, 0x20, 0x0A, 0xFC, 0x6E, 0xF0, 0x01, 0xFB, 0x44, 0xF0, 0x02, 0x20, 
+	0x0B, 0x68, 0x23, 0xF0, 0x01, 0x47, 0x98, 0xF0, 0x01, 0xFE, 0xB8, 0x68, 0x23, 0xFF, 0xD7, 0x47, 
+	0x98, 0x20, 0x0E, 0xF8, 0x84, 0xF0, 0x02, 0xF9, 0xF2, 0xF0, 0x02, 0x20, 0x10, 0x68, 0x23, 0xF0, 
+	0x00, 0x47, 0x98, 0x4B, 0x5B, 0xF9, 0x81, 0x68, 0x1B, 0x20, 0x0F, 0x4B, 0x5E, 0x47, 0x98, 0x2B, 
+	0x00, 0x78, 0x1B, 0xF0, 0x02, 0xD1, 0x3C, 0x4B, 0x5C, 0xFA, 0x4F, 0x4B, 0x5C, 0x68, 0x1A, 0xD1, 
+	0x04, 0x2A, 0x00, 0x68, 0x09, 0x49, 0x5B, 0xDD, 0x00, 0x29, 0x00, 0x4A, 0x47, 0x70, 0x1A, 0x32, 
+	0x32, 0x78, 0x19, 0x42, 0x91, 0x78, 0x12, 0x22, 0x00, 0xD3, 0x01, 0x78, 0x1B, 0x70, 0x1A, 0xD1, 
+	0x21, 0x2B, 0x00, 0x4C, 0x51, 0x4B, 0x53, 0x2B, 0x00, 0x68, 0x1B, 0x68, 0x20, 0xDD, 0x09, 0xD1, 
+	0x06, 0x28, 0x00, 0x78, 0x1B, 0x4B, 0x39, 0xD0, 0x02, 0x2B, 0x00, 0xF0, 0x03, 0x49, 0x4E, 0x4B, 
+	0x4E, 0xFB, 0xCF, 0x47, 0x98, 0x68, 0x1B, 0x2B, 0x00, 0x68, 0x23, 0x4B, 0x49, 0xDD, 0x0A, 0x28, 
+	0x00, 0x68, 0x18, 0x4B, 0x31, 0xD1, 0x06, 0x2B, 0x00, 0x78, 0x1B, 0x49, 0x48, 0xD0, 0x02, 0xFB, 
+	0xBE, 0xF0, 0x03, 0xFA, 0x72, 0xF0, 0x02, 0x78, 0x1A, 0x4B, 0x41, 0x70, 0x1A, 0x32, 0x01, 0x68, 
+	0x1B, 0x4B, 0x32, 0xD5, 0x23, 0x05, 0x9A, 0x68, 0x18, 0x4B, 0x34, 0x79, 0x1A, 0x4B, 0x2A, 0x4B, 
+	0x2F, 0x78, 0x19, 0x1C, 0x53, 0x1A, 0x18, 0xF0, 0x04, 0x40, 0x98, 0x4C, 0x23, 0xFF, 0x8D, 0x78, 
+	0x23, 0x4D, 0x2F, 0x2B, 0x00, 0x60, 0x28, 0x20, 0x00, 0xD0, 0x03, 0xF0, 0x03, 0x49, 0x39, 0x78, 
+	0x23, 0xFB, 0x9F, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x01, 0x20, 0x00, 0x23, 0x04, 0x1C, 0x2A, 0xF0, 
+	0x03, 0x90, 0x00, 0xF8, 0xB2, 0xAE, 0xF1, 0x02, 0x4B, 0x24, 0xFB, 0x3D, 0x68, 0x1A, 0x21, 0x01, 
+	0x60, 0x1A, 0x43, 0x8A, 0x05, 0xDB, 0x23, 0x80, 0x21, 0x01, 0x6C, 0x9A, 0x64, 0x9A, 0x43, 0x0A, 
+	0xFC, 0x1E, 0xF0, 0x00, 0x20, 0x00, 0x4B, 0x2D, 0xF0, 0x00, 0x56, 0x18, 0xE0, 0x17, 0xFE, 0x5D, 
+	0x78, 0x1B, 0x4B, 0x0F, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x29, 0x20, 0x05, 0xFB, 0x7A, 0xF0, 0x03, 
+	0xF0, 0x00, 0x20, 0x01, 0x20, 0x00, 0xFE, 0xF9, 0xFE, 0xF6, 0xF0, 0x00, 0x70, 0x23, 0x23, 0x13, 
+	0xF0, 0x00, 0xE0, 0x06, 0xE0, 0x03, 0xFC, 0x0D, 0x20, 0x11, 0x4B, 0x13, 0x47, 0x98, 0x68, 0x1B, 
+	0x70, 0x1F, 0x4B, 0x20, 0x46, 0xC0, 0xE5, 0xEB, 0x20, 0x00, 0x01, 0xEA, 0x20, 0x00, 0x01, 0xE0, 
+	0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x34, 0x20, 0x00, 0x0A, 0xAC, 0x20, 0x00, 0x0A, 0xAA, 
+	0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0xFC, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x00, 0x58, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 0x10, 
+	0xE0, 0x00, 0xE0, 0x18, 0x20, 0x00, 0x01, 0xFC, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x11, 0x34, 
+	0x20, 0x00, 0x11, 0x38, 0x00, 0x00, 0x59, 0x38, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x11, 0x48, 
+	0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0xCA, 0x20, 0x00, 0x0D, 0x9C, 0x00, 0x00, 0x59, 0x3E, 
+	0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x59, 0x47, 0x00, 0x00, 0x59, 0x51, 0x20, 0x00, 0x01, 0xB3, 
+	0x00, 0x00, 0x59, 0x5E, 0x20, 0x00, 0x00, 0x56, 0xF0, 0x01, 0xB5, 0x08, 0xF0, 0x01, 0xFD, 0x99, 
+	0x4B, 0x03, 0xFD, 0xB3, 0x47, 0x98, 0x68, 0x1B, 0xF9, 0xD2, 0xF0, 0x02, 0x46, 0xC0, 0xBD, 0x08, 
+	0x20, 0x00, 0x02, 0x00, 0xF0, 0x04, 0xB5, 0x10, 0x4C, 0x05, 0xFD, 0xEF, 0x68, 0x23, 0x20, 0x00, 
+	0xF0, 0x04, 0x47, 0x98, 0x68, 0x23, 0xFE, 0x19, 0x47, 0x98, 0x20, 0x01, 0x46, 0xC0, 0xBD, 0x10, 
+	0x20, 0x00, 0x01, 0xF8, 0x4D, 0x17, 0xB5, 0x7F, 0x1B, 0x5B, 0x4B, 0x17, 0x4B, 0x17, 0x93, 0x03, 
+	0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x06, 0xAA, 0x03, 0x21, 0x01, 0x90, 0x00, 0x23, 0x04, 
+	0xFA, 0xA0, 0xF0, 0x03, 0xE0, 0x18, 0x4E, 0x12, 0xDD, 0x00, 0x2C, 0x14, 0xB2, 0xE1, 0x24, 0x14, 
+	0xE0, 0x03, 0x1C, 0x08, 0xB2, 0xC0, 0x38, 0x01, 0x54, 0x33, 0x5C, 0x2B, 0xD1, 0xF9, 0x28, 0x00, 
+	0x78, 0x1B, 0x4B, 0x0A, 0xD0, 0x04, 0x2B, 0x00, 0x23, 0x01, 0x4A, 0x09, 0xF0, 0x03, 0x90, 0x00, 
+	0x9B, 0x03, 0xFA, 0x89, 0x1B, 0x1B, 0x19, 0x2D, 0x9C, 0x03, 0x93, 0x03, 0xD1, 0xE3, 0x2C, 0x00, 
+	0x46, 0xC0, 0xBD, 0x7F, 0x20, 0x00, 0x1E, 0x0C, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x01, 0xEB, 
+	0x20, 0x00, 0x11, 0x54, 0x4B, 0x1E, 0xB5, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4C, 0x1D, 0xD0, 0x37, 
+	0x70, 0x23, 0x23, 0x00, 0x20, 0x04, 0x4B, 0x1C, 0x47, 0x98, 0x68, 0x1B, 0x4A, 0x1C, 0x4B, 0x1B, 
+	0x68, 0x1B, 0x68, 0x59, 0x80, 0x53, 0x80, 0x11, 0x78, 0x1B, 0x4B, 0x1A, 0xD0, 0x06, 0x2B, 0x00, 
+	0x21, 0x02, 0x23, 0x01, 0x20, 0x18, 0x93, 0x00, 0xF0, 0x03, 0x1C, 0x0B, 0x78, 0x23, 0xFA, 0x5B, 
+	0x2B, 0x00, 0x4C, 0x15, 0x4B, 0x13, 0xD0, 0x1A, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x03, 
+	0xF0, 0x03, 0x49, 0x12, 0x4A, 0x12, 0xFA, 0xA7, 0x70, 0x13, 0x23, 0x01, 0x2A, 0x02, 0x68, 0x22, 
+	0x18, 0xD2, 0xDC, 0x04, 0x4A, 0x0F, 0x60, 0x22, 0xE0, 0x08, 0x70, 0x13, 0xFF, 0x74, 0xF7, 0xFF, 
+	0x22, 0x0D, 0x4B, 0x0D, 0x23, 0x00, 0x70, 0x1A, 0xE0, 0x00, 0x60, 0x23, 0xBD, 0x13, 0x60, 0x23, 
+	0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x11, 0x3D, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x01, 0x70, 
+	0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0x84, 0x00, 0x00, 0x58, 0xD0, 
+	0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0xBA, 0xB5, 0xF0, 
+	0x33, 0x04, 0xB0, 0x85, 0x24, 0x00, 0x7F, 0xDB, 0x22, 0x0A, 0x49, 0xB8, 0x3B, 0x01, 0xE0, 0x09, 
+	0x1C, 0x10, 0xB2, 0xDB, 0x18, 0x08, 0x43, 0x58, 0x5F, 0x40, 0x25, 0x3C, 0xD0, 0x00, 0x28, 0x00, 
+	0x2B, 0x00, 0x24, 0x01, 0x4B, 0xB2, 0xD1, 0xF3, 0x78, 0x1B, 0x4A, 0xB2, 0x3B, 0x01, 0xE0, 0x07, 
+	0x1D, 0x19, 0xB2, 0xDB, 0x5E, 0x89, 0x00, 0x49, 0xD0, 0x00, 0x29, 0x00, 0x2B, 0x00, 0x24, 0x01, 
+	0x4A, 0xAD, 0xD1, 0xF5, 0xD1, 0x04, 0x2C, 0x00, 0x49, 0xAC, 0x68, 0x13, 0xD0, 0x01, 0x42, 0x8B, 
+	0x60, 0x13, 0x33, 0x01, 0x22, 0x00, 0x4B, 0xAA, 0x4B, 0xA4, 0x70, 0x1A, 0x4B, 0xA2, 0x68, 0x1A, 
+	0xD1, 0x7C, 0x2A, 0x00, 0x68, 0x12, 0x4A, 0xA3, 0xD1, 0x78, 0x2A, 0x00, 0x32, 0x34, 0x1C, 0x1A, 
+	0x28, 0x00, 0x78, 0x10, 0x4A, 0xA3, 0xD1, 0x41, 0x2A, 0x01, 0x78, 0x12, 0x4B, 0xA2, 0xD1, 0x17, 
+	0x4B, 0xA2, 0x70, 0x18, 0x4B, 0xA2, 0x70, 0x1A, 0x4B, 0xA2, 0x70, 0x18, 0x2B, 0x00, 0x78, 0x1B, 
+	0x49, 0xA1, 0xD0, 0x02, 0xFA, 0x2E, 0xF0, 0x03, 0x22, 0x01, 0x4B, 0x99, 0xF0, 0x01, 0x70, 0x1A, 
+	0xF0, 0x01, 0xFC, 0x9F, 0x4B, 0x97, 0xFC, 0xB9, 0x70, 0x1A, 0x22, 0x00, 0x4A, 0x9B, 0xE1, 0x67, 
+	0x78, 0x1B, 0x33, 0x3C, 0x42, 0x9A, 0x68, 0x12, 0x4B, 0x96, 0xDB, 0x1F, 0x2B, 0x00, 0x78, 0x1B, 
+	0x49, 0x97, 0xD0, 0x02, 0xFA, 0x16, 0xF0, 0x03, 0x49, 0x87, 0x4B, 0x96, 0x31, 0x3D, 0x68, 0x1A, 
+	0x60, 0x1A, 0x32, 0x01, 0x42, 0x8A, 0x78, 0x09, 0x20, 0x00, 0xDB, 0x0F, 0x4B, 0x8A, 0x60, 0x18, 
+	0x4B, 0x8A, 0x70, 0x18, 0x4B, 0x8B, 0x70, 0x18, 0x42, 0x83, 0x78, 0x1B, 0x49, 0x8E, 0xD0, 0x02, 
+	0xFA, 0x00, 0xF0, 0x03, 0x22, 0x02, 0x4B, 0x82, 0x4B, 0x85, 0x70, 0x1A, 0x21, 0x00, 0x4A, 0x8B, 
+	0x68, 0x10, 0x70, 0x19, 0x60, 0x19, 0x4B, 0x85, 0x42, 0x88, 0x1C, 0x13, 0x38, 0x01, 0xDD, 0x0E, 
+	0x42, 0x8C, 0x60, 0x10, 0x60, 0x11, 0xD0, 0x00, 0x2A, 0x01, 0x68, 0x1A, 0xE1, 0x18, 0xD0, 0x00, 
+	0x60, 0x1A, 0x22, 0x00, 0x22, 0x03, 0x4B, 0x76, 0xE1, 0x28, 0x70, 0x1A, 0x49, 0x81, 0x4B, 0x80, 
+	0x8F, 0xDB, 0x33, 0x04, 0xD1, 0x00, 0x42, 0x8B, 0x49, 0x7F, 0xE1, 0x0B, 0x42, 0x99, 0x68, 0x09, 
+	0xE1, 0x06, 0xDA, 0x00, 0x48, 0x6C, 0x4B, 0x68, 0x31, 0x3E, 0x1C, 0x19, 0x68, 0x00, 0x78, 0x09, 
+	0xDA, 0x00, 0x42, 0x88, 0x33, 0x3F, 0xE0, 0xFD, 0x60, 0x13, 0x78, 0x1B, 0x33, 0x04, 0xE0, 0xF9, 
+	0x23, 0x00, 0x7F, 0xD8, 0x49, 0x75, 0x1C, 0x1A, 0x38, 0x01, 0xE0, 0x31, 0x24, 0x0A, 0xB2, 0xC0, 
+	0x4F, 0x5E, 0x43, 0x44, 0x26, 0x3C, 0x19, 0x3D, 0x2D, 0x00, 0x5F, 0xAD, 0x19, 0x0C, 0xDD, 0x27, 
+	0x5F, 0xE4, 0x27, 0x3C, 0xDD, 0x22, 0x2C, 0x00, 0x19, 0x0D, 0x00, 0x44, 0x4D, 0x57, 0x88, 0xAF, 
+	0x19, 0x2C, 0xB2, 0x3E, 0xB2, 0x25, 0x88, 0xA4, 0xD4, 0x02, 0x1B, 0x76, 0xB2, 0xA4, 0x1B, 0x3C, 
+	0x1B, 0xE4, 0xE0, 0x01, 0x1C, 0x05, 0xB2, 0xA4, 0x4F, 0x50, 0x4E, 0x64, 0x00, 0x6D, 0x35, 0x10, 
+	0x5B, 0xAC, 0x18, 0xA2, 0xB2, 0x27, 0x5B, 0xED, 0xB2, 0x92, 0xB2, 0x2E, 0xD4, 0x02, 0x1B, 0xBF, 
+	0xB2, 0xA4, 0x1B, 0x64, 0x1B, 0x2C, 0xE0, 0x01, 0x21, 0xFF, 0xAE, 0xF1, 0x03, 0x18, 0xE3, 0xB2, 
+	0xA4, 0x28, 0x00, 0xB2, 0x9B, 0x49, 0x56, 0xD1, 0xCB, 0x49, 0x4D, 0x60, 0x08, 0x49, 0x43, 0x78, 
+	0x0C, 0xD0, 0x40, 0x2C, 0x00, 0x78, 0x0B, 0x31, 0x34, 0xD0, 0x00, 0x2B, 0x00, 0x4B, 0x4A, 0xE0, 
+	0xB3, 0x2B, 0x00, 0x78, 0x1B, 0x49, 0x53, 0xD0, 0x02, 0xF9, 0x7E, 0xF0, 0x03, 0x4A, 0x52, 0x4C, 
+	0x4F, 0x80, 0x13, 0x68, 0x23, 0x68, 0x1B, 0x4B, 0x51, 0x4B, 0x43, 0x80, 0x53, 0x2B, 0x00, 0x78, 
+	0x1B, 0x23, 0x01, 0xD0, 0x06, 0x93, 0x00, 0x21, 0x02, 0x1C, 0x0B, 0x20, 0x00, 0xF9, 0x14, 0xF0, 
+	0x03, 0x68, 0x20, 0x49, 0x32, 0x4B, 0x3B, 0x8F, 0x4A, 0xDA, 0x14, 0x42, 0x90, 0x48, 0x47, 0x4A, 
+	0x41, 0x78, 0x12, 0x32, 0x45, 0x42, 0x90, 0x68, 0x00, 0x78, 0x1B, 0xDA, 0x0D, 0xD0, 0x00, 0x2B, 
+	0x00, 0x4B, 0x37, 0xE0, 0x89, 0x68, 0x1A, 0x31, 0x3C, 0x42, 0x8A, 0x78, 0x09, 0xE0, 0x82, 0xDB, 
+	0x00, 0x60, 0x1A, 0x32, 0x01, 0x22, 0x01, 0xE0, 0x7F, 0x4A, 0x31, 0x70, 0x1A, 0x60, 0x13, 0x23, 
+	0x00, 0x60, 0x13, 0x4A, 0x31, 0x1C, 0x08, 0xE0, 0x77, 0x78, 0x00, 0x30, 0x34, 0xD1, 0x72, 0x28, 
+	0x00, 0x8F, 0x09, 0x48, 0x32, 0x42, 0x88, 0x68, 0x00, 0x49, 0x2E, 0xDB, 0x09, 0x31, 0x45, 0x48, 
+	0x33, 0x68, 0x00, 0x78, 0x09, 0xDB, 0x02, 0x42, 0x88, 0x20, 0x01, 0x49, 0x22, 0x49, 0x1F, 0x70, 
+	0x08, 0x29, 0x00, 0x78, 0x09, 0x49, 0x15, 0xD1, 0x08, 0x49, 0x27, 0x8F, 0x08, 0xD0, 0x5A, 0x42, 
+	0x88, 0x78, 0x09, 0x49, 0x1C, 0xD0, 0x56, 0x29, 0x00, 0x68, 0x09, 0x49, 0x11, 0xDC, 0x05, 0x29, 
+	0x01, 0x8E, 0xC9, 0x49, 0x0E, 0xD8, 0x01, 0x42, 0x8A, 0xD9, 0x49, 0x42, 0x8B, 0x20, 0x00, 0x4B, 
+	0x13, 0x4B, 0x13, 0x70, 0x18, 0x70, 0x1A, 0x22, 0x01, 0x70, 0x18, 0x4B, 0x12, 0x78, 0x1B, 0x4B, 
+	0x12, 0xD0, 0x02, 0x42, 0x83, 0xF0, 0x03, 0x49, 0x11, 0x4B, 0x0A, 0xF9, 0x0F, 0x70, 0x1A, 0x22, 
+	0x01, 0xFB, 0x80, 0xF0, 0x01, 0xFB, 0x9A, 0xF0, 0x01, 0x46, 0xC0, 0xE0, 0x35, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x01, 
+	0xC8, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x01, 0xB3, 0x20, 0x00, 0x01, 0xB4, 0x20, 0x00, 0x01, 
+	0xDC, 0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x01, 0xD4, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x58, 
+	0xDA, 0x20, 0x00, 0x01, 0xD8, 0x00, 0x00, 0x58, 0xE4, 0x20, 0x00, 0x01, 0xD0, 0x00, 0x00, 0x58, 
+	0xEC, 0x20, 0x00, 0x01, 0xCC, 0x20, 0x00, 0x0D, 0x48, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x00, 0x11, 
+	0x34, 0x20, 0x00, 0x03, 0x20, 0x00, 0x00, 0x58, 0xF5, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x11, 
+	0x38, 0x22, 0x01, 0x4B, 0x0D, 0x4B, 0x0D, 0x70, 0x1A, 0x78, 0x1B, 0x33, 0x34, 0xD0, 0x10, 0x2B, 
+	0x00, 0x78, 0x1A, 0x4B, 0x0B, 0xD0, 0x0C, 0x2A, 0x00, 0x21, 0x00, 0x4A, 0x0A, 0x29, 0x03, 0x56, 
+	0x51, 0x49, 0x09, 0xD0, 0x07, 0x42, 0x48, 0x78, 0x09, 0x31, 0x01, 0x41, 0x41, 0x22, 0x00, 0x70, 
+	0x11, 0xB0, 0x05, 0x70, 0x1A, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x01, 0xB4, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x01, 0xDC, 0x20, 0x00, 0x01, 0xB3, 0x20, 0x00, 0x01, 0xDD, 0x4B, 0x54, 0xB5, 
+	0x10, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x53, 0xD0, 0x0A, 0x47, 0x98, 0x68, 0x1B, 0xFB, 0x1A, 0xF0, 
+	0x01, 0xFB, 0x34, 0xF0, 0x01, 0xFF, 0x56, 0xF0, 0x01, 0xFB, 0x90, 0xF0, 0x02, 0x21, 0x02, 0x4B, 
+	0x4E, 0x43, 0x8A, 0x68, 0x1A, 0x68, 0x19, 0x60, 0x1A, 0x05, 0xD2, 0x22, 0x80, 0x60, 0x91, 0x68, 
+	0x90, 0x20, 0x08, 0x68, 0x19, 0x60, 0x19, 0x43, 0x81, 0x68, 0x90, 0x68, 0x19, 0x68, 0x19, 0x60, 
+	0x91, 0x43, 0x81, 0x20, 0x04, 0x68, 0x1B, 0x60, 0x19, 0x60, 0x93, 0x68, 0x91, 0x78, 0x18, 0x4B, 
+	0x40, 0x78, 0x1B, 0x4B, 0x42, 0xD0, 0x32, 0x28, 0x00, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x40, 0x20, 
+	0x00, 0xF8, 0x7A, 0xF0, 0x03, 0x22, 0x80, 0x4B, 0x3F, 0x00, 0x52, 0x68, 0x19, 0x60, 0x1A, 0x43, 
+	0x0A, 0x23, 0xA0, 0x68, 0x1A, 0x68, 0x99, 0x05, 0xDB, 0x4B, 0x37, 0x60, 0x9A, 0x68, 0x19, 0x4A, 
+	0x3A, 0x60, 0x1A, 0x40, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x68, 0x99, 0x05, 0xDB, 0x4A, 0x37, 0x60, 
+	0x9A, 0x70, 0x11, 0x21, 0x01, 0x22, 0x80, 0x68, 0x19, 0x43, 0x0A, 0x04, 0x52, 0x46, 0xC0, 0x60, 
+	0x1A, 0x46, 0xC0, 0x46, 0xC0, 0xB6, 0x62, 0x46, 0xC0, 0x68, 0x19, 0x4A, 0x31, 0x60, 0x1A, 0x40, 
+	0x0A, 0x8F, 0x6F, 0xF3, 0xBF, 0x00, 0xC0, 0x20, 0xFA, 0xFC, 0x6E, 0xF0, 0x02, 0x2B, 0x00, 0xE0, 
+	0x11, 0x49, 0x2C, 0xD0, 0x02, 0xF8, 0x48, 0xF0, 0x03, 0xF0, 0x02, 0x48, 0x2B, 0x4B, 0x2B, 0xFC, 
+	0x65, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2A, 0xD1, 0x05, 0x2B, 0x00, 0x78, 0x1B, 0xF0, 0x02, 0xD1, 
+	0x01, 0x4B, 0x1D, 0xFE, 0x59, 0x68, 0x1A, 0x21, 0x02, 0x60, 0x1A, 0x43, 0x0A, 0x22, 0x80, 0x68, 
+	0x19, 0x68, 0x90, 0x05, 0xD2, 0x49, 0x23, 0x60, 0x91, 0x7F, 0xC8, 0x31, 0x01, 0x28, 0x00, 0x21, 
+	0x08, 0x68, 0x18, 0xD0, 0x06, 0x60, 0x19, 0x43, 0x01, 0x68, 0x90, 0x68, 0x19, 0xE0, 0x05, 0x60, 
+	0x91, 0x43, 0x88, 0x68, 0x18, 0x68, 0x19, 0x60, 0x18, 0x60, 0x91, 0x68, 0x90, 0x21, 0x04, 0x68, 
+	0x1A, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x20, 0xFA, 0x05, 0xDB, 0x00, 0xC0, 0x68, 
+	0x99, 0xF0, 0x02, 0x60, 0x9A, 0x4B, 0x06, 0xFC, 0x31, 0x2B, 0x00, 0x78, 0x1B, 0x4C, 0x12, 0xD0, 
+	0x06, 0x68, 0x23, 0x20, 0x0D, 0x68, 0x23, 0x47, 0x98, 0x47, 0x98, 0x20, 0x12, 0x46, 0xC0, 0xBD, 
+	0x10, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x00, 0x68, 0x20, 0x00, 0x00, 0x14, 0x20, 0x00, 0x01, 
+	0xEB, 0x00, 0x00, 0x58, 0xFB, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0xFF, 0xFE, 0xFF, 0x20, 0x00, 0x00, 
+	0x2C, 0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x59, 0x01, 0x00, 0x0F, 0x42, 0x40, 0x20, 0x00, 0x01, 
+	0xE5, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xF8, 0x4B, 0x31, 0xB5, 
+	0x10, 0x78, 0x19, 0x24, 0x02, 0xB2, 0x4A, 0x4B, 0x30, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2F, 0xD0, 
+	0x25, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2E, 0xD1, 0x21, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2D, 0xD1, 
+	0x1D, 0xD0, 0x07, 0x42, 0xA2, 0x7B, 0x80, 0x48, 0x2C, 0xD1, 0x03, 0x28, 0x00, 0x68, 0x00, 0x48, 
+	0x2B, 0xD0, 0x03, 0x28, 0x00, 0x60, 0x19, 0x21, 0x00, 0xE0, 0x0E, 0x24, 0x01, 0x68, 0x18, 0x4A, 
+	0x28, 0x42, 0x90, 0x68, 0x92, 0x30, 0x01, 0xDA, 0x01, 0x29, 0x00, 0x60, 0x18, 0x4B, 0x21, 0xD0, 
+	0x36, 0x68, 0x1B, 0x24, 0x00, 0xDA, 0x16, 0x42, 0x93, 0xB2, 0x63, 0xE0, 0x30, 0xD0, 0x2D, 0x42, 
+	0x93, 0xD0, 0x1D, 0x2B, 0x01, 0xD0, 0x02, 0x2B, 0x02, 0xD0, 0x0C, 0x2B, 0x00, 0x4B, 0x1D, 0xE0, 
+	0x24, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x03, 0xF0, 0x02, 0x49, 0x1B, 0x20, 0x00, 0xFF, 
+	0xA5, 0xFB, 0x78, 0xF0, 0x02, 0x4B, 0x17, 0xE0, 0x18, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 
+	0x03, 0xF0, 0x02, 0x49, 0x16, 0x4B, 0x12, 0xFF, 0x99, 0xF0, 0x02, 0x68, 0x58, 0x31, 0x77, 0xAE, 
+	0xF1, 0x04, 0xE0, 0x0B, 0xFB, 0x6B, 0x78, 0x1B, 0x4B, 0x10, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x11, 
+	0x20, 0x00, 0xFF, 0x8C, 0xF0, 0x02, 0x68, 0x18, 0x4B, 0x0B, 0xFB, 0x5E, 0xF0, 0x02, 0x70, 0x1C, 
+	0x4B, 0x02, 0xFB, 0x4C, 0xF0, 0x02, 0x46, 0xC0, 0xBD, 0x10, 0x20, 0x00, 0x00, 0x3C, 0x20, 0x00, 
+	0x03, 0x1C, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x01, 0xE2, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 
+	0x01, 0x70, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x02, 0xFC, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 
+	0x59, 0x09, 0x00, 0x00, 0x59, 0x0E, 0x00, 0x00, 0x59, 0x13, 0xF0, 0x02, 0xB5, 0x08, 0xBD, 0x08, 
+	0xFB, 0x5F, 0xF0, 0x02, 0xB5, 0x08, 0xBD, 0x08, 0xFB, 0x4D, 0xF0, 0x02, 0xB5, 0x08, 0x23, 0x80, 
+	0xFA, 0xE5, 0x6C, 0x9A, 0x05, 0xDB, 0x43, 0x0A, 0x21, 0x01, 0xF7, 0xFF, 0x64, 0x9A, 0xBD, 0x08, 
+	0xFF, 0xF1, 0xB0, 0x87, 0xB5, 0xF0, 0xFF, 0xF0, 0xF7, 0xFF, 0x4C, 0x79, 0x4A, 0x78, 0x78, 0x15, 
+	0x78, 0x53, 0xE0, 0x10, 0x48, 0x78, 0xB2, 0xDB, 0x3B, 0x01, 0x46, 0x67, 0x1C, 0x9A, 0x01, 0x79, 
+	0x18, 0xB2, 0x5B, 0x12, 0x00, 0x52, 0x00, 0x4F, 0x18, 0xC9, 0x4A, 0x73, 0x52, 0x3A, 0x54, 0x8F, 
+	0x27, 0x00, 0xD1, 0xEF, 0x2B, 0x00, 0x1E, 0x5A, 0x46, 0x63, 0x2B, 0x00, 0xB2, 0xD2, 0x1C, 0x56, 
+	0xD0, 0x04, 0x01, 0xB6, 0x1C, 0x2B, 0xE7, 0xF3, 0x46, 0x94, 0x4C, 0x6D, 0x4B, 0x6C, 0x48, 0x6D, 
+	0x78, 0x1B, 0x4A, 0x6D, 0x49, 0x67, 0x3B, 0x01, 0xE0, 0x0E, 0x5C, 0xE5, 0xB2, 0xDB, 0x35, 0x01, 
+	0x5C, 0xC6, 0x01, 0xAD, 0x36, 0x02, 0x00, 0x6D, 0x19, 0xAD, 0x00, 0x5D, 0x5A, 0x6E, 0x4D, 0x67, 
+	0x52, 0xAE, 0x54, 0xEE, 0x26, 0x00, 0xD1, 0xEE, 0x2B, 0x00, 0x95, 0x03, 0x25, 0x65, 0xE0, 0x66, 
+	0x4C, 0x5B, 0xFF, 0xB2, 0xF7, 0xFF, 0x78, 0x63, 0x78, 0x26, 0xE0, 0x2D, 0x96, 0x05, 0xB2, 0xDB, 
+	0x3B, 0x01, 0x18, 0xF0, 0x4F, 0x58, 0x00, 0x40, 0x9D, 0x04, 0x5B, 0xC0, 0x1C, 0x9A, 0x4F, 0x54, 
+	0x18, 0xAD, 0x5B, 0xEF, 0x00, 0x6D, 0xD4, 0x04, 0x1B, 0xC7, 0x5B, 0xED, 0x4F, 0x51, 0x95, 0x02, 
+	0x1B, 0x45, 0x4F, 0x4F, 0xE0, 0x03, 0x1A, 0x2D, 0x5B, 0xED, 0x98, 0x04, 0x95, 0x02, 0x48, 0x4C, 
+	0x18, 0x87, 0x5B, 0xC0, 0x00, 0x7F, 0x46, 0x84, 0x4F, 0x4B, 0x00, 0x42, 0x18, 0xF0, 0x46, 0x62, 
+	0x1C, 0x15, 0x4D, 0x49, 0x53, 0xEA, 0x9D, 0x02, 0x5C, 0x2F, 0xDA, 0x00, 0x42, 0xBD, 0x4F, 0x46, 
+	0x1C, 0x3D, 0x2B, 0x00, 0x54, 0x3D, 0x1C, 0x0B, 0xD1, 0xD2, 0xB2, 0xC9, 0x1E, 0x59, 0xD0, 0x05, 
+	0x2B, 0x00, 0x01, 0x80, 0x1C, 0x48, 0x01, 0x4E, 0x9B, 0x05, 0xE7, 0xF2, 0x90, 0x04, 0x4A, 0x3C, 
+	0x4B, 0x3F, 0xE0, 0x22, 0x78, 0x1B, 0x3B, 0x01, 0x4D, 0x3E, 0x4F, 0x3E, 0xB2, 0xDB, 0x48, 0x3E, 
+	0x5C, 0xEE, 0x00, 0x59, 0x5C, 0xFD, 0x5A, 0x09, 0x36, 0x01, 0x01, 0xB0, 0x35, 0x02, 0x00, 0x40, 
+	0x19, 0x40, 0x5A, 0x80, 0x5A, 0x87, 0xD4, 0x01, 0x1B, 0xCF, 0xE0, 0x00, 0x1A, 0x09, 0x01, 0xB6, 
+	0x1A, 0x41, 0x48, 0x2F, 0x19, 0x75, 0x5B, 0x46, 0x00, 0x6D, 0x00, 0x5D, 0x48, 0x33, 0x48, 0x33, 
+	0x52, 0x2E, 0x42, 0xA9, 0x5C, 0xC5, 0x1C, 0x29, 0xDA, 0x00, 0x2B, 0x00, 0x54, 0xC1, 0x9B, 0x03, 
+	0xD1, 0xDA, 0xB2, 0xDB, 0x3B, 0x01, 0x2B, 0x00, 0x93, 0x03, 0x78, 0x61, 0xD1, 0x92, 0x4A, 0x24, 
+	0x78, 0x24, 0xE0, 0x1E, 0x94, 0x04, 0xB2, 0xDB, 0x3B, 0x01, 0x18, 0xED, 0x01, 0x45, 0x00, 0x6D, 
+	0x4F, 0x21, 0x88, 0x25, 0x5B, 0xEE, 0x1C, 0x9D, 0x46, 0xAC, 0xD9, 0x09, 0x45, 0x66, 0x1B, 0xF6, 
+	0x88, 0x27, 0x46, 0xBC, 0x01, 0x8F, 0x00, 0x6D, 0x44, 0x65, 0x5A, 0xAF, 0xB2, 0xB6, 0xE0, 0x05, 
+	0x52, 0xAE, 0x19, 0x75, 0x01, 0x8E, 0x5A, 0xAE, 0x00, 0x6D, 0x52, 0xAE, 0x26, 0x00, 0xD1, 0xE1, 
+	0x2B, 0x00, 0x1E, 0x48, 0x1C, 0x01, 0x29, 0x00, 0xB2, 0xC0, 0x1C, 0x41, 0xD0, 0x05, 0x01, 0xCC, 
+	0x4F, 0x18, 0x19, 0xE4, 0x9B, 0x04, 0x4B, 0x11, 0xE7, 0xF2, 0x78, 0x1B, 0x4F, 0x13, 0x48, 0x15, 
+	0x4E, 0x10, 0x3B, 0x01, 0xE0, 0x10, 0x5C, 0xF5, 0xB2, 0xDB, 0x01, 0xED, 0x49, 0x13, 0x18, 0x6D, 
+	0x00, 0x5A, 0x88, 0x29, 0x5B, 0xD4, 0xD9, 0x03, 0x42, 0x8C, 0x1B, 0x64, 0x88, 0x2D, 0xE0, 0x01, 
+	0x52, 0x84, 0x52, 0x85, 0x25, 0x00, 0xD1, 0xEC, 0x2B, 0x00, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 
+	0x03, 0x0A, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 
+	0x09, 0x7C, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 
+	0x0A, 0xA4, 0x40, 0x00, 0x40, 0x02, 0x20, 0x00, 0x0D, 0x3C, 0x40, 0x00, 0x40, 0x82, 0xB0, 0x87, 
+	0xB5, 0xF0, 0xF8, 0x4A, 0xF0, 0x02, 0xF9, 0x60, 0xF0, 0x02, 0xD1, 0xFB, 0x28, 0x00, 0x78, 0x1B, 
+	0x4B, 0x52, 0xD0, 0x09, 0x2B, 0x02, 0x49, 0x52, 0x4B, 0x51, 0x78, 0x1A, 0x33, 0x40, 0x18, 0x54, 
+	0x42, 0x53, 0x33, 0x01, 0x54, 0xE0, 0xDD, 0xFA, 0x42, 0x93, 0x4F, 0x4E, 0x4E, 0x4C, 0x33, 0x40, 
+	0x1C, 0x33, 0x42, 0x64, 0x78, 0x1C, 0x78, 0xFA, 0xE0, 0x0C, 0x19, 0x12, 0x23, 0x80, 0x05, 0xDB, 
+	0xB2, 0xD2, 0xF7, 0xFF, 0x71, 0x1A, 0x78, 0x28, 0xFE, 0xC1, 0xF0, 0x03, 0x18, 0x20, 0x34, 0x01, 
+	0xFD, 0xF3, 0x35, 0x40, 0x1C, 0x35, 0x42, 0x9C, 0x78, 0x2B, 0x26, 0x00, 0xDD, 0xED, 0x78, 0x2C, 
+	0xE0, 0x25, 0x42, 0x64, 0x1C, 0x2F, 0xE0, 0x1A, 0x3F, 0x40, 0x78, 0xDA, 0x4B, 0x3E, 0x19, 0x12, 
+	0x23, 0x80, 0xB2, 0xD2, 0x05, 0xDB, 0xF7, 0xFF, 0x71, 0x1A, 0x78, 0x2D, 0xFE, 0xA7, 0x19, 0x65, 
+	0xA9, 0x04, 0x1C, 0x28, 0xAA, 0x05, 0xFD, 0xF8, 0xF0, 0x03, 0x9B, 0x04, 0x49, 0x35, 0x2B, 0xFF, 
+	0x5D, 0x4A, 0x23, 0xFF, 0xDD, 0x00, 0xDA, 0x00, 0x42, 0x9A, 0x55, 0x4A, 0x1C, 0x1A, 0x1C, 0x3D, 
+	0x34, 0x01, 0x78, 0x2B, 0x35, 0x40, 0xDD, 0xDF, 0x42, 0x9C, 0x4A, 0x2F, 0x36, 0x01, 0x78, 0x13, 
+	0x4D, 0x2B, 0x42, 0x9E, 0x35, 0x40, 0xF0, 0x01, 0xDB, 0xD3, 0x49, 0x2C, 0xFF, 0xDF, 0x78, 0x0D, 
+	0x78, 0x2A, 0x48, 0x27, 0x49, 0x2B, 0x23, 0x01, 0x78, 0x09, 0x1A, 0x9B, 0x91, 0x03, 0x4C, 0x29, 
+	0x21, 0x00, 0x46, 0x94, 0x18, 0x10, 0x18, 0xC6, 0xE0, 0x11, 0x78, 0x12, 0x1E, 0x72, 0x43, 0x6A, 
+	0x5C, 0xC7, 0x9A, 0x03, 0x92, 0x02, 0x9A, 0x02, 0x43, 0x57, 0x78, 0x72, 0x19, 0xD7, 0x18, 0xBA, 
+	0x43, 0x6A, 0xDB, 0x01, 0x42, 0x94, 0x1C, 0x19, 0xB2, 0x94, 0x45, 0x9C, 0x33, 0x01, 0x4B, 0x19, 
+	0xDC, 0xEB, 0x78, 0xDA, 0x4C, 0x1D, 0xB2, 0xC9, 0x18, 0x51, 0x4B, 0x13, 0x70, 0x99, 0x28, 0x00, 
+	0x78, 0x18, 0x78, 0x23, 0xD1, 0x05, 0xD0, 0x02, 0x2B, 0x00, 0xF0, 0x02, 0x49, 0x18, 0x78, 0x23, 
+	0xFD, 0xB7, 0xD0, 0x0B, 0x2B, 0x00, 0x20, 0x00, 0x4B, 0x0D, 0x78, 0x19, 0x33, 0x40, 0x00, 0x49, 
+	0x4A, 0x0C, 0xB2, 0xC9, 0x31, 0x01, 0x90, 0x00, 0x23, 0x01, 0xFD, 0x50, 0xF0, 0x02, 0x78, 0x1B, 
+	0x4B, 0x0E, 0xD0, 0x06, 0x2B, 0x00, 0x20, 0x00, 0x21, 0x01, 0x1C, 0x0B, 0x4A, 0x0D, 0xF0, 0x02, 
+	0x90, 0x00, 0xB0, 0x07, 0xFD, 0x45, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x01, 0xE0, 0x20, 0x00, 
+	0x0D, 0x48, 0x18, 0x12, 0xAE, 0xF1, 0x05, 0x20, 0x00, 0x01, 0x93, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x0D, 0x87, 0x20, 0x00, 0x00, 0x54, 0x20, 0x00, 0x00, 0x55, 0x00, 0x00, 0xFF, 0xFF, 0x20, 
+	0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x1A, 0x20, 0x00, 0x0A, 0xAC, 0x4B, 0x24, 0xB5, 0x13, 0x68, 
+	0x1B, 0x4C, 0x24, 0xD0, 0x0E, 0x2B, 0x00, 0x2B, 0x00, 0x78, 0x23, 0x20, 0x00, 0xD0, 0x03, 0xF0, 
+	0x02, 0x49, 0x21, 0xF7, 0xFF, 0xFD, 0x77, 0x78, 0x23, 0xFA, 0x6D, 0xD1, 0x02, 0x2B, 0x00, 0xF8, 
+	0x38, 0xF0, 0x02, 0x78, 0x23, 0xE7, 0xFE, 0xD0, 0x09, 0x2B, 0x00, 0x68, 0x23, 0x4C, 0x1B, 0xD5, 
+	0x05, 0x00, 0xDA, 0xFA, 0x5E, 0xF7, 0xFF, 0x4B, 0x19, 0x68, 0x22, 0x60, 0x23, 0x40, 0x13, 0x78, 
+	0x23, 0x4C, 0x14, 0xD0, 0x22, 0x2B, 0x00, 0x68, 0x1B, 0x4B, 0x14, 0xD5, 0x1E, 0x01, 0x5A, 0x20, 
+	0x00, 0x49, 0x14, 0xFD, 0x56, 0xF0, 0x02, 0x4A, 0x14, 0x4B, 0x13, 0x80, 0x11, 0x88, 0x19, 0x80, 
+	0x51, 0x88, 0x59, 0x80, 0x91, 0x88, 0x99, 0x80, 0xD3, 0x88, 0xDB, 0x78, 0x1B, 0x4B, 0x10, 0x78, 
+	0x23, 0x81, 0x13, 0xD0, 0x05, 0x2B, 0x00, 0x21, 0x05, 0x20, 0x00, 0x90, 0x00, 0x23, 0x02, 0xFC, 
+	0xE8, 0xF0, 0x02, 0x4A, 0x0B, 0x4B, 0x05, 0x40, 0x0A, 0x68, 0x19, 0xBD, 0x13, 0x60, 0x1A, 0x20, 
+	0x00, 0x1E, 0x0C, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x20, 0x20, 0x00, 0x00, 0x58, 0xEF, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x59, 0x27, 0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x11, 0x54, 0x20, 
+	0x00, 0x0A, 0xAA, 0xFB, 0xFF, 0xFF, 0xFF, 0x28, 0x02, 0xB5, 0x10, 0x28, 0x03, 0xD0, 0x04, 0x28, 
+	0x01, 0xD0, 0x45, 0xE0, 0x15, 0xD1, 0x33, 0xF9, 0xF6, 0xF7, 0xFF, 0x4C, 0x2A, 0x4B, 0x29, 0x78, 
+	0x1B, 0x33, 0x40, 0x22, 0x50, 0x49, 0x29, 0x48, 0x29, 0x70, 0x23, 0xF9, 0xA6, 0xF0, 0x04, 0x20, 
+	0x0D, 0x4B, 0x28, 0x47, 0x98, 0x68, 0x1B, 0xF9, 0xF4, 0xF7, 0xFF, 0x2B, 0x10, 0x78, 0x23, 0xE0, 
+	0x14, 0xD1, 0x1A, 0xF9, 0xE0, 0xF7, 0xFF, 0x4C, 0x1F, 0x4B, 0x1E, 0x78, 0x1B, 0x33, 0x40, 0x22, 
+	0x50, 0x49, 0x21, 0x48, 0x1E, 0x70, 0x23, 0xF9, 0x90, 0xF0, 0x04, 0x20, 0x0C, 0x4B, 0x1D, 0x47, 
+	0x98, 0x68, 0x1B, 0xF9, 0xDE, 0xF7, 0xFF, 0x2B, 0x10, 0x78, 0x23, 0x4B, 0x1B, 0xD1, 0x04, 0x70, 
+	0x9A, 0x78, 0xDA, 0xFA, 0xD1, 0xF0, 0x02, 0xFA, 0x54, 0xF0, 0x02, 0x4B, 0x18, 0xE0, 0x20, 0x2A, 
+	0x00, 0x78, 0x1A, 0x4A, 0x17, 0xD0, 0x05, 0x31, 0x01, 0x68, 0x11, 0x22, 0x00, 0x60, 0x11, 0x4B, 
+	0x15, 0x70, 0x1A, 0x2A, 0x13, 0x68, 0x1A, 0x22, 0x00, 0xDD, 0x05, 0x4B, 0x0A, 0x60, 0x1A, 0x70, 
+	0x1A, 0x22, 0x10, 0x4B, 0x0F, 0xE0, 0x0C, 0x2A, 0x3B, 0x68, 0x1A, 0x22, 0x00, 0xDD, 0x08, 0x4B, 
+	0x0E, 0x60, 0x1A, 0x68, 0x1B, 0x20, 0x01, 0x4B, 0x0D, 0x47, 0x98, 0x70, 0x1A, 0x22, 0x01, 0x46, 
+	0xC0, 0xBD, 0x10, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x00, 0x00, 0x74, 0x4A, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x74, 0x9A, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x01, 0xC4, 0x20, 0x00, 0x01, 0xC0, 0x20, 0x00, 0x01, 0xBC, 0x20, 0x00, 0x00, 0x6C, 0x20, 
+	0x00, 0x01, 0xE7, 0x4B, 0x0C, 0xB5, 0x10, 0x79, 0x99, 0x22, 0x01, 0xE0, 0x00, 0x23, 0x00, 0x1C, 
+	0x5C, 0x1C, 0x23, 0xB2, 0xE4, 0x1C, 0x10, 0x42, 0x81, 0x40, 0x98, 0x4A, 0x07, 0xDA, 0xF8, 0x71, 
+	0x13, 0x21, 0x07, 0x05, 0xD2, 0x22, 0x80, 0x02, 0x19, 0x40, 0x0B, 0x4B, 0x04, 0x6C, 0x10, 0x43, 
+	0x0B, 0x40, 0x03, 0xBD, 0x10, 0x64, 0x13, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x00, 0x5C, 0xFF, 
+	0xFF, 0xF8, 0xFF, 0x22, 0x07, 0x4B, 0x06, 0x23, 0x80, 0x79, 0xD9, 0x6C, 0x18, 0x05, 0xDB, 0x4A, 
+	0x04, 0x40, 0x11, 0x40, 0x02, 0x02, 0x09, 0x64, 0x1A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x0D, 0x48, 0xFF, 0xFF, 0xF8, 0xFF, 0xB0, 0x8D, 0xB5, 0xF0, 0xF7, 0xFF, 0x90, 0x04, 0x4B, 
+	0xC7, 0xFF, 0xC9, 0x78, 0xDE, 0x48, 0xC7, 0x96, 0x05, 0x21, 0x00, 0xE0, 0x07, 0x78, 0x9C, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x00, 0x76, 0x18, 0xEE, 0x2B, 0x00, 0x52, 0x31, 0x92, 0x05, 0xD1, 0xF8, 0x9E, 
+	0x05, 0x9A, 0x05, 0xB2, 0xD2, 0x3A, 0x01, 0xD0, 0x02, 0x2E, 0x00, 0x01, 0x55, 0x1C, 0x23, 0x9F, 
+	0x04, 0xE7, 0xF3, 0xD0, 0x05, 0x2F, 0x00, 0x9E, 0x05, 0x4B, 0xBB, 0x96, 0x06, 0x7B, 0x5B, 0xE0, 
+	0x04, 0x93, 0x03, 0x27, 0x02, 0x4B, 0xB9, 0x97, 0x06, 0x78, 0x9B, 0x46, 0x68, 0x93, 0x03, 0x56, 
+	0x0B, 0x21, 0x0C, 0x93, 0x0B, 0x4C, 0xB2, 0x93, 0x09, 0x42, 0x5B, 0x46, 0x6A, 0xE0, 0xAA, 0x56, 
+	0x9A, 0x23, 0x18, 0x1C, 0x27, 0x7A, 0xE6, 0xE0, 0x0D, 0x92, 0x02, 0x21, 0x00, 0x1C, 0x30, 0x9B, 
+	0x02, 0x1C, 0x2A, 0xF9, 0x4C, 0xF0, 0x02, 0x21, 0x01, 0x1C, 0x30, 0x9B, 0x02, 0x1C, 0x2A, 0xF9, 
+	0x46, 0xF0, 0x02, 0xB2, 0xF6, 0x36, 0x01, 0x7A, 0xFA, 0x7A, 0xBB, 0x1C, 0x3B, 0x18, 0xD2, 0xDB, 
+	0xEB, 0x42, 0x96, 0x2E, 0x00, 0x9E, 0x04, 0x3D, 0x0E, 0xD1, 0x00, 0x21, 0x18, 0x46, 0x68, 0x7B, 
+	0x5E, 0x56, 0x08, 0x90, 0x02, 0x4F, 0x9E, 0x1C, 0x30, 0xE0, 0x0D, 0x1C, 0x2A, 0x21, 0x00, 0xF0, 
+	0x02, 0x9B, 0x02, 0x1C, 0x30, 0xF9, 0x2D, 0x1C, 0x2A, 0x21, 0x01, 0xF0, 0x02, 0x9B, 0x02, 0x36, 
+	0x01, 0xF9, 0x27, 0x7B, 0x7A, 0xB2, 0xF6, 0x18, 0xD3, 0x7B, 0x3B, 0xDB, 0xEC, 0x42, 0x9E, 0xFC, 
+	0xAE, 0xF7, 0xFF, 0x78, 0x1B, 0x4B, 0x96, 0xD0, 0x06, 0x2B, 0x00, 0x1C, 0x18, 0x23, 0x01, 0xAA, 
+	0x0B, 0x1C, 0x19, 0xF0, 0x02, 0x93, 0x00, 0x25, 0x00, 0xFB, 0xAD, 0x4F, 0x90, 0x4E, 0x8C, 0x78, 
+	0x3B, 0xE0, 0x0E, 0xD0, 0x09, 0x2B, 0x00, 0x01, 0xEA, 0x4B, 0x8E, 0x23, 0x00, 0x18, 0xD2, 0x20, 
+	0x01, 0x78, 0xB1, 0x23, 0x02, 0x93, 0x00, 0xFB, 0x9C, 0xF0, 0x02, 0xB2, 0xED, 0x35, 0x01, 0x42, 
+	0x9D, 0x78, 0xF3, 0x9A, 0x0B, 0xD3, 0xED, 0xB2, 0xD2, 0x78, 0xB6, 0x92, 0x07, 0x96, 0x02, 0xE0, 
+	0x39, 0x4D, 0x80, 0xB2, 0xDB, 0x3B, 0x01, 0x1C, 0x99, 0x9E, 0x08, 0x4F, 0x82, 0x18, 0x71, 0x5B, 
+	0xCE, 0x00, 0x49, 0x00, 0x48, 0x18, 0xD1, 0xB2, 0xB7, 0x5B, 0x40, 0xDC, 0x14, 0x42, 0xB8, 0x1C, 
+	0x01, 0x1B, 0xC0, 0xDA, 0x01, 0x31, 0x80, 0x42, 0x40, 0x20, 0x80, 0x28, 0x7F, 0x18, 0xD7, 0x20, 
+	0x7F, 0xDD, 0x00, 0x54, 0x78, 0x49, 0x79, 0x00, 0x48, 0x18, 0xD1, 0x27, 0x1C, 0x52, 0x2E, 0x48, 
+	0x77, 0x46, 0x6E, 0x54, 0x0E, 0x5D, 0xBE, 0x9E, 0x04, 0xE0, 0x13, 0xD0, 0x10, 0x2E, 0x00, 0x42, 
+	0xB0, 0x4E, 0x74, 0x4E, 0x71, 0xD0, 0x08, 0x19, 0x80, 0x57, 0x8E, 0xDA, 0x03, 0x42, 0x87, 0x5C, 
+	0x0E, 0x48, 0x6F, 0x54, 0x0E, 0x36, 0x01, 0x27, 0x01, 0x18, 0xD1, 0x42, 0x7F, 0x00, 0x49, 0x2B, 
+	0x00, 0x52, 0x6F, 0x46, 0x63, 0xD1, 0xC6, 0xB2, 0xF6, 0x1E, 0x5E, 0xD0, 0x06, 0x2B, 0x00, 0x01, 
+	0x92, 0x1C, 0x72, 0x9B, 0x02, 0x92, 0x08, 0x46, 0xB4, 0x01, 0x72, 0x9B, 0x0B, 0xE7, 0xF1, 0x93, 
+	0x0B, 0x3B, 0x01, 0x9E, 0x09, 0x9D, 0x0B, 0xDB, 0x00, 0x42, 0xB5, 0x9F, 0x04, 0xE7, 0x4F, 0xD0, 
+	0x45, 0x2F, 0x00, 0x78, 0xE3, 0x78, 0xA0, 0x36, 0x61, 0xAE, 0xF1, 0x06, 0x78, 0x61, 0x90, 0x04, 
+	0x91, 0x06, 0x4A, 0x56, 0x94, 0x02, 0x78, 0x24, 0x7A, 0xD0, 0x7C, 0x11, 0x18, 0x08, 0x4C, 0x5B, 
+	0x90, 0x07, 0xB2, 0xC0, 0x18, 0x89, 0x7B, 0x12, 0x91, 0x08, 0xB2, 0xC9, 0xE0, 0x28, 0x4A, 0x55, 
+	0x3B, 0x01, 0x9E, 0x03, 0x2E, 0x00, 0xB2, 0xDB, 0x18, 0xC7, 0xD1, 0x01, 0x9E, 0x06, 0x55, 0xD6, 
+	0xD2, 0x02, 0x42, 0xB1, 0x42, 0xBB, 0x9F, 0x02, 0x18, 0xEF, 0xD3, 0x0C, 0x97, 0x09, 0x18, 0xC6, 
+	0x46, 0xBC, 0x5D, 0x97, 0x5D, 0xE7, 0x9F, 0x09, 0x9F, 0x08, 0x44, 0xBC, 0x46, 0x67, 0x44, 0xBC, 
+	0xE0, 0x0B, 0x55, 0x97, 0x18, 0xC6, 0x18, 0xEF, 0x5D, 0x97, 0x97, 0x09, 0x9F, 0x09, 0x46, 0xBC, 
+	0x44, 0xBC, 0x5D, 0xE7, 0x44, 0xBC, 0x9F, 0x07, 0x55, 0x97, 0x46, 0x67, 0xD1, 0xD7, 0x2B, 0x00, 
+	0x1E, 0x59, 0x1C, 0x0B, 0x2B, 0x00, 0xB2, 0xC9, 0x25, 0x26, 0xD0, 0x3E, 0x01, 0x48, 0x9B, 0x04, 
+	0xE7, 0xF3, 0x43, 0x4D, 0x79, 0xE2, 0x7C, 0x63, 0x18, 0x9A, 0x25, 0x07, 0x4A, 0x34, 0x92, 0x03, 
+	0x21, 0x02, 0x7B, 0xA0, 0x79, 0x26, 0x5E, 0x52, 0x00, 0x6D, 0x1A, 0xAD, 0xB2, 0xED, 0x19, 0x86, 
+	0x46, 0x84, 0x49, 0x34, 0x18, 0xB8, 0xE0, 0x09, 0x32, 0x01, 0x5C, 0x44, 0x54, 0x44, 0x19, 0x2C, 
+	0x42, 0xB2, 0xB2, 0xD2, 0x33, 0x01, 0xDB, 0xF7, 0x9A, 0x03, 0xB2, 0xDB, 0xDA, 0x02, 0x42, 0x93, 
+	0x01, 0x5F, 0x46, 0x62, 0x4A, 0x23, 0xE7, 0xF5, 0x7C, 0x10, 0x49, 0x2A, 0x79, 0x56, 0x7B, 0xD3, 
+	0x19, 0x9E, 0x79, 0x95, 0x46, 0x84, 0x19, 0x45, 0x18, 0xB8, 0xE0, 0x09, 0x32, 0x01, 0x5C, 0x44, 
+	0x54, 0x44, 0x3C, 0x0E, 0x42, 0xAA, 0xB2, 0xD2, 0x33, 0x01, 0xDB, 0xF7, 0x42, 0xB3, 0xB2, 0xDB, 
+	0x46, 0x62, 0xDA, 0x02, 0xE7, 0xF6, 0x01, 0x5F, 0x78, 0x1B, 0x4B, 0x1A, 0xD0, 0x13, 0x2B, 0x00, 
+	0x49, 0x1F, 0x20, 0x05, 0xFB, 0x10, 0xF0, 0x02, 0x78, 0x2B, 0xE0, 0x0E, 0xD0, 0x08, 0x2B, 0x00, 
+	0x01, 0x72, 0x4B, 0x18, 0x18, 0xD2, 0x78, 0xA1, 0x23, 0x01, 0x20, 0x05, 0xF0, 0x02, 0x93, 0x00, 
+	0x36, 0x01, 0xFA, 0xAB, 0xE0, 0x02, 0xB2, 0xF6, 0x4D, 0x0E, 0x4C, 0x0A, 0x78, 0xE3, 0x9E, 0x05, 
+	0xD8, 0xEA, 0x42, 0xB3, 0x20, 0x01, 0x21, 0x00, 0x42, 0x40, 0x1C, 0x0A, 0xF0, 0x02, 0x23, 0x02, 
+	0x20, 0x01, 0xF8, 0x01, 0x21, 0x01, 0x42, 0x40, 0x23, 0x02, 0x22, 0x00, 0xFF, 0xFA, 0xF0, 0x01, 
+	0xE0, 0x25, 0x78, 0xA4, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x01, 0xEB, 0x40, 0x00, 0x40, 0x84, 0x40, 0x00, 0x40, 0x00, 
+	0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x0A, 0xB3, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x75, 0x36, 
+	0x00, 0x00, 0x59, 0x2E, 0x21, 0x00, 0x3C, 0x01, 0x1C, 0x0A, 0xB2, 0xE4, 0x23, 0x01, 0x1C, 0x20, 
+	0xFF, 0xD8, 0xF0, 0x01, 0x1C, 0x20, 0x21, 0x01, 0x1C, 0x0B, 0x22, 0x00, 0xFF, 0xD2, 0xF0, 0x01, 
+	0xD1, 0xEF, 0x2C, 0x00, 0xFE, 0x30, 0xF7, 0xFF, 0xBD, 0xF0, 0xB0, 0x0D, 0xF0, 0x03, 0xB5, 0x08, 
+	0x4B, 0x05, 0xFD, 0xC5, 0x68, 0x1B, 0x20, 0x01, 0x20, 0x01, 0x47, 0x98, 0xF9, 0x22, 0xF0, 0x04, 
+	0xFD, 0xD6, 0xF0, 0x01, 0x46, 0xC0, 0xBD, 0x08, 0x20, 0x00, 0x01, 0xF8, 0x4A, 0x2C, 0xB5, 0xF7, 
+	0x60, 0x10, 0x20, 0x00, 0x4E, 0x2C, 0x4A, 0x2B, 0x4A, 0x2C, 0x8C, 0x11, 0x1D, 0x72, 0x60, 0x11, 
+	0x7D, 0xF1, 0x7F, 0xD2, 0x42, 0x44, 0x1E, 0x50, 0x4C, 0x29, 0x41, 0x60, 0x90, 0x00, 0x1A, 0x08, 
+	0x1D, 0xB0, 0x60, 0x20, 0x7E, 0x37, 0x7F, 0xC5, 0x42, 0x58, 0x1E, 0x6B, 0x1A, 0x3B, 0x41, 0x58, 
+	0x60, 0x63, 0x93, 0x01, 0xD1, 0x02, 0x2A, 0x01, 0x81, 0x20, 0x20, 0x00, 0x23, 0x26, 0xE0, 0x05, 
+	0x00, 0x49, 0x5E, 0xF0, 0xFE, 0xBA, 0xF0, 0x03, 0x2D, 0x01, 0x81, 0x20, 0x23, 0x00, 0xD1, 0x02, 
+	0xE0, 0x05, 0x81, 0x63, 0x5E, 0xF0, 0x23, 0x28, 0xF0, 0x03, 0x00, 0x79, 0x81, 0x60, 0xFE, 0xAF, 
+	0x9B, 0x01, 0x4F, 0x15, 0x5E, 0x3E, 0x20, 0x28, 0x00, 0x70, 0x00, 0x59, 0xF0, 0x03, 0x19, 0x80, 
+	0x43, 0x40, 0xFE, 0xA5, 0x00, 0x43, 0x4C, 0x12, 0x60, 0xE3, 0x00, 0x80, 0x61, 0x23, 0x18, 0xC3, 
+	0x5E, 0x3D, 0x20, 0x26, 0x00, 0x68, 0x9B, 0x00, 0x19, 0x40, 0x00, 0x59, 0xFE, 0x96, 0xF0, 0x03, 
+	0x61, 0x60, 0x37, 0x2C, 0x78, 0x3B, 0x61, 0xA0, 0xD1, 0x02, 0x2B, 0x00, 0x62, 0x25, 0x61, 0xE6, 
+	0x61, 0xE5, 0xE0, 0x01, 0x4B, 0x07, 0x62, 0x26, 0x42, 0x52, 0x22, 0x01, 0xBD, 0xF7, 0x60, 0x5A, 
+	0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0x20, 
+	0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x00, 0xCC, 0x4B, 0x24, 0xB5, 0xF0, 0x7E, 0x1E, 0xB0, 0x87, 
+	0x1C, 0x72, 0x7D, 0xDB, 0x33, 0x02, 0x1C, 0xD9, 0x92, 0x05, 0x93, 0x03, 0x4A, 0x20, 0x23, 0x00, 
+	0x1C, 0x18, 0x91, 0x04, 0x1A, 0xE5, 0x9C, 0x05, 0x97, 0x01, 0x01, 0xEF, 0x52, 0xB8, 0x5A, 0xBC, 
+	0x01, 0xAD, 0x9C, 0x04, 0x00, 0x4F, 0x19, 0x29, 0x4C, 0x1A, 0x5A, 0xBC, 0x27, 0x00, 0x52, 0xB8, 
+	0x55, 0x0F, 0x55, 0x2F, 0x4F, 0x18, 0x99, 0x01, 0x19, 0xCF, 0x33, 0x01, 0x88, 0x39, 0x97, 0x02, 
+	0x99, 0x03, 0x80, 0x38, 0x00, 0x79, 0x18, 0x6F, 0x5A, 0x89, 0x91, 0x01, 0x52, 0x88, 0x99, 0x01, 
+	0x18, 0x6D, 0x49, 0x12, 0x70, 0x29, 0x21, 0x00, 0x1A, 0xF7, 0x55, 0x39, 0x37, 0x01, 0x4D, 0x0C, 
+	0x22, 0x00, 0xDA, 0xD8, 0x9B, 0x03, 0x36, 0x01, 0x01, 0xB6, 0x1C, 0x11, 0x5A, 0x2F, 0x00, 0x58, 
+	0x18, 0xF0, 0x52, 0x2A, 0x5B, 0xEC, 0x00, 0x47, 0x4F, 0x06, 0x53, 0xEA, 0x3B, 0x01, 0x54, 0xF9, 
+	0x2B, 0x01, 0x54, 0x39, 0xB0, 0x07, 0xD1, 0xF2, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x09, 0xAE, 
+	0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x02, 0x40, 0x00, 0x20, 0x01, 
+	0x4B, 0x0D, 0xB5, 0xF7, 0x7D, 0xDE, 0x7E, 0x19, 0x36, 0x01, 0x1C, 0x48, 0x90, 0x01, 0x23, 0x00, 
+	0x1C, 0x32, 0x9C, 0x01, 0x01, 0xBF, 0x1A, 0xE7, 0x46, 0xAC, 0x1C, 0x95, 0x4C, 0x07, 0x44, 0xBC, 
+	0x46, 0x60, 0x25, 0x00, 0x55, 0x05, 0x3A, 0x01, 0xDA, 0xF5, 0x1C, 0x50, 0x1A, 0xCA, 0x33, 0x01, 
+	0xDA, 0xED, 0x32, 0x01, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x20, 0x00, 
+	0x4B, 0x0D, 0xB5, 0x00, 0x5E, 0x9B, 0x22, 0x08, 0x1C, 0x11, 0x4A, 0x0C, 0x78, 0x09, 0x31, 0x35, 
+	0x43, 0x4B, 0x7F, 0x12, 0x11, 0x9B, 0xB2, 0x52, 0xDA, 0x00, 0x42, 0x93, 0x4A, 0x08, 0x1C, 0x13, 
+	0x22, 0x80, 0x60, 0x13, 0x05, 0x1B, 0x05, 0xD2, 0x69, 0x90, 0x09, 0x19, 0x40, 0x03, 0x4B, 0x05, 
+	0x61, 0x93, 0x43, 0x0B, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x0D, 0x38, 0xF0, 0x00, 0xFF, 0xFF, 0x4A, 0xA9, 0xB5, 0xF0, 0x68, 0x11, 0x48, 0xA9, 
+	0xB0, 0x93, 0x68, 0x07, 0x22, 0x0D, 0x46, 0x8C, 0x25, 0x7F, 0x21, 0x00, 0x97, 0x01, 0x24, 0xFF, 
+	0x18, 0x83, 0x00, 0x90, 0x00, 0x5B, 0x4E, 0xA4, 0x87, 0x99, 0x18, 0xF3, 0x33, 0x38, 0x27, 0x00, 
+	0x46, 0x67, 0x72, 0x1F, 0x3A, 0x01, 0x50, 0x39, 0xB2, 0xD2, 0x9F, 0x01, 0x0F, 0x46, 0xAE, 0xF1, 
+	0x07, 0x26, 0x00, 0x50, 0x39, 0x72, 0x5D, 0x72, 0xDD, 0x72, 0x9C, 0x73, 0x1C, 0x2A, 0xFF, 0x80, 
+	0xD9, 0x4A, 0x9B, 0xD1, 0xE8, 0x7E, 0x11, 0x4B, 0x9B, 0x4C, 0x9B, 0x68, 0x98, 0x39, 0x01, 0x4D, 
+	0x97, 0x81, 0xA6, 0x90, 0x04, 0x42, 0x88, 0x60, 0x2E, 0x30, 0x01, 0xDA, 0x02, 0x60, 0x98, 0x90, 
+	0x04, 0x96, 0x11, 0x68, 0xDE, 0xDD, 0x02, 0x2E, 0x00, 0x96, 0x11, 0x3E, 0x01, 0x7D, 0xD1, 0x60, 
+	0xDE, 0x39, 0x01, 0x68, 0x1A, 0xDA, 0x01, 0x42, 0x8A, 0x60, 0x1A, 0x32, 0x01, 0x2A, 0x00, 0x68, 
+	0x5A, 0x3A, 0x01, 0xDD, 0x01, 0x9F, 0x04, 0x60, 0x5A, 0x42, 0x87, 0x98, 0x11, 0xE0, 0xA3, 0xDA, 
+	0x00, 0x68, 0x5B, 0x68, 0x19, 0x93, 0x06, 0x4A, 0x84, 0x68, 0x12, 0x4B, 0x88, 0x4C, 0x86, 0x68, 
+	0x1B, 0x4B, 0x80, 0x93, 0x0D, 0x68, 0x1B, 0x91, 0x10, 0x93, 0x0A, 0x92, 0x09, 0x48, 0x84, 0x89, 
+	0xA4, 0x9D, 0x06, 0x94, 0x0C, 0x42, 0xB5, 0x9E, 0x10, 0xE0, 0x81, 0xDD, 0x00, 0x46, 0x6F, 0x9A, 
+	0x04, 0x32, 0x01, 0x21, 0x10, 0x01, 0x92, 0x5D, 0xCF, 0x92, 0x02, 0x1C, 0x33, 0xE0, 0x05, 0x97, 
+	0x07, 0x54, 0x2F, 0x27, 0x00, 0x3B, 0x01, 0x9F, 0x06, 0xDC, 0x71, 0x42, 0x9F, 0x1C, 0x9C, 0x99, 
+	0x02, 0x5C, 0x2A, 0x19, 0x0D, 0x00, 0x69, 0x4E, 0x77, 0x2A, 0x0E, 0x5B, 0x89, 0x9D, 0x0D, 0xD8, 
+	0xF0, 0x2A, 0x00, 0x1B, 0x49, 0xE0, 0x71, 0xD1, 0x00, 0xB2, 0xD4, 0x3A, 0x01, 0x9F, 0x04, 0x9E, 
+	0x09, 0x18, 0xB5, 0x00, 0xA2, 0x68, 0x2E, 0x43, 0x4F, 0x44, 0x67, 0x46, 0xB4, 0x9D, 0x0A, 0x60, 
+	0x2F, 0x18, 0xAF, 0x1C, 0x0E, 0x43, 0x5E, 0x68, 0x3D, 0x19, 0x15, 0x46, 0xAC, 0x95, 0x01, 0x00, 
+	0x6D, 0x44, 0x66, 0x4D, 0x62, 0x9D, 0x01, 0x46, 0xAC, 0x44, 0xAC, 0x60, 0x3E, 0x8F, 0xAF, 0x46, 
+	0x65, 0x7A, 0x2E, 0x35, 0x38, 0x96, 0x03, 0x19, 0xCF, 0x57, 0xAE, 0x26, 0x09, 0x96, 0x01, 0x80, 
+	0xAF, 0x46, 0x6F, 0x9E, 0x0C, 0x26, 0x01, 0x46, 0xB4, 0x9E, 0x03, 0x44, 0xB4, 0x96, 0x03, 0x36, 
+	0x01, 0xB2, 0xB6, 0x46, 0x66, 0x26, 0x0C, 0x96, 0x0C, 0x9E, 0x04, 0x5D, 0xF7, 0x9F, 0x01, 0x72, 
+	0x2F, 0xDA, 0x00, 0x42, 0xBE, 0x4E, 0x51, 0x72, 0x6E, 0x00, 0x6D, 0x19, 0x15, 0x35, 0x38, 0x19, 
+	0x75, 0x57, 0xAE, 0x26, 0x0A, 0x42, 0xB7, 0x9F, 0x04, 0x72, 0xAF, 0xDD, 0x00, 0x19, 0x15, 0x4E, 
+	0x4B, 0x19, 0x75, 0x00, 0x6D, 0x26, 0x0B, 0x35, 0x38, 0x42, 0xB3, 0x57, 0xAE, 0x72, 0xEB, 0xDA, 
+	0x00, 0x4F, 0x46, 0x19, 0x15, 0x19, 0x7D, 0x00, 0x6D, 0x26, 0x0C, 0x35, 0x38, 0x42, 0xB3, 0x57, 
+	0xAE, 0x73, 0x2B, 0xDD, 0x00, 0x4C, 0x41, 0x19, 0x12, 0x18, 0xA2, 0x00, 0x52, 0x5F, 0x54, 0x25, 
+	0x3E, 0x42, 0xA1, 0x32, 0x38, 0x9F, 0x06, 0xDD, 0x8E, 0x80, 0xD1, 0x3B, 0x01, 0xDD, 0x8D, 0x42, 
+	0x9F, 0x9A, 0x11, 0x99, 0x04, 0x91, 0x04, 0x39, 0x01, 0xDB, 0x00, 0x42, 0x91, 0x46, 0x6B, 0xE7, 
+	0x71, 0x5A, 0xE4, 0x24, 0x30, 0x81, 0x9C, 0x4B, 0x38, 0xBD, 0xF0, 0xB0, 0x13, 0x43, 0xCA, 0x39, 
+	0x02, 0x40, 0x11, 0x17, 0xD2, 0x9E, 0x04, 0x91, 0x03, 0x43, 0x71, 0x9F, 0x03, 0x91, 0x0E, 0x43, 
+	0x5F, 0xB2, 0xD9, 0x25, 0x00, 0x91, 0x05, 0x97, 0x0F, 0x95, 0x01, 0x22, 0x03, 0x94, 0x08, 0x46, 
+	0x9C, 0x4F, 0x32, 0x4E, 0x31, 0x5C, 0xB1, 0x9C, 0x07, 0x5C, 0xBB, 0x9D, 0x05, 0x18, 0xEB, 0x18, 
+	0x61, 0x31, 0x01, 0xB2, 0x49, 0x01, 0x89, 0xB2, 0x5B, 0x18, 0xCB, 0x33, 0x02, 0xB2, 0x65, 0x5C, 
+	0x1C, 0x29, 0x0D, 0x1E, 0x69, 0x9B, 0x08, 0xD8, 0x27, 0x00, 0x8E, 0x9F, 0x02, 0x97, 0x0B, 0x18, 
+	0xFF, 0x18, 0x71, 0x9F, 0x09, 0x9F, 0x0A, 0x19, 0xBB, 0x19, 0xBF, 0x00, 0x49, 0x97, 0x00, 0x4E, 
+	0x1B, 0x18, 0x71, 0x9F, 0x01, 0x2F, 0x00, 0x31, 0x38, 0xB2, 0xE4, 0xD1, 0x1A, 0x9D, 0x0B, 0x94, 
+	0x01, 0xB2, 0xE4, 0x34, 0x0E, 0x68, 0x1C, 0x54, 0x2C, 0x9F, 0x00, 0x9E, 0x0E, 0x60, 0x1C, 0x19, 
+	0xA4, 0x9C, 0x0F, 0x68, 0x3B, 0x19, 0x1B, 0x9D, 0x03, 0x88, 0x8C, 0x60, 0x3B, 0x19, 0x2C, 0x7A, 
+	0x0B, 0x80, 0x8C, 0x33, 0x01, 0x1E, 0x53, 0x72, 0x0B, 0xD0, 0x10, 0x2A, 0x00, 0xE7, 0xBF, 0xB2, 
+	0xDA, 0x99, 0x08, 0x9E, 0x02, 0x18, 0x73, 0x9C, 0x01, 0xD0, 0xF4, 0x2C, 0x1F, 0xD0, 0xF2, 0x42, 
+	0xAC, 0x26, 0x1F, 0x25, 0x1F, 0x96, 0x01, 0x54, 0x1D, 0x2A, 0x00, 0x1E, 0x53, 0x46, 0x63, 0xD1, 
+	0xEE, 0x46, 0xC0, 0xE7, 0x18, 0x20, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0x48, 0x20, 0x00, 0x02, 
+	0x24, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x0D, 
+	0x38, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x59, 0xF8, 0x00, 0x00, 0x59, 
+	0xF4, 0xB0, 0x89, 0xB5, 0xF0, 0x49, 0x46, 0x23, 0x0F, 0xE0, 0x02, 0x22, 0xFF, 0x38, 0x01, 0x18, 
+	0x58, 0x3B, 0x01, 0x70, 0x02, 0xD1, 0xF9, 0x2B, 0x00, 0x68, 0xD8, 0x4B, 0x42, 0x68, 0x9A, 0x68, 
+	0x19, 0x90, 0x01, 0x68, 0x5B, 0x4B, 0x40, 0x93, 0x03, 0x68, 0x1B, 0x91, 0x02, 0x4B, 0x3F, 0x93, 
+	0x04, 0x93, 0x06, 0x7F, 0x5B, 0x9B, 0x07, 0xE0, 0x68, 0x4A, 0x3D, 0x1C, 0x88, 0x5C, 0x83, 0x18, 
+	0x18, 0x2B, 0x1F, 0xB2, 0x5B, 0x4A, 0x3B, 0xD1, 0x5A, 0x5A, 0x82, 0x00, 0x40, 0x20, 0x04, 0x9D, 
+	0x04, 0x92, 0x05, 0x1B, 0x52, 0x38, 0x01, 0x4A, 0x38, 0x56, 0x14, 0xB2, 0xC0, 0x44, 0x64, 0x4A, 
+	0x37, 0x34, 0x01, 0x56, 0x12, 0x01, 0xA4, 0x18, 0x8A, 0x4E, 0x31, 0x32, 0x02, 0x5C, 0xB4, 0x18, 
+	0xA2, 0xD8, 0x41, 0x2C, 0x0E, 0xD0, 0x3E, 0x2B, 0x1F, 0xD0, 0x3D, 0x42, 0xA3, 0xD0, 0x3B, 0x2C, 
+	0x00, 0x1E, 0x5D, 0x27, 0x0A, 0x4A, 0x2E, 0x43, 0x7D, 0x19, 0x55, 0x4E, 0x2D, 0x43, 0x7A, 0x1E, 
+	0x62, 0x27, 0x3E, 0x18, 0xB2, 0x27, 0x3E, 0x5F, 0xEE, 0x1C, 0x1A, 0x5F, 0xD5, 0xDD, 0x00, 0x42, 
+	0xAE, 0x25, 0x0A, 0x1C, 0x22, 0x43, 0x6A, 0x3A, 0x01, 0x9D, 0x06, 0x4E, 0x25, 0x27, 0x3E, 0x18, 
+	0xB2, 0x9E, 0x05, 0x5F, 0xD2, 0x11, 0x92, 0x43, 0x6A, 0xDD, 0x1D, 0x42, 0x96, 0xD9, 0x02, 0x42, 
+	0x9C, 0x1C, 0x23, 0x1C, 0x1A, 0x1E, 0x5E, 0x1C, 0x14, 0xB2, 0xF6, 0x4A, 0x15, 0x25, 0x00, 0x5D, 
+	0x97, 0x46, 0x6F, 0x97, 0x00, 0x3C, 0x01, 0x57, 0x7D, 0x1C, 0x6F, 0xB2, 0xE4, 0x42, 0xA5, 0xD0, 
+	0x09, 0x46, 0x6D, 0xDA, 0x03, 0x55, 0x15, 0x78, 0x2D, 0x42, 0xA5, 0xE0, 0x06, 0xB2, 0xE4, 0xDD, 
+	0x04, 0x55, 0x94, 0x55, 0x54, 0x1C, 0x23, 0xE0, 0x00, 0xD1, 0xAB, 0x28, 0x00, 0x9E, 0x03, 0x39, 
+	0x01, 0xDA, 0x98, 0x42, 0xB1, 0x3A, 0x01, 0x46, 0x62, 0x42, 0xBA, 0x9F, 0x01, 0x1C, 0x53, 0xDB, 
+	0x05, 0x99, 0x02, 0x01, 0x9B, 0x46, 0x94, 0x93, 0x07, 0xB0, 0x09, 0xE7, 0xF1, 0x46, 0xC0, 0xBD, 
+	0xF0, 0x20, 0x00, 0x02, 0xEC, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x0D, 0x38, 0x20, 0x00, 0x0D, 
+	0x48, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x59, 0xF8, 0x00, 0x00, 0x59, 
+	0xF4, 0x20, 0x00, 0x02, 0x24, 0x4A, 0xD4, 0xB5, 0xF0, 0x68, 0x11, 0xB0, 0x8D, 0x18, 0xD0, 0x23, 
+	0x00, 0x24, 0x00, 0x30, 0xBE, 0x3B, 0x0A, 0x5F, 0x00, 0x41, 0xA0, 0x1E, 0x44, 0x18, 0x09, 0x1C, 
+	0x1D, 0x3F, 0xD5, 0xAE, 0xF1, 0x08, 0xD1, 0xF4, 0x35, 0x8C, 0x60, 0x11, 0x4B, 0xCD, 0x32, 0xBE, 
+	0x68, 0x1B, 0x4B, 0xCC, 0x93, 0x03, 0x68, 0x1B, 0x24, 0x0E, 0x4E, 0xCB, 0x93, 0x05, 0x57, 0x33, 
+	0x3C, 0x01, 0xD1, 0x01, 0x1C, 0x5F, 0x1C, 0x03, 0xE0, 0x73, 0x56, 0xE8, 0x4D, 0xC7, 0xD1, 0xFA, 
+	0x1C, 0x46, 0x1C, 0x5F, 0x55, 0x2B, 0x98, 0x03, 0xD0, 0x6B, 0x19, 0x46, 0x00, 0x9D, 0x00, 0xA0, 
+	0x68, 0x37, 0x9F, 0x03, 0x46, 0xBC, 0x44, 0xBC, 0x58, 0x3F, 0x60, 0x37, 0x46, 0x67, 0x9F, 0x05, 
+	0x9E, 0x05, 0x68, 0x2E, 0x19, 0x75, 0x4F, 0xB9, 0x58, 0x38, 0x26, 0x0A, 0x18, 0x30, 0x1C, 0x30, 
+	0x60, 0x28, 0x18, 0x38, 0x43, 0x58, 0x27, 0x09, 0x30, 0x38, 0x79, 0x55, 0x57, 0xC7, 0xB2, 0x6F, 
+	0x46, 0xBC, 0xDD, 0x00, 0x45, 0xBC, 0x43, 0x5E, 0x72, 0x45, 0x79, 0x90, 0x4D, 0xB0, 0x36, 0x38, 
+	0x19, 0xAE, 0x57, 0xF7, 0x27, 0x0A, 0x42, 0xAF, 0xB2, 0x45, 0x72, 0xB0, 0xDA, 0x00, 0x4F, 0xAB, 
+	0x79, 0xD6, 0x26, 0x0A, 0x96, 0x06, 0x43, 0x58, 0x1C, 0x30, 0x30, 0x38, 0x18, 0x38, 0x57, 0x45, 
+	0x25, 0x0B, 0x46, 0x6D, 0x46, 0xAC, 0x78, 0x2D, 0x35, 0x18, 0x45, 0xAC, 0xB2, 0x6D, 0x46, 0x6F, 
+	0xDD, 0x03, 0x5D, 0xEF, 0x25, 0x18, 0x43, 0x5E, 0x72, 0xC7, 0x7A, 0x10, 0x4D, 0xA0, 0x37, 0x38, 
+	0x19, 0xAF, 0x57, 0xBE, 0x26, 0x0C, 0x42, 0xAE, 0xB2, 0x45, 0x73, 0x38, 0xDA, 0x00, 0x43, 0x58, 
+	0x20, 0x0A, 0x4F, 0x9A, 0x88, 0x56, 0x18, 0x38, 0x96, 0x06, 0x5F, 0x85, 0x26, 0x3E, 0x46, 0xAC, 
+	0x26, 0x18, 0x5F, 0x75, 0x46, 0x6D, 0x26, 0x0A, 0x30, 0x38, 0xDA, 0x03, 0x45, 0xAC, 0x25, 0x18, 
+	0x46, 0x6F, 0x80, 0xC7, 0x5B, 0xEF, 0x48, 0x91, 0x43, 0x5E, 0x19, 0x87, 0x39, 0x01, 0x88, 0x10, 
+	0x8F, 0xBB, 0x87, 0xBB, 0x18, 0xC3, 0x79, 0x10, 0x37, 0x38, 0x18, 0xC3, 0x7A, 0x3B, 0x3A, 0x0A, 
+	0x72, 0x3B, 0xD0, 0x00, 0x2C, 0x00, 0x4F, 0x89, 0xE7, 0x81, 0x1C, 0x3D, 0x1C, 0x26, 0x95, 0x03, 
+	0x35, 0x3C, 0x1C, 0x25, 0x60, 0x39, 0x22, 0x00, 0x48, 0x88, 0x56, 0x9A, 0x18, 0x33, 0xD1, 0x19, 
+	0x32, 0x01, 0x42, 0xB5, 0x70, 0x1D, 0x4B, 0x82, 0xD0, 0x12, 0x68, 0x1A, 0x00, 0xB1, 0x58, 0x50, 
+	0x00, 0xAB, 0x4A, 0x80, 0x50, 0xD0, 0x68, 0x12, 0x48, 0x7D, 0x50, 0xD1, 0x58, 0x51, 0x1C, 0x13, 
+	0x22, 0x0A, 0x18, 0xC0, 0x43, 0x6B, 0x99, 0x03, 0x30, 0x3C, 0xFB, 0x7E, 0xF0, 0x03, 0x35, 0x01, 
+	0x68, 0x3B, 0xDA, 0x05, 0x42, 0x9D, 0x36, 0x01, 0x99, 0x03, 0x91, 0x03, 0x31, 0x0A, 0xD1, 0xD9, 
+	0x2E, 0x0E, 0x68, 0x1B, 0x4B, 0x76, 0xD5, 0x3B, 0x06, 0xDA, 0x78, 0x1B, 0x4B, 0x75, 0xD0, 0x03, 
+	0x2B, 0x00, 0x49, 0x74, 0x20, 0x04, 0xFE, 0xD4, 0xF0, 0x01, 0x4E, 0x73, 0x25, 0x00, 0x1C, 0x69, 
+	0xE0, 0x2C, 0x68, 0x33, 0x01, 0x89, 0x4A, 0x71, 0x68, 0x77, 0x46, 0xA4, 0x91, 0x03, 0x9C, 0x03, 
+	0xE0, 0x12, 0x18, 0x61, 0x1C, 0x99, 0xB2, 0x40, 0x5C, 0x88, 0x2C, 0x0D, 0x1E, 0x44, 0x4C, 0x66, 
+	0xD8, 0x09, 0x38, 0x01, 0x18, 0x20, 0xB2, 0x40, 0x78, 0x00, 0xD0, 0x02, 0x1C, 0x44, 0xB2, 0xC0, 
+	0x30, 0x01, 0x3B, 0x01, 0x54, 0x88, 0xDA, 0xEA, 0x42, 0xBB, 0x46, 0x64, 0x4B, 0x61, 0x2B, 0x00, 
+	0x78, 0x1B, 0x4B, 0x63, 0xD0, 0x09, 0x01, 0xAA, 0x4F, 0x63, 0x19, 0xD2, 0x7D, 0xD9, 0x20, 0x04, 
+	0x23, 0x01, 0xF0, 0x01, 0x93, 0x00, 0x35, 0x01, 0xFE, 0x4D, 0x7E, 0x3B, 0x4F, 0x5D, 0xDB, 0xCE, 
+	0x42, 0x9D, 0x68, 0x1B, 0x4B, 0x5D, 0xDD, 0x10, 0x2B, 0x00, 0x4A, 0x5D, 0x4B, 0x5C, 0x80, 0x11, 
+	0x89, 0x99, 0x80, 0x53, 0x89, 0x1B, 0x78, 0x1B, 0x4B, 0x52, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 
+	0x23, 0x01, 0x20, 0x17, 0x93, 0x00, 0xF0, 0x01, 0x1C, 0x0B, 0x4B, 0x48, 0xFE, 0x33, 0x1C, 0x1D, 
+	0x48, 0x55, 0x49, 0x4F, 0xCD, 0x40, 0x89, 0x47, 0x96, 0x07, 0x8D, 0x0A, 0x97, 0x08, 0xB2, 0x16, 
+	0x68, 0x47, 0x69, 0x86, 0x96, 0x05, 0xB2, 0xB7, 0x97, 0x09, 0x97, 0x04, 0x1B, 0xD2, 0x31, 0x31, 
+	0xB2, 0x92, 0x92, 0x0A, 0x78, 0x09, 0x20, 0x00, 0x4A, 0x3E, 0x68, 0x17, 0x91, 0x06, 0xE0, 0x2F, 
+	0x90, 0x03, 0x23, 0x0A, 0x9A, 0x03, 0xCF, 0x01, 0x43, 0x53, 0x43, 0x48, 0x99, 0x05, 0x18, 0xCB, 
+	0x49, 0x37, 0x5E, 0x99, 0x22, 0x3C, 0x43, 0x59, 0x9B, 0x09, 0xFA, 0x94, 0xF0, 0x03, 0x4A, 0x42, 
+	0x99, 0x08, 0x78, 0x13, 0x18, 0x08, 0x80, 0x28, 0xB2, 0x80, 0xD1, 0x15, 0x2B, 0x00, 0x42, 0xB0, 
+	0xB2, 0x00, 0x9B, 0x06, 0xDA, 0x07, 0x43, 0x58, 0x1B, 0x80, 0x11, 0x80, 0x99, 0x04, 0x80, 0x28, 
+	0x18, 0x08, 0x9A, 0x05, 0xE0, 0x0A, 0x42, 0xB0, 0x1A, 0x10, 0x9B, 0x06, 0xDA, 0x06, 0x43, 0x58, 
+	0x1B, 0x80, 0x11, 0x80, 0x99, 0x0A, 0x80, 0x28, 0x1A, 0x08, 0x35, 0x02, 0x9A, 0x03, 0x92, 0x03, 
+	0x32, 0x01, 0x98, 0x07, 0x9B, 0x03, 0xDB, 0xCB, 0x42, 0x83, 0x49, 0x2E, 0x4D, 0x20, 0x4A, 0x28, 
+	0x68, 0x2D, 0x89, 0x0E, 0x95, 0x05, 0x96, 0x07, 0x68, 0x0D, 0x95, 0x08, 0x8C, 0xD3, 0xB2, 0x1F, 
+	0x69, 0x4D, 0x1C, 0x11, 0xB2, 0xAE, 0x96, 0x06, 0x97, 0x04, 0x78, 0x09, 0x31, 0x2F, 0xB2, 0x9B, 
+	0x1B, 0x9B, 0x32, 0x30, 0x91, 0x09, 0x4E, 0x15, 0x78, 0x12, 0x4B, 0x16, 0x93, 0x0B, 0x92, 0x0A, 
+	0x20, 0x00, 0x36, 0x20, 0x68, 0x1F, 0xE0, 0x50, 0x90, 0x03, 0x23, 0x0A, 0x9A, 0x03, 0xCF, 0x01, 
+	0x43, 0x53, 0x43, 0x48, 0x99, 0x04, 0x18, 0x5B, 0x49, 0x0D, 0x5E, 0x99, 0x22, 0x3C, 0x43, 0x59, 
+	0x9B, 0x08, 0xFA, 0x40, 0xF0, 0x03, 0x4A, 0x18, 0x99, 0x07, 0x78, 0x13, 0x18, 0x08, 0x80, 0x30, 
+	0xB2, 0x80, 0xD1, 0x36, 0x2B, 0x00, 0x42, 0xA8, 0xB2, 0x00, 0x9B, 0x09, 0xDA, 0x28, 0x43, 0x58, 
+	0x1B, 0x40, 0x11, 0x80, 0x99, 0x06, 0x80, 0x30, 0x18, 0x08, 0x46, 0xC0, 0xE0, 0x2B, 0x20, 0x00, 
+	0x02, 0x24, 0x20, 0x00, 0x00, 0x48, 0x20, 0x00, 0x00, 0x44, 0x20, 0x00, 0x02, 0xEC, 0x20, 0x00, 
+	0x00, 0x58, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x64, 0x20, 0x00, 0x10, 0xE4, 0x40, 0x00, 
+	0x20, 0x00, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x20, 0x42, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 
+	0x01, 0x70, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x01, 0xDF, 0x1A, 0x10, 
+	0x9A, 0x04, 0xDA, 0x06, 0x42, 0xA8, 0x1B, 0x40, 0x9B, 0x0A, 0x99, 0x0B, 0x43, 0x58, 0x1A, 0x08, 
+	0x11, 0x80, 0x9A, 0x03, 0x80, 0x30, 0x32, 0x01, 0x36, 0x02, 0x9B, 0x03, 0x92, 0x03, 0x42, 0x83, 
+	0x98, 0x05, 0x4B, 0x1B, 0xDB, 0xAA, 0x32, 0x2A, 0x1C, 0x1A, 0x1C, 0x1A, 0x78, 0x17, 0x78, 0x12, 
+	0x32, 0x2B, 0x5E, 0x5E, 0x21, 0x28, 0x25, 0x26, 0x92, 0x03, 0x33, 0x2C, 0x5F, 0x5A, 0x78, 0x1B, 
+	0x92, 0x04, 0x93, 0x06, 0x49, 0x14, 0x46, 0xB4, 0x25, 0x00, 0x26, 0x00, 0xE0, 0x1D, 0x2B, 0x00, 
+	0x5F, 0x8B, 0x4A, 0x11, 0xD0, 0x16, 0x23, 0x04, 0x18, 0xA8, 0x26, 0x20, 0x5E, 0xC2, 0x2F, 0x00, 
+	0x5F, 0x83, 0x46, 0x66, 0xD0, 0x01, 0x9E, 0x03, 0x1A, 0xB2, 0xD0, 0x01, 0x2E, 0x00, 0x1A, 0xF3, 
+	0x9E, 0x04, 0x2E, 0x00, 0x9E, 0x06, 0x1C, 0x16, 0xD0, 0x02, 0x1C, 0x33, 0x1C, 0x1A, 0x84, 0x03, 
+	0x80, 0x82, 0x31, 0x0A, 0x34, 0x01, 0x78, 0xAF, 0xAE, 0xF1, 0x09, 0x9E, 0x05, 0x35, 0x02, 0xDB, 
+	0xDE, 0x42, 0xB4, 0xBD, 0xF0, 0xB0, 0x0D, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0x60, 0x20, 
+	0x00, 0x02, 0x24, 0x4B, 0x0A, 0xB5, 0x30, 0x33, 0x04, 0x21, 0x00, 0x4A, 0x09, 0x7F, 0xDB, 0x1C, 
+	0x08, 0x24, 0x0A, 0x3B, 0x01, 0xE0, 0x07, 0x1C, 0x25, 0xB2, 0xDB, 0x19, 0x55, 0x43, 0x5D, 0x4D, 
+	0x05, 0x87, 0xA9, 0x2B, 0x00, 0x54, 0xE8, 0x60, 0x13, 0xD1, 0xF5, 0x46, 0xC0, 0xBD, 0x30, 0x20, 
+	0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x01, 0x64, 0x4A, 0x08, 0xB5, 0x00, 0x42, 
+	0x5B, 0x23, 0x01, 0x4B, 0x07, 0x60, 0x53, 0x60, 0x11, 0x21, 0x00, 0xE0, 0x04, 0x78, 0x1B, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x00, 0x40, 0x1D, 0x18, 0x2B, 0x00, 0x52, 0x81, 0xBD, 0x00, 0xD1, 0xF8, 0x20, 
+	0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x43, 0x40, 0x43, 0x49, 0x47, 0x70, 0x18, 0x40, 0xB5, 
+	0xF0, 0x47, 0x70, 0x22, 0x00, 0x4B, 0x83, 0x7F, 0xD9, 0x33, 0x04, 0x1C, 0x0B, 0xB0, 0x87, 0x26, 
+	0x0A, 0x48, 0x81, 0xE0, 0x07, 0x1C, 0x15, 0xB2, 0xDB, 0x3B, 0x01, 0x43, 0x5C, 0x1C, 0x34, 0x87, 
+	0xA2, 0x19, 0x04, 0x72, 0x25, 0x34, 0x38, 0x2B, 0x00, 0x1C, 0x04, 0x4B, 0x7B, 0xD1, 0xF4, 0x1C, 
+	0x0B, 0x68, 0x1A, 0xDD, 0x00, 0x42, 0x91, 0x60, 0x23, 0x1C, 0x13, 0x4A, 0x79, 0x48, 0x78, 0x24, 
+	0x0E, 0x4B, 0x79, 0x3C, 0x01, 0x21, 0xFF, 0x00, 0xA5, 0xB2, 0xE4, 0x50, 0xAB, 0x55, 0x01, 0xD1, 
+	0xF8, 0x2C, 0x00, 0x1C, 0x25, 0x4B, 0x6F, 0x7F, 0xDB, 0x33, 0x04, 0x93, 0x03, 0x1C, 0x26, 0x69, 
+	0x1B, 0x4B, 0x72, 0x4B, 0x6D, 0x93, 0x04, 0x93, 0x05, 0x68, 0x1B, 0x4C, 0x70, 0xE0, 0x47, 0x2B, 
+	0x00, 0x5D, 0x63, 0x4C, 0x6F, 0xD0, 0x42, 0x58, 0xE3, 0x00, 0xAB, 0x01, 0x1B, 0x9C, 0x04, 0x93, 
+	0x01, 0x19, 0x1B, 0x00, 0x6A, 0x4B, 0x6C, 0x18, 0xD3, 0x27, 0x01, 0x42, 0x7F, 0x24, 0x00, 0xE0, 
+	0x20, 0x93, 0x02, 0x43, 0x63, 0x23, 0x0A, 0x18, 0xC3, 0x48, 0x60, 0x5E, 0x5B, 0x21, 0x3C, 0xD0, 
+	0x16, 0x2B, 0x00, 0x00, 0x63, 0x9A, 0x02, 0x88, 0x98, 0x18, 0xC3, 0x4A, 0x5B, 0x88, 0x93, 0x1C, 
+	0x23, 0x1A, 0xC0, 0x00, 0x5B, 0x33, 0x10, 0x9A, 0x02, 0x5A, 0x99, 0x8B, 0x13, 0xB2, 0x00, 0xB2, 
+	0x09, 0x1A, 0xC9, 0xFF, 0x98, 0xF7, 0xFF, 0x42, 0x98, 0x9B, 0x01, 0x1C, 0x27, 0xDA, 0x01, 0x34, 
+	0x01, 0x90, 0x01, 0x98, 0x05, 0xB2, 0xE4, 0xDB, 0xDB, 0x42, 0x84, 0xD0, 0x0D, 0x1C, 0x79, 0x49, 
+	0x50, 0x4B, 0x4F, 0x00, 0xBA, 0x57, 0xD8, 0xD0, 0x04, 0x30, 0x01, 0x9C, 0x01, 0x58, 0x88, 0xDD, 
+	0x03, 0x42, 0xA0, 0x9C, 0x01, 0xE0, 0x00, 0x55, 0xDD, 0x50, 0x8C, 0x9C, 0x03, 0x35, 0x01, 0x42, 
+	0xA3, 0xB2, 0xEB, 0x1C, 0x34, 0xD3, 0xB3, 0x4E, 0x44, 0x25, 0x00, 0x48, 0x44, 0xE0, 0x28, 0xB2, 
+	0x7B, 0x5D, 0x47, 0xD0, 0x21, 0x33, 0x01, 0xB2, 0xFF, 0x00, 0x69, 0x18, 0x71, 0x4B, 0x3E, 0x00, 
+	0x7A, 0x88, 0x89, 0x80, 0x91, 0x18, 0x9A, 0x31, 0x10, 0x1C, 0x29, 0x00, 0x49, 0x1C, 0x3A, 0x32, 
+	0x10, 0x5B, 0x89, 0x52, 0xD1, 0x00, 0x52, 0x1C, 0x10, 0x22, 0x0A, 0x1C, 0x11, 0x43, 0x78, 0x18, 
+	0x1B, 0x43, 0x69, 0x18, 0x71, 0x1C, 0x18, 0x31, 0x3C, 0x30, 0x3C, 0xF9, 0x40, 0xF0, 0x03, 0x00, 
+	0xAA, 0x4B, 0x34, 0x4B, 0x37, 0x58, 0xD2, 0x50, 0xFA, 0x00, 0xBF, 0xB2, 0xED, 0x35, 0x01, 0x42, 
+	0x9D, 0x68, 0x33, 0xE0, 0x3D, 0xDB, 0xD3, 0x57, 0x33, 0x4E, 0x2D, 0xD1, 0x36, 0x33, 0x01, 0x43, 
+	0x63, 0x23, 0x0A, 0x20, 0x3C, 0x18, 0xEB, 0x2B, 0x00, 0x5E, 0x1B, 0x4B, 0x25, 0xD0, 0x2F, 0x33, 
+	0x04, 0x4A, 0x2E, 0x23, 0x00, 0x7F, 0xDF, 0x4E, 0x29, 0xE0, 0x26, 0x2E, 0x00, 0x5C, 0xF6, 0x26, 
+	0x00, 0xD1, 0x20, 0x28, 0x00, 0x5F, 0x90, 0x4A, 0x21, 0xD1, 0x1C, 0x55, 0x11, 0x00, 0x67, 0x48, 
+	0x1D, 0x49, 0x1E, 0x88, 0xBF, 0x19, 0xCF, 0x18, 0x82, 0x00, 0x5A, 0x1C, 0x27, 0x80, 0x97, 0x1C, 
+	0x1A, 0x37, 0x10, 0x5A, 0x7F, 0x00, 0x7F, 0x00, 0x52, 0x32, 0x10, 0x22, 0x0A, 0x52, 0x17, 0x18, 
+	0xC0, 0x43, 0x53, 0x43, 0x63, 0x1C, 0x13, 0x31, 0x3C, 0x18, 0xC9, 0xF0, 0x03, 0x30, 0x3C, 0xE0, 
+	0x04, 0xF8, 0xFF, 0x32, 0x0A, 0x33, 0x01, 0x42, 0xB9, 0xB2, 0xD9, 0x34, 0x01, 0xD3, 0xD5, 0xE0, 
+	0x00, 0xB2, 0xE4, 0x68, 0x2B, 0x4D, 0x0D, 0xDB, 0xBD, 0x42, 0x9C, 0x49, 0x0C, 0x4B, 0x09, 0x7F, 
+	0xDD, 0x33, 0x04, 0x20, 0xFF, 0x4B, 0x12, 0x34, 0x0E, 0x1C, 0x1C, 0x42, 0xAA, 0x78, 0x1A, 0x5C, 
+	0x8A, 0xD2, 0x02, 0xE0, 0x00, 0x70, 0x1A, 0x33, 0x01, 0x70, 0x18, 0xD1, 0xF5, 0x42, 0xA3, 0xBD, 
+	0xF0, 0xB0, 0x07, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x02, 0x24, 0x20, 
+	0x00, 0x03, 0xE8, 0x20, 0x00, 0x10, 0xF8, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x09, 0x24, 0x20, 
+	0x00, 0x01, 0xEC, 0x20, 0x00, 0x00, 0xF8, 0x20, 0x00, 0x09, 0x80, 0x20, 0x00, 0x0D, 0xD8, 0x20, 
+	0x00, 0x02, 0xEC, 0x4B, 0x42, 0xB5, 0xF7, 0x60, 0x19, 0x21, 0x00, 0x24, 0x0A, 0x4B, 0x41, 0x4B, 
+	0x41, 0x60, 0x19, 0x33, 0x04, 0x1C, 0x08, 0x4D, 0x40, 0x7F, 0xDB, 0x46, 0xA4, 0x1C, 0x1A, 0x3A, 
+	0x01, 0xE0, 0x11, 0x1C, 0x26, 0xB2, 0xD2, 0x19, 0xAE, 0x43, 0x56, 0x7A, 0x36, 0x36, 0x38, 0xDA, 
+	0x00, 0x42, 0xB0, 0x46, 0x66, 0x1C, 0x30, 0x19, 0xAE, 0x43, 0x56, 0x5F, 0xF6, 0x27, 0x3C, 0xDA, 
+	0x00, 0x42, 0xB1, 0x2A, 0x00, 0x1C, 0x31, 0x4A, 0x32, 0xD1, 0xEB, 0x60, 0x11, 0x60, 0x50, 0x20, 
+	0x0A, 0x4A, 0x2F, 0x4A, 0x31, 0x68, 0x11, 0x3B, 0x01, 0xE0, 0x07, 0x1C, 0x04, 0xB2, 0xDB, 0x19, 
+	0x14, 0x43, 0x5C, 0x7A, 0x24, 0x34, 0x38, 0x1C, 0x14, 0x19, 0x09, 0xD1, 0xF4, 0x2B, 0x00, 0x60, 
+	0x19, 0x4B, 0x27, 0x2B, 0x00, 0x68, 0x13, 0x4B, 0x26, 0xDD, 0x0F, 0x68, 0x5B, 0x4A, 0x28, 0x80, 
+	0x53, 0x80, 0x11, 0x78, 0x1B, 0x4B, 0x27, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 
+	0x1D, 0x93, 0x00, 0xF0, 0x01, 0x1C, 0x0B, 0x68, 0x23, 0xFB, 0x8F, 0xDD, 0x19, 0x2B, 0x00, 0x23, 
+	0x08, 0x4A, 0x21, 0x4B, 0x21, 0x5E, 0xD1, 0x5F, 0x12, 0x24, 0x0C, 0x33, 0x3D, 0x1C, 0x18, 0x30, 
+	0x3C, 0x78, 0x1B, 0x78, 0x00, 0x43, 0x53, 0x18, 0xC3, 0x11, 0x9B, 0xDC, 0x09, 0x42, 0x99, 0x78, 
+	0x1B, 0x4B, 0x18, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x19, 0x20, 0x00, 0xFB, 0xCC, 0xF0, 0x01, 0xFE, 
+	0x40, 0xF7, 0xFF, 0x4A, 0x17, 0x4B, 0x11, 0x78, 0x12, 0x68, 0x1B, 0xDB, 0x12, 0x42, 0x93, 0x4A, 
+	0x12, 0x4B, 0x0B, 0x8E, 0xD1, 0x68, 0x18, 0x42, 0x88, 0x4B, 0x0A, 0x8F, 0x11, 0xDB, 0x03, 0x42, 
+	0x88, 0x68, 0x58, 0x8F, 0x52, 0xDA, 0x03, 0x42, 0x93, 0x68, 0x5B, 0x4B, 0x0E, 0xDB, 0x07, 0x70, 
+	0x1A, 0x22, 0x01, 0x2B, 0x00, 0xE0, 0x03, 0x4A, 0x0B, 0xD1, 0x01, 0xBD, 0xF7, 0x70, 0x13, 0x20, 
+	0x00, 0x11, 0x4C, 0x20, 0x00, 0x02, 0x0C, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x9C, 0x20, 
+	0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x0D, 0x48, 0x00, 
+	0x00, 0x59, 0x6C, 0x20, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0xF5, 0x45, 0xAB, 0xAE, 0xF1, 0x0A, 
+	0x1C, 0x04, 0xB5, 0x38, 0x2A, 0x00, 0x1C, 0x08, 0x43, 0x54, 0xD0, 0x07, 0x18, 0xD1, 0x43, 0x58, 
+	0x10, 0x4D, 0x18, 0x20, 0xF0, 0x02, 0x19, 0x40, 0xBD, 0x38, 0xFF, 0xBB, 0x1A, 0x43, 0xB5, 0x10, 
+	0x19, 0x1B, 0x17, 0xDC, 0xF7, 0xFF, 0x40, 0x63, 0xBD, 0x10, 0xFF, 0xEB, 0x4B, 0xA9, 0xB5, 0xF0, 
+	0x33, 0x04, 0x25, 0x00, 0x7F, 0xDC, 0xB0, 0x87, 0xE0, 0x46, 0x1C, 0x2E, 0xB2, 0xE4, 0x3C, 0x01, 
+	0x43, 0x62, 0x22, 0x0A, 0x31, 0x38, 0x18, 0x99, 0x28, 0x00, 0x88, 0x88, 0x4F, 0xA2, 0xD0, 0x3D, 
+	0x2F, 0x00, 0x5D, 0x3F, 0x49, 0xA1, 0xD1, 0x2A, 0x29, 0x00, 0x78, 0x09, 0x18, 0x9A, 0xD0, 0x07, 
+	0x32, 0x3C, 0x21, 0x01, 0x23, 0x02, 0x20, 0x1D, 0xF0, 0x01, 0x91, 0x00, 0x20, 0x0A, 0xFB, 0x07, 
+	0x4B, 0x9B, 0x43, 0x60, 0x18, 0x18, 0x49, 0x9B, 0x5F, 0xC2, 0x27, 0x3C, 0x46, 0x94, 0x30, 0x38, 
+	0x5F, 0xCA, 0x27, 0x26, 0x45, 0x94, 0x1C, 0x1F, 0x31, 0x4E, 0xDB, 0x08, 0x49, 0x96, 0x78, 0x0A, 
+	0x68, 0x49, 0x7A, 0x00, 0x11, 0x92, 0x43, 0x4A, 0xDA, 0x16, 0x42, 0x90, 0x43, 0x62, 0x22, 0x0A, 
+	0x87, 0xD5, 0x18, 0xBA, 0x72, 0x16, 0x32, 0x38, 0xE0, 0x08, 0x80, 0x95, 0xB2, 0x00, 0x4A, 0x8D, 
+	0x5F, 0xD2, 0x27, 0x28, 0xDD, 0x08, 0x42, 0x82, 0x72, 0x0E, 0x80, 0xCD, 0x4A, 0x8B, 0x80, 0x8D, 
+	0x50, 0x8D, 0x00, 0xA1, 0x3A, 0x01, 0x68, 0x1A, 0x4B, 0x85, 0x60, 0x1A, 0xD1, 0xB5, 0x2C, 0x00, 
+	0x4B, 0x87, 0x60, 0x1C, 0x4B, 0x7F, 0x73, 0x9C, 0x7F, 0xDC, 0x33, 0x04, 0x3C, 0x01, 0xE0, 0xC7, 
+	0x23, 0x0A, 0xB2, 0xE4, 0x18, 0xED, 0x43, 0x63, 0x35, 0x38, 0x8F, 0xAA, 0xD1, 0x00, 0x2A, 0x00, 
+	0x4B, 0x7C, 0xE0, 0x93, 0x8D, 0x1B, 0xB2, 0x12, 0x1A, 0x52, 0xB2, 0x19, 0x00, 0x5B, 0x10, 0x52, 
+	0x80, 0xAB, 0x18, 0xD3, 0x7B, 0x9A, 0x4B, 0x7A, 0xD1, 0x0D, 0x2A, 0x00, 0x57, 0x12, 0x4A, 0x79, 
+	0xD1, 0x09, 0x2A, 0x00, 0x21, 0x01, 0x4A, 0x78, 0x22, 0x80, 0x70, 0x11, 0x69, 0x50, 0x05, 0xD2, 
+	0x06, 0x00, 0x0E, 0x00, 0x61, 0x51, 0x43, 0x01, 0x73, 0x9A, 0x22, 0x01, 0x4B, 0x71, 0x4E, 0x73, 
+	0x78, 0x33, 0x57, 0x1A, 0xDB, 0x70, 0x42, 0x9A, 0x78, 0x1A, 0x4B, 0x6F, 0xD0, 0x01, 0x2A, 0x00, 
+	0x70, 0x1A, 0x22, 0x00, 0x00, 0x62, 0x4D, 0x66, 0x33, 0x01, 0x68, 0x2B, 0x18, 0xAB, 0x60, 0x2B, 
+	0x5F, 0xD9, 0x27, 0x04, 0x18, 0x9A, 0x4B, 0x6A, 0x5F, 0x90, 0x26, 0x04, 0x32, 0x10, 0x1C, 0x22, 
+	0x5F, 0x57, 0x00, 0x52, 0x5E, 0xD7, 0x97, 0x03, 0x17, 0xD3, 0x1A, 0x0A, 0x18, 0xD2, 0x9E, 0x03, 
+	0x1B, 0xF3, 0x40, 0x5A, 0x19, 0x9B, 0x17, 0xDE, 0x18, 0xD3, 0x40, 0x73, 0x4B, 0x59, 0x93, 0x04, 
+	0x5E, 0x9E, 0x22, 0x2E, 0x1C, 0x32, 0x9B, 0x04, 0xF7, 0xFF, 0x96, 0x05, 0x9A, 0x05, 0xFF, 0x39, 
+	0x1C, 0x06, 0x9B, 0x04, 0x1C, 0x38, 0x99, 0x03, 0xFF, 0x32, 0xF7, 0xFF, 0x1C, 0x13, 0x4A, 0x4D, 
+	0x78, 0x1B, 0x33, 0x2D, 0xB2, 0x5B, 0x1C, 0x2A, 0xDD, 0x07, 0x42, 0x9E, 0x69, 0xC9, 0x49, 0x55, 
+	0x42, 0xBE, 0x1A, 0xCF, 0x1E, 0x4E, 0xDB, 0x03, 0xE0, 0x00, 0x1A, 0xF6, 0x4B, 0x45, 0x1C, 0x1E, 
+	0x78, 0x1B, 0x33, 0x2E, 0x42, 0x98, 0xB2, 0x5B, 0x49, 0x4E, 0xDD, 0x07, 0x1A, 0xCF, 0x6A, 0x09, 
+	0xDB, 0x03, 0x42, 0xB8, 0x1A, 0xC0, 0x1E, 0x48, 0x1C, 0x18, 0xE0, 0x00, 0x18, 0xD3, 0x00, 0x63, 
+	0x1C, 0x23, 0x80, 0x9E, 0x00, 0x5B, 0x33, 0x10, 0x25, 0x0A, 0x52, 0xE8, 0x4B, 0x3D, 0x43, 0x65, 
+	0x20, 0x30, 0x4E, 0x43, 0x19, 0x76, 0x5E, 0x1F, 0x21, 0x3C, 0x19, 0x55, 0x22, 0x3C, 0x5E, 0x70, 
+	0x1C, 0x3A, 0x5E, 0xA9, 0xFF, 0x0A, 0xF7, 0xFF, 0x87, 0xA8, 0x36, 0x38, 0x7A, 0x30, 0x35, 0x38, 
+	0x1C, 0x3A, 0x7A, 0x29, 0xFF, 0x02, 0xF7, 0xFF, 0x4B, 0x31, 0x72, 0x28, 0x18, 0x99, 0x00, 0x62, 
+	0x88, 0x89, 0x48, 0x37, 0x80, 0x91, 0x18, 0x82, 0x32, 0x10, 0x1C, 0x22, 0x5A, 0xD1, 0x00, 0x52, 
+	0x22, 0x0A, 0x52, 0x11, 0x43, 0x61, 0x1C, 0x11, 0x18, 0x59, 0x18, 0x40, 0x30, 0x3C, 0x1C, 0x0D, 
+	0xF0, 0x02, 0x31, 0x3C, 0x23, 0x3C, 0xFF, 0x07, 0x35, 0x38, 0x5E, 0xEA, 0x2A, 0x00, 0x4B, 0x29, 
+	0x49, 0x24, 0xD0, 0x0C, 0x31, 0x32, 0x5D, 0x1A, 0xB2, 0x50, 0x78, 0x09, 0xDA, 0x06, 0x42, 0x88, 
+	0x55, 0x1A, 0x32, 0x01, 0x42, 0x5B, 0x23, 0x01, 0xE0, 0x00, 0x80, 0xAB, 0x4D, 0x1C, 0x55, 0x1A, 
+	0xD0, 0x00, 0x2C, 0x00, 0x4E, 0x22, 0xE7, 0x33, 0x68, 0x32, 0x68, 0x29, 0x42, 0x91, 0x4B, 0x22, 
+	0x68, 0x19, 0xDA, 0x25, 0x31, 0x01, 0x48, 0x17, 0x30, 0x3E, 0x60, 0x19, 0xB2, 0x40, 0x78, 0x00, 
+	0xDA, 0x1C, 0x42, 0x81, 0x60, 0x2A, 0x4B, 0x0F, 0x7F, 0xDC, 0x33, 0x04, 0x3C, 0x01, 0xE0, 0x14, 
+	0x00, 0x63, 0xB2, 0xE4, 0x88, 0x92, 0x18, 0xF2, 0x80, 0x9A, 0x18, 0xEB, 0x33, 0x10, 0x1C, 0x23, 
+	0x5B, 0x9A, 0x00, 0x5B, 0x22, 0x0A, 0x53, 0x5A, 0x43, 0x61, 0x1C, 0x11, 0x18, 0x71, 0x18, 0x68, 
+	0x31, 0x3C, 0x30, 0x3C, 0xFE, 0xC6, 0xF0, 0x02, 0xD1, 0xE8, 0x2C, 0x00, 0x60, 0x1C, 0xE0, 0x00, 
+	0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xEC, 0x20, 0x00, 0x01, 0xEB, 
+	0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x02, 0x0C, 0x20, 0x00, 0x00, 0xF8, 
+	0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x11, 0x3E, 0x20, 0x00, 0x01, 0xE2, 0x20, 0x00, 0x0D, 0x7A, 
+	0x20, 0x00, 0x03, 0x20, 0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x01, 0x60, 0x4B, 0x31, 0xB5, 0xF0, 
+	0x78, 0x1E, 0x4D, 0x31, 0x27, 0x00, 0x4B, 0x31, 0x60, 0x2F, 0x1C, 0x1A, 0x78, 0x12, 0x32, 0x2B, 
+	0x92, 0x04, 0xB0, 0x89, 0x1C, 0x1A, 0x00, 0x50, 0x32, 0x32, 0x90, 0x06, 0x92, 0x07, 0x78, 0x12, 
+	0x5E, 0x99, 0x22, 0x30, 0x91, 0x05, 0x68, 0x6B, 0x97, 0x03, 0x93, 0x02, 0x3E, 0x01, 0xE0, 0x42, 
+	0x1D, 0x33, 0xB2, 0xF6, 0x93, 0x01, 0x00, 0x5B, 0x2B, 0x00, 0x5A, 0xEB, 0x98, 0x04, 0xD0, 0x34, 
+	0x1A, 0x1B, 0xB2, 0x1B, 0x10, 0x5B, 0x99, 0x06, 0x9A, 0x01, 0x18, 0xCB, 0xB2, 0x9B, 0x48, 0x20, 
+	0x00, 0xF2, 0x52, 0xAB, 0x18, 0x84, 0x58, 0x81, 0xB2, 0x1B, 0x98, 0x07, 0xDA, 0x07, 0x42, 0x81, 
+	0x31, 0x01, 0x48, 0x1B, 0x99, 0x01, 0x50, 0x81, 0x60, 0x63, 0x22, 0x00, 0xE0, 0x21, 0x52, 0x6A, 
+	0x37, 0x01, 0x68, 0x60, 0x17, 0xD1, 0x1A, 0x1A, 0x18, 0x50, 0x46, 0x84, 0x40, 0x48, 0x9A, 0x05, 
+	0x90, 0x00, 0x18, 0x11, 0x43, 0x42, 0x46, 0x60, 0x9A, 0x00, 0x46, 0x94, 0x46, 0x62, 0x43, 0x53, 
+	0x10, 0x4B, 0x18, 0xD0, 0xF0, 0x02, 0x18, 0xC0, 0x9B, 0x01, 0xFD, 0xF3, 0x60, 0x60, 0x99, 0x03, 
+	0x42, 0x81, 0x52, 0xE8, 0xE0, 0x05, 0xDB, 0x04, 0x00, 0xF2, 0x48, 0x09, 0xE0, 0x01, 0x50, 0x83, 
+	0x90, 0x03, 0x96, 0x02, 0xD1, 0xBA, 0x2E, 0x00, 0xB0, 0x09, 0x99, 0x02, 0x60, 0x69, 0x60, 0x2F, 
+	0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x09, 0x48, 0x4B, 0x27, 0xB5, 0xF7, 0x33, 0x04, 0x49, 0x27, 0x4A, 0x27, 0x7F, 0xDB, 
+	0xE0, 0x42, 0x48, 0x27, 0xB2, 0xDB, 0x3B, 0x01, 0x34, 0x14, 0x1C, 0x1C, 0x19, 0x04, 0x00, 0x64, 
+	0xC7, 0x44, 0xAE, 0xF1, 0x0B, 0x5F, 0x64, 0x25, 0x04, 0xD0, 0x27, 0x2C, 0x00, 0x43, 0x5C, 0x24, 
+	0x0A, 0x26, 0x3C, 0x19, 0x0C, 0x2C, 0x00, 0x5F, 0xA4, 0x00, 0x5C, 0xD0, 0x20, 0x88, 0xB6, 0x19, 
+	0x0E, 0xB2, 0x37, 0x19, 0x05, 0x27, 0x04, 0x46, 0xBC, 0x46, 0x65, 0x5F, 0xEF, 0x10, 0x6F, 0x1B, 
+	0xED, 0x19, 0x14, 0x19, 0xBE, 0x1C, 0x1C, 0x80, 0xA6, 0x00, 0x64, 0x34, 0x10, 0x1C, 0x1C, 0x5B, 
+	0x0E, 0xB2, 0x37, 0x34, 0x0C, 0x46, 0xBC, 0x00, 0x64, 0x46, 0x67, 0x5E, 0x25, 0x10, 0x7F, 0x1B, 
+	0x7F, 0x52, 0xA6, 0x19, 0xBE, 0x26, 0x01, 0x4C, 0x10, 0xE0, 0x10, 0x54, 0xE6, 0x00, 0x5C, 0x4D, 
+	0x0B, 0x88, 0xB6, 0x19, 0x2E, 0x80, 0xA6, 0x19, 0x14, 0x36, 0x10, 0x1C, 0x1E, 0x00, 0x76, 0x1C, 
+	0x1C, 0x34, 0x0C, 0x5B, 0x76, 0x53, 0x16, 0x00, 0x64, 0x26, 0x00, 0x4C, 0x07, 0x2B, 0x00, 0x54, 
+	0xE6, 0x68, 0x0B, 0xD1, 0xBA, 0xBD, 0xF7, 0x60, 0x13, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 
+	0x9C, 0x20, 0x00, 0x09, 0x80, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x01, 0xEC, 0x4A, 0x35, 0xB5, 
+	0xF7, 0x1C, 0x11, 0x4B, 0x35, 0x32, 0x34, 0x31, 0x33, 0x78, 0x12, 0x78, 0x0E, 0x7F, 0xDB, 0x33, 
+	0x04, 0x92, 0x01, 0x49, 0x32, 0x4A, 0x32, 0x46, 0xB4, 0x48, 0x32, 0xE0, 0x4B, 0xB2, 0xDB, 0x3B, 
+	0x01, 0x98, 0x01, 0x5C, 0xC4, 0xD1, 0x00, 0x2C, 0x00, 0x00, 0x5E, 0x46, 0x60, 0x19, 0x96, 0x19, 
+	0x8D, 0x5F, 0xF6, 0x27, 0x04, 0x96, 0x00, 0x88, 0xAD, 0xB2, 0x2E, 0x9F, 0x00, 0x17, 0xF7, 0x1B, 
+	0xBE, 0x40, 0x7E, 0x19, 0xF6, 0xDA, 0x10, 0x42, 0x86, 0x36, 0x0C, 0x1C, 0x1E, 0x5E, 0xB6, 0x00, 
+	0x76, 0x37, 0x10, 0x1C, 0x1F, 0x00, 0x7F, 0x96, 0x00, 0x9E, 0x00, 0x5F, 0xCF, 0x17, 0xFE, 0x1B, 
+	0xF7, 0x40, 0x77, 0x19, 0xBF, 0x42, 0x87, 0x97, 0x00, 0x00, 0x58, 0xDB, 0x18, 0x1C, 0x1E, 0x18, 
+	0x10, 0x36, 0x10, 0x80, 0x85, 0x1C, 0x18, 0x4D, 0x19, 0x30, 0x0C, 0x00, 0x76, 0x00, 0x40, 0x5B, 
+	0x75, 0x1C, 0x18, 0x52, 0x15, 0x00, 0x40, 0x30, 0x14, 0x27, 0x04, 0x18, 0x10, 0x28, 0x00, 0x5F, 
+	0xC0, 0x2C, 0x00, 0xDD, 0x04, 0x48, 0x13, 0xD1, 0x02, 0x54, 0xC4, 0x24, 0x01, 0x43, 0x5C, 0x24, 
+	0x0A, 0x1C, 0x18, 0x4D, 0x0E, 0x30, 0x14, 0x19, 0x2C, 0x00, 0x40, 0x4D, 0x0D, 0x18, 0x28, 0x8F, 
+	0xA4, 0x2B, 0x00, 0x80, 0x84, 0x68, 0x0A, 0xD1, 0xB1, 0x49, 0x0B, 0x4B, 0x09, 0x4B, 0x0B, 0x60, 
+	0x1A, 0x4B, 0x0B, 0x78, 0x1A, 0x4A, 0x0B, 0x70, 0x1A, 0xCA, 0x31, 0x1C, 0x0B, 0xCA, 0xC0, 0xC3, 
+	0x31, 0xBD, 0xF7, 0xC3, 0xC0, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 
+	0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x01, 0x64, 0x20, 0x00, 0x00, 0xCC, 0x20, 0x00, 0x00, 
+	0xF5, 0x20, 0x00, 0x00, 0xF4, 0x20, 0x00, 0x00, 0xE0, 0x48, 0x19, 0xB5, 0xF7, 0x42, 0x5B, 0x23, 
+	0x01, 0x4B, 0x18, 0x60, 0x43, 0x4B, 0x18, 0x78, 0x1A, 0x33, 0x2B, 0x1C, 0x19, 0x31, 0x2A, 0x78, 
+	0x1E, 0x23, 0x00, 0x78, 0x0F, 0xE0, 0x1E, 0x46, 0xB4, 0xB2, 0xD2, 0x3A, 0x01, 0x00, 0x51, 0x4C, 
+	0x13, 0xB2, 0x0E, 0x5A, 0x61, 0x17, 0xF6, 0x43, 0xF6, 0x1D, 0x11, 0x40, 0x0E, 0xB2, 0xB5, 0x00, 
+	0x49, 0x2D, 0x00, 0x52, 0x0E, 0x4E, 0x0E, 0xD0, 0x0F, 0x5F, 0x8E, 0xB2, 0x2D, 0xDC, 0x04, 0x2E, 
+	0x00, 0xDA, 0x07, 0x42, 0xBD, 0x52, 0x0D, 0x25, 0x00, 0x45, 0x65, 0xE0, 0x05, 0x26, 0x00, 0xDA, 
+	0x02, 0xE0, 0x00, 0x52, 0x0E, 0x2A, 0x00, 0x33, 0x01, 0x4A, 0x01, 0xD1, 0xDE, 0xBD, 0xF7, 0x60, 
+	0x13, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x0D, 
+	0x3C, 0x20, 0x00, 0x00, 0xCC, 0x80, 0x08, 0xF3, 0xEF, 0xBA, 0x00, 0x47, 0x70, 0xBA, 0x40, 0x47, 
+	0x70, 0xBA, 0xC0, 0x47, 0x70, 0xB5, 0x70, 0x47, 0x70, 0xDA, 0x16, 0x28, 0x00, 0x23, 0x0F, 0xB2, 
+	0xC0, 0x3B, 0x08, 0x40, 0x03, 0x08, 0x9B, 0x4A, 0x12, 0x18, 0x9B, 0x00, 0x9B, 0x40, 0x10, 0x22, 
+	0x03, 0x22, 0xFF, 0x40, 0x90, 0x1C, 0x14, 0x68, 0x5D, 0x01, 0x89, 0x40, 0x84, 0x40, 0x0A, 0x43, 
+	0xA5, 0x1C, 0x28, 0x40, 0x82, 0x60, 0x58, 0x43, 0x10, 0x24, 0x03, 0xE0, 0x11, 0x4B, 0x09, 0x08, 
+	0x82, 0x32, 0xC0, 0x40, 0x20, 0x00, 0x92, 0x40, 0xA0, 0x58, 0xD5, 0x24, 0xFF, 0x40, 0x86, 0x1C, 
+	0x26, 0x43, 0xB5, 0x01, 0x89, 0x40, 0x84, 0x40, 0x0C, 0x43, 0x20, 0x1C, 0x28, 0xBD, 0x70, 0x50, 
+	0xD0, 0xE0, 0x00, 0xED, 0x18, 0xE0, 0x00, 0xE1, 0x00, 0x22, 0x40, 0x4B, 0x08, 0x20, 0x7F, 0x68, 
+	0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 
+	0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 
+	0x08, 0x22, 0x3F, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 
+	0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 
+	0x70, 0x20, 0x00, 0x00, 0x08, 0x4A, 0x08, 0x4B, 0x07, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x89, 0x04, 
+	0x89, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 
+	0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x40, 0x4B, 
+	0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 
+	0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 
+	0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x20, 0x4B, 0x08, 0x20, 0x7F, 0x68, 
+	0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 
+	0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 
+	0x08, 0x22, 0x5F, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 
+	0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 
+	0x70, 0x20, 0x00, 0x00, 0x08, 0x21, 0xBE, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 
+	0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 
+	0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x20, 0x4B, 
+	0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 
+	0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 
+	0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x00, 0x80, 0x6C, 
+	0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x10, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 
+	0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 
+	0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x6F, 0x4B, 
+	0x07, 0x20, 0x7F, 0x68, 0x19, 0x59, 0xAA, 0xAE, 0xF1, 0x0C, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 
+	0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4B, 0x0B, 0xB5, 0x00, 0x28, 0x00, 0x68, 0x19, 0x06, 0x49, 
+	0xD0, 0x04, 0x22, 0x10, 0x0E, 0x49, 0xE0, 0x01, 0x43, 0x11, 0x40, 0x11, 0x22, 0x6F, 0x20, 0x7F, 
+	0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x08, 0x21, 0xDE, 0x4B, 0x07, 0x01, 0xC9, 
+	0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 
+	0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 
+	0x80, 0xFF, 0x22, 0x10, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 
+	0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 
+	0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 
+	0x23, 0x80, 0x00, 0xC0, 0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x01, 0x4B, 0x08, 0x20, 0x7F, 
+	0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x00, 0x08, 0x22, 0x7E, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 
+	0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x21, 0xFC, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 
+	0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 
+	0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x01, 
+	0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 
+	0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0xC0, 
+	0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x02, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 
+	0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 
+	0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x7D, 
+	0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x00, 0x08, 0x21, 0xFA, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 
+	0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x02, 0x4B, 0x08, 0x68, 0x18, 
+	0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0x80, 0x6C, 0x18, 0x47, 0x70, 
+	0x0F, 0xC0, 0x22, 0x04, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 
+	0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x7B, 0x4B, 0x07, 0x20, 0x7F, 
+	0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 
+	0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4B, 0x0B, 
+	0xB5, 0x00, 0x28, 0x00, 0x68, 0x19, 0x06, 0x49, 0xD0, 0x04, 0x22, 0x04, 0x0E, 0x49, 0xE0, 0x01, 
+	0x43, 0x11, 0x40, 0x11, 0x22, 0x7B, 0x20, 0x7F, 0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 
+	0x00, 0x08, 0x21, 0xF6, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 
+	0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x04, 0x4B, 0x08, 0x68, 0x18, 
+	0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0x40, 0x6C, 0x18, 0x47, 0x70, 
+	0x0F, 0xC0, 0x23, 0x80, 0xB5, 0x10, 0x1D, 0x04, 0x05, 0xDB, 0x22, 0x3F, 0x69, 0x98, 0x43, 0x90, 
+	0x40, 0x14, 0x24, 0x01, 0x43, 0x20, 0x1C, 0x88, 0x61, 0x98, 0x18, 0x41, 0x40, 0x21, 0x02, 0x11, 
+	0x40, 0x0A, 0x4A, 0x02, 0x69, 0x98, 0x43, 0x0A, 0x40, 0x02, 0xBD, 0x10, 0x61, 0x9A, 0xFF, 0xFF, 
+	0xC0, 0xFF, 0x22, 0x7F, 0x4B, 0x06, 0x23, 0x80, 0x68, 0x19, 0x6C, 0x18, 0x05, 0xDB, 0x43, 0x90, 
+	0x39, 0x01, 0x1C, 0x02, 0x40, 0x11, 0x64, 0x1A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x09, 0x18, 0x05, 0xDB, 0x23, 0x80, 0x21, 0x7F, 0x6C, 0x1A, 0x21, 0x01, 0x43, 0x8A, 0x64, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x47, 0x70, 0x69, 0xDA, 0x05, 0xDB, 0x43, 0x8A, 0x21, 0x0F, 0x43, 0x0A, 
+	0x21, 0x02, 0x69, 0xDA, 0x61, 0xDA, 0x43, 0x8A, 0x21, 0xF0, 0x43, 0x0A, 0x21, 0x30, 0x4A, 0x0C, 
+	0x61, 0xDA, 0x39, 0x01, 0x79, 0x11, 0x77, 0x59, 0xB2, 0xC9, 0x49, 0x0A, 0x69, 0xD8, 0x20, 0x80, 
+	0x40, 0x01, 0x43, 0x01, 0x02, 0xC0, 0x69, 0xD8, 0x61, 0xD9, 0x40, 0x01, 0x49, 0x07, 0x03, 0xC0, 
+	0x20, 0xA0, 0x61, 0xD9, 0x43, 0x01, 0x3A, 0x01, 0x79, 0x92, 0x77, 0xDA, 0xB2, 0xD2, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x02, 0x04, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0x4A, 0x1A, 
+	0xB5, 0x30, 0x88, 0x11, 0x4B, 0x1A, 0x18, 0xC9, 0x4C, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x8C, 0x18, 
+	0xB2, 0x89, 0x8C, 0x59, 0x84, 0x19, 0x84, 0x59, 0x21, 0x00, 0x4D, 0x16, 0x88, 0x50, 0xB2, 0x89, 
+	0x19, 0x01, 0x84, 0x99, 0x8C, 0x9A, 0x8C, 0xDC, 0x1E, 0x42, 0x19, 0x44, 0xB2, 0x92, 0xB2, 0xA4, 
+	0x84, 0xDA, 0x85, 0x1C, 0x8D, 0x1D, 0x19, 0x00, 0x4C, 0x10, 0x8D, 0x5C, 0xB2, 0x80, 0x8D, 0x98, 
+	0x85, 0x58, 0x8D, 0xD8, 0x85, 0x99, 0x8E, 0x18, 0x85, 0xDA, 0x8E, 0x58, 0x86, 0x19, 0x8E, 0x98, 
+	0x86, 0x5A, 0x8E, 0xD8, 0x86, 0x99, 0x8F, 0x18, 0x86, 0xDA, 0xC0, 0x55, 0xAE, 0xF1, 0x0D, 0x8F, 
+	0x58, 0x87, 0x19, 0x8F, 0x98, 0x87, 0x5A, 0x8F, 0xD9, 0x87, 0x99, 0xBD, 0x30, 0x87, 0xDA, 0x20, 
+	0x00, 0x02, 0x04, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x05, 0xFF, 0x00, 
+	0x00, 0x01, 0xFF, 0x4B, 0x22, 0xB5, 0x30, 0x68, 0x1A, 0x24, 0xEE, 0x40, 0x14, 0x01, 0xE4, 0x68, 
+	0x1A, 0x48, 0x20, 0x40, 0x02, 0x21, 0x7F, 0x60, 0x1A, 0x43, 0x22, 0x22, 0x80, 0x68, 0x1C, 0x69, 
+	0x15, 0x05, 0xD2, 0x4C, 0x1C, 0x61, 0x14, 0x2C, 0x00, 0x7C, 0xA4, 0x68, 0x1C, 0xD0, 0x16, 0x04, 
+	0x64, 0x25, 0x04, 0x43, 0x2C, 0x0E, 0x64, 0x40, 0x0C, 0x68, 0x1D, 0x40, 0x28, 0x02, 0x24, 0x60, 
+	0x18, 0x43, 0x20, 0x69, 0x14, 0x68, 0x18, 0x68, 0x1C, 0x61, 0x10, 0x40, 0x20, 0x20, 0x7B, 0x43, 
+	0x8C, 0x68, 0x1C, 0x43, 0x01, 0x1C, 0x21, 0xE0, 0x15, 0x60, 0x19, 0x25, 0x04, 0x68, 0x1C, 0x0E, 
+	0x64, 0x06, 0x64, 0x68, 0x1D, 0x43, 0x2C, 0x43, 0x8D, 0x40, 0x0C, 0x43, 0x21, 0x1C, 0x29, 0x68, 
+	0x19, 0x60, 0x19, 0x61, 0x11, 0x69, 0x14, 0x21, 0xF6, 0x68, 0x1C, 0x40, 0x21, 0x01, 0xC9, 0x40, 
+	0x20, 0x68, 0x1C, 0x60, 0x18, 0x43, 0x08, 0x69, 0x11, 0x68, 0x1B, 0xBD, 0x30, 0x61, 0x13, 0x20, 
+	0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0xB6, 0x72, 0xB5, 0x00, 0x22, 
+	0x01, 0x4B, 0x0F, 0x4B, 0x0F, 0x70, 0x1A, 0x4B, 0x0F, 0x7C, 0x9A, 0xD0, 0x07, 0x2A, 0x00, 0x21, 
+	0xF6, 0x68, 0x1A, 0x40, 0x11, 0x01, 0xC9, 0x4A, 0x0C, 0x68, 0x18, 0xE0, 0x05, 0x40, 0x02, 0x22, 
+	0x7B, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x82, 0x20, 0x7F, 0x60, 0x1A, 0x43, 0x0A, 0x23, 
+	0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0xB6, 0x62, 0x61, 0x1A, 0x46, 0xC0, 0xBD, 0x00, 0x20, 
+	0x00, 0x00, 0x64, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0xB6, 
+	0x72, 0xB5, 0x00, 0x22, 0x00, 0x4B, 0x10, 0x4B, 0x10, 0x70, 0x1A, 0x4B, 0x10, 0x7C, 0x9A, 0x2A, 
+	0x00, 0x68, 0x19, 0x04, 0x49, 0xD0, 0x08, 0x0E, 0x49, 0x22, 0x04, 0x68, 0x18, 0x43, 0x11, 0x02, 
+	0x09, 0x4A, 0x0C, 0xE0, 0x06, 0x40, 0x02, 0x22, 0x04, 0x06, 0x49, 0x43, 0x11, 0x0E, 0x49, 0x20, 
+	0x7F, 0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 
+	0x1A, 0x69, 0x19, 0xBD, 0x00, 0xB6, 0x62, 0x20, 0x00, 0x00, 0x64, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x78, 0x18, 0x4B, 0x01, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x64, 0x23, 0x80, 0xB5, 0x00, 0x6C, 0x19, 0x05, 0xDB, 0x01, 0xD2, 0x22, 0x80, 0x64, 
+	0x1A, 0x43, 0x0A, 0x21, 0x80, 0x4A, 0x23, 0x00, 0x49, 0x68, 0x10, 0x60, 0x11, 0x43, 0x01, 0x68, 
+	0x99, 0x68, 0x12, 0x6C, 0x19, 0x60, 0x9A, 0x02, 0x12, 0x22, 0x80, 0x64, 0x1A, 0x43, 0x0A, 0x4A, 
+	0x1D, 0x6C, 0x19, 0x64, 0x1A, 0x40, 0x0A, 0x22, 0x7F, 0x4B, 0x1C, 0x4B, 0x1C, 0x7B, 0x59, 0x68, 
+	0x18, 0x40, 0x11, 0x04, 0x09, 0x4A, 0x1B, 0x43, 0x0A, 0x40, 0x02, 0x68, 0x19, 0x60, 0x1A, 0x05, 
+	0xD2, 0x22, 0xA0, 0x60, 0x91, 0x68, 0x90, 0x49, 0x17, 0x68, 0x18, 0x20, 0x84, 0x40, 0x01, 0x43, 
+	0x01, 0x05, 0xC0, 0x68, 0x19, 0x60, 0x19, 0x60, 0x91, 0x68, 0x90, 0x78, 0x09, 0x49, 0x13, 0x29, 
+	0x00, 0xB2, 0x49, 0x29, 0x01, 0xD0, 0x02, 0xE0, 0x03, 0xD1, 0x0C, 0x49, 0x10, 0x68, 0x18, 0xE0, 
+	0x03, 0x40, 0x01, 0x21, 0x80, 0x68, 0x18, 0x43, 0x01, 0x04, 0x09, 0x68, 0x1B, 0x60, 0x19, 0x60, 
+	0x93, 0x68, 0x91, 0x05, 0xDB, 0x23, 0x80, 0x4A, 0x0A, 0x6C, 0x19, 0x64, 0x1A, 0x40, 0x0A, 0x46, 
+	0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x14, 0xFF, 0xFF, 0x7F, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x00, 0x0C, 0xFF, 0x80, 0xFF, 0xFF, 0x80, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x02, 0xFA, 0xFF, 
+	0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0x22, 0x01, 0x4B, 0x04, 0x23, 0x80, 0x70, 0x1A, 0x6C, 
+	0x99, 0x05, 0xDB, 0x64, 0x99, 0x43, 0x91, 0x47, 0x70, 0x70, 0x1A, 0x20, 0x00, 0x00, 0x00, 0x23, 
+	0x01, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x13, 0x70, 0x53, 0x05, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x02, 0x4B, 0x06, 0xB5, 0x00, 0x78, 0x1A, 0xB6, 0x72, 0xD0, 0x04, 0x2A, 0x00, 0x46, 
+	0xC0, 0x46, 0xC0, 0xBF, 0x30, 0xB6, 0x62, 0xB6, 0x62, 0xE7, 0xF6, 0x46, 0xC0, 0xBD, 0x00, 0x20, 
+	0x00, 0x00, 0x02, 0x4B, 0x09, 0xB5, 0x38, 0x78, 0x9A, 0x49, 0x09, 0x43, 0x51, 0x79, 0x1C, 0x1C, 
+	0x05, 0x4B, 0x08, 0x48, 0x08, 0x18, 0xC9, 0xF8, 0x7A, 0xF0, 0x02, 0x1C, 0x29, 0x4B, 0x06, 0x43, 
+	0x58, 0x34, 0x01, 0xF0, 0x02, 0x40, 0xA1, 0xBD, 0x38, 0xF8, 0x73, 0x20, 0x00, 0x0A, 0xAA, 0xFF, 
+	0xFF, 0xFE, 0x44, 0x00, 0x02, 0x24, 0xFE, 0x00, 0x0F, 0x42, 0x40, 0x68, 0x19, 0x4B, 0x05, 0x05, 
+	0xDB, 0x23, 0x80, 0x02, 0x09, 0x69, 0x5A, 0x0A, 0x09, 0x0E, 0x12, 0x43, 0x0A, 0x06, 0x12, 0x47, 
+	0x70, 0x61, 0x5A, 0x20, 0x00, 0x00, 0x04, 0x60, 0x18, 0x4B, 0x01, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x04, 0x22, 0x01, 0x4B, 0x05, 0x23, 0x80, 0x70, 0x1A, 0x69, 0x59, 0x05, 0xDB, 0x04, 
+	0x52, 0x22, 0x80, 0x61, 0x5A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x01, 0x4B, 
+	0x05, 0xB5, 0x00, 0x78, 0x1A, 0xB6, 0x72, 0xD0, 0x03, 0x2A, 0x00, 0x46, 0xC0, 0x46, 0xC0, 0xE7, 
+	0xF7, 0xB6, 0x62, 0xBD, 0x00, 0xB6, 0x62, 0x20, 0x00, 0x00, 0x00, 0x4B, 0x10, 0xB5, 0x00, 0x05, 
+	0x9A, 0x68, 0x1B, 0x4A, 0x0F, 0xD5, 0x0C, 0xB6, 0x72, 0x4B, 0x0F, 0x29, 0x00, 0x78, 0x11, 0x78, 
+	0x19, 0xD1, 0x02, 0xD0, 0x11, 0x29, 0x00, 0x46, 0xC0, 0x46, 0xC0, 0xE7, 0xF4, 0xB6, 0x62, 0x4B, 
+	0x09, 0x4A, 0x08, 0x78, 0x11, 0xB6, 0x72, 0xD1, 0x02, 0x29, 0x00, 0x29, 0x00, 0x78, 0x19, 0x46, 
+	0xC0, 0xD0, 0x04, 0xB6, 0x62, 0x46, 0xC0, 0xE7, 0xF3, 0xBF, 0x30, 0xBD, 0x00, 0xB6, 0x62, 0x20, 
+	0x00, 0x00, 0x58, 0x20, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x49, 0x13, 0xB5, 0x70, 0x24, 
+	0x04, 0x4B, 0x13, 0x4B, 0x13, 0x60, 0x19, 0x68, 0x1A, 0x4D, 0x13, 0x60, 0x1A, 0x43, 0x22, 0x24, 
+	0x02, 0x68, 0x1A, 0x60, 0x1A, 0x43, 0xA2, 0x24, 0x01, 0x68, 0x1A, 0x4C, 0x0F, 0x43, 0x22, 0x22, 
+	0x00, 0x60, 0x1A, 0x4A, 0x0E, 0x60, 0x22, 0x78, 0x2E, 0x60, 0x11, 0x43, 0x70, 0x79, 0x2D, 0x40, 
+	0xE8, 0x35, 0x01, 0x60, 0x11, 0x1A, 0x09, 0x68, 0x11, 0x68, 0x20, 0xD2, 0xFB, 0x42, 0x88, 0x21, 
+	0x01, 0x68, 0x1A, 0x60, 0x1A, 0x43, 0x8A, 0x46, 0xC0, 0xBD, 0x70, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 
+	0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 0x10, 0x20, 0x00, 0x0A, 0xAA, 0xE0, 0x00, 0xE0, 0x18, 0x20, 
+	0x00, 0x01, 0xFC, 0x23, 0x00, 0xB5, 0x00, 0x42, 0x98, 0x4A, 0x06, 0x1C, 0xD3, 0xDB, 0x02, 0x43, 
+	0x43, 0x7F, 0xDB, 0x7F, 0xD2, 0x32, 0x02, 0xB2, 0x52, 0x30, 0x01, 0x18, 0x18, 0x40, 0x90, 0xBD, 
+	0x00, 0x18, 0x40, 0x20, 0x00, 0x09, 0xAE, 0xB0, 0x85, 0xB5, 0xF0, 0x1C, 0x0C, 0x1C, 0x05, 0xFA, 
+	0x1B, 0xAE, 0xF1, 0x0E, 0x29, 0x00, 0x1C, 0x16, 0x4B, 0x2B, 0xD0, 0x05, 0x7F, 0xDB, 0x33, 0x02, 
+	0x2B, 0x00, 0xB2, 0x5B, 0x1C, 0x21, 0xD0, 0x4E, 0xF7, 0xFF, 0x1C, 0x28, 0x49, 0x27, 0xFF, 0xDD, 
+	0x7A, 0x4A, 0x4F, 0x27, 0x19, 0x13, 0x7A, 0x09, 0x91, 0x02, 0x18, 0x51, 0x19, 0xCF, 0x01, 0x41, 
+	0x97, 0x03, 0x22, 0x00, 0xE0, 0x13, 0x46, 0x84, 0x56, 0xC1, 0x48, 0x22, 0xB2, 0xC0, 0x1C, 0x58, 
+	0x90, 0x01, 0x0F, 0xCF, 0x98, 0x03, 0x18, 0x7F, 0x19, 0xC7, 0x10, 0x7F, 0x97, 0x00, 0x37, 0x08, 
+	0x79, 0x38, 0x46, 0x6F, 0x33, 0x02, 0x9F, 0x00, 0x27, 0x01, 0x70, 0xB8, 0x43, 0x3A, 0x40, 0x8F, 
+	0x42, 0x83, 0x98, 0x02, 0x4B, 0x15, 0xDB, 0xE8, 0x79, 0xDF, 0x46, 0x60, 0x41, 0x61, 0x42, 0x61, 
+	0x18, 0x79, 0x7C, 0x5B, 0x10, 0x49, 0x19, 0x1C, 0x34, 0x01, 0x39, 0x01, 0x05, 0x24, 0x06, 0x89, 
+	0x43, 0x22, 0x43, 0x0C, 0x4C, 0x10, 0x49, 0x0E, 0x18, 0x43, 0x01, 0x40, 0x19, 0x01, 0x4F, 0x0F, 
+	0x60, 0x4A, 0x68, 0x4C, 0xB2, 0xD2, 0x1C, 0xAA, 0x71, 0x02, 0x19, 0xC0, 0xD0, 0x07, 0x2E, 0x00, 
+	0x21, 0x01, 0x4A, 0x0B, 0x40, 0x91, 0x57, 0x52, 0x69, 0x99, 0x1C, 0x0A, 0xE0, 0x01, 0x61, 0x9A, 
+	0x61, 0x9E, 0x69, 0x9A, 0xBD, 0xF0, 0xB0, 0x05, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x0A, 
+	0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x75, 0x10, 0x40, 0x00, 0x10, 0x18, 0x40, 0x00, 0x10, 0x10, 
+	0x00, 0x00, 0x74, 0xEA, 0x4B, 0x08, 0xB5, 0x10, 0x68, 0x1B, 0x21, 0x00, 0xE0, 0x08, 0x3B, 0x01, 
+	0x01, 0x58, 0x4C, 0x06, 0x19, 0x00, 0x22, 0x09, 0x72, 0xA1, 0x18, 0x84, 0xD2, 0xFB, 0x3A, 0x01, 
+	0x2B, 0x00, 0x3B, 0x01, 0xBD, 0x10, 0xDA, 0xF4, 0x20, 0x00, 0x09, 0x18, 0x40, 0x00, 0x10, 0x00, 
+	0xF7, 0xFF, 0xB5, 0x38, 0x21, 0x00, 0xFF, 0xE7, 0x1C, 0x0A, 0x20, 0x01, 0xF7, 0xFF, 0x42, 0x40, 
+	0x20, 0x01, 0xFF, 0x75, 0x21, 0x01, 0x42, 0x40, 0xF7, 0xFF, 0x22, 0x00, 0x4D, 0x0A, 0xFF, 0x6F, 
+	0xE0, 0x0B, 0x7B, 0xAC, 0x21, 0x00, 0x1C, 0x20, 0xF7, 0xFF, 0x22, 0x01, 0x21, 0x01, 0xFF, 0x67, 
+	0x1C, 0x0A, 0x1C, 0x20, 0xFF, 0x62, 0xF7, 0xFF, 0xB2, 0xE4, 0x34, 0x01, 0x79, 0x2B, 0x7B, 0xAA, 
+	0x42, 0x9C, 0x18, 0xD3, 0xBD, 0x38, 0xDB, 0xEE, 0x20, 0x00, 0x03, 0x0A, 0xB0, 0x85, 0xB5, 0xF0, 
+	0x1C, 0x0E, 0x1C, 0x05, 0x1C, 0x1F, 0x92, 0x02, 0xD0, 0x05, 0x29, 0x00, 0x33, 0x02, 0x4B, 0x21, 
+	0xB2, 0x5B, 0x7F, 0xDB, 0xD0, 0x3B, 0x2B, 0x00, 0x1C, 0x28, 0x1C, 0x31, 0xFF, 0x34, 0xF7, 0xFF, 
+	0xB2, 0xC0, 0x4A, 0x1D, 0x7A, 0x53, 0x90, 0x01, 0x18, 0xF6, 0x7A, 0x12, 0x4B, 0x1B, 0x18, 0x9A, 
+	0x7C, 0x1B, 0x1E, 0xB9, 0x41, 0x81, 0x1E, 0x48, 0xB2, 0xF6, 0x42, 0x49, 0x46, 0x9C, 0x91, 0x03, 
+	0x2F, 0x00, 0xE0, 0x24, 0x21, 0x26, 0xD1, 0x07, 0x4B, 0x15, 0x43, 0x71, 0x5C, 0xCC, 0x19, 0x49, 
+	0xB2, 0xE4, 0x44, 0x64, 0x2F, 0x01, 0xE0, 0x08, 0x01, 0x73, 0xD1, 0x04, 0x19, 0x5B, 0x49, 0x11, 
+	0xE0, 0x01, 0x5C, 0x5C, 0x40, 0x1C, 0x9B, 0x03, 0x99, 0x02, 0x4B, 0x0F, 0x36, 0x02, 0x57, 0x9B, 
+	0x18, 0xC0, 0x0F, 0xD8, 0xB2, 0xDB, 0x18, 0x63, 0x9B, 0x01, 0x93, 0x00, 0x01, 0x59, 0x10, 0x40, 
+	0x18, 0x08, 0x46, 0x6B, 0x49, 0x09, 0x78, 0x1B, 0x54, 0x43, 0xB2, 0xF6, 0xDB, 0xD8, 0x42, 0x96, 
+	0xBD, 0xF0, 0xB0, 0x05, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x0D, 0x48, 
+	0x00, 0x00, 0x75, 0x36, 0x20, 0x00, 0x0A, 0xB3, 0x00, 0x00, 0x75, 0x10, 0x40, 0x00, 0x10, 0x00, 
+	0x4B, 0x2A, 0xB5, 0x70, 0x68, 0x19, 0x4A, 0x2A, 0x40, 0x0A, 0x24, 0x80, 0x68, 0x1A, 0x60, 0x1A, 
+	0x4D, 0x28, 0x05, 0xE4, 0x60, 0xA2, 0x68, 0xA1, 0x22, 0x03, 0x7A, 0x69, 0x40, 0x11, 0x68, 0x18, 
+	0x04, 0x89, 0x4A, 0x25, 0x43, 0x0A, 0x40, 0x02, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 
+	0x22, 0x80, 0x68, 0x19, 0x43, 0x0A, 0x03, 0x52, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 
+	0x68, 0x18, 0x7A, 0x29, 0x4A, 0x1D, 0x26, 0x07, 0x05, 0x49, 0x40, 0x31, 0x43, 0x0A, 0x40, 0x02, 
+	0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 0x29, 0x0F, 0x7B, 0xA9, 0x7B, 0xEA, 0xD8, 0x25, 
+	0xD8, 0x22, 0x2A, 0x0F, 0x07, 0x09, 0x68, 0x18, 0x09, 0x00, 0x01, 0x00, 0x60, 0x19, 0x43, 0x01, 
+	0x40, 0x0A, 0x21, 0x0F, 0x06, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x11, 0x60, 0x1A, 0x43, 0x0A, 
+	0x68, 0xA2, 0x68, 0x1B, 0xF7, 0xFF, 0x60, 0xA3, 0x4A, 0x0E, 0xFC, 0x49, 0x43, 0x13, 0x6C, 0x63, 
+	0xF7, 0xFF, 0x64, 0x63, 0xF7, 0xFF, 0xFC, 0x5C, 0x79, 0xEB, 0xFC, 0x87, 0x40, 0x1E, 0x4A, 0x0A, 
+	0x6C, 0x26, 0x02, 0x33, 0x43, 0x1E, 0x40, 0x16, 0xBD, 0x70, 0x64, 0x26, 0x20, 0x00, 0x00, 0x14, 
+	0xFF, 0xFC, 0xFF, 0xFF, 0x20, 0x00, 0x0D, 0x48, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x1F, 0xFF, 0xFF, 
+	0xF0, 0xFF, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0x21, 0x80, 0xB5, 0x00, 
+	0x79, 0x0B, 0x05, 0xC9, 0xB2, 0xD2, 0x1E, 0x5A, 0xDD, 0x09, 0x42, 0x98, 0x71, 0x0B, 0xE0, 0x00, 
+	0xB2, 0xDB, 0x33, 0x01, 0xDD, 0xFA, 0x42, 0x83, 0x71, 0x0A, 0xE0, 0x04, 0xB2, 0xD2, 0x3A, 0x01, 
+	0xDA, 0xFA, 0x42, 0x82, 0xB5, 0x38, 0xBD, 0x00, 0x78, 0xA0, 0x4C, 0x17, 0xFF, 0xE6, 0xF7, 0xFF, 
+	0x05, 0xDB, 0x23, 0x80, 0x68, 0x5A, 0x79, 0x21, 0x00, 0x52, 0x07, 0xC9, 0x43, 0x0A, 0x08, 0x52, 
+	0x79, 0x60, 0x60, 0x5A, 0x68, 0x5D, 0x22, 0x03, 0x40, 0x10, 0x49, 0x10, 0x40, 0x29, 0x03, 0x80, 
+	0x60, 0x59, 0x43, 0x01, 0x49, 0x0E, 0x79, 0xA0, 0x40, 0x10, 0x68, 0x5D, 0x40, 0x29, 0x03, 0x00, 
+	0x60, 0x59, 0x43, 0x01, 0x49, 0x0B, 0x79, 0xE0, 0x40, 0x10, 0x68, 0x5D, 0x02, 0x80, 0x40, 0x29, 
+	0x60, 0x59, 0x43, 0x01, 0x68, 0x58, 0x7A, 0x21, 0x02, 0x11, 0x40, 0x0A, 0x40, 0x02, 0x4A, 0x06, 
+	0x60, 0x5A, 0x43, 0x0A, 0x46, 0xC0, 0xBD, 0x38, 0x20, 0x00, 0x0A, 0xAA, 0xFF, 0xFF, 0x3F, 0xFF, 
+	0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0x23, 0x80, 0xB5, 0xF8, 
+	0x68, 0x1A, 0x05, 0xDB, 0x21, 0x00, 0x4A, 0x7A, 0x60, 0x19, 0x20, 0x08, 0x68, 0x14, 0x60, 0x10, 
+	0x60, 0x9C, 0x68, 0x9D, 0x60, 0x21, 0x4C, 0x77, 0x68, 0xDD, 0x68, 0x24, 0x25, 0xFE, 0x60, 0xDC, 
+	0x01, 0xED, 0x4C, 0x75, 0x68, 0x24, 0x60, 0x25, 0x61, 0x1C, 0x69, 0x1D, 0x61, 0x59, 0x69, 0x5C, 
+	0x61, 0x99, 0x69, 0x9C, 0x61, 0xD9, 0x69, 0xDC, 0x24, 0x80, 0x6C, 0x1C, 0x64, 0x1C, 0x01, 0xE4, 
+	0x64, 0x59, 0x6C, 0x5C, 0x4C, 0x6D, 0x6C, 0x9C, 0x60, 0x21, 0x64, 0x99, 0x05, 0xE4, 0x24, 0xA0, 
+	0x60, 0xA1, 0x68, 0xA5, 0x49, 0x6A, 0x6C, 0x1C, 0x64, 0x19, 0x40, 0x21, 0x21, 0x80, 0x68, 0x1C, 
+	0x43, 0x21, 0x05, 0x49, 0x49, 0x67, 0x60, 0x19, 0x7F, 0xC9, 0x31, 0x01, 0xD0, 0x03, 0x29, 0x00, 
+	0x43, 0x08, 0x68, 0x11, 0xE0, 0x02, 0x60, 0x10, 0x43, 0x81, 0x68, 0x11, 0x68, 0x11, 0x60, 0x11, 
+	0x60, 0x99, 0x68, 0x98, 0x26, 0x04, 0x68, 0x13, 0x60, 0x13, 0x43, 0x33, 0x25, 0x80, 0x68, 0x13, 
+	0x68, 0xA9, 0x05, 0xED, 0x98, 0x2B, 0xAE, 0xF1, 0x0F, 0x68, 0x13, 0x60, 0xAB, 0x43, 0x3B, 0x27, 
+	0x02, 0x68, 0x13, 0x60, 0x13, 0x60, 0xAB, 0x68, 0xA9, 0x20, 0x01, 0x68, 0x13, 0x60, 0x13, 0x43, 
+	0x83, 0x68, 0xAA, 0x68, 0x13, 0xF7, 0xFF, 0x60, 0xAB, 0x4B, 0x54, 0xFE, 0xED, 0x56, 0x9A, 0x22, 
+	0x1C, 0x4B, 0x53, 0x69, 0xA9, 0x40, 0xF2, 0x05, 0x12, 0x43, 0x13, 0x40, 0x0B, 0xF7, 0xFF, 0x61, 
+	0xAB, 0x4A, 0x50, 0xFE, 0x61, 0x21, 0x01, 0x4B, 0x50, 0x4B, 0x50, 0x60, 0x1A, 0x68, 0x1A, 0x24, 
+	0x08, 0x43, 0x32, 0x20, 0x10, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0x1A, 0x43, 0xBA, 0x22, 0xC0, 0x4B, 
+	0x4C, 0x50, 0x99, 0x00, 0x52, 0x50, 0x9F, 0x21, 0x20, 0x50, 0x9C, 0x50, 0x9E, 0x50, 0x99, 0x50, 
+	0x98, 0x50, 0x99, 0x21, 0x40, 0x40, 0xBA, 0x22, 0xC0, 0x24, 0xFF, 0x58, 0x98, 0x24, 0xC0, 0x43, 
+	0xA0, 0x50, 0x98, 0x43, 0x20, 0x48, 0x43, 0x58, 0x9C, 0x50, 0x9C, 0x40, 0x04, 0x48, 0x42, 0x58, 
+	0x9C, 0x24, 0x80, 0x40, 0x20, 0x43, 0x04, 0x04, 0x24, 0x58, 0x9C, 0x50, 0x9C, 0x0A, 0x24, 0x02, 
+	0x24, 0x50, 0x9C, 0x43, 0x2C, 0x40, 0xBA, 0x22, 0xC1, 0x1C, 0x04, 0x58, 0x98, 0x43, 0x84, 0x20, 
+	0xFF, 0x50, 0x9C, 0x43, 0x0C, 0x48, 0x37, 0x58, 0x9C, 0x24, 0x80, 0x40, 0x20, 0x43, 0x20, 0x02, 
+	0x24, 0x58, 0x98, 0x50, 0x98, 0x40, 0x20, 0x4C, 0x34, 0x4A, 0x34, 0x50, 0x98, 0x43, 0x30, 0x69, 
+	0x10, 0xB6, 0x62, 0x61, 0x10, 0x20, 0x01, 0x22, 0x08, 0x60, 0x18, 0x60, 0x1E, 0x60, 0x1A, 0x60, 
+	0x1F, 0x20, 0x20, 0x4B, 0x2F, 0x67, 0xDC, 0x24, 0x10, 0x67, 0xD9, 0x67, 0xD8, 0xFC, 0x46, 0xF7, 
+	0xFF, 0x7D, 0xE0, 0x4C, 0x21, 0xF7, 0xFF, 0x7E, 0x21, 0x7C, 0xE3, 0xFA, 0xFB, 0xD0, 0x26, 0x2B, 
+	0x00, 0x21, 0x01, 0x4B, 0x1A, 0x4A, 0x27, 0x68, 0x18, 0x0E, 0x40, 0x00, 0x40, 0x68, 0x19, 0x43, 
+	0x08, 0x40, 0x11, 0x06, 0x00, 0x60, 0x19, 0x43, 0x01, 0x69, 0x28, 0x68, 0x19, 0x68, 0x19, 0x61, 
+	0x29, 0x0E, 0x49, 0x00, 0x49, 0x06, 0x39, 0x43, 0x0F, 0x40, 0x17, 0x68, 0x1F, 0x60, 0x1F, 0x43, 
+	0x0F, 0x69, 0x28, 0x68, 0x19, 0x68, 0x19, 0x61, 0x29, 0x0E, 0x49, 0x00, 0x49, 0x68, 0x19, 0x43, 
+	0x0E, 0x40, 0x0A, 0x06, 0x36, 0x60, 0x1A, 0x43, 0x32, 0x69, 0x2A, 0x68, 0x1B, 0xF7, 0xFF, 0x61, 
+	0x2B, 0xF7, 0xFF, 0xFE, 0xD4, 0xF7, 0xFF, 0xF8, 0xC1, 0xF7, 0xFF, 0xF9, 0x0F, 0xF7, 0xFF, 0xF9, 
+	0x7D, 0xBD, 0xF8, 0xFB, 0x65, 0x20, 0x00, 0x00, 0x14, 0x20, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 
+	0x08, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0x7F, 0xFF, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 
+	0x48, 0xF0, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 
+	0x10, 0xE0, 0x00, 0xE1, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xE0, 0x00, 0xED, 
+	0x00, 0xE0, 0x00, 0xE1, 0x04, 0x80, 0xFF, 0xFF, 0xFF, 0x4A, 0x0C, 0xB5, 0x08, 0x49, 0x0D, 0x4B, 
+	0x0C, 0xCA, 0x01, 0xE0, 0x01, 0x42, 0x8B, 0xC3, 0x01, 0x4B, 0x0B, 0xD3, 0xFB, 0x22, 0x00, 0x49, 
+	0x0B, 0xC3, 0x04, 0xE0, 0x00, 0xD3, 0xFC, 0x42, 0x8B, 0xF8, 0x26, 0xF7, 0xFF, 0x22, 0x00, 0x4B, 
+	0x08, 0xC3, 0x04, 0xE0, 0x00, 0xD3, 0xFC, 0x42, 0x83, 0x46, 0xC0, 0xBD, 0x08, 0x00, 0x00, 0x59, 
+	0xFC, 0x20, 0x00, 0x00, 0x3C, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 0x11, 
+	0xEC, 0x20, 0x00, 0x1E, 0x0C, 0x4B, 0x13, 0xB5, 0x00, 0x2B, 0x01, 0x68, 0x1B, 0x2B, 0x08, 0xD0, 
+	0x02, 0xE0, 0x0F, 0xD1, 0x1E, 0x4A, 0x11, 0x4B, 0x10, 0x4A, 0x11, 0x60, 0x1A, 0x4A, 0x11, 0x60, 
+	0x5A, 0x60, 0x1A, 0x4B, 0x11, 0x4A, 0x12, 0x4B, 0x11, 0x4A, 0x12, 0x60, 0x1A, 0x4A, 0x12, 0x60, 
+	0x5A, 0xE0, 0x0D, 0x60, 0x9A, 0x4A, 0x08, 0x4B, 0x09, 0x60, 0x13, 0x49, 0x09, 0x4A, 0x0A, 0x60, 
+	0x51, 0x4A, 0x0A, 0x60, 0x13, 0x60, 0x53, 0x60, 0x13, 0x4B, 0x0C, 0x60, 0x93, 0x70, 0x1A, 0x22, 
+	0x01, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x11, 0x50, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x03, 
+	0xF9, 0x00, 0x00, 0x3F, 0x7D, 0x00, 0x00, 0x3F, 0xB5, 0x20, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 
+	0x18, 0x00, 0x00, 0x40, 0xC1, 0x00, 0x00, 0x42, 0xA9, 0x00, 0x00, 0x44, 0x0D, 0x20, 0x00, 0x01, 
+	0xE4, 0x23, 0x00, 0xB5, 0x00, 0x33, 0x01, 0x5C, 0xC2, 0xD1, 0xFB, 0x2A, 0x00, 0xB2, 0xD8, 0x3B, 
+	0x01, 0x46, 0xC0, 0xBD, 0x00, 0x1C, 0x1C, 0xB5, 0xF7, 0x78, 0x1F, 0xAB, 0x08, 0x1C, 0x0E, 0x4B, 
+	0x26, 0x21, 0x01, 0x68, 0x1B, 0x42, 0x0B, 0x40, 0x81, 0x2F, 0x00, 0xD0, 0x44, 0x2C, 0x04, 0xD0, 
+	0x07, 0x4B, 0x22, 0xD8, 0x32, 0x33, 0x05, 0x5D, 0x19, 0x5D, 0x1F, 0x91, 0x00, 0x2C, 0x04, 0xE0, 
+	0x08, 0x4B, 0x1E, 0xD8, 0x2E, 0x31, 0x0A, 0x1C, 0x19, 0x33, 0x0F, 0x5D, 0x09, 0x91, 0x00, 0x5D, 
+	0x1F, 0xD0, 0x28, 0x2C, 0x03, 0xD0, 0x28, 0x2C, 0x00, 0x20, 0x3A, 0xE0, 0x28, 0xF0, 0x01, 0x1C, 
+	0x21, 0x42, 0x86, 0xFC, 0x63, 0x46, 0x6B, 0xDD, 0x05, 0xB2, 0xC0, 0x78, 0x1B, 0x70, 0x68, 0x70, 
+	0x2B, 0x70, 0x2F, 0xE0, 0x02, 0x70, 0x6E, 0x1C, 0x30, 0x43, 0x60, 0x1A, 0x36, 0x23, 0x00, 0x99, 
+	0x01, 0x60, 0xAB, 0x60, 0x69, 0xB2, 0xF6, 0x18, 0x09, 0xF7, 0xFF, 0x91, 0x01, 0xF7, 0xFF, 0xFA, 
+	0xE3, 0x28, 0x00, 0xFB, 0x37, 0xE0, 0x0B, 0xD1, 0xFB, 0x27, 0x00, 0x23, 0x0F, 0xE0, 0x05, 0x93, 
+	0x00, 0x91, 0x00, 0x21, 0x0F, 0x24, 0x02, 0xE0, 0x02, 0x24, 0x01, 0xE0, 0x00, 0x92, 0x01, 0x4D, 
+	0x04, 0xD1, 0xD2, 0x2E, 0x00, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x00, 0x58, 0x00, 0x00, 0x59, 
+	0x73, 0x20, 0x00, 0x00, 0x70, 0x4B, 0x11, 0xB5, 0x38, 0x68, 0x1B, 0x22, 0x01, 0x1C, 0x0D, 0x40, 
+	0x82, 0xD0, 0x19, 0x42, 0x13, 0x23, 0x0B, 0x4C, 0x0E, 0x1C, 0x08, 0x70, 0x23, 0xFF, 0x90, 0xF7, 
+	0xFF, 0x78, 0x63, 0x70, 0x60, 0x33, 0x02, 0x22, 0x07, 0x42, 0x93, 0x40, 0x13, 0x78, 0x63, 0xD1, 
+	0x03, 0xB2, 0xDB, 0x3B, 0x01, 0x23, 0x00, 0x70, 0x63, 0x60, 0xA3, 0x60, 0x65, 0xFA, 0xAA, 0xF7, 
+	0xFF, 0xFA, 0xFE, 0xF7, 0xFF, 0xD1, 0xFB, 0x28, 0x00, 0x46, 0xC0, 0xBD, 0x38, 0x20, 0x00, 0x00, 
+	0x58, 0x20, 0x00, 0x00, 0x70, 0x4C, 0x0B, 0xB5, 0x1F, 0x73, 0xD8, 0x46, 0x6B, 0x2B, 0x00, 0x78, 
+	0x23, 0x20, 0x00, 0xD0, 0x03, 0xF7, 0xFF, 0x49, 0x08, 0x78, 0x23, 0xFF, 0xCD, 0xD0, 0x07, 0x2B, 
+	0x00, 0x21, 0x01, 0x46, 0x6A, 0x32, 0x0F, 0x20, 0x00, 0x91, 0x00, 0x23, 0x04, 0xFF, 0x6A, 0xF7, 
+	0xFF, 0x46, 0xC0, 0xBD, 0x1F, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x87, 0xF7, 0xFF, 0xB5, 
+	0xF8, 0x28, 0x00, 0xFA, 0xD7, 0x4B, 0x39, 0xD1, 0x70, 0x2A, 0x00, 0x68, 0x1A, 0x4B, 0x38, 0xDC, 
+	0x03, 0x2B, 0x00, 0x68, 0x1B, 0x49, 0x37, 0xDD, 0x3E, 0x70, 0x0B, 0x23, 0x03, 0x33, 0x04, 0x4B, 
+	0x36, 0x1C, 0x1C, 0x7F, 0xDB, 0xDA, 0x00, 0x42, 0x9A, 0x70, 0x4B, 0xB2, 0xD3, 0x46, 0x8C, 0x21, 
+	0x0A, 0x23, 0x00, 0x4A, 0x32, 0xE0, 0x1F, 0x49, 0x2D, 0xE0, 0x03, 0x33, 0x01, 0x43, 0x5E, 0x46, 
+	0x66, 0x18, 0x76, 0x20, 0x00, 0x18, 0x37, 0x30, 0x0A, 0xCC, 0x38, 0xAE, 0xF1, 0x10, 0x5F, 0x7F, 
+	0x25, 0x32, 0xD0, 0xF3, 0x2F, 0x00, 0xDA, 0x13, 0x42, 0xA3, 0x18, 0x08, 0x00, 0x58, 0x00, 0xDE, 
+	0x88, 0x80, 0xB2, 0x00, 0x70, 0x10, 0x19, 0x80, 0x12, 0x00, 0x1C, 0x18, 0x70, 0x50, 0x00, 0x40, 
+	0x30, 0x10, 0x33, 0x01, 0x5A, 0x08, 0x0A, 0x00, 0x70, 0x90, 0x32, 0x04, 0x70, 0xD0, 0xDB, 0xDF, 
+	0x42, 0xA3, 0x4A, 0x1F, 0x4B, 0x1D, 0x22, 0x00, 0x60, 0x5A, 0xF7, 0xFF, 0x60, 0x9A, 0xF7, 0xFF, 
+	0xFA, 0x3D, 0x28, 0x00, 0xFA, 0x91, 0xE0, 0x29, 0xD1, 0xFB, 0x68, 0x53, 0x4A, 0x1A, 0xD0, 0x25, 
+	0x33, 0x01, 0x21, 0x13, 0x4B, 0x15, 0x68, 0x11, 0x70, 0x19, 0x70, 0x59, 0x46, 0x94, 0x49, 0x14, 
+	0x4B, 0x16, 0x1C, 0x03, 0x78, 0x1D, 0x1C, 0x23, 0xE0, 0x0D, 0x00, 0x5E, 0xE0, 0x01, 0x30, 0x02, 
+	0x44, 0x66, 0x22, 0x06, 0x18, 0x34, 0x1C, 0x5C, 0x5E, 0xA7, 0xD0, 0xF4, 0x2F, 0x00, 0x1C, 0x23, 
+	0x70, 0x0B, 0x20, 0x00, 0x31, 0x01, 0xDB, 0xF0, 0x42, 0xAB, 0x4A, 0x09, 0x4B, 0x07, 0x60, 0x5A, 
+	0x60, 0x98, 0xFA, 0x12, 0xF7, 0xFF, 0xFA, 0x66, 0xF7, 0xFF, 0xD1, 0xFB, 0x28, 0x00, 0x46, 0xC0, 
+	0xBD, 0xF8, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0x70, 0x20, 0x00, 
+	0x09, 0xAE, 0x20, 0x00, 0x09, 0xF0, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x4B, 0x64, 
+	0xB5, 0x08, 0x2B, 0x1D, 0x88, 0x1B, 0xD8, 0x1A, 0xD0, 0x47, 0xD1, 0x00, 0x2B, 0x05, 0xD8, 0x0D, 
+	0xE0, 0x96, 0xD0, 0x63, 0x2B, 0x02, 0x2B, 0x01, 0xD8, 0x03, 0xE0, 0xB7, 0xD0, 0x00, 0x2B, 0x03, 
+	0xE0, 0x57, 0xE0, 0x87, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0x04, 0xE0, 0x8F, 0xE0, 0xB0, 0xD0, 0x65, 
+	0x2B, 0x07, 0x2B, 0x1B, 0xD3, 0x5C, 0x2B, 0x1C, 0xD0, 0x1C, 0xE0, 0xA7, 0xD0, 0x00, 0x2B, 0x22, 
+	0xE0, 0x22, 0xD8, 0x08, 0xD0, 0x40, 0xD0, 0x5D, 0x2B, 0x1F, 0x2B, 0x20, 0xD3, 0x2A, 0x2B, 0x21, 
+	0xD0, 0x5E, 0xE0, 0x9B, 0xD0, 0x00, 0x2B, 0x41, 0xE0, 0x5E, 0xD8, 0x03, 0xD0, 0x64, 0xD0, 0x00, 
+	0x2B, 0x40, 0xE0, 0x5B, 0xE0, 0x94, 0xD0, 0x61, 0x2B, 0x42, 0xD0, 0x00, 0x2B, 0x60, 0xE0, 0x72, 
+	0xE0, 0x8E, 0x4B, 0x49, 0x4A, 0x48, 0x20, 0x01, 0x78, 0x12, 0x40, 0x90, 0x68, 0x19, 0x43, 0x0A, 
+	0x1C, 0x02, 0xE0, 0x83, 0x60, 0x1A, 0x4B, 0x44, 0x49, 0x43, 0x68, 0x1A, 0x78, 0x09, 0x40, 0x88, 
+	0x20, 0x01, 0x60, 0x1A, 0x43, 0x82, 0x4B, 0x3F, 0xE0, 0x7A, 0x4B, 0x40, 0x78, 0x1A, 0xE0, 0x75, 
+	0x70, 0x1A, 0x21, 0x0D, 0x4B, 0x3C, 0x4B, 0x3E, 0x78, 0x1A, 0x4A, 0x3C, 0x70, 0x1A, 0x78, 0x1A, 
+	0x70, 0x11, 0x2A, 0x00, 0x4B, 0x3C, 0x22, 0x00, 0xD0, 0x02, 0xE0, 0x67, 0x70, 0x5A, 0x78, 0x52, 
+	0x4A, 0x3A, 0xE0, 0x63, 0x70, 0x5A, 0x78, 0x1A, 0x4B, 0x33, 0x70, 0x1A, 0x4B, 0x38, 0x4B, 0x31, 
+	0xE0, 0x5E, 0x4B, 0x37, 0x78, 0x1A, 0xF7, 0xFD, 0x60, 0x1A, 0xE0, 0x57, 0xFC, 0x09, 0x78, 0x1A, 
+	0x4B, 0x2D, 0x70, 0x9A, 0x4B, 0x34, 0xF7, 0xFF, 0x78, 0x98, 0xE0, 0x4F, 0xFC, 0x8D, 0x78, 0x1A, 
+	0x4B, 0x29, 0x70, 0x9A, 0x4B, 0x30, 0x22, 0x0F, 0x4B, 0x29, 0xE0, 0x47, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x2E, 0xE0, 0x43, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x2D, 0xE0, 0x3F, 0x70, 0x1A, 0xF7, 0xFD, 
+	0x20, 0x0C, 0xE0, 0x3B, 0xF9, 0x85, 0xF7, 0xFD, 0x20, 0x0D, 0xE0, 0x37, 0xF9, 0x81, 0x22, 0x01, 
+	0x4B, 0x28, 0xE0, 0x33, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x27, 0xE0, 0x2F, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x26, 0xE0, 0x2B, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x25, 0xE0, 0x27, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x24, 0x4B, 0x14, 0x70, 0x1A, 0x4B, 0x23, 0x78, 0x1A, 0xE0, 0x1F, 0x70, 0x1A, 0x78, 0x1A, 
+	0x4B, 0x11, 0x70, 0x9A, 0x4B, 0x1E, 0x4B, 0x0F, 0xE0, 0x1A, 0x4B, 0x1F, 0x78, 0x1A, 0x78, 0x1A, 
+	0x70, 0x1A, 0x3A, 0x01, 0x4B, 0x10, 0xD8, 0x03, 0x2A, 0x01, 0x22, 0x0F, 0x33, 0x40, 0xE0, 0x0D, 
+	0x70, 0x1A, 0x33, 0x40, 0x4A, 0x1A, 0x2A, 0x00, 0x78, 0x12, 0x4A, 0x19, 0xD0, 0x04, 0x78, 0x12, 
+	0x32, 0x40, 0xE0, 0x03, 0x70, 0x1A, 0x32, 0x40, 0x4A, 0x08, 0x70, 0x1A, 0x78, 0x12, 0x46, 0xC0, 
+	0xBD, 0x08, 0x20, 0x00, 0x00, 0x28, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x58, 0x20, 0x00, 
+	0x03, 0x1D, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x0D, 0x48, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 
+	0x01, 0xDE, 0x20, 0x00, 0x11, 0x50, 0x20, 0x00, 0x0A, 0xAA, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 
+	0x01, 0xDC, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x01, 0xE7, 0x20, 0x00, 0x01, 0xE5, 0x20, 0x00, 
+	0x01, 0x8B, 0x20, 0x00, 0x01, 0xE6, 0x20, 0x00, 0x01, 0x92, 0x20, 0x00, 0x01, 0xE0, 0x20, 0x00, 
+	0x01, 0xDD, 0x00, 0x00, 0x74, 0x9A, 0x4B, 0x4A, 0xB5, 0x30, 0x2B, 0x34, 0x88, 0x1B, 0xD8, 0x0C, 
+	0xD0, 0x47, 0xD0, 0x4F, 0x2B, 0x2E, 0x2B, 0x00, 0xD8, 0x04, 0x2B, 0x1D, 0xD0, 0x14, 0xE0, 0x16, 
+	0xD1, 0x78, 0xD0, 0x51, 0x2B, 0x2F, 0xD1, 0x73, 0x2B, 0x30, 0x2B, 0x38, 0xE0, 0x56, 0xD8, 0x04, 
+	0xD0, 0x66, 0xD0, 0x39, 0x2B, 0x35, 0xD1, 0x6B, 0x2B, 0x37, 0x2B, 0x39, 0xE0, 0x5B, 0x2B, 0x86, 
+	0xD0, 0x63, 0xE0, 0x09, 0xD1, 0x66, 0x7B, 0x5A, 0x4B, 0x3B, 0x70, 0x1A, 0x4B, 0x3B, 0x4B, 0x3B, 
+	0xE0, 0x6F, 0x4B, 0x39, 0x78, 0x1A, 0xE0, 0x6A, 0x70, 0x1A, 0x4A, 0x3A, 0x49, 0x39, 0x2B, 0x00, 
+	0x78, 0x0B, 0x78, 0x10, 0xD1, 0x0F, 0x70, 0x08, 0x49, 0x34, 0x49, 0x37, 0x78, 0x50, 0x68, 0x52, 
+	0x70, 0x08, 0x4C, 0x36, 0x18, 0xD1, 0x19, 0x19, 0x78, 0x08, 0x70, 0x08, 0x33, 0x01, 0xD1, 0xF7, 
+	0x2B, 0x06, 0x68, 0x52, 0xE0, 0x55, 0x78, 0x08, 0x23, 0x00, 0x18, 0xC0, 0x4D, 0x2B, 0x18, 0x10, 
+	0x38, 0x02, 0x19, 0x58, 0x78, 0x04, 0x70, 0x04, 0x33, 0x01, 0xD1, 0xF4, 0x2B, 0x08, 0x4B, 0x2C, 
+	0xE0, 0x47, 0x4B, 0x25, 0x68, 0x1A, 0xE0, 0x42, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x4B, 0x22, 
+	0x79, 0x1A, 0xE0, 0x3C, 0x70, 0x1A, 0x4A, 0x27, 0x4B, 0x22, 0x49, 0x1F, 0x78, 0x1B, 0x68, 0x1A, 
+	0x18, 0xD3, 0x60, 0x0A, 0x68, 0x5B, 0xE0, 0x32, 0x60, 0x4B, 0x1C, 0x1A, 0x4B, 0x1A, 0x78, 0x11, 
+	0x32, 0x2C, 0x29, 0x00, 0x4A, 0x19, 0xE0, 0x09, 0xD1, 0x07, 0x1C, 0x1A, 0x4B, 0x16, 0x78, 0x11, 
+	0x32, 0x2C, 0x29, 0x00, 0x4A, 0x15, 0x8C, 0xDB, 0xD1, 0x02, 0xE0, 0x20, 0x80, 0x13, 0x80, 0x13, 
+	0x8D, 0x1B, 0x4B, 0x19, 0xE0, 0x1D, 0x4B, 0x10, 0x78, 0x1A, 0xE0, 0x18, 0x70, 0x1A, 0x78, 0x1A, 
+	0x4B, 0x17, 0x70, 0x1A, 0x4B, 0x0D, 0x4B, 0x16, 0xE0, 0x13, 0x4B, 0x0B, 0x78, 0x1A, 0xE0, 0x0E, 
+	0x70, 0x1A, 0xB2, 0x9A, 0x3B, 0x90, 0xD8, 0x0A, 0x2A, 0x13, 0x01, 0x5B, 0x4A, 0x09, 0x49, 0x06, 
+	0x78, 0x12, 0x4A, 0x10, 0x18, 0x9B, 0x68, 0x1A, 0x18, 0x9B, 0x60, 0x0A, 0x68, 0x5B, 0xBD, 0x30, 
+	0x60, 0x4B, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x09, 0xAE, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 
+	0x03, 0x1D, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x70, 0x50, 0x00, 0x00, 0x0D, 0x50, 0x00, 
+	0x00, 0x0E, 0x20, 0x00, 0x09, 0x1C, 0x20, 0x00, 0x09, 0xB1, 0x00, 0x00, 0x5B, 0xFF, 0xFA, 0x33, 
+	0xAE, 0xF1, 0x11, 0x00, 0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0x20, 0x00, 0x0A, 0xB3, 0x4B, 
+	0x08, 0xB5, 0x08, 0x2B, 0x86, 0x88, 0x1B, 0x4B, 0x07, 0xD1, 0x0B, 0x2A, 0x01, 0x68, 0x9A, 0x68, 
+	0x9A, 0xDC, 0x02, 0x60, 0x9A, 0x32, 0x01, 0x2B, 0x02, 0x68, 0x9B, 0xF7, 0xFF, 0xD1, 0x01, 0xBD, 
+	0x08, 0xF8, 0x71, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0x70, 0x4C, 0x31, 0xB5, 0x7F, 0x78, 
+	0x23, 0x90, 0x03, 0x1C, 0x16, 0x1C, 0x0D, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x2E, 0x20, 0x01, 0xFD, 
+	0x6E, 0xF7, 0xFF, 0x2B, 0x00, 0x78, 0x23, 0x21, 0x01, 0xD0, 0x06, 0xAA, 0x03, 0x1C, 0x08, 0x91, 
+	0x00, 0x23, 0x04, 0xFD, 0x0C, 0xF7, 0xFF, 0x99, 0x03, 0x4B, 0x28, 0x4A, 0x28, 0x78, 0x1B, 0xD1, 
+	0x15, 0x2B, 0x00, 0x33, 0x4A, 0x1C, 0x13, 0x5E, 0x1B, 0x20, 0x00, 0x42, 0x9E, 0x1B, 0x8E, 0x1C, 
+	0x13, 0xDC, 0x05, 0x20, 0x00, 0x33, 0x4C, 0x42, 0x9E, 0x5E, 0x1B, 0x48, 0x21, 0xDA, 0x08, 0x70, 
+	0x03, 0x23, 0x01, 0x70, 0x03, 0x48, 0x20, 0x70, 0x03, 0x48, 0x20, 0x70, 0x03, 0x48, 0x20, 0x2B, 
+	0x00, 0x78, 0x53, 0x4B, 0x1F, 0xD0, 0x04, 0x43, 0x59, 0x5D, 0x5B, 0x91, 0x03, 0x11, 0x89, 0x00, 
+	0x6A, 0x4B, 0x1D, 0x4B, 0x1D, 0x5A, 0xD0, 0x5E, 0xD4, 0x99, 0x03, 0x4A, 0x14, 0x08, 0xC0, 0x1B, 
+	0x04, 0xB2, 0x89, 0x7C, 0x56, 0x1A, 0x64, 0x4B, 0x19, 0xB2, 0x24, 0xDC, 0x02, 0x42, 0xB4, 0x42, 
+	0xB4, 0x42, 0x76, 0x24, 0x00, 0xDA, 0x02, 0xE0, 0x05, 0x55, 0x5C, 0x7C, 0x96, 0x5D, 0x5C, 0xD0, 
+	0x01, 0x42, 0xA6, 0x55, 0x5C, 0x34, 0x01, 0xB2, 0x9B, 0x1A, 0x43, 0xB2, 0x19, 0x7E, 0x92, 0xDB, 
+	0x02, 0x42, 0x91, 0x21, 0x01, 0x4A, 0x09, 0x4A, 0x0C, 0x70, 0x11, 0x52, 0xAB, 0x00, 0x6D, 0x46, 
+	0xC0, 0xBD, 0x7F, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x8B, 0x20, 0x00, 0x01, 0xE4, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x11, 0x30, 0x20, 
+	0x00, 0x01, 0xC4, 0x00, 0x00, 0x7B, 0x92, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 0x0D, 0x3C, 0x20, 
+	0x00, 0x0A, 0xA4, 0x4B, 0x48, 0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0x89, 0xD0, 0x03, 0x2B, 0x00, 0x49, 
+	0x46, 0x20, 0x00, 0xFC, 0xF4, 0xF7, 0xFF, 0x23, 0x00, 0x4A, 0x45, 0x4A, 0x45, 0x70, 0x13, 0x38, 
+	0x01, 0x20, 0x0C, 0x00, 0x81, 0xB2, 0xC0, 0x28, 0x00, 0x50, 0x8B, 0x4B, 0x42, 0xD1, 0xF9, 0x70, 
+	0x18, 0x4A, 0x42, 0x70, 0x13, 0x23, 0x01, 0x70, 0x13, 0x4A, 0x41, 0x7E, 0x19, 0x4B, 0x41, 0x7D, 
+	0xDA, 0x91, 0x04, 0x7D, 0x1B, 0x92, 0x05, 0x1C, 0x0B, 0x93, 0x06, 0x3B, 0x01, 0xE0, 0x2D, 0x1C, 
+	0x5D, 0xB2, 0xDB, 0x01, 0xEA, 0x4C, 0x3C, 0x88, 0x16, 0x19, 0x12, 0x00, 0x5A, 0x49, 0x3B, 0x52, 
+	0x56, 0x01, 0x5C, 0x9A, 0x05, 0x01, 0xAD, 0x46, 0x9C, 0x94, 0x07, 0x3A, 0x01, 0xE0, 0x1A, 0x1C, 
+	0x93, 0xB2, 0xD2, 0x4C, 0x36, 0x18, 0xEB, 0x5B, 0x19, 0x00, 0x5B, 0x2B, 0x00, 0x9B, 0x06, 0x1C, 
+	0xD3, 0xD0, 0x05, 0x00, 0x5B, 0x18, 0xEB, 0x18, 0xC9, 0x5B, 0x1B, 0x9C, 0x07, 0x10, 0x49, 0x00, 
+	0x7B, 0x18, 0xA7, 0x4B, 0x2F, 0x1C, 0x1C, 0x4C, 0x2F, 0x52, 0xE1, 0x1B, 0x89, 0x23, 0x01, 0x18, 
+	0x40, 0x55, 0x3B, 0xD1, 0xE2, 0x2A, 0x00, 0x2B, 0x00, 0x46, 0x63, 0x4B, 0x25, 0xD1, 0xCF, 0x7D, 
+	0xD9, 0x9C, 0x04, 0xF0, 0x01, 0x43, 0x61, 0x4B, 0x28, 0xF8, 0xD5, 0x8C, 0x58, 0x1C, 0x05, 0x28, 
+	0x00, 0x4C, 0x27, 0x23, 0x40, 0xD1, 0x02, 0xE0, 0x07, 0x60, 0x23, 0x1C, 0x29, 0x01, 0x80, 0xF8, 
+	0xC8, 0xF0, 0x01, 0xDD, 0x00, 0x28, 0x6E, 0x60, 0x20, 0x20, 0x6E, 0x78, 0x23, 0x4C, 0x12, 0xD0, 
+	0x03, 0x2B, 0x00, 0x49, 0x1F, 0x20, 0x00, 0xFC, 0x8A, 0xF7, 0xFF, 0x4A, 0x1E, 0x4B, 0x1B, 0x80, 
+	0x55, 0x8C, 0x5B, 0x78, 0x23, 0x80, 0x13, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 
+	0x00, 0x93, 0x00, 0xF7, 0xFF, 0x1C, 0x0B, 0x4B, 0x18, 0xFC, 0x23, 0x78, 0x1B, 0x48, 0x18, 0x49, 
+	0x18, 0x22, 0x00, 0x3B, 0x01, 0xE0, 0x04, 0x00, 0x5C, 0xB2, 0xDB, 0x52, 0x62, 0x54, 0xC2, 0xD1, 
+	0xF8, 0x2B, 0x00, 0xBD, 0xF0, 0xB0, 0x09, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0x91, 0x20, 
+	0x00, 0x03, 0x1C, 0x20, 0x00, 0x11, 0xBC, 0x20, 0x00, 0x10, 0xF4, 0x20, 0x00, 0x09, 0x20, 0x20, 
+	0x00, 0x11, 0x3C, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x40, 0x02, 0x20, 0x00, 0x11, 0x94, 0x40, 
+	0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x0D, 0x48, 0x20, 
+	0x00, 0x09, 0x78, 0x00, 0x00, 0x59, 0x9A, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x09, 0x7C, 0x20, 
+	0x00, 0x0A, 0xA4, 0x20, 0x00, 0x02, 0x14, 0x4A, 0xA0, 0xB5, 0xF0, 0x70, 0x13, 0x23, 0x00, 0xB0, 
+	0x85, 0x4A, 0x9F, 0x4A, 0x9F, 0x70, 0x13, 0x4A, 0x9F, 0x70, 0x13, 0x4B, 0x9F, 0x70, 0x13, 0x2B, 
+	0x00, 0x78, 0x1B, 0x20, 0x01, 0xD0, 0x03, 0xF7, 0xFF, 0x49, 0x9D, 0x24, 0x00, 0xFC, 0x31, 0x4E, 
+	0x9A, 0x4D, 0x9C, 0x78, 0x33, 0xE0, 0x11, 0xD0, 0x0C, 0x2B, 0x00, 0x7D, 0x29, 0x7D, 0xEB, 0x18, 
+	0xC9, 0x48, 0x99, 0x23, 0x00, 0x01, 0xE2, 0x93, 0x00, 0x18, 0x12, 0x20, 0x01, 0xB2, 0xC9, 0xF7, 
+	0xFF, 0x23, 0x02, 0x34, 0x01, 0xFB, 0xC5, 0x7E, 0x29, 0xB2, 0xE4, 0xD3, 0xEA, 0x42, 0x8C, 0x78, 
+	0x1B, 0x4B, 0x92, 0xD1, 0x00, 0x2B, 0x00, 0x4B, 0x91, 0xE1, 0x0D, 0x2A, 0x00, 0x78, 0x1A, 0x4B, 
+	0x90, 0xD1, 0x1F, 0x2B, 0x00, 0x78, 0x1B, 0x7D, 0xEB, 0xD0, 0x1B, 0xE0, 0x07, 0x4C, 0x8E, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x18, 0x2D, 0x01, 0x5D, 0x2B, 0x00, 0x55, 0x2A, 0x1C, 0x03, 0xD1, 0xF8, 0xB2, 
+	0xC0, 0x1E, 0x58, 0xD0, 0x01, 0x2B, 0x00, 0xE7, 0xF6, 0x1C, 0x0B, 0x48, 0x86, 0x4A, 0x87, 0x01, 
+	0x49, 0x78, 0x12, 0x3A, 0x01, 0xE0, 0x03, 0x18, 0x8C, 0xB2, 0xD2, 0x2A, 0x00, 0x54, 0x23, 0x4B, 
+	0x80, 0xD1, 0xF9, 0x78, 0x19, 0x4A, 0x7E, 0x70, 0x11, 0x78, 0x1B, 0xD0, 0x70, 0x2B, 0x00, 0x7E, 
+	0x1A, 0x4B, 0x78, 0x92, 0x02, 0x7D, 0xD9, 0x93, 0x03, 0x7D, 0x1B, 0x3B, 0x01, 0xE0, 0x22, 0x1C, 
+	0x59, 0xB2, 0xDB, 0x19, 0xC8, 0x01, 0x89, 0x9D, 0x03, 0x4C, 0x79, 0x5B, 0x00, 0x00, 0x40, 0xD0, 
+	0x04, 0x2D, 0x00, 0x00, 0x49, 0x19, 0x89, 0x18, 0x40, 0x5B, 0x09, 0x01, 0x59, 0x10, 0x40, 0x4D, 
+	0x74, 0x18, 0x89, 0x5B, 0x65, 0x00, 0x4C, 0x08, 0xED, 0x4C, 0x6F, 0x1A, 0x28, 0x5D, 0x0C, 0xDA, 
+	0x04, 0x42, 0x84, 0xDD, 0x00, 0x28, 0xFF, 0x4D, 0x6B, 0x20, 0xFF, 0x2B, 0x00, 0x54, 0x68, 0x1C, 
+	0x11, 0xD1, 0xDD, 0xB2, 0xD2, 0x1E, 0x4A, 0xD0, 0x03, 0x29, 0x00, 0x1C, 0x97, 0x9B, 0x02, 0xE7, 
+	0xF4, 0x1C, 0xD6, 0x4B, 0x65, 0x4A, 0x5F, 0x78, 0x1B, 0x7E, 0x17, 0x01, 0x7F, 0x49, 0x62, 0x3B, 
+	0x01, 0xE0, 0x10, 0x4E, 0x64, 0xB2, 0xDB, 0x5B, 0x94, 0x00, 0x5A, 0x56, 0x45, 0x18, 0xF8, 0x1C, 
+	0x2A, 0xB2, 0x26, 0xDA, 0x00, 0x42, 0xB5, 0xB2, 0x12, 0x1C, 0x22, 0xDD, 0x00, 0x2A, 0xFF, 0x54, 
+	0x42, 0x22, 0xFF, 0xD1, 0xEC, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x50, 0xD0, 0x03, 0x2B, 0x00, 0x49, 
+	0x5A, 0x20, 0x03, 0xFA, 0x85, 0xAE, 0xF1, 0x12, 0xFB, 0x94, 0xF7, 0xFF, 0x4D, 0x4E, 0x24, 0x00, 
+	0xE0, 0x0E, 0x4E, 0x4B, 0x2B, 0x00, 0x78, 0x33, 0x4B, 0x50, 0xD0, 0x09, 0x18, 0xD2, 0x01, 0x62, 
+	0x7D, 0xE9, 0x23, 0x00, 0x93, 0x00, 0x20, 0x03, 0xF7, 0xFF, 0x23, 0x01, 0x34, 0x01, 0xFB, 0x2B, 
+	0x7E, 0x2B, 0xB2, 0xE4, 0xD8, 0xED, 0x42, 0xA3, 0x23, 0x01, 0x4A, 0x40, 0x4A, 0x3D, 0x70, 0x13, 
+	0x4A, 0x3B, 0x70, 0x13, 0x4B, 0x3E, 0x70, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x49, 0xD0, 0x6D, 
+	0x02, 0x58, 0x68, 0x1B, 0x4A, 0x3C, 0xD5, 0x69, 0x7D, 0x16, 0x24, 0x80, 0x7D, 0xD2, 0x7E, 0x13, 
+	0x18, 0xB6, 0x4D, 0x45, 0x06, 0x24, 0xB2, 0xF6, 0xE0, 0x18, 0x46, 0xB4, 0xB2, 0xDB, 0x3B, 0x01, 
+	0x00, 0x5A, 0x49, 0x42, 0x5A, 0x56, 0x1C, 0x5F, 0x46, 0x62, 0x01, 0xBF, 0x3A, 0x01, 0xE0, 0x0D, 
+	0x1C, 0x91, 0xB2, 0xD2, 0x48, 0x37, 0x18, 0x79, 0x5A, 0x09, 0x00, 0x49, 0x42, 0x8C, 0x1B, 0x89, 
+	0x1C, 0x0C, 0xDA, 0x00, 0xDD, 0x00, 0x42, 0x8D, 0x2A, 0x00, 0x1C, 0x0D, 0x2B, 0x00, 0xD1, 0xEF, 
+	0x20, 0x16, 0xD1, 0xE4, 0xF7, 0xFF, 0x49, 0x36, 0x4B, 0x25, 0xFB, 0x45, 0x78, 0x1B, 0x4A, 0x35, 
+	0x80, 0x55, 0x80, 0x14, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x16, 0x93, 0x00, 
+	0xF7, 0xFF, 0x1C, 0x0B, 0x4B, 0x26, 0xFA, 0xDF, 0x78, 0x1B, 0x20, 0x80, 0x06, 0x00, 0x49, 0x2A, 
+	0x4D, 0x2E, 0x4E, 0x2D, 0x3B, 0x01, 0xE0, 0x19, 0x5C, 0xF7, 0xB2, 0xDB, 0x46, 0x94, 0x1C, 0x7A, 
+	0x5C, 0xEA, 0x46, 0x64, 0x46, 0xA4, 0x01, 0xA4, 0x44, 0x62, 0x32, 0x02, 0x00, 0x52, 0x4C, 0x1D, 
+	0x4C, 0x22, 0x5B, 0x12, 0x46, 0x94, 0x00, 0x7F, 0x46, 0x64, 0x5B, 0x3A, 0x42, 0x90, 0x1A, 0xA2, 
+	0x1C, 0x10, 0xDA, 0x00, 0xDD, 0x00, 0x42, 0x91, 0x2B, 0x00, 0x1C, 0x11, 0x4B, 0x0C, 0xD1, 0xE3, 
+	0x78, 0x1B, 0x4A, 0x1C, 0x80, 0x51, 0x80, 0x10, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 
+	0x20, 0x16, 0x93, 0x00, 0xF7, 0xFF, 0x1C, 0x0B, 0xB0, 0x05, 0xFA, 0xAD, 0x46, 0xC0, 0xBD, 0xF0, 
+	0x20, 0x00, 0x09, 0xAC, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x11, 0x30, 0x20, 0x00, 0x11, 0x48, 
+	0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x59, 0xAB, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x40, 0x84, 
+	0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x01, 0xE1, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x0E, 0x64, 
+	0x20, 0x00, 0x09, 0x7C, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0D, 0x3C, 
+	0x00, 0x00, 0x59, 0xAF, 0x20, 0x00, 0x00, 0x58, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x11, 0x94, 
+	0x00, 0x00, 0x59, 0xB5, 0x20, 0x00, 0x11, 0x54, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 
+	0x4B, 0xB3, 0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0xA5, 0xD0, 0x00, 0x2B, 0x00, 0x4A, 0xB1, 0xE2, 0x01, 
+	0x78, 0x12, 0x4C, 0xB1, 0x4E, 0xB2, 0x4D, 0xB1, 0xB2, 0x52, 0x7C, 0x64, 0x60, 0x2B, 0x60, 0x6B, 
+	0x81, 0x6B, 0x82, 0x6B, 0x81, 0x2B, 0x82, 0x2B, 0x60, 0xB3, 0x60, 0x33, 0x4F, 0xAD, 0x92, 0x1B, 
+	0x4B, 0xAD, 0x22, 0xFF, 0x60, 0xF2, 0x60, 0x72, 0x7E, 0x3F, 0x94, 0x11, 0x4C, 0xA9, 0x78, 0x1B, 
+	0x93, 0x0B, 0x97, 0x09, 0x4D, 0xA4, 0x7D, 0xE4, 0x23, 0x46, 0x94, 0x08, 0x4F, 0xA2, 0x5E, 0xED, 
+	0x23, 0x48, 0x95, 0x0E, 0x4C, 0xA3, 0x5E, 0xFF, 0x7D, 0x24, 0x97, 0x0F, 0x94, 0x0C, 0x23, 0x2D, 
+	0x4E, 0xA2, 0x4D, 0x9D, 0x78, 0x6D, 0x9F, 0x11, 0x42, 0x7F, 0x68, 0x36, 0x95, 0x0D, 0x4C, 0x9A, 
+	0x97, 0x1D, 0x96, 0x12, 0x4D, 0x98, 0x7C, 0xA4, 0x5C, 0xEB, 0x94, 0x22, 0x93, 0x13, 0x9E, 0x1B, 
+	0x1B, 0x9B, 0x23, 0x10, 0x27, 0x18, 0x93, 0x1E, 0x20, 0x1C, 0x57, 0xEF, 0x56, 0x28, 0x97, 0x14, 
+	0x90, 0x18, 0x21, 0x19, 0x23, 0x00, 0x56, 0x69, 0x24, 0x00, 0x22, 0x00, 0x93, 0x05, 0x91, 0x23, 
+	0x26, 0x00, 0x25, 0x00, 0x20, 0xFF, 0x27, 0x00, 0x23, 0xFF, 0x21, 0x00, 0x94, 0x17, 0x92, 0x06, 
+	0x96, 0x1A, 0x95, 0x10, 0x90, 0x19, 0x97, 0x15, 0x92, 0x1F, 0x91, 0x21, 0x94, 0x1C, 0x93, 0x16, 
+	0x2C, 0x00, 0x9C, 0x09, 0xE1, 0x27, 0xD1, 0x00, 0x4D, 0x89, 0x9B, 0x09, 0xB2, 0xDB, 0x3B, 0x01, 
+	0x00, 0x5B, 0x93, 0x09, 0x9E, 0x08, 0x5B, 0x5B, 0x2E, 0x00, 0x93, 0x0A, 0x9F, 0x09, 0xD0, 0xF0, 
+	0x37, 0x01, 0x48, 0x84, 0x18, 0x1B, 0x01, 0xFB, 0x99, 0x0A, 0x88, 0x1B, 0x1A, 0x5A, 0x9C, 0x0E, 
+	0xDA, 0x00, 0x42, 0x94, 0x9D, 0x0F, 0xE1, 0x92, 0xDD, 0x00, 0x42, 0x95, 0x9E, 0x09, 0xE1, 0x8B, 
+	0x21, 0x01, 0x01, 0xBF, 0x22, 0x00, 0x25, 0x02, 0x97, 0x03, 0x01, 0x70, 0x4D, 0x7A, 0xE0, 0x2C, 
+	0x00, 0x64, 0x18, 0x84, 0x27, 0x18, 0x46, 0x6E, 0x5F, 0xBD, 0x5B, 0x2C, 0x42, 0xAC, 0x1A, 0xE4, 
+	0xB2, 0xA7, 0xDD, 0x01, 0x46, 0x6E, 0x97, 0x06, 0x5F, 0xBD, 0x27, 0x14, 0xDA, 0x01, 0x42, 0xAC, 
+	0x94, 0x05, 0xB2, 0xA4, 0x4F, 0x70, 0x18, 0x82, 0x52, 0xBB, 0x00, 0x52, 0xB2, 0xCB, 0x9A, 0x08, 
+	0xD9, 0xBD, 0x42, 0x9A, 0x1C, 0x8D, 0x9A, 0x03, 0x4C, 0x6C, 0x19, 0x53, 0x5B, 0x1B, 0x00, 0x5B, 
+	0x9F, 0x0E, 0x9E, 0x0A, 0x1B, 0x9C, 0x1C, 0x0A, 0xDD, 0x00, 0x42, 0xBC, 0x9E, 0x0F, 0xE1, 0x38, 
+	0x42, 0xB4, 0x31, 0x01, 0xE0, 0xD1, 0xDA, 0x00, 0x2F, 0x00, 0x9F, 0x0C, 0x9E, 0x03, 0xD0, 0x07, 
+	0x19, 0x34, 0x1C, 0xD4, 0x00, 0x64, 0x4F, 0x61, 0x18, 0xE3, 0x5B, 0xE4, 0x9C, 0x0D, 0x10, 0x5B, 
+	0xD0, 0x06, 0x2C, 0x00, 0x18, 0x84, 0x4E, 0x5E, 0x9F, 0x12, 0x5D, 0xA4, 0x43, 0x7B, 0x43, 0x63, 
+	0x9C, 0x0B, 0x13, 0x1B, 0xD0, 0xBA, 0x2C, 0x00, 0x4F, 0x57, 0x18, 0x86, 0x5B, 0x3F, 0x00, 0x74, 
+	0x4F, 0x58, 0x46, 0xBC, 0x46, 0x66, 0x57, 0xBC, 0x1B, 0x34, 0x08, 0xF6, 0x46, 0x6F, 0x94, 0x07, 
+	0x96, 0x04, 0x24, 0x18, 0x9E, 0x07, 0x5F, 0xE7, 0x42, 0xBC, 0x1A, 0xF4, 0xB2, 0xA7, 0xDD, 0x01, 
+	0x46, 0x6E, 0x97, 0x06, 0x5F, 0xBE, 0x27, 0x14, 0xDA, 0x01, 0x42, 0xB4, 0x96, 0x05, 0xB2, 0xA6, 
+	0x42, 0xBC, 0x9F, 0x11, 0x18, 0x84, 0xDD, 0x5D, 0x4C, 0x4B, 0x46, 0xA4, 0x46, 0x66, 0x27, 0x00, 
+	0x9F, 0x04, 0x55, 0x37, 0x1A, 0xFC, 0x9E, 0x13, 0xD0, 0x08, 0x2E, 0x00, 0x9C, 0x07, 0x9F, 0x1B, 
+	0x43, 0x7B, 0x9E, 0x1E, 0x9F, 0x04, 0x43, 0x74, 0x11, 0x24, 0x19, 0x1C, 0x1C, 0x23, 0x1B, 0x3C, 
+	0xDA, 0x17, 0x33, 0x7F, 0x18, 0x82, 0x4E, 0x3F, 0x54, 0xB3, 0x23, 0x80, 0x9E, 0x21, 0x9A, 0x23, 
+	0x18, 0xF6, 0x1A, 0xA3, 0xAF, 0x1F, 0x96, 0x21, 0x5E, 0xFB, 0x23, 0x00, 0xDC, 0x01, 0x42, 0x9C, 
+	0x94, 0x1F, 0xB2, 0xA4, 0x4C, 0x35, 0x9A, 0x03, 0x00, 0x6D, 0x19, 0x55, 0x5B, 0x2B, 0x27, 0x00, 
+	0xE7, 0x83, 0x53, 0x2F, 0x2C, 0x7E, 0x18, 0x83, 0x4E, 0x32, 0xDD, 0x36, 0x54, 0xF7, 0x27, 0x7F, 
+	0x42, 0xBC, 0x9F, 0x14, 0x9E, 0x17, 0xDB, 0x03, 0x18, 0xF6, 0x1B, 0xE3, 0xAF, 0x10, 0x96, 0x17, 
+	0x5E, 0xFB, 0x23, 0x00, 0xDC, 0x24, 0x42, 0x9C, 0x9E, 0x18, 0xB2, 0xA3, 0xDB, 0x11, 0x42, 0xB4, 
+	0x9C, 0x09, 0x9F, 0x1A, 0xDA, 0x00, 0x42, 0xA7, 0x9E, 0x16, 0x94, 0x1A, 0x42, 0xA6, 0x9C, 0x09, 
+	0x94, 0x16, 0xDD, 0x00, 0x42, 0x96, 0x9E, 0x15, 0x5C, 0x96, 0xAE, 0xF1, 0x13, 0x92, 0x15, 0xDA, 
+	0x00, 0x42, 0xBA, 0x9F, 0x19, 0x92, 0x19, 0xDA, 0x00, 0x4C, 0x1D, 0x9A, 0x03, 0x00, 0x6D, 0x19, 
+	0x55, 0x53, 0x2B, 0x5B, 0x2A, 0x9E, 0x1D, 0xE7, 0x54, 0x42, 0xB4, 0x18, 0x87, 0x4C, 0x1B, 0xDA, 
+	0x0E, 0x55, 0x3E, 0x26, 0x00, 0xB2, 0xA3, 0xE7, 0x9F, 0xE7, 0xD8, 0x93, 0x10, 0x54, 0xF4, 0x4E, 
+	0x16, 0xDA, 0xC7, 0x2C, 0x00, 0x42, 0xBC, 0x9F, 0x23, 0xE7, 0xA9, 0xDC, 0xAF, 0x97, 0x20, 0x4E, 
+	0x13, 0x9E, 0x22, 0x5D, 0xBC, 0x42, 0xB7, 0xB2, 0x67, 0x9F, 0x20, 0xD0, 0x8D, 0x34, 0x01, 0x4E, 
+	0x0F, 0xE7, 0x88, 0x55, 0xBC, 0x20, 0x00, 0x09, 0xAC, 0x20, 0x00, 0x00, 0x4C, 0x20, 0x00, 0x0D, 
+	0x48, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 
+	0x1C, 0x20, 0x00, 0x09, 0x78, 0x20, 0x00, 0x11, 0x94, 0x40, 0x00, 0x40, 0x04, 0x20, 0x00, 0x03, 
+	0xF8, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x79, 0x12, 0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x0A, 
+	0xB3, 0x27, 0x01, 0x9C, 0x09, 0x2C, 0x00, 0x97, 0x1C, 0xE6, 0xD7, 0xD0, 0x00, 0x46, 0x6F, 0x46, 
+	0x6D, 0x20, 0x14, 0x26, 0x18, 0x5B, 0xC0, 0x5B, 0x76, 0x99, 0x17, 0x4D, 0x41, 0x1C, 0x2F, 0xAC, 
+	0x10, 0x82, 0x68, 0x82, 0x2E, 0x88, 0x25, 0x60, 0x29, 0x1C, 0x3C, 0x9B, 0x21, 0x9E, 0x1A, 0x81, 
+	0x3D, 0x60, 0x63, 0x4F, 0x3C, 0x88, 0x25, 0xAC, 0x1F, 0x98, 0x16, 0x60, 0xBE, 0x9A, 0x19, 0x99, 
+	0x15, 0x9E, 0x0B, 0x4C, 0x37, 0x60, 0x39, 0x60, 0xF8, 0x81, 0x65, 0x60, 0x7A, 0xD0, 0x24, 0x2E, 
+	0x00, 0x78, 0x1B, 0x4B, 0x35, 0xD0, 0x03, 0x2B, 0x00, 0x68, 0x1B, 0x4B, 0x34, 0xDD, 0x1C, 0x2B, 
+	0x00, 0x78, 0x23, 0x4C, 0x33, 0xD1, 0x56, 0x2B, 0x00, 0x7E, 0x3B, 0x4F, 0x32, 0xD0, 0x14, 0x2B, 
+	0x00, 0x9F, 0x09, 0x4D, 0x31, 0x78, 0x23, 0x26, 0x01, 0xD0, 0x08, 0x2B, 0x00, 0x01, 0x7A, 0x48, 
+	0x2D, 0x19, 0x52, 0x7D, 0xC1, 0x23, 0x01, 0x20, 0x03, 0xF7, 0xFF, 0x96, 0x00, 0x49, 0x29, 0xF8, 
+	0xAD, 0x7E, 0x0B, 0x37, 0x01, 0x42, 0xBB, 0xB2, 0xFF, 0x4C, 0x26, 0xD8, 0xED, 0x2B, 0x00, 0x7D, 
+	0x23, 0x7E, 0x22, 0xD0, 0x13, 0x3A, 0x01, 0x7D, 0xE4, 0xB2, 0xD2, 0x49, 0x24, 0x20, 0x00, 0x34, 
+	0x02, 0x01, 0x9B, 0x1C, 0x53, 0x00, 0x5B, 0x19, 0x1B, 0x5A, 0x5D, 0x3A, 0x01, 0x5A, 0x5D, 0xB2, 
+	0xD2, 0xE7, 0xF5, 0x52, 0x58, 0x96, 0x1C, 0x26, 0x01, 0x4D, 0x1D, 0xE6, 0x74, 0x7E, 0xAB, 0x4E, 
+	0x1D, 0x4F, 0x13, 0x68, 0x32, 0x21, 0x08, 0x43, 0x53, 0x48, 0x1B, 0x5E, 0x79, 0x4A, 0x1B, 0x11, 
+	0x9B, 0x0F, 0xDC, 0x17, 0xCD, 0x42, 0x99, 0x78, 0x00, 0x70, 0x15, 0x41, 0x65, 0xD1, 0x0A, 0x28, 
+	0x00, 0x2C, 0x00, 0x9C, 0x1C, 0x23, 0x01, 0xD0, 0x07, 0x4A, 0x15, 0x70, 0x13, 0x70, 0x13, 0x49, 
+	0x15, 0x70, 0x0B, 0x4A, 0x15, 0xB0, 0x25, 0x70, 0x13, 0x25, 0x01, 0xBD, 0xF0, 0xE6, 0x51, 0x95, 
+	0x1C, 0x94, 0x1C, 0x24, 0x01, 0x20, 0x03, 0xE6, 0x4E, 0xF7, 0xFF, 0x49, 0x10, 0xE7, 0xA3, 0xF8, 
+	0xBD, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x10, 0xE4, 0x20, 0x00, 0x01, 0xDE, 0x20, 0x00, 0x01, 
+	0x20, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0E, 0x64, 0x40, 0x00, 0x40, 
+	0x00, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0x78, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 0x09, 
+	0x14, 0x20, 0x00, 0x11, 0x30, 0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 0x01, 0xC4, 0x00, 0x00, 0x59, 
+	0xF0, 0x4B, 0x2F, 0xB5, 0xF0, 0x78, 0x1C, 0xB0, 0x85, 0x4E, 0x2F, 0x4D, 0x2E, 0x3C, 0x01, 0xE0, 
+	0x10, 0x57, 0x2B, 0xB2, 0xE4, 0x1C, 0x59, 0x57, 0x32, 0x01, 0x89, 0x32, 0x02, 0x4A, 0x2B, 0x18, 
+	0x89, 0x5A, 0x88, 0x00, 0x49, 0x00, 0x5B, 0x4A, 0x2A, 0x1C, 0x21, 0x5A, 0x9A, 0xFB, 0x0A, 0xF7, 
+	0xFF, 0xD1, 0xEC, 0x2C, 0x00, 0x78, 0x1B, 0x4B, 0x27, 0xD0, 0x08, 0x2B, 0x00, 0x20, 0x03, 0x4B, 
+	0x20, 0x23, 0x01, 0x78, 0x19, 0x4A, 0x24, 0x93, 0x00, 0xF7, 0xFF, 0x23, 0x02, 0x4B, 0x23, 0xF8, 
+	0x1D, 0x78, 0x18, 0x49, 0x1E, 0x1C, 0x84, 0x78, 0x9A, 0x78, 0xDE, 0x92, 0x03, 0x94, 0x02, 0x23, 
+	0x00, 0x01, 0xA4, 0xE0, 0x0D, 0x00, 0x64, 0x19, 0xE4, 0x25, 0x00, 0x5A, 0x65, 0x32, 0x01, 0x52, 
+	0x65, 0x9C, 0x02, 0xE0, 0x02, 0x18, 0xE7, 0x22, 0x00, 0xD1, 0xF2, 0x1A, 0xB4, 0x9D, 0x03, 0x33, 
+	0x01, 0x42, 0xAA, 0x18, 0x1A, 0x4B, 0x15, 0xDB, 0xF5, 0x78, 0x58, 0x49, 0x10, 0x1C, 0x42, 0x78, 
+	0xDE, 0x42, 0x5B, 0x23, 0x01, 0x22, 0x00, 0x92, 0x02, 0xE0, 0x08, 0x1C, 0x9F, 0x18, 0xAC, 0x9D, 
+	0x02, 0x19, 0xE4, 0x01, 0xA4, 0x5A, 0x65, 0x00, 0x64, 0x52, 0x65, 0x25, 0x00, 0x18, 0x14, 0x32, 
+	0x01, 0xDB, 0xF3, 0x42, 0xB4, 0x33, 0x01, 0x9A, 0x03, 0xDB, 0xEC, 0x42, 0x93, 0xBD, 0xF0, 0xB0, 
+	0x05, 0x20, 0x00, 0x09, 0x7C, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 0x40, 0x00, 0x40, 
+	0x00, 0x20, 0x00, 0x11, 0x94, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 0x03, 
+	0x0A, 0x4B, 0x0C, 0xB5, 0x30, 0x78, 0xDB, 0x4C, 0x0C, 0xE0, 0x10, 0x49, 0x0C, 0xB2, 0xDB, 0x3B, 
+	0x01, 0x4D, 0x0B, 0x1C, 0x5A, 0x19, 0x52, 0x01, 0xD2, 0xD1, 0x03, 0x1C, 0x45, 0x00, 0x5A, 0x88, 
+	0x15, 0xE0, 0x04, 0x52, 0x55, 0x01, 0x5A, 0x88, 0x15, 0x00, 0x52, 0x18, 0x12, 0x2B, 0x00, 0x53, 
+	0x15, 0xBD, 0x30, 0xD1, 0xEC, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x11, 
+	0x94, 0x40, 0x00, 0x40, 0x02, 0xB0, 0x8D, 0xB5, 0xF0, 0x92, 0x0B, 0x91, 0x0A, 0x1C, 0x41, 0x4B, 
+	0x63, 0x4A, 0x63, 0xD1, 0x0C, 0x7E, 0x12, 0x49, 0x63, 0x92, 0x03, 0x3A, 0x01, 0x78, 0x5E, 0x78, 
+	0xDA, 0x23, 0x00, 0x00, 0x54, 0x18, 0x64, 0x1C, 0x55, 0xE0, 0x0E, 0x46, 0x94, 0x79, 0x5A, 0x7B, 
+	0xDC, 0x3A, 0x01, 0x18, 0xA2, 0x4A, 0x5C, 0xE0, 0x10, 0x01, 0xC9, 0x18, 0xE9, 0x88, 0x0A, 0x18, 
+	0x89, 0x53, 0xE2, 0x00, 0x5F, 0x22, 0x00, 0x88, 0x0A, 0x3B, 0x01, 0x80, 0x0A, 0x19, 0xDA, 0x46, 
+	0x67, 0xDA, 0xF0, 0x42, 0xB2, 0x24, 0x00, 0x9A, 0x03, 0x4D, 0x54, 0x01, 0x56, 0x23, 0x00, 0x18, 
+	0x36, 0x1C, 0x11, 0x00, 0x76, 0x93, 0x07, 0x93, 0x08, 0x93, 0x05, 0x93, 0x06, 0x96, 0x09, 0x95, 
+	0x03, 0xE0, 0x55, 0x46, 0xA4, 0xD1, 0x04, 0x1C, 0x44, 0x00, 0x56, 0x4C, 0x4A, 0x5A, 0xE4, 0x19, 
+	0x34, 0x4C, 0x4B, 0xE0, 0x04, 0x19, 0x3E, 0x9F, 0x09, 0x5B, 0x34, 0x01, 0x5C, 0x4F, 0x46, 0x1C, 
+	0x4E, 0x01, 0xF6, 0x96, 0x04, 0x88, 0x37, 0x19, 0xF6, 0xB2, 0x3E, 0xB2, 0x24, 0x1B, 0xA6, 0x4F, 
+	0x45, 0x19, 0xE7, 0x00, 0x54, 0x52, 0xFE, 0x17, 0xF4, 0x40, 0x66, 0x19, 0x36, 0x24, 0x01, 0x1C, 
+	0x0F, 0x42, 0xB9, 0x43, 0xA7, 0x9C, 0x07, 0xD1, 0x09, 0x94, 0x07, 0x19, 0xA4, 0xDD, 0x00, 0x42, 
+	0xB5, 0x9F, 0x06, 0x1C, 0x35, 0xDB, 0x0B, 0x42, 0xB7, 0x9C, 0x08, 0xE0, 0x0D, 0x19, 0xA4, 0x9F, 
+	0x03, 0x42, 0xB7, 0x94, 0x08, 0x96, 0x03, 0xDD, 0x00, 0x42, 0xB4, 0x9C, 0x05, 0xE0, 0x02, 0xDB, 
+	0x02, 0xE0, 0x00, 0x96, 0x06, 0x9E, 0x04, 0x96, 0x05, 0x4E, 0x2F, 0x01, 0xF4, 0x52, 0x9F, 0xAE, 
+	0xF1, 0x14, 0x1C, 0x47, 0x19, 0xA4, 0x88, 0x27, 0xD1, 0x0E, 0x97, 0x04, 0x4E, 0x2B, 0x19, 0xBE, 
+	0x00, 0x57, 0x27, 0x10, 0x96, 0x02, 0x5B, 0xBF, 0x46, 0x6E, 0x52, 0xF7, 0x9E, 0x02, 0x26, 0x00, 
+	0x88, 0x26, 0xE0, 0x05, 0x80, 0x26, 0x4E, 0x27, 0x88, 0x27, 0x19, 0xA6, 0x9C, 0x09, 0x53, 0x37, 
+	0x01, 0x5C, 0x3B, 0x02, 0x39, 0x01, 0xDA, 0xA7, 0x45, 0x61, 0xD1, 0x13, 0x30, 0x01, 0x78, 0x23, 
+	0x4C, 0x23, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x22, 0x20, 0x01, 0xFF, 0x70, 0xF7, 0xFE, 0x2B, 0x00, 
+	0x78, 0x23, 0x4B, 0x17, 0xD0, 0x08, 0x78, 0xD9, 0x20, 0x01, 0x93, 0x00, 0x23, 0x00, 0x23, 0x02, 
+	0x4A, 0x16, 0xFF, 0x0C, 0xF7, 0xFE, 0x9F, 0x08, 0x9E, 0x07, 0x19, 0xF3, 0x9C, 0x0A, 0x9E, 0x05, 
+	0x60, 0x23, 0x9C, 0x06, 0x9F, 0x03, 0x1B, 0x65, 0x1B, 0xF3, 0xDA, 0x00, 0x42, 0x9D, 0x9E, 0x0B, 
+	0x1C, 0x1D, 0x60, 0x35, 0x4C, 0x12, 0x2B, 0x00, 0x78, 0x23, 0x20, 0x0B, 0xD0, 0x03, 0xF7, 0xFE, 
+	0x49, 0x11, 0x78, 0x23, 0xFF, 0x4D, 0xD0, 0x08, 0x2B, 0x00, 0x20, 0x0B, 0x4B, 0x06, 0x23, 0x01, 
+	0x7E, 0x19, 0x4A, 0x09, 0x93, 0x00, 0xF7, 0xFE, 0x23, 0x02, 0xB0, 0x0D, 0xFE, 0xE9, 0x46, 0xC0, 
+	0xBD, 0xF0, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x11, 0x94, 0x40, 0x00, 
+	0x40, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 
+	0x01, 0xEB, 0x00, 0x00, 0x59, 0xC6, 0x00, 0x00, 0x59, 0xCD, 0x4B, 0xA6, 0xB5, 0xF0, 0x78, 0x1D, 
+	0xB0, 0x85, 0xD0, 0x29, 0x2D, 0x00, 0x4C, 0xA5, 0x4B, 0xA4, 0x4B, 0xA5, 0x78, 0x18, 0x68, 0x19, 
+	0xB2, 0x46, 0x00, 0xB2, 0x68, 0x5B, 0x51, 0x13, 0x18, 0xCB, 0xB2, 0xD2, 0x1D, 0x82, 0x23, 0x06, 
+	0x25, 0x00, 0xB2, 0xDB, 0x3B, 0x01, 0xD5, 0x00, 0x1A, 0xF1, 0x00, 0x89, 0x31, 0x0C, 0x18, 0x6D, 
+	0x59, 0x09, 0x2A, 0x0B, 0x1C, 0x11, 0x39, 0x0C, 0xD9, 0x01, 0x00, 0x89, 0xB2, 0xC9, 0x3A, 0x01, 
+	0x58, 0x61, 0xB2, 0xD2, 0x1A, 0x6D, 0xD1, 0xEB, 0x2B, 0x00, 0x4A, 0x93, 0x30, 0x01, 0x70, 0x10, 
+	0xB2, 0xC0, 0x28, 0x0B, 0xB2, 0x40, 0x70, 0x13, 0xDD, 0x00, 0x78, 0x1B, 0x4B, 0x92, 0xD0, 0x00, 
+	0x2B, 0x00, 0x4B, 0x91, 0xE1, 0x15, 0x5E, 0x5B, 0x21, 0x14, 0xDA, 0x02, 0x42, 0x9D, 0x22, 0x01, 
+	0x4B, 0x8F, 0x4B, 0x8B, 0x70, 0x1A, 0x5E, 0x9E, 0x22, 0x10, 0x5F, 0x1B, 0x24, 0x12, 0x4B, 0x85, 
+	0x1A, 0xF6, 0x28, 0x00, 0x78, 0x18, 0x4B, 0x8A, 0xD1, 0x16, 0x68, 0x1B, 0x4F, 0x8A, 0x80, 0xBB, 
+	0x4C, 0x8A, 0x80, 0x3E, 0x78, 0x23, 0xD0, 0x02, 0x2B, 0x00, 0xF7, 0xFE, 0x49, 0x88, 0x78, 0x23, 
+	0xFE, 0xD7, 0xD0, 0x07, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x00, 0x93, 0x00, 0x1C, 0x0B, 
+	0x1C, 0x3A, 0xFE, 0x74, 0xF7, 0xFE, 0x7D, 0x9A, 0x4B, 0x7C, 0xDC, 0x07, 0x42, 0x96, 0x78, 0x1A, 
+	0x4B, 0x80, 0x29, 0x02, 0xB2, 0x51, 0x32, 0x01, 0xDC, 0x08, 0xE0, 0x05, 0x70, 0x1A, 0x42, 0x9E, 
+	0x7D, 0xDB, 0x4B, 0x7B, 0xDB, 0x02, 0x70, 0x1A, 0x22, 0x00, 0x4A, 0x76, 0x4B, 0x71, 0x68, 0x1B, 
+	0x68, 0x59, 0x18, 0xCB, 0x80, 0x15, 0x4B, 0x74, 0x80, 0x53, 0x78, 0x1B, 0x80, 0x96, 0xD0, 0x06, 
+	0x2B, 0x00, 0x93, 0x00, 0x23, 0x01, 0x21, 0x03, 0x20, 0x19, 0xF7, 0xFE, 0x23, 0x02, 0x4B, 0x6B, 
+	0xFE, 0x4F, 0x78, 0x1B, 0x4C, 0x64, 0xD0, 0x61, 0x2B, 0x00, 0x78, 0x2B, 0x4D, 0x6B, 0xD0, 0x03, 
+	0x2B, 0x00, 0x49, 0x6C, 0x20, 0x19, 0xFE, 0x9A, 0xF7, 0xFE, 0x78, 0x1B, 0x4B, 0x69, 0xD1, 0x05, 
+	0x2B, 0x00, 0x2A, 0x00, 0x78, 0x22, 0x4A, 0x61, 0xD0, 0x52, 0xE0, 0x4F, 0x70, 0x13, 0xD1, 0x4D, 
+	0x2B, 0x03, 0x2B, 0x00, 0x78, 0x2B, 0x20, 0x00, 0xD0, 0x03, 0xF7, 0xFE, 0x49, 0x63, 0x4B, 0x55, 
+	0xFE, 0x87, 0x78, 0x19, 0x4A, 0x62, 0xD1, 0x1A, 0x29, 0x00, 0x70, 0x18, 0x20, 0x01, 0x7D, 0xD6, 
+	0x7E, 0x13, 0x4A, 0x60, 0x4D, 0x5F, 0x3B, 0x01, 0xE0, 0x0B, 0x18, 0xF8, 0xB2, 0xDB, 0x5A, 0xA1, 
+	0x00, 0x44, 0x52, 0xA1, 0x00, 0xC9, 0x55, 0x41, 0x21, 0x00, 0xD1, 0xF4, 0x2B, 0x00, 0x1E, 0x59, 
+	0x46, 0x63, 0x2B, 0x00, 0xB2, 0xC9, 0x1C, 0x33, 0xD0, 0x23, 0x46, 0x8C, 0x01, 0x4F, 0x7E, 0x13, 
+	0xE7, 0xF4, 0x4A, 0x54, 0x7D, 0xD6, 0x3B, 0x01, 0xE0, 0x0E, 0xB2, 0xDB, 0x4D, 0x51, 0x00, 0x60, 
+	0x18, 0xFC, 0x00, 0xE4, 0x57, 0x64, 0x5A, 0x84, 0x94, 0x02, 0x1B, 0x64, 0x9D, 0x02, 0x2B, 0x00, 
+	0x52, 0x84, 0x1C, 0x0B, 0xD1, 0xF1, 0xB2, 0xC9, 0x1E, 0x59, 0xD0, 0x02, 0x2B, 0x00, 0x01, 0x4F, 
+	0x1C, 0x33, 0x4A, 0x3A, 0xE7, 0xF5, 0x31, 0x30, 0x1C, 0x11, 0x42, 0x8A, 0xC2, 0x08, 0x4B, 0x3B, 
+	0xD1, 0xFC, 0x70, 0x1A, 0x22, 0x00, 0x22, 0x01, 0x4B, 0x44, 0xE0, 0x60, 0x70, 0x1A, 0x4B, 0x43, 
+	0x78, 0x22, 0xD1, 0x06, 0x2A, 0x00, 0x21, 0x01, 0x4A, 0x40, 0x68, 0x1A, 0x70, 0x11, 0x60, 0x1A, 
+	0x18, 0x52, 0x22, 0x00, 0xE0, 0x55, 0x4B, 0x39, 0x60, 0x1A, 0x7E, 0x1C, 0x48, 0x3D, 0x49, 0x39, 
+	0x7D, 0xDB, 0x4B, 0x2D, 0x93, 0x02, 0x93, 0x03, 0x7C, 0x9B, 0x3B, 0x01, 0xE0, 0x11, 0x18, 0xF2, 
+	0xB2, 0xDB, 0x9D, 0x03, 0x56, 0x14, 0xD1, 0x07, 0x42, 0xAC, 0x00, 0x54, 0x4D, 0x31, 0x5A, 0x65, 
+	0x57, 0x57, 0x52, 0x67, 0x1B, 0xEF, 0x54, 0x14, 0x24, 0x00, 0xD1, 0xEE, 0x2B, 0x00, 0x1E, 0x65, 
+	0x46, 0x64, 0x2C, 0x00, 0xB2, 0xED, 0x9B, 0x02, 0xD0, 0x03, 0x46, 0xAC, 0x01, 0x6E, 0x4B, 0x2D, 
+	0xE7, 0xF4, 0x07, 0x5D, 0x68, 0x1B, 0x4B, 0x20, 0xD5, 0x2B, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x02, 
+	0xD0, 0x22, 0xF7, 0xFE, 0x49, 0x29, 0xE0, 0x1D, 0xFE, 0x03, 0x01, 0x62, 0x7D, 0xE9, 0x48, 0x21, 
+	0x1C, 0x0B, 0xE0, 0x08, 0x92, 0x02, 0x9A, 0x02, 0x3B, 0x01, 0x18, 0xD2, 0xB2, 0xDB, 0x5A, 0x12, 
+	0x00, 0x52, 0x08, 0xD2, 0x00, 0x5F, 0x2B, 0x00, 0x53, 0xBA, 0x4A, 0x13, 0xD1, 0xF4, 0x2A, 0x00, 
+	0x78, 0x12, 0x20, 0x02, 0xD0, 0x05, 0x4A, 0x0F, 0x93, 0x00, 0xF7, 0xFE, 0x1C, 0x03, 0x34, 0x01, 
+	0xFD, 0x8F, 0xE0, 0x01, 0xB2, 0xE4, 0x4E, 0x0B, 0x4D, 0x11, 0x42, 0xA3, 0x7E, 0x2B, 0xB0, 0x05, 
+	0xD8, 0xDC, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x10, 0xF4, 0x20, 0x00, 
+	0x11, 0xBC, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 
+	0x11, 0x3C, 0x20, 0x00, 0x11, 0x34, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 
+	0x59, 0xD2, 0x20, 0x00, 0x09, 0x20, 0x00, 0x00, 0x59, 0xD9, 0x00, 0x00, 0x59, 0xE2, 0x20, 0x00, 
+	0x09, 0xAE, 0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x11, 0x48, 0x20, 0x00, 
+	0x01, 0xBC, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x00, 0x58, 0x00, 0x00, 0x59, 0xEB, 0x4B, 0x25, 
+	0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0x87, 0xD1, 0x2B, 0x2B, 0x00, 0x4B, 0x24, 0x4A, 0x23, 0x78, 0x1B, 
+	0x7C, 0x90, 0x7E, 0xD2, 0x90, 0x04, 0xB2, 0x52, 0x4D, 0x22, 0x92, 0x05, 0xB2, 0x92, 0xE0, 0x1D, 
+	0x4A, 0x21, 0x4C, 0x21, 0x3B, 0x01, 0x5C, 0xE1, 0xB2, 0xDB, 0x42, 0xB9, 0x9F, 0x04, 0x00, 0x59, 
+	0xD1, 0x16, 0x0D, 0x49, 0xAE, 0xF1, 0x15, 0x28, 0x00, 0x5A, 0x88, 0x5A, 0x6E, 0xD0, 0x07, 0xB2, 
+	0x34, 0x46, 0x6F, 0x24, 0x14, 0x46, 0xA4, 0x45, 0xBC, 0x5F, 0xE7, 0x00, 0x59, 0xDA, 0x05, 0x00, 
+	0xF6, 0x5A, 0x6E, 0x52, 0x50, 0x1B, 0x80, 0x1B, 0x80, 0xE0, 0x01, 0x4F, 0x14, 0x52, 0x88, 0x54, 
+	0xF9, 0x21, 0x00, 0xD1, 0xDF, 0x2B, 0x00, 0x4C, 0x12, 0x4B, 0x0E, 0x48, 0x0F, 0x78, 0x19, 0xE0, 
+	0x05, 0x1C, 0x0B, 0xB2, 0xDB, 0x3B, 0x01, 0x5A, 0x15, 0x00, 0x5A, 0x53, 0x15, 0x08, 0xED, 0xD1, 
+	0xF7, 0x2B, 0x00, 0x78, 0x12, 0x4A, 0x0C, 0xD0, 0x05, 0x2A, 0x00, 0x93, 0x00, 0x20, 0x02, 0x1C, 
+	0x03, 0x4A, 0x08, 0xFD, 0x0E, 0xF7, 0xFE, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x11, 0x30, 0x20, 
+	0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 0x02, 0x14, 0x20, 
+	0x00, 0x0A, 0xA4, 0x20, 0x00, 0x11, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x49, 0x09, 0xB5, 0x10, 0x48, 
+	0x09, 0x22, 0x50, 0xF9, 0xE2, 0xF0, 0x00, 0x49, 0x09, 0x4C, 0x08, 0x22, 0x42, 0x1C, 0x20, 0xF9, 
+	0xDC, 0xF0, 0x00, 0x7B, 0xA2, 0x4B, 0x07, 0x7D, 0xE3, 0x60, 0x1A, 0x7E, 0x23, 0x76, 0xE3, 0xBD, 
+	0x10, 0x77, 0x23, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x00, 
+	0x00, 0x74, 0x08, 0x20, 0x00, 0x11, 0x50, 0x49, 0x04, 0xB5, 0x08, 0x43, 0x41, 0x4B, 0x04, 0x18, 
+	0xC9, 0x48, 0x04, 0xF9, 0x60, 0xF0, 0x00, 0xBD, 0x08, 0xB2, 0xC0, 0xFF, 0xFF, 0xFE, 0x44, 0x00, 
+	0x02, 0x24, 0xFE, 0x00, 0x0F, 0x42, 0x40, 0x4C, 0x15, 0xB5, 0x10, 0x71, 0x23, 0x23, 0x00, 0x71, 
+	0x63, 0x23, 0x03, 0x72, 0x23, 0x23, 0x02, 0x78, 0x98, 0x4B, 0x12, 0x28, 0x03, 0x38, 0x02, 0xF0, 
+	0x00, 0xD8, 0x1D, 0x04, 0x0B, 0xF8, 0xE7, 0x20, 0xC7, 0x14, 0x02, 0x20, 0xD7, 0xE0, 0x00, 0xF7, 
+	0xFF, 0x70, 0xE0, 0x23, 0x02, 0xFF, 0xD9, 0xE0, 0x0E, 0x70, 0x20, 0x70, 0xE0, 0x20, 0xF4, 0xFF, 
+	0xD2, 0xF7, 0xFF, 0x70, 0x20, 0x23, 0x02, 0x23, 0x01, 0x71, 0xA3, 0x20, 0xF4, 0xE0, 0x06, 0xF7, 
+	0xFF, 0x70, 0xE0, 0x23, 0x01, 0xFF, 0xC9, 0x71, 0xA3, 0x70, 0x20, 0xBD, 0x10, 0x71, 0xE3, 0x20, 
+	0x00, 0x0A, 0xAA, 0x20, 0x00, 0x0D, 0x48, 0x4B, 0x59, 0xB5, 0xF0, 0x68, 0x1A, 0xB0, 0x87, 0x2A, 
+	0x08, 0x4B, 0x58, 0x22, 0x01, 0xD1, 0x01, 0x22, 0x00, 0xE0, 0x00, 0x4B, 0x56, 0x70, 0x1A, 0x33, 
+	0x01, 0x4C, 0x56, 0x2B, 0x00, 0x7F, 0xDB, 0x71, 0xE3, 0xD1, 0x00, 0x25, 0x01, 0x78, 0x23, 0x1C, 
+	0x28, 0x79, 0xA2, 0x40, 0x90, 0x00, 0xD9, 0x1A, 0xCB, 0xB2, 0x82, 0x4E, 0x50, 0x43, 0x53, 0xB2, 
+	0xDB, 0x10, 0xDB, 0x78, 0x22, 0x80, 0x33, 0x79, 0xA0, 0x23, 0xFA, 0x43, 0x53, 0x00, 0x9B, 0x1C, 
+	0x29, 0x4F, 0x4C, 0xB2, 0x88, 0x40, 0x81, 0x43, 0x58, 0x88, 0xB9, 0xF0, 0x00, 0x01, 0x09, 0xB2, 
+	0xC1, 0xF8, 0xFB, 0x78, 0x23, 0x80, 0x71, 0x79, 0xA0, 0x22, 0x2D, 0x1C, 0x2A, 0x43, 0x53, 0xB2, 
+	0x90, 0x40, 0x82, 0x46, 0x6B, 0x43, 0x58, 0x01, 0x09, 0x81, 0x19, 0xF8, 0xEC, 0xF0, 0x00, 0x80, 
+	0xB0, 0xB2, 0xC0, 0x79, 0xB9, 0x7A, 0x23, 0x1A, 0x18, 0x00, 0xD8, 0x00, 0xC0, 0x40, 0xA9, 0x30, 
+	0xE0, 0x19, 0x49, 0x79, 0xA2, 0x43, 0x48, 0x21, 0x08, 0x46, 0x6C, 0x40, 0x90, 0x5E, 0x61, 0xF0, 
+	0x00, 0x01, 0x49, 0x4A, 0x34, 0xF8, 0x8B, 0x7D, 0x11, 0x80, 0xF0, 0x4B, 0x36, 0x7D, 0xD0, 0xB2, 
+	0xC0, 0x18, 0x08, 0x7E, 0x17, 0x70, 0x18, 0x7E, 0x56, 0x70, 0x5F, 0x7F, 0x96, 0x96, 0x01, 0x43, 
+	0x66, 0x9C, 0x01, 0x18, 0x20, 0xB2, 0xF4, 0x70, 0x98, 0xB2, 0xC0, 0x7E, 0x96, 0x90, 0x02, 0x98, 
+	0x03, 0x96, 0x03, 0x43, 0x46, 0x7F, 0xD6, 0x19, 0xC7, 0xB2, 0xF0, 0x70, 0xDF, 0xB2, 0xFF, 0x46, 
+	0xB4, 0x7E, 0xD6, 0x18, 0x61, 0x44, 0x61, 0x71, 0x19, 0xB2, 0xC9, 0x19, 0x80, 0x7F, 0x16, 0xB2, 
+	0xC0, 0x9E, 0x02, 0x1A, 0x3F, 0x1A, 0x74, 0xB2, 0xFF, 0xB2, 0xE6, 0x71, 0x9E, 0x71, 0x58, 0x46, 
+	0xBC, 0x71, 0xDF, 0x1B, 0xEC, 0x7D, 0x57, 0x1C, 0x27, 0x97, 0x04, 0xB2, 0xFF, 0x43, 0x77, 0x73, 
+	0x9F, 0x97, 0x05, 0x46, 0x64, 0x7D, 0x97, 0x43, 0x65, 0x1B, 0xED, 0x9C, 0x04, 0x43, 0x47, 0x43, 
+	0x4C, 0x74, 0x5F, 0x46, 0x6F, 0x72, 0x18, 0x5D, 0xC7, 0x20, 0x14, 0xB2, 0xE4, 0xB2, 0xED, 0x74, 
+	0x1C, 0x73, 0xDD, 0x72, 0x99, 0x72, 0x5D, 0x73, 0x1E, 0x72, 0xDF, 0x7F, 0x51, 0x73, 0x5C, 0x29, 
+	0x00, 0x4B, 0x12, 0x46, 0x69, 0xD0, 0x03, 0x70, 0x19, 0x79, 0x09, 0x9C, 0x01, 0xE0, 0x03, 0x43, 
+	0x74, 0x9E, 0x03, 0x1C, 0x93, 0x70, 0x1C, 0x9F, 0x02, 0x32, 0x03, 0x7F, 0xDB, 0x7F, 0xD2, 0xB2, 
+	0x5B, 0x18, 0xBA, 0x40, 0x9A, 0x32, 0x01, 0xB0, 0x07, 0x4B, 0x09, 0xBD, 0xF0, 0x60, 0x1A, 0x20, 
+	0x00, 0x11, 0x50, 0x20, 0x00, 0x02, 0xFA, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x02, 0x04, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0x7C, 0x20, 
+	0x00, 0x09, 0x18, 0x46, 0x71, 0xB4, 0x02, 0x00, 0x49, 0x08, 0x49, 0x00, 0x49, 0x5C, 0x09, 0xBC, 
+	0x02, 0x44, 0x8E, 0x46, 0xC0, 0x47, 0x70, 0x46, 0x71, 0xB4, 0x03, 0x00, 0x40, 0x08, 0x49, 0x5A, 
+	0x09, 0x00, 0x49, 0x44, 0x8E, 0x00, 0x49, 0x47, 0x70, 0xBC, 0x03, 0xD0, 0x34, 0x29, 0x00, 0x22, 
+	0x00, 0x23, 0x01, 0x42, 0x88, 0xB4, 0x10, 0x24, 0x01, 0xD3, 0x2C, 0x42, 0xA1, 0x07, 0x24, 0x42, 
+	0x81, 0xD2, 0x04, 0x01, 0x09, 0xD2, 0x02, 0xE7, 0xF8, 0x01, 0x1B, 0x42, 0xA1, 0x00, 0xE4, 0x42, 
+	0x81, 0xD2, 0x04, 0x00, 0x49, 0xD2, 0x02, 0xE7, 0xF8, 0x00, 0x5B, 0xD3, 0x01, 0x42, 0x88, 0x43, 
+	0x1A, 0x1A, 0x40, 0x42, 0xA0, 0x08, 0x4C, 0x1B, 0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0x5C, 0x42, 
+	0xA0, 0x08, 0x8C, 0x1B, 0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0x9C, 0x42, 0xA0, 0x08, 0xCC, 0x1B, 
+	0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0xDC, 0xD0, 0x03, 0x28, 0x00, 0xD0, 0x01, 0x09, 0x1B, 0xE7, 
+	0xE3, 0x09, 0x09, 0xBC, 0x10, 0x1C, 0x10, 0x28, 0x00, 0x47, 0x70, 0x20, 0x00, 0xD0, 0x01, 0xB4, 
+	0x07, 0x43, 0xC0, 0xA1, 0x02, 0x48, 0x02, 0x90, 0x02, 0x18, 0x40, 0x46, 0xC0, 0xBD, 0x03, 0x00, 
+	0x00, 0x00, 0xD9, 0xD0, 0xF0, 0x29, 0x00, 0xF7, 0xFF, 0xB5, 0x03, 0xBC, 0x0E, 0xFF, 0xB9, 0x1A, 
+	0x89, 0x43, 0x42, 0x46, 0xC0, 0x47, 0x18, 0xD0, 0x41, 0x29, 0x00, 0x1C, 0x04, 0xB4, 0x10, 0x46, 
+	0xA4, 0x40, 0x4C, 0x22, 0x00, 0x23, 0x01, 0xD5, 0x00, 0x29, 0x00, 0x28, 0x00, 0x42, 0x49, 0x42, 
+	0x40, 0xD5, 0x00, 0xD3, 0x2C, 0x42, 0x88, 0x07, 0x24, 0x24, 0x01, 0xD2, 0x04, 0x42, 0xA1, 0xD2, 
+	0x02, 0x42, 0x81, 0x01, 0x1B, 0x01, 0x09, 0x00, 0xE4, 0xE7, 0xF8, 0xD2, 0x04, 0x42, 0xA1, 0xD2, 
+	0x02, 0x42, 0x81, 0x00, 0x5B, 0x00, 0x49, 0x42, 0x88, 0xE7, 0xF8, 0x1A, 0x40, 0xD3, 0x01, 0x08, 
+	0x4C, 0x43, 0x1A, 0xD3, 0x02, 0x42, 0xA0, 0x08, 0x5C, 0x1B, 0x00, 0x08, 0x8C, 0x43, 0x22, 0xD3, 
+	0x02, 0x42, 0xA0, 0x08, 0x9C, 0x1B, 0x00, 0x08, 0xCC, 0x43, 0x22, 0xD3, 0x02, 0x42, 0xA0, 0x08, 
+	0xDC, 0x1B, 0x00, 0x28, 0x00, 0x43, 0x22, 0xD7, 0x17, 0xAE, 0xF1, 0x16, 0x09, 0x1B, 0xD0, 0x03, 
+	0x09, 0x09, 0xD0, 0x01, 0x1C, 0x10, 0xE7, 0xE3, 0x2C, 0x00, 0x46, 0x64, 0x42, 0x40, 0xD5, 0x00, 
+	0x47, 0x70, 0xBC, 0x10, 0xD0, 0x06, 0x28, 0x00, 0x20, 0x00, 0xDB, 0x03, 0x08, 0x40, 0x43, 0xC0, 
+	0x20, 0x80, 0xE0, 0x01, 0xB4, 0x07, 0x06, 0x00, 0xA1, 0x02, 0x48, 0x02, 0x90, 0x02, 0x18, 0x40, 
+	0x46, 0xC0, 0xBD, 0x03, 0x00, 0x00, 0x00, 0x19, 0xD0, 0xEB, 0x29, 0x00, 0xF7, 0xFF, 0xB5, 0x03, 
+	0xBC, 0x0E, 0xFF, 0xA7, 0x1A, 0x89, 0x43, 0x42, 0x46, 0xC0, 0x47, 0x18, 0x46, 0xC0, 0x47, 0x70, 
+	0x1C, 0x05, 0xB5, 0xF0, 0xD9, 0x2F, 0x2A, 0x0F, 0x43, 0x03, 0x1C, 0x0B, 0x07, 0x9C, 0x1C, 0x05, 
+	0x1C, 0x0C, 0xD1, 0x2C, 0x1C, 0x15, 0x1C, 0x03, 0x3D, 0x10, 0x68, 0x26, 0x68, 0x66, 0x60, 0x1E, 
+	0x68, 0xA6, 0x60, 0x5E, 0x68, 0xE6, 0x60, 0x9E, 0x60, 0xDE, 0x34, 0x10, 0x2D, 0x0F, 0x33, 0x10, 
+	0x1C, 0x13, 0xD8, 0xF2, 0x09, 0x1B, 0x3B, 0x10, 0x01, 0x1B, 0x33, 0x01, 0x18, 0xC9, 0x18, 0xC5, 
+	0x40, 0x1A, 0x23, 0x0F, 0xD9, 0x0F, 0x2A, 0x03, 0x1C, 0x2C, 0x1C, 0x0E, 0xCE, 0x80, 0x1C, 0x13, 
+	0xC4, 0x80, 0x3B, 0x04, 0xD8, 0xFA, 0x2B, 0x03, 0x08, 0x9B, 0x1F, 0x13, 0x00, 0x9B, 0x33, 0x01, 
+	0x40, 0x22, 0x24, 0x03, 0x18, 0xED, 0x18, 0xC9, 0xD0, 0x05, 0x2A, 0x00, 0x5C, 0xCC, 0x23, 0x00, 
+	0x33, 0x01, 0x54, 0xEC, 0xD1, 0xFA, 0x42, 0x93, 0x46, 0xC0, 0xBD, 0xF0, 0x6D, 0x6C, 0x61, 0x50, 
+	0x69, 0x6E, 0x49, 0x20, 0x45, 0x27, 0x00, 0x74, 0x72, 0x65, 0x74, 0x6E, 0x00, 0x4E, 0x20, 0x27, 
+	0x65, 0x6C, 0x2D, 0x4E, 0x00, 0x21, 0x73, 0x73, 0x69, 0x78, 0x45, 0x27, 0x4E, 0x20, 0x27, 0x74, 
+	0x53, 0x20, 0x4E, 0x00, 0x53, 0x00, 0x50, 0x2F, 0x70, 0x65, 0x65, 0x6C, 0x72, 0x2D, 0x53, 0x00, 
+	0x74, 0x65, 0x73, 0x65, 0x53, 0x41, 0x46, 0x00, 0x64, 0x49, 0x00, 0x54, 0x41, 0x00, 0x65, 0x6C, 
+	0x76, 0x69, 0x74, 0x63, 0x70, 0x53, 0x00, 0x65, 0x00, 0x74, 0x63, 0x65, 0x63, 0x61, 0x74, 0x53, 
+	0x52, 0x00, 0x21, 0x6B, 0x41, 0x56, 0x47, 0x45, 0x65, 0x44, 0x00, 0x4C, 0x00, 0x79, 0x61, 0x6C, 
+	0x00, 0x43, 0x53, 0x4F, 0x53, 0x49, 0x4F, 0x4E, 0x6F, 0x54, 0x00, 0x45, 0x20, 0x68, 0x63, 0x75, 
+	0x54, 0x00, 0x6E, 0x4F, 0x68, 0x63, 0x75, 0x6F, 0x46, 0x46, 0x4F, 0x20, 0x5F, 0x54, 0x4C, 0x00, 
+	0x46, 0x4F, 0x52, 0x50, 0x4E, 0x49, 0x4C, 0x49, 0x69, 0x46, 0x00, 0x47, 0x00, 0x64, 0x65, 0x78, 
+	0x66, 0x41, 0x2D, 0x47, 0x00, 0x72, 0x65, 0x74, 0x76, 0x6F, 0x48, 0x3D, 0x12, 0x00, 0x72, 0x6F, 
+	0x0A, 0x0D, 0x07, 0x0E, 0x0C, 0x06, 0x04, 0x12, 0x05, 0x0F, 0x12, 0x09, 0x00, 0x12, 0x08, 0x11, 
+	0x45, 0x02, 0x10, 0x01, 0x4B, 0x00, 0x72, 0x72, 0x52, 0x20, 0x79, 0x65, 0x46, 0x45, 0x52, 0x00, 
+	0x49, 0x4E, 0x49, 0x20, 0x6D, 0x43, 0x00, 0x54, 0x74, 0x6C, 0x65, 0x44, 0x65, 0x52, 0x20, 0x61, 
+	0x65, 0x52, 0x2F, 0x66, 0x52, 0x00, 0x6C, 0x61, 0x4D, 0x00, 0x77, 0x61, 0x49, 0x20, 0x58, 0x41, 
+	0x5F, 0x4D, 0x43, 0x00, 0x54, 0x4C, 0x45, 0x44, 0x41, 0x4D, 0x5F, 0x41, 0x49, 0x4D, 0x5F, 0x58, 
+	0x78, 0x54, 0x00, 0x4E, 0x73, 0x73, 0x65, 0x6C, 0x66, 0x69, 0x44, 0x00, 0x49, 0x44, 0x00, 0x66, 
+	0x4E, 0x2F, 0x46, 0x46, 0x67, 0x69, 0x42, 0x00, 0x61, 0x72, 0x47, 0x20, 0x65, 0x4E, 0x00, 0x64, 
+	0x64, 0x45, 0x2D, 0x67, 0x52, 0x00, 0x65, 0x67, 0x00, 0x00, 0x66, 0x65, 0x00, 0x00, 0x49, 0x2D, 
+	0x01, 0x00, 0x00, 0xFF, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x01, 
+	0x20, 0x00, 0x0D, 0xA0, 0x20, 0x00, 0x02, 0x28, 0x00, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x11, 0x54, 
+	0x00, 0xFF, 0x02, 0x01, 0x04, 0x00, 0x04, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x45, 0x02, 0xFF, 0xFF, 0x07, 0x5A, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/CORE_120409_v8.c for-diff/drivers/input/touchscreen/mms100_ts/CORE_120409_v8.c
--- caf/drivers/input/touchscreen/mms100_ts/CORE_120409_v8.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/CORE_120409_v8.c	2015-10-08 21:26:20.080845000 +0900
@@ -0,0 +1,1554 @@
+static const struct firmware_data melfas_CORE = {
+	.section_name = "CORE",
+	.section_version = 0x46,
+	.start_page_addr = 1,
+	.end_page_addr = 24,
+	.compatible_version = 0x02,
+	.length = 24696,
+	.data = {
+	0xAE, 0xF1, 0x01, 0x30, 0x48, 0x31, 0x4D, 0x36, 0x34, 0x4F, 0x43, 0x00, 0x00, 0x63, 0xFF, 0x00, 
+	0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0xF0, 0x03, 0xB5, 0xF7, 0xF0, 0x05, 0xFD, 0x17, 0x20, 
+	0x00, 0xFC, 0x0F, 0xFF, 0xF2, 0xF0, 0x05, 0x33, 0x33, 0x4B, 0x4E, 0x42, 0x5E, 0x78, 0x1B, 0x26, 
+	0x10, 0x41, 0x73, 0x4B, 0x4C, 0x1A, 0xF6, 0x4B, 0x4C, 0x70, 0x1E, 0x3A, 0x01, 0x68, 0x1A, 0x41, 
+	0x5A, 0x42, 0x53, 0x70, 0x1A, 0x4B, 0x4A, 0x78, 0x1C, 0x4B, 0x4A, 0xD1, 0x22, 0x2C, 0x00, 0x25, 
+	0x01, 0x4A, 0x49, 0x70, 0x1D, 0x70, 0x14, 0xFA, 0x52, 0xF0, 0x00, 0x1C, 0x28, 0x4B, 0x47, 0x70, 
+	0x9A, 0x78, 0xDA, 0xF0, 0x05, 0x70, 0x5C, 0xF0, 0x03, 0xFF, 0xD1, 0xF0, 0x01, 0xFB, 0xD3, 0x23, 
+	0x80, 0xFB, 0x17, 0x6C, 0x1A, 0x05, 0xDB, 0x43, 0x8A, 0x21, 0x7F, 0xF0, 0x00, 0x64, 0x1A, 0xF0, 
+	0x02, 0xFD, 0xF5, 0xF0, 0x01, 0xFF, 0x9F, 0xF0, 0x01, 0xFB, 0x0B, 0x4B, 0x3C, 0xFA, 0xA3, 0x68, 
+	0x1B, 0x20, 0x02, 0x4C, 0x3B, 0x47, 0x98, 0x2B, 0x00, 0x78, 0x23, 0x4B, 0x3A, 0xD1, 0x03, 0x2B, 
+	0x00, 0x78, 0x1B, 0x78, 0x23, 0xD0, 0x0F, 0xFC, 0x94, 0xF0, 0x00, 0x4B, 0x2E, 0x78, 0x22, 0xD0, 
+	0x01, 0x2A, 0x00, 0xE0, 0x01, 0x70, 0x1E, 0x70, 0x1A, 0x22, 0x0D, 0x23, 0x00, 0x4A, 0x31, 0x4A, 
+	0x31, 0x70, 0x13, 0x4B, 0x2C, 0x70, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4D, 0x2F, 0xD0, 0x2C, 0x2B, 
+	0x00, 0x78, 0x2B, 0x4C, 0x2A, 0xD0, 0x28, 0x68, 0x23, 0x20, 0x13, 0xF0, 0x00, 0x47, 0x98, 0xF0, 
+	0x03, 0xFA, 0x0F, 0xF0, 0x03, 0xFB, 0x5C, 0x4B, 0x29, 0xFA, 0xDF, 0xF0, 0x01, 0x78, 0x18, 0xF0, 
+	0x00, 0xF8, 0xA1, 0x4A, 0x27, 0xFD, 0xC7, 0x70, 0x13, 0x23, 0x01, 0x80, 0x13, 0x4A, 0x26, 0xF8, 
+	0x32, 0xF0, 0x03, 0x2B, 0x00, 0x78, 0x2B, 0x68, 0x23, 0xD1, 0xFC, 0x47, 0x98, 0x20, 0x14, 0xF9, 
+	0xF6, 0xF0, 0x00, 0xFB, 0x43, 0xF0, 0x03, 0xFA, 0xC6, 0xF0, 0x03, 0x78, 0x18, 0x4B, 0x1C, 0xF8, 
+	0x88, 0xF0, 0x01, 0x70, 0x1E, 0x4B, 0x10, 0xFF, 0x7E, 0xF0, 0x00, 0x78, 0x27, 0x4C, 0x0E, 0x28, 
+	0x13, 0xB2, 0x78, 0xE1, 0x8D, 0xD9, 0x00, 0xFC, 0xB0, 0xF0, 0x05, 0x01, 0x8C, 0x00, 0x74, 0x01, 
+	0x8C, 0x01, 0x78, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 
+	0x8C, 0x01, 0x8C, 0x00, 0x68, 0x01, 0x8C, 0x00, 0x3A, 0x01, 0x8C, 0x00, 0x5F, 0x00, 0x30, 0x01, 
+	0x89, 0x01, 0x8C, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x16, 0x50, 0x20, 
+	0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0xE9, 0x20, 0x00, 0x01, 0xEA, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x01, 0xF8, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x01, 0xE7, 0x20, 0x00, 0x01, 0xE5, 0x20, 
+	0x00, 0x12, 0x48, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x03, 0x08, 0x22, 0x00, 0x4B, 0xB1, 0xF0, 
+	0x00, 0x70, 0x1A, 0x4B, 0xB0, 0xFE, 0x7D, 0x2B, 0x00, 0x78, 0x1B, 0xE1, 0x55, 0xD0, 0x00, 0x78, 
+	0x23, 0x4C, 0xAE, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0xAD, 0x20, 0x00, 0xFD, 0x0C, 0xF0, 0x03, 0x2B, 
+	0x00, 0x78, 0x23, 0x21, 0x01, 0xD0, 0x06, 0x4A, 0xAA, 0x20, 0x00, 0x90, 0x00, 0x1C, 0x0B, 0xFC, 
+	0xAA, 0xF0, 0x03, 0x78, 0x98, 0x4B, 0xA8, 0xFA, 0xCC, 0xF0, 0x03, 0x7B, 0xE8, 0x4D, 0xA7, 0xF8, 
+	0xA6, 0xF0, 0x03, 0x60, 0x20, 0x4C, 0xA6, 0xF0, 0x03, 0x7C, 0x28, 0x23, 0x11, 0xF8, 0xA1, 0x56, 
+	0xEB, 0x60, 0x60, 0x43, 0x53, 0x7B, 0xEA, 0x4B, 0x9A, 0x60, 0xA3, 0x70, 0x1A, 0x22, 0x00, 0x78, 
+	0x1B, 0x4B, 0xA0, 0x78, 0x18, 0x4B, 0xA0, 0xF8, 0x14, 0xF0, 0x01, 0x4D, 0x9D, 0x4B, 0x95, 0x70, 
+	0x1C, 0x24, 0x00, 0xF0, 0x00, 0x78, 0x2B, 0xF0, 0x03, 0xFD, 0x29, 0xF0, 0x00, 0xFF, 0xDF, 0x70, 
+	0x2C, 0xFD, 0x25, 0x24, 0x01, 0x4B, 0x8F, 0xF0, 0x00, 0x70, 0x1C, 0x4B, 0x97, 0xFC, 0x9B, 0x05, 
+	0x9A, 0x68, 0x1B, 0x4A, 0x96, 0xD5, 0x13, 0x20, 0x04, 0x4B, 0x96, 0x4B, 0x96, 0x60, 0x1A, 0x43, 
+	0x01, 0x68, 0x19, 0x68, 0x19, 0x60, 0x19, 0x43, 0x81, 0x20, 0x02, 0x68, 0x19, 0x60, 0x19, 0x60, 
+	0x1C, 0x43, 0x0C, 0x21, 0x00, 0x4B, 0x91, 0x4B, 0x91, 0x60, 0x19, 0x4C, 0x91, 0x60, 0x1A, 0x68, 
+	0x23, 0x20, 0x03, 0xF0, 0x03, 0x47, 0x98, 0x68, 0x23, 0xF8, 0x93, 0x47, 0x98, 0x20, 0x05, 0xF8, 
+	0x38, 0xF0, 0x03, 0x4D, 0x8D, 0x4C, 0x8C, 0x42, 0x40, 0x20, 0x01, 0x1C, 0x2A, 0x1C, 0x21, 0xF8, 
+	0x28, 0xF0, 0x05, 0x78, 0x1B, 0x4B, 0x79, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x88, 0x20, 0x0C, 0xFC, 
+	0xA2, 0xF0, 0x03, 0x68, 0x23, 0x4A, 0x87, 0x68, 0x2B, 0x80, 0x13, 0x4B, 0x73, 0x80, 0x53, 0x2B, 
+	0x00, 0x78, 0x1B, 0x23, 0x01, 0xD0, 0x06, 0x93, 0x00, 0x21, 0x02, 0x1C, 0x0B, 0x20, 0x0C, 0xFC, 
+	0x3A, 0xF0, 0x03, 0x20, 0x06, 0x4C, 0x7B, 0x47, 0x98, 0x68, 0x23, 0xF8, 0x48, 0xF0, 0x04, 0xF9, 
+	0xB8, 0xF0, 0x04, 0xFF, 0x74, 0xF0, 0x04, 0xF9, 0x62, 0xF0, 0x00, 0xF8, 0xE2, 0xF0, 0x05, 0xFA, 
+	0x5A, 0xF0, 0x05, 0x78, 0x1B, 0x4B, 0x78, 0xD1, 0x2A, 0x2B, 0x00, 0x20, 0x07, 0x68, 0x23, 0xF0, 
+	0x01, 0x47, 0x98, 0x68, 0x23, 0xFA, 0x51, 0x47, 0x98, 0x20, 0x08, 0xF8, 0x06, 0xF0, 0x03, 0xF8, 
+	0x0E, 0xF0, 0x03, 0x20, 0x09, 0x68, 0x23, 0xF0, 0x01, 0x47, 0x98, 0xF0, 0x01, 0xFA, 0x69, 0x68, 
+	0x23, 0xFB, 0xD1, 0x47, 0x98, 0x20, 0x0A, 0xFC, 0xA8, 0xF0, 0x01, 0xFB, 0x98, 0xF0, 0x02, 0x20, 
+	0x0B, 0x68, 0x23, 0xF0, 0x01, 0x47, 0x98, 0xF0, 0x02, 0xFF, 0x0C, 0x68, 0x23, 0xF8, 0x2B, 0x47, 
+	0x98, 0x20, 0x0E, 0xF8, 0xD8, 0xF0, 0x02, 0xFA, 0x46, 0xF0, 0x02, 0x20, 0x10, 0x68, 0x23, 0xF0, 
+	0x00, 0x47, 0x98, 0x4B, 0x5B, 0xF9, 0x81, 0x68, 0x1B, 0x20, 0x0F, 0x4B, 0x5E, 0x47, 0x98, 0x2B, 
+	0x00, 0x78, 0x1B, 0xF0, 0x02, 0xD1, 0x3C, 0x4B, 0x5C, 0xFA, 0xA3, 0x4B, 0x5C, 0x68, 0x1A, 0xD1, 
+	0x04, 0x2A, 0x00, 0x68, 0x09, 0x49, 0x5B, 0xDD, 0x00, 0x29, 0x00, 0x4A, 0x47, 0x70, 0x1A, 0x32, 
+	0x32, 0x78, 0x19, 0x42, 0x91, 0x78, 0x12, 0x22, 0x00, 0xD3, 0x01, 0x78, 0x1B, 0x70, 0x1A, 0xD1, 
+	0x21, 0x2B, 0x00, 0x4C, 0x51, 0x4B, 0x53, 0x2B, 0x00, 0x68, 0x1B, 0x68, 0x20, 0xDD, 0x09, 0xD1, 
+	0x06, 0x28, 0x00, 0x78, 0x1B, 0x4B, 0x39, 0xD0, 0x02, 0x2B, 0x00, 0xF0, 0x03, 0x49, 0x4E, 0x4B, 
+	0x4E, 0xFC, 0x23, 0x47, 0x98, 0x68, 0x1B, 0x2B, 0x00, 0x68, 0x23, 0x4B, 0x49, 0xDD, 0x0A, 0x28, 
+	0x00, 0x68, 0x18, 0x4B, 0x31, 0xD1, 0x06, 0x2B, 0x00, 0x78, 0x1B, 0x49, 0x48, 0xD0, 0x02, 0xFC, 
+	0x12, 0xF0, 0x03, 0xFA, 0xC6, 0xF0, 0x02, 0x78, 0x1A, 0x4B, 0x41, 0x70, 0x1A, 0x32, 0x01, 0x68, 
+	0x1B, 0x4B, 0x32, 0xD5, 0x23, 0x05, 0x9A, 0x68, 0x18, 0x4B, 0x34, 0x79, 0x1A, 0x4B, 0x2A, 0x4B, 
+	0x2F, 0x78, 0x19, 0x1C, 0x53, 0x1A, 0x18, 0xF0, 0x05, 0x40, 0x98, 0x4C, 0x23, 0xFB, 0x69, 0x78, 
+	0x23, 0x4D, 0x2F, 0x2B, 0x00, 0x60, 0x28, 0x20, 0x00, 0xD0, 0x03, 0xF0, 0x03, 0x49, 0x39, 0x78, 
+	0x23, 0xFB, 0xF3, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x01, 0x20, 0x00, 0x23, 0x04, 0x1C, 0x2A, 0xF0, 
+	0x03, 0x90, 0x00, 0xD1, 0xE3, 0xAE, 0xF1, 0x02, 0x4B, 0x24, 0xFB, 0x91, 0x68, 0x1A, 0x21, 0x01, 
+	0x60, 0x1A, 0x43, 0x8A, 0x05, 0xDB, 0x23, 0x80, 0x21, 0x01, 0x6C, 0x9A, 0x64, 0x9A, 0x43, 0x0A, 
+	0xFC, 0x1E, 0xF0, 0x00, 0x20, 0x00, 0x4B, 0x2D, 0xF0, 0x00, 0x56, 0x18, 0xE0, 0x17, 0xFE, 0x5D, 
+	0x78, 0x1B, 0x4B, 0x0F, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x29, 0x20, 0x05, 0xFB, 0xCE, 0xF0, 0x03, 
+	0xF0, 0x00, 0x20, 0x01, 0x20, 0x00, 0xFE, 0xF9, 0xFE, 0xF6, 0xF0, 0x00, 0x70, 0x23, 0x23, 0x13, 
+	0xF0, 0x00, 0xE0, 0x06, 0xE0, 0x03, 0xFC, 0x0D, 0x20, 0x11, 0x4B, 0x13, 0x47, 0x98, 0x68, 0x1B, 
+	0x70, 0x1F, 0x4B, 0x20, 0x46, 0xC0, 0xE5, 0xEB, 0x20, 0x00, 0x01, 0xEA, 0x20, 0x00, 0x01, 0xE0, 
+	0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x60, 0xEC, 0x20, 0x00, 0x0A, 0xAC, 0x20, 0x00, 0x0A, 0xAA, 
+	0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0xFC, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x12, 0x48, 
+	0x20, 0x00, 0x00, 0x58, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 0x10, 
+	0xE0, 0x00, 0xE0, 0x18, 0x20, 0x00, 0x01, 0xFC, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x16, 0x34, 
+	0x20, 0x00, 0x16, 0x38, 0x00, 0x00, 0x60, 0xF0, 0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x16, 0x48, 
+	0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0xCA, 0x20, 0x00, 0x12, 0x9C, 0x00, 0x00, 0x60, 0xF6, 
+	0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0xFF, 0x00, 0x00, 0x61, 0x09, 0x20, 0x00, 0x01, 0xB3, 
+	0x00, 0x00, 0x61, 0x16, 0x20, 0x00, 0x00, 0x56, 0xF0, 0x01, 0xB5, 0x08, 0xF0, 0x01, 0xFD, 0xED, 
+	0x4B, 0x03, 0xFE, 0x07, 0x47, 0x98, 0x68, 0x1B, 0xFA, 0x26, 0xF0, 0x02, 0x46, 0xC0, 0xBD, 0x08, 
+	0x20, 0x00, 0x02, 0x00, 0xF0, 0x05, 0xB5, 0x10, 0x4C, 0x05, 0xF9, 0xCB, 0x68, 0x23, 0x20, 0x00, 
+	0xF0, 0x05, 0x47, 0x98, 0x68, 0x23, 0xF9, 0xF5, 0x47, 0x98, 0x20, 0x01, 0x46, 0xC0, 0xBD, 0x10, 
+	0x20, 0x00, 0x01, 0xF8, 0x4D, 0x17, 0xB5, 0x7F, 0x1B, 0x5B, 0x4B, 0x17, 0x4B, 0x17, 0x93, 0x03, 
+	0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x06, 0xAA, 0x03, 0x21, 0x01, 0x90, 0x00, 0x23, 0x04, 
+	0xFA, 0xF4, 0xF0, 0x03, 0xE0, 0x18, 0x4E, 0x12, 0xDD, 0x00, 0x2C, 0x14, 0xB2, 0xE1, 0x24, 0x14, 
+	0xE0, 0x03, 0x1C, 0x08, 0xB2, 0xC0, 0x38, 0x01, 0x54, 0x33, 0x5C, 0x2B, 0xD1, 0xF9, 0x28, 0x00, 
+	0x78, 0x1B, 0x4B, 0x0A, 0xD0, 0x04, 0x2B, 0x00, 0x23, 0x01, 0x4A, 0x09, 0xF0, 0x03, 0x90, 0x00, 
+	0x9B, 0x03, 0xFA, 0xDD, 0x1B, 0x1B, 0x19, 0x2D, 0x9C, 0x03, 0x93, 0x03, 0xD1, 0xE3, 0x2C, 0x00, 
+	0x46, 0xC0, 0xBD, 0x7F, 0x20, 0x00, 0x1E, 0x0C, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x01, 0xEB, 
+	0x20, 0x00, 0x16, 0x54, 0x4B, 0x1E, 0xB5, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4C, 0x1D, 0xD0, 0x37, 
+	0x70, 0x23, 0x23, 0x00, 0x20, 0x04, 0x4B, 0x1C, 0x47, 0x98, 0x68, 0x1B, 0x4A, 0x1C, 0x4B, 0x1B, 
+	0x68, 0x1B, 0x68, 0x59, 0x80, 0x53, 0x80, 0x11, 0x78, 0x1B, 0x4B, 0x1A, 0xD0, 0x06, 0x2B, 0x00, 
+	0x21, 0x02, 0x23, 0x01, 0x20, 0x18, 0x93, 0x00, 0xF0, 0x03, 0x1C, 0x0B, 0x78, 0x23, 0xFA, 0xAF, 
+	0x2B, 0x00, 0x4C, 0x15, 0x4B, 0x13, 0xD0, 0x1A, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x03, 
+	0xF0, 0x03, 0x49, 0x12, 0x4A, 0x12, 0xFA, 0xFB, 0x70, 0x13, 0x23, 0x01, 0x2A, 0x02, 0x68, 0x22, 
+	0x18, 0xD2, 0xDC, 0x04, 0x4A, 0x0F, 0x60, 0x22, 0xE0, 0x08, 0x70, 0x13, 0xFF, 0x74, 0xF7, 0xFF, 
+	0x22, 0x0D, 0x4B, 0x0D, 0x23, 0x00, 0x70, 0x1A, 0xE0, 0x00, 0x60, 0x23, 0xBD, 0x13, 0x60, 0x23, 
+	0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x16, 0x3D, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x01, 0x70, 
+	0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0x84, 0x00, 0x00, 0x60, 0x88, 
+	0x20, 0x00, 0x16, 0x48, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0xBA, 0xB5, 0xF0, 
+	0x33, 0x04, 0xB0, 0x85, 0x24, 0x00, 0x7F, 0xDB, 0x22, 0x0A, 0x49, 0xB8, 0x3B, 0x01, 0xE0, 0x09, 
+	0x1C, 0x10, 0xB2, 0xDB, 0x18, 0x08, 0x43, 0x58, 0x5F, 0x40, 0x25, 0x3C, 0xD0, 0x00, 0x28, 0x00, 
+	0x2B, 0x00, 0x24, 0x01, 0x4B, 0xB2, 0xD1, 0xF3, 0x78, 0x1B, 0x4A, 0xB2, 0x3B, 0x01, 0xE0, 0x07, 
+	0x1D, 0x19, 0xB2, 0xDB, 0x5E, 0x89, 0x00, 0x49, 0xD0, 0x00, 0x29, 0x00, 0x2B, 0x00, 0x24, 0x01, 
+	0x4A, 0xAD, 0xD1, 0xF5, 0xD1, 0x04, 0x2C, 0x00, 0x49, 0xAC, 0x68, 0x13, 0xD0, 0x01, 0x42, 0x8B, 
+	0x60, 0x13, 0x33, 0x01, 0x22, 0x00, 0x4B, 0xAA, 0x4B, 0xA4, 0x70, 0x1A, 0x4B, 0xA2, 0x68, 0x1A, 
+	0xD1, 0x7C, 0x2A, 0x00, 0x68, 0x12, 0x4A, 0xA3, 0xD1, 0x78, 0x2A, 0x00, 0x32, 0x34, 0x1C, 0x1A, 
+	0x28, 0x00, 0x78, 0x10, 0x4A, 0xA3, 0xD1, 0x41, 0x2A, 0x01, 0x78, 0x12, 0x4B, 0xA2, 0xD1, 0x17, 
+	0x4B, 0xA2, 0x70, 0x18, 0x4B, 0xA2, 0x70, 0x1A, 0x4B, 0xA2, 0x70, 0x18, 0x2B, 0x00, 0x78, 0x1B, 
+	0x49, 0xA1, 0xD0, 0x02, 0xFA, 0x82, 0xF0, 0x03, 0x22, 0x01, 0x4B, 0x99, 0xF0, 0x01, 0x70, 0x1A, 
+	0xF0, 0x01, 0xFC, 0xF3, 0x4B, 0x97, 0xFD, 0x0D, 0x70, 0x1A, 0x22, 0x00, 0x4A, 0x9B, 0xE1, 0x67, 
+	0x78, 0x1B, 0x33, 0x3C, 0x42, 0x9A, 0x68, 0x12, 0x4B, 0x96, 0xDB, 0x1F, 0x2B, 0x00, 0x78, 0x1B, 
+	0x49, 0x97, 0xD0, 0x02, 0xFA, 0x6A, 0xF0, 0x03, 0x49, 0x87, 0x4B, 0x96, 0x31, 0x3D, 0x68, 0x1A, 
+	0x60, 0x1A, 0x32, 0x01, 0x42, 0x8A, 0x78, 0x09, 0x20, 0x00, 0xDB, 0x0F, 0x4B, 0x8A, 0x60, 0x18, 
+	0x4B, 0x8A, 0x70, 0x18, 0x4B, 0x8B, 0x70, 0x18, 0x42, 0x83, 0x78, 0x1B, 0x49, 0x8E, 0xD0, 0x02, 
+	0xFA, 0x54, 0xF0, 0x03, 0x22, 0x02, 0x4B, 0x82, 0x4B, 0x85, 0x70, 0x1A, 0x21, 0x00, 0x4A, 0x8B, 
+	0x68, 0x10, 0x70, 0x19, 0x60, 0x19, 0x4B, 0x85, 0x42, 0x88, 0x1C, 0x13, 0x38, 0x01, 0xDD, 0x0E, 
+	0x42, 0x8C, 0x60, 0x10, 0x60, 0x11, 0xD0, 0x00, 0x2A, 0x01, 0x68, 0x1A, 0xE1, 0x18, 0xD0, 0x00, 
+	0x60, 0x1A, 0x22, 0x00, 0x22, 0x03, 0x4B, 0x76, 0xE1, 0x28, 0x70, 0x1A, 0x49, 0x81, 0x4B, 0x80, 
+	0x8F, 0xDB, 0x33, 0x04, 0xD1, 0x00, 0x42, 0x8B, 0x49, 0x7F, 0xE1, 0x0B, 0x42, 0x99, 0x68, 0x09, 
+	0xE1, 0x06, 0xDA, 0x00, 0x48, 0x6C, 0x4B, 0x68, 0x31, 0x3E, 0x1C, 0x19, 0x68, 0x00, 0x78, 0x09, 
+	0xDA, 0x00, 0x42, 0x88, 0x33, 0x3F, 0xE0, 0xFD, 0x60, 0x13, 0x78, 0x1B, 0x33, 0x04, 0xE0, 0xF9, 
+	0x23, 0x00, 0x7F, 0xD8, 0x49, 0x75, 0x1C, 0x1A, 0x38, 0x01, 0xE0, 0x31, 0x24, 0x0A, 0xB2, 0xC0, 
+	0x4F, 0x5E, 0x43, 0x44, 0x26, 0x3C, 0x19, 0x3D, 0x2D, 0x00, 0x5F, 0xAD, 0x19, 0x0C, 0xDD, 0x27, 
+	0x5F, 0xE4, 0x27, 0x3C, 0xDD, 0x22, 0x2C, 0x00, 0x19, 0x0D, 0x00, 0x44, 0x4D, 0x57, 0x88, 0xAF, 
+	0x19, 0x2C, 0xB2, 0x3E, 0xB2, 0x25, 0x88, 0xA4, 0xD4, 0x02, 0x1B, 0x76, 0xB2, 0xA4, 0x1B, 0x3C, 
+	0x1B, 0xE4, 0xE0, 0x01, 0x1C, 0x05, 0xB2, 0xA4, 0x4F, 0x50, 0x4E, 0x64, 0x00, 0x6D, 0x35, 0x10, 
+	0x5B, 0xAC, 0x18, 0xA2, 0xB2, 0x27, 0x5B, 0xED, 0xB2, 0x92, 0xB2, 0x2E, 0xD4, 0x02, 0x1B, 0xBF, 
+	0xB2, 0xA4, 0x1B, 0x64, 0x1B, 0x2C, 0xE0, 0x01, 0x8B, 0xD0, 0xAE, 0xF1, 0x03, 0x18, 0xE3, 0xB2, 
+	0xA4, 0x28, 0x00, 0xB2, 0x9B, 0x49, 0x56, 0xD1, 0xCB, 0x49, 0x4D, 0x60, 0x08, 0x49, 0x43, 0x78, 
+	0x0C, 0xD0, 0x40, 0x2C, 0x00, 0x78, 0x0B, 0x31, 0x34, 0xD0, 0x00, 0x2B, 0x00, 0x4B, 0x4A, 0xE0, 
+	0xB3, 0x2B, 0x00, 0x78, 0x1B, 0x49, 0x53, 0xD0, 0x02, 0xF9, 0xD2, 0xF0, 0x03, 0x4A, 0x52, 0x4C, 
+	0x4F, 0x80, 0x13, 0x68, 0x23, 0x68, 0x1B, 0x4B, 0x51, 0x4B, 0x43, 0x80, 0x53, 0x2B, 0x00, 0x78, 
+	0x1B, 0x23, 0x01, 0xD0, 0x06, 0x93, 0x00, 0x21, 0x02, 0x1C, 0x0B, 0x20, 0x00, 0xF9, 0x68, 0xF0, 
+	0x03, 0x68, 0x20, 0x49, 0x32, 0x4B, 0x3B, 0x8F, 0x4A, 0xDA, 0x14, 0x42, 0x90, 0x48, 0x47, 0x4A, 
+	0x41, 0x78, 0x12, 0x32, 0x45, 0x42, 0x90, 0x68, 0x00, 0x78, 0x1B, 0xDA, 0x0D, 0xD0, 0x00, 0x2B, 
+	0x00, 0x4B, 0x37, 0xE0, 0x89, 0x68, 0x1A, 0x31, 0x3C, 0x42, 0x8A, 0x78, 0x09, 0xE0, 0x82, 0xDB, 
+	0x00, 0x60, 0x1A, 0x32, 0x01, 0x22, 0x01, 0xE0, 0x7F, 0x4A, 0x31, 0x70, 0x1A, 0x60, 0x13, 0x23, 
+	0x00, 0x60, 0x13, 0x4A, 0x31, 0x1C, 0x08, 0xE0, 0x77, 0x78, 0x00, 0x30, 0x34, 0xD1, 0x72, 0x28, 
+	0x00, 0x8F, 0x09, 0x48, 0x32, 0x42, 0x88, 0x68, 0x00, 0x49, 0x2E, 0xDB, 0x09, 0x31, 0x45, 0x48, 
+	0x33, 0x68, 0x00, 0x78, 0x09, 0xDB, 0x02, 0x42, 0x88, 0x20, 0x01, 0x49, 0x22, 0x49, 0x1F, 0x70, 
+	0x08, 0x29, 0x00, 0x78, 0x09, 0x49, 0x15, 0xD1, 0x08, 0x49, 0x27, 0x8F, 0x08, 0xD0, 0x5A, 0x42, 
+	0x88, 0x78, 0x09, 0x49, 0x1C, 0xD0, 0x56, 0x29, 0x00, 0x68, 0x09, 0x49, 0x11, 0xDC, 0x05, 0x29, 
+	0x01, 0x8E, 0xC9, 0x49, 0x0E, 0xD8, 0x01, 0x42, 0x8A, 0xD9, 0x49, 0x42, 0x8B, 0x20, 0x00, 0x4B, 
+	0x13, 0x4B, 0x13, 0x70, 0x18, 0x70, 0x1A, 0x22, 0x01, 0x70, 0x18, 0x4B, 0x12, 0x78, 0x1B, 0x4B, 
+	0x12, 0xD0, 0x02, 0x42, 0x83, 0xF0, 0x03, 0x49, 0x11, 0x4B, 0x0A, 0xF9, 0x63, 0x70, 0x1A, 0x22, 
+	0x01, 0xFB, 0xD4, 0xF0, 0x01, 0xFB, 0xEE, 0xF0, 0x01, 0x46, 0xC0, 0xE0, 0x35, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x01, 
+	0xC8, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x01, 0xB3, 0x20, 0x00, 0x01, 0xB4, 0x20, 0x00, 0x01, 
+	0xDC, 0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x01, 0xD4, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x60, 
+	0x92, 0x20, 0x00, 0x01, 0xD8, 0x00, 0x00, 0x60, 0x9C, 0x20, 0x00, 0x01, 0xD0, 0x00, 0x00, 0x60, 
+	0xA4, 0x20, 0x00, 0x01, 0xCC, 0x20, 0x00, 0x12, 0x48, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x00, 0x16, 
+	0x34, 0x20, 0x00, 0x03, 0x20, 0x00, 0x00, 0x60, 0xAD, 0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x16, 
+	0x38, 0x22, 0x01, 0x4B, 0x0D, 0x4B, 0x0D, 0x70, 0x1A, 0x78, 0x1B, 0x33, 0x34, 0xD0, 0x10, 0x2B, 
+	0x00, 0x78, 0x1A, 0x4B, 0x0B, 0xD0, 0x0C, 0x2A, 0x00, 0x21, 0x00, 0x4A, 0x0A, 0x29, 0x03, 0x56, 
+	0x51, 0x49, 0x09, 0xD0, 0x07, 0x42, 0x48, 0x78, 0x09, 0x31, 0x01, 0x41, 0x41, 0x22, 0x00, 0x70, 
+	0x11, 0xB0, 0x05, 0x70, 0x1A, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x01, 0xB4, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x01, 0xDC, 0x20, 0x00, 0x01, 0xB3, 0x20, 0x00, 0x01, 0xDD, 0x4B, 0x54, 0xB5, 
+	0x10, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x53, 0xD0, 0x0A, 0x47, 0x98, 0x68, 0x1B, 0xFB, 0x6E, 0xF0, 
+	0x01, 0xFB, 0x88, 0xF0, 0x01, 0xFF, 0xAA, 0xF0, 0x01, 0xFB, 0xE4, 0xF0, 0x02, 0x21, 0x02, 0x4B, 
+	0x4E, 0x43, 0x8A, 0x68, 0x1A, 0x68, 0x19, 0x60, 0x1A, 0x05, 0xD2, 0x22, 0x80, 0x60, 0x91, 0x68, 
+	0x90, 0x20, 0x08, 0x68, 0x19, 0x60, 0x19, 0x43, 0x81, 0x68, 0x90, 0x68, 0x19, 0x68, 0x19, 0x60, 
+	0x91, 0x43, 0x81, 0x20, 0x04, 0x68, 0x1B, 0x60, 0x19, 0x60, 0x93, 0x68, 0x91, 0x78, 0x18, 0x4B, 
+	0x40, 0x78, 0x1B, 0x4B, 0x42, 0xD0, 0x32, 0x28, 0x00, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x40, 0x20, 
+	0x00, 0xF8, 0xCE, 0xF0, 0x03, 0x22, 0x80, 0x4B, 0x3F, 0x00, 0x52, 0x68, 0x19, 0x60, 0x1A, 0x43, 
+	0x0A, 0x23, 0xA0, 0x68, 0x1A, 0x68, 0x99, 0x05, 0xDB, 0x4B, 0x37, 0x60, 0x9A, 0x68, 0x19, 0x4A, 
+	0x3A, 0x60, 0x1A, 0x40, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x68, 0x99, 0x05, 0xDB, 0x4A, 0x37, 0x60, 
+	0x9A, 0x70, 0x11, 0x21, 0x01, 0x22, 0x80, 0x68, 0x19, 0x43, 0x0A, 0x04, 0x52, 0x46, 0xC0, 0x60, 
+	0x1A, 0x46, 0xC0, 0x46, 0xC0, 0xB6, 0x62, 0x46, 0xC0, 0x68, 0x19, 0x4A, 0x31, 0x60, 0x1A, 0x40, 
+	0x0A, 0x8F, 0x6F, 0xF3, 0xBF, 0x00, 0xC0, 0x20, 0xFA, 0xFC, 0xC2, 0xF0, 0x02, 0x2B, 0x00, 0xE0, 
+	0x11, 0x49, 0x2C, 0xD0, 0x02, 0xF8, 0x9C, 0xF0, 0x03, 0xF0, 0x02, 0x48, 0x2B, 0x4B, 0x2B, 0xFC, 
+	0xB9, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2A, 0xD1, 0x05, 0x2B, 0x00, 0x78, 0x1B, 0xF0, 0x02, 0xD1, 
+	0x01, 0x4B, 0x1D, 0xFE, 0xAD, 0x68, 0x1A, 0x21, 0x02, 0x60, 0x1A, 0x43, 0x0A, 0x22, 0x80, 0x68, 
+	0x19, 0x68, 0x90, 0x05, 0xD2, 0x49, 0x23, 0x60, 0x91, 0x7F, 0xC8, 0x31, 0x01, 0x28, 0x00, 0x21, 
+	0x08, 0x68, 0x18, 0xD0, 0x06, 0x60, 0x19, 0x43, 0x01, 0x68, 0x90, 0x68, 0x19, 0xE0, 0x05, 0x60, 
+	0x91, 0x43, 0x88, 0x68, 0x18, 0x68, 0x19, 0x60, 0x18, 0x60, 0x91, 0x68, 0x90, 0x21, 0x04, 0x68, 
+	0x1A, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x20, 0xFA, 0x05, 0xDB, 0x00, 0xC0, 0x68, 
+	0x99, 0xF0, 0x02, 0x60, 0x9A, 0x4B, 0x06, 0xFC, 0x85, 0x2B, 0x00, 0x78, 0x1B, 0x4C, 0x12, 0xD0, 
+	0x06, 0x68, 0x23, 0x20, 0x0D, 0x68, 0x23, 0x47, 0x98, 0x47, 0x98, 0x20, 0x12, 0x46, 0xC0, 0xBD, 
+	0x10, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x00, 0x68, 0x20, 0x00, 0x00, 0x14, 0x20, 0x00, 0x01, 
+	0xEB, 0x00, 0x00, 0x60, 0xB3, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0xFF, 0xFE, 0xFF, 0x20, 0x00, 0x00, 
+	0x2C, 0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x60, 0xB9, 0x00, 0x0F, 0x42, 0x40, 0x20, 0x00, 0x01, 
+	0xE5, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xF8, 0x4B, 0x31, 0xB5, 
+	0x10, 0x78, 0x19, 0x24, 0x02, 0xB2, 0x4A, 0x4B, 0x30, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2F, 0xD0, 
+	0x25, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2E, 0xD1, 0x21, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2D, 0xD1, 
+	0x1D, 0xD0, 0x07, 0x42, 0xA2, 0x7B, 0x80, 0x48, 0x2C, 0xD1, 0x03, 0x28, 0x00, 0x68, 0x00, 0x48, 
+	0x2B, 0xD0, 0x03, 0x28, 0x00, 0x60, 0x19, 0x21, 0x00, 0xE0, 0x0E, 0x24, 0x01, 0x68, 0x18, 0x4A, 
+	0x28, 0x42, 0x90, 0x68, 0x92, 0x30, 0x01, 0xDA, 0x01, 0x29, 0x00, 0x60, 0x18, 0x4B, 0x21, 0xD0, 
+	0x36, 0x68, 0x1B, 0x24, 0x00, 0xDA, 0x16, 0x42, 0x93, 0xB2, 0x63, 0xE0, 0x30, 0xD0, 0x2D, 0x42, 
+	0x93, 0xD0, 0x1D, 0x2B, 0x01, 0xD0, 0x02, 0x2B, 0x02, 0xD0, 0x0C, 0x2B, 0x00, 0x4B, 0x1D, 0xE0, 
+	0x24, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x03, 0xF0, 0x02, 0x49, 0x1B, 0x20, 0x00, 0xFF, 
+	0xF9, 0xFB, 0xCC, 0xF0, 0x02, 0x4B, 0x17, 0xE0, 0x18, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 
+	0x03, 0xF0, 0x02, 0x49, 0x16, 0x4B, 0x12, 0xFF, 0xED, 0xF0, 0x02, 0x68, 0x58, 0xEA, 0xFC, 0xAE, 
+	0xF1, 0x04, 0xE0, 0x0B, 0xFB, 0xBF, 0x78, 0x1B, 0x4B, 0x10, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x11, 
+	0x20, 0x00, 0xFF, 0xE0, 0xF0, 0x02, 0x68, 0x18, 0x4B, 0x0B, 0xFB, 0xB2, 0xF0, 0x02, 0x70, 0x1C, 
+	0x4B, 0x02, 0xFB, 0xA0, 0xF0, 0x02, 0x46, 0xC0, 0xBD, 0x10, 0x20, 0x00, 0x00, 0x3C, 0x20, 0x00, 
+	0x03, 0x1C, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x01, 0xE2, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 
+	0x01, 0x70, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x02, 0xFC, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 
+	0x60, 0xC1, 0x00, 0x00, 0x60, 0xC6, 0x00, 0x00, 0x60, 0xCB, 0xF0, 0x02, 0xB5, 0x08, 0xBD, 0x08, 
+	0xFB, 0xB3, 0xF0, 0x02, 0xB5, 0x08, 0xBD, 0x08, 0xFB, 0xA1, 0xF0, 0x02, 0xB5, 0x08, 0x23, 0x80, 
+	0xFB, 0x39, 0x6C, 0x9A, 0x05, 0xDB, 0x43, 0x0A, 0x21, 0x01, 0xF7, 0xFF, 0x64, 0x9A, 0xBD, 0x08, 
+	0xFF, 0xF1, 0xB0, 0x87, 0xB5, 0xF0, 0xFF, 0xF0, 0xF7, 0xFF, 0x4C, 0x79, 0x4A, 0x78, 0x78, 0x15, 
+	0x78, 0x53, 0xE0, 0x10, 0x48, 0x78, 0xB2, 0xDB, 0x3B, 0x01, 0x46, 0x67, 0x1C, 0x9A, 0x01, 0x79, 
+	0x18, 0xB2, 0x5B, 0x12, 0x00, 0x52, 0x00, 0x4F, 0x18, 0xC9, 0x4A, 0x73, 0x52, 0x3A, 0x54, 0x8F, 
+	0x27, 0x00, 0xD1, 0xEF, 0x2B, 0x00, 0x1E, 0x5A, 0x46, 0x63, 0x2B, 0x00, 0xB2, 0xD2, 0x1C, 0x56, 
+	0xD0, 0x04, 0x01, 0xB6, 0x1C, 0x2B, 0xE7, 0xF3, 0x46, 0x94, 0x4C, 0x6D, 0x4B, 0x6C, 0x48, 0x6D, 
+	0x78, 0x1B, 0x4A, 0x6D, 0x49, 0x67, 0x3B, 0x01, 0xE0, 0x0E, 0x5C, 0xE5, 0xB2, 0xDB, 0x35, 0x01, 
+	0x5C, 0xC6, 0x01, 0xAD, 0x36, 0x02, 0x00, 0x6D, 0x19, 0xAD, 0x00, 0x5D, 0x5A, 0x6E, 0x4D, 0x67, 
+	0x52, 0xAE, 0x54, 0xEE, 0x26, 0x00, 0xD1, 0xEE, 0x2B, 0x00, 0x95, 0x03, 0x25, 0x65, 0xE0, 0x66, 
+	0x4C, 0x5B, 0xFF, 0xB2, 0xF7, 0xFF, 0x78, 0x63, 0x78, 0x26, 0xE0, 0x2D, 0x96, 0x05, 0xB2, 0xDB, 
+	0x3B, 0x01, 0x18, 0xF0, 0x4F, 0x58, 0x00, 0x40, 0x9D, 0x04, 0x5B, 0xC0, 0x1C, 0x9A, 0x4F, 0x54, 
+	0x18, 0xAD, 0x5B, 0xEF, 0x00, 0x6D, 0xD4, 0x04, 0x1B, 0xC7, 0x5B, 0xED, 0x4F, 0x51, 0x95, 0x02, 
+	0x1B, 0x45, 0x4F, 0x4F, 0xE0, 0x03, 0x1A, 0x2D, 0x5B, 0xED, 0x98, 0x04, 0x95, 0x02, 0x48, 0x4C, 
+	0x18, 0x87, 0x5B, 0xC0, 0x00, 0x7F, 0x46, 0x84, 0x4F, 0x4B, 0x00, 0x42, 0x18, 0xF0, 0x46, 0x62, 
+	0x1C, 0x15, 0x4D, 0x49, 0x53, 0xEA, 0x9D, 0x02, 0x5C, 0x2F, 0xDA, 0x00, 0x42, 0xBD, 0x4F, 0x46, 
+	0x1C, 0x3D, 0x2B, 0x00, 0x54, 0x3D, 0x1C, 0x0B, 0xD1, 0xD2, 0xB2, 0xC9, 0x1E, 0x59, 0xD0, 0x05, 
+	0x2B, 0x00, 0x01, 0x80, 0x1C, 0x48, 0x01, 0x4E, 0x9B, 0x05, 0xE7, 0xF2, 0x90, 0x04, 0x4A, 0x3C, 
+	0x4B, 0x3F, 0xE0, 0x22, 0x78, 0x1B, 0x3B, 0x01, 0x4D, 0x3E, 0x4F, 0x3E, 0xB2, 0xDB, 0x48, 0x3E, 
+	0x5C, 0xEE, 0x00, 0x59, 0x5C, 0xFD, 0x5A, 0x09, 0x36, 0x01, 0x01, 0xB0, 0x35, 0x02, 0x00, 0x40, 
+	0x19, 0x40, 0x5A, 0x80, 0x5A, 0x87, 0xD4, 0x01, 0x1B, 0xCF, 0xE0, 0x00, 0x1A, 0x09, 0x01, 0xB6, 
+	0x1A, 0x41, 0x48, 0x2F, 0x19, 0x75, 0x5B, 0x46, 0x00, 0x6D, 0x00, 0x5D, 0x48, 0x33, 0x48, 0x33, 
+	0x52, 0x2E, 0x42, 0xA9, 0x5C, 0xC5, 0x1C, 0x29, 0xDA, 0x00, 0x2B, 0x00, 0x54, 0xC1, 0x9B, 0x03, 
+	0xD1, 0xDA, 0xB2, 0xDB, 0x3B, 0x01, 0x2B, 0x00, 0x93, 0x03, 0x78, 0x61, 0xD1, 0x92, 0x4A, 0x24, 
+	0x78, 0x24, 0xE0, 0x1E, 0x94, 0x04, 0xB2, 0xDB, 0x3B, 0x01, 0x18, 0xED, 0x01, 0x45, 0x00, 0x6D, 
+	0x4F, 0x21, 0x88, 0x25, 0x5B, 0xEE, 0x1C, 0x9D, 0x46, 0xAC, 0xD9, 0x09, 0x45, 0x66, 0x1B, 0xF6, 
+	0x88, 0x27, 0x46, 0xBC, 0x01, 0x8F, 0x00, 0x6D, 0x44, 0x65, 0x5A, 0xAF, 0xB2, 0xB6, 0xE0, 0x05, 
+	0x52, 0xAE, 0x19, 0x75, 0x01, 0x8E, 0x5A, 0xAE, 0x00, 0x6D, 0x52, 0xAE, 0x26, 0x00, 0xD1, 0xE1, 
+	0x2B, 0x00, 0x1E, 0x48, 0x1C, 0x01, 0x29, 0x00, 0xB2, 0xC0, 0x1C, 0x41, 0xD0, 0x05, 0x01, 0xCC, 
+	0x4F, 0x18, 0x19, 0xE4, 0x9B, 0x04, 0x4B, 0x11, 0xE7, 0xF2, 0x78, 0x1B, 0x4F, 0x13, 0x48, 0x15, 
+	0x4E, 0x10, 0x3B, 0x01, 0xE0, 0x10, 0x5C, 0xF5, 0xB2, 0xDB, 0x01, 0xED, 0x49, 0x13, 0x18, 0x6D, 
+	0x00, 0x5A, 0x88, 0x29, 0x5B, 0xD4, 0xD9, 0x03, 0x42, 0x8C, 0x1B, 0x64, 0x88, 0x2D, 0xE0, 0x01, 
+	0x52, 0x84, 0x52, 0x85, 0x25, 0x00, 0xD1, 0xEC, 0x2B, 0x00, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 
+	0x03, 0x0A, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 
+	0x09, 0x7C, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 
+	0x0A, 0xA4, 0x40, 0x00, 0x40, 0x02, 0x20, 0x00, 0x12, 0x3C, 0x40, 0x00, 0x40, 0x82, 0xB0, 0x87, 
+	0xB5, 0xF0, 0xF8, 0x9E, 0xF0, 0x02, 0xF9, 0xB4, 0xF0, 0x02, 0xD1, 0xFB, 0x28, 0x00, 0x78, 0x1B, 
+	0x4B, 0x52, 0xD0, 0x09, 0x2B, 0x02, 0x49, 0x52, 0x4B, 0x51, 0x78, 0x1A, 0x33, 0x40, 0x18, 0x54, 
+	0x42, 0x53, 0x33, 0x01, 0x54, 0xE0, 0xDD, 0xFA, 0x42, 0x93, 0x4F, 0x4E, 0x4E, 0x4C, 0x33, 0x40, 
+	0x1C, 0x33, 0x42, 0x64, 0x78, 0x1C, 0x78, 0xFA, 0xE0, 0x0C, 0x19, 0x12, 0x23, 0x80, 0x05, 0xDB, 
+	0xB2, 0xD2, 0xF7, 0xFF, 0x71, 0x1A, 0x78, 0x28, 0xFE, 0xC1, 0xF0, 0x04, 0x18, 0x20, 0x34, 0x01, 
+	0xF9, 0xCF, 0x35, 0x40, 0x1C, 0x35, 0x42, 0x9C, 0x78, 0x2B, 0x26, 0x00, 0xDD, 0xED, 0x78, 0x2C, 
+	0xE0, 0x25, 0x42, 0x64, 0x1C, 0x2F, 0xE0, 0x1A, 0x3F, 0x40, 0x78, 0xDA, 0x4B, 0x3E, 0x19, 0x12, 
+	0x23, 0x80, 0xB2, 0xD2, 0x05, 0xDB, 0xF7, 0xFF, 0x71, 0x1A, 0x78, 0x2D, 0xFE, 0xA7, 0x19, 0x65, 
+	0xA9, 0x04, 0x1C, 0x28, 0xAA, 0x05, 0xF9, 0xD4, 0xF0, 0x04, 0x9B, 0x04, 0x49, 0x35, 0x2B, 0xFF, 
+	0x5D, 0x4A, 0x23, 0xFF, 0xDD, 0x00, 0xDA, 0x00, 0x42, 0x9A, 0x55, 0x4A, 0x1C, 0x1A, 0x1C, 0x3D, 
+	0x34, 0x01, 0x78, 0x2B, 0x35, 0x40, 0xDD, 0xDF, 0x42, 0x9C, 0x4A, 0x2F, 0x36, 0x01, 0x78, 0x13, 
+	0x4D, 0x2B, 0x42, 0x9E, 0x35, 0x40, 0xF0, 0x02, 0xDB, 0xD3, 0x49, 0x2C, 0xF8, 0x33, 0x78, 0x0D, 
+	0x78, 0x2A, 0x48, 0x27, 0x49, 0x2B, 0x23, 0x01, 0x78, 0x09, 0x1A, 0x9B, 0x91, 0x03, 0x4C, 0x29, 
+	0x21, 0x00, 0x46, 0x94, 0x18, 0x10, 0x18, 0xC6, 0xE0, 0x11, 0x78, 0x12, 0x1E, 0x72, 0x43, 0x6A, 
+	0x5C, 0xC7, 0x9A, 0x03, 0x92, 0x02, 0x9A, 0x02, 0x43, 0x57, 0x78, 0x72, 0x19, 0xD7, 0x18, 0xBA, 
+	0x43, 0x6A, 0xDB, 0x01, 0x42, 0x94, 0x1C, 0x19, 0xB2, 0x94, 0x45, 0x9C, 0x33, 0x01, 0x4B, 0x19, 
+	0xDC, 0xEB, 0x78, 0xDA, 0x4C, 0x1D, 0xB2, 0xC9, 0x18, 0x51, 0x4B, 0x13, 0x70, 0x99, 0x28, 0x00, 
+	0x78, 0x18, 0x78, 0x23, 0xD1, 0x05, 0xD0, 0x02, 0x2B, 0x00, 0xF0, 0x02, 0x49, 0x18, 0x78, 0x23, 
+	0xFE, 0x0B, 0xD0, 0x0B, 0x2B, 0x00, 0x20, 0x00, 0x4B, 0x0D, 0x78, 0x19, 0x33, 0x40, 0x00, 0x49, 
+	0x4A, 0x0C, 0xB2, 0xC9, 0x31, 0x01, 0x90, 0x00, 0x23, 0x01, 0xFD, 0xA4, 0xF0, 0x02, 0x78, 0x1B, 
+	0x4B, 0x0E, 0xD0, 0x06, 0x2B, 0x00, 0x20, 0x00, 0x21, 0x01, 0x1C, 0x0B, 0x4A, 0x0D, 0xF0, 0x02, 
+	0x90, 0x00, 0xB0, 0x07, 0xFD, 0x99, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x01, 0xE0, 0x20, 0x00, 
+	0x12, 0x48, 0x3D, 0x64, 0xAE, 0xF1, 0x05, 0x20, 0x00, 0x01, 0x93, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x12, 0x87, 0x20, 0x00, 0x00, 0x54, 0x20, 0x00, 0x00, 0x55, 0x00, 0x00, 0xFF, 0xFF, 0x20, 
+	0x00, 0x01, 0xEB, 0x00, 0x00, 0x60, 0xD2, 0x20, 0x00, 0x0A, 0xAC, 0x4B, 0x24, 0xB5, 0x13, 0x68, 
+	0x1B, 0x4C, 0x24, 0xD0, 0x0E, 0x2B, 0x00, 0x2B, 0x00, 0x78, 0x23, 0x20, 0x00, 0xD0, 0x03, 0xF0, 
+	0x02, 0x49, 0x21, 0xF7, 0xFF, 0xFD, 0xCB, 0x78, 0x23, 0xFA, 0x6D, 0xD1, 0x02, 0x2B, 0x00, 0xF8, 
+	0x8C, 0xF0, 0x02, 0x78, 0x23, 0xE7, 0xFE, 0xD0, 0x09, 0x2B, 0x00, 0x68, 0x23, 0x4C, 0x1B, 0xD5, 
+	0x05, 0x00, 0xDA, 0xFA, 0x5E, 0xF7, 0xFF, 0x4B, 0x19, 0x68, 0x22, 0x60, 0x23, 0x40, 0x13, 0x78, 
+	0x23, 0x4C, 0x14, 0xD0, 0x22, 0x2B, 0x00, 0x68, 0x1B, 0x4B, 0x14, 0xD5, 0x1E, 0x01, 0x5A, 0x20, 
+	0x00, 0x49, 0x14, 0xFD, 0xAA, 0xF0, 0x02, 0x4A, 0x14, 0x4B, 0x13, 0x80, 0x11, 0x88, 0x19, 0x80, 
+	0x51, 0x88, 0x59, 0x80, 0x91, 0x88, 0x99, 0x80, 0xD3, 0x88, 0xDB, 0x78, 0x1B, 0x4B, 0x10, 0x78, 
+	0x23, 0x81, 0x13, 0xD0, 0x05, 0x2B, 0x00, 0x21, 0x05, 0x20, 0x00, 0x90, 0x00, 0x23, 0x02, 0xFD, 
+	0x3C, 0xF0, 0x02, 0x4A, 0x0B, 0x4B, 0x05, 0x40, 0x0A, 0x68, 0x19, 0xBD, 0x13, 0x60, 0x1A, 0x20, 
+	0x00, 0x1E, 0x0C, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x60, 0xD8, 0x20, 0x00, 0x00, 0x58, 0xEF, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x60, 0xDF, 0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x16, 0x54, 0x20, 
+	0x00, 0x0A, 0xAA, 0xFB, 0xFF, 0xFF, 0xFF, 0x28, 0x02, 0xB5, 0x10, 0x28, 0x03, 0xD0, 0x04, 0x28, 
+	0x01, 0xD0, 0x45, 0xE0, 0x15, 0xD1, 0x33, 0xF9, 0xF6, 0xF7, 0xFF, 0x4C, 0x2A, 0x4B, 0x29, 0x78, 
+	0x1B, 0x33, 0x40, 0x22, 0x50, 0x49, 0x29, 0x48, 0x29, 0x70, 0x23, 0xFD, 0x82, 0xF0, 0x04, 0x20, 
+	0x0D, 0x4B, 0x28, 0x47, 0x98, 0x68, 0x1B, 0xF9, 0xF4, 0xF7, 0xFF, 0x2B, 0x10, 0x78, 0x23, 0xE0, 
+	0x14, 0xD1, 0x1A, 0xF9, 0xE0, 0xF7, 0xFF, 0x4C, 0x1F, 0x4B, 0x1E, 0x78, 0x1B, 0x33, 0x40, 0x22, 
+	0x50, 0x49, 0x21, 0x48, 0x1E, 0x70, 0x23, 0xFD, 0x6C, 0xF0, 0x04, 0x20, 0x0C, 0x4B, 0x1D, 0x47, 
+	0x98, 0x68, 0x1B, 0xF9, 0xDE, 0xF7, 0xFF, 0x2B, 0x10, 0x78, 0x23, 0x4B, 0x1B, 0xD1, 0x04, 0x70, 
+	0x9A, 0x78, 0xDA, 0xFB, 0x25, 0xF0, 0x02, 0xFA, 0xA8, 0xF0, 0x02, 0x4B, 0x18, 0xE0, 0x20, 0x2A, 
+	0x00, 0x78, 0x1A, 0x4A, 0x17, 0xD0, 0x05, 0x31, 0x01, 0x68, 0x11, 0x22, 0x00, 0x60, 0x11, 0x4B, 
+	0x15, 0x70, 0x1A, 0x2A, 0x13, 0x68, 0x1A, 0x22, 0x00, 0xDD, 0x05, 0x4B, 0x0A, 0x60, 0x1A, 0x70, 
+	0x1A, 0x22, 0x10, 0x4B, 0x0F, 0xE0, 0x0C, 0x2A, 0x3B, 0x68, 0x1A, 0x22, 0x00, 0xDD, 0x08, 0x4B, 
+	0x0E, 0x60, 0x1A, 0x68, 0x1B, 0x20, 0x01, 0x4B, 0x0D, 0x47, 0x98, 0x70, 0x1A, 0x22, 0x01, 0x46, 
+	0xC0, 0xBD, 0x10, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x00, 0x00, 0x74, 0x4A, 0x20, 
+	0x00, 0x12, 0x48, 0x20, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x74, 0x9A, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x01, 0xC4, 0x20, 0x00, 0x01, 0xC0, 0x20, 0x00, 0x01, 0xBC, 0x20, 0x00, 0x00, 0x6C, 0x20, 
+	0x00, 0x01, 0xE7, 0x4B, 0x0C, 0xB5, 0x10, 0x79, 0x99, 0x22, 0x01, 0xE0, 0x00, 0x23, 0x00, 0x1C, 
+	0x5C, 0x1C, 0x23, 0xB2, 0xE4, 0x1C, 0x10, 0x42, 0x81, 0x40, 0x98, 0x4A, 0x07, 0xDA, 0xF8, 0x71, 
+	0x13, 0x21, 0x07, 0x05, 0xD2, 0x22, 0x80, 0x02, 0x19, 0x40, 0x0B, 0x4B, 0x04, 0x6C, 0x10, 0x43, 
+	0x0B, 0x40, 0x03, 0xBD, 0x10, 0x64, 0x13, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x00, 0x5C, 0xFF, 
+	0xFF, 0xF8, 0xFF, 0x22, 0x07, 0x4B, 0x06, 0x23, 0x80, 0x79, 0xD9, 0x6C, 0x18, 0x05, 0xDB, 0x4A, 
+	0x04, 0x40, 0x11, 0x40, 0x02, 0x02, 0x09, 0x64, 0x1A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x12, 0x48, 0xFF, 0xFF, 0xF8, 0xFF, 0xB0, 0x8D, 0xB5, 0xF0, 0xF7, 0xFF, 0x90, 0x04, 0x4B, 
+	0xC7, 0xFF, 0xC9, 0x78, 0xDE, 0x48, 0xC7, 0x96, 0x05, 0x21, 0x00, 0xE0, 0x07, 0x78, 0x9C, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x00, 0x76, 0x18, 0xEE, 0x2B, 0x00, 0x52, 0x31, 0x92, 0x05, 0xD1, 0xF8, 0x9E, 
+	0x05, 0x9A, 0x05, 0xB2, 0xD2, 0x3A, 0x01, 0xD0, 0x02, 0x2E, 0x00, 0x01, 0x55, 0x1C, 0x23, 0x9F, 
+	0x04, 0xE7, 0xF3, 0xD0, 0x05, 0x2F, 0x00, 0x9E, 0x05, 0x4B, 0xBB, 0x96, 0x06, 0x7B, 0x5B, 0xE0, 
+	0x04, 0x93, 0x03, 0x27, 0x02, 0x4B, 0xB9, 0x97, 0x06, 0x78, 0x9B, 0x46, 0x68, 0x93, 0x03, 0x56, 
+	0x0B, 0x21, 0x0C, 0x93, 0x0B, 0x4C, 0xB2, 0x93, 0x09, 0x42, 0x5B, 0x46, 0x6A, 0xE0, 0xAA, 0x56, 
+	0x9A, 0x23, 0x18, 0x1C, 0x27, 0x7A, 0xE6, 0xE0, 0x0D, 0x92, 0x02, 0x21, 0x00, 0x1C, 0x30, 0x9B, 
+	0x02, 0x1C, 0x2A, 0xF9, 0xA0, 0xF0, 0x02, 0x21, 0x01, 0x1C, 0x30, 0x9B, 0x02, 0x1C, 0x2A, 0xF9, 
+	0x9A, 0xF0, 0x02, 0xB2, 0xF6, 0x36, 0x01, 0x7A, 0xFA, 0x7A, 0xBB, 0x1C, 0x3B, 0x18, 0xD2, 0xDB, 
+	0xEB, 0x42, 0x96, 0x2E, 0x00, 0x9E, 0x04, 0x3D, 0x0E, 0xD1, 0x00, 0x21, 0x18, 0x46, 0x68, 0x7B, 
+	0x5E, 0x56, 0x08, 0x90, 0x02, 0x4F, 0x9E, 0x1C, 0x30, 0xE0, 0x0D, 0x1C, 0x2A, 0x21, 0x00, 0xF0, 
+	0x02, 0x9B, 0x02, 0x1C, 0x30, 0xF9, 0x81, 0x1C, 0x2A, 0x21, 0x01, 0xF0, 0x02, 0x9B, 0x02, 0x36, 
+	0x01, 0xF9, 0x7B, 0x7B, 0x7A, 0xB2, 0xF6, 0x18, 0xD3, 0x7B, 0x3B, 0xDB, 0xEC, 0x42, 0x9E, 0xFC, 
+	0xAE, 0xF7, 0xFF, 0x78, 0x1B, 0x4B, 0x96, 0xD0, 0x06, 0x2B, 0x00, 0x1C, 0x18, 0x23, 0x01, 0xAA, 
+	0x0B, 0x1C, 0x19, 0xF0, 0x02, 0x93, 0x00, 0x25, 0x00, 0xFC, 0x01, 0x4F, 0x90, 0x4E, 0x8C, 0x78, 
+	0x3B, 0xE0, 0x0E, 0xD0, 0x09, 0x2B, 0x00, 0x01, 0xEA, 0x4B, 0x8E, 0x23, 0x00, 0x18, 0xD2, 0x20, 
+	0x01, 0x78, 0xB1, 0x23, 0x02, 0x93, 0x00, 0xFB, 0xF0, 0xF0, 0x02, 0xB2, 0xED, 0x35, 0x01, 0x42, 
+	0x9D, 0x78, 0xF3, 0x9A, 0x0B, 0xD3, 0xED, 0xB2, 0xD2, 0x78, 0xB6, 0x92, 0x07, 0x96, 0x02, 0xE0, 
+	0x39, 0x4D, 0x80, 0xB2, 0xDB, 0x3B, 0x01, 0x1C, 0x99, 0x9E, 0x08, 0x4F, 0x82, 0x18, 0x71, 0x5B, 
+	0xCE, 0x00, 0x49, 0x00, 0x48, 0x18, 0xD1, 0xB2, 0xB7, 0x5B, 0x40, 0xDC, 0x14, 0x42, 0xB8, 0x1C, 
+	0x01, 0x1B, 0xC0, 0xDA, 0x01, 0x31, 0x80, 0x42, 0x40, 0x20, 0x80, 0x28, 0x7F, 0x18, 0xD7, 0x20, 
+	0x7F, 0xDD, 0x00, 0x54, 0x78, 0x49, 0x79, 0x00, 0x48, 0x18, 0xD1, 0x27, 0x1C, 0x52, 0x2E, 0x48, 
+	0x77, 0x46, 0x6E, 0x54, 0x0E, 0x5D, 0xBE, 0x9E, 0x04, 0xE0, 0x13, 0xD0, 0x10, 0x2E, 0x00, 0x42, 
+	0xB0, 0x4E, 0x74, 0x4E, 0x71, 0xD0, 0x08, 0x19, 0x80, 0x57, 0x8E, 0xDA, 0x03, 0x42, 0x87, 0x5C, 
+	0x0E, 0x48, 0x6F, 0x54, 0x0E, 0x36, 0x01, 0x27, 0x01, 0x18, 0xD1, 0x42, 0x7F, 0x00, 0x49, 0x2B, 
+	0x00, 0x52, 0x6F, 0x46, 0x63, 0xD1, 0xC6, 0xB2, 0xF6, 0x1E, 0x5E, 0xD0, 0x06, 0x2B, 0x00, 0x01, 
+	0x92, 0x1C, 0x72, 0x9B, 0x02, 0x92, 0x08, 0x46, 0xB4, 0x01, 0x72, 0x9B, 0x0B, 0xE7, 0xF1, 0x93, 
+	0x0B, 0x3B, 0x01, 0x9E, 0x09, 0x9D, 0x0B, 0xDB, 0x00, 0x42, 0xB5, 0x9F, 0x04, 0xE7, 0x4F, 0xD0, 
+	0x45, 0x2F, 0x00, 0x78, 0xE3, 0x78, 0xA0, 0x6B, 0x98, 0xAE, 0xF1, 0x06, 0x78, 0x61, 0x90, 0x04, 
+	0x91, 0x06, 0x4A, 0x56, 0x94, 0x02, 0x78, 0x24, 0x7A, 0xD0, 0x7C, 0x11, 0x18, 0x08, 0x4C, 0x5B, 
+	0x90, 0x07, 0xB2, 0xC0, 0x18, 0x89, 0x7B, 0x12, 0x91, 0x08, 0xB2, 0xC9, 0xE0, 0x28, 0x4A, 0x55, 
+	0x3B, 0x01, 0x9E, 0x03, 0x2E, 0x00, 0xB2, 0xDB, 0x18, 0xC7, 0xD1, 0x01, 0x9E, 0x06, 0x55, 0xD6, 
+	0xD2, 0x02, 0x42, 0xB1, 0x42, 0xBB, 0x9F, 0x02, 0x18, 0xEF, 0xD3, 0x0C, 0x97, 0x09, 0x18, 0xC6, 
+	0x46, 0xBC, 0x5D, 0x97, 0x5D, 0xE7, 0x9F, 0x09, 0x9F, 0x08, 0x44, 0xBC, 0x46, 0x67, 0x44, 0xBC, 
+	0xE0, 0x0B, 0x55, 0x97, 0x18, 0xC6, 0x18, 0xEF, 0x5D, 0x97, 0x97, 0x09, 0x9F, 0x09, 0x46, 0xBC, 
+	0x44, 0xBC, 0x5D, 0xE7, 0x44, 0xBC, 0x9F, 0x07, 0x55, 0x97, 0x46, 0x67, 0xD1, 0xD7, 0x2B, 0x00, 
+	0x1E, 0x59, 0x1C, 0x0B, 0x2B, 0x00, 0xB2, 0xC9, 0x25, 0x26, 0xD0, 0x3E, 0x01, 0x48, 0x9B, 0x04, 
+	0xE7, 0xF3, 0x43, 0x4D, 0x79, 0xE2, 0x7C, 0x63, 0x18, 0x9A, 0x25, 0x07, 0x4A, 0x34, 0x92, 0x03, 
+	0x21, 0x02, 0x7B, 0xA0, 0x79, 0x26, 0x5E, 0x52, 0x00, 0x6D, 0x1A, 0xAD, 0xB2, 0xED, 0x19, 0x86, 
+	0x46, 0x84, 0x49, 0x34, 0x18, 0xB8, 0xE0, 0x09, 0x32, 0x01, 0x5C, 0x44, 0x54, 0x44, 0x19, 0x2C, 
+	0x42, 0xB2, 0xB2, 0xD2, 0x33, 0x01, 0xDB, 0xF7, 0x9A, 0x03, 0xB2, 0xDB, 0xDA, 0x02, 0x42, 0x93, 
+	0x01, 0x5F, 0x46, 0x62, 0x4A, 0x23, 0xE7, 0xF5, 0x7C, 0x10, 0x49, 0x2A, 0x79, 0x56, 0x7B, 0xD3, 
+	0x19, 0x9E, 0x79, 0x95, 0x46, 0x84, 0x19, 0x45, 0x18, 0xB8, 0xE0, 0x09, 0x32, 0x01, 0x5C, 0x44, 
+	0x54, 0x44, 0x3C, 0x0E, 0x42, 0xAA, 0xB2, 0xD2, 0x33, 0x01, 0xDB, 0xF7, 0x42, 0xB3, 0xB2, 0xDB, 
+	0x46, 0x62, 0xDA, 0x02, 0xE7, 0xF6, 0x01, 0x5F, 0x78, 0x1B, 0x4B, 0x1A, 0xD0, 0x13, 0x2B, 0x00, 
+	0x49, 0x1F, 0x20, 0x05, 0xFB, 0x64, 0xF0, 0x02, 0x78, 0x2B, 0xE0, 0x0E, 0xD0, 0x08, 0x2B, 0x00, 
+	0x01, 0x72, 0x4B, 0x18, 0x18, 0xD2, 0x78, 0xA1, 0x23, 0x01, 0x20, 0x05, 0xF0, 0x02, 0x93, 0x00, 
+	0x36, 0x01, 0xFA, 0xFF, 0xE0, 0x02, 0xB2, 0xF6, 0x4D, 0x0E, 0x4C, 0x0A, 0x78, 0xE3, 0x9E, 0x05, 
+	0xD8, 0xEA, 0x42, 0xB3, 0x20, 0x01, 0x21, 0x00, 0x42, 0x40, 0x1C, 0x0A, 0xF0, 0x02, 0x23, 0x02, 
+	0x20, 0x01, 0xF8, 0x55, 0x21, 0x01, 0x42, 0x40, 0x23, 0x02, 0x22, 0x00, 0xF8, 0x4E, 0xF0, 0x02, 
+	0xE0, 0x25, 0x78, 0xA4, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x12, 0x48, 
+	0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x01, 0xEB, 0x40, 0x00, 0x40, 0x84, 0x40, 0x00, 0x40, 0x00, 
+	0x20, 0x00, 0x13, 0x64, 0x20, 0x00, 0x0A, 0xB3, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x75, 0x36, 
+	0x00, 0x00, 0x60, 0xE6, 0x21, 0x00, 0x3C, 0x01, 0x1C, 0x0A, 0xB2, 0xE4, 0x23, 0x01, 0x1C, 0x20, 
+	0xF8, 0x2C, 0xF0, 0x02, 0x1C, 0x20, 0x21, 0x01, 0x1C, 0x0B, 0x22, 0x00, 0xF8, 0x26, 0xF0, 0x02, 
+	0xD1, 0xEF, 0x2C, 0x00, 0xFE, 0x30, 0xF7, 0xFF, 0xBD, 0xF0, 0xB0, 0x0D, 0xF0, 0x04, 0xB5, 0x08, 
+	0x4B, 0x05, 0xF9, 0xA1, 0x68, 0x1B, 0x20, 0x01, 0x20, 0x01, 0x47, 0x98, 0xFD, 0x22, 0xF0, 0x04, 
+	0xFE, 0x2A, 0xF0, 0x01, 0x46, 0xC0, 0xBD, 0x08, 0x20, 0x00, 0x01, 0xF8, 0x4A, 0x2C, 0xB5, 0xF7, 
+	0x60, 0x10, 0x20, 0x00, 0x4E, 0x2C, 0x4A, 0x2B, 0x4A, 0x2C, 0x8C, 0x11, 0x1D, 0x72, 0x60, 0x11, 
+	0x7D, 0xF1, 0x7F, 0xD2, 0x42, 0x44, 0x1E, 0x50, 0x4C, 0x29, 0x41, 0x60, 0x90, 0x00, 0x1A, 0x08, 
+	0x1D, 0xB0, 0x60, 0x20, 0x7E, 0x37, 0x7F, 0xC5, 0x42, 0x58, 0x1E, 0x6B, 0x1A, 0x3B, 0x41, 0x58, 
+	0x60, 0x63, 0x93, 0x01, 0xD1, 0x02, 0x2A, 0x01, 0x81, 0x20, 0x20, 0x00, 0x23, 0x26, 0xE0, 0x05, 
+	0x00, 0x49, 0x5E, 0xF0, 0xFA, 0x96, 0xF0, 0x04, 0x2D, 0x01, 0x81, 0x20, 0x23, 0x00, 0xD1, 0x02, 
+	0xE0, 0x05, 0x81, 0x63, 0x5E, 0xF0, 0x23, 0x28, 0xF0, 0x04, 0x00, 0x79, 0x81, 0x60, 0xFA, 0x8B, 
+	0x9B, 0x01, 0x4F, 0x15, 0x5E, 0x3E, 0x20, 0x28, 0x00, 0x70, 0x00, 0x59, 0xF0, 0x04, 0x19, 0x80, 
+	0x43, 0x40, 0xFA, 0x81, 0x00, 0x43, 0x4C, 0x12, 0x18, 0x18, 0x60, 0xE0, 0x20, 0x26, 0x61, 0x20, 
+	0x9B, 0x00, 0x5E, 0x3D, 0x00, 0x59, 0x00, 0x68, 0xF0, 0x04, 0x19, 0x40, 0x37, 0x2C, 0xFA, 0x73, 
+	0x61, 0xA0, 0x61, 0x60, 0x2B, 0x00, 0x78, 0x3B, 0x61, 0xE6, 0xD1, 0x02, 0xE0, 0x01, 0x62, 0x25, 
+	0x62, 0x26, 0x61, 0xE5, 0x22, 0x01, 0x4B, 0x07, 0x60, 0x5A, 0x42, 0x52, 0x46, 0xC0, 0xBD, 0xF7, 
+	0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0x20, 
+	0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x00, 0xCC, 0x4B, 0x24, 0xB5, 0xF0, 0x7E, 0x1E, 0xB0, 0x87, 
+	0x1C, 0x72, 0x7D, 0xDB, 0x33, 0x02, 0x1C, 0xD9, 0x92, 0x05, 0x93, 0x03, 0x4A, 0x20, 0x23, 0x00, 
+	0x1C, 0x18, 0x91, 0x04, 0x1A, 0xE5, 0x9C, 0x05, 0x97, 0x01, 0x01, 0xEF, 0x52, 0xB8, 0x5A, 0xBC, 
+	0x01, 0xAD, 0x9C, 0x04, 0x00, 0x4F, 0x19, 0x29, 0x4C, 0x1A, 0x5A, 0xBC, 0x27, 0x00, 0x52, 0xB8, 
+	0x55, 0x0F, 0x55, 0x2F, 0x4F, 0x18, 0x99, 0x01, 0x19, 0xCF, 0x33, 0x01, 0x88, 0x39, 0x97, 0x02, 
+	0x99, 0x03, 0x80, 0x38, 0x00, 0x79, 0x18, 0x6F, 0x5A, 0x89, 0x91, 0x01, 0x52, 0x88, 0x99, 0x01, 
+	0x18, 0x6D, 0x49, 0x12, 0x70, 0x29, 0x21, 0x00, 0x1A, 0xF7, 0x55, 0x39, 0x37, 0x01, 0x4D, 0x0C, 
+	0x22, 0x00, 0xDA, 0xD8, 0x9B, 0x03, 0x36, 0x01, 0x01, 0xB6, 0x1C, 0x11, 0x5A, 0x2F, 0x00, 0x58, 
+	0x18, 0xF0, 0x52, 0x2A, 0x5B, 0xEC, 0x00, 0x47, 0x4F, 0x06, 0x53, 0xEA, 0x3B, 0x01, 0x54, 0xF9, 
+	0x2B, 0x01, 0x54, 0x39, 0xB0, 0x07, 0xD1, 0xF2, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x09, 0xAE, 
+	0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x02, 0x40, 0x00, 0x20, 0x01, 
+	0x4B, 0x0D, 0xB5, 0xF7, 0x7D, 0xDE, 0x7E, 0x19, 0x36, 0x01, 0x1C, 0x48, 0x90, 0x01, 0x23, 0x00, 
+	0x1C, 0x32, 0x9C, 0x01, 0x01, 0xBF, 0x1A, 0xE7, 0x46, 0xAC, 0x1C, 0x95, 0x4C, 0x07, 0x44, 0xBC, 
+	0x46, 0x60, 0x25, 0x00, 0x55, 0x05, 0x3A, 0x01, 0xDA, 0xF5, 0x1C, 0x50, 0x1A, 0xCA, 0x33, 0x01, 
+	0xDA, 0xED, 0x32, 0x01, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x20, 0x00, 
+	0x4B, 0x0D, 0xB5, 0x00, 0x5E, 0x9B, 0x22, 0x08, 0x1C, 0x11, 0x4A, 0x0C, 0x78, 0x09, 0x31, 0x35, 
+	0x43, 0x4B, 0x7F, 0x12, 0x11, 0x9B, 0xB2, 0x52, 0xDA, 0x00, 0x42, 0x93, 0x4A, 0x08, 0x1C, 0x13, 
+	0x22, 0x80, 0x60, 0x13, 0x05, 0x1B, 0x05, 0xD2, 0x69, 0x90, 0x09, 0x19, 0x40, 0x03, 0x4B, 0x05, 
+	0x61, 0x93, 0x43, 0x0B, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x12, 0x48, 
+	0x20, 0x00, 0x0D, 0x38, 0xF0, 0x00, 0xFF, 0xFF, 0x4A, 0xA9, 0xB5, 0xF0, 0x68, 0x11, 0x48, 0xA9, 
+	0xB0, 0x93, 0x68, 0x07, 0x22, 0x0D, 0x46, 0x8C, 0x25, 0x7F, 0x21, 0x00, 0x97, 0x01, 0x24, 0xFF, 
+	0x18, 0x83, 0x00, 0x90, 0x00, 0x5B, 0x4E, 0xA4, 0x87, 0x99, 0x18, 0xF3, 0x33, 0x38, 0x27, 0x00, 
+	0x46, 0x67, 0x72, 0x1F, 0x3A, 0x01, 0x50, 0x39, 0xB2, 0xD2, 0x9F, 0x01, 0xCE, 0xFC, 0xAE, 0xF1, 
+	0x07, 0x26, 0x00, 0x50, 0x39, 0x72, 0x5D, 0x72, 0xDD, 0x72, 0x9C, 0x73, 0x1C, 0x2A, 0xFF, 0x80, 
+	0xD9, 0x4A, 0x9B, 0xD1, 0xE8, 0x7E, 0x11, 0x4B, 0x9B, 0x4C, 0x9B, 0x68, 0x98, 0x39, 0x01, 0x4D, 
+	0x97, 0x81, 0xA6, 0x90, 0x04, 0x42, 0x88, 0x60, 0x2E, 0x30, 0x01, 0xDA, 0x02, 0x60, 0x98, 0x90, 
+	0x04, 0x96, 0x11, 0x68, 0xDE, 0xDD, 0x02, 0x2E, 0x00, 0x96, 0x11, 0x3E, 0x01, 0x7D, 0xD1, 0x60, 
+	0xDE, 0x39, 0x01, 0x68, 0x1A, 0xDA, 0x01, 0x42, 0x8A, 0x60, 0x1A, 0x32, 0x01, 0x2A, 0x00, 0x68, 
+	0x5A, 0x3A, 0x01, 0xDD, 0x01, 0x9F, 0x04, 0x60, 0x5A, 0x42, 0x87, 0x98, 0x11, 0xE0, 0xA3, 0xDA, 
+	0x00, 0x68, 0x5B, 0x68, 0x19, 0x93, 0x06, 0x4A, 0x84, 0x68, 0x12, 0x4B, 0x88, 0x4C, 0x86, 0x68, 
+	0x1B, 0x4B, 0x80, 0x93, 0x0D, 0x68, 0x1B, 0x91, 0x10, 0x93, 0x0A, 0x92, 0x09, 0x48, 0x84, 0x89, 
+	0xA4, 0x9D, 0x06, 0x94, 0x0C, 0x42, 0xB5, 0x9E, 0x10, 0xE0, 0x81, 0xDD, 0x00, 0x46, 0x6F, 0x9A, 
+	0x04, 0x32, 0x01, 0x21, 0x10, 0x01, 0x92, 0x5D, 0xCF, 0x92, 0x02, 0x1C, 0x33, 0xE0, 0x05, 0x97, 
+	0x07, 0x54, 0x2F, 0x27, 0x00, 0x3B, 0x01, 0x9F, 0x06, 0xDC, 0x71, 0x42, 0x9F, 0x1C, 0x9C, 0x99, 
+	0x02, 0x5C, 0x2A, 0x19, 0x0D, 0x00, 0x69, 0x4E, 0x77, 0x2A, 0x0E, 0x5B, 0x89, 0x9D, 0x0D, 0xD8, 
+	0xF0, 0x2A, 0x00, 0x1B, 0x49, 0xE0, 0x71, 0xD1, 0x00, 0xB2, 0xD4, 0x3A, 0x01, 0x9F, 0x04, 0x9E, 
+	0x09, 0x18, 0xB5, 0x00, 0xA2, 0x68, 0x2E, 0x43, 0x4F, 0x44, 0x67, 0x46, 0xB4, 0x9D, 0x0A, 0x60, 
+	0x2F, 0x18, 0xAF, 0x1C, 0x0E, 0x43, 0x5E, 0x68, 0x3D, 0x19, 0x15, 0x46, 0xAC, 0x95, 0x01, 0x00, 
+	0x6D, 0x44, 0x66, 0x4D, 0x62, 0x9D, 0x01, 0x46, 0xAC, 0x44, 0xAC, 0x60, 0x3E, 0x8F, 0xAF, 0x46, 
+	0x65, 0x7A, 0x2E, 0x35, 0x38, 0x96, 0x03, 0x19, 0xCF, 0x57, 0xAE, 0x26, 0x09, 0x96, 0x01, 0x80, 
+	0xAF, 0x46, 0x6F, 0x9E, 0x0C, 0x26, 0x01, 0x46, 0xB4, 0x9E, 0x03, 0x44, 0xB4, 0x96, 0x03, 0x36, 
+	0x01, 0xB2, 0xB6, 0x46, 0x66, 0x26, 0x0C, 0x96, 0x0C, 0x9E, 0x04, 0x5D, 0xF7, 0x9F, 0x01, 0x72, 
+	0x2F, 0xDA, 0x00, 0x42, 0xBE, 0x4E, 0x51, 0x72, 0x6E, 0x00, 0x6D, 0x19, 0x15, 0x35, 0x38, 0x19, 
+	0x75, 0x57, 0xAE, 0x26, 0x0A, 0x42, 0xB7, 0x9F, 0x04, 0x72, 0xAF, 0xDD, 0x00, 0x19, 0x15, 0x4E, 
+	0x4B, 0x19, 0x75, 0x00, 0x6D, 0x26, 0x0B, 0x35, 0x38, 0x42, 0xB3, 0x57, 0xAE, 0x72, 0xEB, 0xDA, 
+	0x00, 0x4F, 0x46, 0x19, 0x15, 0x19, 0x7D, 0x00, 0x6D, 0x26, 0x0C, 0x35, 0x38, 0x42, 0xB3, 0x57, 
+	0xAE, 0x73, 0x2B, 0xDD, 0x00, 0x4C, 0x41, 0x19, 0x12, 0x18, 0xA2, 0x00, 0x52, 0x5F, 0x54, 0x25, 
+	0x3E, 0x42, 0xA1, 0x32, 0x38, 0x9F, 0x06, 0xDD, 0x8E, 0x80, 0xD1, 0x3B, 0x01, 0xDD, 0x8D, 0x42, 
+	0x9F, 0x9A, 0x11, 0x99, 0x04, 0x91, 0x04, 0x39, 0x01, 0xDB, 0x00, 0x42, 0x91, 0x46, 0x6B, 0xE7, 
+	0x71, 0x5A, 0xE4, 0x24, 0x30, 0x81, 0x9C, 0x4B, 0x38, 0xBD, 0xF0, 0xB0, 0x13, 0x43, 0xCA, 0x39, 
+	0x02, 0x40, 0x11, 0x17, 0xD2, 0x9E, 0x04, 0x91, 0x03, 0x43, 0x71, 0x9F, 0x03, 0x91, 0x0E, 0x43, 
+	0x5F, 0xB2, 0xD9, 0x25, 0x00, 0x91, 0x05, 0x97, 0x0F, 0x95, 0x01, 0x22, 0x03, 0x94, 0x08, 0x46, 
+	0x9C, 0x4F, 0x32, 0x4E, 0x31, 0x5C, 0xB1, 0x9C, 0x07, 0x5C, 0xBB, 0x9D, 0x05, 0x18, 0xEB, 0x18, 
+	0x61, 0x31, 0x01, 0xB2, 0x49, 0x01, 0x89, 0xB2, 0x5B, 0x18, 0xCB, 0x33, 0x02, 0xB2, 0x65, 0x5C, 
+	0x1C, 0x29, 0x0D, 0x1E, 0x69, 0x9B, 0x08, 0xD8, 0x27, 0x00, 0x8E, 0x9F, 0x02, 0x97, 0x0B, 0x18, 
+	0xFF, 0x18, 0x71, 0x9F, 0x09, 0x9F, 0x0A, 0x19, 0xBB, 0x19, 0xBF, 0x00, 0x49, 0x97, 0x00, 0x4E, 
+	0x1B, 0x18, 0x71, 0x9F, 0x01, 0x2F, 0x00, 0x31, 0x38, 0xB2, 0xE4, 0xD1, 0x1A, 0x9D, 0x0B, 0x94, 
+	0x01, 0xB2, 0xE4, 0x34, 0x0E, 0x68, 0x1C, 0x54, 0x2C, 0x9F, 0x00, 0x9E, 0x0E, 0x60, 0x1C, 0x19, 
+	0xA4, 0x9C, 0x0F, 0x68, 0x3B, 0x19, 0x1B, 0x9D, 0x03, 0x88, 0x8C, 0x60, 0x3B, 0x19, 0x2C, 0x7A, 
+	0x0B, 0x80, 0x8C, 0x33, 0x01, 0x1E, 0x53, 0x72, 0x0B, 0xD0, 0x10, 0x2A, 0x00, 0xE7, 0xBF, 0xB2, 
+	0xDA, 0x99, 0x08, 0x9E, 0x02, 0x18, 0x73, 0x9C, 0x01, 0xD0, 0xF4, 0x2C, 0x1F, 0xD0, 0xF2, 0x42, 
+	0xAC, 0x26, 0x1F, 0x25, 0x1F, 0x96, 0x01, 0x54, 0x1D, 0x2A, 0x00, 0x1E, 0x53, 0x46, 0x63, 0xD1, 
+	0xEE, 0x46, 0xC0, 0xE7, 0x18, 0x20, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 0x48, 0x20, 0x00, 0x02, 
+	0x24, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x15, 0xE4, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x0D, 
+	0x38, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x61, 0xC0, 0x00, 0x00, 0x61, 
+	0xBC, 0xB0, 0x89, 0xB5, 0xF0, 0x49, 0x62, 0x23, 0x0F, 0xE0, 0x02, 0x22, 0xFF, 0x38, 0x01, 0x18, 
+	0x58, 0x3B, 0x01, 0x70, 0x02, 0xD1, 0xF9, 0x2B, 0x00, 0x68, 0xD8, 0x4B, 0x5E, 0x68, 0x9A, 0x68, 
+	0x19, 0x90, 0x02, 0x68, 0x5B, 0x4B, 0x5C, 0x93, 0x04, 0x68, 0x1B, 0x91, 0x03, 0x4B, 0x5B, 0x93, 
+	0x05, 0x93, 0x06, 0x7F, 0x5B, 0x9C, 0x01, 0xE0, 0xA0, 0x4D, 0x59, 0x1C, 0x8A, 0x18, 0xA2, 0x92, 
+	0x00, 0x46, 0x63, 0x5D, 0x52, 0xD0, 0x00, 0x2A, 0x1F, 0xE0, 0x21, 0xE0, 0x8F, 0x42, 0xBB, 0x27, 
+	0x0A, 0x27, 0x00, 0xDC, 0x03, 0xDD, 0x00, 0x2B, 0x01, 0x26, 0x11, 0x9F, 0x07, 0xDC, 0x03, 0x42, 
+	0xB2, 0x2A, 0x01, 0x26, 0x00, 0x1E, 0x56, 0xDD, 0x00, 0x19, 0xBE, 0x01, 0x7F, 0x00, 0x76, 0x4F, 
+	0x4D, 0x2E, 0x0A, 0x5B, 0xF6, 0x3D, 0x01, 0xD0, 0x05, 0x32, 0x01, 0xB2, 0xED, 0xD1, 0xE5, 0x2D, 
+	0x00, 0x20, 0x01, 0xE0, 0x00, 0xB2, 0xE4, 0x3C, 0x01, 0x2C, 0x00, 0x33, 0x01, 0xE0, 0x06, 0xD1, 
+	0x02, 0x20, 0x00, 0x24, 0x03, 0x1C, 0x0A, 0x1E, 0x5E, 0x96, 0x07, 0x25, 0x03, 0x28, 0x00, 0xE7, 
+	0xD6, 0x9B, 0x00, 0xD1, 0x63, 0x9C, 0x05, 0x9F, 0x01, 0x4B, 0x3F, 0x18, 0xFA, 0x5A, 0xD3, 0x00, 
+	0x52, 0x93, 0x00, 0x1B, 0x1B, 0x4A, 0x3D, 0x23, 0x1F, 0x18, 0x82, 0x24, 0x03, 0x4A, 0x3C, 0x57, 
+	0x14, 0x18, 0x82, 0x44, 0x64, 0x34, 0x01, 0x78, 0xD2, 0x18, 0x8A, 0xB2, 0x52, 0x32, 0x02, 0x01, 
+	0xA4, 0x18, 0xA2, 0x4D, 0x33, 0x2C, 0x0E, 0x5C, 0xAC, 0x2B, 0x1F, 0xD8, 0x03, 0x2C, 0x00, 0xD1, 
+	0x01, 0x1E, 0x62, 0xD1, 0x3F, 0x2D, 0x0D, 0xB2, 0xD5, 0x42, 0xA3, 0xD8, 0x3C, 0x26, 0x0A, 0xD0, 
+	0x3A, 0x43, 0x75, 0x1E, 0x5D, 0x4F, 0x2F, 0x43, 0x72, 0x19, 0x7D, 0x18, 0xBA, 0x5F, 0xEE, 0x27, 
+	0x3E, 0x5F, 0xD5, 0x27, 0x3E, 0x42, 0xAE, 0x1C, 0x1A, 0x1C, 0x22, 0xDD, 0x00, 0x3A, 0x01, 0x25, 
+	0x0A, 0x4E, 0x28, 0x43, 0x6A, 0x18, 0xB2, 0x9D, 0x06, 0x5F, 0xD2, 0x27, 0x3E, 0x43, 0x6A, 0x9E, 
+	0x00, 0x42, 0x96, 0x11, 0x92, 0x42, 0x9C, 0xDD, 0x1E, 0x1C, 0x1A, 0xD9, 0x02, 0x1C, 0x14, 0x1C, 
+	0x23, 0x4A, 0x17, 0x1E, 0x5E, 0x5D, 0x97, 0xB2, 0xF6, 0x97, 0x07, 0x25, 0x1C, 0x57, 0x7D, 0x46, 
+	0x6F, 0xB2, 0xE4, 0x3C, 0x01, 0xD0, 0x0A, 0x1C, 0x6F, 0xDA, 0x04, 0x42, 0xA5, 0x26, 0x1C, 0x46, 
+	0x6D, 0x55, 0x15, 0x5D, 0x75, 0x42, 0xA5, 0xE0, 0x06, 0xB2, 0xE4, 0xDD, 0x04, 0x55, 0x94, 0x55, 
+	0x54, 0x95, 0xEC, 0xAE, 0xF1, 0x08, 0x1C, 0x23, 0xE0, 0x00, 0x1D, 0x06, 0x38, 0x01, 0x39, 0x01, 
+	0xD1, 0xA5, 0x42, 0xB9, 0x9F, 0x04, 0xE7, 0x60, 0xDB, 0x00, 0x3A, 0x01, 0x46, 0x62, 0x42, 0x82, 
+	0x98, 0x02, 0x1C, 0x53, 0xDB, 0x05, 0x99, 0x03, 0x01, 0x9B, 0x46, 0x94, 0x93, 0x01, 0xB0, 0x09, 
+	0xE7, 0xF0, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x02, 0xEC, 0x20, 0x00, 0x15, 0xE4, 0x20, 0x00, 
+	0x0D, 0x38, 0x20, 0x00, 0x12, 0x48, 0x40, 0x00, 0x20, 0x00, 0x20, 0x00, 0x0D, 0x3C, 0x40, 0x00, 
+	0x40, 0x00, 0x00, 0x00, 0x61, 0xC0, 0x00, 0x00, 0x61, 0xBC, 0x20, 0x00, 0x02, 0x24, 0x4A, 0xD4, 
+	0xB5, 0xF0, 0x68, 0x11, 0xB0, 0x8D, 0x18, 0xD0, 0x23, 0x00, 0x24, 0x00, 0x30, 0xBE, 0x3B, 0x0A, 
+	0x5F, 0x00, 0x41, 0xA0, 0x1E, 0x44, 0x18, 0x09, 0x1C, 0x1D, 0xD1, 0xF4, 0x35, 0x8C, 0x60, 0x11, 
+	0x4B, 0xCD, 0x32, 0xBE, 0x68, 0x1B, 0x4B, 0xCC, 0x93, 0x03, 0x68, 0x1B, 0x24, 0x0E, 0x4E, 0xCB, 
+	0x93, 0x05, 0x57, 0x33, 0x3C, 0x01, 0xD1, 0x01, 0x1C, 0x5F, 0x1C, 0x03, 0xE0, 0x73, 0x56, 0xE8, 
+	0x4D, 0xC7, 0xD1, 0xFA, 0x1C, 0x46, 0x1C, 0x5F, 0x55, 0x2B, 0x98, 0x03, 0xD0, 0x6B, 0x19, 0x46, 
+	0x00, 0x9D, 0x00, 0xA0, 0x68, 0x37, 0x9F, 0x03, 0x46, 0xBC, 0x44, 0xBC, 0x58, 0x3F, 0x60, 0x37, 
+	0x46, 0x67, 0x9F, 0x05, 0x9E, 0x05, 0x68, 0x2E, 0x19, 0x75, 0x4F, 0xB9, 0x58, 0x38, 0x26, 0x0A, 
+	0x18, 0x30, 0x1C, 0x30, 0x60, 0x28, 0x18, 0x38, 0x43, 0x58, 0x27, 0x09, 0x30, 0x38, 0x79, 0x55, 
+	0x57, 0xC7, 0xB2, 0x6F, 0x46, 0xBC, 0xDD, 0x00, 0x45, 0xBC, 0x43, 0x5E, 0x72, 0x45, 0x79, 0x90, 
+	0x4D, 0xB0, 0x36, 0x38, 0x19, 0xAE, 0x57, 0xF7, 0x27, 0x0A, 0x42, 0xAF, 0xB2, 0x45, 0x72, 0xB0, 
+	0xDA, 0x00, 0x4F, 0xAB, 0x79, 0xD6, 0x26, 0x0A, 0x96, 0x06, 0x43, 0x58, 0x1C, 0x30, 0x30, 0x38, 
+	0x18, 0x38, 0x57, 0x45, 0x25, 0x0B, 0x46, 0x6D, 0x46, 0xAC, 0x78, 0x2D, 0x35, 0x18, 0x45, 0xAC, 
+	0xB2, 0x6D, 0x46, 0x6F, 0xDD, 0x03, 0x5D, 0xEF, 0x25, 0x18, 0x43, 0x5E, 0x72, 0xC7, 0x7A, 0x10, 
+	0x4D, 0xA0, 0x37, 0x38, 0x19, 0xAF, 0x57, 0xBE, 0x26, 0x0C, 0x42, 0xAE, 0xB2, 0x45, 0x73, 0x38, 
+	0xDA, 0x00, 0x43, 0x58, 0x20, 0x0A, 0x4F, 0x9A, 0x88, 0x56, 0x18, 0x38, 0x96, 0x06, 0x5F, 0x85, 
+	0x26, 0x3E, 0x46, 0xAC, 0x26, 0x18, 0x5F, 0x75, 0x46, 0x6D, 0x26, 0x0A, 0x30, 0x38, 0xDA, 0x03, 
+	0x45, 0xAC, 0x25, 0x18, 0x46, 0x6F, 0x80, 0xC7, 0x5B, 0xEF, 0x48, 0x91, 0x43, 0x5E, 0x19, 0x87, 
+	0x39, 0x01, 0x88, 0x10, 0x8F, 0xBB, 0x87, 0xBB, 0x18, 0xC3, 0x79, 0x10, 0x37, 0x38, 0x18, 0xC3, 
+	0x7A, 0x3B, 0x3A, 0x0A, 0x72, 0x3B, 0xD0, 0x00, 0x2C, 0x00, 0x4F, 0x89, 0xE7, 0x81, 0x1C, 0x3D, 
+	0x1C, 0x26, 0x95, 0x03, 0x35, 0x3C, 0x1C, 0x25, 0x60, 0x39, 0x22, 0x00, 0x48, 0x88, 0x56, 0x9A, 
+	0x18, 0x33, 0xD1, 0x19, 0x32, 0x01, 0x42, 0xB5, 0x70, 0x1D, 0x4B, 0x82, 0xD0, 0x12, 0x68, 0x1A, 
+	0x00, 0xB1, 0x58, 0x50, 0x00, 0xAB, 0x4A, 0x80, 0x50, 0xD0, 0x68, 0x12, 0x48, 0x7D, 0x50, 0xD1, 
+	0x58, 0x51, 0x1C, 0x13, 0x22, 0x0A, 0x18, 0xC0, 0x43, 0x6B, 0x99, 0x03, 0x30, 0x3C, 0xFF, 0x20, 
+	0xF0, 0x03, 0x35, 0x01, 0x68, 0x3B, 0xDA, 0x05, 0x42, 0x9D, 0x36, 0x01, 0x99, 0x03, 0x91, 0x03, 
+	0x31, 0x0A, 0xD1, 0xD9, 0x2E, 0x0E, 0x68, 0x1B, 0x4B, 0x76, 0xD5, 0x3B, 0x06, 0xDA, 0x78, 0x1B, 
+	0x4B, 0x75, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x74, 0x20, 0x04, 0xFE, 0xEE, 0xF0, 0x01, 0x4E, 0x73, 
+	0x25, 0x00, 0x1C, 0x69, 0xE0, 0x2C, 0x68, 0x33, 0x01, 0x89, 0x4A, 0x71, 0x68, 0x77, 0x46, 0xA4, 
+	0x91, 0x03, 0x9C, 0x03, 0xE0, 0x12, 0x18, 0x61, 0x1C, 0x99, 0xB2, 0x40, 0x5C, 0x88, 0x2C, 0x0D, 
+	0x1E, 0x44, 0x4C, 0x66, 0xD8, 0x09, 0x38, 0x01, 0x18, 0x20, 0xB2, 0x40, 0x78, 0x00, 0xD0, 0x02, 
+	0x1C, 0x44, 0xB2, 0xC0, 0x30, 0x01, 0x3B, 0x01, 0x54, 0x88, 0xDA, 0xEA, 0x42, 0xBB, 0x46, 0x64, 
+	0x4B, 0x61, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x63, 0xD0, 0x09, 0x01, 0xAA, 0x4F, 0x63, 0x19, 0xD2, 
+	0x7D, 0xD9, 0x20, 0x04, 0x23, 0x01, 0xF0, 0x01, 0x93, 0x00, 0x35, 0x01, 0xFE, 0x67, 0x7E, 0x3B, 
+	0x4F, 0x5D, 0xDB, 0xCE, 0x42, 0x9D, 0x68, 0x1B, 0x4B, 0x5D, 0xDD, 0x10, 0x2B, 0x00, 0x4A, 0x5D, 
+	0x4B, 0x5C, 0x80, 0x11, 0x89, 0x99, 0x80, 0x53, 0x89, 0x1B, 0x78, 0x1B, 0x4B, 0x52, 0xD0, 0x06, 
+	0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x17, 0x93, 0x00, 0xF0, 0x01, 0x1C, 0x0B, 0x4B, 0x48, 
+	0xFE, 0x4D, 0x1C, 0x1D, 0x48, 0x55, 0x49, 0x4F, 0xCD, 0x40, 0x89, 0x47, 0x96, 0x07, 0x8D, 0x0A, 
+	0x97, 0x08, 0xB2, 0x16, 0x68, 0x47, 0x69, 0x86, 0x96, 0x05, 0xB2, 0xB7, 0x97, 0x09, 0x97, 0x04, 
+	0x1B, 0xD2, 0x31, 0x31, 0xB2, 0x92, 0x92, 0x0A, 0x78, 0x09, 0x20, 0x00, 0x4A, 0x3E, 0x68, 0x17, 
+	0x91, 0x06, 0xE0, 0x2F, 0x90, 0x03, 0x23, 0x0A, 0x9A, 0x03, 0xCF, 0x01, 0x43, 0x53, 0x43, 0x48, 
+	0x99, 0x05, 0x18, 0xCB, 0x49, 0x37, 0x5E, 0x99, 0x22, 0x3C, 0x43, 0x59, 0x9B, 0x09, 0xFE, 0x36, 
+	0xF0, 0x03, 0x4A, 0x42, 0x99, 0x08, 0x78, 0x13, 0x18, 0x08, 0x80, 0x28, 0xB2, 0x80, 0xD1, 0x15, 
+	0x2B, 0x00, 0x42, 0xB0, 0xB2, 0x00, 0x9B, 0x06, 0xDA, 0x07, 0x43, 0x58, 0x1B, 0x80, 0x11, 0x80, 
+	0x99, 0x04, 0x80, 0x28, 0x18, 0x08, 0x9A, 0x05, 0xE0, 0x0A, 0x42, 0xB0, 0x1A, 0x10, 0x9B, 0x06, 
+	0xDA, 0x06, 0x43, 0x58, 0x1B, 0x80, 0x11, 0x80, 0x99, 0x0A, 0x80, 0x28, 0x1A, 0x08, 0x35, 0x02, 
+	0x9A, 0x03, 0x92, 0x03, 0x32, 0x01, 0x98, 0x07, 0x9B, 0x03, 0xDB, 0xCB, 0x42, 0x83, 0x49, 0x2E, 
+	0x4D, 0x20, 0x4A, 0x28, 0x68, 0x2D, 0x89, 0x0E, 0x95, 0x05, 0x96, 0x07, 0x68, 0x0D, 0x95, 0x08, 
+	0x8C, 0xD3, 0xB2, 0x1F, 0x69, 0x4D, 0x1C, 0x11, 0xB2, 0xAE, 0x96, 0x06, 0x97, 0x04, 0x78, 0x09, 
+	0x31, 0x2F, 0xB2, 0x9B, 0x1B, 0x9B, 0x32, 0x30, 0x91, 0x09, 0x4E, 0x15, 0x78, 0x12, 0x4B, 0x16, 
+	0x93, 0x0B, 0x92, 0x0A, 0x20, 0x00, 0x36, 0x20, 0x68, 0x1F, 0xE0, 0x50, 0x90, 0x03, 0x23, 0x0A, 
+	0x9A, 0x03, 0xCF, 0x01, 0x43, 0x53, 0x43, 0x48, 0x99, 0x04, 0x18, 0x5B, 0x49, 0x0D, 0x5E, 0x99, 
+	0x22, 0x3C, 0x43, 0x59, 0x9B, 0x08, 0xFD, 0xE2, 0xF0, 0x03, 0x4A, 0x18, 0x99, 0x07, 0x78, 0x13, 
+	0x18, 0x08, 0x80, 0x30, 0xB2, 0x80, 0xD1, 0x36, 0x2B, 0x00, 0x42, 0xA8, 0xB2, 0x00, 0x9B, 0x09, 
+	0xDA, 0x28, 0x43, 0x58, 0x1B, 0x40, 0x11, 0x80, 0x99, 0x06, 0x80, 0x30, 0x18, 0x08, 0x46, 0xC0, 
+	0xE0, 0x2B, 0x20, 0x00, 0x02, 0x24, 0x20, 0x00, 0x00, 0x48, 0x20, 0x00, 0x00, 0x44, 0x20, 0x00, 
+	0x02, 0xEC, 0x20, 0x00, 0x00, 0x58, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x61, 0x1C, 0x20, 0x00, 
+	0x15, 0xE4, 0x40, 0x00, 0x20, 0x00, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x20, 0x42, 0x20, 0x00, 
+	0x12, 0x9C, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 
+	0x01, 0xDF, 0x1A, 0x10, 0x9A, 0x04, 0xDA, 0x06, 0x42, 0xA8, 0x1B, 0x40, 0x9B, 0x0A, 0x99, 0x0B, 
+	0x43, 0x58, 0x1A, 0x08, 0x11, 0x80, 0x75, 0xED, 0xAE, 0xF1, 0x09, 0x9A, 0x03, 0x80, 0x30, 0x32, 
+	0x01, 0x36, 0x02, 0x9B, 0x03, 0x92, 0x03, 0x42, 0x83, 0x98, 0x05, 0x4B, 0x25, 0xDB, 0xAA, 0x32, 
+	0x2A, 0x1C, 0x1A, 0x1C, 0x1A, 0x78, 0x17, 0x78, 0x12, 0x32, 0x2B, 0x5E, 0x5E, 0x21, 0x28, 0x25, 
+	0x26, 0x92, 0x03, 0x33, 0x2C, 0x5F, 0x5A, 0x78, 0x1B, 0x92, 0x04, 0x93, 0x06, 0x49, 0x1E, 0x46, 
+	0xB4, 0x25, 0x00, 0x26, 0x00, 0xE0, 0x30, 0x2B, 0x00, 0x5F, 0x8B, 0x4A, 0x1B, 0xD0, 0x29, 0x23, 
+	0x04, 0x18, 0xA8, 0x26, 0x20, 0x5E, 0xC2, 0x2F, 0x00, 0x5F, 0x83, 0x46, 0x66, 0xD0, 0x01, 0x9E, 
+	0x03, 0x1A, 0xB2, 0xD0, 0x01, 0x2E, 0x00, 0x1A, 0xF3, 0x9E, 0x04, 0x2E, 0x00, 0x9E, 0x06, 0x1C, 
+	0x16, 0xD0, 0x02, 0x1C, 0x33, 0x1C, 0x1A, 0x42, 0xB2, 0x4E, 0x11, 0x2A, 0x04, 0xDC, 0x04, 0x22, 
+	0x04, 0xDA, 0x00, 0xE0, 0x01, 0xB2, 0x92, 0x00, 0x92, 0x22, 0xB3, 0x4A, 0x0D, 0x80, 0x82, 0xDC, 
+	0x04, 0x42, 0x93, 0xDA, 0x00, 0x2B, 0x04, 0xB2, 0x9B, 0x23, 0x04, 0x4B, 0x0A, 0xE0, 0x00, 0x34, 
+	0x01, 0x84, 0x03, 0x35, 0x02, 0x31, 0x0A, 0x42, 0xB4, 0x9E, 0x05, 0xB0, 0x0D, 0xDB, 0xCB, 0x46, 
+	0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0x60, 0x20, 0x00, 0x02, 0x24, 0x00, 
+	0x00, 0x02, 0xCB, 0x00, 0x00, 0x04, 0xFB, 0x00, 0x00, 0x04, 0xFC, 0x4B, 0x0A, 0xB5, 0x30, 0x33, 
+	0x04, 0x21, 0x00, 0x4A, 0x09, 0x7F, 0xDB, 0x1C, 0x08, 0x24, 0x0A, 0x3B, 0x01, 0xE0, 0x07, 0x1C, 
+	0x25, 0xB2, 0xDB, 0x19, 0x55, 0x43, 0x5D, 0x4D, 0x05, 0x87, 0xA9, 0x2B, 0x00, 0x54, 0xE8, 0x60, 
+	0x13, 0xD1, 0xF5, 0x46, 0xC0, 0xBD, 0x30, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x12, 0x9C, 0x20, 
+	0x00, 0x01, 0x64, 0x4A, 0x08, 0xB5, 0x00, 0x42, 0x5B, 0x23, 0x01, 0x4B, 0x07, 0x60, 0x53, 0x60, 
+	0x11, 0x21, 0x00, 0xE0, 0x04, 0x78, 0x1B, 0xB2, 0xDB, 0x3B, 0x01, 0x00, 0x40, 0x1D, 0x18, 0x2B, 
+	0x00, 0x52, 0x81, 0xBD, 0x00, 0xD1, 0xF8, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x43, 
+	0x40, 0x43, 0x49, 0x47, 0x70, 0x18, 0x40, 0xB5, 0xF0, 0x47, 0x70, 0x22, 0x00, 0x4B, 0x83, 0x7F, 
+	0xD9, 0x33, 0x04, 0x1C, 0x0B, 0xB0, 0x87, 0x26, 0x0A, 0x48, 0x81, 0xE0, 0x07, 0x1C, 0x15, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x43, 0x5C, 0x1C, 0x34, 0x87, 0xA2, 0x19, 0x04, 0x72, 0x25, 0x34, 0x38, 0x2B, 
+	0x00, 0x1C, 0x04, 0x4B, 0x7B, 0xD1, 0xF4, 0x1C, 0x0B, 0x68, 0x1A, 0xDD, 0x00, 0x42, 0x91, 0x60, 
+	0x23, 0x1C, 0x13, 0x4A, 0x79, 0x48, 0x78, 0x24, 0x0E, 0x4B, 0x79, 0x3C, 0x01, 0x21, 0xFF, 0x00, 
+	0xA5, 0xB2, 0xE4, 0x50, 0xAB, 0x55, 0x01, 0xD1, 0xF8, 0x2C, 0x00, 0x1C, 0x25, 0x4B, 0x6F, 0x7F, 
+	0xDB, 0x33, 0x04, 0x93, 0x03, 0x1C, 0x26, 0x69, 0x1B, 0x4B, 0x72, 0x4B, 0x6D, 0x93, 0x04, 0x93, 
+	0x05, 0x68, 0x1B, 0x4C, 0x70, 0xE0, 0x47, 0x2B, 0x00, 0x5D, 0x63, 0x4C, 0x6F, 0xD0, 0x42, 0x58, 
+	0xE3, 0x00, 0xAB, 0x01, 0x1B, 0x9C, 0x04, 0x93, 0x01, 0x19, 0x1B, 0x00, 0x6A, 0x4B, 0x6C, 0x18, 
+	0xD3, 0x27, 0x01, 0x42, 0x7F, 0x24, 0x00, 0xE0, 0x20, 0x93, 0x02, 0x43, 0x63, 0x23, 0x0A, 0x18, 
+	0xC3, 0x48, 0x60, 0x5E, 0x5B, 0x21, 0x3C, 0xD0, 0x16, 0x2B, 0x00, 0x00, 0x63, 0x9A, 0x02, 0x88, 
+	0x98, 0x18, 0xC3, 0x4A, 0x5B, 0x88, 0x93, 0x1C, 0x23, 0x1A, 0xC0, 0x00, 0x5B, 0x33, 0x10, 0x9A, 
+	0x02, 0x5A, 0x99, 0x8B, 0x13, 0xB2, 0x00, 0xB2, 0x09, 0x1A, 0xC9, 0xFF, 0x98, 0xF7, 0xFF, 0x42, 
+	0x98, 0x9B, 0x01, 0x1C, 0x27, 0xDA, 0x01, 0x34, 0x01, 0x90, 0x01, 0x98, 0x05, 0xB2, 0xE4, 0xDB, 
+	0xDB, 0x42, 0x84, 0xD0, 0x0D, 0x1C, 0x79, 0x49, 0x50, 0x4B, 0x4F, 0x00, 0xBA, 0x57, 0xD8, 0xD0, 
+	0x04, 0x30, 0x01, 0x9C, 0x01, 0x58, 0x88, 0xDD, 0x03, 0x42, 0xA0, 0x9C, 0x01, 0xE0, 0x00, 0x55, 
+	0xDD, 0x50, 0x8C, 0x9C, 0x03, 0x35, 0x01, 0x42, 0xA3, 0xB2, 0xEB, 0x1C, 0x34, 0xD3, 0xB3, 0x4E, 
+	0x44, 0x25, 0x00, 0x48, 0x44, 0xE0, 0x28, 0xB2, 0x7B, 0x5D, 0x47, 0xD0, 0x21, 0x33, 0x01, 0xB2, 
+	0xFF, 0x00, 0x69, 0x18, 0x71, 0x4B, 0x3E, 0x00, 0x7A, 0x88, 0x89, 0x80, 0x91, 0x18, 0x9A, 0x31, 
+	0x10, 0x1C, 0x29, 0x00, 0x49, 0x1C, 0x3A, 0x32, 0x10, 0x5B, 0x89, 0x52, 0xD1, 0x00, 0x52, 0x1C, 
+	0x10, 0x22, 0x0A, 0x1C, 0x11, 0x43, 0x78, 0x18, 0x1B, 0x43, 0x69, 0x18, 0x71, 0x1C, 0x18, 0x31, 
+	0x3C, 0x30, 0x3C, 0xFC, 0xC8, 0xF0, 0x03, 0x00, 0xAA, 0x4B, 0x34, 0x4B, 0x37, 0x58, 0xD2, 0x50, 
+	0xFA, 0x00, 0xBF, 0xB2, 0xED, 0x35, 0x01, 0x42, 0x9D, 0x68, 0x33, 0xE0, 0x3D, 0xDB, 0xD3, 0x57, 
+	0x33, 0x4E, 0x2D, 0xD1, 0x36, 0x33, 0x01, 0x43, 0x63, 0x23, 0x0A, 0x20, 0x3C, 0x18, 0xEB, 0x2B, 
+	0x00, 0x5E, 0x1B, 0x4B, 0x25, 0xD0, 0x2F, 0x33, 0x04, 0x4A, 0x2E, 0x23, 0x00, 0x7F, 0xDF, 0x4E, 
+	0x29, 0xE0, 0x26, 0x2E, 0x00, 0x5C, 0xF6, 0x26, 0x00, 0xD1, 0x20, 0x28, 0x00, 0x5F, 0x90, 0x4A, 
+	0x21, 0xD1, 0x1C, 0x55, 0x11, 0x00, 0x67, 0x48, 0x1D, 0x49, 0x1E, 0x88, 0xBF, 0x19, 0xCF, 0x18, 
+	0x82, 0x00, 0x5A, 0x1C, 0x27, 0x80, 0x97, 0x1C, 0x1A, 0x37, 0x10, 0x5A, 0x7F, 0x00, 0x7F, 0x00, 
+	0x52, 0x32, 0x10, 0x22, 0x0A, 0x52, 0x17, 0x18, 0xC0, 0x43, 0x53, 0x43, 0x63, 0x1C, 0x13, 0x31, 
+	0x3C, 0x18, 0xC9, 0xF0, 0x03, 0x30, 0x3C, 0xE0, 0x04, 0xFC, 0x87, 0x32, 0x0A, 0x33, 0x01, 0x42, 
+	0xB9, 0xB2, 0xD9, 0x34, 0x01, 0xD3, 0xD5, 0xE0, 0x00, 0xB2, 0xE4, 0x68, 0x2B, 0x4D, 0x0D, 0xDB, 
+	0xBD, 0x42, 0x9C, 0x49, 0x0C, 0x4B, 0x09, 0x7F, 0xDD, 0x33, 0x04, 0x20, 0xFF, 0x4B, 0x12, 0x34, 
+	0x0E, 0x1C, 0x1C, 0x42, 0xAA, 0x78, 0x1A, 0x5C, 0x8A, 0xD2, 0x02, 0xE0, 0x00, 0x70, 0x1A, 0x33, 
+	0x01, 0x70, 0x18, 0xD1, 0xF5, 0x42, 0xA3, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x12, 0x9C, 0x20, 0x00, 0x02, 0x24, 0x20, 0x00, 0x03, 0xE8, 0x20, 0x00, 0x15, 0xF8, 0x7F, 
+	0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x01, 0xEC, 0x20, 0x00, 0x00, 0xF8, 0x20, 
+	0x00, 0x09, 0x80, 0x20, 0x00, 0x12, 0xD8, 0x20, 0x00, 0x02, 0xEC, 0x4B, 0x42, 0xB5, 0xF7, 0x60, 
+	0x19, 0x21, 0x00, 0x24, 0x0A, 0x4B, 0x41, 0x4B, 0x41, 0x60, 0x19, 0x33, 0x04, 0x1C, 0x08, 0x4D, 
+	0x40, 0x7F, 0xDB, 0x46, 0xA4, 0x1C, 0x1A, 0x3A, 0x01, 0xE0, 0x11, 0x1C, 0x26, 0xB2, 0xD2, 0x19, 
+	0xAE, 0x43, 0x56, 0x7A, 0x36, 0x36, 0x38, 0xDA, 0x00, 0x42, 0xB0, 0x46, 0x66, 0x1C, 0x30, 0x19, 
+	0xAE, 0x43, 0x56, 0x5F, 0xF6, 0x27, 0x3C, 0xDA, 0x00, 0x42, 0xB1, 0x2A, 0x00, 0x1C, 0x31, 0x4A, 
+	0x32, 0xD1, 0xEB, 0x60, 0x11, 0x60, 0x50, 0x20, 0x0A, 0x4A, 0x2F, 0x4A, 0x31, 0x68, 0x11, 0x3B, 
+	0x01, 0xE0, 0x07, 0x1C, 0x04, 0xB2, 0xDB, 0x19, 0x14, 0x43, 0x5C, 0x7A, 0x24, 0x34, 0x38, 0x1C, 
+	0x14, 0x19, 0x09, 0xD1, 0xF4, 0x2B, 0x00, 0x60, 0x19, 0x4B, 0x27, 0x2B, 0x00, 0x68, 0x13, 0x4B, 
+	0x26, 0xDD, 0x0F, 0x68, 0x5B, 0x4A, 0x28, 0x80, 0x53, 0x80, 0x11, 0x78, 0x1B, 0x4B, 0x27, 0xD0, 
+	0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x1D, 0x93, 0x00, 0xAE, 0x29, 0xAE, 0xF1, 0x0A, 
+	0xF0, 0x01, 0x1C, 0x0B, 0x68, 0x23, 0xFB, 0x8F, 0xDD, 0x19, 0x2B, 0x00, 0x23, 0x08, 0x4A, 0x21, 
+	0x4B, 0x21, 0x5E, 0xD1, 0x5F, 0x12, 0x24, 0x0C, 0x33, 0x3D, 0x1C, 0x18, 0x30, 0x3C, 0x78, 0x1B, 
+	0x78, 0x00, 0x43, 0x53, 0x18, 0xC3, 0x11, 0x9B, 0xDC, 0x09, 0x42, 0x99, 0x78, 0x1B, 0x4B, 0x18, 
+	0xD0, 0x03, 0x2B, 0x00, 0x49, 0x19, 0x20, 0x00, 0xFB, 0xCC, 0xF0, 0x01, 0xFE, 0x40, 0xF7, 0xFF, 
+	0x4A, 0x17, 0x4B, 0x11, 0x78, 0x12, 0x68, 0x1B, 0xDB, 0x12, 0x42, 0x93, 0x4A, 0x12, 0x4B, 0x0B, 
+	0x8E, 0xD1, 0x68, 0x18, 0x42, 0x88, 0x4B, 0x0A, 0x8F, 0x11, 0xDB, 0x03, 0x42, 0x88, 0x68, 0x58, 
+	0x8F, 0x52, 0xDA, 0x03, 0x42, 0x93, 0x68, 0x5B, 0x4B, 0x0E, 0xDB, 0x07, 0x70, 0x1A, 0x22, 0x01, 
+	0x2B, 0x00, 0xE0, 0x03, 0x4A, 0x0B, 0xD1, 0x01, 0xBD, 0xF7, 0x70, 0x13, 0x20, 0x00, 0x16, 0x4C, 
+	0x20, 0x00, 0x02, 0x0C, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x16, 0x54, 
+	0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x12, 0x48, 0x00, 0x00, 0x61, 0x24, 
+	0x20, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0xF5, 0x1C, 0x04, 0xB5, 0x38, 0x2A, 0x00, 0x1C, 0x08, 
+	0x43, 0x54, 0xD0, 0x07, 0x18, 0xD1, 0x43, 0x58, 0x10, 0x4D, 0x18, 0x20, 0xF0, 0x03, 0x19, 0x40, 
+	0xBD, 0x38, 0xFB, 0x43, 0x1A, 0x43, 0xB5, 0x10, 0x19, 0x1B, 0x17, 0xDC, 0xF7, 0xFF, 0x40, 0x63, 
+	0xBD, 0x10, 0xFF, 0xEB, 0x4B, 0xA9, 0xB5, 0xF0, 0x33, 0x04, 0x25, 0x00, 0x7F, 0xDC, 0xB0, 0x87, 
+	0xE0, 0x46, 0x1C, 0x2E, 0xB2, 0xE4, 0x3C, 0x01, 0x43, 0x62, 0x22, 0x0A, 0x31, 0x38, 0x18, 0x99, 
+	0x28, 0x00, 0x88, 0x88, 0x4F, 0xA2, 0xD0, 0x3D, 0x2F, 0x00, 0x5D, 0x3F, 0x49, 0xA1, 0xD1, 0x2A, 
+	0x29, 0x00, 0x78, 0x09, 0x18, 0x9A, 0xD0, 0x07, 0x32, 0x3C, 0x21, 0x01, 0x23, 0x02, 0x20, 0x1D, 
+	0xF0, 0x01, 0x91, 0x00, 0x20, 0x0A, 0xFB, 0x07, 0x4B, 0x9B, 0x43, 0x60, 0x18, 0x18, 0x49, 0x9B, 
+	0x5F, 0xC2, 0x27, 0x3C, 0x46, 0x94, 0x30, 0x38, 0x5F, 0xCA, 0x27, 0x26, 0x45, 0x94, 0x1C, 0x1F, 
+	0x31, 0x4E, 0xDB, 0x08, 0x49, 0x96, 0x78, 0x0A, 0x68, 0x49, 0x7A, 0x00, 0x11, 0x92, 0x43, 0x4A, 
+	0xDA, 0x16, 0x42, 0x90, 0x43, 0x62, 0x22, 0x0A, 0x87, 0xD5, 0x18, 0xBA, 0x72, 0x16, 0x32, 0x38, 
+	0xE0, 0x08, 0x80, 0x95, 0xB2, 0x00, 0x4A, 0x8D, 0x5F, 0xD2, 0x27, 0x28, 0xDD, 0x08, 0x42, 0x82, 
+	0x72, 0x0E, 0x80, 0xCD, 0x4A, 0x8B, 0x80, 0x8D, 0x50, 0x8D, 0x00, 0xA1, 0x3A, 0x01, 0x68, 0x1A, 
+	0x4B, 0x85, 0x60, 0x1A, 0xD1, 0xB5, 0x2C, 0x00, 0x4B, 0x87, 0x60, 0x1C, 0x4B, 0x7F, 0x73, 0x9C, 
+	0x7F, 0xDC, 0x33, 0x04, 0x3C, 0x01, 0xE0, 0xC7, 0x23, 0x0A, 0xB2, 0xE4, 0x18, 0xED, 0x43, 0x63, 
+	0x35, 0x38, 0x8F, 0xAA, 0xD1, 0x00, 0x2A, 0x00, 0x4B, 0x7C, 0xE0, 0x93, 0x8D, 0x1B, 0xB2, 0x12, 
+	0x1A, 0x52, 0xB2, 0x19, 0x00, 0x5B, 0x10, 0x52, 0x80, 0xAB, 0x18, 0xD3, 0x7B, 0x9A, 0x4B, 0x7A, 
+	0xD1, 0x0D, 0x2A, 0x00, 0x57, 0x12, 0x4A, 0x79, 0xD1, 0x09, 0x2A, 0x00, 0x21, 0x01, 0x4A, 0x78, 
+	0x22, 0x80, 0x70, 0x11, 0x69, 0x50, 0x05, 0xD2, 0x06, 0x00, 0x0E, 0x00, 0x61, 0x51, 0x43, 0x01, 
+	0x73, 0x9A, 0x22, 0x01, 0x4B, 0x71, 0x4E, 0x73, 0x78, 0x33, 0x57, 0x1A, 0xDB, 0x70, 0x42, 0x9A, 
+	0x78, 0x1A, 0x4B, 0x6F, 0xD0, 0x01, 0x2A, 0x00, 0x70, 0x1A, 0x22, 0x00, 0x00, 0x62, 0x4D, 0x66, 
+	0x33, 0x01, 0x68, 0x2B, 0x18, 0xAB, 0x60, 0x2B, 0x5F, 0xD9, 0x27, 0x04, 0x18, 0x9A, 0x4B, 0x6A, 
+	0x5F, 0x90, 0x26, 0x04, 0x32, 0x10, 0x1C, 0x22, 0x5F, 0x57, 0x00, 0x52, 0x5E, 0xD7, 0x97, 0x03, 
+	0x17, 0xD3, 0x1A, 0x0A, 0x18, 0xD2, 0x9E, 0x03, 0x1B, 0xF3, 0x40, 0x5A, 0x19, 0x9B, 0x17, 0xDE, 
+	0x18, 0xD3, 0x40, 0x73, 0x4B, 0x59, 0x93, 0x04, 0x5E, 0x9E, 0x22, 0x2E, 0x1C, 0x32, 0x9B, 0x04, 
+	0xF7, 0xFF, 0x96, 0x05, 0x9A, 0x05, 0xFF, 0x39, 0x1C, 0x06, 0x9B, 0x04, 0x1C, 0x38, 0x99, 0x03, 
+	0xFF, 0x32, 0xF7, 0xFF, 0x1C, 0x13, 0x4A, 0x4D, 0x78, 0x1B, 0x33, 0x2D, 0xB2, 0x5B, 0x1C, 0x2A, 
+	0xDD, 0x07, 0x42, 0x9E, 0x69, 0xC9, 0x49, 0x55, 0x42, 0xBE, 0x1A, 0xCF, 0x1E, 0x4E, 0xDB, 0x03, 
+	0xE0, 0x00, 0x1A, 0xF6, 0x4B, 0x45, 0x1C, 0x1E, 0x78, 0x1B, 0x33, 0x2E, 0x42, 0x98, 0xB2, 0x5B, 
+	0x49, 0x4E, 0xDD, 0x07, 0x1A, 0xCF, 0x6A, 0x09, 0xDB, 0x03, 0x42, 0xB8, 0x1A, 0xC0, 0x1E, 0x48, 
+	0x1C, 0x18, 0xE0, 0x00, 0x18, 0xD3, 0x00, 0x63, 0x1C, 0x23, 0x80, 0x9E, 0x00, 0x5B, 0x33, 0x10, 
+	0x25, 0x0A, 0x52, 0xE8, 0x4B, 0x3D, 0x43, 0x65, 0x20, 0x30, 0x4E, 0x43, 0x19, 0x76, 0x5E, 0x1F, 
+	0x21, 0x3C, 0x19, 0x55, 0x22, 0x3C, 0x5E, 0x70, 0x1C, 0x3A, 0x5E, 0xA9, 0xFF, 0x0A, 0xF7, 0xFF, 
+	0x87, 0xA8, 0x36, 0x38, 0x7A, 0x30, 0x35, 0x38, 0x1C, 0x3A, 0x7A, 0x29, 0xFF, 0x02, 0xF7, 0xFF, 
+	0x4B, 0x31, 0x72, 0x28, 0x18, 0x99, 0x00, 0x62, 0x88, 0x89, 0x48, 0x37, 0x80, 0x91, 0x18, 0x82, 
+	0x32, 0x10, 0x1C, 0x22, 0x5A, 0xD1, 0x00, 0x52, 0x22, 0x0A, 0x52, 0x11, 0x43, 0x61, 0x1C, 0x11, 
+	0x18, 0x59, 0x18, 0x40, 0x30, 0x3C, 0x1C, 0x0D, 0xF0, 0x03, 0x31, 0x3C, 0x23, 0x3C, 0xFA, 0x8F, 
+	0x35, 0x38, 0x5E, 0xEA, 0x2A, 0x00, 0x4B, 0x29, 0x49, 0x24, 0xD0, 0x0C, 0x31, 0x32, 0x5D, 0x1A, 
+	0xB2, 0x50, 0x78, 0x09, 0xDA, 0x06, 0x42, 0x88, 0x55, 0x1A, 0x32, 0x01, 0x42, 0x5B, 0x23, 0x01, 
+	0xE0, 0x00, 0x80, 0xAB, 0x4D, 0x1C, 0x55, 0x1A, 0xD0, 0x00, 0x2C, 0x00, 0x4E, 0x22, 0xE7, 0x33, 
+	0x68, 0x32, 0x68, 0x29, 0x42, 0x91, 0x4B, 0x22, 0x68, 0x19, 0xDA, 0x25, 0x31, 0x01, 0x48, 0x17, 
+	0x30, 0x3E, 0x60, 0x19, 0xB2, 0x40, 0x78, 0x00, 0xDA, 0x1C, 0x42, 0x81, 0x60, 0x2A, 0x4B, 0x0F, 
+	0x7F, 0xDC, 0x33, 0x04, 0x3C, 0x01, 0xE0, 0x14, 0x00, 0x63, 0xB2, 0xE4, 0x88, 0x92, 0x18, 0xF2, 
+	0x80, 0x9A, 0x18, 0xEB, 0x33, 0x10, 0x1C, 0x23, 0x5B, 0x9A, 0x00, 0x5B, 0x22, 0x0A, 0x53, 0x5A, 
+	0x43, 0x61, 0x1C, 0x11, 0x18, 0x71, 0x18, 0x68, 0x31, 0x3C, 0x30, 0x3C, 0xFA, 0x4E, 0xF0, 0x03, 
+	0xD1, 0xE8, 0x2C, 0x00, 0x60, 0x1C, 0xE0, 0x00, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x09, 0xAE, 
+	0x20, 0x00, 0x01, 0xEC, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x12, 0x48, 
+	0x20, 0x00, 0x02, 0x0C, 0x20, 0x00, 0x00, 0xF8, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x16, 0x3E, 
+	0x20, 0x00, 0x01, 0xE2, 0x20, 0x00, 0x12, 0x7A, 0x20, 0x00, 0x03, 0x20, 0x20, 0x00, 0x09, 0x24, 
+	0x20, 0x00, 0x01, 0x60, 0x4B, 0x31, 0xB5, 0xF0, 0x78, 0x1E, 0x4D, 0x31, 0x27, 0x00, 0x4B, 0x31, 
+	0x60, 0x2F, 0x1C, 0x1A, 0x78, 0x12, 0x32, 0x2B, 0x92, 0x04, 0xB0, 0x89, 0x1C, 0x1A, 0x00, 0x50, 
+	0x32, 0x32, 0x90, 0x06, 0x92, 0x07, 0x78, 0x12, 0x5E, 0x99, 0x22, 0x30, 0x91, 0x05, 0x68, 0x6B, 
+	0x97, 0x03, 0x93, 0x02, 0x3E, 0x01, 0xE0, 0x42, 0x1D, 0x33, 0xB2, 0xF6, 0x93, 0x01, 0x00, 0x5B, 
+	0x2B, 0x00, 0x5A, 0xEB, 0x98, 0x04, 0xD0, 0x34, 0x1A, 0x1B, 0xB2, 0x1B, 0x10, 0x5B, 0x99, 0x06, 
+	0xFB, 0xC5, 0xAE, 0xF1, 0x0B, 0x9A, 0x01, 0x18, 0xCB, 0xB2, 0x9B, 0x48, 0x20, 0x00, 0xF2, 0x52, 
+	0xAB, 0x18, 0x84, 0x58, 0x81, 0xB2, 0x1B, 0x98, 0x07, 0xDA, 0x07, 0x42, 0x81, 0x31, 0x01, 0x48, 
+	0x1B, 0x99, 0x01, 0x50, 0x81, 0x60, 0x63, 0x22, 0x00, 0xE0, 0x21, 0x52, 0x6A, 0x37, 0x01, 0x68, 
+	0x60, 0x17, 0xD1, 0x1A, 0x1A, 0x18, 0x50, 0x46, 0x84, 0x40, 0x48, 0x9A, 0x05, 0x90, 0x00, 0x18, 
+	0x11, 0x43, 0x42, 0x46, 0x60, 0x9A, 0x00, 0x46, 0x94, 0x46, 0x62, 0x43, 0x53, 0x10, 0x4B, 0x18, 
+	0xD0, 0xF0, 0x03, 0x18, 0xC0, 0x9B, 0x01, 0xF9, 0x7B, 0x60, 0x60, 0x99, 0x03, 0x42, 0x81, 0x52, 
+	0xE8, 0xE0, 0x05, 0xDB, 0x04, 0x00, 0xF2, 0x48, 0x09, 0xE0, 0x01, 0x50, 0x83, 0x90, 0x03, 0x96, 
+	0x02, 0xD1, 0xBA, 0x2E, 0x00, 0xB0, 0x09, 0x99, 0x02, 0x60, 0x69, 0x60, 0x2F, 0x46, 0xC0, 0xBD, 
+	0xF0, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x09, 
+	0x48, 0x4B, 0x27, 0xB5, 0xF7, 0x33, 0x04, 0x49, 0x27, 0x4A, 0x27, 0x7F, 0xDB, 0xE0, 0x42, 0x48, 
+	0x27, 0xB2, 0xDB, 0x3B, 0x01, 0x34, 0x14, 0x1C, 0x1C, 0x19, 0x04, 0x00, 0x64, 0x5F, 0x64, 0x25, 
+	0x04, 0xD0, 0x27, 0x2C, 0x00, 0x43, 0x5C, 0x24, 0x0A, 0x26, 0x3C, 0x19, 0x0C, 0x2C, 0x00, 0x5F, 
+	0xA4, 0x00, 0x5C, 0xD0, 0x20, 0x88, 0xB6, 0x19, 0x0E, 0xB2, 0x37, 0x19, 0x05, 0x27, 0x04, 0x46, 
+	0xBC, 0x46, 0x65, 0x5F, 0xEF, 0x10, 0x6F, 0x1B, 0xED, 0x19, 0x14, 0x19, 0xBE, 0x1C, 0x1C, 0x80, 
+	0xA6, 0x00, 0x64, 0x34, 0x10, 0x1C, 0x1C, 0x5B, 0x0E, 0xB2, 0x37, 0x34, 0x0C, 0x46, 0xBC, 0x00, 
+	0x64, 0x46, 0x67, 0x5E, 0x25, 0x10, 0x7F, 0x1B, 0x7F, 0x52, 0xA6, 0x19, 0xBE, 0x26, 0x01, 0x4C, 
+	0x10, 0xE0, 0x10, 0x54, 0xE6, 0x00, 0x5C, 0x4D, 0x0B, 0x88, 0xB6, 0x19, 0x2E, 0x80, 0xA6, 0x19, 
+	0x14, 0x36, 0x10, 0x1C, 0x1E, 0x00, 0x76, 0x1C, 0x1C, 0x34, 0x0C, 0x5B, 0x76, 0x53, 0x16, 0x00, 
+	0x64, 0x26, 0x00, 0x4C, 0x07, 0x2B, 0x00, 0x54, 0xE6, 0x68, 0x0B, 0xD1, 0xBA, 0xBD, 0xF7, 0x60, 
+	0x13, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x09, 0x80, 0x20, 0x00, 0x01, 
+	0x20, 0x20, 0x00, 0x01, 0xEC, 0x4A, 0x35, 0xB5, 0xF7, 0x1C, 0x11, 0x4B, 0x35, 0x32, 0x34, 0x31, 
+	0x33, 0x78, 0x12, 0x78, 0x0E, 0x7F, 0xDB, 0x33, 0x04, 0x92, 0x01, 0x49, 0x32, 0x4A, 0x32, 0x46, 
+	0xB4, 0x48, 0x32, 0xE0, 0x4B, 0xB2, 0xDB, 0x3B, 0x01, 0x98, 0x01, 0x5C, 0xC4, 0xD1, 0x00, 0x2C, 
+	0x00, 0x00, 0x5E, 0x46, 0x60, 0x19, 0x96, 0x19, 0x8D, 0x5F, 0xF6, 0x27, 0x04, 0x96, 0x00, 0x88, 
+	0xAD, 0xB2, 0x2E, 0x9F, 0x00, 0x17, 0xF7, 0x1B, 0xBE, 0x40, 0x7E, 0x19, 0xF6, 0xDA, 0x10, 0x42, 
+	0x86, 0x36, 0x0C, 0x1C, 0x1E, 0x5E, 0xB6, 0x00, 0x76, 0x37, 0x10, 0x1C, 0x1F, 0x00, 0x7F, 0x96, 
+	0x00, 0x9E, 0x00, 0x5F, 0xCF, 0x17, 0xFE, 0x1B, 0xF7, 0x40, 0x77, 0x19, 0xBF, 0x42, 0x87, 0x97, 
+	0x00, 0x00, 0x58, 0xDB, 0x18, 0x1C, 0x1E, 0x18, 0x10, 0x36, 0x10, 0x80, 0x85, 0x1C, 0x18, 0x4D, 
+	0x19, 0x30, 0x0C, 0x00, 0x76, 0x00, 0x40, 0x5B, 0x75, 0x1C, 0x18, 0x52, 0x15, 0x00, 0x40, 0x30, 
+	0x14, 0x27, 0x04, 0x18, 0x10, 0x28, 0x00, 0x5F, 0xC0, 0x2C, 0x00, 0xDD, 0x04, 0x48, 0x13, 0xD1, 
+	0x02, 0x54, 0xC4, 0x24, 0x01, 0x43, 0x5C, 0x24, 0x0A, 0x1C, 0x18, 0x4D, 0x0E, 0x30, 0x14, 0x19, 
+	0x2C, 0x00, 0x40, 0x4D, 0x0D, 0x18, 0x28, 0x8F, 0xA4, 0x2B, 0x00, 0x80, 0x84, 0x68, 0x0A, 0xD1, 
+	0xB1, 0x49, 0x0B, 0x4B, 0x09, 0x4B, 0x0B, 0x60, 0x1A, 0x4B, 0x0B, 0x78, 0x1A, 0x4A, 0x0B, 0x70, 
+	0x1A, 0xCA, 0x31, 0x1C, 0x0B, 0xCA, 0xC0, 0xC3, 0x31, 0xBD, 0xF7, 0xC3, 0xC0, 0x20, 0x00, 0x12, 
+	0x48, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x01, 
+	0x64, 0x20, 0x00, 0x00, 0xCC, 0x20, 0x00, 0x00, 0xF5, 0x20, 0x00, 0x00, 0xF4, 0x20, 0x00, 0x00, 
+	0xE0, 0x48, 0x19, 0xB5, 0xF7, 0x42, 0x5B, 0x23, 0x01, 0x4B, 0x18, 0x60, 0x43, 0x4B, 0x18, 0x78, 
+	0x1A, 0x33, 0x2B, 0x1C, 0x19, 0x31, 0x2A, 0x78, 0x1E, 0x23, 0x00, 0x78, 0x0F, 0xE0, 0x1E, 0x46, 
+	0xB4, 0xB2, 0xD2, 0x3A, 0x01, 0x00, 0x51, 0x4C, 0x13, 0xB2, 0x0E, 0x5A, 0x61, 0x17, 0xF6, 0x43, 
+	0xF6, 0x1D, 0x11, 0x40, 0x0E, 0xB2, 0xB5, 0x00, 0x49, 0x2D, 0x00, 0x52, 0x0E, 0x4E, 0x0E, 0xD0, 
+	0x0F, 0x5F, 0x8E, 0xB2, 0x2D, 0xDC, 0x04, 0x2E, 0x00, 0xDA, 0x07, 0x42, 0xBD, 0x52, 0x0D, 0x25, 
+	0x00, 0x45, 0x65, 0xE0, 0x05, 0x26, 0x00, 0xDA, 0x02, 0xE0, 0x00, 0x52, 0x0E, 0x2A, 0x00, 0x33, 
+	0x01, 0x4A, 0x01, 0xD1, 0xDE, 0xBD, 0xF7, 0x60, 0x13, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 
+	0x7C, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x12, 0x3C, 0x20, 0x00, 0x00, 0xCC, 0x80, 0x08, 0xF3, 
+	0xEF, 0xBA, 0x00, 0x47, 0x70, 0xBA, 0x40, 0x47, 0x70, 0xBA, 0xC0, 0x47, 0x70, 0xB5, 0x70, 0x47, 
+	0x70, 0xDA, 0x16, 0x28, 0x00, 0x23, 0x0F, 0xB2, 0xC0, 0x3B, 0x08, 0x40, 0x03, 0x08, 0x9B, 0x4A, 
+	0x12, 0x18, 0x9B, 0x00, 0x9B, 0x40, 0x10, 0x22, 0x03, 0x22, 0xFF, 0x40, 0x90, 0x1C, 0x14, 0x68, 
+	0x5D, 0x01, 0x89, 0x40, 0x84, 0x40, 0x0A, 0x43, 0xA5, 0x1C, 0x28, 0x40, 0x82, 0x60, 0x58, 0x43, 
+	0x10, 0x24, 0x03, 0xE0, 0x11, 0x4B, 0x09, 0x08, 0x82, 0x32, 0xC0, 0x40, 0x20, 0x00, 0x92, 0x40, 
+	0xA0, 0x58, 0xD5, 0x24, 0xFF, 0x40, 0x86, 0x1C, 0x26, 0x43, 0xB5, 0x01, 0x89, 0x40, 0x84, 0x40, 
+	0x0C, 0x43, 0x20, 0x1C, 0x28, 0xBD, 0x70, 0x50, 0xD0, 0xE0, 0x00, 0xED, 0x18, 0xE0, 0x00, 0xE1, 
+	0x00, 0x22, 0x40, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 
+	0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 
+	0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x3F, 0x4B, 0x07, 0x20, 0x7F, 0x68, 
+	0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 
+	0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4A, 0x08, 0x4B, 
+	0x07, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x89, 0x04, 0x89, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 
+	0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 
+	0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x40, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 
+	0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 
+	0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 
+	0xFF, 0x22, 0x20, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 
+	0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 
+	0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x5F, 0x4B, 0x07, 0x20, 0x7F, 0x68, 
+	0x19, 0x68, 0x1A, 0x40, 0x11, 0x17, 0x2D, 0xAE, 0xF1, 0x0C, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x00, 0x08, 0x21, 0xBE, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 
+	0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x20, 0x4B, 0x08, 0x68, 0x18, 
+	0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x00, 0x80, 0x6C, 0x18, 0x47, 0x70, 
+	0x0F, 0xC0, 0x22, 0x10, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 
+	0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x6F, 0x4B, 0x07, 0x20, 0x7F, 
+	0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 
+	0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4B, 0x0B, 
+	0xB5, 0x00, 0x28, 0x00, 0x68, 0x19, 0x06, 0x49, 0xD0, 0x04, 0x22, 0x10, 0x0E, 0x49, 0xE0, 0x01, 
+	0x43, 0x11, 0x40, 0x11, 0x22, 0x6F, 0x20, 0x7F, 0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 
+	0x00, 0x08, 0x21, 0xDE, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 
+	0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 
+	0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x10, 0x4B, 0x08, 0x68, 0x18, 
+	0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x00, 0xC0, 0x6C, 0x18, 0x47, 0x70, 
+	0x0F, 0xC0, 0x22, 0x01, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 
+	0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x7E, 0x4B, 0x07, 0x20, 0x7F, 
+	0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 
+	0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x21, 0xFC, 
+	0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x01, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 
+	0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 
+	0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 
+	0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0xC0, 0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x02, 
+	0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 
+	0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x7D, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 
+	0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x21, 0xFA, 0x4B, 0x07, 0x01, 0xC9, 
+	0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 
+	0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 
+	0x80, 0xFF, 0x22, 0x02, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 
+	0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 
+	0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 
+	0x23, 0x80, 0x01, 0x80, 0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x04, 0x4B, 0x08, 0x20, 0x7F, 
+	0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 
+	0x00, 0x08, 0x22, 0x7B, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 
+	0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4B, 0x0B, 0xB5, 0x00, 0x28, 0x00, 0x68, 0x19, 0x06, 0x49, 
+	0xD0, 0x04, 0x22, 0x04, 0x0E, 0x49, 0xE0, 0x01, 0x43, 0x11, 0x40, 0x11, 0x22, 0x7B, 0x20, 0x7F, 
+	0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x08, 0x21, 0xF6, 0x4B, 0x07, 0x01, 0xC9, 
+	0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 
+	0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 
+	0x80, 0xFF, 0x22, 0x04, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 0x06, 
+	0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 
+	0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 0xDB, 
+	0x23, 0x80, 0x01, 0x40, 0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x23, 0x80, 0xB5, 0x10, 0x1D, 0x04, 
+	0x05, 0xDB, 0x22, 0x3F, 0x69, 0x98, 0x43, 0x90, 0x40, 0x14, 0x24, 0x01, 0x43, 0x20, 0x1C, 0x88, 
+	0x61, 0x98, 0x18, 0x41, 0x40, 0x21, 0x02, 0x11, 0x40, 0x0A, 0x4A, 0x02, 0x69, 0x98, 0x43, 0x0A, 
+	0x40, 0x02, 0xBD, 0x10, 0x61, 0x9A, 0xFF, 0xFF, 0xC0, 0xFF, 0x22, 0x7F, 0x4B, 0x06, 0x23, 0x80, 
+	0x68, 0x19, 0x6C, 0x18, 0x05, 0xDB, 0x43, 0x90, 0x39, 0x01, 0x1C, 0x02, 0x40, 0x11, 0x64, 0x1A, 
+	0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x09, 0x18, 0x05, 0xDB, 0x23, 0x80, 0x21, 0x7F, 
+	0x6C, 0x1A, 0x21, 0x01, 0x43, 0x8A, 0x64, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x47, 0x70, 0x69, 0xDA, 
+	0x05, 0xDB, 0x43, 0x8A, 0x21, 0x0F, 0x43, 0x0A, 0x21, 0x02, 0xDA, 0x6C, 0xAE, 0xF1, 0x0D, 0x69, 
+	0xDA, 0x61, 0xDA, 0x43, 0x8A, 0x21, 0xF0, 0x43, 0x0A, 0x21, 0x30, 0x4A, 0x0C, 0x61, 0xDA, 0x39, 
+	0x01, 0x79, 0x11, 0x77, 0x59, 0xB2, 0xC9, 0x49, 0x0A, 0x69, 0xD8, 0x20, 0x80, 0x40, 0x01, 0x43, 
+	0x01, 0x02, 0xC0, 0x69, 0xD8, 0x61, 0xD9, 0x40, 0x01, 0x49, 0x07, 0x03, 0xC0, 0x20, 0xA0, 0x61, 
+	0xD9, 0x43, 0x01, 0x3A, 0x01, 0x79, 0x92, 0x77, 0xDA, 0xB2, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x02, 0x04, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0x4A, 0x1A, 0xB5, 0x30, 0x88, 
+	0x11, 0x4B, 0x1A, 0x18, 0xC9, 0x4C, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x8C, 0x18, 0xB2, 0x89, 0x8C, 
+	0x59, 0x84, 0x19, 0x84, 0x59, 0x21, 0x00, 0x4D, 0x16, 0x88, 0x50, 0xB2, 0x89, 0x19, 0x01, 0x84, 
+	0x99, 0x8C, 0x9A, 0x8C, 0xDC, 0x1E, 0x42, 0x19, 0x44, 0xB2, 0x92, 0xB2, 0xA4, 0x84, 0xDA, 0x85, 
+	0x1C, 0x8D, 0x1D, 0x19, 0x00, 0x4C, 0x10, 0x8D, 0x5C, 0xB2, 0x80, 0x8D, 0x98, 0x85, 0x58, 0x8D, 
+	0xD8, 0x85, 0x99, 0x8E, 0x18, 0x85, 0xDA, 0x8E, 0x58, 0x86, 0x19, 0x8E, 0x98, 0x86, 0x5A, 0x8E, 
+	0xD8, 0x86, 0x99, 0x8F, 0x18, 0x86, 0xDA, 0x8F, 0x58, 0x87, 0x19, 0x8F, 0x98, 0x87, 0x5A, 0x8F, 
+	0xD9, 0x87, 0x99, 0xBD, 0x30, 0x87, 0xDA, 0x20, 0x00, 0x02, 0x04, 0x00, 0x00, 0x07, 0xFF, 0x00, 
+	0x00, 0x03, 0xFF, 0x00, 0x00, 0x05, 0xFF, 0x00, 0x00, 0x01, 0xFF, 0x4B, 0x22, 0xB5, 0x30, 0x68, 
+	0x1A, 0x24, 0xEE, 0x40, 0x14, 0x01, 0xE4, 0x68, 0x1A, 0x48, 0x20, 0x40, 0x02, 0x21, 0x7F, 0x60, 
+	0x1A, 0x43, 0x22, 0x22, 0x80, 0x68, 0x1C, 0x69, 0x15, 0x05, 0xD2, 0x4C, 0x1C, 0x61, 0x14, 0x2C, 
+	0x00, 0x7C, 0xA4, 0x68, 0x1C, 0xD0, 0x16, 0x04, 0x64, 0x25, 0x04, 0x43, 0x2C, 0x0E, 0x64, 0x40, 
+	0x0C, 0x68, 0x1D, 0x40, 0x28, 0x02, 0x24, 0x60, 0x18, 0x43, 0x20, 0x69, 0x14, 0x68, 0x18, 0x68, 
+	0x1C, 0x61, 0x10, 0x40, 0x20, 0x20, 0x7B, 0x43, 0x8C, 0x68, 0x1C, 0x43, 0x01, 0x1C, 0x21, 0xE0, 
+	0x15, 0x60, 0x19, 0x25, 0x04, 0x68, 0x1C, 0x0E, 0x64, 0x06, 0x64, 0x68, 0x1D, 0x43, 0x2C, 0x43, 
+	0x8D, 0x40, 0x0C, 0x43, 0x21, 0x1C, 0x29, 0x68, 0x19, 0x60, 0x19, 0x61, 0x11, 0x69, 0x14, 0x21, 
+	0xF6, 0x68, 0x1C, 0x40, 0x21, 0x01, 0xC9, 0x40, 0x20, 0x68, 0x1C, 0x60, 0x18, 0x43, 0x08, 0x69, 
+	0x11, 0x68, 0x1B, 0xBD, 0x30, 0x61, 0x13, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x20, 
+	0x00, 0x09, 0xAE, 0xB6, 0x72, 0xB5, 0x00, 0x22, 0x01, 0x4B, 0x0F, 0x4B, 0x0F, 0x70, 0x1A, 0x4B, 
+	0x0F, 0x7C, 0x9A, 0xD0, 0x07, 0x2A, 0x00, 0x21, 0xF6, 0x68, 0x1A, 0x40, 0x11, 0x01, 0xC9, 0x4A, 
+	0x0C, 0x68, 0x18, 0xE0, 0x05, 0x40, 0x02, 0x22, 0x7B, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 
+	0x82, 0x20, 0x7F, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0xB6, 
+	0x62, 0x61, 0x1A, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x64, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0xB6, 0x72, 0xB5, 0x00, 0x22, 0x00, 0x4B, 0x10, 0x4B, 
+	0x10, 0x70, 0x1A, 0x4B, 0x10, 0x7C, 0x9A, 0x2A, 0x00, 0x68, 0x19, 0x04, 0x49, 0xD0, 0x08, 0x0E, 
+	0x49, 0x22, 0x04, 0x68, 0x18, 0x43, 0x11, 0x02, 0x09, 0x4A, 0x0C, 0xE0, 0x06, 0x40, 0x02, 0x22, 
+	0x04, 0x06, 0x49, 0x43, 0x11, 0x0E, 0x49, 0x20, 0x7F, 0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 
+	0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0xBD, 0x00, 0xB6, 0x62, 0x20, 
+	0x00, 0x00, 0x64, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x78, 
+	0x18, 0x4B, 0x01, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x64, 0x23, 0x80, 0xB5, 0x00, 0x6C, 
+	0x19, 0x05, 0xDB, 0x01, 0xD2, 0x22, 0x80, 0x64, 0x1A, 0x43, 0x0A, 0x21, 0x80, 0x4A, 0x23, 0x00, 
+	0x49, 0x68, 0x10, 0x60, 0x11, 0x43, 0x01, 0x68, 0x99, 0x68, 0x12, 0x6C, 0x19, 0x60, 0x9A, 0x02, 
+	0x12, 0x22, 0x80, 0x64, 0x1A, 0x43, 0x0A, 0x4A, 0x1D, 0x6C, 0x19, 0x64, 0x1A, 0x40, 0x0A, 0x22, 
+	0x7F, 0x4B, 0x1C, 0x4B, 0x1C, 0x7B, 0x59, 0x68, 0x18, 0x40, 0x11, 0x04, 0x09, 0x4A, 0x1B, 0x43, 
+	0x0A, 0x40, 0x02, 0x68, 0x19, 0x60, 0x1A, 0x05, 0xD2, 0x22, 0xA0, 0x60, 0x91, 0x68, 0x90, 0x49, 
+	0x17, 0x68, 0x18, 0x20, 0x84, 0x40, 0x01, 0x43, 0x01, 0x05, 0xC0, 0x68, 0x19, 0x60, 0x19, 0x60, 
+	0x91, 0x68, 0x90, 0x78, 0x09, 0x49, 0x13, 0x29, 0x00, 0xB2, 0x49, 0x29, 0x01, 0xD0, 0x02, 0xE0, 
+	0x03, 0xD1, 0x0C, 0x49, 0x10, 0x68, 0x18, 0xE0, 0x03, 0x40, 0x01, 0x21, 0x80, 0x68, 0x18, 0x43, 
+	0x01, 0x04, 0x09, 0x68, 0x1B, 0x60, 0x19, 0x60, 0x93, 0x68, 0x91, 0x05, 0xDB, 0x23, 0x80, 0x4A, 
+	0x0A, 0x6C, 0x19, 0x64, 0x1A, 0x40, 0x0A, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x14, 0xFF, 
+	0xFF, 0x7F, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0x80, 0xFF, 0xFF, 0x80, 
+	0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x02, 0xFA, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0x22, 
+	0x01, 0x4B, 0x04, 0x23, 0x80, 0x70, 0x1A, 0x6C, 0x99, 0x05, 0xDB, 0x64, 0x99, 0x43, 0x91, 0x47, 
+	0x70, 0x70, 0x1A, 0x20, 0x00, 0x00, 0x00, 0x23, 0x01, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x13, 0x70, 
+	0x53, 0x05, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x02, 0x4B, 0x06, 0xB5, 0x00, 0x78, 
+	0x1A, 0xB6, 0x72, 0xD0, 0x04, 0x2A, 0x00, 0x46, 0xC0, 0x46, 0xC0, 0xBF, 0x30, 0xB6, 0x62, 0xB6, 
+	0x62, 0xE7, 0xF6, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x02, 0x4B, 0x09, 0xB5, 0x38, 0x78, 
+	0x9A, 0x49, 0x09, 0x43, 0x51, 0x79, 0x1C, 0x1C, 0x05, 0x4B, 0x08, 0x48, 0x08, 0x18, 0xC9, 0xFC, 
+	0x02, 0xF0, 0x02, 0x1C, 0x29, 0x4B, 0x06, 0x43, 0x58, 0x34, 0x01, 0xF0, 0x02, 0x40, 0xA1, 0xBD, 
+	0x38, 0xFB, 0xFB, 0x20, 0x00, 0x0A, 0xAA, 0xFF, 0xFF, 0xFE, 0x44, 0x00, 0x02, 0x24, 0xFE, 0x00, 
+	0x0F, 0x42, 0x40, 0x68, 0x19, 0x4B, 0x05, 0x05, 0xDB, 0x23, 0x80, 0x02, 0x09, 0x69, 0x5A, 0x0A, 
+	0x09, 0x0E, 0x12, 0x43, 0x0A, 0x06, 0x12, 0x47, 0x70, 0x61, 0x5A, 0x20, 0x00, 0x00, 0x04, 0x60, 
+	0x18, 0x4B, 0x01, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x04, 0x22, 0x01, 0x4B, 0x05, 0x23, 
+	0x80, 0x70, 0x1A, 0x69, 0x59, 0x05, 0xDB, 0x04, 0x52, 0x22, 0x80, 0x61, 0x5A, 0x43, 0x0A, 0x46, 
+	0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x01, 0x4B, 0x05, 0xB5, 0x00, 0x78, 0x1A, 0xB6, 0x72, 0xD0, 
+	0x03, 0x2A, 0x00, 0x46, 0xC0, 0x46, 0xC0, 0xE7, 0xF7, 0xB6, 0x62, 0xBD, 0x00, 0xB6, 0x62, 0x20, 
+	0x00, 0x00, 0x00, 0x4B, 0x10, 0xB5, 0x00, 0x05, 0x9A, 0x68, 0x1B, 0x4A, 0x0F, 0xD5, 0x0C, 0xB6, 
+	0x72, 0x4B, 0x0F, 0x29, 0x00, 0x78, 0x11, 0x78, 0x19, 0xD1, 0x02, 0xD0, 0x11, 0x29, 0x00, 0x46, 
+	0xC0, 0x46, 0xC0, 0xE7, 0xF4, 0xB6, 0x62, 0x4B, 0x09, 0x4A, 0x08, 0x78, 0x11, 0xB6, 0x72, 0xD1, 
+	0x02, 0x29, 0x00, 0x29, 0x00, 0x78, 0x19, 0x46, 0xC0, 0xD0, 0x04, 0xB6, 0x62, 0x46, 0xC0, 0x1A, 
+	0x42, 0xAE, 0xF1, 0x0E, 0xE7, 0xF3, 0xBF, 0x30, 0xBD, 0x00, 0xB6, 0x62, 0x20, 0x00, 0x00, 0x58, 
+	0x20, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x49, 0x13, 0xB5, 0x70, 0x24, 0x04, 0x4B, 0x13, 
+	0x4B, 0x13, 0x60, 0x19, 0x68, 0x1A, 0x4D, 0x13, 0x60, 0x1A, 0x43, 0x22, 0x24, 0x02, 0x68, 0x1A, 
+	0x60, 0x1A, 0x43, 0xA2, 0x24, 0x01, 0x68, 0x1A, 0x4C, 0x0F, 0x43, 0x22, 0x22, 0x00, 0x60, 0x1A, 
+	0x4A, 0x0E, 0x60, 0x22, 0x78, 0x2E, 0x60, 0x11, 0x43, 0x70, 0x79, 0x2D, 0x40, 0xE8, 0x35, 0x01, 
+	0x60, 0x11, 0x1A, 0x09, 0x68, 0x11, 0x68, 0x20, 0xD2, 0xFB, 0x42, 0x88, 0x21, 0x01, 0x68, 0x1A, 
+	0x60, 0x1A, 0x43, 0x8A, 0x46, 0xC0, 0xBD, 0x70, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xE0, 0x14, 
+	0xE0, 0x00, 0xE0, 0x10, 0x20, 0x00, 0x0A, 0xAA, 0xE0, 0x00, 0xE0, 0x18, 0x20, 0x00, 0x01, 0xFC, 
+	0x23, 0x00, 0xB5, 0x00, 0x42, 0x98, 0x4A, 0x06, 0x1C, 0xD3, 0xDB, 0x02, 0x43, 0x43, 0x7F, 0xDB, 
+	0x7F, 0xD2, 0x32, 0x02, 0xB2, 0x52, 0x30, 0x01, 0x18, 0x18, 0x40, 0x90, 0xBD, 0x00, 0x18, 0x40, 
+	0x20, 0x00, 0x09, 0xAE, 0xB0, 0x85, 0xB5, 0xF0, 0x1C, 0x0C, 0x1C, 0x05, 0x29, 0x00, 0x1C, 0x16, 
+	0x4B, 0x2B, 0xD0, 0x05, 0x7F, 0xDB, 0x33, 0x02, 0x2B, 0x00, 0xB2, 0x5B, 0x1C, 0x21, 0xD0, 0x4E, 
+	0xF7, 0xFF, 0x1C, 0x28, 0x49, 0x27, 0xFF, 0xDD, 0x7A, 0x4A, 0x4F, 0x27, 0x19, 0x13, 0x7A, 0x09, 
+	0x91, 0x02, 0x18, 0x51, 0x19, 0xCF, 0x01, 0x41, 0x97, 0x03, 0x22, 0x00, 0xE0, 0x13, 0x46, 0x84, 
+	0x56, 0xC1, 0x48, 0x22, 0xB2, 0xC0, 0x1C, 0x58, 0x90, 0x01, 0x0F, 0xCF, 0x98, 0x03, 0x18, 0x7F, 
+	0x19, 0xC7, 0x10, 0x7F, 0x97, 0x00, 0x37, 0x08, 0x79, 0x38, 0x46, 0x6F, 0x33, 0x02, 0x9F, 0x00, 
+	0x27, 0x01, 0x70, 0xB8, 0x43, 0x3A, 0x40, 0x8F, 0x42, 0x83, 0x98, 0x02, 0x4B, 0x15, 0xDB, 0xE8, 
+	0x79, 0xDF, 0x46, 0x60, 0x41, 0x61, 0x42, 0x61, 0x18, 0x79, 0x7C, 0x5B, 0x10, 0x49, 0x19, 0x1C, 
+	0x34, 0x01, 0x39, 0x01, 0x05, 0x24, 0x06, 0x89, 0x43, 0x22, 0x43, 0x0C, 0x4C, 0x10, 0x49, 0x0E, 
+	0x18, 0x43, 0x01, 0x40, 0x19, 0x01, 0x4F, 0x0F, 0x60, 0x4A, 0x68, 0x4C, 0xB2, 0xD2, 0x1C, 0xAA, 
+	0x71, 0x02, 0x19, 0xC0, 0xD0, 0x07, 0x2E, 0x00, 0x21, 0x01, 0x4A, 0x0B, 0x40, 0x91, 0x57, 0x52, 
+	0x69, 0x99, 0x1C, 0x0A, 0xE0, 0x01, 0x61, 0x9A, 0x61, 0x9E, 0x69, 0x9A, 0xBD, 0xF0, 0xB0, 0x05, 
+	0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x0A, 0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x75, 0x10, 
+	0x40, 0x00, 0x10, 0x18, 0x40, 0x00, 0x10, 0x10, 0x00, 0x00, 0x74, 0xEA, 0x4B, 0x08, 0xB5, 0x10, 
+	0x68, 0x1B, 0x21, 0x00, 0xE0, 0x08, 0x3B, 0x01, 0x01, 0x58, 0x4C, 0x06, 0x19, 0x00, 0x22, 0x09, 
+	0x72, 0xA1, 0x18, 0x84, 0xD2, 0xFB, 0x3A, 0x01, 0x2B, 0x00, 0x3B, 0x01, 0xBD, 0x10, 0xDA, 0xF4, 
+	0x20, 0x00, 0x09, 0x18, 0x40, 0x00, 0x10, 0x00, 0xF7, 0xFF, 0xB5, 0x38, 0x21, 0x00, 0xFF, 0xE7, 
+	0x1C, 0x0A, 0x20, 0x01, 0xF7, 0xFF, 0x42, 0x40, 0x20, 0x01, 0xFF, 0x75, 0x21, 0x01, 0x42, 0x40, 
+	0xF7, 0xFF, 0x22, 0x00, 0x4D, 0x0A, 0xFF, 0x6F, 0xE0, 0x0B, 0x7B, 0xAC, 0x21, 0x00, 0x1C, 0x20, 
+	0xF7, 0xFF, 0x22, 0x01, 0x21, 0x01, 0xFF, 0x67, 0x1C, 0x0A, 0x1C, 0x20, 0xFF, 0x62, 0xF7, 0xFF, 
+	0xB2, 0xE4, 0x34, 0x01, 0x79, 0x2B, 0x7B, 0xAA, 0x42, 0x9C, 0x18, 0xD3, 0xBD, 0x38, 0xDB, 0xEE, 
+	0x20, 0x00, 0x03, 0x0A, 0xB0, 0x85, 0xB5, 0xF0, 0x1C, 0x0E, 0x1C, 0x05, 0x1C, 0x1F, 0x92, 0x02, 
+	0xD0, 0x05, 0x29, 0x00, 0x33, 0x02, 0x4B, 0x21, 0xB2, 0x5B, 0x7F, 0xDB, 0xD0, 0x3B, 0x2B, 0x00, 
+	0x1C, 0x28, 0x1C, 0x31, 0xFF, 0x34, 0xF7, 0xFF, 0xB2, 0xC0, 0x4A, 0x1D, 0x7A, 0x53, 0x90, 0x01, 
+	0x18, 0xF6, 0x7A, 0x12, 0x4B, 0x1B, 0x18, 0x9A, 0x7C, 0x1B, 0x1E, 0xB9, 0x41, 0x81, 0x1E, 0x48, 
+	0xB2, 0xF6, 0x42, 0x49, 0x46, 0x9C, 0x91, 0x03, 0x2F, 0x00, 0xE0, 0x24, 0x21, 0x26, 0xD1, 0x07, 
+	0x4B, 0x15, 0x43, 0x71, 0x5C, 0xCC, 0x19, 0x49, 0xB2, 0xE4, 0x44, 0x64, 0x2F, 0x01, 0xE0, 0x08, 
+	0x01, 0x73, 0xD1, 0x04, 0x19, 0x5B, 0x49, 0x11, 0xE0, 0x01, 0x5C, 0x5C, 0x40, 0x1C, 0x9B, 0x03, 
+	0x99, 0x02, 0x4B, 0x0F, 0x36, 0x02, 0x57, 0x9B, 0x18, 0xC0, 0x0F, 0xD8, 0xB2, 0xDB, 0x18, 0x63, 
+	0x9B, 0x01, 0x93, 0x00, 0x01, 0x59, 0x10, 0x40, 0x18, 0x08, 0x46, 0x6B, 0x49, 0x09, 0x78, 0x1B, 
+	0x54, 0x43, 0xB2, 0xF6, 0xDB, 0xD8, 0x42, 0x96, 0xBD, 0xF0, 0xB0, 0x05, 0x20, 0x00, 0x09, 0xAE, 
+	0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x12, 0x48, 0x00, 0x00, 0x75, 0x36, 0x20, 0x00, 0x0A, 0xB3, 
+	0x00, 0x00, 0x75, 0x10, 0x40, 0x00, 0x10, 0x00, 0x4B, 0x2A, 0xB5, 0x70, 0x68, 0x19, 0x4A, 0x2A, 
+	0x40, 0x0A, 0x24, 0x80, 0x68, 0x1A, 0x60, 0x1A, 0x4D, 0x28, 0x05, 0xE4, 0x60, 0xA2, 0x68, 0xA1, 
+	0x22, 0x03, 0x7A, 0x69, 0x40, 0x11, 0x68, 0x18, 0x04, 0x89, 0x4A, 0x25, 0x43, 0x0A, 0x40, 0x02, 
+	0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 0x22, 0x80, 0x68, 0x19, 0x43, 0x0A, 0x03, 0x52, 
+	0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 0x68, 0x18, 0x7A, 0x29, 0x4A, 0x1D, 0x26, 0x07, 
+	0x05, 0x49, 0x40, 0x31, 0x43, 0x0A, 0x40, 0x02, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 
+	0x29, 0x0F, 0x7B, 0xA9, 0x7B, 0xEA, 0xD8, 0x25, 0xD8, 0x22, 0x2A, 0x0F, 0x07, 0x09, 0x68, 0x18, 
+	0x09, 0x00, 0x01, 0x00, 0x60, 0x19, 0x43, 0x01, 0x40, 0x0A, 0x21, 0x0F, 0x06, 0x11, 0x68, 0x18, 
+	0x40, 0x02, 0x4A, 0x11, 0x60, 0x1A, 0x43, 0x0A, 0x68, 0xA2, 0x68, 0x1B, 0xF7, 0xFF, 0x60, 0xA3, 
+	0x4A, 0x0E, 0xFC, 0x49, 0x43, 0x13, 0x6C, 0x63, 0xF7, 0xFF, 0x64, 0x63, 0xF7, 0xFF, 0xFC, 0x5C, 
+	0x79, 0xEB, 0xFC, 0x87, 0x40, 0x1E, 0x4A, 0x0A, 0x6C, 0x26, 0x02, 0x33, 0x43, 0x1E, 0x40, 0x16, 
+	0xBD, 0x70, 0x64, 0x26, 0x20, 0x00, 0x00, 0x14, 0xFF, 0xFC, 0xFF, 0xFF, 0x20, 0x00, 0x12, 0x48, 
+	0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x1F, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xF8, 0xFF, 0x21, 0x80, 0xB5, 0x00, 0x79, 0x0B, 0x05, 0xC9, 0xB2, 0xD2, 0x1E, 0x5A, 
+	0xDD, 0x09, 0x42, 0x98, 0x71, 0x0B, 0xE0, 0x00, 0xB2, 0xDB, 0x33, 0x01, 0xDD, 0xFA, 0x42, 0x83, 
+	0x71, 0x0A, 0xE0, 0x04, 0xB2, 0xD2, 0x3A, 0x01, 0xDA, 0xFA, 0x42, 0x82, 0xB5, 0x38, 0xBD, 0x00, 
+	0x78, 0xA0, 0x4C, 0x17, 0xFF, 0xE6, 0xF7, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x68, 0x5A, 0x79, 0x21, 
+	0x00, 0x52, 0x07, 0xC9, 0x43, 0x0A, 0x08, 0x52, 0x79, 0x60, 0x60, 0x5A, 0x68, 0x5D, 0x22, 0x03, 
+	0x40, 0x10, 0x49, 0x10, 0x40, 0x29, 0x03, 0x80, 0x60, 0x59, 0x43, 0x01, 0x49, 0x0E, 0x79, 0xA0, 
+	0x40, 0x10, 0x68, 0x5D, 0x40, 0x29, 0x03, 0x00, 0x60, 0x59, 0x43, 0x01, 0x49, 0x0B, 0x79, 0xE0, 
+	0x40, 0x10, 0x68, 0x5D, 0x02, 0x80, 0x40, 0x29, 0x60, 0x59, 0x43, 0x01, 0x68, 0x58, 0x7A, 0x21, 
+	0x02, 0x11, 0x40, 0x0A, 0x40, 0x02, 0x4A, 0x06, 0x60, 0x5A, 0x43, 0x0A, 0x46, 0xC0, 0xBD, 0x38, 
+	0x20, 0x00, 0x0A, 0xAA, 0xDF, 0xBF, 0xAE, 0xF1, 0x0F, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xCF, 
+	0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0x23, 0x80, 0xB5, 0xF8, 0x68, 0x1A, 0x05, 
+	0xDB, 0x21, 0x00, 0x4A, 0x7A, 0x60, 0x19, 0x20, 0x08, 0x68, 0x14, 0x60, 0x10, 0x60, 0x9C, 0x68, 
+	0x9D, 0x60, 0x21, 0x4C, 0x77, 0x68, 0xDD, 0x68, 0x24, 0x25, 0xFE, 0x60, 0xDC, 0x01, 0xED, 0x4C, 
+	0x75, 0x68, 0x24, 0x60, 0x25, 0x61, 0x1C, 0x69, 0x1D, 0x61, 0x59, 0x69, 0x5C, 0x61, 0x99, 0x69, 
+	0x9C, 0x61, 0xD9, 0x69, 0xDC, 0x24, 0x80, 0x6C, 0x1C, 0x64, 0x1C, 0x01, 0xE4, 0x64, 0x59, 0x6C, 
+	0x5C, 0x4C, 0x6D, 0x6C, 0x9C, 0x60, 0x21, 0x64, 0x99, 0x05, 0xE4, 0x24, 0xA0, 0x60, 0xA1, 0x68, 
+	0xA5, 0x49, 0x6A, 0x6C, 0x1C, 0x64, 0x19, 0x40, 0x21, 0x21, 0x80, 0x68, 0x1C, 0x43, 0x21, 0x05, 
+	0x49, 0x49, 0x67, 0x60, 0x19, 0x7F, 0xC9, 0x31, 0x01, 0xD0, 0x03, 0x29, 0x00, 0x43, 0x08, 0x68, 
+	0x11, 0xE0, 0x02, 0x60, 0x10, 0x43, 0x81, 0x68, 0x11, 0x68, 0x11, 0x60, 0x11, 0x60, 0x99, 0x68, 
+	0x98, 0x26, 0x04, 0x68, 0x13, 0x60, 0x13, 0x43, 0x33, 0x25, 0x80, 0x68, 0x13, 0x68, 0xA9, 0x05, 
+	0xED, 0x68, 0x13, 0x60, 0xAB, 0x43, 0x3B, 0x27, 0x02, 0x68, 0x13, 0x60, 0x13, 0x60, 0xAB, 0x68, 
+	0xA9, 0x20, 0x01, 0x68, 0x13, 0x60, 0x13, 0x43, 0x83, 0x68, 0xAA, 0x68, 0x13, 0xF7, 0xFF, 0x60, 
+	0xAB, 0x4B, 0x54, 0xFE, 0xED, 0x56, 0x9A, 0x22, 0x1C, 0x4B, 0x53, 0x69, 0xA9, 0x40, 0xF2, 0x05, 
+	0x12, 0x43, 0x13, 0x40, 0x0B, 0xF7, 0xFF, 0x61, 0xAB, 0x4A, 0x50, 0xFE, 0x61, 0x21, 0x01, 0x4B, 
+	0x50, 0x4B, 0x50, 0x60, 0x1A, 0x68, 0x1A, 0x24, 0x08, 0x43, 0x32, 0x20, 0x10, 0x68, 0x1A, 0x60, 
+	0x1A, 0x60, 0x1A, 0x43, 0xBA, 0x22, 0xC0, 0x4B, 0x4C, 0x50, 0x99, 0x00, 0x52, 0x50, 0x9F, 0x21, 
+	0x20, 0x50, 0x9C, 0x50, 0x9E, 0x50, 0x99, 0x50, 0x98, 0x50, 0x99, 0x21, 0x40, 0x40, 0xBA, 0x22, 
+	0xC0, 0x24, 0xFF, 0x58, 0x98, 0x24, 0xC0, 0x43, 0xA0, 0x50, 0x98, 0x43, 0x20, 0x48, 0x43, 0x58, 
+	0x9C, 0x50, 0x9C, 0x40, 0x04, 0x48, 0x42, 0x58, 0x9C, 0x24, 0x80, 0x40, 0x20, 0x43, 0x04, 0x04, 
+	0x24, 0x58, 0x9C, 0x50, 0x9C, 0x0A, 0x24, 0x02, 0x24, 0x50, 0x9C, 0x43, 0x2C, 0x40, 0xBA, 0x22, 
+	0xC1, 0x1C, 0x04, 0x58, 0x98, 0x43, 0x84, 0x20, 0xFF, 0x50, 0x9C, 0x43, 0x0C, 0x48, 0x37, 0x58, 
+	0x9C, 0x24, 0x80, 0x40, 0x20, 0x43, 0x20, 0x02, 0x24, 0x58, 0x98, 0x50, 0x98, 0x40, 0x20, 0x4C, 
+	0x34, 0x4A, 0x34, 0x50, 0x98, 0x43, 0x30, 0x69, 0x10, 0xB6, 0x62, 0x61, 0x10, 0x20, 0x01, 0x22, 
+	0x08, 0x60, 0x18, 0x60, 0x1E, 0x60, 0x1A, 0x60, 0x1F, 0x20, 0x20, 0x4B, 0x2F, 0x67, 0xDC, 0x24, 
+	0x10, 0x67, 0xD9, 0x67, 0xD8, 0xFC, 0x46, 0xF7, 0xFF, 0x7D, 0xE0, 0x4C, 0x21, 0xF7, 0xFF, 0x7E, 
+	0x21, 0x7C, 0xE3, 0xFA, 0xFB, 0xD0, 0x26, 0x2B, 0x00, 0x21, 0x01, 0x4B, 0x1A, 0x4A, 0x27, 0x68, 
+	0x18, 0x0E, 0x40, 0x00, 0x40, 0x68, 0x19, 0x43, 0x08, 0x40, 0x11, 0x06, 0x00, 0x60, 0x19, 0x43, 
+	0x01, 0x69, 0x28, 0x68, 0x19, 0x68, 0x19, 0x61, 0x29, 0x0E, 0x49, 0x00, 0x49, 0x06, 0x39, 0x43, 
+	0x0F, 0x40, 0x17, 0x68, 0x1F, 0x60, 0x1F, 0x43, 0x0F, 0x69, 0x28, 0x68, 0x19, 0x68, 0x19, 0x61, 
+	0x29, 0x0E, 0x49, 0x00, 0x49, 0x68, 0x19, 0x43, 0x0E, 0x40, 0x0A, 0x06, 0x36, 0x60, 0x1A, 0x43, 
+	0x32, 0x69, 0x2A, 0x68, 0x1B, 0xF7, 0xFF, 0x61, 0x2B, 0xF7, 0xFF, 0xFE, 0xD4, 0xF7, 0xFF, 0xF8, 
+	0xC1, 0xF7, 0xFF, 0xF9, 0x0F, 0xF7, 0xFF, 0xF9, 0x7D, 0xBD, 0xF8, 0xFB, 0x65, 0x20, 0x00, 0x00, 
+	0x14, 0x20, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0x7F, 0xFF, 
+	0xFF, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x12, 0x48, 0xF0, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 
+	0xFF, 0xE0, 0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 0x10, 0xE0, 0x00, 0xE1, 0x00, 0xFF, 0xFF, 0x00, 
+	0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xE0, 0x00, 0xED, 0x00, 0xE0, 0x00, 0xE1, 0x04, 0x80, 0xFF, 0xFF, 
+	0xFF, 0x4A, 0x0C, 0xB5, 0x08, 0x49, 0x0D, 0x4B, 0x0C, 0xCA, 0x01, 0xE0, 0x01, 0x42, 0x8B, 0xC3, 
+	0x01, 0x4B, 0x0B, 0xD3, 0xFB, 0x22, 0x00, 0x49, 0x0B, 0xC3, 0x04, 0xE0, 0x00, 0xD3, 0xFC, 0x42, 
+	0x8B, 0xF8, 0x26, 0xF7, 0xFF, 0x22, 0x00, 0x4B, 0x08, 0xC3, 0x04, 0xE0, 0x00, 0xD3, 0xFC, 0x42, 
+	0x83, 0x46, 0xC0, 0xBD, 0x08, 0x00, 0x00, 0x61, 0xC4, 0x20, 0x00, 0x00, 0x3C, 0x20, 0x00, 0x00, 
+	0x5C, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 0x16, 0xEC, 0x20, 0x00, 0x1E, 0x0C, 0x4B, 0x13, 0xB5, 
+	0x00, 0x2B, 0x01, 0x68, 0x1B, 0x2B, 0x08, 0xD0, 0x02, 0xE0, 0x0F, 0xD1, 0x1E, 0x4A, 0x11, 0x4B, 
+	0x10, 0x4A, 0x11, 0x60, 0x1A, 0x4A, 0x11, 0x60, 0x5A, 0x60, 0x1A, 0x4B, 0x11, 0x4A, 0x12, 0x4B, 
+	0x11, 0x4A, 0x12, 0x60, 0x1A, 0x4A, 0x12, 0x60, 0x5A, 0xE0, 0x0D, 0x60, 0x9A, 0x4A, 0x08, 0x4B, 
+	0x09, 0x60, 0x13, 0x49, 0x09, 0x4A, 0x0A, 0x60, 0x51, 0x4A, 0x0A, 0x60, 0x13, 0x60, 0x53, 0x60, 
+	0x13, 0x4B, 0x0C, 0x60, 0x93, 0x70, 0x1A, 0x22, 0x01, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x16, 
+	0x50, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x03, 0xF9, 0x00, 0x00, 0x40, 0x25, 0x00, 0x00, 0x40, 
+	0x5D, 0x20, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x18, 0x00, 0x00, 0x41, 0x69, 0x00, 0x00, 0x43, 
+	0x51, 0x00, 0x00, 0x44, 0xB5, 0x20, 0x00, 0x01, 0xE4, 0x23, 0x00, 0xB5, 0x00, 0x33, 0x01, 0x5C, 
+	0xC2, 0xD1, 0xFB, 0x2A, 0x00, 0xB2, 0xD8, 0x3B, 0x01, 0x46, 0xC0, 0xBD, 0x00, 0x1C, 0x1C, 0xB5, 
+	0xF7, 0x78, 0x1F, 0xAB, 0x08, 0x1C, 0x0E, 0x4B, 0x26, 0x21, 0x01, 0x68, 0x1B, 0x42, 0x0B, 0x40, 
+	0x81, 0x2F, 0x00, 0xD0, 0x44, 0x2C, 0x04, 0xD0, 0x07, 0x4B, 0x22, 0xD8, 0x32, 0x33, 0x05, 0x5D, 
+	0x19, 0x5D, 0x1F, 0x91, 0x00, 0x2C, 0x04, 0xE0, 0x08, 0x4B, 0x1E, 0xD8, 0x2E, 0x31, 0x0A, 0x1C, 
+	0x19, 0x33, 0x0F, 0x5D, 0x09, 0x91, 0x00, 0x5D, 0x1F, 0xD0, 0x28, 0x2C, 0x03, 0xD0, 0x28, 0x2C, 
+	0x00, 0x20, 0x3A, 0xE0, 0x28, 0xF0, 0x01, 0x1C, 0x21, 0x42, 0x86, 0xFF, 0xEB, 0x46, 0x6B, 0xDD, 
+	0x05, 0xB2, 0xC0, 0x78, 0x1B, 0x70, 0x68, 0x70, 0x2B, 0x70, 0x2F, 0xE0, 0x02, 0x70, 0x6E, 0x1C, 
+	0x30, 0x43, 0x60, 0x1A, 0x36, 0x23, 0x00, 0x99, 0x01, 0x60, 0xAB, 0x60, 0x69, 0xB2, 0xF6, 0x18, 
+	0x09, 0xF7, 0xFF, 0x91, 0x01, 0xF7, 0xFF, 0xFA, 0xE3, 0x28, 0x00, 0xFB, 0x37, 0xE0, 0x0B, 0xD1, 
+	0xFB, 0x27, 0x00, 0x23, 0x0F, 0xE0, 0x05, 0x93, 0x00, 0x91, 0x00, 0x21, 0x0F, 0x24, 0x02, 0xE0, 
+	0x02, 0x24, 0x01, 0xE0, 0x00, 0x92, 0x01, 0x4D, 0x04, 0xD1, 0xD2, 0x2E, 0x00, 0x46, 0xC0, 0xBD, 
+	0xF7, 0x20, 0x00, 0x00, 0x58, 0x00, 0x00, 0x61, 0x2B, 0x20, 0x00, 0x00, 0x70, 0x4B, 0x11, 0xB5, 
+	0x38, 0x68, 0x1B, 0x22, 0x01, 0x1C, 0x0D, 0x40, 0x82, 0xD0, 0x19, 0x42, 0x13, 0x23, 0x0B, 0x4C, 
+	0x0E, 0x1C, 0x08, 0x70, 0x23, 0xFF, 0x90, 0xF7, 0xFF, 0x78, 0x63, 0x70, 0x60, 0x33, 0x02, 0x22, 
+	0x07, 0x42, 0x93, 0x40, 0x13, 0x78, 0x63, 0xD1, 0x03, 0x18, 0x37, 0xAE, 0xF1, 0x10, 0xB2, 0xDB, 
+	0x3B, 0x01, 0x23, 0x00, 0x70, 0x63, 0x60, 0xA3, 0x60, 0x65, 0xFA, 0xAA, 0xF7, 0xFF, 0xFA, 0xFE, 
+	0xF7, 0xFF, 0xD1, 0xFB, 0x28, 0x00, 0x46, 0xC0, 0xBD, 0x38, 0x20, 0x00, 0x00, 0x58, 0x20, 0x00, 
+	0x00, 0x70, 0x4C, 0x0B, 0xB5, 0x1F, 0x73, 0xD8, 0x46, 0x6B, 0x2B, 0x00, 0x78, 0x23, 0x20, 0x00, 
+	0xD0, 0x03, 0xF7, 0xFF, 0x49, 0x08, 0x78, 0x23, 0xFF, 0xCD, 0xD0, 0x07, 0x2B, 0x00, 0x21, 0x01, 
+	0x46, 0x6A, 0x32, 0x0F, 0x20, 0x00, 0x91, 0x00, 0x23, 0x04, 0xFF, 0x6A, 0xF7, 0xFF, 0x46, 0xC0, 
+	0xBD, 0x1F, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x61, 0x3F, 0xF7, 0xFF, 0xB5, 0xF8, 0x28, 0x00, 
+	0xFA, 0xD7, 0x4B, 0x39, 0xD1, 0x70, 0x2A, 0x00, 0x68, 0x1A, 0x4B, 0x38, 0xDC, 0x03, 0x2B, 0x00, 
+	0x68, 0x1B, 0x49, 0x37, 0xDD, 0x3E, 0x70, 0x0B, 0x23, 0x03, 0x33, 0x04, 0x4B, 0x36, 0x1C, 0x1C, 
+	0x7F, 0xDB, 0xDA, 0x00, 0x42, 0x9A, 0x70, 0x4B, 0xB2, 0xD3, 0x46, 0x8C, 0x21, 0x0A, 0x23, 0x00, 
+	0x4A, 0x32, 0xE0, 0x1F, 0x49, 0x2D, 0xE0, 0x03, 0x33, 0x01, 0x43, 0x5E, 0x46, 0x66, 0x18, 0x76, 
+	0x20, 0x00, 0x18, 0x37, 0x30, 0x0A, 0x5F, 0x7F, 0x25, 0x32, 0xD0, 0xF3, 0x2F, 0x00, 0xDA, 0x13, 
+	0x42, 0xA3, 0x18, 0x08, 0x00, 0x58, 0x00, 0xDE, 0x88, 0x80, 0xB2, 0x00, 0x70, 0x10, 0x19, 0x80, 
+	0x12, 0x00, 0x1C, 0x18, 0x70, 0x50, 0x00, 0x40, 0x30, 0x10, 0x33, 0x01, 0x5A, 0x08, 0x0A, 0x00, 
+	0x70, 0x90, 0x32, 0x04, 0x70, 0xD0, 0xDB, 0xDF, 0x42, 0xA3, 0x4A, 0x1F, 0x4B, 0x1D, 0x22, 0x00, 
+	0x60, 0x5A, 0xF7, 0xFF, 0x60, 0x9A, 0xF7, 0xFF, 0xFA, 0x3D, 0x28, 0x00, 0xFA, 0x91, 0xE0, 0x29, 
+	0xD1, 0xFB, 0x68, 0x53, 0x4A, 0x1A, 0xD0, 0x25, 0x33, 0x01, 0x21, 0x13, 0x4B, 0x15, 0x68, 0x11, 
+	0x70, 0x19, 0x70, 0x59, 0x46, 0x94, 0x49, 0x14, 0x4B, 0x16, 0x1C, 0x03, 0x78, 0x1D, 0x1C, 0x23, 
+	0xE0, 0x0D, 0x00, 0x5E, 0xE0, 0x01, 0x30, 0x02, 0x44, 0x66, 0x22, 0x06, 0x18, 0x34, 0x1C, 0x5C, 
+	0x5E, 0xA7, 0xD0, 0xF4, 0x2F, 0x00, 0x1C, 0x23, 0x70, 0x0B, 0x20, 0x00, 0x31, 0x01, 0xDB, 0xF0, 
+	0x42, 0xAB, 0x4A, 0x09, 0x4B, 0x07, 0x60, 0x5A, 0x60, 0x98, 0xFA, 0x12, 0xF7, 0xFF, 0xFA, 0x66, 
+	0xF7, 0xFF, 0xD1, 0xFB, 0x28, 0x00, 0x46, 0xC0, 0xBD, 0xF8, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 
+	0x01, 0x20, 0x20, 0x00, 0x00, 0x70, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x09, 0xF0, 0x20, 0x00, 
+	0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x4B, 0x64, 0xB5, 0x08, 0x2B, 0x1D, 0x88, 0x1B, 0xD8, 0x1A, 
+	0xD0, 0x47, 0xD1, 0x00, 0x2B, 0x05, 0xD8, 0x0D, 0xE0, 0x96, 0xD0, 0x63, 0x2B, 0x02, 0x2B, 0x01, 
+	0xD8, 0x03, 0xE0, 0xB7, 0xD0, 0x00, 0x2B, 0x03, 0xE0, 0x57, 0xE0, 0x87, 0xD1, 0x00, 0xD0, 0x00, 
+	0x2B, 0x04, 0xE0, 0x8F, 0xE0, 0xB0, 0xD0, 0x65, 0x2B, 0x07, 0x2B, 0x1B, 0xD3, 0x5C, 0x2B, 0x1C, 
+	0xD0, 0x1C, 0xE0, 0xA7, 0xD0, 0x00, 0x2B, 0x22, 0xE0, 0x22, 0xD8, 0x08, 0xD0, 0x40, 0xD0, 0x5D, 
+	0x2B, 0x1F, 0x2B, 0x20, 0xD3, 0x2A, 0x2B, 0x21, 0xD0, 0x5E, 0xE0, 0x9B, 0xD0, 0x00, 0x2B, 0x41, 
+	0xE0, 0x5E, 0xD8, 0x03, 0xD0, 0x64, 0xD0, 0x00, 0x2B, 0x40, 0xE0, 0x5B, 0xE0, 0x94, 0xD0, 0x61, 
+	0x2B, 0x42, 0xD0, 0x00, 0x2B, 0x60, 0xE0, 0x72, 0xE0, 0x8E, 0x4B, 0x49, 0x4A, 0x48, 0x20, 0x01, 
+	0x78, 0x12, 0x40, 0x90, 0x68, 0x19, 0x43, 0x0A, 0x1C, 0x02, 0xE0, 0x83, 0x60, 0x1A, 0x4B, 0x44, 
+	0x49, 0x43, 0x68, 0x1A, 0x78, 0x09, 0x40, 0x88, 0x20, 0x01, 0x60, 0x1A, 0x43, 0x82, 0x4B, 0x3F, 
+	0xE0, 0x7A, 0x4B, 0x40, 0x78, 0x1A, 0xE0, 0x75, 0x70, 0x1A, 0x21, 0x0D, 0x4B, 0x3C, 0x4B, 0x3E, 
+	0x78, 0x1A, 0x4A, 0x3C, 0x70, 0x1A, 0x78, 0x1A, 0x70, 0x11, 0x2A, 0x00, 0x4B, 0x3C, 0x22, 0x00, 
+	0xD0, 0x02, 0xE0, 0x67, 0x70, 0x5A, 0x78, 0x52, 0x4A, 0x3A, 0xE0, 0x63, 0x70, 0x5A, 0x78, 0x1A, 
+	0x4B, 0x33, 0x70, 0x1A, 0x4B, 0x38, 0x4B, 0x31, 0xE0, 0x5E, 0x4B, 0x37, 0x78, 0x1A, 0xF7, 0xFD, 
+	0x60, 0x1A, 0xE0, 0x57, 0xFB, 0xB5, 0x78, 0x1A, 0x4B, 0x2D, 0x70, 0x9A, 0x4B, 0x34, 0xF7, 0xFF, 
+	0x78, 0x98, 0xE0, 0x4F, 0xFC, 0x8D, 0x78, 0x1A, 0x4B, 0x29, 0x70, 0x9A, 0x4B, 0x30, 0x22, 0x0F, 
+	0x4B, 0x29, 0xE0, 0x47, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x2E, 0xE0, 0x43, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x2D, 0xE0, 0x3F, 0x70, 0x1A, 0xF7, 0xFD, 0x20, 0x0C, 0xE0, 0x3B, 0xF9, 0x31, 0xF7, 0xFD, 
+	0x20, 0x0D, 0xE0, 0x37, 0xF9, 0x2D, 0x22, 0x01, 0x4B, 0x28, 0xE0, 0x33, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x27, 0xE0, 0x2F, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x26, 0xE0, 0x2B, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x25, 0xE0, 0x27, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x24, 0x4B, 0x14, 0x70, 0x1A, 0x4B, 0x23, 
+	0x78, 0x1A, 0xE0, 0x1F, 0x70, 0x1A, 0x78, 0x1A, 0x4B, 0x11, 0x70, 0x9A, 0x4B, 0x1E, 0x4B, 0x0F, 
+	0xE0, 0x1A, 0x4B, 0x1F, 0x78, 0x1A, 0x78, 0x1A, 0x70, 0x1A, 0x3A, 0x01, 0x4B, 0x10, 0xD8, 0x03, 
+	0x2A, 0x01, 0x22, 0x0F, 0x33, 0x40, 0xE0, 0x0D, 0x70, 0x1A, 0x33, 0x40, 0x4A, 0x1A, 0x2A, 0x00, 
+	0x78, 0x12, 0x4A, 0x19, 0xD0, 0x04, 0x78, 0x12, 0x32, 0x40, 0xE0, 0x03, 0x70, 0x1A, 0x32, 0x40, 
+	0x4A, 0x08, 0x70, 0x1A, 0x78, 0x12, 0x46, 0xC0, 0xBD, 0x08, 0x20, 0x00, 0x00, 0x28, 0x50, 0x00, 
+	0x00, 0x0C, 0x20, 0x00, 0x00, 0x58, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 
+	0x12, 0x48, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 0x01, 0xDE, 0x20, 0x00, 0x16, 0x50, 0x20, 0x00, 
+	0x0A, 0xAA, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 0x01, 0xDC, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 
+	0x01, 0xE7, 0x20, 0x00, 0x01, 0xE5, 0x20, 0x00, 0x01, 0x8B, 0x20, 0x00, 0x01, 0xE6, 0x20, 0x00, 
+	0x01, 0x92, 0x20, 0x00, 0x01, 0xE0, 0x20, 0x00, 0x01, 0xDD, 0x00, 0x00, 0x74, 0x9A, 0x4B, 0x4A, 
+	0xB5, 0x30, 0x2B, 0x34, 0x88, 0x1B, 0xD8, 0x0C, 0xD0, 0x47, 0xD0, 0x4F, 0x2B, 0x2E, 0x2B, 0x00, 
+	0xD8, 0x04, 0x2B, 0x1D, 0xD0, 0x14, 0xE0, 0x16, 0xD1, 0x78, 0xD0, 0x51, 0x2B, 0x2F, 0xD1, 0x73, 
+	0x2B, 0x30, 0x2B, 0x38, 0xE0, 0x56, 0xD8, 0x04, 0xD0, 0x66, 0xD0, 0x39, 0x2B, 0x35, 0xD1, 0x6B, 
+	0x2B, 0x37, 0x2B, 0x39, 0xE0, 0x5B, 0x2B, 0x86, 0xD0, 0x63, 0xE0, 0x09, 0xD1, 0x66, 0x7B, 0x5A, 
+	0x4B, 0x3B, 0x70, 0x1A, 0x4B, 0x3B, 0x4B, 0x3B, 0xE0, 0x6F, 0x4B, 0x39, 0x78, 0x1A, 0xE0, 0x6A, 
+	0x70, 0x1A, 0x4A, 0x3A, 0x49, 0x39, 0x2B, 0x00, 0x78, 0x0B, 0x78, 0x10, 0xD1, 0x0F, 0x70, 0x08, 
+	0x49, 0x34, 0x49, 0x37, 0x78, 0x50, 0x68, 0x52, 0x70, 0x08, 0x4C, 0x36, 0x18, 0xD1, 0x19, 0x19, 
+	0x78, 0x08, 0x70, 0x08, 0x33, 0x01, 0xD1, 0xF7, 0x2B, 0x06, 0x68, 0x52, 0xE0, 0x55, 0x78, 0x08, 
+	0x23, 0x00, 0x18, 0xC0, 0x4D, 0x2B, 0x18, 0x10, 0x38, 0x02, 0x19, 0x58, 0x78, 0x04, 0x70, 0x04, 
+	0x33, 0x01, 0xD1, 0xF4, 0x2B, 0x08, 0x4B, 0x2C, 0xE0, 0x47, 0x4B, 0x25, 0x68, 0x1A, 0xE0, 0x42, 
+	0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x4B, 0x22, 0x79, 0x1A, 0xE0, 0x3C, 0x70, 0x1A, 0xBC, 0xE1, 
+	0xAE, 0xF1, 0x11, 0x4A, 0x27, 0x4B, 0x22, 0x49, 0x1F, 0x78, 0x1B, 0x68, 0x1A, 0x18, 0xD3, 0x60, 
+	0x0A, 0x68, 0x5B, 0xE0, 0x32, 0x60, 0x4B, 0x1C, 0x1A, 0x4B, 0x1A, 0x78, 0x11, 0x32, 0x2C, 0x29, 
+	0x00, 0x4A, 0x19, 0xE0, 0x09, 0xD1, 0x07, 0x1C, 0x1A, 0x4B, 0x16, 0x78, 0x11, 0x32, 0x2C, 0x29, 
+	0x00, 0x4A, 0x15, 0x8C, 0xDB, 0xD1, 0x02, 0xE0, 0x20, 0x80, 0x13, 0x80, 0x13, 0x8D, 0x1B, 0x4B, 
+	0x19, 0xE0, 0x1D, 0x4B, 0x10, 0x78, 0x1A, 0xE0, 0x18, 0x70, 0x1A, 0x78, 0x1A, 0x4B, 0x17, 0x70, 
+	0x1A, 0x4B, 0x0D, 0x4B, 0x16, 0xE0, 0x13, 0x4B, 0x0B, 0x78, 0x1A, 0xE0, 0x0E, 0x70, 0x1A, 0xB2, 
+	0x9A, 0x3B, 0x90, 0xD8, 0x0A, 0x2A, 0x13, 0x01, 0x5B, 0x4A, 0x09, 0x49, 0x06, 0x78, 0x12, 0x4A, 
+	0x10, 0x18, 0x9B, 0x68, 0x1A, 0x18, 0x9B, 0x60, 0x0A, 0x68, 0x5B, 0xBD, 0x30, 0x60, 0x4B, 0x20, 
+	0x00, 0x00, 0x28, 0x20, 0x00, 0x09, 0xAE, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x03, 0x1D, 0x20, 
+	0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x70, 0x50, 0x00, 0x00, 0x0D, 0x50, 0x00, 0x00, 0x0E, 0x20, 
+	0x00, 0x09, 0x1C, 0x20, 0x00, 0x09, 0xB1, 0x00, 0x00, 0x63, 0xFF, 0x00, 0x00, 0x73, 0xFF, 0x00, 
+	0x00, 0x7B, 0xFF, 0x20, 0x00, 0x0A, 0xB3, 0x4B, 0x08, 0xB5, 0x08, 0x2B, 0x86, 0x88, 0x1B, 0x4B, 
+	0x07, 0xD1, 0x0B, 0x2A, 0x01, 0x68, 0x9A, 0x68, 0x9A, 0xDC, 0x02, 0x60, 0x9A, 0x32, 0x01, 0x2B, 
+	0x02, 0x68, 0x9B, 0xF7, 0xFF, 0xD1, 0x01, 0xBD, 0x08, 0xF8, 0x71, 0x20, 0x00, 0x00, 0x28, 0x20, 
+	0x00, 0x00, 0x70, 0x4C, 0x31, 0xB5, 0x7F, 0x78, 0x23, 0x90, 0x03, 0x1C, 0x16, 0x1C, 0x0D, 0xD0, 
+	0x03, 0x2B, 0x00, 0x49, 0x2E, 0x20, 0x01, 0xFD, 0x6E, 0xF7, 0xFF, 0x2B, 0x00, 0x78, 0x23, 0x21, 
+	0x01, 0xD0, 0x06, 0xAA, 0x03, 0x1C, 0x08, 0x91, 0x00, 0x23, 0x04, 0xFD, 0x0C, 0xF7, 0xFF, 0x99, 
+	0x03, 0x4B, 0x28, 0x4A, 0x28, 0x78, 0x1B, 0xD1, 0x15, 0x2B, 0x00, 0x33, 0x4A, 0x1C, 0x13, 0x5E, 
+	0x1B, 0x20, 0x00, 0x42, 0x9E, 0x1B, 0x8E, 0x1C, 0x13, 0xDC, 0x05, 0x20, 0x00, 0x33, 0x4C, 0x42, 
+	0x9E, 0x5E, 0x1B, 0x48, 0x21, 0xDA, 0x08, 0x70, 0x03, 0x23, 0x01, 0x70, 0x03, 0x48, 0x20, 0x70, 
+	0x03, 0x48, 0x20, 0x70, 0x03, 0x48, 0x20, 0x2B, 0x00, 0x78, 0x53, 0x4B, 0x1F, 0xD0, 0x04, 0x43, 
+	0x59, 0x5D, 0x5B, 0x91, 0x03, 0x11, 0x89, 0x00, 0x6A, 0x4B, 0x1D, 0x4B, 0x1D, 0x5A, 0xD0, 0x5E, 
+	0xD4, 0x99, 0x03, 0x4A, 0x14, 0x08, 0xC0, 0x1B, 0x04, 0xB2, 0x89, 0x7C, 0x56, 0x1A, 0x64, 0x4B, 
+	0x19, 0xB2, 0x24, 0xDC, 0x02, 0x42, 0xB4, 0x42, 0xB4, 0x42, 0x76, 0x24, 0x00, 0xDA, 0x02, 0xE0, 
+	0x05, 0x55, 0x5C, 0x7C, 0x96, 0x5D, 0x5C, 0xD0, 0x01, 0x42, 0xA6, 0x55, 0x5C, 0x34, 0x01, 0xB2, 
+	0x9B, 0x1A, 0x43, 0xB2, 0x19, 0x7E, 0x92, 0xDB, 0x02, 0x42, 0x91, 0x21, 0x01, 0x4A, 0x09, 0x4A, 
+	0x0C, 0x70, 0x11, 0x52, 0xAB, 0x00, 0x6D, 0x46, 0xC0, 0xBD, 0x7F, 0x20, 0x00, 0x01, 0xEB, 0x00, 
+	0x00, 0x61, 0x43, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x16, 0x48, 0x20, 
+	0x00, 0x09, 0x14, 0x20, 0x00, 0x16, 0x30, 0x20, 0x00, 0x01, 0xC4, 0x00, 0x00, 0x7B, 0x92, 0x20, 
+	0x00, 0x02, 0x14, 0x20, 0x00, 0x12, 0x3C, 0x20, 0x00, 0x0A, 0xA4, 0x4B, 0x48, 0xB5, 0xF0, 0x78, 
+	0x1B, 0xB0, 0x89, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x46, 0x20, 0x00, 0xFC, 0xF4, 0xF7, 0xFF, 0x23, 
+	0x00, 0x4A, 0x45, 0x4A, 0x45, 0x70, 0x13, 0x38, 0x01, 0x20, 0x0C, 0x00, 0x81, 0xB2, 0xC0, 0x28, 
+	0x00, 0x50, 0x8B, 0x4B, 0x42, 0xD1, 0xF9, 0x70, 0x18, 0x4A, 0x42, 0x70, 0x13, 0x23, 0x01, 0x70, 
+	0x13, 0x4A, 0x41, 0x7E, 0x19, 0x4B, 0x41, 0x7D, 0xDA, 0x91, 0x04, 0x7D, 0x1B, 0x92, 0x05, 0x1C, 
+	0x0B, 0x93, 0x06, 0x3B, 0x01, 0xE0, 0x2D, 0x1C, 0x5D, 0xB2, 0xDB, 0x01, 0xEA, 0x4C, 0x3C, 0x88, 
+	0x16, 0x19, 0x12, 0x00, 0x5A, 0x49, 0x3B, 0x52, 0x56, 0x01, 0x5C, 0x9A, 0x05, 0x01, 0xAD, 0x46, 
+	0x9C, 0x94, 0x07, 0x3A, 0x01, 0xE0, 0x1A, 0x1C, 0x93, 0xB2, 0xD2, 0x4C, 0x36, 0x18, 0xEB, 0x5B, 
+	0x19, 0x00, 0x5B, 0x2B, 0x00, 0x9B, 0x06, 0x1C, 0xD3, 0xD0, 0x05, 0x00, 0x5B, 0x18, 0xEB, 0x18, 
+	0xC9, 0x5B, 0x1B, 0x9C, 0x07, 0x10, 0x49, 0x00, 0x7B, 0x18, 0xA7, 0x4B, 0x2F, 0x1C, 0x1C, 0x4C, 
+	0x2F, 0x52, 0xE1, 0x1B, 0x89, 0x23, 0x01, 0x18, 0x40, 0x55, 0x3B, 0xD1, 0xE2, 0x2A, 0x00, 0x2B, 
+	0x00, 0x46, 0x63, 0x4B, 0x25, 0xD1, 0xCF, 0x7D, 0xD9, 0x9C, 0x04, 0xF0, 0x01, 0x43, 0x61, 0x4B, 
+	0x28, 0xFC, 0x5D, 0x8C, 0x58, 0x1C, 0x05, 0x28, 0x00, 0x4C, 0x27, 0x23, 0x40, 0xD1, 0x02, 0xE0, 
+	0x07, 0x60, 0x23, 0x1C, 0x29, 0x01, 0x80, 0xFC, 0x50, 0xF0, 0x01, 0xDD, 0x00, 0x28, 0x6E, 0x60, 
+	0x20, 0x20, 0x6E, 0x78, 0x23, 0x4C, 0x12, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x1F, 0x20, 0x00, 0xFC, 
+	0x8A, 0xF7, 0xFF, 0x4A, 0x1E, 0x4B, 0x1B, 0x80, 0x55, 0x8C, 0x5B, 0x78, 0x23, 0x80, 0x13, 0xD0, 
+	0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x00, 0x93, 0x00, 0xF7, 0xFF, 0x1C, 0x0B, 0x4B, 
+	0x18, 0xFC, 0x23, 0x78, 0x1B, 0x48, 0x18, 0x49, 0x18, 0x22, 0x00, 0x3B, 0x01, 0xE0, 0x04, 0x00, 
+	0x5C, 0xB2, 0xDB, 0x52, 0x62, 0x54, 0xC2, 0xD1, 0xF8, 0x2B, 0x00, 0xBD, 0xF0, 0xB0, 0x09, 0x20, 
+	0x00, 0x01, 0xEB, 0x00, 0x00, 0x61, 0x49, 0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x16, 0xBC, 0x20, 
+	0x00, 0x15, 0xF4, 0x20, 0x00, 0x09, 0x20, 0x20, 0x00, 0x16, 0x3C, 0x20, 0x00, 0x09, 0xAE, 0x40, 
+	0x00, 0x40, 0x02, 0x20, 0x00, 0x16, 0x94, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 
+	0x00, 0x0A, 0xB3, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x09, 0x78, 0x00, 0x00, 0x61, 0x52, 0x20, 
+	0x00, 0x16, 0x54, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x0A, 0xA4, 0x20, 0x00, 0x02, 0x14, 0x4A, 
+	0xA0, 0xB5, 0xF0, 0x70, 0x13, 0x23, 0x00, 0xB0, 0x85, 0x4A, 0x9F, 0x4A, 0x9F, 0x70, 0x13, 0x4A, 
+	0x9F, 0x70, 0x13, 0x4B, 0x9F, 0x70, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x01, 0xD0, 0x03, 0xF7, 
+	0xFF, 0x49, 0x9D, 0x24, 0x00, 0xFC, 0x31, 0x4E, 0x9A, 0x4D, 0x9C, 0x78, 0x33, 0xE0, 0x11, 0xD0, 
+	0x0C, 0x2B, 0x00, 0x7D, 0x29, 0x7D, 0xEB, 0x18, 0xC9, 0x48, 0x99, 0x23, 0x00, 0x01, 0xE2, 0x93, 
+	0x00, 0x18, 0x12, 0x20, 0x01, 0xB2, 0xC9, 0xF7, 0xFF, 0x23, 0x02, 0x34, 0x01, 0xFB, 0xC5, 0x7E, 
+	0x29, 0xB2, 0xE4, 0xD3, 0xEA, 0x42, 0x8C, 0x78, 0x1B, 0x4B, 0x92, 0xD1, 0x00, 0x2B, 0x00, 0x4B, 
+	0x91, 0xE1, 0x0D, 0x2A, 0x00, 0x78, 0x1A, 0x4B, 0x90, 0xD1, 0x1F, 0x2B, 0x00, 0x78, 0x1B, 0x7D, 
+	0xEB, 0xD0, 0x1B, 0xE0, 0x07, 0x4C, 0x8E, 0xB2, 0xDB, 0x3B, 0x01, 0x18, 0x2D, 0x01, 0x5D, 0x2B, 
+	0x00, 0x55, 0x2A, 0x1C, 0x03, 0xD1, 0xF8, 0xB2, 0xC0, 0x1E, 0x58, 0xD0, 0x01, 0x2B, 0x00, 0xE7, 
+	0xF6, 0x1C, 0x0B, 0x48, 0x86, 0x4A, 0x87, 0x01, 0x49, 0x78, 0x12, 0x3A, 0x01, 0xE0, 0x03, 0x18, 
+	0x8C, 0xB2, 0xD2, 0x2A, 0x00, 0x54, 0x23, 0x4B, 0x80, 0xD1, 0xF9, 0x78, 0x19, 0x4A, 0x7E, 0x70, 
+	0x11, 0x78, 0x1B, 0xC5, 0xDA, 0xAE, 0xF1, 0x12, 0xD0, 0x70, 0x2B, 0x00, 0x7E, 0x1A, 0x4B, 0x78, 
+	0x92, 0x02, 0x7D, 0xD9, 0x93, 0x03, 0x7D, 0x1B, 0x3B, 0x01, 0xE0, 0x22, 0x1C, 0x59, 0xB2, 0xDB, 
+	0x19, 0xC8, 0x01, 0x89, 0x9D, 0x03, 0x4C, 0x79, 0x5B, 0x00, 0x00, 0x40, 0xD0, 0x04, 0x2D, 0x00, 
+	0x00, 0x49, 0x19, 0x89, 0x18, 0x40, 0x5B, 0x09, 0x01, 0x59, 0x10, 0x40, 0x4D, 0x74, 0x18, 0x89, 
+	0x5B, 0x65, 0x00, 0x4C, 0x08, 0xED, 0x4C, 0x6F, 0x1A, 0x28, 0x5D, 0x0C, 0xDA, 0x04, 0x42, 0x84, 
+	0xDD, 0x00, 0x28, 0xFF, 0x4D, 0x6B, 0x20, 0xFF, 0x2B, 0x00, 0x54, 0x68, 0x1C, 0x11, 0xD1, 0xDD, 
+	0xB2, 0xD2, 0x1E, 0x4A, 0xD0, 0x03, 0x29, 0x00, 0x1C, 0x97, 0x9B, 0x02, 0xE7, 0xF4, 0x1C, 0xD6, 
+	0x4B, 0x65, 0x4A, 0x5F, 0x78, 0x1B, 0x7E, 0x17, 0x01, 0x7F, 0x49, 0x62, 0x3B, 0x01, 0xE0, 0x10, 
+	0x4E, 0x64, 0xB2, 0xDB, 0x5B, 0x94, 0x00, 0x5A, 0x56, 0x45, 0x18, 0xF8, 0x1C, 0x2A, 0xB2, 0x26, 
+	0xDA, 0x00, 0x42, 0xB5, 0xB2, 0x12, 0x1C, 0x22, 0xDD, 0x00, 0x2A, 0xFF, 0x54, 0x42, 0x22, 0xFF, 
+	0xD1, 0xEC, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x50, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x5A, 0x20, 0x03, 
+	0xFB, 0x94, 0xF7, 0xFF, 0x4D, 0x4E, 0x24, 0x00, 0xE0, 0x0E, 0x4E, 0x4B, 0x2B, 0x00, 0x78, 0x33, 
+	0x4B, 0x50, 0xD0, 0x09, 0x18, 0xD2, 0x01, 0x62, 0x7D, 0xE9, 0x23, 0x00, 0x93, 0x00, 0x20, 0x03, 
+	0xF7, 0xFF, 0x23, 0x01, 0x34, 0x01, 0xFB, 0x2B, 0x7E, 0x2B, 0xB2, 0xE4, 0xD8, 0xED, 0x42, 0xA3, 
+	0x23, 0x01, 0x4A, 0x40, 0x4A, 0x3D, 0x70, 0x13, 0x4A, 0x3B, 0x70, 0x13, 0x4B, 0x3E, 0x70, 0x13, 
+	0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x49, 0xD0, 0x6D, 0x02, 0x58, 0x68, 0x1B, 0x4A, 0x3C, 0xD5, 0x69, 
+	0x7D, 0x16, 0x24, 0x80, 0x7D, 0xD2, 0x7E, 0x13, 0x18, 0xB6, 0x4D, 0x45, 0x06, 0x24, 0xB2, 0xF6, 
+	0xE0, 0x18, 0x46, 0xB4, 0xB2, 0xDB, 0x3B, 0x01, 0x00, 0x5A, 0x49, 0x42, 0x5A, 0x56, 0x1C, 0x5F, 
+	0x46, 0x62, 0x01, 0xBF, 0x3A, 0x01, 0xE0, 0x0D, 0x1C, 0x91, 0xB2, 0xD2, 0x48, 0x37, 0x18, 0x79, 
+	0x5A, 0x09, 0x00, 0x49, 0x42, 0x8C, 0x1B, 0x89, 0x1C, 0x0C, 0xDA, 0x00, 0xDD, 0x00, 0x42, 0x8D, 
+	0x2A, 0x00, 0x1C, 0x0D, 0x2B, 0x00, 0xD1, 0xEF, 0x20, 0x16, 0xD1, 0xE4, 0xF7, 0xFF, 0x49, 0x36, 
+	0x4B, 0x25, 0xFB, 0x45, 0x78, 0x1B, 0x4A, 0x35, 0x80, 0x55, 0x80, 0x14, 0xD0, 0x06, 0x2B, 0x00, 
+	0x21, 0x02, 0x23, 0x01, 0x20, 0x16, 0x93, 0x00, 0xF7, 0xFF, 0x1C, 0x0B, 0x4B, 0x26, 0xFA, 0xDF, 
+	0x78, 0x1B, 0x20, 0x80, 0x06, 0x00, 0x49, 0x2A, 0x4D, 0x2E, 0x4E, 0x2D, 0x3B, 0x01, 0xE0, 0x19, 
+	0x5C, 0xF7, 0xB2, 0xDB, 0x46, 0x94, 0x1C, 0x7A, 0x5C, 0xEA, 0x46, 0x64, 0x46, 0xA4, 0x01, 0xA4, 
+	0x44, 0x62, 0x32, 0x02, 0x00, 0x52, 0x4C, 0x1D, 0x4C, 0x22, 0x5B, 0x12, 0x46, 0x94, 0x00, 0x7F, 
+	0x46, 0x64, 0x5B, 0x3A, 0x42, 0x90, 0x1A, 0xA2, 0x1C, 0x10, 0xDA, 0x00, 0xDD, 0x00, 0x42, 0x91, 
+	0x2B, 0x00, 0x1C, 0x11, 0x4B, 0x0C, 0xD1, 0xE3, 0x78, 0x1B, 0x4A, 0x1C, 0x80, 0x51, 0x80, 0x10, 
+	0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x16, 0x93, 0x00, 0xF7, 0xFF, 0x1C, 0x0B, 
+	0xB0, 0x05, 0xFA, 0xAD, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x09, 0xAC, 0x20, 0x00, 0x09, 0x14, 
+	0x20, 0x00, 0x16, 0x30, 0x20, 0x00, 0x16, 0x48, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x61, 0x63, 
+	0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x40, 0x84, 0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x01, 0xE1, 
+	0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x13, 0x64, 0x20, 0x00, 0x09, 0x7C, 0x40, 0x00, 0x40, 0x00, 
+	0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x12, 0x3C, 0x00, 0x00, 0x61, 0x67, 0x20, 0x00, 0x00, 0x58, 
+	0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x16, 0x94, 0x00, 0x00, 0x61, 0x6D, 0x20, 0x00, 0x16, 0x54, 
+	0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 0x4B, 0xB7, 0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0xA5, 
+	0xD0, 0x01, 0x2B, 0x00, 0xFD, 0x6F, 0xF0, 0x00, 0x4C, 0xB5, 0x4A, 0xB4, 0x7C, 0x64, 0x78, 0x12, 
+	0x4E, 0xB5, 0x4D, 0xB4, 0x92, 0x1A, 0xB2, 0x52, 0x22, 0xFF, 0x4F, 0xB4, 0x60, 0x33, 0x60, 0x2B, 
+	0x60, 0x72, 0x60, 0xB3, 0x94, 0x13, 0x60, 0xF2, 0x82, 0x6B, 0x60, 0x6B, 0x82, 0x2B, 0x81, 0x6B, 
+	0x7E, 0x3F, 0x81, 0x2B, 0x97, 0x16, 0x4C, 0xAD, 0x4D, 0xA9, 0x7D, 0xE4, 0x23, 0x46, 0x94, 0x0D, 
+	0x4F, 0xA7, 0x5E, 0xED, 0x23, 0x48, 0x95, 0x04, 0x4C, 0xA8, 0x5E, 0xFF, 0x7D, 0x24, 0x97, 0x06, 
+	0x94, 0x11, 0x4D, 0xA3, 0x23, 0x2D, 0x78, 0x6D, 0x4E, 0xA5, 0x95, 0x0F, 0x98, 0x13, 0x4F, 0xA5, 
+	0x78, 0x3F, 0x68, 0x36, 0x4C, 0x9E, 0x42, 0x40, 0x97, 0x0B, 0x96, 0x14, 0x7C, 0xA4, 0x90, 0x1C, 
+	0x94, 0x22, 0x4D, 0x9B, 0x9E, 0x1A, 0x5C, 0xEB, 0x23, 0x10, 0x93, 0x15, 0x93, 0x1D, 0x1B, 0x9B, 
+	0x57, 0xEF, 0x27, 0x18, 0x97, 0x0C, 0x20, 0x1C, 0x21, 0x19, 0x56, 0x28, 0x56, 0x69, 0x90, 0x10, 
+	0x22, 0x00, 0x23, 0x00, 0x91, 0x23, 0x24, 0x00, 0x25, 0x00, 0x93, 0x07, 0x27, 0x00, 0x26, 0x00, 
+	0x21, 0x00, 0x20, 0xFF, 0x92, 0x08, 0x23, 0xFF, 0x95, 0x12, 0x94, 0x19, 0x97, 0x18, 0x96, 0x1B, 
+	0x91, 0x21, 0x90, 0x0E, 0x93, 0x17, 0x92, 0x1F, 0x9E, 0x16, 0x94, 0x1E, 0xD1, 0x00, 0x2E, 0x00, 
+	0x9B, 0x16, 0xE1, 0x30, 0x3B, 0x01, 0x4D, 0x8C, 0x93, 0x16, 0xB2, 0xDB, 0x5B, 0x5B, 0x00, 0x5B, 
+	0x93, 0x0A, 0x9E, 0x0D, 0xD0, 0xF0, 0x2E, 0x00, 0x48, 0x88, 0x9F, 0x16, 0x01, 0xFB, 0x37, 0x01, 
+	0x88, 0x1B, 0x18, 0x1B, 0x9C, 0x04, 0x99, 0x0A, 0x42, 0x94, 0x1A, 0x5A, 0xF0, 0x00, 0xDA, 0x01, 
+	0x9D, 0x06, 0xFD, 0x1D, 0xDD, 0x01, 0x42, 0x95, 0xFD, 0x14, 0xF0, 0x00, 0x01, 0xBF, 0x9E, 0x16, 
+	0x25, 0x02, 0x21, 0x01, 0x01, 0x70, 0x22, 0x00, 0xE0, 0x2C, 0x97, 0x03, 0x18, 0x84, 0x4D, 0x7C, 
+	0x46, 0x6E, 0x00, 0x64, 0x5B, 0x2C, 0x27, 0x20, 0x1A, 0xE4, 0x5F, 0xBD, 0xDD, 0x01, 0x42, 0xAC, 
+	0x97, 0x08, 0xB2, 0xA7, 0x27, 0x1C, 0x46, 0x6E, 0x42, 0xAC, 0x5F, 0xBD, 0xB2, 0xA4, 0xDA, 0x01, 
+	0x18, 0x82, 0x94, 0x07, 0x00, 0x52, 0x4F, 0x72, 0x9D, 0x0D, 0x52, 0xBB, 0x42, 0x9D, 0xB2, 0xCB, 
+	0x9A, 0x03, 0xD9, 0xBB, 0x19, 0x53, 0x1C, 0x8D, 0x00, 0x5B, 0x4C, 0x6E, 0x9E, 0x0A, 0x5B, 0x1B, 
+	0x1C, 0x0A, 0x9F, 0x04, 0x42, 0xBC, 0x1B, 0x9C, 0xE3, 0x71, 0xDD, 0x00, 0x31, 0x01, 0x9E, 0x06, 
+	0xDA, 0x00, 0x42, 0xB4, 0x9F, 0x11, 0xE0, 0xD8, 0xD0, 0x07, 0x2F, 0x00, 0x1C, 0xD4, 0x9E, 0x03, 
+	0x4F, 0x64, 0x19, 0x34, 0x5B, 0xE4, 0x00, 0x64, 0x10, 0x5B, 0x18, 0xE3, 0x2C, 0x00, 0x9C, 0x0F, 
+	0x4E, 0x61, 0xD0, 0x06, 0x5D, 0xA4, 0x18, 0x84, 0x43, 0x63, 0x9F, 0x14, 0x13, 0x1B, 0x43, 0x7B, 
+	0x2C, 0x00, 0x9C, 0x0B, 0x18, 0x86, 0xD0, 0xBA, 0x00, 0x74, 0x4F, 0x59, 0x46, 0xBC, 0x5B, 0x3F, 
+	0x57, 0xBC, 0x4F, 0x5A, 0x08, 0xF6, 0x46, 0x66, 0x94, 0x09, 0x1B, 0x34, 0x24, 0x20, 0x46, 0x6F, 
+	0x5F, 0xE7, 0x96, 0x05, 0x1A, 0xF4, 0x9E, 0x09, 0xDD, 0x01, 0x42, 0xBC, 0x97, 0x08, 0xB2, 0xA7, 
+	0x27, 0x1C, 0x46, 0x6E, 0x42, 0xB4, 0x5F, 0xBE, 0xFF, 0x72, 0xAE, 0xF1, 0x13, 0xB2, 0xA6, 0xDA, 
+	0x01, 0x9F, 0x13, 0x96, 0x07, 0xDD, 0x62, 0x42, 0xBC, 0x46, 0xA4, 0x18, 0x84, 0x27, 0x00, 0x4C, 
+	0x4D, 0x55, 0x37, 0x46, 0x66, 0x9E, 0x15, 0x9F, 0x05, 0x2E, 0x00, 0x1A, 0xFC, 0x9F, 0x1A, 0xD0, 
+	0x08, 0x9E, 0x1D, 0x9C, 0x09, 0x43, 0x74, 0x43, 0x7B, 0x19, 0x1C, 0x9F, 0x05, 0x1B, 0x3C, 0x11, 
+	0x24, 0x33, 0x7F, 0x1C, 0x23, 0x4F, 0x42, 0xDA, 0x1C, 0x26, 0x80, 0x18, 0x83, 0x9E, 0x23, 0x54, 
+	0xFE, 0x1B, 0xA3, 0x9F, 0x21, 0x97, 0x21, 0x18, 0xFF, 0x23, 0x00, 0xAE, 0x1F, 0x42, 0x9C, 0x5E, 
+	0xF3, 0xB2, 0xA4, 0xDC, 0x01, 0x9B, 0x03, 0x94, 0x1F, 0x19, 0x5D, 0x4C, 0x37, 0x27, 0x00, 0x00, 
+	0x6D, 0x53, 0x2F, 0x5B, 0x2B, 0x4B, 0x38, 0x18, 0x82, 0x24, 0x00, 0x00, 0x52, 0xE7, 0x7E, 0x52, 
+	0xD4, 0x2C, 0x7E, 0x18, 0x83, 0x4E, 0x32, 0xDD, 0x36, 0x54, 0xF7, 0x27, 0x7F, 0x42, 0xBC, 0x9F, 
+	0x0C, 0x9E, 0x19, 0xDB, 0x03, 0x18, 0xF6, 0x1B, 0xE3, 0xAF, 0x12, 0x96, 0x19, 0x5E, 0xFB, 0x23, 
+	0x00, 0xDC, 0x24, 0x42, 0x9C, 0x9E, 0x10, 0xB2, 0xA3, 0xDB, 0x11, 0x42, 0xB4, 0x9C, 0x16, 0x9F, 
+	0x1B, 0xDA, 0x00, 0x42, 0xA7, 0x9E, 0x17, 0x94, 0x1B, 0x42, 0xA6, 0x9C, 0x16, 0x94, 0x17, 0xDD, 
+	0x00, 0x42, 0x96, 0x9E, 0x18, 0x92, 0x18, 0xDA, 0x00, 0x42, 0xBA, 0x9F, 0x0E, 0x92, 0x0E, 0xDA, 
+	0x00, 0x4E, 0x1D, 0x9C, 0x03, 0x00, 0x6D, 0x19, 0x65, 0x53, 0xAB, 0x5B, 0xAC, 0x9E, 0x1C, 0xE7, 
+	0xCA, 0x42, 0xB4, 0x18, 0x87, 0x4C, 0x1B, 0xDA, 0x0E, 0x55, 0x3E, 0x26, 0x00, 0xB2, 0xA3, 0xE7, 
+	0x9A, 0xE7, 0xD8, 0x93, 0x12, 0x54, 0xF4, 0x4E, 0x16, 0xDA, 0xC7, 0x2C, 0x00, 0x42, 0x9C, 0x9B, 
+	0x23, 0xE7, 0xA4, 0xDC, 0xAA, 0x97, 0x20, 0x4E, 0x13, 0x9E, 0x22, 0x5D, 0xBC, 0x42, 0xB7, 0xB2, 
+	0x67, 0x9F, 0x20, 0xD0, 0x88, 0x34, 0x01, 0x4E, 0x0F, 0xE7, 0x83, 0x55, 0xBC, 0x20, 0x00, 0x09, 
+	0xAC, 0x20, 0x00, 0x00, 0x4C, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x15, 
+	0xE4, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x09, 0x78, 0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x16, 
+	0x94, 0x40, 0x00, 0x40, 0x04, 0x20, 0x00, 0x03, 0xF8, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x79, 
+	0x12, 0x20, 0x00, 0x13, 0x64, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x0D, 0x3C, 0x25, 0x01, 0x9E, 
+	0x16, 0x2E, 0x00, 0x95, 0x1E, 0xE6, 0xCE, 0xD0, 0x00, 0x46, 0x6C, 0x4F, 0xD3, 0x46, 0x6E, 0x7E, 
+	0x3B, 0x27, 0x1C, 0x25, 0x20, 0x5B, 0xBF, 0x5B, 0x2D, 0x98, 0x19, 0x4C, 0xD0, 0x60, 0x20, 0x1C, 
+	0x26, 0x82, 0x67, 0x82, 0x25, 0x88, 0x25, 0xAC, 0x12, 0x1C, 0x34, 0x4F, 0xCD, 0x9E, 0x1B, 0x81, 
+	0x35, 0x99, 0x18, 0x98, 0x17, 0x60, 0xBE, 0x9A, 0x0E, 0x60, 0xF8, 0xAE, 0x1F, 0x60, 0x7A, 0x60, 
+	0x39, 0x88, 0x37, 0x9D, 0x21, 0x81, 0x67, 0x60, 0x65, 0xDC, 0x00, 0x2B, 0x04, 0x4C, 0xC2, 0xE2, 
+	0x02, 0x7D, 0xE4, 0x4D, 0xC4, 0x94, 0x1A, 0x3B, 0x02, 0x3C, 0x02, 0x7F, 0x2D, 0x93, 0x1C, 0xB2, 
+	0x6D, 0x27, 0x02, 0x26, 0x02, 0x95, 0x15, 0x4B, 0xC0, 0x96, 0x11, 0x94, 0x14, 0x9D, 0x1A, 0x97, 
+	0x19, 0xDC, 0x00, 0x2D, 0x04, 0x9E, 0x11, 0xE1, 0xE5, 0x99, 0x11, 0x9C, 0x11, 0x34, 0x02, 0x36, 
+	0x01, 0x01, 0xB5, 0x31, 0x03, 0x01, 0x89, 0x01, 0xA4, 0x22, 0x02, 0x96, 0x17, 0x94, 0x13, 0x20, 
+	0x02, 0x95, 0x20, 0x91, 0x18, 0x1C, 0x94, 0x9D, 0x20, 0x00, 0x49, 0x19, 0x29, 0x9E, 0x15, 0x5A, 
+	0xC9, 0xDA, 0x00, 0x42, 0xB1, 0x9F, 0x11, 0xE1, 0xC6, 0x3F, 0x01, 0x9E, 0x11, 0x1C, 0x55, 0x97, 
+	0x12, 0x95, 0x1F, 0x01, 0xB6, 0x1D, 0x17, 0x46, 0xB4, 0x97, 0x07, 0x9E, 0x12, 0x01, 0xB6, 0x9F, 
+	0x1F, 0x1C, 0x3E, 0x96, 0x0E, 0x44, 0x66, 0x46, 0x67, 0x96, 0x08, 0x19, 0x3F, 0x9E, 0x20, 0x97, 
+	0x09, 0x1C, 0xD5, 0x9F, 0x1F, 0x96, 0x0D, 0x19, 0xF6, 0x44, 0xAC, 0x9E, 0x20, 0x96, 0x0A, 0x19, 
+	0x76, 0x19, 0xF7, 0x9E, 0x13, 0x97, 0x0F, 0x19, 0x75, 0x19, 0x37, 0x95, 0x04, 0x9E, 0x07, 0x9D, 
+	0x20, 0x19, 0xAD, 0x97, 0x0B, 0x9E, 0x0E, 0x95, 0x06, 0x9F, 0x20, 0x9D, 0x18, 0x19, 0x34, 0x19, 
+	0x2D, 0x9E, 0x09, 0x94, 0x0E, 0x18, 0xBF, 0x9C, 0x08, 0x95, 0x10, 0x97, 0x0C, 0x00, 0x75, 0x00, 
+	0x67, 0x9E, 0x0D, 0x46, 0x64, 0x94, 0x08, 0x00, 0x64, 0x9C, 0x0A, 0x00, 0x76, 0x9E, 0x0F, 0x96, 
+	0x09, 0x46, 0xA4, 0x00, 0x64, 0x9E, 0x0B, 0x00, 0x74, 0x96, 0x0A, 0x00, 0x76, 0x00, 0x76, 0x9E, 
+	0x04, 0x9E, 0x06, 0x96, 0x0B, 0x96, 0x04, 0x00, 0x76, 0x00, 0x76, 0x9E, 0x0C, 0x9E, 0x10, 0x96, 
+	0x06, 0x96, 0x10, 0x00, 0x76, 0x00, 0x76, 0x9E, 0x0E, 0x5A, 0xFF, 0x96, 0x0E, 0x97, 0x05, 0x46, 
+	0x66, 0x9F, 0x08, 0x5A, 0xED, 0x5A, 0xFF, 0x95, 0x07, 0x97, 0x08, 0x9D, 0x09, 0x9F, 0x0A, 0x5A, 
+	0xED, 0x5A, 0xF6, 0x95, 0x09, 0x96, 0x0D, 0x9D, 0x04, 0x9E, 0x06, 0x5A, 0xE4, 0x5A, 0xFF, 0x94, 
+	0x0F, 0x97, 0x0A, 0x9C, 0x0B, 0x94, 0x0B, 0x5A, 0xE4, 0x5A, 0xED, 0x9C, 0x10, 0x5A, 0xE4, 0x5A, 
+	0xF7, 0x94, 0x06, 0x46, 0xAC, 0x1C, 0x0C, 0x9D, 0x0E, 0x34, 0x0A, 0x5A, 0xED, 0x42, 0xA7, 0x95, 
+	0x04, 0x9E, 0x09, 0xDC, 0x02, 0xDD, 0x54, 0x42, 0xA6, 0x42, 0xA7, 0x9F, 0x0D, 0x45, 0xA4, 0xDC, 
+	0x01, 0x9D, 0x09, 0xDD, 0x4F, 0xDC, 0x4C, 0x42, 0xA9, 0x42, 0xB1, 0x9E, 0x0D, 0x9F, 0x05, 0xDC, 
+	0x49, 0x19, 0xCD, 0x9E, 0x07, 0x18, 0x76, 0x9F, 0x0A, 0x1C, 0x3E, 0x46, 0xB4, 0x44, 0x66, 0x9F, 
+	0x08, 0x46, 0xBC, 0x18, 0x7F, 0x9F, 0x0F, 0x96, 0x10, 0x19, 0x75, 0x9E, 0x0B, 0x9F, 0x10, 0x1C, 
+	0x3E, 0x96, 0x0E, 0x44, 0x66, 0x42, 0xAF, 0x46, 0xBC, 0x46, 0xAC, 0xDD, 0x00, 0x46, 0x66, 0x9F, 
+	0x0E, 0x42, 0xBE, 0x96, 0x1B, 0x97, 0x1B, 0xDD, 0x00, 0x9F, 0x0D, 0x9E, 0x09, 0x46, 0xB4, 0x18, 
+	0x76, 0x9F, 0x1B, 0x1C, 0x3E, 0x96, 0x1D, 0x44, 0x66, 0x42, 0xB7, 0x46, 0xBC, 0x46, 0xB4, 0xDD, 
+	0x00, 0xD1, 0x00, 0x45, 0xAC, 0x9D, 0x10, 0xE2, 0x42, 0xD1, 0x00, 0x45, 0xAC, 0x9E, 0x0E, 0xE2, 
+	0x88, 0xD1, 0x00, 0x45, 0xB4, 0x9F, 0x11, 0xE2, 0xDB, 0x01, 0x7F, 0x9D, 0x1F, 0x18, 0xBF, 0x46, 
+	0xBC, 0x44, 0xAC, 0x1E, 0x7E, 0x96, 0x10, 0x00, 0x76, 0x46, 0x66, 0x00, 0x7F, 0x97, 0x0C, 0x4D, 
+	0x4F, 0x9F, 0x10, 0x00, 0x76, 0x26, 0x0A, 0x46, 0xB4, 0x9F, 0x0C, 0x53, 0x7E, 0x46, 0x67, 0x53, 
+	0x7E, 0x9F, 0x04, 0x53, 0x7E, 0xDC, 0x02, 0x42, 0xA7, 0x42, 0xA5, 0x9D, 0x07, 0x9E, 0x0A, 0xDD, 
+	0x55, 0xDC, 0x02, 0x42, 0xA6, 0x42, 0xA7, 0x9F, 0x06, 0x9D, 0x07, 0xDD, 0x4F, 0xDC, 0x4C, 0x42, 
+	0xA9, 0x42, 0xB1, 0x9E, 0x0A, 0x9D, 0x05, 0xDC, 0x49, 0x19, 0x4F, 0x9E, 0x07, 0x18, 0x76, 0x9D, 
+	0x0A, 0x1C, 0x2E, 0x46, 0xB4, 0x44, 0x66, 0x9D, 0x08, 0x46, 0xAC, 0x18, 0x6D, 0x9D, 0x0F, 0x96, 
+	0x06, 0x19, 0xF7, 0x9E, 0x0B, 0x9D, 0x06, 0x1C, 0x2E, 0x96, 0x0C, 0x44, 0x66, 0x42, 0xBD, 0x46, 
+	0xAC, 0x46, 0xBC, 0xDD, 0x00, 0x46, 0x66, 0x9D, 0x0C, 0x42, 0xAE, 0x96, 0x10, 0x95, 0x10, 0xDD, 
+	0x00, 0x9D, 0x0D, 0x9E, 0x09, 0x46, 0xB4, 0x18, 0x76, 0x9D, 0x10, 0x1C, 0x2E, 0xC4, 0xED, 0xAE, 
+	0xF1, 0x14, 0x96, 0x0E, 0x44, 0x66, 0x42, 0xB5, 0x46, 0xAC, 0x46, 0xB4, 0xDD, 0x00, 0xD1, 0x00, 
+	0x45, 0xBC, 0x9D, 0x06, 0xE1, 0xB8, 0xD1, 0x00, 0x45, 0xAC, 0x9E, 0x0C, 0xE2, 0x02, 0xD1, 0x00, 
+	0x45, 0xB4, 0x9F, 0x11, 0xE2, 0x42, 0x01, 0x7F, 0x9D, 0x1F, 0x18, 0xBF, 0x46, 0xBC, 0x44, 0xAC, 
+	0x1E, 0x7E, 0x96, 0x06, 0x00, 0x76, 0x46, 0x66, 0x00, 0x7F, 0x97, 0x04, 0x4D, 0x21, 0x9F, 0x06, 
+	0x00, 0x76, 0x26, 0x0A, 0x46, 0xB4, 0x9F, 0x04, 0x53, 0x7E, 0x46, 0x67, 0x53, 0x7E, 0x9F, 0x05, 
+	0x53, 0x7E, 0xDD, 0x58, 0x42, 0xA7, 0x42, 0xA5, 0x9D, 0x0B, 0x9E, 0x07, 0xDD, 0x55, 0x18, 0x76, 
+	0x9D, 0x0A, 0x1C, 0x2E, 0x46, 0xB4, 0x44, 0x66, 0x9D, 0x08, 0x46, 0xAC, 0x18, 0x6D, 0x9D, 0x0F, 
+	0x96, 0x06, 0x19, 0xCF, 0x9E, 0x0B, 0x1C, 0x2E, 0x19, 0xF7, 0x44, 0x66, 0x9D, 0x06, 0x46, 0xAC, 
+	0x96, 0x10, 0xDD, 0x00, 0x42, 0xBD, 0x9D, 0x10, 0x46, 0xBC, 0x96, 0x0C, 0x46, 0x66, 0xDD, 0x00, 
+	0x42, 0xAE, 0x9E, 0x09, 0x95, 0x0C, 0x18, 0x76, 0x9D, 0x0D, 0x1C, 0x2E, 0x46, 0xB4, 0x44, 0x66, 
+	0x9D, 0x0C, 0x46, 0xAC, 0x96, 0x0E, 0xDD, 0x0D, 0x42, 0xB5, 0xE0, 0x0B, 0x46, 0xB4, 0x20, 0x00, 
+	0x09, 0xAE, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x15, 0xE4, 0x20, 0x00, 0x12, 0x48, 0x40, 0x00, 
+	0x40, 0x00, 0x20, 0x00, 0x0D, 0x3C, 0xD1, 0x00, 0x45, 0xBC, 0x9D, 0x06, 0xE0, 0xD9, 0xD1, 0x00, 
+	0x45, 0xAC, 0x9E, 0x10, 0xE1, 0x21, 0xD1, 0x00, 0x45, 0xB4, 0x9F, 0x11, 0xE1, 0x37, 0x01, 0x7F, 
+	0x9D, 0x1F, 0x18, 0xBF, 0x46, 0xBC, 0x44, 0xAC, 0x1E, 0x7E, 0x96, 0x06, 0x00, 0x76, 0x46, 0x66, 
+	0x00, 0x7F, 0x97, 0x04, 0x4D, 0xD8, 0x9F, 0x06, 0x00, 0x76, 0x26, 0x0A, 0x46, 0xB4, 0x9F, 0x04, 
+	0x53, 0x7E, 0x46, 0x67, 0x53, 0x7E, 0x9F, 0x08, 0x53, 0x7E, 0xDD, 0x3D, 0x42, 0xA7, 0x42, 0xA5, 
+	0x9D, 0x0F, 0x9E, 0x05, 0xDD, 0x3A, 0x18, 0x76, 0x9F, 0x07, 0x9E, 0x08, 0x46, 0xB4, 0x19, 0xCC, 
+	0x9D, 0x0A, 0x9E, 0x0F, 0x19, 0x8F, 0x9D, 0x0B, 0x19, 0x2C, 0x19, 0xF7, 0x94, 0x05, 0x97, 0x07, 
+	0x1C, 0x2C, 0x44, 0x64, 0x9F, 0x05, 0x42, 0xA7, 0x46, 0xBC, 0x46, 0xA4, 0xDD, 0x00, 0x45, 0xB4, 
+	0x9E, 0x07, 0x46, 0xB4, 0xDD, 0x00, 0x9E, 0x0D, 0x9D, 0x09, 0x18, 0x77, 0x19, 0x49, 0x42, 0xB9, 
+	0x46, 0x61, 0x1C, 0x39, 0xDD, 0x00, 0xD1, 0x00, 0x42, 0xA1, 0x9C, 0x05, 0xE0, 0xB1, 0xD1, 0x00, 
+	0x42, 0xA1, 0x9D, 0x07, 0xE0, 0xC4, 0xD1, 0x00, 0x42, 0xA9, 0x9C, 0x11, 0xE1, 0x2C, 0x01, 0x61, 
+	0x9D, 0x1F, 0x4E, 0xB8, 0x18, 0x8A, 0x19, 0x49, 0x1E, 0x54, 0x00, 0x64, 0x27, 0x0A, 0x00, 0x49, 
+	0x00, 0x52, 0x53, 0xA7, 0x25, 0x0A, 0x53, 0x8F, 0x53, 0x95, 0x99, 0x14, 0x30, 0x01, 0x1C, 0x02, 
+	0xB2, 0xC0, 0xDA, 0x00, 0x42, 0x88, 0x9A, 0x19, 0xE6, 0x28, 0x32, 0x01, 0x9C, 0x1C, 0x92, 0x19, 
+	0xB2, 0xD2, 0x42, 0xA2, 0x92, 0x11, 0xE6, 0x0C, 0xDA, 0x00, 0x78, 0x3B, 0x4F, 0xAB, 0xD0, 0x4D, 
+	0x2B, 0x00, 0x78, 0x33, 0x4E, 0xAA, 0xD0, 0x03, 0x2B, 0x00, 0x68, 0x1B, 0x4B, 0xA9, 0xDD, 0x20, 
+	0x2B, 0x00, 0x78, 0x23, 0x4C, 0xA8, 0xD0, 0x00, 0x2B, 0x00, 0x4D, 0xA7, 0xE1, 0xD5, 0x2B, 0x00, 
+	0x7E, 0x2B, 0x4F, 0xA6, 0xD0, 0x13, 0x78, 0x23, 0x25, 0x00, 0xD0, 0x08, 0x2B, 0x00, 0x01, 0x6A, 
+	0x48, 0xA2, 0x23, 0x01, 0x7D, 0xC1, 0x20, 0x03, 0x19, 0xD2, 0xF7, 0xFE, 0x93, 0x00, 0x48, 0x9E, 
+	0xFE, 0x9B, 0x7E, 0x03, 0x35, 0x01, 0x42, 0xAB, 0xB2, 0xED, 0x4C, 0x97, 0xD8, 0xED, 0x2B, 0x00, 
+	0x78, 0x23, 0x78, 0x33, 0xD0, 0x24, 0xD0, 0x03, 0x2B, 0x00, 0x68, 0x1B, 0x4B, 0x95, 0xDD, 0x1D, 
+	0x2B, 0x00, 0x78, 0x23, 0x4C, 0x94, 0xD0, 0x00, 0x2B, 0x00, 0x4D, 0x93, 0xE1, 0xA8, 0x2B, 0x00, 
+	0x7E, 0x2B, 0x4D, 0x8C, 0xD0, 0x14, 0x26, 0x00, 0x9F, 0x16, 0x2B, 0x00, 0x78, 0x23, 0x48, 0x8E, 
+	0xD0, 0x08, 0x7D, 0xC1, 0x01, 0xBA, 0x20, 0x03, 0x19, 0x52, 0x96, 0x00, 0x23, 0x02, 0xFE, 0x72, 
+	0xF7, 0xFE, 0x37, 0x01, 0x49, 0x89, 0xB2, 0xFF, 0x7E, 0x0B, 0xD8, 0xED, 0x42, 0xBB, 0x7D, 0x23, 
+	0x4C, 0x86, 0xD1, 0x00, 0x2B, 0x00, 0x7E, 0x22, 0xE1, 0x45, 0x3A, 0x01, 0x7D, 0xE4, 0xB2, 0xD2, 
+	0x49, 0x84, 0x20, 0x00, 0x34, 0x02, 0x01, 0x9B, 0x1C, 0x53, 0x00, 0x5B, 0x19, 0x1B, 0x5A, 0x5D, 
+	0x3A, 0x01, 0x5A, 0x5D, 0xB2, 0xD2, 0xE7, 0xF5, 0x52, 0x58, 0x94, 0x1E, 0x24, 0x01, 0x9F, 0x12, 
+	0xE4, 0x39, 0x01, 0x7F, 0x9D, 0x11, 0x01, 0x6F, 0x46, 0xBC, 0x42, 0x6D, 0x25, 0x01, 0x9E, 0x17, 
+	0x44, 0x94, 0x9D, 0x1F, 0x44, 0xAC, 0x19, 0x76, 0x01, 0x76, 0x96, 0x0C, 0x18, 0xBF, 0x46, 0x66, 
+	0x00, 0x7F, 0x9F, 0x0C, 0x97, 0x06, 0x1C, 0x35, 0x00, 0x76, 0x96, 0x04, 0x00, 0x7F, 0x46, 0xBC, 
+	0x4E, 0x69, 0x53, 0xAF, 0x27, 0x0A, 0x53, 0xAF, 0x9D, 0x06, 0x53, 0xAF, 0x46, 0x65, 0x9F, 0x12, 
+	0xE7, 0x23, 0x9D, 0x17, 0x99, 0x11, 0x01, 0x49, 0x01, 0x7C, 0x18, 0xA4, 0x9F, 0x1F, 0x01, 0x6E, 
+	0x46, 0x8C, 0x3C, 0x01, 0x49, 0x60, 0x19, 0xF6, 0x44, 0x62, 0x00, 0x64, 0x00, 0x52, 0x27, 0x0A, 
+	0x25, 0x0A, 0x00, 0x76, 0x52, 0x65, 0x22, 0x0A, 0x52, 0x57, 0xE7, 0x4D, 0x52, 0x72, 0x99, 0x17, 
+	0x9D, 0x12, 0x01, 0x6C, 0x9F, 0x11, 0x01, 0x7E, 0x01, 0x49, 0x18, 0xA4, 0x46, 0x8C, 0x18, 0xB6, 
+	0x49, 0x55, 0x44, 0x62, 0x00, 0x64, 0x52, 0x65, 0x25, 0x0A, 0x00, 0x52, 0x00, 0x76, 0x24, 0x0A, 
+	0x27, 0x0A, 0x52, 0x54, 0x52, 0x77, 0x9E, 0x12, 0xE7, 0x38, 0x01, 0x76, 0x9D, 0x11, 0x01, 0x6F, 
+	0x46, 0xB4, 0x44, 0x94, 0x9D, 0x17, 0x46, 0x65, 0x01, 0x6E, 0x18, 0xBF, 0x00, 0x6D, 0x95, 0x04, 
+	0x18, 0xB6, 0x00, 0x76, 0x00, 0x7F, 0x46, 0xB4, 0x97, 0x06, 0x9E, 0x04, 0x4F, 0x46, 0x53, 0xF5, 
+	0x25, 0x0A, 0x53, 0xF5, 0x9E, 0x06, 0x53, 0xF5, 0x46, 0x66, 0x9F, 0x17, 0xE6, 0xDD, 0x01, 0x7F, 
+	0x9D, 0x12, 0x01, 0x6F, 0x46, 0xBC, 0x44, 0x94, 0x9D, 0x11, 0x9D, 0x1F, 0x01, 0x6E, 0x19, 0x7F, 
+	0x18, 0xB6, 0x42, 0x6D, 0x25, 0x01, 0x00, 0x76, 0x44, 0xAC, 0x46, 0x66, 0x96, 0x06, 0x00, 0x76, 
+	0x4D, 0x39, 0x46, 0xB4, 0x00, 0x7F, 0x53, 0x7E, 0x26, 0x0A, 0x9F, 0x06, 0x97, 0x04, 0x46, 0x67, 
+	0x53, 0x7E, 0xE6, 0xC0, 0x53, 0x7E, 0x9D, 0x11, 0x9F, 0x12, 0x46, 0xBC, 0x01, 0x7F, 0x25, 0x01, 
+	0x01, 0x6F, 0x44, 0x94, 0x42, 0x6D, 0x44, 0xAC, 0x9E, 0x17, 0x01, 0x76, 0x9D, 0x1F, 0x18, 0xBF, 
+	0x19, 0x76, 0x00, 0x7F, 0x96, 0x0C, 0x97, 0x06, 0x46, 0x66, 0x00, 0x76, 0x9F, 0x0C, 0x00, 0x7F, 
+	0x1C, 0x35, 0x4E, 0x28, 0x96, 0x04, 0x27, 0x0A, 0x46, 0xBC, 0x9D, 0x06, 0x53, 0xAF, 0x46, 0x65, 
+	0x53, 0xAF, 0xE6, 0x44, 0x53, 0xAF, 0x9F, 0x12, 0x9E, 0x17, 0x01, 0x71, 0x9D, 0x11, 0x01, 0x6D, 
+	0x01, 0x7C, 0x18, 0x8E, 0x9F, 0x1F, 0x49, 0x1F, 0x46, 0xAC, 0x44, 0x62, 0x19, 0xE4, 0xE7, 0x7B, 
+	0x3E, 0x01, 0x9D, 0x11, 0x9F, 0x12, 0x46, 0xBC, 0x01, 0x7F, 0x25, 0x01, 0x01, 0x6F, 0x44, 0x94, 
+	0x42, 0x6D, 0x44, 0xAC, 0x9E, 0x17, 0x9F, 0x1F, 0x18, 0xBD, 0x19, 0xF6, 0x01, 0x76, 0x9F, 0x0E, 
+	0x96, 0x0E, 0xD2, 0x29, 0xAE, 0xF1, 0x15, 0x00, 0x76, 0x46, 0x66, 0x95, 0x10, 0x00, 0x6D, 0x1C, 
+	0x35, 0x00, 0x7F, 0x4E, 0x11, 0x96, 0x0C, 0x27, 0x0A, 0x46, 0xBC, 0x9D, 0x10, 0x53, 0xAF, 0x46, 
+	0x65, 0x53, 0xAF, 0xE5, 0xBA, 0x53, 0xAF, 0x9D, 0x11, 0x9E, 0x12, 0x46, 0xB4, 0x01, 0x76, 0x9D, 
+	0x17, 0x01, 0x6F, 0x01, 0x6E, 0x44, 0x94, 0x00, 0x6D, 0x46, 0x65, 0x18, 0xB6, 0x18, 0xBF, 0x00, 
+	0x7F, 0x95, 0x04, 0x97, 0x06, 0x00, 0x76, 0x4F, 0x04, 0x46, 0xB4, 0x25, 0x0A, 0x9E, 0x04, 0x9E, 
+	0x06, 0x53, 0xF5, 0x46, 0x66, 0x53, 0xF5, 0xE5, 0xFC, 0x53, 0xF5, 0x20, 0x00, 0x0D, 0x3C, 0x20, 
+	0x00, 0x03, 0x1C, 0x20, 0x00, 0x01, 0xDE, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x01, 0xEB, 0x20, 
+	0x00, 0x09, 0xAE, 0x20, 0x00, 0x13, 0x64, 0x40, 0x00, 0x40, 0x00, 0x9D, 0x11, 0x9E, 0x12, 0x46, 
+	0xB4, 0x01, 0x76, 0x9D, 0x17, 0x01, 0x6F, 0x01, 0x6E, 0x44, 0x94, 0x00, 0x6D, 0x46, 0x65, 0x18, 
+	0xB6, 0x18, 0xBF, 0x00, 0x7F, 0x95, 0x0C, 0x97, 0x10, 0x00, 0x76, 0x4F, 0x3A, 0x46, 0xB4, 0x25, 
+	0x0A, 0x9E, 0x0C, 0x9E, 0x10, 0x53, 0xF5, 0x46, 0x66, 0x53, 0xF5, 0xE5, 0x76, 0x53, 0xF5, 0x9D, 
+	0x12, 0x9F, 0x17, 0x46, 0xBC, 0x01, 0x7F, 0x9D, 0x11, 0x01, 0x6F, 0x01, 0x6E, 0x44, 0x94, 0x18, 
+	0xB6, 0x9D, 0x1F, 0x25, 0x01, 0x19, 0x7F, 0x44, 0xAC, 0x42, 0x6D, 0x96, 0x06, 0x00, 0x76, 0x4D, 
+	0x2D, 0x46, 0x66, 0x00, 0x7F, 0x00, 0x76, 0x26, 0x0A, 0x46, 0xB4, 0x97, 0x04, 0x53, 0x7E, 0x53, 
+	0x7E, 0x9F, 0x06, 0x53, 0x7E, 0x46, 0x67, 0x4D, 0x28, 0xE5, 0xB5, 0x7E, 0xAB, 0x4E, 0x28, 0x4F, 
+	0x28, 0x68, 0x32, 0x21, 0x08, 0x43, 0x53, 0x48, 0x27, 0x5E, 0x79, 0x4A, 0x27, 0x11, 0x9B, 0x0F, 
+	0xDC, 0x17, 0xCD, 0x42, 0x99, 0x78, 0x00, 0x70, 0x15, 0x41, 0x65, 0xD1, 0x0A, 0x28, 0x00, 0x2C, 
+	0x00, 0x9C, 0x1E, 0x23, 0x01, 0xD0, 0x07, 0x4A, 0x21, 0x70, 0x13, 0x70, 0x13, 0x49, 0x21, 0x70, 
+	0x0B, 0x4A, 0x21, 0xB0, 0x25, 0x70, 0x13, 0x9F, 0x17, 0xBD, 0xF0, 0x01, 0x7F, 0x9D, 0x12, 0x01, 
+	0x6F, 0x46, 0xBC, 0x44, 0x94, 0x9D, 0x11, 0x9D, 0x1F, 0x01, 0x6E, 0x19, 0x7F, 0x18, 0xB6, 0x42, 
+	0x6D, 0x25, 0x01, 0x00, 0x76, 0x44, 0xAC, 0x46, 0x66, 0x96, 0x10, 0x00, 0x76, 0x4D, 0x0E, 0x46, 
+	0xB4, 0x00, 0x7F, 0x53, 0x7E, 0x26, 0x0A, 0x9F, 0x10, 0x97, 0x0C, 0x46, 0x67, 0x53, 0x7E, 0xE5, 
+	0x1C, 0x53, 0x7E, 0x97, 0x1E, 0x27, 0x01, 0xFA, 0xC7, 0xF7, 0xFF, 0x96, 0x1E, 0x26, 0x01, 0xFA, 
+	0xC3, 0xF7, 0xFF, 0x49, 0x0D, 0x20, 0x03, 0xFD, 0x30, 0xF7, 0xFE, 0x20, 0x03, 0xE6, 0x51, 0xF7, 
+	0xFE, 0x49, 0x0B, 0xE6, 0x24, 0xFD, 0x2B, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 0x12, 0x48, 0x20, 
+	0x00, 0x09, 0x78, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 0x09, 0x14, 0x20, 
+	0x00, 0x16, 0x30, 0x20, 0x00, 0x16, 0x48, 0x20, 0x00, 0x01, 0xC4, 0x00, 0x00, 0x61, 0xB4, 0x00, 
+	0x00, 0x61, 0xA8, 0x4B, 0x2F, 0xB5, 0xF0, 0x78, 0x1C, 0xB0, 0x85, 0x4E, 0x2F, 0x4D, 0x2E, 0x3C, 
+	0x01, 0xE0, 0x10, 0x57, 0x2B, 0xB2, 0xE4, 0x1C, 0x59, 0x57, 0x32, 0x01, 0x89, 0x32, 0x02, 0x4A, 
+	0x2B, 0x18, 0x89, 0x5A, 0x88, 0x00, 0x49, 0x00, 0x5B, 0x4A, 0x2A, 0x1C, 0x21, 0x5A, 0x9A, 0xFF, 
+	0x82, 0xF7, 0xFE, 0xD1, 0xEC, 0x2C, 0x00, 0x78, 0x1B, 0x4B, 0x27, 0xD0, 0x08, 0x2B, 0x00, 0x20, 
+	0x03, 0x4B, 0x20, 0x23, 0x01, 0x78, 0x19, 0x4A, 0x24, 0x93, 0x00, 0xF7, 0xFE, 0x23, 0x02, 0x4B, 
+	0x23, 0xFC, 0x95, 0x78, 0x18, 0x49, 0x1E, 0x1C, 0x84, 0x78, 0x9A, 0x78, 0xDE, 0x92, 0x03, 0x94, 
+	0x02, 0x23, 0x00, 0x01, 0xA4, 0xE0, 0x0D, 0x00, 0x64, 0x19, 0xE4, 0x25, 0x00, 0x5A, 0x65, 0x32, 
+	0x01, 0x52, 0x65, 0x9C, 0x02, 0xE0, 0x02, 0x18, 0xE7, 0x22, 0x00, 0xD1, 0xF2, 0x1A, 0xB4, 0x9D, 
+	0x03, 0x33, 0x01, 0x42, 0xAA, 0x18, 0x1A, 0x4B, 0x15, 0xDB, 0xF5, 0x78, 0x58, 0x49, 0x10, 0x1C, 
+	0x42, 0x78, 0xDE, 0x42, 0x5B, 0x23, 0x01, 0x22, 0x00, 0x92, 0x02, 0xE0, 0x08, 0x1C, 0x9F, 0x18, 
+	0xAC, 0x9D, 0x02, 0x19, 0xE4, 0x01, 0xA4, 0x5A, 0x65, 0x00, 0x64, 0x52, 0x65, 0x25, 0x00, 0x18, 
+	0x14, 0x32, 0x01, 0xDB, 0xF3, 0x42, 0xB4, 0x33, 0x01, 0x9A, 0x03, 0xDB, 0xEC, 0x42, 0x93, 0xBD, 
+	0xF0, 0xB0, 0x05, 0x20, 0x00, 0x09, 0x7C, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x2A, 0x40, 
+	0x00, 0x40, 0x00, 0x20, 0x00, 0x16, 0x94, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x12, 0x3C, 0x20, 
+	0x00, 0x03, 0x0A, 0x4B, 0x0C, 0xB5, 0x30, 0x78, 0xDB, 0x4C, 0x0C, 0xE0, 0x10, 0x49, 0x0C, 0xB2, 
+	0xDB, 0x3B, 0x01, 0x4D, 0x0B, 0x1C, 0x5A, 0x19, 0x52, 0x01, 0xD2, 0xD1, 0x03, 0x1C, 0x45, 0x00, 
+	0x5A, 0x88, 0x15, 0xE0, 0x04, 0x52, 0x55, 0x01, 0x5A, 0x88, 0x15, 0x00, 0x52, 0x18, 0x12, 0x2B, 
+	0x00, 0x53, 0x15, 0xBD, 0x30, 0xD1, 0xEC, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x03, 0xF8, 0x20, 
+	0x00, 0x16, 0x94, 0x40, 0x00, 0x40, 0x02, 0xB0, 0x8D, 0xB5, 0xF0, 0x92, 0x0B, 0x91, 0x0A, 0x1C, 
+	0x41, 0x4B, 0x63, 0x4A, 0x63, 0xD1, 0x0C, 0x7E, 0x12, 0x49, 0x63, 0x92, 0x03, 0x3A, 0x01, 0x78, 
+	0x5E, 0x78, 0xDA, 0x23, 0x00, 0x00, 0x54, 0x18, 0x64, 0x1C, 0x55, 0xE0, 0x0E, 0x46, 0x94, 0x79, 
+	0x5A, 0x7B, 0xDC, 0x3A, 0x01, 0x18, 0xA2, 0x4A, 0x5C, 0xE0, 0x10, 0x01, 0xC9, 0x18, 0xE9, 0x88, 
+	0x0A, 0x18, 0x89, 0x53, 0xE2, 0x00, 0x5F, 0x22, 0x00, 0x88, 0x0A, 0x3B, 0x01, 0x80, 0x0A, 0x19, 
+	0xDA, 0x46, 0x67, 0xDA, 0xF0, 0x42, 0xB2, 0x24, 0x00, 0x9A, 0x03, 0x4D, 0x54, 0x01, 0x56, 0x23, 
+	0x00, 0x18, 0x36, 0x1C, 0x11, 0x00, 0x76, 0x93, 0x07, 0x93, 0x08, 0x93, 0x05, 0x93, 0x06, 0x96, 
+	0x09, 0x95, 0x03, 0xE0, 0x55, 0x46, 0xA4, 0xD1, 0x04, 0x1C, 0x44, 0x00, 0x56, 0x4C, 0x4A, 0x5A, 
+	0xE4, 0x19, 0x34, 0x4C, 0x4B, 0xE0, 0x04, 0x19, 0x3E, 0x9F, 0x09, 0x5B, 0x34, 0x01, 0x5C, 0x4F, 
+	0x46, 0x1C, 0x4E, 0x01, 0xF6, 0x96, 0x04, 0x88, 0x37, 0x19, 0xF6, 0xB2, 0x3E, 0xB2, 0x24, 0x1B, 
+	0xA6, 0x4F, 0x45, 0x19, 0xE7, 0x00, 0x54, 0x52, 0xFE, 0x17, 0xF4, 0x40, 0x66, 0x19, 0x36, 0x24, 
+	0x01, 0x1C, 0x0F, 0x42, 0xB9, 0x43, 0xA7, 0x9C, 0x07, 0xD1, 0x09, 0x94, 0x07, 0x19, 0xA4, 0xDD, 
+	0x00, 0x42, 0xB5, 0x9F, 0x06, 0x1C, 0x35, 0xDB, 0x0B, 0x42, 0xB7, 0x9C, 0x08, 0xE0, 0x0D, 0x19, 
+	0xA4, 0x9F, 0x03, 0x42, 0xB7, 0x94, 0x08, 0x96, 0x03, 0xDD, 0x00, 0x42, 0xB4, 0x9C, 0x05, 0xE0, 
+	0x02, 0xDB, 0x02, 0xE0, 0x00, 0x96, 0x06, 0x9E, 0x04, 0x96, 0x05, 0x4E, 0x2F, 0x01, 0xF4, 0x1C, 
+	0x47, 0x19, 0xA4, 0x88, 0x27, 0xD1, 0x0E, 0x97, 0x04, 0x4E, 0x2B, 0x19, 0xBE, 0x00, 0x57, 0x27, 
+	0x10, 0x96, 0x02, 0x5B, 0xBF, 0x46, 0x6E, 0x52, 0xF7, 0x9E, 0x02, 0x26, 0x00, 0x88, 0x26, 0xE0, 
+	0x05, 0x80, 0x26, 0x4E, 0x27, 0x88, 0x27, 0x19, 0xA6, 0x9C, 0x09, 0x53, 0x37, 0x01, 0x5C, 0x3B, 
+	0x02, 0x39, 0x01, 0xDA, 0xA7, 0x45, 0x61, 0xD1, 0x13, 0x30, 0x01, 0x78, 0x23, 0x4C, 0x23, 0xD0, 
+	0x03, 0x2B, 0x00, 0x49, 0x22, 0x20, 0x01, 0x59, 0x73, 0xAE, 0xF1, 0x16, 0xFB, 0xE8, 0xF7, 0xFE, 
+	0x2B, 0x00, 0x78, 0x23, 0x4B, 0x17, 0xD0, 0x08, 0x78, 0xD9, 0x20, 0x01, 0x93, 0x00, 0x23, 0x00, 
+	0x23, 0x02, 0x4A, 0x16, 0xFB, 0x84, 0xF7, 0xFE, 0x9F, 0x08, 0x9E, 0x07, 0x19, 0xF3, 0x9C, 0x0A, 
+	0x9E, 0x05, 0x60, 0x23, 0x9C, 0x06, 0x9F, 0x03, 0x1B, 0x65, 0x1B, 0xF3, 0xDA, 0x00, 0x42, 0x9D, 
+	0x9E, 0x0B, 0x1C, 0x1D, 0x60, 0x35, 0x4C, 0x12, 0x2B, 0x00, 0x78, 0x23, 0x20, 0x0B, 0xD0, 0x03, 
+	0xF7, 0xFE, 0x49, 0x11, 0x78, 0x23, 0xFB, 0xC5, 0xD0, 0x08, 0x2B, 0x00, 0x20, 0x0B, 0x4B, 0x06, 
+	0x23, 0x01, 0x7E, 0x19, 0x4A, 0x09, 0x93, 0x00, 0xF7, 0xFE, 0x23, 0x02, 0xB0, 0x0D, 0xFB, 0x61, 
+	0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x16, 0x94, 
+	0x40, 0x00, 0x40, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x16, 0x54, 
+	0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x61, 0x7E, 0x00, 0x00, 0x61, 0x85, 0x4B, 0xA6, 0xB5, 0xF0, 
+	0x78, 0x1D, 0xB0, 0x85, 0xD0, 0x29, 0x2D, 0x00, 0x4C, 0xA5, 0x4B, 0xA4, 0x4B, 0xA5, 0x78, 0x18, 
+	0x68, 0x19, 0xB2, 0x46, 0x00, 0xB2, 0x68, 0x5B, 0x51, 0x13, 0x18, 0xCB, 0xB2, 0xD2, 0x1D, 0x82, 
+	0x23, 0x06, 0x25, 0x00, 0xB2, 0xDB, 0x3B, 0x01, 0xD5, 0x00, 0x1A, 0xF1, 0x00, 0x89, 0x31, 0x0C, 
+	0x18, 0x6D, 0x59, 0x09, 0x2A, 0x0B, 0x1C, 0x11, 0x39, 0x0C, 0xD9, 0x01, 0x00, 0x89, 0xB2, 0xC9, 
+	0x3A, 0x01, 0x58, 0x61, 0xB2, 0xD2, 0x1A, 0x6D, 0xD1, 0xEB, 0x2B, 0x00, 0x4A, 0x93, 0x30, 0x01, 
+	0x70, 0x10, 0xB2, 0xC0, 0x28, 0x0B, 0xB2, 0x40, 0x70, 0x13, 0xDD, 0x00, 0x78, 0x1B, 0x4B, 0x92, 
+	0xD0, 0x00, 0x2B, 0x00, 0x4B, 0x91, 0xE1, 0x15, 0x5E, 0x5B, 0x21, 0x14, 0xDA, 0x02, 0x42, 0x9D, 
+	0x22, 0x01, 0x4B, 0x8F, 0x4B, 0x8B, 0x70, 0x1A, 0x5E, 0x9E, 0x22, 0x10, 0x5F, 0x1B, 0x24, 0x12, 
+	0x4B, 0x85, 0x1A, 0xF6, 0x28, 0x00, 0x78, 0x18, 0x4B, 0x8A, 0xD1, 0x16, 0x68, 0x1B, 0x4F, 0x8A, 
+	0x80, 0xBB, 0x4C, 0x8A, 0x80, 0x3E, 0x78, 0x23, 0xD0, 0x02, 0x2B, 0x00, 0xF7, 0xFE, 0x49, 0x88, 
+	0x78, 0x23, 0xFB, 0x4F, 0xD0, 0x07, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x00, 0x93, 0x00, 
+	0x1C, 0x0B, 0x1C, 0x3A, 0xFA, 0xEC, 0xF7, 0xFE, 0x7D, 0x9A, 0x4B, 0x7C, 0xDC, 0x07, 0x42, 0x96, 
+	0x78, 0x1A, 0x4B, 0x80, 0x29, 0x02, 0xB2, 0x51, 0x32, 0x01, 0xDC, 0x08, 0xE0, 0x05, 0x70, 0x1A, 
+	0x42, 0x9E, 0x7D, 0xDB, 0x4B, 0x7B, 0xDB, 0x02, 0x70, 0x1A, 0x22, 0x00, 0x4A, 0x76, 0x4B, 0x71, 
+	0x68, 0x1B, 0x68, 0x59, 0x18, 0xCB, 0x80, 0x15, 0x4B, 0x74, 0x80, 0x53, 0x78, 0x1B, 0x80, 0x96, 
+	0xD0, 0x06, 0x2B, 0x00, 0x93, 0x00, 0x23, 0x01, 0x21, 0x03, 0x20, 0x19, 0xF7, 0xFE, 0x23, 0x02, 
+	0x4B, 0x6B, 0xFA, 0xC7, 0x78, 0x1B, 0x4C, 0x64, 0xD0, 0x61, 0x2B, 0x00, 0x78, 0x2B, 0x4D, 0x6B, 
+	0xD0, 0x03, 0x2B, 0x00, 0x49, 0x6C, 0x20, 0x19, 0xFB, 0x12, 0xF7, 0xFE, 0x78, 0x1B, 0x4B, 0x69, 
+	0xD1, 0x05, 0x2B, 0x00, 0x2A, 0x00, 0x78, 0x22, 0x4A, 0x61, 0xD0, 0x52, 0xE0, 0x4F, 0x70, 0x13, 
+	0xD1, 0x4D, 0x2B, 0x03, 0x2B, 0x00, 0x78, 0x2B, 0x20, 0x00, 0xD0, 0x03, 0xF7, 0xFE, 0x49, 0x63, 
+	0x4B, 0x55, 0xFA, 0xFF, 0x78, 0x19, 0x4A, 0x62, 0xD1, 0x1A, 0x29, 0x00, 0x70, 0x18, 0x20, 0x01, 
+	0x7D, 0xD6, 0x7E, 0x13, 0x4A, 0x60, 0x4D, 0x5F, 0x3B, 0x01, 0xE0, 0x0B, 0x18, 0xF8, 0xB2, 0xDB, 
+	0x5A, 0xA1, 0x00, 0x44, 0x52, 0xA1, 0x00, 0xC9, 0x55, 0x41, 0x21, 0x00, 0xD1, 0xF4, 0x2B, 0x00, 
+	0x1E, 0x59, 0x46, 0x63, 0x2B, 0x00, 0xB2, 0xC9, 0x1C, 0x33, 0xD0, 0x23, 0x46, 0x8C, 0x01, 0x4F, 
+	0x7E, 0x13, 0xE7, 0xF4, 0x4A, 0x54, 0x7D, 0xD6, 0x3B, 0x01, 0xE0, 0x0E, 0xB2, 0xDB, 0x4D, 0x51, 
+	0x00, 0x60, 0x18, 0xFC, 0x00, 0xE4, 0x57, 0x64, 0x5A, 0x84, 0x94, 0x02, 0x1B, 0x64, 0x9D, 0x02, 
+	0x2B, 0x00, 0x52, 0x84, 0x1C, 0x0B, 0xD1, 0xF1, 0xB2, 0xC9, 0x1E, 0x59, 0xD0, 0x02, 0x2B, 0x00, 
+	0x01, 0x4F, 0x1C, 0x33, 0x4A, 0x3A, 0xE7, 0xF5, 0x31, 0x30, 0x1C, 0x11, 0x42, 0x8A, 0xC2, 0x08, 
+	0x4B, 0x3B, 0xD1, 0xFC, 0x70, 0x1A, 0x22, 0x00, 0x22, 0x01, 0x4B, 0x44, 0xE0, 0x60, 0x70, 0x1A, 
+	0x4B, 0x43, 0x78, 0x22, 0xD1, 0x06, 0x2A, 0x00, 0x21, 0x01, 0x4A, 0x40, 0x68, 0x1A, 0x70, 0x11, 
+	0x60, 0x1A, 0x18, 0x52, 0x22, 0x00, 0xE0, 0x55, 0x4B, 0x39, 0x60, 0x1A, 0x7E, 0x1C, 0x48, 0x3D, 
+	0x49, 0x39, 0x7D, 0xDB, 0x4B, 0x2D, 0x93, 0x02, 0x93, 0x03, 0x7C, 0x9B, 0x3B, 0x01, 0xE0, 0x11, 
+	0x18, 0xF2, 0xB2, 0xDB, 0x9D, 0x03, 0x56, 0x14, 0xD1, 0x07, 0x42, 0xAC, 0x00, 0x54, 0x4D, 0x31, 
+	0x5A, 0x65, 0x57, 0x57, 0x52, 0x67, 0x1B, 0xEF, 0x54, 0x14, 0x24, 0x00, 0xD1, 0xEE, 0x2B, 0x00, 
+	0x1E, 0x65, 0x46, 0x64, 0x2C, 0x00, 0xB2, 0xED, 0x9B, 0x02, 0xD0, 0x03, 0x46, 0xAC, 0x01, 0x6E, 
+	0x4B, 0x2D, 0xE7, 0xF4, 0x07, 0x5D, 0x68, 0x1B, 0x4B, 0x20, 0xD5, 0x2B, 0x2B, 0x00, 0x78, 0x1B, 
+	0x20, 0x02, 0xD0, 0x22, 0xF7, 0xFE, 0x49, 0x29, 0xE0, 0x1D, 0xFA, 0x7B, 0x01, 0x62, 0x7D, 0xE9, 
+	0x48, 0x21, 0x1C, 0x0B, 0xE0, 0x08, 0x92, 0x02, 0x9A, 0x02, 0x3B, 0x01, 0x18, 0xD2, 0xB2, 0xDB, 
+	0x5A, 0x12, 0x00, 0x52, 0x08, 0xD2, 0x00, 0x5F, 0x2B, 0x00, 0x53, 0xBA, 0x4A, 0x13, 0xD1, 0xF4, 
+	0x2A, 0x00, 0x78, 0x12, 0x20, 0x02, 0xD0, 0x05, 0x4A, 0x0F, 0x93, 0x00, 0xF7, 0xFE, 0x1C, 0x03, 
+	0x34, 0x01, 0xFA, 0x07, 0xE0, 0x01, 0xB2, 0xE4, 0x4E, 0x0B, 0x4D, 0x11, 0x42, 0xA3, 0x7E, 0x2B, 
+	0xB0, 0x05, 0xD8, 0xDC, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x15, 0xF4, 
+	0x20, 0x00, 0x16, 0xBC, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x12, 0x48, 
+	0x20, 0x00, 0x16, 0x3C, 0x20, 0x00, 0x16, 0x34, 0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x01, 0xEB, 
+	0x00, 0x00, 0x61, 0x8A, 0x20, 0x00, 0x09, 0x20, 0x00, 0x00, 0x61, 0x91, 0x00, 0x00, 0x61, 0x9A, 
+	0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x13, 0x64, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x16, 0x48, 
+	0x20, 0x00, 0x01, 0xBC, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x00, 0x58, 0x00, 0x00, 0x61, 0xA3, 
+	0x4B, 0x25, 0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0x87, 0xD1, 0x2B, 0x2B, 0x00, 0x4B, 0x24, 0x4A, 0x23, 
+	0x78, 0x1B, 0x7C, 0x90, 0x7E, 0xD2, 0x90, 0x04, 0xB2, 0x52, 0x4D, 0x22, 0x92, 0x05, 0xB2, 0x92, 
+	0xE0, 0x1D, 0x4A, 0x21, 0x4C, 0x21, 0x3B, 0x01, 0x5C, 0xE1, 0xB2, 0xDB, 0x42, 0xB9, 0x9F, 0x04, 
+	0x00, 0x59, 0xD1, 0x16, 0x28, 0x00, 0x5A, 0x88, 0x5A, 0x6E, 0xD0, 0x07, 0xB2, 0x34, 0x46, 0x6F, 
+	0x24, 0x14, 0x46, 0xA4, 0x45, 0xBC, 0x5F, 0xE7, 0x00, 0x59, 0xDA, 0x05, 0x00, 0xF6, 0x5A, 0x6E, 
+	0x52, 0x50, 0x1B, 0x80, 0x1B, 0x80, 0xE0, 0x01, 0x4F, 0x14, 0x52, 0x88, 0x54, 0xF9, 0x21, 0x00, 
+	0xD1, 0xDF, 0x2B, 0x00, 0x4C, 0x12, 0x4B, 0x0E, 0x48, 0x0F, 0x78, 0x19, 0xE0, 0x05, 0x1C, 0x0B, 
+	0xB2, 0xDB, 0x3B, 0x01, 0x5A, 0x15, 0x00, 0x5A, 0x53, 0x15, 0x08, 0xED, 0x6A, 0xE4, 0xAE, 0xF1, 
+	0x17, 0xD1, 0xF7, 0x2B, 0x00, 0x78, 0x12, 0x4A, 0x0C, 0xD0, 0x05, 0x2A, 0x00, 0x93, 0x00, 0x20, 
+	0x02, 0x1C, 0x03, 0x4A, 0x08, 0xF9, 0x86, 0xF7, 0xFE, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x16, 
+	0x30, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x12, 0x3C, 0x20, 0x00, 0x02, 
+	0x14, 0x20, 0x00, 0x0A, 0xA4, 0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x49, 0x09, 0xB5, 
+	0x10, 0x48, 0x09, 0x22, 0x50, 0xF9, 0xE2, 0xF0, 0x00, 0x49, 0x09, 0x4C, 0x08, 0x22, 0x42, 0x1C, 
+	0x20, 0xF9, 0xDC, 0xF0, 0x00, 0x7B, 0xA2, 0x4B, 0x07, 0x7D, 0xE3, 0x60, 0x1A, 0x7E, 0x23, 0x76, 
+	0xE3, 0xBD, 0x10, 0x77, 0x23, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x09, 
+	0xAE, 0x00, 0x00, 0x74, 0x08, 0x20, 0x00, 0x16, 0x50, 0x49, 0x04, 0xB5, 0x08, 0x43, 0x41, 0x4B, 
+	0x04, 0x18, 0xC9, 0x48, 0x04, 0xF9, 0x60, 0xF0, 0x00, 0xBD, 0x08, 0xB2, 0xC0, 0xFF, 0xFF, 0xFE, 
+	0x44, 0x00, 0x02, 0x24, 0xFE, 0x00, 0x0F, 0x42, 0x40, 0x4C, 0x15, 0xB5, 0x10, 0x71, 0x23, 0x23, 
+	0x00, 0x71, 0x63, 0x23, 0x03, 0x72, 0x23, 0x23, 0x02, 0x78, 0x98, 0x4B, 0x12, 0x28, 0x03, 0x38, 
+	0x02, 0xF0, 0x00, 0xD8, 0x1D, 0x04, 0x0B, 0xF8, 0xE7, 0x20, 0xC7, 0x14, 0x02, 0x20, 0xD7, 0xE0, 
+	0x00, 0xF7, 0xFF, 0x70, 0xE0, 0x23, 0x02, 0xFF, 0xD9, 0xE0, 0x0E, 0x70, 0x20, 0x70, 0xE0, 0x20, 
+	0xF4, 0xFF, 0xD2, 0xF7, 0xFF, 0x70, 0x20, 0x23, 0x02, 0x23, 0x01, 0x71, 0xA3, 0x20, 0xF4, 0xE0, 
+	0x06, 0xF7, 0xFF, 0x70, 0xE0, 0x23, 0x01, 0xFF, 0xC9, 0x71, 0xA3, 0x70, 0x20, 0xBD, 0x10, 0x71, 
+	0xE3, 0x20, 0x00, 0x0A, 0xAA, 0x20, 0x00, 0x12, 0x48, 0x4B, 0x59, 0xB5, 0xF0, 0x68, 0x1A, 0xB0, 
+	0x87, 0x2A, 0x08, 0x4B, 0x58, 0x22, 0x01, 0xD1, 0x01, 0x22, 0x00, 0xE0, 0x00, 0x4B, 0x56, 0x70, 
+	0x1A, 0x33, 0x01, 0x4C, 0x56, 0x2B, 0x00, 0x7F, 0xDB, 0x71, 0xE3, 0xD1, 0x00, 0x25, 0x01, 0x78, 
+	0x23, 0x1C, 0x28, 0x79, 0xA2, 0x40, 0x90, 0x00, 0xD9, 0x1A, 0xCB, 0xB2, 0x82, 0x4E, 0x50, 0x43, 
+	0x53, 0xB2, 0xDB, 0x10, 0xDB, 0x78, 0x22, 0x80, 0x33, 0x79, 0xA0, 0x23, 0xFA, 0x43, 0x53, 0x00, 
+	0x9B, 0x1C, 0x29, 0x4F, 0x4C, 0xB2, 0x88, 0x40, 0x81, 0x43, 0x58, 0x88, 0xB9, 0xF0, 0x00, 0x01, 
+	0x09, 0xB2, 0xC1, 0xF8, 0xFB, 0x78, 0x23, 0x80, 0x71, 0x79, 0xA0, 0x22, 0x2D, 0x1C, 0x2A, 0x43, 
+	0x53, 0xB2, 0x90, 0x40, 0x82, 0x46, 0x6B, 0x43, 0x58, 0x01, 0x09, 0x81, 0x19, 0xF8, 0xEC, 0xF0, 
+	0x00, 0x80, 0xB0, 0xB2, 0xC0, 0x79, 0xB9, 0x7A, 0x23, 0x1A, 0x18, 0x00, 0xD8, 0x00, 0xC0, 0x40, 
+	0xA9, 0x30, 0xE0, 0x19, 0x49, 0x79, 0xA2, 0x43, 0x48, 0x21, 0x08, 0x46, 0x6C, 0x40, 0x90, 0x5E, 
+	0x61, 0xF0, 0x00, 0x01, 0x49, 0x4A, 0x34, 0xF8, 0x8B, 0x7D, 0x11, 0x80, 0xF0, 0x4B, 0x36, 0x7D, 
+	0xD0, 0xB2, 0xC0, 0x18, 0x08, 0x7E, 0x17, 0x70, 0x18, 0x7E, 0x56, 0x70, 0x5F, 0x7F, 0x96, 0x96, 
+	0x01, 0x43, 0x66, 0x9C, 0x01, 0x18, 0x20, 0xB2, 0xF4, 0x70, 0x98, 0xB2, 0xC0, 0x7E, 0x96, 0x90, 
+	0x02, 0x98, 0x03, 0x96, 0x03, 0x43, 0x46, 0x7F, 0xD6, 0x19, 0xC7, 0xB2, 0xF0, 0x70, 0xDF, 0xB2, 
+	0xFF, 0x46, 0xB4, 0x7E, 0xD6, 0x18, 0x61, 0x44, 0x61, 0x71, 0x19, 0xB2, 0xC9, 0x19, 0x80, 0x7F, 
+	0x16, 0xB2, 0xC0, 0x9E, 0x02, 0x1A, 0x3F, 0x1A, 0x74, 0xB2, 0xFF, 0xB2, 0xE6, 0x71, 0x9E, 0x71, 
+	0x58, 0x46, 0xBC, 0x71, 0xDF, 0x1B, 0xEC, 0x7D, 0x57, 0x1C, 0x27, 0x97, 0x04, 0xB2, 0xFF, 0x43, 
+	0x77, 0x73, 0x9F, 0x97, 0x05, 0x46, 0x64, 0x7D, 0x97, 0x43, 0x65, 0x1B, 0xED, 0x9C, 0x04, 0x43, 
+	0x47, 0x43, 0x4C, 0x74, 0x5F, 0x46, 0x6F, 0x72, 0x18, 0x5D, 0xC7, 0x20, 0x14, 0xB2, 0xE4, 0xB2, 
+	0xED, 0x74, 0x1C, 0x73, 0xDD, 0x72, 0x99, 0x72, 0x5D, 0x73, 0x1E, 0x72, 0xDF, 0x7F, 0x51, 0x73, 
+	0x5C, 0x29, 0x00, 0x4B, 0x12, 0x46, 0x69, 0xD0, 0x03, 0x70, 0x19, 0x79, 0x09, 0x9C, 0x01, 0xE0, 
+	0x03, 0x43, 0x74, 0x9E, 0x03, 0x1C, 0x93, 0x70, 0x1C, 0x9F, 0x02, 0x32, 0x03, 0x7F, 0xDB, 0x7F, 
+	0xD2, 0xB2, 0x5B, 0x18, 0xBA, 0x40, 0x9A, 0x32, 0x01, 0xB0, 0x07, 0x4B, 0x09, 0xBD, 0xF0, 0x60, 
+	0x1A, 0x20, 0x00, 0x16, 0x50, 0x20, 0x00, 0x02, 0xFA, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0A, 
+	0xAA, 0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 
+	0x7C, 0x20, 0x00, 0x09, 0x18, 0x46, 0x71, 0xB4, 0x02, 0x00, 0x49, 0x08, 0x49, 0x00, 0x49, 0x5C, 
+	0x09, 0xBC, 0x02, 0x44, 0x8E, 0x46, 0xC0, 0x47, 0x70, 0x46, 0x71, 0xB4, 0x03, 0x00, 0x40, 0x08, 
+	0x49, 0x5A, 0x09, 0x00, 0x49, 0x44, 0x8E, 0x00, 0x49, 0x47, 0x70, 0xBC, 0x03, 0xD0, 0x34, 0x29, 
+	0x00, 0x22, 0x00, 0x23, 0x01, 0x42, 0x88, 0xB4, 0x10, 0x24, 0x01, 0xD3, 0x2C, 0x42, 0xA1, 0x07, 
+	0x24, 0x42, 0x81, 0xD2, 0x04, 0x01, 0x09, 0xD2, 0x02, 0xE7, 0xF8, 0x01, 0x1B, 0x42, 0xA1, 0x00, 
+	0xE4, 0x42, 0x81, 0xD2, 0x04, 0x00, 0x49, 0xD2, 0x02, 0xE7, 0xF8, 0x00, 0x5B, 0xD3, 0x01, 0x42, 
+	0x88, 0x43, 0x1A, 0x1A, 0x40, 0x42, 0xA0, 0x08, 0x4C, 0x1B, 0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 
+	0x5C, 0x42, 0xA0, 0x08, 0x8C, 0x1B, 0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0x9C, 0x42, 0xA0, 0x08, 
+	0xCC, 0x1B, 0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0xDC, 0xD0, 0x03, 0x28, 0x00, 0xD0, 0x01, 0x09, 
+	0x1B, 0xE7, 0xE3, 0x09, 0x09, 0xBC, 0x10, 0x1C, 0x10, 0x28, 0x00, 0x47, 0x70, 0x20, 0x00, 0xD0, 
+	0x01, 0xB4, 0x07, 0x43, 0xC0, 0xA1, 0x02, 0x48, 0x02, 0x90, 0x02, 0x18, 0x40, 0x46, 0xC0, 0xBD, 
+	0x03, 0x00, 0x00, 0x00, 0xD9, 0xD0, 0xF0, 0x29, 0x00, 0xF7, 0xFF, 0xB5, 0x03, 0xBC, 0x0E, 0xFF, 
+	0xB9, 0x1A, 0x89, 0x43, 0x42, 0x46, 0xC0, 0x47, 0x18, 0xD0, 0x41, 0x29, 0x00, 0x1C, 0x04, 0xB4, 
+	0x10, 0x46, 0xA4, 0x40, 0x4C, 0x22, 0x00, 0x23, 0x01, 0xD5, 0x00, 0x29, 0x00, 0x28, 0x00, 0x42, 
+	0x49, 0x42, 0x40, 0xD5, 0x00, 0xD3, 0x2C, 0x42, 0x88, 0x07, 0x24, 0x24, 0x01, 0xD2, 0x04, 0x42, 
+	0xA1, 0xD2, 0x02, 0x42, 0x81, 0x01, 0x1B, 0x01, 0x09, 0x00, 0xE4, 0xE7, 0xF8, 0xD2, 0x04, 0x42, 
+	0xA1, 0xD2, 0x02, 0x42, 0x81, 0x00, 0x5B, 0x00, 0x49, 0x42, 0x88, 0xE7, 0xF8, 0x1A, 0x40, 0xD3, 
+	0x01, 0x08, 0x4C, 0x43, 0x1A, 0xD3, 0x02, 0x42, 0xA0, 0x08, 0x5C, 0x1B, 0x00, 0x08, 0x8C, 0x43, 
+	0x22, 0xD3, 0x02, 0x42, 0xA0, 0x08, 0x9C, 0x1B, 0x00, 0x08, 0xCC, 0x43, 0x22, 0xD3, 0x02, 0x42, 
+	0xA0, 0x08, 0xDC, 0x1B, 0x00, 0x28, 0x00, 0x43, 0x22, 0x09, 0x1B, 0xD0, 0x03, 0x09, 0x09, 0xD0, 
+	0x01, 0x1C, 0x10, 0xE7, 0xE3, 0x2C, 0x00, 0x46, 0x64, 0x42, 0x40, 0xD5, 0x00, 0x47, 0x70, 0xBC, 
+	0x10, 0xD0, 0x06, 0x28, 0x00, 0x20, 0x00, 0xDB, 0x03, 0x08, 0x40, 0x43, 0xC0, 0x20, 0x80, 0xE0, 
+	0x01, 0xB4, 0x07, 0x06, 0x00, 0xA1, 0x02, 0x48, 0x02, 0x90, 0x02, 0x18, 0x40, 0x46, 0xC0, 0xBD, 
+	0x03, 0x00, 0x00, 0x00, 0x19, 0xD0, 0xEB, 0x29, 0x00, 0xF7, 0xFF, 0xB5, 0x03, 0xBC, 0x0E, 0xFF, 
+	0xA7, 0x66, 0x8E, 0xAE, 0xF1, 0x18, 0x1A, 0x89, 0x43, 0x42, 0x46, 0xC0, 0x47, 0x18, 0x46, 0xC0, 
+	0x47, 0x70, 0x1C, 0x05, 0xB5, 0xF0, 0xD9, 0x2F, 0x2A, 0x0F, 0x43, 0x03, 0x1C, 0x0B, 0x07, 0x9C, 
+	0x1C, 0x05, 0x1C, 0x0C, 0xD1, 0x2C, 0x1C, 0x15, 0x1C, 0x03, 0x3D, 0x10, 0x68, 0x26, 0x68, 0x66, 
+	0x60, 0x1E, 0x68, 0xA6, 0x60, 0x5E, 0x68, 0xE6, 0x60, 0x9E, 0x60, 0xDE, 0x34, 0x10, 0x2D, 0x0F, 
+	0x33, 0x10, 0x1C, 0x13, 0xD8, 0xF2, 0x09, 0x1B, 0x3B, 0x10, 0x01, 0x1B, 0x33, 0x01, 0x18, 0xC9, 
+	0x18, 0xC5, 0x40, 0x1A, 0x23, 0x0F, 0xD9, 0x0F, 0x2A, 0x03, 0x1C, 0x2C, 0x1C, 0x0E, 0xCE, 0x80, 
+	0x1C, 0x13, 0xC4, 0x80, 0x3B, 0x04, 0xD8, 0xFA, 0x2B, 0x03, 0x08, 0x9B, 0x1F, 0x13, 0x00, 0x9B, 
+	0x33, 0x01, 0x40, 0x22, 0x24, 0x03, 0x18, 0xED, 0x18, 0xC9, 0xD0, 0x05, 0x2A, 0x00, 0x5C, 0xCC, 
+	0x23, 0x00, 0x33, 0x01, 0x54, 0xEC, 0xD1, 0xFA, 0x42, 0x93, 0x46, 0xC0, 0xBD, 0xF0, 0x6D, 0x6C, 
+	0x61, 0x50, 0x69, 0x6E, 0x49, 0x20, 0x45, 0x27, 0x00, 0x74, 0x72, 0x65, 0x74, 0x6E, 0x00, 0x4E, 
+	0x20, 0x27, 0x65, 0x6C, 0x2D, 0x4E, 0x00, 0x21, 0x73, 0x73, 0x69, 0x78, 0x45, 0x27, 0x4E, 0x20, 
+	0x27, 0x74, 0x53, 0x20, 0x4E, 0x00, 0x53, 0x00, 0x50, 0x2F, 0x70, 0x65, 0x65, 0x6C, 0x72, 0x2D, 
+	0x53, 0x00, 0x74, 0x65, 0x73, 0x65, 0x53, 0x41, 0x46, 0x00, 0x64, 0x49, 0x00, 0x54, 0x41, 0x00, 
+	0x65, 0x6C, 0x76, 0x69, 0x74, 0x63, 0x70, 0x53, 0x00, 0x65, 0x00, 0x74, 0x63, 0x65, 0x63, 0x61, 
+	0x74, 0x53, 0x52, 0x00, 0x21, 0x6B, 0x41, 0x56, 0x47, 0x45, 0x65, 0x44, 0x00, 0x4C, 0x00, 0x79, 
+	0x61, 0x6C, 0x00, 0x43, 0x53, 0x4F, 0x53, 0x49, 0x4F, 0x4E, 0x6F, 0x54, 0x00, 0x45, 0x20, 0x68, 
+	0x63, 0x75, 0x54, 0x00, 0x6E, 0x4F, 0x68, 0x63, 0x75, 0x6F, 0x46, 0x46, 0x4F, 0x20, 0x5F, 0x54, 
+	0x4C, 0x00, 0x46, 0x4F, 0x52, 0x50, 0x4E, 0x49, 0x4C, 0x49, 0x69, 0x46, 0x00, 0x47, 0x00, 0x64, 
+	0x65, 0x78, 0x66, 0x41, 0x2D, 0x47, 0x00, 0x72, 0x65, 0x74, 0x76, 0x6F, 0x48, 0x3D, 0x12, 0x00, 
+	0x72, 0x6F, 0x0A, 0x0D, 0x07, 0x0E, 0x0C, 0x06, 0x04, 0x12, 0x05, 0x0F, 0x12, 0x09, 0x00, 0x12, 
+	0x08, 0x11, 0x45, 0x02, 0x10, 0x01, 0x4B, 0x00, 0x72, 0x72, 0x52, 0x20, 0x79, 0x65, 0x46, 0x45, 
+	0x52, 0x00, 0x49, 0x4E, 0x49, 0x20, 0x6D, 0x43, 0x00, 0x54, 0x74, 0x6C, 0x65, 0x44, 0x65, 0x52, 
+	0x20, 0x61, 0x65, 0x52, 0x2F, 0x66, 0x52, 0x00, 0x6C, 0x61, 0x4D, 0x00, 0x77, 0x61, 0x49, 0x20, 
+	0x58, 0x41, 0x5F, 0x4D, 0x43, 0x00, 0x54, 0x4C, 0x45, 0x44, 0x41, 0x4D, 0x5F, 0x41, 0x49, 0x4D, 
+	0x5F, 0x58, 0x78, 0x54, 0x00, 0x4E, 0x73, 0x73, 0x65, 0x6C, 0x66, 0x69, 0x44, 0x00, 0x49, 0x44, 
+	0x00, 0x66, 0x4E, 0x2F, 0x46, 0x46, 0x67, 0x69, 0x42, 0x00, 0x61, 0x72, 0x47, 0x20, 0x65, 0x4E, 
+	0x00, 0x64, 0x64, 0x45, 0x2D, 0x67, 0x52, 0x00, 0x65, 0x67, 0x00, 0x00, 0x66, 0x65, 0x41, 0x20, 
+	0x49, 0x2D, 0x72, 0x65, 0x74, 0x66, 0x00, 0x00, 0x00, 0x00, 0x54, 0x20, 0x49, 0x2D, 0x00, 0x00, 
+	0x50, 0x4D, 0x01, 0x00, 0x00, 0xFF, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 
+	0x00, 0x01, 0x20, 0x00, 0x12, 0xA0, 0x20, 0x00, 0x02, 0x28, 0x00, 0x00, 0x00, 0x0C, 0x20, 0x00, 
+	0x16, 0x54, 0x00, 0xFF, 0x02, 0x01, 0x04, 0x00, 0x04, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0x46, 0x02, 0xFF, 0xFF, 0xD7, 0x6A, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/CORE_120529_v28.c for-diff/drivers/input/touchscreen/mms100_ts/CORE_120529_v28.c
--- caf/drivers/input/touchscreen/mms100_ts/CORE_120529_v28.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/CORE_120529_v28.c	2015-10-08 21:26:20.112845000 +0900
@@ -0,0 +1,1554 @@
+static const struct firmware_data melfas_CORE = {
+	.section_name = "CORE",
+	.section_version = 0x45,
+	.start_page_addr = 1,
+	.end_page_addr = 24,
+	.compatible_version = 0x02,
+	.length = 24696,
+	.data = {
+	0xAE, 0xF1, 0x01, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x4F, 0x43, 0x00, 0x00, 0x63, 0xFF, 0x00, 
+	0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0xF0, 0x03, 0xB5, 0xF7, 0xF0, 0x05, 0xFE, 0x71, 0x20, 
+	0x00, 0xF9, 0xFB, 0xFF, 0xF2, 0xF0, 0x05, 0x33, 0x33, 0x4B, 0x4E, 0x42, 0x5E, 0x78, 0x1B, 0x26, 
+	0x10, 0x41, 0x73, 0x4B, 0x4C, 0x1A, 0xF6, 0x4B, 0x4C, 0x70, 0x1E, 0x3A, 0x01, 0x68, 0x1A, 0x41, 
+	0x5A, 0x42, 0x53, 0x70, 0x1A, 0x4B, 0x4A, 0x78, 0x1C, 0x4B, 0x4A, 0xD1, 0x22, 0x2C, 0x00, 0x25, 
+	0x01, 0x4A, 0x49, 0x70, 0x1D, 0x70, 0x14, 0xFA, 0x52, 0xF0, 0x00, 0x1C, 0x28, 0x4B, 0x47, 0x70, 
+	0x9A, 0x78, 0xDA, 0xF0, 0x05, 0x70, 0x5C, 0xF0, 0x03, 0xFF, 0xD1, 0xF0, 0x01, 0xFD, 0x2D, 0x23, 
+	0x80, 0xFB, 0x0B, 0x6C, 0x1A, 0x05, 0xDB, 0x43, 0x8A, 0x21, 0x7F, 0xF0, 0x00, 0x64, 0x1A, 0xF0, 
+	0x03, 0xFD, 0xF5, 0xF0, 0x01, 0xF8, 0xF5, 0xF0, 0x01, 0xFA, 0xFF, 0x4B, 0x3C, 0xFA, 0x97, 0x68, 
+	0x1B, 0x20, 0x02, 0x4C, 0x3B, 0x47, 0x98, 0x2B, 0x00, 0x78, 0x23, 0x4B, 0x3A, 0xD1, 0x03, 0x2B, 
+	0x00, 0x78, 0x1B, 0x78, 0x23, 0xD0, 0x0F, 0xFC, 0x94, 0xF0, 0x00, 0x4B, 0x2E, 0x78, 0x22, 0xD0, 
+	0x01, 0x2A, 0x00, 0xE0, 0x01, 0x70, 0x1E, 0x70, 0x1A, 0x22, 0x0D, 0x23, 0x00, 0x4A, 0x31, 0x4A, 
+	0x31, 0x70, 0x13, 0x4B, 0x2C, 0x70, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4D, 0x2F, 0xD0, 0x2C, 0x2B, 
+	0x00, 0x78, 0x2B, 0x4C, 0x2A, 0xD0, 0x28, 0x68, 0x23, 0x20, 0x13, 0xF0, 0x00, 0x47, 0x98, 0xF0, 
+	0x03, 0xFA, 0x0F, 0xF0, 0x03, 0xFC, 0xB6, 0x4B, 0x29, 0xFC, 0x35, 0xF0, 0x01, 0x78, 0x18, 0xF0, 
+	0x00, 0xF8, 0x95, 0x4A, 0x27, 0xFD, 0xC7, 0x70, 0x13, 0x23, 0x01, 0x80, 0x13, 0x4A, 0x26, 0xF9, 
+	0x88, 0xF0, 0x03, 0x2B, 0x00, 0x78, 0x2B, 0x68, 0x23, 0xD1, 0xFC, 0x47, 0x98, 0x20, 0x14, 0xF9, 
+	0xF6, 0xF0, 0x00, 0xFC, 0x9D, 0xF0, 0x03, 0xFC, 0x1C, 0xF0, 0x03, 0x78, 0x18, 0x4B, 0x1C, 0xF8, 
+	0x7C, 0xF0, 0x01, 0x70, 0x1E, 0x4B, 0x10, 0xFF, 0x72, 0xF0, 0x00, 0x78, 0x27, 0x4C, 0x0E, 0x28, 
+	0x13, 0xB2, 0x78, 0xE1, 0x8D, 0xD9, 0x00, 0xFA, 0x94, 0xF0, 0x05, 0x01, 0x8C, 0x00, 0x74, 0x01, 
+	0x8C, 0x01, 0x78, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 0x8C, 0x01, 
+	0x8C, 0x01, 0x8C, 0x00, 0x68, 0x01, 0x8C, 0x00, 0x3A, 0x01, 0x8C, 0x00, 0x5F, 0x00, 0x30, 0x01, 
+	0x89, 0x01, 0x8C, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x16, 0x50, 0x20, 
+	0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0xE9, 0x20, 0x00, 0x01, 0xEA, 0x20, 0x00, 0x0A, 0xAA, 0x20, 
+	0x00, 0x01, 0xF8, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x01, 0xE7, 0x20, 0x00, 0x01, 0xE5, 0x20, 
+	0x00, 0x12, 0x48, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x03, 0x08, 0x22, 0x00, 0x4B, 0xB1, 0xF0, 
+	0x00, 0x70, 0x1A, 0x4B, 0xB0, 0xFE, 0x71, 0x2B, 0x00, 0x78, 0x1B, 0xE1, 0x55, 0xD0, 0x00, 0x78, 
+	0x23, 0x4C, 0xAE, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0xAD, 0x20, 0x00, 0xFE, 0x66, 0xF0, 0x03, 0x2B, 
+	0x00, 0x78, 0x23, 0x21, 0x01, 0xD0, 0x06, 0x4A, 0xAA, 0x20, 0x00, 0x90, 0x00, 0x1C, 0x0B, 0xFE, 
+	0x04, 0xF0, 0x03, 0x78, 0x98, 0x4B, 0xA8, 0xFC, 0x26, 0xF0, 0x03, 0x7B, 0xE8, 0x4D, 0xA7, 0xF9, 
+	0xFC, 0xF0, 0x03, 0x60, 0x20, 0x4C, 0xA6, 0xF0, 0x03, 0x7C, 0x28, 0x23, 0x11, 0xF9, 0xF7, 0x56, 
+	0xEB, 0x60, 0x60, 0x43, 0x53, 0x7B, 0xEA, 0x4B, 0x9A, 0x60, 0xA3, 0x70, 0x1A, 0x22, 0x00, 0x78, 
+	0x1B, 0x4B, 0xA0, 0x78, 0x18, 0x4B, 0xA0, 0xF8, 0x08, 0xF0, 0x01, 0x4D, 0x9D, 0x4B, 0x95, 0x70, 
+	0x1C, 0x24, 0x00, 0xF0, 0x00, 0x78, 0x2B, 0xF0, 0x04, 0xFD, 0x29, 0xF0, 0x00, 0xF9, 0x39, 0x70, 
+	0x2C, 0xFD, 0x25, 0x24, 0x01, 0x4B, 0x8F, 0xF0, 0x00, 0x70, 0x1C, 0x4B, 0x97, 0xFC, 0x9B, 0x05, 
+	0x9A, 0x68, 0x1B, 0x4A, 0x96, 0xD5, 0x13, 0x20, 0x04, 0x4B, 0x96, 0x4B, 0x96, 0x60, 0x1A, 0x43, 
+	0x01, 0x68, 0x19, 0x68, 0x19, 0x60, 0x19, 0x43, 0x81, 0x20, 0x02, 0x68, 0x19, 0x60, 0x19, 0x60, 
+	0x1C, 0x43, 0x0C, 0x21, 0x00, 0x4B, 0x91, 0x4B, 0x91, 0x60, 0x19, 0x4C, 0x91, 0x60, 0x1A, 0x68, 
+	0x23, 0x20, 0x03, 0xF0, 0x03, 0x47, 0x98, 0x68, 0x23, 0xF9, 0xE9, 0x47, 0x98, 0x20, 0x05, 0xF9, 
+	0x8E, 0xF0, 0x03, 0x4D, 0x8D, 0x4C, 0x8C, 0x42, 0x40, 0x20, 0x01, 0x1C, 0x2A, 0x1C, 0x21, 0xFE, 
+	0x14, 0xF0, 0x04, 0x78, 0x1B, 0x4B, 0x79, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x88, 0x20, 0x0C, 0xFD, 
+	0xFC, 0xF0, 0x03, 0x68, 0x23, 0x4A, 0x87, 0x68, 0x2B, 0x80, 0x13, 0x4B, 0x73, 0x80, 0x53, 0x2B, 
+	0x00, 0x78, 0x1B, 0x23, 0x01, 0xD0, 0x06, 0x93, 0x00, 0x21, 0x02, 0x1C, 0x0B, 0x20, 0x0C, 0xFD, 
+	0x94, 0xF0, 0x03, 0x20, 0x06, 0x4C, 0x7B, 0x47, 0x98, 0x68, 0x23, 0xF9, 0xA2, 0xF0, 0x04, 0xFB, 
+	0x12, 0xF0, 0x04, 0xFD, 0x60, 0xF0, 0x04, 0xF9, 0x62, 0xF0, 0x00, 0xFE, 0xCE, 0xF0, 0x04, 0xF8, 
+	0x46, 0xF0, 0x05, 0x78, 0x1B, 0x4B, 0x78, 0xD1, 0x2A, 0x2B, 0x00, 0x20, 0x07, 0x68, 0x23, 0xF0, 
+	0x01, 0x47, 0x98, 0x68, 0x23, 0xFA, 0x45, 0x47, 0x98, 0x20, 0x08, 0xF9, 0x5C, 0xF0, 0x03, 0xF9, 
+	0x64, 0xF0, 0x03, 0x20, 0x09, 0x68, 0x23, 0xF0, 0x01, 0x47, 0x98, 0xF0, 0x01, 0xFA, 0x5D, 0x68, 
+	0x23, 0xFD, 0x75, 0x47, 0x98, 0x20, 0x0A, 0xFE, 0x4C, 0xF0, 0x01, 0xFC, 0xEE, 0xF0, 0x02, 0x20, 
+	0x0B, 0x68, 0x23, 0xF0, 0x02, 0x47, 0x98, 0xF0, 0x02, 0xF8, 0x62, 0x68, 0x23, 0xF9, 0x81, 0x47, 
+	0x98, 0x20, 0x0E, 0xFA, 0x2E, 0xF0, 0x02, 0xFB, 0x9C, 0xF0, 0x02, 0x20, 0x10, 0x68, 0x23, 0xF0, 
+	0x00, 0x47, 0x98, 0x4B, 0x5B, 0xF9, 0x81, 0x68, 0x1B, 0x20, 0x0F, 0x4B, 0x5E, 0x47, 0x98, 0x2B, 
+	0x00, 0x78, 0x1B, 0xF0, 0x02, 0xD1, 0x3C, 0x4B, 0x5C, 0xFB, 0xF9, 0x4B, 0x5C, 0x68, 0x1A, 0xD1, 
+	0x04, 0x2A, 0x00, 0x68, 0x09, 0x49, 0x5B, 0xDD, 0x00, 0x29, 0x00, 0x4A, 0x47, 0x70, 0x1A, 0x32, 
+	0x32, 0x78, 0x19, 0x42, 0x91, 0x78, 0x12, 0x22, 0x00, 0xD3, 0x01, 0x78, 0x1B, 0x70, 0x1A, 0xD1, 
+	0x21, 0x2B, 0x00, 0x4C, 0x51, 0x4B, 0x53, 0x2B, 0x00, 0x68, 0x1B, 0x68, 0x20, 0xDD, 0x09, 0xD1, 
+	0x06, 0x28, 0x00, 0x78, 0x1B, 0x4B, 0x39, 0xD0, 0x02, 0x2B, 0x00, 0xF0, 0x03, 0x49, 0x4E, 0x4B, 
+	0x4E, 0xFD, 0x7D, 0x47, 0x98, 0x68, 0x1B, 0x2B, 0x00, 0x68, 0x23, 0x4B, 0x49, 0xDD, 0x0A, 0x28, 
+	0x00, 0x68, 0x18, 0x4B, 0x31, 0xD1, 0x06, 0x2B, 0x00, 0x78, 0x1B, 0x49, 0x48, 0xD0, 0x02, 0xFD, 
+	0x6C, 0xF0, 0x03, 0xFC, 0x1C, 0xF0, 0x02, 0x78, 0x1A, 0x4B, 0x41, 0x70, 0x1A, 0x32, 0x01, 0x68, 
+	0x1B, 0x4B, 0x32, 0xD5, 0x23, 0x05, 0x9A, 0x68, 0x18, 0x4B, 0x34, 0x79, 0x1A, 0x4B, 0x2A, 0x4B, 
+	0x2F, 0x78, 0x19, 0x1C, 0x53, 0x1A, 0x18, 0xF0, 0x05, 0x40, 0x98, 0x4C, 0x23, 0xF9, 0x4D, 0x78, 
+	0x23, 0x4D, 0x2F, 0x2B, 0x00, 0x60, 0x28, 0x20, 0x00, 0xD0, 0x03, 0xF0, 0x03, 0x49, 0x39, 0x78, 
+	0x23, 0xFD, 0x4D, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x01, 0x20, 0x00, 0x23, 0x04, 0x1C, 0x2A, 0xF0, 
+	0x03, 0x90, 0x00, 0x43, 0x0E, 0xAE, 0xF1, 0x02, 0x4B, 0x24, 0xFC, 0xEB, 0x68, 0x1A, 0x21, 0x01, 
+	0x60, 0x1A, 0x43, 0x8A, 0x05, 0xDB, 0x23, 0x80, 0x21, 0x01, 0x6C, 0x9A, 0x64, 0x9A, 0x43, 0x0A, 
+	0xFC, 0x1E, 0xF0, 0x00, 0x20, 0x00, 0x4B, 0x2D, 0xF0, 0x00, 0x56, 0x18, 0xE0, 0x17, 0xFE, 0x51, 
+	0x78, 0x1B, 0x4B, 0x0F, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x29, 0x20, 0x05, 0xFD, 0x28, 0xF0, 0x03, 
+	0xF0, 0x00, 0x20, 0x01, 0x20, 0x00, 0xFE, 0xED, 0xFE, 0xEA, 0xF0, 0x00, 0x70, 0x23, 0x23, 0x13, 
+	0xF0, 0x00, 0xE0, 0x06, 0xE0, 0x03, 0xFC, 0x0D, 0x20, 0x11, 0x4B, 0x13, 0x47, 0x98, 0x68, 0x1B, 
+	0x70, 0x1F, 0x4B, 0x20, 0x46, 0xC0, 0xE5, 0xEB, 0x20, 0x00, 0x01, 0xEA, 0x20, 0x00, 0x01, 0xE0, 
+	0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x5C, 0xB4, 0x20, 0x00, 0x0A, 0xAC, 0x20, 0x00, 0x0A, 0xAA, 
+	0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0xFC, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x12, 0x48, 
+	0x20, 0x00, 0x00, 0x58, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 0x10, 
+	0xE0, 0x00, 0xE0, 0x18, 0x20, 0x00, 0x01, 0xFC, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x16, 0x34, 
+	0x20, 0x00, 0x16, 0x38, 0x00, 0x00, 0x5C, 0xB8, 0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x16, 0x48, 
+	0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0xCA, 0x20, 0x00, 0x12, 0x9C, 0x00, 0x00, 0x5C, 0xBE, 
+	0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5C, 0xC7, 0x00, 0x00, 0x5C, 0xD1, 0x20, 0x00, 0x01, 0xB3, 
+	0x00, 0x00, 0x5C, 0xDE, 0x20, 0x00, 0x00, 0x56, 0xF0, 0x01, 0xB5, 0x08, 0xF0, 0x01, 0xFF, 0x43, 
+	0x4B, 0x03, 0xFF, 0x5D, 0x47, 0x98, 0x68, 0x1B, 0xFB, 0x7C, 0xF0, 0x02, 0x46, 0xC0, 0xBD, 0x08, 
+	0x20, 0x00, 0x02, 0x00, 0xF0, 0x04, 0xB5, 0x10, 0x4C, 0x05, 0xFF, 0xB7, 0x68, 0x23, 0x20, 0x00, 
+	0xF0, 0x04, 0x47, 0x98, 0x68, 0x23, 0xFF, 0xD9, 0x47, 0x98, 0x20, 0x01, 0x46, 0xC0, 0xBD, 0x10, 
+	0x20, 0x00, 0x01, 0xF8, 0x4D, 0x17, 0xB5, 0x7F, 0x1B, 0x5B, 0x4B, 0x17, 0x4B, 0x17, 0x93, 0x03, 
+	0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x06, 0xAA, 0x03, 0x21, 0x01, 0x90, 0x00, 0x23, 0x04, 
+	0xFC, 0x4E, 0xF0, 0x03, 0xE0, 0x18, 0x4E, 0x12, 0xDD, 0x00, 0x2C, 0x14, 0xB2, 0xE1, 0x24, 0x14, 
+	0xE0, 0x03, 0x1C, 0x08, 0xB2, 0xC0, 0x38, 0x01, 0x54, 0x33, 0x5C, 0x2B, 0xD1, 0xF9, 0x28, 0x00, 
+	0x78, 0x1B, 0x4B, 0x0A, 0xD0, 0x04, 0x2B, 0x00, 0x23, 0x01, 0x4A, 0x09, 0xF0, 0x03, 0x90, 0x00, 
+	0x9B, 0x03, 0xFC, 0x37, 0x1B, 0x1B, 0x19, 0x2D, 0x9C, 0x03, 0x93, 0x03, 0xD1, 0xE3, 0x2C, 0x00, 
+	0x46, 0xC0, 0xBD, 0x7F, 0x20, 0x00, 0x1E, 0x0C, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x01, 0xEB, 
+	0x20, 0x00, 0x16, 0x54, 0x4B, 0x1E, 0xB5, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4C, 0x1D, 0xD0, 0x37, 
+	0x70, 0x23, 0x23, 0x00, 0x20, 0x04, 0x4B, 0x1C, 0x47, 0x98, 0x68, 0x1B, 0x4A, 0x1C, 0x4B, 0x1B, 
+	0x68, 0x1B, 0x68, 0x59, 0x80, 0x53, 0x80, 0x11, 0x78, 0x1B, 0x4B, 0x1A, 0xD0, 0x06, 0x2B, 0x00, 
+	0x21, 0x02, 0x23, 0x01, 0x20, 0x18, 0x93, 0x00, 0xF0, 0x03, 0x1C, 0x0B, 0x78, 0x23, 0xFC, 0x09, 
+	0x2B, 0x00, 0x4C, 0x15, 0x4B, 0x13, 0xD0, 0x1A, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x03, 
+	0xF0, 0x03, 0x49, 0x12, 0x4A, 0x12, 0xFC, 0x55, 0x70, 0x13, 0x23, 0x01, 0x2A, 0x02, 0x68, 0x22, 
+	0x18, 0xD2, 0xDC, 0x04, 0x4A, 0x0F, 0x60, 0x22, 0xE0, 0x08, 0x70, 0x13, 0xFF, 0x74, 0xF7, 0xFF, 
+	0x22, 0x0D, 0x4B, 0x0D, 0x23, 0x00, 0x70, 0x1A, 0xE0, 0x00, 0x60, 0x23, 0xBD, 0x13, 0x60, 0x23, 
+	0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x16, 0x3D, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x01, 0x70, 
+	0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x01, 0x84, 0x00, 0x00, 0x5C, 0x50, 
+	0x20, 0x00, 0x16, 0x48, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0xBA, 0xB5, 0xF0, 
+	0x33, 0x04, 0xB0, 0x85, 0x24, 0x00, 0x7F, 0xDB, 0x22, 0x0A, 0x49, 0xB8, 0x3B, 0x01, 0xE0, 0x09, 
+	0x1C, 0x10, 0xB2, 0xDB, 0x18, 0x08, 0x43, 0x58, 0x5F, 0x40, 0x25, 0x3C, 0xD0, 0x00, 0x28, 0x00, 
+	0x2B, 0x00, 0x24, 0x01, 0x4B, 0xB2, 0xD1, 0xF3, 0x78, 0x1B, 0x4A, 0xB2, 0x3B, 0x01, 0xE0, 0x07, 
+	0x1D, 0x19, 0xB2, 0xDB, 0x5E, 0x89, 0x00, 0x49, 0xD0, 0x00, 0x29, 0x00, 0x2B, 0x00, 0x24, 0x01, 
+	0x4A, 0xAD, 0xD1, 0xF5, 0xD1, 0x04, 0x2C, 0x00, 0x49, 0xAC, 0x68, 0x13, 0xD0, 0x01, 0x42, 0x8B, 
+	0x60, 0x13, 0x33, 0x01, 0x22, 0x00, 0x4B, 0xAA, 0x4B, 0xA4, 0x70, 0x1A, 0x4B, 0xA2, 0x68, 0x1A, 
+	0xD1, 0x7C, 0x2A, 0x00, 0x68, 0x12, 0x4A, 0xA3, 0xD1, 0x78, 0x2A, 0x00, 0x32, 0x34, 0x1C, 0x1A, 
+	0x28, 0x00, 0x78, 0x10, 0x4A, 0xA3, 0xD1, 0x41, 0x2A, 0x01, 0x78, 0x12, 0x4B, 0xA2, 0xD1, 0x17, 
+	0x4B, 0xA2, 0x70, 0x18, 0x4B, 0xA2, 0x70, 0x1A, 0x4B, 0xA2, 0x70, 0x18, 0x2B, 0x00, 0x78, 0x1B, 
+	0x49, 0xA1, 0xD0, 0x02, 0xFB, 0xDC, 0xF0, 0x03, 0x22, 0x01, 0x4B, 0x99, 0xF0, 0x01, 0x70, 0x1A, 
+	0xF0, 0x01, 0xFE, 0x49, 0x4B, 0x97, 0xFE, 0x63, 0x70, 0x1A, 0x22, 0x00, 0x4A, 0x9B, 0xE1, 0x67, 
+	0x78, 0x1B, 0x33, 0x3C, 0x42, 0x9A, 0x68, 0x12, 0x4B, 0x96, 0xDB, 0x1F, 0x2B, 0x00, 0x78, 0x1B, 
+	0x49, 0x97, 0xD0, 0x02, 0xFB, 0xC4, 0xF0, 0x03, 0x49, 0x87, 0x4B, 0x96, 0x31, 0x3D, 0x68, 0x1A, 
+	0x60, 0x1A, 0x32, 0x01, 0x42, 0x8A, 0x78, 0x09, 0x20, 0x00, 0xDB, 0x0F, 0x4B, 0x8A, 0x60, 0x18, 
+	0x4B, 0x8A, 0x70, 0x18, 0x4B, 0x8B, 0x70, 0x18, 0x42, 0x83, 0x78, 0x1B, 0x49, 0x8E, 0xD0, 0x02, 
+	0xFB, 0xAE, 0xF0, 0x03, 0x22, 0x02, 0x4B, 0x82, 0x4B, 0x85, 0x70, 0x1A, 0x21, 0x00, 0x4A, 0x8B, 
+	0x68, 0x10, 0x70, 0x19, 0x60, 0x19, 0x4B, 0x85, 0x42, 0x88, 0x1C, 0x13, 0x38, 0x01, 0xDD, 0x0E, 
+	0x42, 0x8C, 0x60, 0x10, 0x60, 0x11, 0xD0, 0x00, 0x2A, 0x01, 0x68, 0x1A, 0xE1, 0x18, 0xD0, 0x00, 
+	0x60, 0x1A, 0x22, 0x00, 0x22, 0x03, 0x4B, 0x76, 0xE1, 0x28, 0x70, 0x1A, 0x49, 0x81, 0x4B, 0x80, 
+	0x8F, 0xDB, 0x33, 0x04, 0xD1, 0x00, 0x42, 0x8B, 0x49, 0x7F, 0xE1, 0x0B, 0x42, 0x99, 0x68, 0x09, 
+	0xE1, 0x06, 0xDA, 0x00, 0x48, 0x6C, 0x4B, 0x68, 0x31, 0x3E, 0x1C, 0x19, 0x68, 0x00, 0x78, 0x09, 
+	0xDA, 0x00, 0x42, 0x88, 0x33, 0x3F, 0xE0, 0xFD, 0x60, 0x13, 0x78, 0x1B, 0x33, 0x04, 0xE0, 0xF9, 
+	0x23, 0x00, 0x7F, 0xD8, 0x49, 0x75, 0x1C, 0x1A, 0x38, 0x01, 0xE0, 0x31, 0x24, 0x0A, 0xB2, 0xC0, 
+	0x4F, 0x5E, 0x43, 0x44, 0x26, 0x3C, 0x19, 0x3D, 0x2D, 0x00, 0x5F, 0xAD, 0x19, 0x0C, 0xDD, 0x27, 
+	0x5F, 0xE4, 0x27, 0x3C, 0xDD, 0x22, 0x2C, 0x00, 0x19, 0x0D, 0x00, 0x44, 0x4D, 0x57, 0x88, 0xAF, 
+	0x19, 0x2C, 0xB2, 0x3E, 0xB2, 0x25, 0x88, 0xA4, 0xD4, 0x02, 0x1B, 0x76, 0xB2, 0xA4, 0x1B, 0x3C, 
+	0x1B, 0xE4, 0xE0, 0x01, 0x1C, 0x05, 0xB2, 0xA4, 0x4F, 0x50, 0x4E, 0x64, 0x00, 0x6D, 0x35, 0x10, 
+	0x5B, 0xAC, 0x18, 0xA2, 0xB2, 0x27, 0x5B, 0xED, 0xB2, 0x92, 0xB2, 0x2E, 0xD4, 0x02, 0x1B, 0xBF, 
+	0xB2, 0xA4, 0x1B, 0x64, 0x1B, 0x2C, 0xE0, 0x01, 0xE6, 0x27, 0xAE, 0xF1, 0x03, 0x18, 0xE3, 0xB2, 
+	0xA4, 0x28, 0x00, 0xB2, 0x9B, 0x49, 0x56, 0xD1, 0xCB, 0x49, 0x4D, 0x60, 0x08, 0x49, 0x43, 0x78, 
+	0x0C, 0xD0, 0x40, 0x2C, 0x00, 0x78, 0x0B, 0x31, 0x34, 0xD0, 0x00, 0x2B, 0x00, 0x4B, 0x4A, 0xE0, 
+	0xB3, 0x2B, 0x00, 0x78, 0x1B, 0x49, 0x53, 0xD0, 0x02, 0xFB, 0x2C, 0xF0, 0x03, 0x4A, 0x52, 0x4C, 
+	0x4F, 0x80, 0x13, 0x68, 0x23, 0x68, 0x1B, 0x4B, 0x51, 0x4B, 0x43, 0x80, 0x53, 0x2B, 0x00, 0x78, 
+	0x1B, 0x23, 0x01, 0xD0, 0x06, 0x93, 0x00, 0x21, 0x02, 0x1C, 0x0B, 0x20, 0x00, 0xFA, 0xC2, 0xF0, 
+	0x03, 0x68, 0x20, 0x49, 0x32, 0x4B, 0x3B, 0x8F, 0x4A, 0xDA, 0x14, 0x42, 0x90, 0x48, 0x47, 0x4A, 
+	0x41, 0x78, 0x12, 0x32, 0x45, 0x42, 0x90, 0x68, 0x00, 0x78, 0x1B, 0xDA, 0x0D, 0xD0, 0x00, 0x2B, 
+	0x00, 0x4B, 0x37, 0xE0, 0x89, 0x68, 0x1A, 0x31, 0x3C, 0x42, 0x8A, 0x78, 0x09, 0xE0, 0x82, 0xDB, 
+	0x00, 0x60, 0x1A, 0x32, 0x01, 0x22, 0x01, 0xE0, 0x7F, 0x4A, 0x31, 0x70, 0x1A, 0x60, 0x13, 0x23, 
+	0x00, 0x60, 0x13, 0x4A, 0x31, 0x1C, 0x08, 0xE0, 0x77, 0x78, 0x00, 0x30, 0x34, 0xD1, 0x72, 0x28, 
+	0x00, 0x8F, 0x09, 0x48, 0x32, 0x42, 0x88, 0x68, 0x00, 0x49, 0x2E, 0xDB, 0x09, 0x31, 0x45, 0x48, 
+	0x33, 0x68, 0x00, 0x78, 0x09, 0xDB, 0x02, 0x42, 0x88, 0x20, 0x01, 0x49, 0x22, 0x49, 0x1F, 0x70, 
+	0x08, 0x29, 0x00, 0x78, 0x09, 0x49, 0x15, 0xD1, 0x08, 0x49, 0x27, 0x8F, 0x08, 0xD0, 0x5A, 0x42, 
+	0x88, 0x78, 0x09, 0x49, 0x1C, 0xD0, 0x56, 0x29, 0x00, 0x68, 0x09, 0x49, 0x11, 0xDC, 0x05, 0x29, 
+	0x01, 0x8E, 0xC9, 0x49, 0x0E, 0xD8, 0x01, 0x42, 0x8A, 0xD9, 0x49, 0x42, 0x8B, 0x20, 0x00, 0x4B, 
+	0x13, 0x4B, 0x13, 0x70, 0x18, 0x70, 0x1A, 0x22, 0x01, 0x70, 0x18, 0x4B, 0x12, 0x78, 0x1B, 0x4B, 
+	0x12, 0xD0, 0x02, 0x42, 0x83, 0xF0, 0x03, 0x49, 0x11, 0x4B, 0x0A, 0xFA, 0xBD, 0x70, 0x1A, 0x22, 
+	0x01, 0xFD, 0x2A, 0xF0, 0x01, 0xFD, 0x44, 0xF0, 0x01, 0x46, 0xC0, 0xE0, 0x35, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x01, 
+	0xC8, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x01, 0xB3, 0x20, 0x00, 0x01, 0xB4, 0x20, 0x00, 0x01, 
+	0xDC, 0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x01, 0xD4, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x5C, 
+	0x5A, 0x20, 0x00, 0x01, 0xD8, 0x00, 0x00, 0x5C, 0x64, 0x20, 0x00, 0x01, 0xD0, 0x00, 0x00, 0x5C, 
+	0x6C, 0x20, 0x00, 0x01, 0xCC, 0x20, 0x00, 0x12, 0x48, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x00, 0x16, 
+	0x34, 0x20, 0x00, 0x03, 0x20, 0x00, 0x00, 0x5C, 0x75, 0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x16, 
+	0x38, 0x22, 0x01, 0x4B, 0x0D, 0x4B, 0x0D, 0x70, 0x1A, 0x78, 0x1B, 0x33, 0x34, 0xD0, 0x10, 0x2B, 
+	0x00, 0x78, 0x1A, 0x4B, 0x0B, 0xD0, 0x0C, 0x2A, 0x00, 0x21, 0x00, 0x4A, 0x0A, 0x29, 0x03, 0x56, 
+	0x51, 0x49, 0x09, 0xD0, 0x07, 0x42, 0x48, 0x78, 0x09, 0x31, 0x01, 0x41, 0x41, 0x22, 0x00, 0x70, 
+	0x11, 0xB0, 0x05, 0x70, 0x1A, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x01, 0xB4, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x01, 0xDC, 0x20, 0x00, 0x01, 0xB3, 0x20, 0x00, 0x01, 0xDD, 0x4B, 0x54, 0xB5, 
+	0x10, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x53, 0xD0, 0x0A, 0x47, 0x98, 0x68, 0x1B, 0xFC, 0xC4, 0xF0, 
+	0x01, 0xFC, 0xDE, 0xF0, 0x01, 0xF9, 0x00, 0xF0, 0x02, 0xFD, 0x3A, 0xF0, 0x02, 0x21, 0x02, 0x4B, 
+	0x4E, 0x43, 0x8A, 0x68, 0x1A, 0x68, 0x19, 0x60, 0x1A, 0x05, 0xD2, 0x22, 0x80, 0x60, 0x91, 0x68, 
+	0x90, 0x20, 0x08, 0x68, 0x19, 0x60, 0x19, 0x43, 0x81, 0x68, 0x90, 0x68, 0x19, 0x68, 0x19, 0x60, 
+	0x91, 0x43, 0x81, 0x20, 0x04, 0x68, 0x1B, 0x60, 0x19, 0x60, 0x93, 0x68, 0x91, 0x78, 0x18, 0x4B, 
+	0x40, 0x78, 0x1B, 0x4B, 0x42, 0xD0, 0x32, 0x28, 0x00, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x40, 0x20, 
+	0x00, 0xFA, 0x28, 0xF0, 0x03, 0x22, 0x80, 0x4B, 0x3F, 0x00, 0x52, 0x68, 0x19, 0x60, 0x1A, 0x43, 
+	0x0A, 0x23, 0xA0, 0x68, 0x1A, 0x68, 0x99, 0x05, 0xDB, 0x4B, 0x37, 0x60, 0x9A, 0x68, 0x19, 0x4A, 
+	0x3A, 0x60, 0x1A, 0x40, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x68, 0x99, 0x05, 0xDB, 0x4A, 0x37, 0x60, 
+	0x9A, 0x70, 0x11, 0x21, 0x01, 0x22, 0x80, 0x68, 0x19, 0x43, 0x0A, 0x04, 0x52, 0x46, 0xC0, 0x60, 
+	0x1A, 0x46, 0xC0, 0x46, 0xC0, 0xB6, 0x62, 0x46, 0xC0, 0x68, 0x19, 0x4A, 0x31, 0x60, 0x1A, 0x40, 
+	0x0A, 0x8F, 0x6F, 0xF3, 0xBF, 0x00, 0xC0, 0x20, 0xFA, 0xFE, 0x18, 0xF0, 0x02, 0x2B, 0x00, 0xE0, 
+	0x11, 0x49, 0x2C, 0xD0, 0x02, 0xF9, 0xF6, 0xF0, 0x03, 0xF0, 0x02, 0x48, 0x2B, 0x4B, 0x2B, 0xFE, 
+	0x0F, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2A, 0xD1, 0x05, 0x2B, 0x00, 0x78, 0x1B, 0xF0, 0x03, 0xD1, 
+	0x01, 0x4B, 0x1D, 0xF8, 0x07, 0x68, 0x1A, 0x21, 0x02, 0x60, 0x1A, 0x43, 0x0A, 0x22, 0x80, 0x68, 
+	0x19, 0x68, 0x90, 0x05, 0xD2, 0x49, 0x23, 0x60, 0x91, 0x7F, 0xC8, 0x31, 0x01, 0x28, 0x00, 0x21, 
+	0x08, 0x68, 0x18, 0xD0, 0x06, 0x60, 0x19, 0x43, 0x01, 0x68, 0x90, 0x68, 0x19, 0xE0, 0x05, 0x60, 
+	0x91, 0x43, 0x88, 0x68, 0x18, 0x68, 0x19, 0x60, 0x18, 0x60, 0x91, 0x68, 0x90, 0x21, 0x04, 0x68, 
+	0x1A, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x20, 0xFA, 0x05, 0xDB, 0x00, 0xC0, 0x68, 
+	0x99, 0xF0, 0x02, 0x60, 0x9A, 0x4B, 0x06, 0xFD, 0xDB, 0x2B, 0x00, 0x78, 0x1B, 0x4C, 0x12, 0xD0, 
+	0x06, 0x68, 0x23, 0x20, 0x0D, 0x68, 0x23, 0x47, 0x98, 0x47, 0x98, 0x20, 0x12, 0x46, 0xC0, 0xBD, 
+	0x10, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x00, 0x68, 0x20, 0x00, 0x00, 0x14, 0x20, 0x00, 0x01, 
+	0xEB, 0x00, 0x00, 0x5C, 0x7B, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0xFF, 0xFE, 0xFF, 0x20, 0x00, 0x00, 
+	0x2C, 0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x5C, 0x81, 0x00, 0x0F, 0x42, 0x40, 0x20, 0x00, 0x01, 
+	0xE5, 0x20, 0x00, 0x01, 0xE4, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xF8, 0x4B, 0x31, 0xB5, 
+	0x10, 0x78, 0x19, 0x24, 0x02, 0xB2, 0x4A, 0x4B, 0x30, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2F, 0xD0, 
+	0x25, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2E, 0xD1, 0x21, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x2D, 0xD1, 
+	0x1D, 0xD0, 0x07, 0x42, 0xA2, 0x7B, 0x80, 0x48, 0x2C, 0xD1, 0x03, 0x28, 0x00, 0x68, 0x00, 0x48, 
+	0x2B, 0xD0, 0x03, 0x28, 0x00, 0x60, 0x19, 0x21, 0x00, 0xE0, 0x0E, 0x24, 0x01, 0x68, 0x18, 0x4A, 
+	0x28, 0x42, 0x90, 0x68, 0x92, 0x30, 0x01, 0xDA, 0x01, 0x29, 0x00, 0x60, 0x18, 0x4B, 0x21, 0xD0, 
+	0x36, 0x68, 0x1B, 0x24, 0x00, 0xDA, 0x16, 0x42, 0x93, 0xB2, 0x63, 0xE0, 0x30, 0xD0, 0x2D, 0x42, 
+	0x93, 0xD0, 0x1D, 0x2B, 0x01, 0xD0, 0x02, 0x2B, 0x02, 0xD0, 0x0C, 0x2B, 0x00, 0x4B, 0x1D, 0xE0, 
+	0x24, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 0x03, 0xF0, 0x03, 0x49, 0x1B, 0x20, 0x00, 0xF9, 
+	0x53, 0xFD, 0x22, 0xF0, 0x02, 0x4B, 0x17, 0xE0, 0x18, 0x2B, 0x00, 0x78, 0x1B, 0x20, 0x00, 0xD0, 
+	0x03, 0xF0, 0x03, 0x49, 0x16, 0x4B, 0x12, 0xF9, 0x47, 0xF0, 0x02, 0x68, 0x58, 0xC9, 0x1A, 0xAE, 
+	0xF1, 0x04, 0xE0, 0x0B, 0xFD, 0x15, 0x78, 0x1B, 0x4B, 0x10, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x11, 
+	0x20, 0x00, 0xF9, 0x3A, 0xF0, 0x03, 0x68, 0x18, 0x4B, 0x0B, 0xFD, 0x08, 0xF0, 0x02, 0x70, 0x1C, 
+	0x4B, 0x02, 0xFC, 0xF6, 0xF0, 0x02, 0x46, 0xC0, 0xBD, 0x10, 0x20, 0x00, 0x00, 0x3C, 0x20, 0x00, 
+	0x03, 0x1C, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x01, 0xE2, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 
+	0x01, 0x70, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x02, 0xFC, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 
+	0x5C, 0x89, 0x00, 0x00, 0x5C, 0x8E, 0x00, 0x00, 0x5C, 0x93, 0xF0, 0x02, 0xB5, 0x08, 0xBD, 0x08, 
+	0xFD, 0x09, 0xF0, 0x02, 0xB5, 0x08, 0xBD, 0x08, 0xFC, 0xF7, 0xF0, 0x02, 0xB5, 0x08, 0x23, 0x80, 
+	0xFC, 0x8F, 0x6C, 0x9A, 0x05, 0xDB, 0x43, 0x0A, 0x21, 0x01, 0xF7, 0xFF, 0x64, 0x9A, 0xBD, 0x08, 
+	0xFF, 0xF1, 0xB0, 0x85, 0xB5, 0xF0, 0xFF, 0xF0, 0xF7, 0xFF, 0x4C, 0x73, 0x4A, 0x72, 0x78, 0x15, 
+	0x78, 0x53, 0xE0, 0x10, 0x48, 0x72, 0xB2, 0xDB, 0x3B, 0x01, 0x46, 0x67, 0x1C, 0x9A, 0x01, 0x79, 
+	0x18, 0xB2, 0x5B, 0x12, 0x00, 0x52, 0x00, 0x4F, 0x18, 0xC9, 0x4A, 0x6D, 0x52, 0x3A, 0x54, 0x8F, 
+	0x27, 0x00, 0xD1, 0xEF, 0x2B, 0x00, 0x1E, 0x5A, 0x46, 0x63, 0x2B, 0x00, 0xB2, 0xD2, 0x1C, 0x56, 
+	0xD0, 0x04, 0x01, 0xB6, 0x1C, 0x2B, 0xE7, 0xF3, 0x46, 0x94, 0x4C, 0x67, 0x4B, 0x66, 0x48, 0x67, 
+	0x78, 0x1B, 0x4A, 0x67, 0x49, 0x61, 0x3B, 0x01, 0xE0, 0x0E, 0x5C, 0xE5, 0xB2, 0xDB, 0x35, 0x01, 
+	0x5C, 0xC6, 0x01, 0xAD, 0x36, 0x02, 0x00, 0x6D, 0x19, 0xAD, 0x00, 0x5D, 0x5A, 0x6E, 0x4D, 0x61, 
+	0x52, 0xAE, 0x54, 0xEE, 0x26, 0x00, 0xD1, 0xEE, 0x2B, 0x00, 0x94, 0x02, 0x24, 0x1F, 0xF7, 0xFF, 
+	0xE0, 0x68, 0x4D, 0x54, 0xFF, 0xB3, 0x78, 0x6B, 0x78, 0x2E, 0xE0, 0x2D, 0x96, 0x03, 0xB2, 0xDB, 
+	0x3B, 0x01, 0x18, 0xF0, 0x4F, 0x52, 0x1C, 0x9A, 0x00, 0x40, 0x18, 0xAC, 0x5B, 0xC0, 0x00, 0x64, 
+	0x4F, 0x4E, 0x1B, 0xC7, 0x5B, 0xE7, 0x4F, 0x4C, 0xD4, 0x05, 0x1B, 0x04, 0x5B, 0xE4, 0x94, 0x01, 
+	0x10, 0x64, 0x4F, 0x49, 0xE0, 0x04, 0x1A, 0x24, 0x5B, 0xE4, 0x94, 0x01, 0x10, 0x64, 0x48, 0x46, 
+	0x18, 0xAF, 0x5B, 0xC0, 0x00, 0x7F, 0x46, 0x84, 0x4F, 0x45, 0x00, 0x42, 0x18, 0xF0, 0x46, 0x62, 
+	0x1C, 0x14, 0x4C, 0x43, 0x53, 0xE2, 0x9C, 0x01, 0x5C, 0x27, 0xDA, 0x00, 0x42, 0xBC, 0x4F, 0x40, 
+	0x1C, 0x3C, 0x2B, 0x00, 0x54, 0x3C, 0x1C, 0x0B, 0xD1, 0xD2, 0xB2, 0xC9, 0x1E, 0x59, 0xD0, 0x04, 
+	0x2B, 0x00, 0x9B, 0x03, 0x1C, 0x4D, 0x01, 0xAD, 0x01, 0x4E, 0x4B, 0x3A, 0xE7, 0xF3, 0x78, 0x1B, 
+	0x4F, 0x3C, 0xE0, 0x23, 0x4A, 0x35, 0x3B, 0x01, 0x48, 0x38, 0x4E, 0x38, 0xB2, 0xDB, 0x5C, 0xF4, 
+	0x5C, 0xC5, 0x34, 0x02, 0x35, 0x01, 0x19, 0x00, 0x01, 0xA8, 0x00, 0x59, 0x00, 0x40, 0x5B, 0xC9, 
+	0x5A, 0x86, 0x1B, 0x8E, 0x5A, 0x80, 0x1A, 0x09, 0xD4, 0x02, 0xE0, 0x01, 0x10, 0x49, 0x10, 0x49, 
+	0x1A, 0x41, 0x19, 0x2C, 0x01, 0xAD, 0x00, 0x64, 0x48, 0x28, 0x48, 0x2D, 0x5B, 0x05, 0x52, 0x25, 
+	0x00, 0x5C, 0x5C, 0xC4, 0x48, 0x2C, 0xDA, 0x00, 0x42, 0xA1, 0x54, 0xC1, 0x1C, 0x21, 0xD1, 0xD9, 
+	0x2B, 0x00, 0x3B, 0x01, 0x9B, 0x02, 0x93, 0x02, 0xB2, 0xDB, 0xD1, 0x90, 0x2B, 0x00, 0x48, 0x26, 
+	0x4F, 0x1D, 0x78, 0x3F, 0x78, 0x79, 0x3B, 0x01, 0xE0, 0x12, 0x01, 0x51, 0xB2, 0xDB, 0x18, 0xC9, 
+	0x4E, 0x1B, 0x5B, 0x8D, 0x00, 0x49, 0x42, 0xB5, 0x88, 0x26, 0x88, 0x26, 0xD9, 0x03, 0x52, 0x45, 
+	0x1B, 0xAD, 0x25, 0x00, 0xE0, 0x01, 0x2B, 0x00, 0x52, 0x45, 0x1C, 0x11, 0xD1, 0xED, 0xB2, 0xD2, 
+	0x1E, 0x4A, 0xD0, 0x04, 0x29, 0x00, 0x01, 0xD4, 0x4E, 0x19, 0x19, 0xA4, 0x1C, 0x3B, 0x4B, 0x11, 
+	0xE7, 0xF3, 0x78, 0x1B, 0x4F, 0x13, 0x48, 0x16, 0x4E, 0x10, 0x3B, 0x01, 0xE0, 0x10, 0x5C, 0xF5, 
+	0xB2, 0xDB, 0x01, 0xED, 0x49, 0x12, 0x18, 0x6D, 0x00, 0x5A, 0x88, 0x29, 0x5B, 0xD4, 0xD9, 0x03, 
+	0x42, 0x8C, 0x1B, 0x64, 0x88, 0x2D, 0xE0, 0x01, 0x52, 0x84, 0x52, 0x84, 0x24, 0x00, 0xD1, 0xEC, 
+	0x2B, 0x00, 0xBD, 0xF0, 0xB0, 0x05, 0x20, 0x00, 0x03, 0x0A, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 
+	0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x09, 0x7C, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 
+	0x75, 0x2A, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 0x0A, 0xA4, 0x20, 0x00, 0x0D, 0x3C, 0x40, 0x00, 
+	0x40, 0x82, 0x20, 0x00, 0x12, 0x3C, 0xB0, 0x87, 0xB5, 0xF0, 0xFA, 0x00, 0xF0, 0x02, 0xFB, 0x16, 
+	0xF0, 0x02, 0xD1, 0xFB, 0x28, 0x00, 0x78, 0x1B, 0x4B, 0x52, 0xD0, 0x09, 0x2B, 0x02, 0x49, 0x52, 
+	0x4B, 0x51, 0x78, 0x1A, 0x33, 0x40, 0x18, 0x54, 0x42, 0x53, 0x33, 0x01, 0x54, 0xE0, 0xDD, 0xFA, 
+	0x42, 0x93, 0x4F, 0x4E, 0x4E, 0x4C, 0x33, 0x40, 0x1C, 0x33, 0x42, 0x64, 0x78, 0x1C, 0x78, 0xFA, 
+	0xE0, 0x0C, 0x19, 0x12, 0x23, 0x80, 0x05, 0xDB, 0xB2, 0xD2, 0xF7, 0xFF, 0x71, 0x1A, 0x78, 0x28, 
+	0xFE, 0xCD, 0xF0, 0x03, 0x18, 0x20, 0x34, 0x01, 0xFF, 0xC7, 0x35, 0x40, 0x1C, 0x35, 0x42, 0x9C, 
+	0x78, 0x2B, 0x26, 0x00, 0xDD, 0xED, 0x78, 0x2C, 0xE0, 0x25, 0x42, 0x64, 0x1C, 0x2F, 0xE0, 0x1A, 
+	0x3F, 0x40, 0x78, 0xDA, 0x4B, 0x3E, 0x19, 0x12, 0x23, 0x80, 0xB2, 0xD2, 0x05, 0xDB, 0xF7, 0xFF, 
+	0x71, 0x1A, 0x78, 0x2D, 0xFE, 0xB3, 0x19, 0x65, 0xA9, 0x04, 0x1C, 0x28, 0xAA, 0x05, 0xFF, 0xCC, 
+	0xF0, 0x03, 0x9B, 0x04, 0x49, 0x35, 0x2B, 0xFF, 0x5D, 0x4A, 0x23, 0xFF, 0xDD, 0x00, 0xDA, 0x00, 
+	0x42, 0x9A, 0x55, 0x4A, 0x1C, 0x1A, 0x1C, 0x3D, 0x34, 0x01, 0x78, 0x2B, 0x35, 0x40, 0xDD, 0xDF, 
+	0x42, 0x9C, 0x4A, 0x2F, 0x36, 0x01, 0x78, 0x13, 0x4D, 0x2B, 0x42, 0x9E, 0x35, 0x40, 0xF0, 0x02, 
+	0xDB, 0xD3, 0x49, 0x2C, 0xF9, 0x95, 0x78, 0x0D, 0x78, 0x2A, 0x48, 0x27, 0x49, 0x2B, 0x23, 0x01, 
+	0x78, 0x09, 0x1A, 0x9B, 0x91, 0x03, 0x4C, 0x29, 0x21, 0x00, 0x46, 0x94, 0x18, 0x10, 0x18, 0xC6, 
+	0xE0, 0x11, 0x78, 0x12, 0x1E, 0x72, 0x43, 0x6A, 0x5C, 0xC7, 0x9A, 0x03, 0x92, 0x02, 0x9A, 0x02, 
+	0x43, 0x57, 0x78, 0x72, 0x19, 0xD7, 0x18, 0xBA, 0x43, 0x6A, 0xDB, 0x01, 0x42, 0x94, 0x1C, 0x19, 
+	0xB2, 0x94, 0x45, 0x9C, 0x33, 0x01, 0x4B, 0x19, 0xDC, 0xEB, 0x78, 0xDA, 0x4C, 0x1D, 0xB2, 0xC9, 
+	0x18, 0x51, 0x4B, 0x13, 0x70, 0x99, 0x28, 0x00, 0x78, 0x18, 0x78, 0x23, 0xD1, 0x05, 0xD0, 0x02, 
+	0x2B, 0x00, 0xF0, 0x02, 0x49, 0x18, 0x78, 0x23, 0xFF, 0x71, 0xD0, 0x0B, 0x2B, 0x00, 0x20, 0x00, 
+	0x4B, 0x0D, 0x78, 0x19, 0x33, 0x40, 0x00, 0x49, 0x4A, 0x0C, 0xB2, 0xC9, 0x31, 0x01, 0x90, 0x00, 
+	0x23, 0x01, 0xFF, 0x0A, 0xF0, 0x02, 0x78, 0x1B, 0x4B, 0x0E, 0xD0, 0x06, 0x2B, 0x00, 0x20, 0x00, 
+	0x21, 0x01, 0x1C, 0x0B, 0x4A, 0x0D, 0xF0, 0x02, 0x90, 0x00, 0xB0, 0x07, 0xFE, 0xFF, 0x46, 0xC0, 
+	0xBD, 0xF0, 0x20, 0x00, 0x01, 0xE0, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x01, 0x93, 0x20, 0x00, 
+	0x0A, 0xAA, 0x20, 0x00, 0x12, 0x87, 0x20, 0x00, 0x00, 0x54, 0x20, 0x00, 0x00, 0x55, 0x00, 0x00, 
+	0xFF, 0xFF, 0x75, 0x48, 0xAE, 0xF1, 0x05, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x5C, 0x9A, 0x20, 
+	0x00, 0x0A, 0xAC, 0x4B, 0x24, 0xB5, 0x13, 0x68, 0x1B, 0x4C, 0x24, 0xD0, 0x0E, 0x2B, 0x00, 0x2B, 
+	0x00, 0x78, 0x23, 0x20, 0x00, 0xD0, 0x03, 0xF0, 0x02, 0x49, 0x21, 0xF7, 0xFF, 0xFF, 0x31, 0x78, 
+	0x23, 0xFA, 0x79, 0xD1, 0x02, 0x2B, 0x00, 0xF9, 0xEE, 0xF0, 0x02, 0x78, 0x23, 0xE7, 0xFE, 0xD0, 
+	0x09, 0x2B, 0x00, 0x68, 0x23, 0x4C, 0x1B, 0xD5, 0x05, 0x00, 0xDA, 0xFA, 0x6A, 0xF7, 0xFF, 0x4B, 
+	0x19, 0x68, 0x22, 0x60, 0x23, 0x40, 0x13, 0x78, 0x23, 0x4C, 0x14, 0xD0, 0x22, 0x2B, 0x00, 0x68, 
+	0x1B, 0x4B, 0x14, 0xD5, 0x1E, 0x01, 0x5A, 0x20, 0x00, 0x49, 0x14, 0xFF, 0x10, 0xF0, 0x02, 0x4A, 
+	0x14, 0x4B, 0x13, 0x80, 0x11, 0x88, 0x19, 0x80, 0x51, 0x88, 0x59, 0x80, 0x91, 0x88, 0x99, 0x80, 
+	0xD3, 0x88, 0xDB, 0x78, 0x1B, 0x4B, 0x10, 0x78, 0x23, 0x81, 0x13, 0xD0, 0x05, 0x2B, 0x00, 0x21, 
+	0x05, 0x20, 0x00, 0x90, 0x00, 0x23, 0x02, 0xFE, 0xA2, 0xF0, 0x02, 0x4A, 0x0B, 0x4B, 0x05, 0x40, 
+	0x0A, 0x68, 0x19, 0xBD, 0x13, 0x60, 0x1A, 0x20, 0x00, 0x1E, 0x0C, 0x20, 0x00, 0x01, 0xEB, 0x00, 
+	0x00, 0x5C, 0xA0, 0x20, 0x00, 0x00, 0x58, 0xEF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x5C, 0xA7, 0x20, 
+	0x00, 0x02, 0x04, 0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x0A, 0xAA, 0xFB, 0xFF, 0xFF, 0xFF, 0x28, 
+	0x02, 0xB5, 0x10, 0x28, 0x03, 0xD0, 0x04, 0x28, 0x01, 0xD0, 0x45, 0xE0, 0x15, 0xD1, 0x33, 0xFA, 
+	0x02, 0xF7, 0xFF, 0x4C, 0x2A, 0x4B, 0x29, 0x78, 0x1B, 0x33, 0x40, 0x22, 0x50, 0x49, 0x29, 0x48, 
+	0x29, 0x70, 0x23, 0xFB, 0x72, 0xF0, 0x04, 0x20, 0x0D, 0x4B, 0x28, 0x47, 0x98, 0x68, 0x1B, 0xFA, 
+	0x00, 0xF7, 0xFF, 0x2B, 0x10, 0x78, 0x23, 0xE0, 0x14, 0xD1, 0x1A, 0xF9, 0xEC, 0xF7, 0xFF, 0x4C, 
+	0x1F, 0x4B, 0x1E, 0x78, 0x1B, 0x33, 0x40, 0x22, 0x50, 0x49, 0x21, 0x48, 0x1E, 0x70, 0x23, 0xFB, 
+	0x5C, 0xF0, 0x04, 0x20, 0x0C, 0x4B, 0x1D, 0x47, 0x98, 0x68, 0x1B, 0xF9, 0xEA, 0xF7, 0xFF, 0x2B, 
+	0x10, 0x78, 0x23, 0x4B, 0x1B, 0xD1, 0x04, 0x70, 0x9A, 0x78, 0xDA, 0xFC, 0x8B, 0xF0, 0x02, 0xFC, 
+	0x0A, 0xF0, 0x02, 0x4B, 0x18, 0xE0, 0x20, 0x2A, 0x00, 0x78, 0x1A, 0x4A, 0x17, 0xD0, 0x05, 0x31, 
+	0x01, 0x68, 0x11, 0x22, 0x00, 0x60, 0x11, 0x4B, 0x15, 0x70, 0x1A, 0x2A, 0x13, 0x68, 0x1A, 0x22, 
+	0x00, 0xDD, 0x05, 0x4B, 0x0A, 0x60, 0x1A, 0x70, 0x1A, 0x22, 0x10, 0x4B, 0x0F, 0xE0, 0x0C, 0x2A, 
+	0x3B, 0x68, 0x1A, 0x22, 0x00, 0xDD, 0x08, 0x4B, 0x0E, 0x60, 0x1A, 0x68, 0x1B, 0x20, 0x01, 0x4B, 
+	0x0D, 0x47, 0x98, 0x70, 0x1A, 0x22, 0x01, 0x46, 0xC0, 0xBD, 0x10, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x03, 0x1D, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x01, 0xF8, 0x00, 
+	0x00, 0x74, 0x9A, 0x20, 0x00, 0x0A, 0xAA, 0x20, 0x00, 0x01, 0xC4, 0x20, 0x00, 0x01, 0xC0, 0x20, 
+	0x00, 0x01, 0xBC, 0x20, 0x00, 0x00, 0x6C, 0x20, 0x00, 0x01, 0xE7, 0x4B, 0x0C, 0xB5, 0x10, 0x79, 
+	0x99, 0x22, 0x01, 0xE0, 0x00, 0x23, 0x00, 0x1C, 0x5C, 0x1C, 0x23, 0xB2, 0xE4, 0x1C, 0x10, 0x42, 
+	0x81, 0x40, 0x98, 0x4A, 0x07, 0xDA, 0xF8, 0x71, 0x13, 0x21, 0x07, 0x05, 0xD2, 0x22, 0x80, 0x02, 
+	0x19, 0x40, 0x0B, 0x4B, 0x04, 0x6C, 0x10, 0x43, 0x0B, 0x40, 0x03, 0xBD, 0x10, 0x64, 0x13, 0x20, 
+	0x00, 0x12, 0x48, 0x20, 0x00, 0x00, 0x5C, 0xFF, 0xFF, 0xF8, 0xFF, 0x22, 0x07, 0x4B, 0x06, 0x23, 
+	0x80, 0x79, 0xD9, 0x6C, 0x18, 0x05, 0xDB, 0x4A, 0x04, 0x40, 0x11, 0x40, 0x02, 0x02, 0x09, 0x64, 
+	0x1A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x12, 0x48, 0xFF, 0xFF, 0xF8, 0xFF, 0xB0, 
+	0x8D, 0xB5, 0xF0, 0xF7, 0xFF, 0x90, 0x04, 0x4B, 0xC7, 0xFF, 0xC9, 0x78, 0xDE, 0x48, 0xC7, 0x96, 
+	0x05, 0x21, 0x00, 0xE0, 0x07, 0x78, 0x9C, 0xB2, 0xDB, 0x3B, 0x01, 0x00, 0x76, 0x18, 0xEE, 0x2B, 
+	0x00, 0x52, 0x31, 0x92, 0x05, 0xD1, 0xF8, 0x9E, 0x05, 0x9A, 0x05, 0xB2, 0xD2, 0x3A, 0x01, 0xD0, 
+	0x02, 0x2E, 0x00, 0x01, 0x55, 0x1C, 0x23, 0x9F, 0x04, 0xE7, 0xF3, 0xD0, 0x05, 0x2F, 0x00, 0x9E, 
+	0x05, 0x4B, 0xBB, 0x96, 0x06, 0x7B, 0x5B, 0xE0, 0x04, 0x93, 0x03, 0x27, 0x02, 0x4B, 0xB9, 0x97, 
+	0x06, 0x78, 0x9B, 0x46, 0x68, 0x93, 0x03, 0x56, 0x0B, 0x21, 0x0C, 0x93, 0x0B, 0x4C, 0xB2, 0x93, 
+	0x09, 0x42, 0x5B, 0x46, 0x6A, 0xE0, 0xAA, 0x56, 0x9A, 0x23, 0x18, 0x1C, 0x27, 0x7A, 0xE6, 0xE0, 
+	0x0D, 0x92, 0x02, 0x21, 0x00, 0x1C, 0x30, 0x9B, 0x02, 0x1C, 0x2A, 0xFB, 0x02, 0xF0, 0x02, 0x21, 
+	0x01, 0x1C, 0x30, 0x9B, 0x02, 0x1C, 0x2A, 0xFA, 0xFC, 0xF0, 0x02, 0xB2, 0xF6, 0x36, 0x01, 0x7A, 
+	0xFA, 0x7A, 0xBB, 0x1C, 0x3B, 0x18, 0xD2, 0xDB, 0xEB, 0x42, 0x96, 0x2E, 0x00, 0x9E, 0x04, 0x3D, 
+	0x0E, 0xD1, 0x00, 0x21, 0x18, 0x46, 0x68, 0x7B, 0x5E, 0x56, 0x08, 0x90, 0x02, 0x4F, 0x9E, 0x1C, 
+	0x30, 0xE0, 0x0D, 0x1C, 0x2A, 0x21, 0x00, 0xF0, 0x02, 0x9B, 0x02, 0x1C, 0x30, 0xFA, 0xE3, 0x1C, 
+	0x2A, 0x21, 0x01, 0xF0, 0x02, 0x9B, 0x02, 0x36, 0x01, 0xFA, 0xDD, 0x7B, 0x7A, 0xB2, 0xF6, 0x18, 
+	0xD3, 0x7B, 0x3B, 0xDB, 0xEC, 0x42, 0x9E, 0xFC, 0xBA, 0xF7, 0xFF, 0x78, 0x1B, 0x4B, 0x96, 0xD0, 
+	0x06, 0x2B, 0x00, 0x1C, 0x18, 0x23, 0x01, 0xAA, 0x0B, 0x1C, 0x19, 0xF0, 0x02, 0x93, 0x00, 0x25, 
+	0x00, 0xFD, 0x67, 0x4F, 0x90, 0x4E, 0x8C, 0x78, 0x3B, 0xE0, 0x0E, 0xD0, 0x09, 0x2B, 0x00, 0x01, 
+	0xEA, 0x4B, 0x8E, 0x23, 0x00, 0x18, 0xD2, 0x20, 0x01, 0x78, 0xB1, 0x23, 0x02, 0x93, 0x00, 0xFD, 
+	0x56, 0xF0, 0x02, 0xB2, 0xED, 0x35, 0x01, 0x42, 0x9D, 0x78, 0xF3, 0x9A, 0x0B, 0xD3, 0xED, 0xB2, 
+	0xD2, 0x78, 0xB6, 0x92, 0x07, 0x96, 0x02, 0xE0, 0x39, 0x4D, 0x80, 0xB2, 0xDB, 0x3B, 0x01, 0x1C, 
+	0x99, 0x9E, 0x08, 0x4F, 0x82, 0x18, 0x71, 0x5B, 0xCE, 0x00, 0x49, 0x00, 0x48, 0x18, 0xD1, 0xB2, 
+	0xB7, 0x5B, 0x40, 0xDC, 0x14, 0x42, 0xB8, 0x1C, 0x01, 0x1B, 0xC0, 0xDA, 0x01, 0x31, 0x80, 0x42, 
+	0x40, 0x20, 0x80, 0x28, 0x7F, 0x18, 0xD7, 0x20, 0x7F, 0xDD, 0x00, 0x54, 0x78, 0x49, 0x79, 0x00, 
+	0x48, 0x18, 0xD1, 0x27, 0x1C, 0x52, 0x2E, 0x48, 0x77, 0x46, 0x6E, 0x54, 0x0E, 0x5D, 0xBE, 0x9E, 
+	0x04, 0xE0, 0x13, 0xD0, 0x10, 0x2E, 0x00, 0x42, 0xB0, 0x4E, 0x74, 0x4E, 0x71, 0xD0, 0x08, 0x19, 
+	0x80, 0x57, 0x8E, 0xDA, 0x03, 0x42, 0x87, 0x5C, 0x0E, 0x48, 0x6F, 0x54, 0x0E, 0x36, 0x01, 0x27, 
+	0x01, 0x18, 0xD1, 0x42, 0x7F, 0x00, 0x49, 0x2B, 0x00, 0x52, 0x6F, 0x46, 0x63, 0xD1, 0xC6, 0xB2, 
+	0xF6, 0x1E, 0x5E, 0xD0, 0x06, 0x2B, 0x00, 0x01, 0x92, 0x1C, 0x72, 0x9B, 0x02, 0x92, 0x08, 0x46, 
+	0xB4, 0x01, 0x72, 0x9B, 0x0B, 0xE7, 0xF1, 0x93, 0x0B, 0x3B, 0x01, 0x9E, 0x09, 0x9D, 0x0B, 0xDB, 
+	0x00, 0x42, 0xB5, 0x9F, 0x04, 0xE7, 0x4F, 0xD0, 0x45, 0x2F, 0x00, 0x78, 0xE3, 0x78, 0xA0, 0x78, 
+	0x61, 0x90, 0x04, 0x91, 0x06, 0x4A, 0x56, 0x94, 0x02, 0x78, 0x24, 0x7A, 0xD0, 0x7C, 0x11, 0x18, 
+	0x08, 0x4C, 0x5B, 0x90, 0x07, 0xB2, 0xC0, 0x96, 0x3D, 0xAE, 0xF1, 0x06, 0x18, 0x89, 0x7B, 0x12, 
+	0x91, 0x08, 0xB2, 0xC9, 0xE0, 0x28, 0x4A, 0x55, 0x3B, 0x01, 0x9E, 0x03, 0x2E, 0x00, 0xB2, 0xDB, 
+	0x18, 0xC7, 0xD1, 0x01, 0x9E, 0x06, 0x55, 0xD6, 0xD2, 0x02, 0x42, 0xB1, 0x42, 0xBB, 0x9F, 0x02, 
+	0x18, 0xEF, 0xD3, 0x0C, 0x97, 0x09, 0x18, 0xC6, 0x46, 0xBC, 0x5D, 0x97, 0x5D, 0xE7, 0x9F, 0x09, 
+	0x9F, 0x08, 0x44, 0xBC, 0x46, 0x67, 0x44, 0xBC, 0xE0, 0x0B, 0x55, 0x97, 0x18, 0xC6, 0x18, 0xEF, 
+	0x5D, 0x97, 0x97, 0x09, 0x9F, 0x09, 0x46, 0xBC, 0x44, 0xBC, 0x5D, 0xE7, 0x44, 0xBC, 0x9F, 0x07, 
+	0x55, 0x97, 0x46, 0x67, 0xD1, 0xD7, 0x2B, 0x00, 0x1E, 0x59, 0x1C, 0x0B, 0x2B, 0x00, 0xB2, 0xC9, 
+	0x25, 0x26, 0xD0, 0x3E, 0x01, 0x48, 0x9B, 0x04, 0xE7, 0xF3, 0x43, 0x4D, 0x79, 0xE2, 0x7C, 0x63, 
+	0x18, 0x9A, 0x25, 0x07, 0x4A, 0x34, 0x92, 0x03, 0x21, 0x02, 0x7B, 0xA0, 0x79, 0x26, 0x5E, 0x52, 
+	0x00, 0x6D, 0x1A, 0xAD, 0xB2, 0xED, 0x19, 0x86, 0x46, 0x84, 0x49, 0x34, 0x18, 0xB8, 0xE0, 0x09, 
+	0x32, 0x01, 0x5C, 0x44, 0x54, 0x44, 0x19, 0x2C, 0x42, 0xB2, 0xB2, 0xD2, 0x33, 0x01, 0xDB, 0xF7, 
+	0x9A, 0x03, 0xB2, 0xDB, 0xDA, 0x02, 0x42, 0x93, 0x01, 0x5F, 0x46, 0x62, 0x4A, 0x23, 0xE7, 0xF5, 
+	0x7C, 0x10, 0x49, 0x2A, 0x79, 0x56, 0x7B, 0xD3, 0x19, 0x9E, 0x79, 0x95, 0x46, 0x84, 0x19, 0x45, 
+	0x18, 0xB8, 0xE0, 0x09, 0x32, 0x01, 0x5C, 0x44, 0x54, 0x44, 0x3C, 0x0E, 0x42, 0xAA, 0xB2, 0xD2, 
+	0x33, 0x01, 0xDB, 0xF7, 0x42, 0xB3, 0xB2, 0xDB, 0x46, 0x62, 0xDA, 0x02, 0xE7, 0xF6, 0x01, 0x5F, 
+	0x78, 0x1B, 0x4B, 0x1A, 0xD0, 0x13, 0x2B, 0x00, 0x49, 0x1F, 0x20, 0x05, 0xFC, 0xCA, 0xF0, 0x02, 
+	0x78, 0x2B, 0xE0, 0x0E, 0xD0, 0x08, 0x2B, 0x00, 0x01, 0x72, 0x4B, 0x18, 0x18, 0xD2, 0x78, 0xA1, 
+	0x23, 0x01, 0x20, 0x05, 0xF0, 0x02, 0x93, 0x00, 0x36, 0x01, 0xFC, 0x65, 0xE0, 0x02, 0xB2, 0xF6, 
+	0x4D, 0x0E, 0x4C, 0x0A, 0x78, 0xE3, 0x9E, 0x05, 0xD8, 0xEA, 0x42, 0xB3, 0x20, 0x01, 0x21, 0x00, 
+	0x42, 0x40, 0x1C, 0x0A, 0xF0, 0x02, 0x23, 0x02, 0x20, 0x01, 0xF9, 0xB7, 0x21, 0x01, 0x42, 0x40, 
+	0x23, 0x02, 0x22, 0x00, 0xF9, 0xB0, 0xF0, 0x02, 0xE0, 0x25, 0x78, 0xA4, 0x20, 0x00, 0x03, 0x0A, 
+	0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x01, 0xEB, 
+	0x40, 0x00, 0x40, 0x84, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x13, 0x64, 0x20, 0x00, 0x0A, 0xB3, 
+	0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x75, 0x36, 0x00, 0x00, 0x5C, 0xAE, 0x21, 0x00, 0x3C, 0x01, 
+	0x1C, 0x0A, 0xB2, 0xE4, 0x23, 0x01, 0x1C, 0x20, 0xF9, 0x8E, 0xF0, 0x02, 0x1C, 0x20, 0x21, 0x01, 
+	0x1C, 0x0B, 0x22, 0x00, 0xF9, 0x88, 0xF0, 0x02, 0xD1, 0xEF, 0x2C, 0x00, 0xFE, 0x30, 0xF7, 0xFF, 
+	0xBD, 0xF0, 0xB0, 0x0D, 0xF0, 0x03, 0xB5, 0x08, 0x4B, 0x05, 0xFF, 0x91, 0x68, 0x1B, 0x20, 0x01, 
+	0x20, 0x01, 0x47, 0x98, 0xFD, 0x2E, 0xF0, 0x04, 0xFF, 0x8C, 0xF0, 0x01, 0x46, 0xC0, 0xBD, 0x08, 
+	0x20, 0x00, 0x01, 0xF8, 0x4A, 0x2C, 0xB5, 0xF7, 0x60, 0x10, 0x20, 0x00, 0x4E, 0x2C, 0x4A, 0x2B, 
+	0x4A, 0x2C, 0x8C, 0x11, 0x1D, 0x72, 0x60, 0x11, 0x7D, 0xF1, 0x7F, 0xD2, 0x42, 0x44, 0x1E, 0x50, 
+	0x4C, 0x29, 0x41, 0x60, 0x90, 0x00, 0x1A, 0x08, 0x1D, 0xB0, 0x60, 0x20, 0x7E, 0x37, 0x7F, 0xC5, 
+	0x42, 0x58, 0x1E, 0x6B, 0x1A, 0x3B, 0x41, 0x58, 0x60, 0x63, 0x93, 0x01, 0xD1, 0x02, 0x2A, 0x01, 
+	0x81, 0x20, 0x20, 0x00, 0x23, 0x26, 0xE0, 0x05, 0x00, 0x49, 0x5E, 0xF0, 0xF8, 0x86, 0xF0, 0x04, 
+	0x2D, 0x01, 0x81, 0x20, 0x23, 0x00, 0xD1, 0x02, 0xE0, 0x05, 0x81, 0x63, 0x5E, 0xF0, 0x23, 0x28, 
+	0xF0, 0x04, 0x00, 0x79, 0x81, 0x60, 0xF8, 0x7B, 0x9B, 0x01, 0x4F, 0x15, 0x5E, 0x3E, 0x20, 0x28, 
+	0x00, 0x70, 0x00, 0x59, 0xF0, 0x04, 0x19, 0x80, 0x43, 0x40, 0xF8, 0x71, 0x00, 0x43, 0x4C, 0x12, 
+	0x18, 0x18, 0x60, 0xE0, 0x20, 0x26, 0x61, 0x20, 0x9B, 0x00, 0x5E, 0x3D, 0x00, 0x59, 0x00, 0x68, 
+	0xF0, 0x04, 0x19, 0x40, 0x37, 0x2C, 0xF8, 0x63, 0x61, 0xA0, 0x61, 0x60, 0x2B, 0x00, 0x78, 0x3B, 
+	0x61, 0xE6, 0xD1, 0x02, 0xE0, 0x01, 0x62, 0x25, 0x62, 0x26, 0x61, 0xE5, 0x22, 0x01, 0x4B, 0x07, 
+	0x60, 0x5A, 0x42, 0x52, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x12, 0x48, 
+	0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x02, 0x20, 0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x00, 0xCC, 
+	0x4B, 0x24, 0xB5, 0xF0, 0x7E, 0x1E, 0xB0, 0x87, 0x1C, 0x72, 0x7D, 0xDB, 0x33, 0x02, 0x1C, 0xD9, 
+	0x92, 0x05, 0x93, 0x03, 0x4A, 0x20, 0x23, 0x00, 0x1C, 0x18, 0x91, 0x04, 0x1A, 0xE5, 0x9C, 0x05, 
+	0x97, 0x01, 0x01, 0xEF, 0x52, 0xB8, 0x5A, 0xBC, 0x01, 0xAD, 0x9C, 0x04, 0x00, 0x4F, 0x19, 0x29, 
+	0x4C, 0x1A, 0x5A, 0xBC, 0x27, 0x00, 0x52, 0xB8, 0x55, 0x0F, 0x55, 0x2F, 0x4F, 0x18, 0x99, 0x01, 
+	0x19, 0xCF, 0x33, 0x01, 0x88, 0x39, 0x97, 0x02, 0x99, 0x03, 0x80, 0x38, 0x00, 0x79, 0x18, 0x6F, 
+	0x5A, 0x89, 0x91, 0x01, 0x52, 0x88, 0x99, 0x01, 0x18, 0x6D, 0x49, 0x12, 0x70, 0x29, 0x21, 0x00, 
+	0x1A, 0xF7, 0x55, 0x39, 0x37, 0x01, 0x4D, 0x0C, 0x22, 0x00, 0xDA, 0xD8, 0x9B, 0x03, 0x36, 0x01, 
+	0x01, 0xB6, 0x1C, 0x11, 0x5A, 0x2F, 0x00, 0x58, 0x18, 0xF0, 0x52, 0x2A, 0x5B, 0xEC, 0x00, 0x47, 
+	0x4F, 0x06, 0x53, 0xEA, 0x3B, 0x01, 0x54, 0xF9, 0x2B, 0x01, 0x54, 0x39, 0xB0, 0x07, 0xD1, 0xF2, 
+	0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 
+	0x40, 0x00, 0x40, 0x02, 0x40, 0x00, 0x20, 0x01, 0x4B, 0x0D, 0xB5, 0xF7, 0x7D, 0xDE, 0x7E, 0x19, 
+	0x36, 0x01, 0x1C, 0x48, 0x90, 0x01, 0x23, 0x00, 0x1C, 0x32, 0x9C, 0x01, 0x01, 0xBF, 0x1A, 0xE7, 
+	0x46, 0xAC, 0x1C, 0x95, 0x4C, 0x07, 0x44, 0xBC, 0x46, 0x60, 0x25, 0x00, 0x55, 0x05, 0x3A, 0x01, 
+	0xDA, 0xF5, 0x1C, 0x50, 0x1A, 0xCA, 0x33, 0x01, 0xDA, 0xED, 0x32, 0x01, 0x46, 0xC0, 0xBD, 0xF7, 
+	0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x20, 0x00, 0x4B, 0x0D, 0xB5, 0x00, 0x5E, 0x9B, 0x22, 0x08, 
+	0x1C, 0x11, 0x4A, 0x0C, 0x78, 0x09, 0x31, 0x35, 0x43, 0x4B, 0x7F, 0x12, 0x11, 0x9B, 0xB2, 0x52, 
+	0xDA, 0x00, 0x42, 0x93, 0x4A, 0x08, 0x1C, 0x13, 0x22, 0x80, 0x60, 0x13, 0x05, 0x1B, 0x05, 0xD2, 
+	0x69, 0x90, 0x09, 0x19, 0x40, 0x03, 0x4B, 0x05, 0x61, 0x93, 0x43, 0x0B, 0x46, 0xC0, 0xBD, 0x00, 
+	0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x0D, 0x38, 0xF0, 0x00, 0xFF, 0xFF, 
+	0x4A, 0xA0, 0xB5, 0xF0, 0x68, 0x11, 0x48, 0xA0, 0x46, 0x8C, 0x68, 0x07, 0xB0, 0x97, 0x46, 0x60, 
+	0x21, 0x00, 0x22, 0x0D, 0x24, 0xFF, 0x26, 0x7F, 0x46, 0xBC, 0x90, 0x03, 0x18, 0x83, 0x00, 0x90, 
+	0x00, 0x5B, 0x4D, 0x9A, 0x87, 0x99, 0x18, 0xEB, 0x33, 0x38, 0x27, 0x00, 0x9F, 0x03, 0x72, 0x1F, 
+	0x50, 0x39, 0x3A, 0x01, 0x46, 0x67, 0xB2, 0xD2, 0x25, 0x00, 0x50, 0x39, 0x72, 0x5E, 0x72, 0xDE, 
+	0x72, 0x9C, 0x73, 0x1C, 0x2A, 0xFF, 0x80, 0xD9, 0x4C, 0x91, 0xD1, 0xE8, 0x9C, 0x8E, 0xAE, 0xF1, 
+	0x07, 0x7E, 0x22, 0x4B, 0x91, 0x4F, 0x91, 0x68, 0x9E, 0x3A, 0x01, 0x48, 0x8D, 0x81, 0xBD, 0x96, 
+	0x05, 0x42, 0x96, 0x60, 0x05, 0x36, 0x01, 0xDA, 0x02, 0x60, 0x9E, 0x96, 0x05, 0x2A, 0x00, 0x68, 
+	0xDA, 0x3A, 0x01, 0xDD, 0x01, 0x4C, 0x87, 0x60, 0xDA, 0x7D, 0xE0, 0x68, 0x19, 0x42, 0x81, 0x38, 
+	0x01, 0x31, 0x01, 0xDA, 0x01, 0x68, 0x59, 0x60, 0x19, 0xDD, 0x01, 0x29, 0x00, 0x60, 0x59, 0x39, 
+	0x01, 0x42, 0xAA, 0x9D, 0x05, 0xE1, 0xDC, 0xDD, 0x00, 0x48, 0x7C, 0x4A, 0x81, 0x68, 0x1E, 0x49, 
+	0x7A, 0x68, 0x12, 0x68, 0x5F, 0x68, 0x00, 0x68, 0xDB, 0x92, 0x0E, 0x68, 0x09, 0x4A, 0x7B, 0x93, 
+	0x15, 0x96, 0x14, 0x4B, 0x77, 0x90, 0x0A, 0x97, 0x07, 0x89, 0x92, 0x91, 0x0B, 0x25, 0x00, 0x68, 
+	0x1B, 0x92, 0x0D, 0x4C, 0x78, 0x95, 0x12, 0x93, 0x13, 0x9F, 0x07, 0x9E, 0x14, 0xDA, 0x00, 0x42, 
+	0xBE, 0x9D, 0x05, 0xE0, 0xB4, 0x21, 0x14, 0x46, 0x68, 0x5C, 0x08, 0x35, 0x01, 0x1C, 0x33, 0x01, 
+	0xAD, 0x95, 0x0C, 0x90, 0x08, 0x98, 0x0C, 0xE0, 0x08, 0x18, 0x41, 0x22, 0x00, 0x9E, 0x07, 0x55, 
+	0x0A, 0x42, 0x9E, 0x3B, 0x01, 0xE0, 0xA1, 0xDD, 0x00, 0x1C, 0x99, 0x9D, 0x0C, 0x4F, 0x6A, 0x18, 
+	0x6A, 0x00, 0x50, 0x4D, 0x6A, 0x5D, 0x12, 0x26, 0x1C, 0x5B, 0x40, 0x57, 0xBE, 0xDD, 0x1D, 0x42, 
+	0xB0, 0x7E, 0x35, 0x4E, 0x60, 0x01, 0x6F, 0x9E, 0x05, 0x44, 0xB4, 0x46, 0xBC, 0x00, 0x7F, 0x46, 
+	0x67, 0x97, 0x03, 0x4E, 0x63, 0x1C, 0x6F, 0x5B, 0xF6, 0x46, 0xB4, 0x01, 0x7F, 0x97, 0x04, 0x18, 
+	0xFF, 0x4F, 0x5F, 0x44, 0x84, 0x46, 0x66, 0x9D, 0x03, 0x9D, 0x04, 0x53, 0x7E, 0x00, 0x6F, 0x4E, 
+	0x5C, 0x4D, 0x5B, 0x5B, 0xF6, 0x44, 0x84, 0x46, 0xB4, 0x53, 0xEE, 0x46, 0x66, 0xD8, 0xCA, 0x2A, 
+	0x0E, 0x1B, 0x40, 0x9D, 0x0E, 0xD1, 0x00, 0x2A, 0x00, 0x9E, 0x05, 0xE1, 0xB0, 0x43, 0x46, 0x1E, 
+	0x51, 0x9F, 0x0A, 0xB2, 0xC9, 0x96, 0x04, 0x00, 0x8A, 0x1C, 0x07, 0x18, 0xBE, 0x43, 0x5F, 0x68, 
+	0x35, 0x9D, 0x04, 0x46, 0xAC, 0x1C, 0x2F, 0x97, 0x03, 0x60, 0x37, 0x44, 0x67, 0x18, 0xB7, 0x9E, 
+	0x0B, 0x68, 0x3D, 0x18, 0x56, 0x96, 0x04, 0x00, 0x76, 0x46, 0xAC, 0x9E, 0x03, 0x4D, 0x40, 0x44, 
+	0xB4, 0x19, 0xAD, 0x9E, 0x04, 0x46, 0x65, 0x95, 0x03, 0x9F, 0x03, 0x60, 0x3D, 0x37, 0x38, 0x8F, 
+	0xBE, 0x26, 0x09, 0x46, 0xB4, 0x7A, 0x3D, 0x57, 0xBE, 0x9E, 0x0D, 0x96, 0x04, 0x36, 0x01, 0x35, 
+	0x01, 0x95, 0x09, 0xB2, 0xB6, 0xAE, 0x09, 0x96, 0x0D, 0x44, 0x84, 0x78, 0x36, 0x80, 0xBD, 0x46, 
+	0x65, 0x9D, 0x04, 0x72, 0x3E, 0x42, 0xB5, 0x9E, 0x05, 0x72, 0x7E, 0xDD, 0x00, 0x4F, 0x30, 0x18, 
+	0x56, 0x19, 0xBE, 0x00, 0x76, 0x46, 0xB4, 0x36, 0x38, 0x9D, 0x05, 0x7A, 0xB6, 0x42, 0xAE, 0xB2, 
+	0x76, 0x46, 0x66, 0xDA, 0x01, 0x18, 0x56, 0x72, 0xB5, 0x00, 0x76, 0x4D, 0x29, 0x36, 0x38, 0x19, 
+	0xAE, 0x57, 0xF7, 0x27, 0x0B, 0xDA, 0x00, 0x42, 0xBB, 0x4F, 0x25, 0x72, 0xF3, 0x00, 0x76, 0x18, 
+	0x56, 0x36, 0x38, 0x19, 0xBE, 0x57, 0xF7, 0x27, 0x0C, 0xDD, 0x00, 0x42, 0xBB, 0x18, 0x52, 0x73, 
+	0x33, 0x00, 0x52, 0x4D, 0x1F, 0x27, 0x3E, 0x18, 0xAA, 0x32, 0x38, 0x5F, 0xD6, 0xDC, 0x00, 0x42, 
+	0xB0, 0x80, 0xD0, 0xE7, 0x65, 0x42, 0x81, 0x98, 0x12, 0xE7, 0x60, 0xDA, 0x00, 0x31, 0x01, 0x9E, 
+	0x07, 0x91, 0x12, 0x3B, 0x01, 0x42, 0x9E, 0x91, 0x13, 0xE7, 0x5D, 0xDC, 0x00, 0x98, 0x15, 0x9F, 
+	0x05, 0x97, 0x05, 0x3F, 0x01, 0xDC, 0x00, 0x42, 0xB8, 0x46, 0x69, 0xE7, 0x3E, 0x5A, 0x52, 0x22, 
+	0x34, 0x49, 0x12, 0x9B, 0x13, 0x9D, 0x12, 0x4C, 0x0E, 0x60, 0x23, 0x81, 0x8A, 0xDC, 0x00, 0x2D, 
+	0x01, 0x4E, 0x0C, 0xE0, 0xF7, 0x29, 0x04, 0x7E, 0x31, 0xE1, 0xD0, 0xDC, 0x00, 0x25, 0x00, 0x4C, 
+	0x09, 0x01, 0x48, 0x7D, 0xE4, 0x39, 0x02, 0x94, 0x0B, 0x4B, 0x0D, 0x00, 0x64, 0x95, 0x0A, 0x22, 
+	0x03, 0x94, 0x0C, 0x91, 0x06, 0x46, 0xC0, 0xE0, 0x29, 0x20, 0x00, 0x00, 0x44, 0x20, 0x00, 0x00, 
+	0x48, 0x20, 0x00, 0x02, 0x24, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x15, 0xE4, 0x20, 0x00, 0x01, 
+	0x70, 0x20, 0x00, 0x0D, 0x38, 0x40, 0x00, 0x20, 0x00, 0x20, 0x00, 0x12, 0x48, 0x40, 0x00, 0x40, 
+	0x00, 0x20, 0x00, 0x0D, 0x3C, 0xDC, 0x3B, 0x45, 0xBC, 0x2D, 0x1D, 0x9D, 0x07, 0xE1, 0x64, 0xDD, 
+	0x00, 0x42, 0xBD, 0x9D, 0x08, 0x9D, 0x07, 0xDC, 0x39, 0xDC, 0x36, 0x42, 0xBD, 0x42, 0x49, 0x21, 
+	0x01, 0x9D, 0x06, 0x91, 0x0A, 0x42, 0xB5, 0x32, 0x01, 0x1E, 0x54, 0xDD, 0x52, 0x00, 0x49, 0x19, 
+	0x01, 0x1C, 0x16, 0x5A, 0x59, 0xDD, 0xF4, 0x29, 0x1D, 0x19, 0x47, 0x1E, 0xD5, 0x00, 0x7F, 0x95, 
+	0x05, 0x95, 0x04, 0x1E, 0x95, 0x19, 0x45, 0x46, 0xBC, 0x18, 0x86, 0x95, 0x09, 0x5B, 0x5D, 0x46, 
+	0x65, 0x00, 0x76, 0x1C, 0x77, 0x95, 0x03, 0x96, 0x07, 0x9D, 0x07, 0x00, 0x7F, 0x5B, 0x5D, 0x97, 
+	0x08, 0x95, 0x07, 0x9E, 0x09, 0x00, 0x76, 0x9D, 0x08, 0x46, 0xB4, 0x5B, 0x5D, 0x46, 0x65, 0x95, 
+	0x08, 0x1C, 0x0F, 0x5B, 0x5D, 0x9D, 0x03, 0x46, 0xAC, 0x1C, 0x16, 0x37, 0x0F, 0xDD, 0xC1, 0x42, 
+	0xBD, 0xDC, 0xC1, 0x45, 0x61, 0x42, 0xBD, 0x9D, 0x08, 0x9F, 0x07, 0xDD, 0xC5, 0xDC, 0xC5, 0x42, 
+	0xB9, 0xDD, 0x06, 0x45, 0x61, 0x45, 0x61, 0x99, 0x03, 0xE1, 0x2E, 0xDD, 0x00, 0xD1, 0x00, 0x9C, 
+	0x05, 0x9D, 0x0B, 0xE1, 0x30, 0x91, 0x0A, 0x21, 0x01, 0xD0, 0xBA, 0x2D, 0x00, 0x21, 0x00, 0x9D, 
+	0x0C, 0x46, 0x94, 0x01, 0xA4, 0x22, 0x0A, 0x19, 0x1F, 0x31, 0x02, 0x52, 0x7A, 0xD1, 0xF9, 0x42, 
+	0xA9, 0x9D, 0x06, 0x95, 0x0C, 0x24, 0x01, 0x46, 0x62, 0x32, 0x01, 0x94, 0x0A, 0xDC, 0xAC, 0x42, 
+	0xB5, 0x2E, 0x04, 0x9E, 0x0B, 0x4F, 0xA3, 0xDD, 0x65, 0x7E, 0x3F, 0x4B, 0xA3, 0x01, 0xB9, 0x20, 
+	0x00, 0x3E, 0x02, 0x31, 0x44, 0x97, 0x09, 0x01, 0xBC, 0x22, 0x03, 0x18, 0x59, 0x96, 0x05, 0x90, 
+	0x08, 0x46, 0x9C, 0x94, 0x0A, 0x42, 0xAE, 0xE0, 0x13, 0x9B, 0x03, 0xDC, 0x29, 0xDD, 0x00, 0x2B, 
+	0x1D, 0x9B, 0x04, 0xE0, 0xF0, 0xDC, 0x27, 0x42, 0xAB, 0x42, 0xAB, 0x9B, 0x03, 0x23, 0x01, 0xDC, 
+	0x24, 0x93, 0x08, 0x42, 0x5B, 0x31, 0x02, 0x9D, 0x05, 0x42, 0xA5, 0x32, 0x01, 0x88, 0x08, 0xDD, 
+	0x41, 0x1C, 0x14, 0x1E, 0x57, 0xDD, 0xF5, 0x28, 0x1D, 0x1F, 0x0B, 0x88, 0x4E, 0x96, 0x03, 0x88, 
+	0x1B, 0x93, 0x0B, 0x88, 0x8E, 0x1E, 0x8B, 0x96, 0x04, 0x96, 0x07, 0x1E, 0x96, 0x1E, 0xD3, 0x88, 
+	0x1E, 0x93, 0x06, 0x1C, 0x05, 0x35, 0x0F, 0x9B, 0x0B, 0x42, 0xAB, 0x1C, 0x14, 0x42, 0xB0, 0xDD, 
+	0xD3, 0x9B, 0x04, 0xDC, 0xD3, 0xDD, 0xD7, 0x42, 0xAB, 0x42, 0xA8, 0x9D, 0x03, 0x42, 0xB0, 0xDC, 
+	0xD7, 0x9B, 0x0B, 0xDD, 0x06, 0xDD, 0x00, 0x42, 0xB3, 0x9F, 0x06, 0xE0, 0xC1, 0xE0, 0xEF, 0xD1, 
+	0x00, 0x26, 0x01, 0x98, 0x09, 0x28, 0x00, 0x96, 0x08, 0x46, 0x66, 0xD0, 0xCC, 0x9A, 0x0A, 0x46, 
+	0x94, 0x00, 0x7F, 0x23, 0x00, 0x19, 0xF0, 0x25, 0x0A, 0x33, 0x40, 0x52, 0xC5, 0xD1, 0xFA, 0x42, 
+	0x93, 0x46, 0x62, 0x9D, 0x05, 0x46, 0xB4, 0x23, 0x01, 0x31, 0x02, 0x93, 0x08, 0x42, 0xA5, 0x32, 
+	0x01, 0x41, 0xF4, 0xAE, 0xF1, 0x08, 0x4C, 0x72, 0xDC, 0xBD, 0x68, 0x23, 0x4F, 0x72, 0x60, 0x3E, 
+	0x26, 0x00, 0xD5, 0x04, 0x07, 0x18, 0x78, 0x2B, 0x4D, 0x70, 0xD0, 0x00, 0x2B, 0x00, 0x68, 0x23, 
+	0xE0, 0xA6, 0xD5, 0x23, 0x07, 0x1E, 0x78, 0x33, 0x4E, 0x6C, 0xD0, 0x00, 0x2B, 0x00, 0x4F, 0x66, 
+	0xE0, 0xC4, 0x2B, 0x00, 0x7E, 0x3B, 0x4D, 0x65, 0xD0, 0x1A, 0x27, 0x00, 0x24, 0x00, 0x49, 0x62, 
+	0xE0, 0x05, 0x7E, 0x0B, 0x34, 0x01, 0x42, 0xA3, 0x35, 0x40, 0x78, 0x33, 0xDD, 0x10, 0xD0, 0xF6, 
+	0x2B, 0x00, 0x1C, 0x2A, 0x48, 0x5D, 0x23, 0x02, 0x7D, 0xC1, 0x97, 0x00, 0x20, 0x03, 0xF8, 0xBE, 
+	0xF0, 0x02, 0x34, 0x01, 0x49, 0x59, 0x35, 0x40, 0x7E, 0x0B, 0xDC, 0xEE, 0x42, 0xA3, 0xBD, 0xF0, 
+	0xB0, 0x17, 0x43, 0xC2, 0x38, 0x02, 0x40, 0x10, 0x17, 0xD2, 0x90, 0x04, 0x9A, 0x05, 0x43, 0x50, 
+	0x9D, 0x04, 0x90, 0x0F, 0x43, 0x5D, 0xB2, 0xDE, 0x98, 0x0C, 0x95, 0x10, 0x27, 0x00, 0x22, 0x03, 
+	0x96, 0x06, 0x93, 0x11, 0x97, 0x03, 0x46, 0x84, 0x91, 0x09, 0x4D, 0x51, 0x4B, 0x50, 0x9E, 0x08, 
+	0x5C, 0x99, 0x9F, 0x06, 0x5C, 0xAB, 0xB2, 0x49, 0x18, 0x71, 0x31, 0x01, 0x18, 0xFB, 0x01, 0x89, 
+	0xB2, 0x5B, 0x18, 0xCB, 0x33, 0x02, 0xB2, 0x48, 0x5D, 0x19, 0x2B, 0x0D, 0x1E, 0x43, 0x9D, 0x09, 
+	0xD8, 0x27, 0x1C, 0x2F, 0x00, 0x9E, 0x97, 0x0C, 0x44, 0x67, 0x18, 0xF3, 0x9F, 0x0A, 0x9F, 0x0B, 
+	0x19, 0xBD, 0x19, 0xBF, 0x00, 0x5B, 0x97, 0x02, 0x4E, 0x3F, 0x18, 0xF3, 0x9F, 0x03, 0x2F, 0x00, 
+	0x33, 0x38, 0xB2, 0xC9, 0xD1, 0x1A, 0x98, 0x0C, 0x91, 0x03, 0xB2, 0xC9, 0x31, 0x0E, 0x68, 0x29, 
+	0x55, 0x01, 0x9F, 0x02, 0x9E, 0x0F, 0x60, 0x29, 0x19, 0x89, 0x98, 0x10, 0x68, 0x39, 0x18, 0x09, 
+	0x9D, 0x04, 0x88, 0x98, 0x60, 0x39, 0x18, 0x28, 0x7A, 0x19, 0x80, 0x98, 0x31, 0x01, 0x1E, 0x53, 
+	0x72, 0x19, 0xD0, 0x10, 0x2A, 0x00, 0xE7, 0xBF, 0xB2, 0xDA, 0x9F, 0x03, 0x9E, 0x09, 0x44, 0x63, 
+	0x1C, 0x33, 0xD0, 0xF4, 0x2F, 0x1F, 0xD0, 0xF2, 0x42, 0x87, 0x21, 0x1F, 0x20, 0x1F, 0x91, 0x03, 
+	0x55, 0x18, 0x2A, 0x00, 0x1E, 0x53, 0x46, 0x65, 0xD1, 0xEE, 0x95, 0x0C, 0x9B, 0x11, 0x9D, 0x0A, 
+	0xE5, 0xB1, 0xD0, 0x00, 0x35, 0x01, 0xE6, 0x95, 0xE6, 0x9F, 0x33, 0x01, 0x9B, 0x08, 0xE7, 0x13, 
+	0xD0, 0x00, 0x1C, 0x33, 0xE7, 0x09, 0x42, 0xB3, 0x9F, 0x06, 0xE7, 0x3B, 0xD0, 0x00, 0x46, 0x61, 
+	0xE0, 0x2A, 0x45, 0x61, 0x9C, 0x05, 0xE6, 0xCE, 0xD0, 0x00, 0xE6, 0xCC, 0x9C, 0x04, 0x49, 0x1D, 
+	0x20, 0x03, 0xF8, 0x8C, 0xF0, 0x02, 0x2B, 0x00, 0x78, 0x2B, 0xE7, 0x50, 0xD1, 0x00, 0x23, 0x02, 
+	0x4F, 0x12, 0x4F, 0x12, 0x7E, 0x3A, 0x01, 0x92, 0x1C, 0x51, 0x19, 0xD2, 0xB2, 0xC9, 0x96, 0x00, 
+	0x20, 0x03, 0xF8, 0x24, 0xF0, 0x02, 0x2B, 0x00, 0x78, 0x2B, 0xE7, 0x40, 0xD1, 0x00, 0x20, 0x03, 
+	0x4D, 0x0A, 0x7D, 0xE9, 0x7E, 0x2A, 0x01, 0x92, 0x32, 0x01, 0x23, 0x02, 0x19, 0xD2, 0xF0, 0x02, 
+	0x96, 0x00, 0xE7, 0x34, 0xF8, 0x15, 0xE7, 0x0D, 0x9F, 0x07, 0x49, 0x0B, 0x20, 0x03, 0xF8, 0x66, 
+	0xF0, 0x02, 0x7D, 0xF7, 0xE7, 0x35, 0xE6, 0xB5, 0x97, 0x0B, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 
+	0x0D, 0x3C, 0x20, 0x00, 0x00, 0x58, 0x20, 0x00, 0x02, 0x24, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 
+	0x5D, 0x80, 0x00, 0x00, 0x5D, 0x7C, 0x00, 0x00, 0x5C, 0xEC, 0x00, 0x00, 0x5C, 0xF0, 0xB0, 0x89, 
+	0xB5, 0xF0, 0x49, 0x62, 0x23, 0x0F, 0xE0, 0x02, 0x22, 0xFF, 0x38, 0x01, 0x18, 0x58, 0x3B, 0x01, 
+	0x70, 0x02, 0xD1, 0xF9, 0x2B, 0x00, 0x68, 0xD8, 0x4B, 0x5E, 0x68, 0x9A, 0x68, 0x19, 0x90, 0x02, 
+	0x68, 0x5B, 0x4B, 0x5C, 0x93, 0x04, 0x68, 0x1B, 0x91, 0x03, 0x4B, 0x5B, 0x93, 0x05, 0x93, 0x06, 
+	0x7F, 0x5B, 0x9C, 0x01, 0xE0, 0xA0, 0x4D, 0x59, 0x1C, 0x8A, 0x18, 0xA2, 0x92, 0x00, 0x46, 0x63, 
+	0x5D, 0x52, 0xD0, 0x00, 0x2A, 0x1F, 0xE0, 0x21, 0xE0, 0x8F, 0x42, 0xBB, 0x27, 0x0A, 0x27, 0x00, 
+	0xDC, 0x03, 0xDD, 0x00, 0x2B, 0x01, 0x26, 0x11, 0x9F, 0x07, 0xDC, 0x03, 0x42, 0xB2, 0x2A, 0x01, 
+	0x26, 0x00, 0x1E, 0x56, 0xDD, 0x00, 0x19, 0xBE, 0x01, 0x7F, 0x00, 0x76, 0x4F, 0x4D, 0x2E, 0x0A, 
+	0x5B, 0xF6, 0x3D, 0x01, 0xD0, 0x05, 0x32, 0x01, 0xB2, 0xED, 0xD1, 0xE5, 0x2D, 0x00, 0x20, 0x01, 
+	0xE0, 0x00, 0xB2, 0xE4, 0x3C, 0x01, 0x2C, 0x00, 0x33, 0x01, 0xE0, 0x06, 0xD1, 0x02, 0x20, 0x00, 
+	0x24, 0x03, 0x1C, 0x0A, 0x1E, 0x5E, 0x96, 0x07, 0x25, 0x03, 0x28, 0x00, 0xE7, 0xD6, 0x9B, 0x00, 
+	0xD1, 0x63, 0x9C, 0x05, 0x9F, 0x01, 0x4B, 0x3F, 0x18, 0xFA, 0x5A, 0xD3, 0x00, 0x52, 0x93, 0x00, 
+	0x1B, 0x1B, 0x4A, 0x3D, 0x23, 0x1F, 0x18, 0x82, 0x24, 0x03, 0x4A, 0x3C, 0x57, 0x14, 0x18, 0x82, 
+	0x44, 0x64, 0x34, 0x01, 0x78, 0xD2, 0x18, 0x8A, 0xB2, 0x52, 0x32, 0x02, 0x01, 0xA4, 0x18, 0xA2, 
+	0x4D, 0x33, 0x2C, 0x0E, 0x5C, 0xAC, 0x2B, 0x1F, 0xD8, 0x03, 0x2C, 0x00, 0xD1, 0x01, 0x1E, 0x62, 
+	0xD1, 0x3F, 0x2D, 0x0D, 0xB2, 0xD5, 0x42, 0xA3, 0xD8, 0x3C, 0x26, 0x0A, 0xD0, 0x3A, 0x43, 0x75, 
+	0x1E, 0x5D, 0x4F, 0x2F, 0x43, 0x72, 0x19, 0x7D, 0x18, 0xBA, 0x5F, 0xEE, 0x27, 0x3E, 0x5F, 0xD5, 
+	0x27, 0x3E, 0x42, 0xAE, 0x1C, 0x1A, 0x1C, 0x22, 0xDD, 0x00, 0x3A, 0x01, 0x25, 0x0A, 0x4E, 0x28, 
+	0x43, 0x6A, 0x18, 0xB2, 0x9D, 0x06, 0x5F, 0xD2, 0x27, 0x3E, 0x43, 0x6A, 0x9E, 0x00, 0x42, 0x96, 
+	0x11, 0x92, 0x42, 0x9C, 0xDD, 0x1E, 0x1C, 0x1A, 0xD9, 0x02, 0x1C, 0x14, 0x1C, 0x23, 0x4A, 0x17, 
+	0x1E, 0x5E, 0x5D, 0x97, 0xB2, 0xF6, 0x97, 0x07, 0x25, 0x1C, 0x57, 0x7D, 0x46, 0x6F, 0xB2, 0xE4, 
+	0x3C, 0x01, 0xD0, 0x0A, 0x1C, 0x6F, 0xDA, 0x04, 0x42, 0xA5, 0x26, 0x1C, 0x46, 0x6D, 0x55, 0x15, 
+	0x5D, 0x75, 0x42, 0xA5, 0xE0, 0x06, 0xB2, 0xE4, 0xDD, 0x04, 0x55, 0x94, 0x55, 0x54, 0x1C, 0x23, 
+	0xE0, 0x00, 0x1D, 0x06, 0x38, 0x01, 0x39, 0x01, 0xD1, 0xA5, 0x42, 0xB9, 0x9F, 0x04, 0xE7, 0x60, 
+	0xDB, 0x00, 0x3A, 0x01, 0x46, 0x62, 0x42, 0x82, 0x98, 0x02, 0x1C, 0x53, 0xDB, 0x05, 0x99, 0x03, 
+	0x01, 0x9B, 0x46, 0x94, 0x93, 0x01, 0xB0, 0x09, 0xE7, 0xF0, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 
+	0x02, 0xEC, 0x20, 0x00, 0x15, 0xE4, 0x20, 0x00, 0x0D, 0x38, 0x20, 0x00, 0x12, 0x48, 0x40, 0x00, 
+	0x20, 0x00, 0x20, 0x00, 0x0D, 0x3C, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x5D, 0x80, 0x00, 0x00, 
+	0x5D, 0x7C, 0x20, 0x00, 0x02, 0x24, 0x4A, 0xC7, 0xB5, 0xF0, 0x68, 0x11, 0xB0, 0x8D, 0x18, 0xD0, 
+	0x23, 0x00, 0x24, 0x00, 0x30, 0xBE, 0x3B, 0x0A, 0x5F, 0x00, 0x41, 0xA0, 0x1E, 0x44, 0x18, 0x09, 
+	0x1C, 0x1D, 0xD1, 0xF4, 0x35, 0x8C, 0x60, 0x11, 0x4B, 0xC0, 0x32, 0xBE, 0x68, 0x1B, 0x4B, 0xBF, 
+	0x93, 0x03, 0x68, 0x1B, 0x24, 0x0E, 0x4E, 0xBE, 0x93, 0x05, 0x57, 0x33, 0x3C, 0x01, 0xD1, 0x01, 
+	0x1C, 0x5F, 0x1C, 0x03, 0xE0, 0x73, 0x56, 0xE8, 0x4D, 0xBA, 0xD1, 0xFA, 0x1C, 0x46, 0x1C, 0x5F, 
+	0x55, 0x2B, 0x98, 0x03, 0xD0, 0x6B, 0x19, 0x46, 0x00, 0x9D, 0x00, 0xA0, 0x68, 0x37, 0x9F, 0x03, 
+	0x46, 0xBC, 0x44, 0xBC, 0x58, 0x3F, 0x46, 0x4E, 0xAE, 0xF1, 0x09, 0x60, 0x37, 0x46, 0x67, 0x9F, 
+	0x05, 0x9E, 0x05, 0x68, 0x2E, 0x19, 0x75, 0x4F, 0xAC, 0x58, 0x38, 0x26, 0x0A, 0x18, 0x30, 0x1C, 
+	0x30, 0x60, 0x28, 0x18, 0x38, 0x43, 0x58, 0x27, 0x09, 0x30, 0x38, 0x79, 0x55, 0x57, 0xC7, 0xB2, 
+	0x6F, 0x46, 0xBC, 0xDD, 0x00, 0x45, 0xBC, 0x43, 0x5E, 0x72, 0x45, 0x79, 0x90, 0x4D, 0xA3, 0x36, 
+	0x38, 0x19, 0xAE, 0x57, 0xF7, 0x27, 0x0A, 0x42, 0xAF, 0xB2, 0x45, 0x72, 0xB0, 0xDA, 0x00, 0x4F, 
+	0x9E, 0x79, 0xD6, 0x26, 0x0A, 0x96, 0x06, 0x43, 0x58, 0x1C, 0x30, 0x30, 0x38, 0x18, 0x38, 0x57, 
+	0x45, 0x25, 0x0B, 0x46, 0x6D, 0x46, 0xAC, 0x78, 0x2D, 0x35, 0x18, 0x45, 0xAC, 0xB2, 0x6D, 0x46, 
+	0x6F, 0xDD, 0x03, 0x5D, 0xEF, 0x25, 0x18, 0x43, 0x5E, 0x72, 0xC7, 0x7A, 0x10, 0x4D, 0x93, 0x37, 
+	0x38, 0x19, 0xAF, 0x57, 0xBE, 0x26, 0x0C, 0x42, 0xAE, 0xB2, 0x45, 0x73, 0x38, 0xDA, 0x00, 0x43, 
+	0x58, 0x20, 0x0A, 0x4F, 0x8D, 0x88, 0x56, 0x18, 0x38, 0x96, 0x06, 0x5F, 0x85, 0x26, 0x3E, 0x46, 
+	0xAC, 0x26, 0x18, 0x5F, 0x75, 0x46, 0x6D, 0x26, 0x0A, 0x30, 0x38, 0xDA, 0x03, 0x45, 0xAC, 0x25, 
+	0x18, 0x46, 0x6F, 0x80, 0xC7, 0x5B, 0xEF, 0x48, 0x84, 0x43, 0x5E, 0x19, 0x87, 0x39, 0x01, 0x88, 
+	0x10, 0x8F, 0xBB, 0x87, 0xBB, 0x18, 0xC3, 0x79, 0x10, 0x37, 0x38, 0x18, 0xC3, 0x7A, 0x3B, 0x3A, 
+	0x0A, 0x72, 0x3B, 0xD0, 0x00, 0x2C, 0x00, 0x4F, 0x7C, 0xE7, 0x81, 0x1C, 0x3D, 0x1C, 0x26, 0x95, 
+	0x03, 0x35, 0x3C, 0x1C, 0x25, 0x60, 0x39, 0x22, 0x00, 0x48, 0x7B, 0x56, 0x9A, 0x18, 0x33, 0xD1, 
+	0x19, 0x32, 0x01, 0x42, 0xB5, 0x70, 0x1D, 0x4B, 0x75, 0xD0, 0x12, 0x68, 0x1A, 0x00, 0xB1, 0x58, 
+	0x50, 0x00, 0xAB, 0x4A, 0x73, 0x50, 0xD0, 0x68, 0x12, 0x48, 0x70, 0x50, 0xD1, 0x58, 0x51, 0x1C, 
+	0x13, 0x22, 0x0A, 0x18, 0xC0, 0x43, 0x6B, 0x99, 0x03, 0x30, 0x3C, 0xFB, 0x60, 0xF0, 0x03, 0x35, 
+	0x01, 0x68, 0x3B, 0xDA, 0x05, 0x42, 0x9D, 0x36, 0x01, 0x99, 0x03, 0x91, 0x03, 0x31, 0x0A, 0xD1, 
+	0xD9, 0x2E, 0x0E, 0x68, 0x1B, 0x4B, 0x69, 0xDD, 0x10, 0x2B, 0x00, 0x4A, 0x69, 0x4B, 0x68, 0x80, 
+	0x11, 0x89, 0x99, 0x80, 0x53, 0x89, 0x1B, 0x78, 0x1B, 0x4B, 0x67, 0xD0, 0x06, 0x2B, 0x00, 0x21, 
+	0x02, 0x23, 0x01, 0x20, 0x17, 0x93, 0x00, 0xF0, 0x01, 0x1C, 0x0B, 0x4B, 0x5B, 0xFE, 0x43, 0x1C, 
+	0x1D, 0x48, 0x62, 0x49, 0x62, 0xCD, 0x40, 0x89, 0x47, 0x96, 0x07, 0x8D, 0x0A, 0x97, 0x08, 0xB2, 
+	0x16, 0x68, 0x47, 0x69, 0x86, 0x96, 0x05, 0xB2, 0xB7, 0x97, 0x09, 0x97, 0x04, 0x1B, 0xD2, 0x31, 
+	0x31, 0xB2, 0x92, 0x92, 0x0A, 0x78, 0x09, 0x20, 0x00, 0x4A, 0x51, 0x68, 0x17, 0x91, 0x06, 0xE0, 
+	0x2F, 0x90, 0x03, 0x23, 0x0A, 0x9A, 0x03, 0xCF, 0x01, 0x43, 0x53, 0x43, 0x48, 0x99, 0x05, 0x18, 
+	0xCB, 0x49, 0x4A, 0x5E, 0x99, 0x22, 0x3C, 0x43, 0x59, 0x9B, 0x09, 0xFA, 0xB6, 0xF0, 0x03, 0x4A, 
+	0x50, 0x99, 0x08, 0x78, 0x13, 0x18, 0x08, 0x80, 0x28, 0xB2, 0x80, 0xD1, 0x15, 0x2B, 0x00, 0x42, 
+	0xB0, 0xB2, 0x00, 0x9B, 0x06, 0xDA, 0x07, 0x43, 0x58, 0x1B, 0x80, 0x11, 0x80, 0x99, 0x04, 0x80, 
+	0x28, 0x18, 0x08, 0x9A, 0x05, 0xE0, 0x0A, 0x42, 0xB0, 0x1A, 0x10, 0x9B, 0x06, 0xDA, 0x06, 0x43, 
+	0x58, 0x1B, 0x80, 0x11, 0x80, 0x99, 0x0A, 0x80, 0x28, 0x1A, 0x08, 0x35, 0x02, 0x9A, 0x03, 0x92, 
+	0x03, 0x32, 0x01, 0x98, 0x07, 0x9B, 0x03, 0xDB, 0xCB, 0x42, 0x83, 0x49, 0x3B, 0x4D, 0x33, 0x4A, 
+	0x3B, 0x68, 0x2D, 0x89, 0x0E, 0x95, 0x05, 0x96, 0x07, 0x68, 0x0D, 0x95, 0x08, 0x8C, 0xD3, 0xB2, 
+	0x1F, 0x69, 0x4D, 0x1C, 0x11, 0xB2, 0xAE, 0x96, 0x06, 0x97, 0x04, 0x78, 0x09, 0x31, 0x2F, 0xB2, 
+	0x9B, 0x1B, 0x9B, 0x32, 0x30, 0x91, 0x09, 0x4E, 0x28, 0x78, 0x12, 0x4B, 0x29, 0x93, 0x0B, 0x92, 
+	0x0A, 0x20, 0x00, 0x36, 0x20, 0x68, 0x1F, 0xE0, 0x2F, 0x90, 0x03, 0x23, 0x0A, 0x9A, 0x03, 0xCF, 
+	0x01, 0x43, 0x53, 0x43, 0x48, 0x99, 0x04, 0x18, 0x5B, 0x49, 0x20, 0x5E, 0x99, 0x22, 0x3C, 0x43, 
+	0x59, 0x9B, 0x08, 0xFA, 0x62, 0xF0, 0x03, 0x4A, 0x26, 0x99, 0x07, 0x78, 0x13, 0x18, 0x08, 0x80, 
+	0x30, 0xB2, 0x80, 0xD1, 0x15, 0x2B, 0x00, 0x42, 0xA8, 0xB2, 0x00, 0x9B, 0x09, 0xDA, 0x07, 0x43, 
+	0x58, 0x1B, 0x40, 0x11, 0x80, 0x99, 0x06, 0x80, 0x30, 0x18, 0x08, 0x9A, 0x04, 0xE0, 0x0A, 0x42, 
+	0xA8, 0x1A, 0x10, 0x9B, 0x0A, 0xDA, 0x06, 0x43, 0x58, 0x1B, 0x40, 0x11, 0x80, 0x99, 0x0B, 0x80, 
+	0x30, 0x1A, 0x08, 0x36, 0x02, 0x9A, 0x03, 0x92, 0x03, 0x32, 0x01, 0x98, 0x05, 0x9B, 0x03, 0xDB, 
+	0xCB, 0x42, 0x83, 0x1C, 0x1A, 0x4B, 0x12, 0x78, 0x17, 0x32, 0x2A, 0x32, 0x2B, 0x1C, 0x1A, 0x21, 
+	0x28, 0x78, 0x12, 0x92, 0x03, 0x5E, 0x5E, 0x5F, 0x5A, 0x25, 0x26, 0x92, 0x04, 0x33, 0x2C, 0x49, 
+	0x0D, 0x78, 0x1B, 0x25, 0x00, 0x93, 0x06, 0xE0, 0x48, 0x46, 0xB4, 0x20, 0x00, 0x02, 0x24, 0x20, 
+	0x00, 0x00, 0x48, 0x20, 0x00, 0x00, 0x44, 0x20, 0x00, 0x02, 0xEC, 0x20, 0x00, 0x12, 0x9C, 0x20, 
+	0x00, 0x01, 0x70, 0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x09, 0x24, 0x20, 
+	0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xDF, 0x20, 0x00, 0x02, 0x60, 0x5F, 0x8B, 0x26, 0x00, 0xD0, 
+	0x29, 0x2B, 0x00, 0x18, 0xA8, 0x4A, 0x18, 0x5E, 0xC2, 0x23, 0x04, 0x5F, 0x83, 0x26, 0x20, 0xD0, 
+	0x01, 0x2F, 0x00, 0x1A, 0xB2, 0x46, 0x66, 0x2E, 0x00, 0x9E, 0x03, 0x9E, 0x04, 0xD0, 0x01, 0x9E, 
+	0x06, 0x1A, 0xF3, 0xD0, 0x02, 0x2E, 0x00, 0x1C, 0x1A, 0x1C, 0x16, 0x4E, 0x0F, 0x1C, 0x33, 0xDC, 
+	0x04, 0x42, 0xB2, 0xDA, 0x00, 0x2A, 0x04, 0xB2, 0x92, 0x22, 0x04, 0x22, 0xB3, 0xE0, 0x01, 0x80, 
+	0x82, 0x00, 0x92, 0x42, 0x93, 0x4A, 0x0A, 0x2B, 0x04, 0xDC, 0x04, 0x23, 0x04, 0xDA, 0x00, 0xE0, 
+	0x00, 0xB2, 0x9B, 0x84, 0x03, 0x4B, 0x07, 0x31, 0x0A, 0x34, 0x01, 0x9E, 0x05, 0x35, 0x02, 0xDB, 
+	0xCB, 0x42, 0xB4, 0xBD, 0xF0, 0xB0, 0x0D, 0x20, 0x00, 0x02, 0x24, 0x00, 0x00, 0x02, 0xCB, 0x00, 
+	0x00, 0x04, 0xFB, 0x00, 0x00, 0x04, 0xFC, 0x4B, 0x0A, 0xB5, 0x30, 0x33, 0x04, 0x21, 0x00, 0x4A, 
+	0x09, 0x7F, 0xDB, 0x1C, 0x08, 0x24, 0x0A, 0x3B, 0x01, 0xE0, 0x07, 0x1C, 0x25, 0xB2, 0xDB, 0x19, 
+	0x55, 0x43, 0x5D, 0x4D, 0x05, 0x87, 0xA9, 0x2B, 0x00, 0x54, 0xE8, 0x60, 0x13, 0xD1, 0xF5, 0x46, 
+	0xC0, 0xBD, 0x30, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x01, 0x64, 0x4A, 
+	0x08, 0xB5, 0x00, 0x42, 0x5B, 0x23, 0x01, 0x4B, 0x07, 0x60, 0x53, 0x60, 0x11, 0x21, 0x00, 0xE0, 
+	0x04, 0x78, 0x1B, 0xB2, 0xDB, 0x3B, 0x01, 0x00, 0x40, 0x1D, 0x18, 0x2B, 0x00, 0x52, 0x81, 0xBD, 
+	0x00, 0xD1, 0xF8, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x43, 0x40, 0x43, 0x49, 0x47, 
+	0x70, 0x18, 0x40, 0xB5, 0xF0, 0x47, 0x70, 0x22, 0x00, 0x4B, 0x83, 0x7F, 0xD9, 0x33, 0x04, 0x1C, 
+	0x0B, 0xB0, 0x87, 0x26, 0x0A, 0x48, 0x81, 0xE0, 0x07, 0x1C, 0x15, 0xB2, 0xDB, 0x3B, 0x01, 0x43, 
+	0x5C, 0x1C, 0x34, 0x87, 0xA2, 0x19, 0x04, 0x72, 0x25, 0x34, 0x38, 0xDE, 0x63, 0xAE, 0xF1, 0x0A, 
+	0x2B, 0x00, 0x1C, 0x04, 0x4B, 0x7B, 0xD1, 0xF4, 0x1C, 0x0B, 0x68, 0x1A, 0xDD, 0x00, 0x42, 0x91, 
+	0x60, 0x23, 0x1C, 0x13, 0x4A, 0x79, 0x48, 0x78, 0x24, 0x0E, 0x4B, 0x79, 0x3C, 0x01, 0x21, 0xFF, 
+	0x00, 0xA5, 0xB2, 0xE4, 0x50, 0xAB, 0x55, 0x01, 0xD1, 0xF8, 0x2C, 0x00, 0x1C, 0x25, 0x4B, 0x6F, 
+	0x7F, 0xDB, 0x33, 0x04, 0x93, 0x03, 0x1C, 0x26, 0x69, 0x1B, 0x4B, 0x72, 0x4B, 0x6D, 0x93, 0x04, 
+	0x93, 0x05, 0x68, 0x1B, 0x4C, 0x70, 0xE0, 0x47, 0x2B, 0x00, 0x5D, 0x63, 0x4C, 0x6F, 0xD0, 0x42, 
+	0x58, 0xE3, 0x00, 0xAB, 0x01, 0x1B, 0x9C, 0x04, 0x93, 0x01, 0x19, 0x1B, 0x00, 0x6A, 0x4B, 0x6C, 
+	0x18, 0xD3, 0x27, 0x01, 0x42, 0x7F, 0x24, 0x00, 0xE0, 0x20, 0x93, 0x02, 0x43, 0x63, 0x23, 0x0A, 
+	0x18, 0xC3, 0x48, 0x60, 0x5E, 0x5B, 0x21, 0x3C, 0xD0, 0x16, 0x2B, 0x00, 0x00, 0x63, 0x9A, 0x02, 
+	0x88, 0x98, 0x18, 0xC3, 0x4A, 0x5B, 0x88, 0x93, 0x1C, 0x23, 0x1A, 0xC0, 0x00, 0x5B, 0x33, 0x10, 
+	0x9A, 0x02, 0x5A, 0x99, 0x8B, 0x13, 0xB2, 0x00, 0xB2, 0x09, 0x1A, 0xC9, 0xFF, 0x98, 0xF7, 0xFF, 
+	0x42, 0x98, 0x9B, 0x01, 0x1C, 0x27, 0xDA, 0x01, 0x34, 0x01, 0x90, 0x01, 0x98, 0x05, 0xB2, 0xE4, 
+	0xDB, 0xDB, 0x42, 0x84, 0xD0, 0x0D, 0x1C, 0x79, 0x49, 0x50, 0x4B, 0x4F, 0x00, 0xBA, 0x57, 0xD8, 
+	0xD0, 0x04, 0x30, 0x01, 0x9C, 0x01, 0x58, 0x88, 0xDD, 0x03, 0x42, 0xA0, 0x9C, 0x01, 0xE0, 0x00, 
+	0x55, 0xDD, 0x50, 0x8C, 0x9C, 0x03, 0x35, 0x01, 0x42, 0xA3, 0xB2, 0xEB, 0x1C, 0x34, 0xD3, 0xB3, 
+	0x4E, 0x44, 0x25, 0x00, 0x48, 0x44, 0xE0, 0x28, 0xB2, 0x7B, 0x5D, 0x47, 0xD0, 0x21, 0x33, 0x01, 
+	0xB2, 0xFF, 0x00, 0x69, 0x18, 0x71, 0x4B, 0x3E, 0x00, 0x7A, 0x88, 0x89, 0x80, 0x91, 0x18, 0x9A, 
+	0x31, 0x10, 0x1C, 0x29, 0x00, 0x49, 0x1C, 0x3A, 0x32, 0x10, 0x5B, 0x89, 0x52, 0xD1, 0x00, 0x52, 
+	0x1C, 0x10, 0x22, 0x0A, 0x1C, 0x11, 0x43, 0x78, 0x18, 0x1B, 0x43, 0x69, 0x18, 0x71, 0x1C, 0x18, 
+	0x31, 0x3C, 0x30, 0x3C, 0xF9, 0x56, 0xF0, 0x03, 0x00, 0xAA, 0x4B, 0x34, 0x4B, 0x37, 0x58, 0xD2, 
+	0x50, 0xFA, 0x00, 0xBF, 0xB2, 0xED, 0x35, 0x01, 0x42, 0x9D, 0x68, 0x33, 0xE0, 0x3D, 0xDB, 0xD3, 
+	0x57, 0x33, 0x4E, 0x2D, 0xD1, 0x36, 0x33, 0x01, 0x43, 0x63, 0x23, 0x0A, 0x20, 0x3C, 0x18, 0xEB, 
+	0x2B, 0x00, 0x5E, 0x1B, 0x4B, 0x25, 0xD0, 0x2F, 0x33, 0x04, 0x4A, 0x2E, 0x23, 0x00, 0x7F, 0xDF, 
+	0x4E, 0x29, 0xE0, 0x26, 0x2E, 0x00, 0x5C, 0xF6, 0x26, 0x00, 0xD1, 0x20, 0x28, 0x00, 0x5F, 0x90, 
+	0x4A, 0x21, 0xD1, 0x1C, 0x55, 0x11, 0x00, 0x67, 0x48, 0x1D, 0x49, 0x1E, 0x88, 0xBF, 0x19, 0xCF, 
+	0x18, 0x82, 0x00, 0x5A, 0x1C, 0x27, 0x80, 0x97, 0x1C, 0x1A, 0x37, 0x10, 0x5A, 0x7F, 0x00, 0x7F, 
+	0x00, 0x52, 0x32, 0x10, 0x22, 0x0A, 0x52, 0x17, 0x18, 0xC0, 0x43, 0x53, 0x43, 0x63, 0x1C, 0x13, 
+	0x31, 0x3C, 0x18, 0xC9, 0xF0, 0x03, 0x30, 0x3C, 0xE0, 0x04, 0xF9, 0x15, 0x32, 0x0A, 0x33, 0x01, 
+	0x42, 0xB9, 0xB2, 0xD9, 0x34, 0x01, 0xD3, 0xD5, 0xE0, 0x00, 0xB2, 0xE4, 0x68, 0x2B, 0x4D, 0x0D, 
+	0xDB, 0xBD, 0x42, 0x9C, 0x49, 0x0C, 0x4B, 0x09, 0x7F, 0xDD, 0x33, 0x04, 0x20, 0xFF, 0x4B, 0x12, 
+	0x34, 0x0E, 0x1C, 0x1C, 0x42, 0xAA, 0x78, 0x1A, 0x5C, 0x8A, 0xD2, 0x02, 0xE0, 0x00, 0x70, 0x1A, 
+	0x33, 0x01, 0x70, 0x18, 0xD1, 0xF5, 0x42, 0xA3, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x09, 0xAE, 
+	0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x02, 0x24, 0x20, 0x00, 0x03, 0xE8, 0x20, 0x00, 0x15, 0xF8, 
+	0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x09, 0x24, 0x20, 0x00, 0x01, 0xEC, 0x20, 0x00, 0x00, 0xF8, 
+	0x20, 0x00, 0x09, 0x80, 0x20, 0x00, 0x12, 0xD8, 0x20, 0x00, 0x02, 0xEC, 0x4B, 0x42, 0xB5, 0xF7, 
+	0x60, 0x19, 0x21, 0x00, 0x24, 0x0A, 0x4B, 0x41, 0x4B, 0x41, 0x60, 0x19, 0x33, 0x04, 0x1C, 0x08, 
+	0x4D, 0x40, 0x7F, 0xDB, 0x46, 0xA4, 0x1C, 0x1A, 0x3A, 0x01, 0xE0, 0x11, 0x1C, 0x26, 0xB2, 0xD2, 
+	0x19, 0xAE, 0x43, 0x56, 0x7A, 0x36, 0x36, 0x38, 0xDA, 0x00, 0x42, 0xB0, 0x46, 0x66, 0x1C, 0x30, 
+	0x19, 0xAE, 0x43, 0x56, 0x5F, 0xF6, 0x27, 0x3C, 0xDA, 0x00, 0x42, 0xB1, 0x2A, 0x00, 0x1C, 0x31, 
+	0x4A, 0x32, 0xD1, 0xEB, 0x60, 0x11, 0x60, 0x50, 0x20, 0x0A, 0x4A, 0x2F, 0x4A, 0x31, 0x68, 0x11, 
+	0x3B, 0x01, 0xE0, 0x07, 0x1C, 0x04, 0xB2, 0xDB, 0x19, 0x14, 0x43, 0x5C, 0x7A, 0x24, 0x34, 0x38, 
+	0x1C, 0x14, 0x19, 0x09, 0xD1, 0xF4, 0x2B, 0x00, 0x60, 0x19, 0x4B, 0x27, 0x2B, 0x00, 0x68, 0x13, 
+	0x4B, 0x26, 0xDD, 0x0F, 0x68, 0x5B, 0x4A, 0x28, 0x80, 0x53, 0x80, 0x11, 0x78, 0x1B, 0x4B, 0x27, 
+	0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x1D, 0x93, 0x00, 0xF0, 0x01, 0x1C, 0x0B, 
+	0x68, 0x23, 0xFB, 0x93, 0xDD, 0x19, 0x2B, 0x00, 0x23, 0x08, 0x4A, 0x21, 0x4B, 0x21, 0x5E, 0xD1, 
+	0x5F, 0x12, 0x24, 0x0C, 0x33, 0x3D, 0x1C, 0x18, 0x30, 0x3C, 0x78, 0x1B, 0x78, 0x00, 0x43, 0x53, 
+	0x18, 0xC3, 0x11, 0x9B, 0xDC, 0x09, 0x42, 0x99, 0x78, 0x1B, 0x4B, 0x18, 0xD0, 0x03, 0x2B, 0x00, 
+	0x49, 0x19, 0x20, 0x00, 0xFB, 0xD0, 0xF0, 0x01, 0xFE, 0x40, 0xF7, 0xFF, 0x4A, 0x17, 0x4B, 0x11, 
+	0x78, 0x12, 0x68, 0x1B, 0xDB, 0x12, 0x42, 0x93, 0x4A, 0x12, 0x4B, 0x0B, 0x8E, 0xD1, 0x68, 0x18, 
+	0x42, 0x88, 0x4B, 0x0A, 0x8F, 0x11, 0xDB, 0x03, 0x42, 0x88, 0x68, 0x58, 0x8F, 0x52, 0xDA, 0x03, 
+	0x42, 0x93, 0x68, 0x5B, 0x4B, 0x0E, 0xDB, 0x07, 0x70, 0x1A, 0x22, 0x01, 0x2B, 0x00, 0xE0, 0x03, 
+	0x4A, 0x0B, 0xD1, 0x01, 0xBD, 0xF7, 0x70, 0x13, 0x20, 0x00, 0x16, 0x4C, 0x20, 0x00, 0x02, 0x0C, 
+	0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x01, 0xEB, 
+	0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x12, 0x48, 0x00, 0x00, 0x5C, 0xE4, 0x20, 0x00, 0x00, 0x40, 
+	0x20, 0x00, 0x00, 0xF5, 0x1C, 0x04, 0xB5, 0x38, 0x2A, 0x00, 0x1C, 0x08, 0x43, 0x54, 0xD0, 0x07, 
+	0x18, 0xD1, 0x43, 0x58, 0x10, 0x4D, 0x18, 0x20, 0xF0, 0x02, 0x19, 0x40, 0xBD, 0x38, 0xFF, 0xD1, 
+	0x1A, 0x43, 0xB5, 0x10, 0x19, 0x1B, 0x17, 0xDC, 0xF7, 0xFF, 0x40, 0x63, 0xBD, 0x10, 0xFF, 0xEB, 
+	0x4B, 0xA9, 0xB5, 0xF0, 0x33, 0x04, 0x25, 0x00, 0x7F, 0xDC, 0xB0, 0x87, 0xE0, 0x46, 0x1C, 0x2E, 
+	0xB2, 0xE4, 0x3C, 0x01, 0x43, 0x62, 0x22, 0x0A, 0x31, 0x38, 0x18, 0x99, 0x28, 0x00, 0x88, 0x88, 
+	0x4F, 0xA2, 0xD0, 0x3D, 0x2F, 0x00, 0x5D, 0x3F, 0x49, 0xA1, 0xD1, 0x2A, 0x29, 0x00, 0x78, 0x09, 
+	0x18, 0x9A, 0xD0, 0x07, 0x32, 0x3C, 0x21, 0x01, 0x23, 0x02, 0x20, 0x1D, 0xF0, 0x01, 0x91, 0x00, 
+	0x20, 0x0A, 0xFB, 0x0B, 0x4B, 0x9B, 0x43, 0x60, 0x18, 0x18, 0x49, 0x9B, 0x5F, 0xC2, 0x27, 0x3C, 
+	0x46, 0x94, 0x30, 0x38, 0x5F, 0xCA, 0x27, 0x26, 0x45, 0x94, 0x1C, 0x1F, 0x31, 0x4E, 0xDB, 0x08, 
+	0x49, 0x96, 0x78, 0x0A, 0x68, 0x49, 0x7A, 0x00, 0x11, 0x92, 0x43, 0x4A, 0xDA, 0x16, 0x42, 0x90, 
+	0x43, 0x62, 0x22, 0x0A, 0x87, 0xD5, 0x18, 0xBA, 0x72, 0x16, 0x32, 0x38, 0xE0, 0x08, 0x80, 0x95, 
+	0x90, 0xF2, 0xAE, 0xF1, 0x0B, 0xB2, 0x00, 0x4A, 0x8D, 0x5F, 0xD2, 0x27, 0x28, 0xDD, 0x08, 0x42, 
+	0x82, 0x72, 0x0E, 0x80, 0xCD, 0x4A, 0x8B, 0x80, 0x8D, 0x50, 0x8D, 0x00, 0xA1, 0x3A, 0x01, 0x68, 
+	0x1A, 0x4B, 0x85, 0x60, 0x1A, 0xD1, 0xB5, 0x2C, 0x00, 0x4B, 0x87, 0x60, 0x1C, 0x4B, 0x7F, 0x73, 
+	0x9C, 0x7F, 0xDC, 0x33, 0x04, 0x3C, 0x01, 0xE0, 0xC7, 0x23, 0x0A, 0xB2, 0xE4, 0x18, 0xED, 0x43, 
+	0x63, 0x35, 0x38, 0x8F, 0xAA, 0xD1, 0x00, 0x2A, 0x00, 0x4B, 0x7C, 0xE0, 0x93, 0x8D, 0x1B, 0xB2, 
+	0x12, 0x1A, 0x52, 0xB2, 0x19, 0x00, 0x5B, 0x10, 0x52, 0x80, 0xAB, 0x18, 0xD3, 0x7B, 0x9A, 0x4B, 
+	0x7A, 0xD1, 0x0D, 0x2A, 0x00, 0x57, 0x12, 0x4A, 0x79, 0xD1, 0x09, 0x2A, 0x00, 0x21, 0x01, 0x4A, 
+	0x78, 0x22, 0x80, 0x70, 0x11, 0x69, 0x50, 0x05, 0xD2, 0x06, 0x00, 0x0E, 0x00, 0x61, 0x51, 0x43, 
+	0x01, 0x73, 0x9A, 0x22, 0x01, 0x4B, 0x71, 0x4E, 0x73, 0x78, 0x33, 0x57, 0x1A, 0xDB, 0x70, 0x42, 
+	0x9A, 0x78, 0x1A, 0x4B, 0x6F, 0xD0, 0x01, 0x2A, 0x00, 0x70, 0x1A, 0x22, 0x00, 0x00, 0x62, 0x4D, 
+	0x66, 0x33, 0x01, 0x68, 0x2B, 0x18, 0xAB, 0x60, 0x2B, 0x5F, 0xD9, 0x27, 0x04, 0x18, 0x9A, 0x4B, 
+	0x6A, 0x5F, 0x90, 0x26, 0x04, 0x32, 0x10, 0x1C, 0x22, 0x5F, 0x57, 0x00, 0x52, 0x5E, 0xD7, 0x97, 
+	0x03, 0x17, 0xD3, 0x1A, 0x0A, 0x18, 0xD2, 0x9E, 0x03, 0x1B, 0xF3, 0x40, 0x5A, 0x19, 0x9B, 0x17, 
+	0xDE, 0x18, 0xD3, 0x40, 0x73, 0x4B, 0x59, 0x93, 0x04, 0x5E, 0x9E, 0x22, 0x2E, 0x1C, 0x32, 0x9B, 
+	0x04, 0xF7, 0xFF, 0x96, 0x05, 0x9A, 0x05, 0xFF, 0x39, 0x1C, 0x06, 0x9B, 0x04, 0x1C, 0x38, 0x99, 
+	0x03, 0xFF, 0x32, 0xF7, 0xFF, 0x1C, 0x13, 0x4A, 0x4D, 0x78, 0x1B, 0x33, 0x2D, 0xB2, 0x5B, 0x1C, 
+	0x2A, 0xDD, 0x07, 0x42, 0x9E, 0x69, 0xC9, 0x49, 0x55, 0x42, 0xBE, 0x1A, 0xCF, 0x1E, 0x4E, 0xDB, 
+	0x03, 0xE0, 0x00, 0x1A, 0xF6, 0x4B, 0x45, 0x1C, 0x1E, 0x78, 0x1B, 0x33, 0x2E, 0x42, 0x98, 0xB2, 
+	0x5B, 0x49, 0x4E, 0xDD, 0x07, 0x1A, 0xCF, 0x6A, 0x09, 0xDB, 0x03, 0x42, 0xB8, 0x1A, 0xC0, 0x1E, 
+	0x48, 0x1C, 0x18, 0xE0, 0x00, 0x18, 0xD3, 0x00, 0x63, 0x1C, 0x23, 0x80, 0x9E, 0x00, 0x5B, 0x33, 
+	0x10, 0x25, 0x0A, 0x52, 0xE8, 0x4B, 0x3D, 0x43, 0x65, 0x20, 0x30, 0x4E, 0x43, 0x19, 0x76, 0x5E, 
+	0x1F, 0x21, 0x3C, 0x19, 0x55, 0x22, 0x3C, 0x5E, 0x70, 0x1C, 0x3A, 0x5E, 0xA9, 0xFF, 0x0A, 0xF7, 
+	0xFF, 0x87, 0xA8, 0x36, 0x38, 0x7A, 0x30, 0x35, 0x38, 0x1C, 0x3A, 0x7A, 0x29, 0xFF, 0x02, 0xF7, 
+	0xFF, 0x4B, 0x31, 0x72, 0x28, 0x18, 0x99, 0x00, 0x62, 0x88, 0x89, 0x48, 0x37, 0x80, 0x91, 0x18, 
+	0x82, 0x32, 0x10, 0x1C, 0x22, 0x5A, 0xD1, 0x00, 0x52, 0x22, 0x0A, 0x52, 0x11, 0x43, 0x61, 0x1C, 
+	0x11, 0x18, 0x59, 0x18, 0x40, 0x30, 0x3C, 0x1C, 0x0D, 0xF0, 0x02, 0x31, 0x3C, 0x23, 0x3C, 0xFF, 
+	0x1D, 0x35, 0x38, 0x5E, 0xEA, 0x2A, 0x00, 0x4B, 0x29, 0x49, 0x24, 0xD0, 0x0C, 0x31, 0x32, 0x5D, 
+	0x1A, 0xB2, 0x50, 0x78, 0x09, 0xDA, 0x06, 0x42, 0x88, 0x55, 0x1A, 0x32, 0x01, 0x42, 0x5B, 0x23, 
+	0x01, 0xE0, 0x00, 0x80, 0xAB, 0x4D, 0x1C, 0x55, 0x1A, 0xD0, 0x00, 0x2C, 0x00, 0x4E, 0x22, 0xE7, 
+	0x33, 0x68, 0x32, 0x68, 0x29, 0x42, 0x91, 0x4B, 0x22, 0x68, 0x19, 0xDA, 0x25, 0x31, 0x01, 0x48, 
+	0x17, 0x30, 0x3E, 0x60, 0x19, 0xB2, 0x40, 0x78, 0x00, 0xDA, 0x1C, 0x42, 0x81, 0x60, 0x2A, 0x4B, 
+	0x0F, 0x7F, 0xDC, 0x33, 0x04, 0x3C, 0x01, 0xE0, 0x14, 0x00, 0x63, 0xB2, 0xE4, 0x88, 0x92, 0x18, 
+	0xF2, 0x80, 0x9A, 0x18, 0xEB, 0x33, 0x10, 0x1C, 0x23, 0x5B, 0x9A, 0x00, 0x5B, 0x22, 0x0A, 0x53, 
+	0x5A, 0x43, 0x61, 0x1C, 0x11, 0x18, 0x71, 0x18, 0x68, 0x31, 0x3C, 0x30, 0x3C, 0xFE, 0xDC, 0xF0, 
+	0x02, 0xD1, 0xE8, 0x2C, 0x00, 0x60, 0x1C, 0xE0, 0x00, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x01, 0xEC, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x12, 
+	0x48, 0x20, 0x00, 0x02, 0x0C, 0x20, 0x00, 0x00, 0xF8, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x16, 
+	0x3E, 0x20, 0x00, 0x01, 0xE2, 0x20, 0x00, 0x12, 0x7A, 0x20, 0x00, 0x03, 0x20, 0x20, 0x00, 0x09, 
+	0x24, 0x20, 0x00, 0x01, 0x60, 0x4B, 0x31, 0xB5, 0xF0, 0x78, 0x1E, 0x4D, 0x31, 0x27, 0x00, 0x4B, 
+	0x31, 0x60, 0x2F, 0x1C, 0x1A, 0x78, 0x12, 0x32, 0x2B, 0x92, 0x04, 0xB0, 0x89, 0x1C, 0x1A, 0x00, 
+	0x50, 0x32, 0x32, 0x90, 0x06, 0x92, 0x07, 0x78, 0x12, 0x5E, 0x99, 0x22, 0x30, 0x91, 0x05, 0x68, 
+	0x6B, 0x97, 0x03, 0x93, 0x02, 0x3E, 0x01, 0xE0, 0x42, 0x1D, 0x33, 0xB2, 0xF6, 0x93, 0x01, 0x00, 
+	0x5B, 0x2B, 0x00, 0x5A, 0xEB, 0x98, 0x04, 0xD0, 0x34, 0x1A, 0x1B, 0xB2, 0x1B, 0x10, 0x5B, 0x99, 
+	0x06, 0x9A, 0x01, 0x18, 0xCB, 0xB2, 0x9B, 0x48, 0x20, 0x00, 0xF2, 0x52, 0xAB, 0x18, 0x84, 0x58, 
+	0x81, 0xB2, 0x1B, 0x98, 0x07, 0xDA, 0x07, 0x42, 0x81, 0x31, 0x01, 0x48, 0x1B, 0x99, 0x01, 0x50, 
+	0x81, 0x60, 0x63, 0x22, 0x00, 0xE0, 0x21, 0x52, 0x6A, 0x37, 0x01, 0x68, 0x60, 0x17, 0xD1, 0x1A, 
+	0x1A, 0x18, 0x50, 0x46, 0x84, 0x40, 0x48, 0x9A, 0x05, 0x90, 0x00, 0x18, 0x11, 0x43, 0x42, 0x46, 
+	0x60, 0x9A, 0x00, 0x46, 0x94, 0x46, 0x62, 0x43, 0x53, 0x10, 0x4B, 0x18, 0xD0, 0xF0, 0x02, 0x18, 
+	0xC0, 0x9B, 0x01, 0xFE, 0x09, 0x60, 0x60, 0x99, 0x03, 0x42, 0x81, 0x52, 0xE8, 0xE0, 0x05, 0xDB, 
+	0x04, 0x00, 0xF2, 0x48, 0x09, 0xE0, 0x01, 0x50, 0x83, 0x90, 0x03, 0x96, 0x02, 0xD1, 0xBA, 0x2E, 
+	0x00, 0xB0, 0x09, 0x99, 0x02, 0x60, 0x69, 0x60, 0x2F, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x09, 
+	0x7C, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x09, 0x48, 0x4B, 0x27, 0xB5, 
+	0xF7, 0x33, 0x04, 0x49, 0x27, 0x4A, 0x27, 0x7F, 0xDB, 0xE0, 0x42, 0x48, 0x27, 0xB2, 0xDB, 0x3B, 
+	0x01, 0x34, 0x14, 0x1C, 0x1C, 0x19, 0x04, 0x00, 0x64, 0x5F, 0x64, 0x25, 0x04, 0xD0, 0x27, 0x2C, 
+	0x00, 0x43, 0x5C, 0x24, 0x0A, 0x26, 0x3C, 0x19, 0x0C, 0x2C, 0x00, 0x5F, 0xA4, 0x00, 0x5C, 0xD0, 
+	0x20, 0x88, 0xB6, 0x19, 0x0E, 0xB2, 0x37, 0x19, 0x05, 0x27, 0x04, 0x46, 0xBC, 0x46, 0x65, 0x5F, 
+	0xEF, 0x10, 0x6F, 0x1B, 0xED, 0x19, 0x14, 0x19, 0xBE, 0x1C, 0x1C, 0x80, 0xA6, 0x00, 0x64, 0x34, 
+	0x10, 0x1C, 0x1C, 0x5B, 0x0E, 0xB2, 0x37, 0x34, 0x0C, 0x46, 0xBC, 0x00, 0x64, 0x46, 0x67, 0x5E, 
+	0x25, 0x10, 0x7F, 0x1B, 0x7F, 0x52, 0xA6, 0x19, 0xBE, 0x26, 0x01, 0x4C, 0x10, 0xE0, 0x10, 0x54, 
+	0xE6, 0x00, 0x5C, 0x4D, 0x0B, 0x88, 0xB6, 0x19, 0x2E, 0x80, 0xA6, 0x19, 0x14, 0x36, 0x10, 0x1C, 
+	0x1E, 0x00, 0x76, 0x1C, 0x1C, 0x34, 0x0C, 0x5B, 0x76, 0x53, 0x16, 0x00, 0x64, 0x26, 0x00, 0x4C, 
+	0x07, 0x2B, 0x00, 0x54, 0xE6, 0x68, 0x0B, 0xD1, 0xBA, 0xBD, 0xF7, 0x60, 0x13, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x09, 0x80, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x01, 
+	0xEC, 0x4A, 0x35, 0xB5, 0xF7, 0x1C, 0x11, 0x4B, 0x35, 0x32, 0x34, 0x31, 0x33, 0x78, 0x12, 0x78, 
+	0x0E, 0x7F, 0xDB, 0x33, 0x04, 0xE3, 0xEA, 0xAE, 0xF1, 0x0C, 0x92, 0x01, 0x49, 0x32, 0x4A, 0x32, 
+	0x46, 0xB4, 0x48, 0x32, 0xE0, 0x4B, 0xB2, 0xDB, 0x3B, 0x01, 0x98, 0x01, 0x5C, 0xC4, 0xD1, 0x00, 
+	0x2C, 0x00, 0x00, 0x5E, 0x46, 0x60, 0x19, 0x96, 0x19, 0x8D, 0x5F, 0xF6, 0x27, 0x04, 0x96, 0x00, 
+	0x88, 0xAD, 0xB2, 0x2E, 0x9F, 0x00, 0x17, 0xF7, 0x1B, 0xBE, 0x40, 0x7E, 0x19, 0xF6, 0xDA, 0x10, 
+	0x42, 0x86, 0x36, 0x0C, 0x1C, 0x1E, 0x5E, 0xB6, 0x00, 0x76, 0x37, 0x10, 0x1C, 0x1F, 0x00, 0x7F, 
+	0x96, 0x00, 0x9E, 0x00, 0x5F, 0xCF, 0x17, 0xFE, 0x1B, 0xF7, 0x40, 0x77, 0x19, 0xBF, 0x42, 0x87, 
+	0x97, 0x00, 0x00, 0x58, 0xDB, 0x18, 0x1C, 0x1E, 0x18, 0x10, 0x36, 0x10, 0x80, 0x85, 0x1C, 0x18, 
+	0x4D, 0x19, 0x30, 0x0C, 0x00, 0x76, 0x00, 0x40, 0x5B, 0x75, 0x1C, 0x18, 0x52, 0x15, 0x00, 0x40, 
+	0x30, 0x14, 0x27, 0x04, 0x18, 0x10, 0x28, 0x00, 0x5F, 0xC0, 0x2C, 0x00, 0xDD, 0x04, 0x48, 0x13, 
+	0xD1, 0x02, 0x54, 0xC4, 0x24, 0x01, 0x43, 0x5C, 0x24, 0x0A, 0x1C, 0x18, 0x4D, 0x0E, 0x30, 0x14, 
+	0x19, 0x2C, 0x00, 0x40, 0x4D, 0x0D, 0x18, 0x28, 0x8F, 0xA4, 0x2B, 0x00, 0x80, 0x84, 0x68, 0x0A, 
+	0xD1, 0xB1, 0x49, 0x0B, 0x4B, 0x09, 0x4B, 0x0B, 0x60, 0x1A, 0x4B, 0x0B, 0x78, 0x1A, 0x4A, 0x0B, 
+	0x70, 0x1A, 0xCA, 0x31, 0x1C, 0x0B, 0xCA, 0xC0, 0xC3, 0x31, 0xBD, 0xF7, 0xC3, 0xC0, 0x20, 0x00, 
+	0x12, 0x48, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 
+	0x01, 0x64, 0x20, 0x00, 0x00, 0xCC, 0x20, 0x00, 0x00, 0xF5, 0x20, 0x00, 0x00, 0xF4, 0x20, 0x00, 
+	0x00, 0xE0, 0x48, 0x19, 0xB5, 0xF7, 0x42, 0x5B, 0x23, 0x01, 0x4B, 0x18, 0x60, 0x43, 0x4B, 0x18, 
+	0x78, 0x1A, 0x33, 0x2B, 0x1C, 0x19, 0x31, 0x2A, 0x78, 0x1E, 0x23, 0x00, 0x78, 0x0F, 0xE0, 0x1E, 
+	0x46, 0xB4, 0xB2, 0xD2, 0x3A, 0x01, 0x00, 0x51, 0x4C, 0x13, 0xB2, 0x0E, 0x5A, 0x61, 0x17, 0xF6, 
+	0x43, 0xF6, 0x1D, 0x11, 0x40, 0x0E, 0xB2, 0xB5, 0x00, 0x49, 0x2D, 0x00, 0x52, 0x0E, 0x4E, 0x0E, 
+	0xD0, 0x0F, 0x5F, 0x8E, 0xB2, 0x2D, 0xDC, 0x04, 0x2E, 0x00, 0xDA, 0x07, 0x42, 0xBD, 0x52, 0x0D, 
+	0x25, 0x00, 0x45, 0x65, 0xE0, 0x05, 0x26, 0x00, 0xDA, 0x02, 0xE0, 0x00, 0x52, 0x0E, 0x2A, 0x00, 
+	0x33, 0x01, 0x4A, 0x01, 0xD1, 0xDE, 0xBD, 0xF7, 0x60, 0x13, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 
+	0x09, 0x7C, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x12, 0x3C, 0x20, 0x00, 0x00, 0xCC, 0x80, 0x08, 
+	0xF3, 0xEF, 0xBA, 0x00, 0x47, 0x70, 0xBA, 0x40, 0x47, 0x70, 0xBA, 0xC0, 0x47, 0x70, 0xB5, 0x70, 
+	0x47, 0x70, 0xDA, 0x16, 0x28, 0x00, 0x23, 0x0F, 0xB2, 0xC0, 0x3B, 0x08, 0x40, 0x03, 0x08, 0x9B, 
+	0x4A, 0x12, 0x18, 0x9B, 0x00, 0x9B, 0x40, 0x10, 0x22, 0x03, 0x22, 0xFF, 0x40, 0x90, 0x1C, 0x14, 
+	0x68, 0x5D, 0x01, 0x89, 0x40, 0x84, 0x40, 0x0A, 0x43, 0xA5, 0x1C, 0x28, 0x40, 0x82, 0x60, 0x58, 
+	0x43, 0x10, 0x24, 0x03, 0xE0, 0x11, 0x4B, 0x09, 0x08, 0x82, 0x32, 0xC0, 0x40, 0x20, 0x00, 0x92, 
+	0x40, 0xA0, 0x58, 0xD5, 0x24, 0xFF, 0x40, 0x86, 0x1C, 0x26, 0x43, 0xB5, 0x01, 0x89, 0x40, 0x84, 
+	0x40, 0x0C, 0x43, 0x20, 0x1C, 0x28, 0xBD, 0x70, 0x50, 0xD0, 0xE0, 0x00, 0xED, 0x18, 0xE0, 0x00, 
+	0xE1, 0x00, 0x22, 0x40, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 
+	0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x3F, 0x4B, 0x07, 0x20, 0x7F, 
+	0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 
+	0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4A, 0x08, 
+	0x4B, 0x07, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x89, 0x04, 0x89, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x40, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 
+	0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 
+	0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 
+	0x80, 0xFF, 0x22, 0x20, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 
+	0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x5F, 0x4B, 0x07, 0x20, 0x7F, 
+	0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 
+	0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x21, 0xBE, 
+	0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x20, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 
+	0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 
+	0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 
+	0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x00, 0x80, 0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x10, 
+	0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 
+	0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 
+	0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x6F, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 
+	0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 
+	0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4B, 0x0B, 0xB5, 0x00, 0x28, 0x00, 
+	0x68, 0x19, 0x06, 0x49, 0xD0, 0x04, 0x22, 0x10, 0x0E, 0x49, 0xE0, 0x01, 0x43, 0x11, 0x40, 0x11, 
+	0x22, 0x6F, 0x20, 0x7F, 0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 
+	0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x08, 0x21, 0xDE, 
+	0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 
+	0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 
+	0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x10, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 
+	0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 
+	0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 
+	0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x00, 0xC0, 0x6C, 0x18, 0x6A, 0x9A, 0xAE, 0xF1, 0x0D, 0x47, 
+	0x70, 0x0F, 0xC0, 0x22, 0x01, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 
+	0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 
+	0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x7E, 0x4B, 0x07, 0x20, 
+	0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 
+	0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x21, 
+	0xFC, 0x4B, 0x07, 0x01, 0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 
+	0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 
+	0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x22, 0x01, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 
+	0x49, 0x04, 0x49, 0x4A, 0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 
+	0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 
+	0xFF, 0x80, 0xFF, 0x05, 0xDB, 0x23, 0x80, 0x01, 0xC0, 0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 
+	0x02, 0x4B, 0x08, 0x20, 0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 
+	0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 
+	0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x22, 0x7D, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 
+	0x1A, 0x40, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 
+	0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x21, 0xFA, 0x4B, 0x07, 0x01, 
+	0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 
+	0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 
+	0xFF, 0x80, 0xFF, 0x22, 0x02, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 
+	0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 
+	0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 
+	0xDB, 0x23, 0x80, 0x01, 0x80, 0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x22, 0x04, 0x4B, 0x08, 0x20, 
+	0x7F, 0x68, 0x19, 0x0E, 0x49, 0x06, 0x49, 0x68, 0x1A, 0x43, 0x11, 0x43, 0x0A, 0x43, 0x82, 0x68, 
+	0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x08, 0x22, 0x7B, 0x4B, 0x07, 0x20, 0x7F, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 0x43, 
+	0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0x46, 
+	0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x08, 0x4B, 0x0B, 0xB5, 0x00, 0x28, 0x00, 0x68, 0x19, 0x06, 
+	0x49, 0xD0, 0x04, 0x22, 0x04, 0x0E, 0x49, 0xE0, 0x01, 0x43, 0x11, 0x40, 0x11, 0x22, 0x7B, 0x20, 
+	0x7F, 0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 
+	0x1A, 0x69, 0x19, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x08, 0x21, 0xF6, 0x4B, 0x07, 0x01, 
+	0xC9, 0x68, 0x1A, 0x40, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x05, 0x60, 0x1A, 0x43, 0x0A, 0x23, 
+	0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 
+	0xFF, 0x80, 0xFF, 0x22, 0x04, 0x4B, 0x08, 0x68, 0x18, 0x68, 0x19, 0x0E, 0x49, 0x04, 0x49, 0x4A, 
+	0x06, 0x43, 0x11, 0x40, 0x02, 0x02, 0x09, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 
+	0x19, 0x05, 0xDB, 0x47, 0x70, 0x61, 0x1A, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0x05, 
+	0xDB, 0x23, 0x80, 0x01, 0x40, 0x6C, 0x18, 0x47, 0x70, 0x0F, 0xC0, 0x23, 0x80, 0xB5, 0x10, 0x1D, 
+	0x04, 0x05, 0xDB, 0x22, 0x3F, 0x69, 0x98, 0x43, 0x90, 0x40, 0x14, 0x24, 0x01, 0x43, 0x20, 0x1C, 
+	0x88, 0x61, 0x98, 0x18, 0x41, 0x40, 0x21, 0x02, 0x11, 0x40, 0x0A, 0x4A, 0x02, 0x69, 0x98, 0x43, 
+	0x0A, 0x40, 0x02, 0xBD, 0x10, 0x61, 0x9A, 0xFF, 0xFF, 0xC0, 0xFF, 0x22, 0x7F, 0x4B, 0x06, 0x23, 
+	0x80, 0x68, 0x19, 0x6C, 0x18, 0x05, 0xDB, 0x43, 0x90, 0x39, 0x01, 0x1C, 0x02, 0x40, 0x11, 0x64, 
+	0x1A, 0x43, 0x0A, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x09, 0x18, 0x05, 0xDB, 0x23, 0x80, 0x21, 
+	0x7F, 0x6C, 0x1A, 0x21, 0x01, 0x43, 0x8A, 0x64, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x47, 0x70, 0x69, 
+	0xDA, 0x05, 0xDB, 0x43, 0x8A, 0x21, 0x0F, 0x43, 0x0A, 0x21, 0x02, 0x69, 0xDA, 0x61, 0xDA, 0x43, 
+	0x8A, 0x21, 0xF0, 0x43, 0x0A, 0x21, 0x30, 0x4A, 0x0C, 0x61, 0xDA, 0x39, 0x01, 0x79, 0x11, 0x77, 
+	0x59, 0xB2, 0xC9, 0x49, 0x0A, 0x69, 0xD8, 0x20, 0x80, 0x40, 0x01, 0x43, 0x01, 0x02, 0xC0, 0x69, 
+	0xD8, 0x61, 0xD9, 0x40, 0x01, 0x49, 0x07, 0x03, 0xC0, 0x20, 0xA0, 0x61, 0xD9, 0x43, 0x01, 0x3A, 
+	0x01, 0x79, 0x92, 0x77, 0xDA, 0xB2, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x02, 0x04, 0xFF, 
+	0xF0, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0x4A, 0x1A, 0xB5, 0x30, 0x88, 0x11, 0x4B, 0x1A, 0x18, 
+	0xC9, 0x4C, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x8C, 0x18, 0xB2, 0x89, 0x8C, 0x59, 0x84, 0x19, 0x84, 
+	0x59, 0x21, 0x00, 0x4D, 0x16, 0x88, 0x50, 0xB2, 0x89, 0x19, 0x01, 0x84, 0x99, 0x8C, 0x9A, 0x8C, 
+	0xDC, 0x1E, 0x42, 0x19, 0x44, 0xB2, 0x92, 0xB2, 0xA4, 0x84, 0xDA, 0x85, 0x1C, 0x8D, 0x1D, 0x19, 
+	0x00, 0x4C, 0x10, 0x8D, 0x5C, 0xB2, 0x80, 0x8D, 0x98, 0x85, 0x58, 0x8D, 0xD8, 0x85, 0x99, 0x8E, 
+	0x18, 0x85, 0xDA, 0x8E, 0x58, 0x86, 0x19, 0x8E, 0x98, 0x86, 0x5A, 0x8E, 0xD8, 0x86, 0x99, 0x8F, 
+	0x18, 0x86, 0xDA, 0x8F, 0x58, 0x87, 0x19, 0x8F, 0x98, 0x87, 0x5A, 0x8F, 0xD9, 0x87, 0x99, 0xBD, 
+	0x30, 0x87, 0xDA, 0x20, 0x00, 0x02, 0x04, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x00, 0x03, 0xFF, 0x00, 
+	0x00, 0x05, 0xFF, 0x00, 0x00, 0x01, 0xFF, 0x4B, 0x22, 0xB5, 0x30, 0x68, 0x1A, 0x24, 0xEE, 0x40, 
+	0x14, 0x01, 0xE4, 0x68, 0x1A, 0x48, 0x20, 0x40, 0x02, 0x21, 0x7F, 0x60, 0x1A, 0x43, 0x22, 0x22, 
+	0x80, 0x68, 0x1C, 0x69, 0x15, 0x05, 0xD2, 0x4C, 0x1C, 0x61, 0x14, 0x2C, 0x00, 0x7C, 0xA4, 0x68, 
+	0x1C, 0xD0, 0x16, 0x04, 0x64, 0x25, 0x04, 0x43, 0x2C, 0x0E, 0x64, 0x40, 0x0C, 0x68, 0x1D, 0x40, 
+	0x28, 0x02, 0x24, 0x60, 0x18, 0x43, 0x20, 0x69, 0x14, 0x68, 0x18, 0x68, 0x1C, 0x61, 0x10, 0x40, 
+	0x20, 0x20, 0x7B, 0x43, 0x8C, 0x68, 0x1C, 0x43, 0x01, 0x1C, 0x21, 0xE0, 0x15, 0x60, 0x19, 0x25, 
+	0x04, 0x68, 0x1C, 0x0E, 0x64, 0x06, 0x64, 0x68, 0x1D, 0x43, 0x2C, 0x43, 0x8D, 0x40, 0x0C, 0x43, 
+	0x21, 0x1C, 0x29, 0x68, 0x19, 0x60, 0x19, 0x61, 0x11, 0x69, 0x14, 0x21, 0xF6, 0x68, 0x1C, 0x40, 
+	0x21, 0x01, 0xC9, 0x40, 0x20, 0x68, 0x1C, 0x60, 0x18, 0x43, 0x08, 0x69, 0x11, 0x68, 0x1B, 0x13, 
+	0xB3, 0xAE, 0xF1, 0x0E, 0xBD, 0x30, 0x61, 0x13, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 
+	0x20, 0x00, 0x09, 0xAE, 0xB6, 0x72, 0xB5, 0x00, 0x22, 0x01, 0x4B, 0x0F, 0x4B, 0x0F, 0x70, 0x1A, 
+	0x4B, 0x0F, 0x7C, 0x9A, 0xD0, 0x07, 0x2A, 0x00, 0x21, 0xF6, 0x68, 0x1A, 0x40, 0x11, 0x01, 0xC9, 
+	0x4A, 0x0C, 0x68, 0x18, 0xE0, 0x05, 0x40, 0x02, 0x22, 0x7B, 0x68, 0x19, 0x68, 0x1A, 0x40, 0x11, 
+	0x43, 0x82, 0x20, 0x7F, 0x60, 0x1A, 0x43, 0x0A, 0x23, 0x80, 0x68, 0x1A, 0x69, 0x19, 0x05, 0xDB, 
+	0xB6, 0x62, 0x61, 0x1A, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x64, 0x20, 0x00, 0x09, 0xAE, 
+	0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 0xB6, 0x72, 0xB5, 0x00, 0x22, 0x00, 0x4B, 0x10, 
+	0x4B, 0x10, 0x70, 0x1A, 0x4B, 0x10, 0x7C, 0x9A, 0x2A, 0x00, 0x68, 0x19, 0x04, 0x49, 0xD0, 0x08, 
+	0x0E, 0x49, 0x22, 0x04, 0x68, 0x18, 0x43, 0x11, 0x02, 0x09, 0x4A, 0x0C, 0xE0, 0x06, 0x40, 0x02, 
+	0x22, 0x04, 0x06, 0x49, 0x43, 0x11, 0x0E, 0x49, 0x20, 0x7F, 0x68, 0x1A, 0x43, 0x0A, 0x43, 0x82, 
+	0x68, 0x1A, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x61, 0x1A, 0x69, 0x19, 0xBD, 0x00, 0xB6, 0x62, 
+	0x20, 0x00, 0x00, 0x64, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x00, 0x08, 0xFF, 0xFF, 0x80, 0xFF, 
+	0x78, 0x18, 0x4B, 0x01, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x64, 0x23, 0x80, 0xB5, 0x00, 
+	0x6C, 0x19, 0x05, 0xDB, 0x01, 0xD2, 0x22, 0x80, 0x64, 0x1A, 0x43, 0x0A, 0x21, 0x80, 0x4A, 0x23, 
+	0x00, 0x49, 0x68, 0x10, 0x60, 0x11, 0x43, 0x01, 0x68, 0x99, 0x68, 0x12, 0x6C, 0x19, 0x60, 0x9A, 
+	0x02, 0x12, 0x22, 0x80, 0x64, 0x1A, 0x43, 0x0A, 0x4A, 0x1D, 0x6C, 0x19, 0x64, 0x1A, 0x40, 0x0A, 
+	0x22, 0x7F, 0x4B, 0x1C, 0x4B, 0x1C, 0x7B, 0x59, 0x68, 0x18, 0x40, 0x11, 0x04, 0x09, 0x4A, 0x1B, 
+	0x43, 0x0A, 0x40, 0x02, 0x68, 0x19, 0x60, 0x1A, 0x05, 0xD2, 0x22, 0xA0, 0x60, 0x91, 0x68, 0x90, 
+	0x49, 0x17, 0x68, 0x18, 0x20, 0x84, 0x40, 0x01, 0x43, 0x01, 0x05, 0xC0, 0x68, 0x19, 0x60, 0x19, 
+	0x60, 0x91, 0x68, 0x90, 0x78, 0x09, 0x49, 0x13, 0x29, 0x00, 0xB2, 0x49, 0x29, 0x01, 0xD0, 0x02, 
+	0xE0, 0x03, 0xD1, 0x0C, 0x49, 0x10, 0x68, 0x18, 0xE0, 0x03, 0x40, 0x01, 0x21, 0x80, 0x68, 0x18, 
+	0x43, 0x01, 0x04, 0x09, 0x68, 0x1B, 0x60, 0x19, 0x60, 0x93, 0x68, 0x91, 0x05, 0xDB, 0x23, 0x80, 
+	0x4A, 0x0A, 0x6C, 0x19, 0x64, 0x1A, 0x40, 0x0A, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x14, 
+	0xFF, 0xFF, 0x7F, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0x80, 0xFF, 0xFF, 
+	0x80, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x02, 0xFA, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 
+	0x22, 0x01, 0x4B, 0x04, 0x23, 0x80, 0x70, 0x1A, 0x6C, 0x99, 0x05, 0xDB, 0x64, 0x99, 0x43, 0x91, 
+	0x47, 0x70, 0x70, 0x1A, 0x20, 0x00, 0x00, 0x00, 0x23, 0x01, 0x4A, 0x03, 0x22, 0x80, 0x70, 0x13, 
+	0x70, 0x53, 0x05, 0xD2, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x02, 0x4B, 0x06, 0xB5, 0x00, 
+	0x78, 0x1A, 0xB6, 0x72, 0xD0, 0x04, 0x2A, 0x00, 0x46, 0xC0, 0x46, 0xC0, 0xBF, 0x30, 0xB6, 0x62, 
+	0xB6, 0x62, 0xE7, 0xF6, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x00, 0x02, 0x4B, 0x09, 0xB5, 0x38, 
+	0x78, 0x9A, 0x49, 0x09, 0x43, 0x51, 0x79, 0x1C, 0x1C, 0x05, 0x4B, 0x08, 0x48, 0x08, 0x18, 0xC9, 
+	0xF8, 0x90, 0xF0, 0x02, 0x1C, 0x29, 0x4B, 0x06, 0x43, 0x58, 0x34, 0x01, 0xF0, 0x02, 0x40, 0xA1, 
+	0xBD, 0x38, 0xF8, 0x89, 0x20, 0x00, 0x0A, 0xAA, 0xFF, 0xFF, 0xFE, 0x44, 0x00, 0x02, 0x24, 0xFE, 
+	0x00, 0x0F, 0x42, 0x40, 0x68, 0x19, 0x4B, 0x05, 0x05, 0xDB, 0x23, 0x80, 0x02, 0x09, 0x69, 0x5A, 
+	0x0A, 0x09, 0x0E, 0x12, 0x43, 0x0A, 0x06, 0x12, 0x47, 0x70, 0x61, 0x5A, 0x20, 0x00, 0x00, 0x04, 
+	0x60, 0x18, 0x4B, 0x01, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x04, 0x22, 0x01, 0x4B, 0x05, 
+	0x23, 0x80, 0x70, 0x1A, 0x69, 0x59, 0x05, 0xDB, 0x04, 0x52, 0x22, 0x80, 0x61, 0x5A, 0x43, 0x0A, 
+	0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x01, 0x4B, 0x05, 0xB5, 0x00, 0x78, 0x1A, 0xB6, 0x72, 
+	0xD0, 0x03, 0x2A, 0x00, 0x46, 0xC0, 0x46, 0xC0, 0xE7, 0xF7, 0xB6, 0x62, 0xBD, 0x00, 0xB6, 0x62, 
+	0x20, 0x00, 0x00, 0x00, 0x4B, 0x10, 0xB5, 0x00, 0x05, 0x9A, 0x68, 0x1B, 0x4A, 0x0F, 0xD5, 0x0C, 
+	0xB6, 0x72, 0x4B, 0x0F, 0x29, 0x00, 0x78, 0x11, 0x78, 0x19, 0xD1, 0x02, 0xD0, 0x11, 0x29, 0x00, 
+	0x46, 0xC0, 0x46, 0xC0, 0xE7, 0xF4, 0xB6, 0x62, 0x4B, 0x09, 0x4A, 0x08, 0x78, 0x11, 0xB6, 0x72, 
+	0xD1, 0x02, 0x29, 0x00, 0x29, 0x00, 0x78, 0x19, 0x46, 0xC0, 0xD0, 0x04, 0xB6, 0x62, 0x46, 0xC0, 
+	0xE7, 0xF3, 0xBF, 0x30, 0xBD, 0x00, 0xB6, 0x62, 0x20, 0x00, 0x00, 0x58, 0x20, 0x00, 0x00, 0x01, 
+	0x20, 0x00, 0x00, 0x00, 0x49, 0x13, 0xB5, 0x70, 0x24, 0x04, 0x4B, 0x13, 0x4B, 0x13, 0x60, 0x19, 
+	0x68, 0x1A, 0x4D, 0x13, 0x60, 0x1A, 0x43, 0x22, 0x24, 0x02, 0x68, 0x1A, 0x60, 0x1A, 0x43, 0xA2, 
+	0x24, 0x01, 0x68, 0x1A, 0x4C, 0x0F, 0x43, 0x22, 0x22, 0x00, 0x60, 0x1A, 0x4A, 0x0E, 0x60, 0x22, 
+	0x78, 0x2E, 0x60, 0x11, 0x43, 0x70, 0x79, 0x2D, 0x40, 0xE8, 0x35, 0x01, 0x60, 0x11, 0x1A, 0x09, 
+	0x68, 0x11, 0x68, 0x20, 0xD2, 0xFB, 0x42, 0x88, 0x21, 0x01, 0x68, 0x1A, 0x60, 0x1A, 0x43, 0x8A, 
+	0x46, 0xC0, 0xBD, 0x70, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xE0, 0x14, 0xE0, 0x00, 0xE0, 0x10, 
+	0x20, 0x00, 0x0A, 0xAA, 0xE0, 0x00, 0xE0, 0x18, 0x20, 0x00, 0x01, 0xFC, 0x23, 0x00, 0xB5, 0x00, 
+	0x42, 0x98, 0x4A, 0x06, 0x1C, 0xD3, 0xDB, 0x02, 0x43, 0x43, 0x7F, 0xDB, 0x7F, 0xD2, 0x32, 0x02, 
+	0xB2, 0x52, 0x30, 0x01, 0x18, 0x18, 0x40, 0x90, 0xBD, 0x00, 0x18, 0x40, 0x20, 0x00, 0x09, 0xAE, 
+	0xB0, 0x85, 0xB5, 0xF0, 0x1C, 0x0C, 0x1C, 0x05, 0x29, 0x00, 0x1C, 0x16, 0x4B, 0x2B, 0xD0, 0x05, 
+	0x7F, 0xDB, 0x33, 0x02, 0x2B, 0x00, 0xB2, 0x5B, 0x1C, 0x21, 0xD0, 0x4E, 0xF7, 0xFF, 0x1C, 0x28, 
+	0x49, 0x27, 0xFF, 0xDD, 0x7A, 0x4A, 0x4F, 0x27, 0x19, 0x13, 0x7A, 0x09, 0x91, 0x02, 0x18, 0x51, 
+	0x19, 0xCF, 0x01, 0x41, 0x97, 0x03, 0x22, 0x00, 0xE0, 0x13, 0x46, 0x84, 0x56, 0xC1, 0x48, 0x22, 
+	0xB2, 0xC0, 0x1C, 0x58, 0x90, 0x01, 0x0F, 0xCF, 0x98, 0x03, 0x18, 0x7F, 0x19, 0xC7, 0x10, 0x7F, 
+	0x97, 0x00, 0x37, 0x08, 0x79, 0x38, 0x46, 0x6F, 0x33, 0x02, 0x9F, 0x00, 0x27, 0x01, 0x70, 0xB8, 
+	0x43, 0x3A, 0x40, 0x8F, 0x42, 0x83, 0x98, 0x02, 0x4B, 0x15, 0xDB, 0xE8, 0x79, 0xDF, 0x46, 0x60, 
+	0x41, 0x61, 0x42, 0x61, 0x18, 0x79, 0x7C, 0x5B, 0x10, 0x49, 0x19, 0x1C, 0x34, 0x01, 0x39, 0x01, 
+	0x05, 0x24, 0x06, 0x89, 0x43, 0x22, 0x43, 0x0C, 0x4C, 0x10, 0x49, 0x0E, 0x18, 0x43, 0x01, 0x40, 
+	0x19, 0x01, 0x4F, 0x0F, 0x60, 0x4A, 0x68, 0x4C, 0xB2, 0xD2, 0x1C, 0xAA, 0x71, 0x02, 0x19, 0xC0, 
+	0xD0, 0x07, 0x2E, 0x00, 0x21, 0x01, 0x4A, 0x0B, 0x40, 0x91, 0x57, 0x52, 0x69, 0x99, 0x1C, 0x0A, 
+	0xE0, 0x01, 0x61, 0x9A, 0xA3, 0x58, 0xAE, 0xF1, 0x0F, 0x61, 0x9E, 0x69, 0x9A, 0xBD, 0xF0, 0xB0, 
+	0x05, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x0A, 0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x75, 
+	0x10, 0x40, 0x00, 0x10, 0x18, 0x40, 0x00, 0x10, 0x10, 0x00, 0x00, 0x74, 0xEA, 0x4B, 0x08, 0xB5, 
+	0x10, 0x68, 0x1B, 0x21, 0x00, 0xE0, 0x08, 0x3B, 0x01, 0x01, 0x58, 0x4C, 0x06, 0x19, 0x00, 0x22, 
+	0x09, 0x72, 0xA1, 0x18, 0x84, 0xD2, 0xFB, 0x3A, 0x01, 0x2B, 0x00, 0x3B, 0x01, 0xBD, 0x10, 0xDA, 
+	0xF4, 0x20, 0x00, 0x09, 0x18, 0x40, 0x00, 0x10, 0x00, 0xF7, 0xFF, 0xB5, 0x38, 0x21, 0x00, 0xFF, 
+	0xE7, 0x1C, 0x0A, 0x20, 0x01, 0xF7, 0xFF, 0x42, 0x40, 0x20, 0x01, 0xFF, 0x75, 0x21, 0x01, 0x42, 
+	0x40, 0xF7, 0xFF, 0x22, 0x00, 0x4D, 0x0A, 0xFF, 0x6F, 0xE0, 0x0B, 0x7B, 0xAC, 0x21, 0x00, 0x1C, 
+	0x20, 0xF7, 0xFF, 0x22, 0x01, 0x21, 0x01, 0xFF, 0x67, 0x1C, 0x0A, 0x1C, 0x20, 0xFF, 0x62, 0xF7, 
+	0xFF, 0xB2, 0xE4, 0x34, 0x01, 0x79, 0x2B, 0x7B, 0xAA, 0x42, 0x9C, 0x18, 0xD3, 0xBD, 0x38, 0xDB, 
+	0xEE, 0x20, 0x00, 0x03, 0x0A, 0xB0, 0x85, 0xB5, 0xF0, 0x1C, 0x0E, 0x1C, 0x05, 0x1C, 0x1F, 0x92, 
+	0x02, 0xD0, 0x05, 0x29, 0x00, 0x33, 0x02, 0x4B, 0x21, 0xB2, 0x5B, 0x7F, 0xDB, 0xD0, 0x3B, 0x2B, 
+	0x00, 0x1C, 0x28, 0x1C, 0x31, 0xFF, 0x34, 0xF7, 0xFF, 0xB2, 0xC0, 0x4A, 0x1D, 0x7A, 0x53, 0x90, 
+	0x01, 0x18, 0xF6, 0x7A, 0x12, 0x4B, 0x1B, 0x18, 0x9A, 0x7C, 0x1B, 0x1E, 0xB9, 0x41, 0x81, 0x1E, 
+	0x48, 0xB2, 0xF6, 0x42, 0x49, 0x46, 0x9C, 0x91, 0x03, 0x2F, 0x00, 0xE0, 0x24, 0x21, 0x26, 0xD1, 
+	0x07, 0x4B, 0x15, 0x43, 0x71, 0x5C, 0xCC, 0x19, 0x49, 0xB2, 0xE4, 0x44, 0x64, 0x2F, 0x01, 0xE0, 
+	0x08, 0x01, 0x73, 0xD1, 0x04, 0x19, 0x5B, 0x49, 0x11, 0xE0, 0x01, 0x5C, 0x5C, 0x40, 0x1C, 0x9B, 
+	0x03, 0x99, 0x02, 0x4B, 0x0F, 0x36, 0x02, 0x57, 0x9B, 0x18, 0xC0, 0x0F, 0xD8, 0xB2, 0xDB, 0x18, 
+	0x63, 0x9B, 0x01, 0x93, 0x00, 0x01, 0x59, 0x10, 0x40, 0x18, 0x08, 0x46, 0x6B, 0x49, 0x09, 0x78, 
+	0x1B, 0x54, 0x43, 0xB2, 0xF6, 0xDB, 0xD8, 0x42, 0x96, 0xBD, 0xF0, 0xB0, 0x05, 0x20, 0x00, 0x09, 
+	0xAE, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x12, 0x48, 0x00, 0x00, 0x75, 0x36, 0x20, 0x00, 0x0A, 
+	0xB3, 0x00, 0x00, 0x75, 0x10, 0x40, 0x00, 0x10, 0x00, 0x4D, 0x2C, 0xB5, 0x70, 0x7A, 0xA8, 0x4B, 
+	0x2C, 0x22, 0x03, 0x68, 0x1C, 0x40, 0x10, 0x49, 0x2B, 0x40, 0x21, 0x04, 0x00, 0x60, 0x19, 0x43, 
+	0x01, 0x24, 0x80, 0x68, 0x19, 0x68, 0xA0, 0x05, 0xE4, 0x7A, 0x69, 0x60, 0xA1, 0x40, 0x0A, 0x68, 
+	0x18, 0x4A, 0x25, 0x04, 0x91, 0x40, 0x02, 0x26, 0x07, 0x60, 0x1A, 0x43, 0x0A, 0x68, 0xA1, 0x68, 
+	0x1A, 0x68, 0x19, 0x60, 0xA2, 0x03, 0x52, 0x22, 0x80, 0x60, 0x1A, 0x43, 0x0A, 0x68, 0xA1, 0x68, 
+	0x1A, 0x7A, 0x29, 0x60, 0xA2, 0x4A, 0x1D, 0x68, 0x18, 0x05, 0x49, 0x40, 0x31, 0x43, 0x0A, 0x40, 
+	0x02, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0xA2, 0x68, 0xA1, 0x29, 0x0F, 0x7B, 0xA9, 0x7B, 0xEA, 0xD8, 
+	0x25, 0xD8, 0x22, 0x2A, 0x0F, 0x07, 0x09, 0x68, 0x18, 0x09, 0x00, 0x01, 0x00, 0x60, 0x19, 0x43, 
+	0x01, 0x40, 0x0A, 0x21, 0x0F, 0x06, 0x11, 0x68, 0x18, 0x40, 0x02, 0x4A, 0x11, 0x60, 0x1A, 0x43, 
+	0x0A, 0x68, 0xA2, 0x68, 0x1B, 0xF7, 0xFF, 0x60, 0xA3, 0x4A, 0x0E, 0xFC, 0x45, 0x43, 0x13, 0x6C, 
+	0x63, 0xF7, 0xFF, 0x64, 0x63, 0xF7, 0xFF, 0xFC, 0x58, 0x79, 0xEB, 0xFC, 0x83, 0x40, 0x1E, 0x4A, 
+	0x0A, 0x6C, 0x26, 0x02, 0x33, 0x43, 0x1E, 0x40, 0x16, 0xBD, 0x70, 0x64, 0x26, 0x20, 0x00, 0x12, 
+	0x48, 0x20, 0x00, 0x00, 0x14, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0x1F, 0xFF, 
+	0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0x21, 0x80, 0xB5, 
+	0x00, 0x79, 0x0B, 0x05, 0xC9, 0xB2, 0xD2, 0x1E, 0x5A, 0xDD, 0x09, 0x42, 0x98, 0x71, 0x0B, 0xE0, 
+	0x00, 0xB2, 0xDB, 0x33, 0x01, 0xDD, 0xFA, 0x42, 0x83, 0x71, 0x0A, 0xE0, 0x04, 0xB2, 0xD2, 0x3A, 
+	0x01, 0xDA, 0xFA, 0x42, 0x82, 0xB5, 0x38, 0xBD, 0x00, 0x78, 0xA0, 0x4C, 0x17, 0xFF, 0xE6, 0xF7, 
+	0xFF, 0x05, 0xDB, 0x23, 0x80, 0x68, 0x5A, 0x79, 0x21, 0x00, 0x52, 0x07, 0xC9, 0x43, 0x0A, 0x08, 
+	0x52, 0x79, 0x60, 0x60, 0x5A, 0x68, 0x5D, 0x22, 0x03, 0x40, 0x10, 0x49, 0x10, 0x40, 0x29, 0x03, 
+	0x80, 0x60, 0x59, 0x43, 0x01, 0x49, 0x0E, 0x79, 0xA0, 0x40, 0x10, 0x68, 0x5D, 0x40, 0x29, 0x03, 
+	0x00, 0x60, 0x59, 0x43, 0x01, 0x49, 0x0B, 0x79, 0xE0, 0x40, 0x10, 0x68, 0x5D, 0x02, 0x80, 0x40, 
+	0x29, 0x60, 0x59, 0x43, 0x01, 0x68, 0x58, 0x7A, 0x21, 0x02, 0x11, 0x40, 0x0A, 0x40, 0x02, 0x4A, 
+	0x06, 0x60, 0x5A, 0x43, 0x0A, 0x46, 0xC0, 0xBD, 0x38, 0x20, 0x00, 0x0A, 0xAA, 0xFF, 0xFF, 0x3F, 
+	0xFF, 0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0x23, 0x80, 0xB5, 
+	0xF8, 0x68, 0x1A, 0x05, 0xDB, 0x21, 0x00, 0x4A, 0x7A, 0x60, 0x19, 0x20, 0x08, 0x68, 0x14, 0x60, 
+	0x10, 0x60, 0x9C, 0x68, 0x9D, 0x60, 0x21, 0x4C, 0x77, 0x68, 0xDD, 0x68, 0x24, 0x25, 0xFE, 0x60, 
+	0xDC, 0x01, 0xED, 0x4C, 0x75, 0x68, 0x24, 0x60, 0x25, 0x61, 0x1C, 0x69, 0x1D, 0x61, 0x59, 0x69, 
+	0x5C, 0x61, 0x99, 0x69, 0x9C, 0x61, 0xD9, 0x69, 0xDC, 0x24, 0x80, 0x6C, 0x1C, 0x64, 0x1C, 0x01, 
+	0xE4, 0x64, 0x59, 0x6C, 0x5C, 0x4C, 0x6D, 0x6C, 0x9C, 0x60, 0x21, 0x64, 0x99, 0x05, 0xE4, 0x24, 
+	0xA0, 0x60, 0xA1, 0x68, 0xA5, 0x49, 0x6A, 0x6C, 0x1C, 0x64, 0x19, 0x40, 0x21, 0x21, 0x80, 0x68, 
+	0x1C, 0x43, 0x21, 0x05, 0x49, 0x49, 0x67, 0x60, 0x19, 0x7F, 0xC9, 0x31, 0x01, 0xD0, 0x03, 0x29, 
+	0x00, 0x43, 0x08, 0x68, 0x11, 0xE0, 0x02, 0x60, 0x10, 0x43, 0x81, 0x68, 0x11, 0x68, 0x11, 0x60, 
+	0x11, 0x60, 0x99, 0x68, 0x98, 0x26, 0x04, 0x68, 0x13, 0x60, 0x13, 0x43, 0x33, 0x25, 0x80, 0x68, 
+	0x13, 0x68, 0xA9, 0x05, 0xED, 0x68, 0x13, 0x60, 0xAB, 0x43, 0x3B, 0x27, 0x02, 0x68, 0x13, 0x60, 
+	0x13, 0x60, 0xAB, 0x68, 0xA9, 0x20, 0x01, 0x68, 0x13, 0x60, 0x13, 0x43, 0x83, 0x68, 0xAA, 0x68, 
+	0x13, 0xF7, 0xFF, 0x60, 0xAB, 0x4B, 0x54, 0xFE, 0xE9, 0x56, 0x9A, 0x22, 0x1C, 0x4B, 0x53, 0x69, 
+	0xA9, 0x40, 0xF2, 0x05, 0x12, 0x43, 0x13, 0x40, 0x0B, 0xF7, 0xFF, 0x61, 0xAB, 0x4A, 0x50, 0xFE, 
+	0x5D, 0x21, 0x01, 0x4B, 0x50, 0x4B, 0x50, 0x60, 0x1A, 0x68, 0x1A, 0x24, 0x08, 0x43, 0x32, 0x20, 
+	0x10, 0x68, 0x1A, 0x60, 0x1A, 0x60, 0x1A, 0x43, 0xBA, 0x22, 0xC0, 0x4B, 0x4C, 0x50, 0x99, 0x00, 
+	0x52, 0x50, 0x9F, 0x21, 0x20, 0x50, 0x9C, 0x50, 0x9E, 0x50, 0x99, 0x50, 0x98, 0x50, 0x99, 0x21, 
+	0x40, 0x40, 0xBA, 0x22, 0xC0, 0x24, 0xFF, 0x58, 0x98, 0x24, 0xC0, 0x43, 0xA0, 0x50, 0x98, 0x43, 
+	0x20, 0x48, 0x43, 0x58, 0x9C, 0x50, 0x9C, 0x40, 0x04, 0x48, 0x42, 0x58, 0x9C, 0x24, 0x80, 0x40, 
+	0x20, 0x43, 0x04, 0x04, 0x24, 0x58, 0x9C, 0x50, 0x9C, 0x0A, 0x24, 0x02, 0x24, 0x50, 0x9C, 0x43, 
+	0x2C, 0x40, 0xBA, 0x22, 0xC1, 0x1C, 0x04, 0x58, 0x98, 0x0F, 0xFC, 0xAE, 0xF1, 0x10, 0x43, 0x84, 
+	0x20, 0xFF, 0x50, 0x9C, 0x43, 0x0C, 0x48, 0x37, 0x58, 0x9C, 0x24, 0x80, 0x40, 0x20, 0x43, 0x20, 
+	0x02, 0x24, 0x58, 0x98, 0x50, 0x98, 0x40, 0x20, 0x4C, 0x34, 0x4A, 0x34, 0x50, 0x98, 0x43, 0x30, 
+	0x69, 0x10, 0xB6, 0x62, 0x61, 0x10, 0x20, 0x01, 0x22, 0x08, 0x60, 0x18, 0x60, 0x1E, 0x60, 0x1A, 
+	0x60, 0x1F, 0x20, 0x20, 0x4B, 0x2F, 0x67, 0xDC, 0x24, 0x10, 0x67, 0xD9, 0x67, 0xD8, 0xFC, 0x42, 
+	0xF7, 0xFF, 0x7D, 0xE0, 0x4C, 0x21, 0xF7, 0xFF, 0x7E, 0x21, 0x7C, 0xE3, 0xFA, 0xF7, 0xD0, 0x26, 
+	0x2B, 0x00, 0x21, 0x01, 0x4B, 0x1A, 0x4A, 0x27, 0x68, 0x18, 0x0E, 0x40, 0x00, 0x40, 0x68, 0x19, 
+	0x43, 0x08, 0x40, 0x11, 0x06, 0x00, 0x60, 0x19, 0x43, 0x01, 0x69, 0x28, 0x68, 0x19, 0x68, 0x19, 
+	0x61, 0x29, 0x0E, 0x49, 0x00, 0x49, 0x06, 0x39, 0x43, 0x0F, 0x40, 0x17, 0x68, 0x1F, 0x60, 0x1F, 
+	0x43, 0x0F, 0x69, 0x28, 0x68, 0x19, 0x68, 0x19, 0x61, 0x29, 0x0E, 0x49, 0x00, 0x49, 0x68, 0x19, 
+	0x43, 0x0E, 0x40, 0x0A, 0x06, 0x36, 0x60, 0x1A, 0x43, 0x32, 0x69, 0x2A, 0x68, 0x1B, 0xF7, 0xFF, 
+	0x61, 0x2B, 0xF7, 0xFF, 0xFE, 0xD4, 0xF7, 0xFF, 0xF8, 0xBD, 0xF7, 0xFF, 0xF9, 0x0B, 0xF7, 0xFF, 
+	0xF9, 0x79, 0xBD, 0xF8, 0xFB, 0x61, 0x20, 0x00, 0x00, 0x14, 0x20, 0x00, 0x00, 0x10, 0x20, 0x00, 
+	0x00, 0x08, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0x7F, 0xFF, 0xFF, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 
+	0x12, 0x48, 0xF0, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0xE0, 0x14, 0xE0, 0x00, 
+	0xE0, 0x10, 0xE0, 0x00, 0xE1, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xE0, 0x00, 
+	0xED, 0x00, 0xE0, 0x00, 0xE1, 0x04, 0x80, 0xFF, 0xFF, 0xFF, 0x4A, 0x0C, 0xB5, 0x08, 0x49, 0x0D, 
+	0x4B, 0x0C, 0xCA, 0x01, 0xE0, 0x01, 0x42, 0x8B, 0xC3, 0x01, 0x4B, 0x0B, 0xD3, 0xFB, 0x22, 0x00, 
+	0x49, 0x0B, 0xC3, 0x04, 0xE0, 0x00, 0xD3, 0xFC, 0x42, 0x8B, 0xF8, 0x22, 0xF7, 0xFF, 0x22, 0x00, 
+	0x4B, 0x08, 0xC3, 0x04, 0xE0, 0x00, 0xD3, 0xFC, 0x42, 0x83, 0x46, 0xC0, 0xBD, 0x08, 0x00, 0x00, 
+	0x5D, 0x84, 0x20, 0x00, 0x00, 0x3C, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 0x00, 0x5C, 0x20, 0x00, 
+	0x16, 0xEC, 0x20, 0x00, 0x1E, 0x0C, 0x4B, 0x13, 0xB5, 0x00, 0x2B, 0x01, 0x68, 0x1B, 0x2B, 0x08, 
+	0xD0, 0x02, 0xE0, 0x0F, 0xD1, 0x1E, 0x4A, 0x11, 0x4B, 0x10, 0x4A, 0x11, 0x60, 0x1A, 0x4A, 0x11, 
+	0x60, 0x5A, 0x60, 0x1A, 0x4B, 0x11, 0x4A, 0x12, 0x4B, 0x11, 0x4A, 0x12, 0x60, 0x1A, 0x4A, 0x12, 
+	0x60, 0x5A, 0xE0, 0x0D, 0x60, 0x9A, 0x4A, 0x08, 0x4B, 0x09, 0x60, 0x13, 0x49, 0x09, 0x4A, 0x0A, 
+	0x60, 0x51, 0x4A, 0x0A, 0x60, 0x13, 0x60, 0x53, 0x60, 0x13, 0x4B, 0x0C, 0x60, 0x93, 0x70, 0x1A, 
+	0x22, 0x01, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x16, 0x50, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 
+	0x03, 0xF9, 0x00, 0x00, 0x42, 0xD9, 0x00, 0x00, 0x43, 0x11, 0x20, 0x00, 0x02, 0x00, 0x20, 0x00, 
+	0x00, 0x18, 0x00, 0x00, 0x44, 0x1D, 0x00, 0x00, 0x46, 0x05, 0x00, 0x00, 0x47, 0x69, 0x20, 0x00, 
+	0x01, 0xE4, 0x23, 0x00, 0xB5, 0x00, 0x33, 0x01, 0x5C, 0xC2, 0xD1, 0xFB, 0x2A, 0x00, 0xB2, 0xD8, 
+	0x3B, 0x01, 0x46, 0xC0, 0xBD, 0x00, 0x1C, 0x1C, 0xB5, 0xF7, 0x78, 0x1F, 0xAB, 0x08, 0x1C, 0x0E, 
+	0x4B, 0x26, 0x21, 0x01, 0x68, 0x1B, 0x42, 0x0B, 0x40, 0x81, 0x2F, 0x00, 0xD0, 0x44, 0x2C, 0x04, 
+	0xD0, 0x07, 0x4B, 0x22, 0xD8, 0x32, 0x33, 0x05, 0x5D, 0x19, 0x5D, 0x1F, 0x91, 0x00, 0x2C, 0x04, 
+	0xE0, 0x08, 0x4B, 0x1E, 0xD8, 0x2E, 0x31, 0x0A, 0x1C, 0x19, 0x33, 0x0F, 0x5D, 0x09, 0x91, 0x00, 
+	0x5D, 0x1F, 0xD0, 0x28, 0x2C, 0x03, 0xD0, 0x28, 0x2C, 0x00, 0x20, 0x3A, 0xE0, 0x28, 0xF0, 0x01, 
+	0x1C, 0x21, 0x42, 0x86, 0xFC, 0x75, 0x46, 0x6B, 0xDD, 0x05, 0xB2, 0xC0, 0x78, 0x1B, 0x70, 0x68, 
+	0x70, 0x2B, 0x70, 0x2F, 0xE0, 0x02, 0x70, 0x6E, 0x1C, 0x30, 0x43, 0x60, 0x1A, 0x36, 0x23, 0x00, 
+	0x99, 0x01, 0x60, 0xAB, 0x60, 0x69, 0xB2, 0xF6, 0x18, 0x09, 0xF7, 0xFF, 0x91, 0x01, 0xF7, 0xFF, 
+	0xFA, 0xDF, 0x28, 0x00, 0xFB, 0x33, 0xE0, 0x0B, 0xD1, 0xFB, 0x27, 0x00, 0x23, 0x0F, 0xE0, 0x05, 
+	0x93, 0x00, 0x91, 0x00, 0x21, 0x0F, 0x24, 0x02, 0xE0, 0x02, 0x24, 0x01, 0xE0, 0x00, 0x92, 0x01, 
+	0x4D, 0x04, 0xD1, 0xD2, 0x2E, 0x00, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x00, 0x58, 0x00, 0x00, 
+	0x5C, 0xF4, 0x20, 0x00, 0x00, 0x70, 0x4B, 0x11, 0xB5, 0x38, 0x68, 0x1B, 0x22, 0x01, 0x1C, 0x0D, 
+	0x40, 0x82, 0xD0, 0x19, 0x42, 0x13, 0x23, 0x0B, 0x4C, 0x0E, 0x1C, 0x08, 0x70, 0x23, 0xFF, 0x90, 
+	0xF7, 0xFF, 0x78, 0x63, 0x70, 0x60, 0x33, 0x02, 0x22, 0x07, 0x42, 0x93, 0x40, 0x13, 0x78, 0x63, 
+	0xD1, 0x03, 0xB2, 0xDB, 0x3B, 0x01, 0x23, 0x00, 0x70, 0x63, 0x60, 0xA3, 0x60, 0x65, 0xFA, 0xA6, 
+	0xF7, 0xFF, 0xFA, 0xFA, 0xF7, 0xFF, 0xD1, 0xFB, 0x28, 0x00, 0x46, 0xC0, 0xBD, 0x38, 0x20, 0x00, 
+	0x00, 0x58, 0x20, 0x00, 0x00, 0x70, 0x4C, 0x0B, 0xB5, 0x1F, 0x73, 0xD8, 0x46, 0x6B, 0x2B, 0x00, 
+	0x78, 0x23, 0x20, 0x00, 0xD0, 0x03, 0xF7, 0xFF, 0x49, 0x08, 0x78, 0x23, 0xFF, 0xCD, 0xD0, 0x07, 
+	0x2B, 0x00, 0x21, 0x01, 0x46, 0x6A, 0x32, 0x0F, 0x20, 0x00, 0x91, 0x00, 0x23, 0x04, 0xFF, 0x6A, 
+	0xF7, 0xFF, 0x46, 0xC0, 0xBD, 0x1F, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x5D, 0x08, 0xF7, 0xFF, 
+	0xB5, 0xF8, 0x28, 0x00, 0xFA, 0xD3, 0x4B, 0x39, 0xD1, 0x70, 0x2A, 0x00, 0x68, 0x1A, 0x4B, 0x38, 
+	0xDC, 0x03, 0x2B, 0x00, 0x68, 0x1B, 0x49, 0x37, 0xDD, 0x3E, 0x70, 0x0B, 0x23, 0x03, 0x33, 0x04, 
+	0x4B, 0x36, 0x1C, 0x1C, 0x7F, 0xDB, 0xDA, 0x00, 0x42, 0x9A, 0x70, 0x4B, 0xB2, 0xD3, 0x46, 0x8C, 
+	0x21, 0x0A, 0x23, 0x00, 0x4A, 0x32, 0xE0, 0x1F, 0x49, 0x2D, 0xE0, 0x03, 0x33, 0x01, 0x43, 0x5E, 
+	0x46, 0x66, 0x18, 0x76, 0x20, 0x00, 0x18, 0x37, 0x30, 0x0A, 0x5F, 0x7F, 0x25, 0x32, 0xD0, 0xF3, 
+	0x2F, 0x00, 0xDA, 0x13, 0x42, 0xA3, 0x18, 0x08, 0x00, 0x58, 0x00, 0xDE, 0x88, 0x80, 0xB2, 0x00, 
+	0x70, 0x10, 0x19, 0x80, 0x12, 0x00, 0x1C, 0x18, 0x70, 0x50, 0x00, 0x40, 0x30, 0x10, 0x33, 0x01, 
+	0x5A, 0x08, 0x0A, 0x00, 0x70, 0x90, 0x32, 0x04, 0x70, 0xD0, 0xDB, 0xDF, 0x42, 0xA3, 0x4A, 0x1F, 
+	0x4B, 0x1D, 0x22, 0x00, 0x60, 0x5A, 0xF7, 0xFF, 0x60, 0x9A, 0xF7, 0xFF, 0xFA, 0x39, 0x28, 0x00, 
+	0xFA, 0x8D, 0xE0, 0x29, 0xD1, 0xFB, 0x68, 0x53, 0x4A, 0x1A, 0xD0, 0x25, 0x33, 0x01, 0x21, 0x13, 
+	0x4B, 0x15, 0x68, 0x11, 0x70, 0x19, 0x70, 0x59, 0x46, 0x94, 0x49, 0x14, 0x4B, 0x16, 0x1C, 0x03, 
+	0x78, 0x1D, 0x1C, 0x23, 0xE0, 0x0D, 0x00, 0x5E, 0xE0, 0x01, 0x30, 0x02, 0x44, 0x66, 0x22, 0x06, 
+	0x18, 0x34, 0x1C, 0x5C, 0x5E, 0xA7, 0xD0, 0xF4, 0x2F, 0x00, 0x1C, 0x23, 0x70, 0x0B, 0x20, 0x00, 
+	0x31, 0x01, 0xDB, 0xF0, 0x42, 0xAB, 0x4A, 0x09, 0x4B, 0x07, 0x60, 0x5A, 0x60, 0x98, 0xFA, 0x0E, 
+	0xF7, 0xFF, 0xFA, 0x62, 0xF7, 0xFF, 0xD1, 0xFB, 0x28, 0x00, 0x46, 0xC0, 0xBD, 0xF8, 0x94, 0x5A, 
+	0xAE, 0xF1, 0x11, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x00, 0x70, 0x20, 
+	0x00, 0x09, 0xAE, 0x20, 0x00, 0x09, 0xF0, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x4B, 
+	0x64, 0xB5, 0x08, 0x2B, 0x1D, 0x88, 0x1B, 0xD8, 0x1A, 0xD0, 0x47, 0xD1, 0x00, 0x2B, 0x05, 0xD8, 
+	0x0D, 0xE0, 0x96, 0xD0, 0x63, 0x2B, 0x02, 0x2B, 0x01, 0xD8, 0x03, 0xE0, 0xB7, 0xD0, 0x00, 0x2B, 
+	0x03, 0xE0, 0x57, 0xE0, 0x87, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0x04, 0xE0, 0x8F, 0xE0, 0xB0, 0xD0, 
+	0x65, 0x2B, 0x07, 0x2B, 0x1B, 0xD3, 0x5C, 0x2B, 0x1C, 0xD0, 0x1C, 0xE0, 0xA7, 0xD0, 0x00, 0x2B, 
+	0x22, 0xE0, 0x22, 0xD8, 0x08, 0xD0, 0x40, 0xD0, 0x5D, 0x2B, 0x1F, 0x2B, 0x20, 0xD3, 0x2A, 0x2B, 
+	0x21, 0xD0, 0x5E, 0xE0, 0x9B, 0xD0, 0x00, 0x2B, 0x41, 0xE0, 0x5E, 0xD8, 0x03, 0xD0, 0x64, 0xD0, 
+	0x00, 0x2B, 0x40, 0xE0, 0x5B, 0xE0, 0x94, 0xD0, 0x61, 0x2B, 0x42, 0xD0, 0x00, 0x2B, 0x60, 0xE0, 
+	0x72, 0xE0, 0x8E, 0x4B, 0x49, 0x4A, 0x48, 0x20, 0x01, 0x78, 0x12, 0x40, 0x90, 0x68, 0x19, 0x43, 
+	0x0A, 0x1C, 0x02, 0xE0, 0x83, 0x60, 0x1A, 0x4B, 0x44, 0x49, 0x43, 0x68, 0x1A, 0x78, 0x09, 0x40, 
+	0x88, 0x20, 0x01, 0x60, 0x1A, 0x43, 0x82, 0x4B, 0x3F, 0xE0, 0x7A, 0x4B, 0x40, 0x78, 0x1A, 0xE0, 
+	0x75, 0x70, 0x1A, 0x21, 0x0D, 0x4B, 0x3C, 0x4B, 0x3E, 0x78, 0x1A, 0x4A, 0x3C, 0x70, 0x1A, 0x78, 
+	0x1A, 0x70, 0x11, 0x2A, 0x00, 0x4B, 0x3C, 0x22, 0x00, 0xD0, 0x02, 0xE0, 0x67, 0x70, 0x5A, 0x78, 
+	0x52, 0x4A, 0x3A, 0xE0, 0x63, 0x70, 0x5A, 0x78, 0x1A, 0x4B, 0x33, 0x70, 0x1A, 0x4B, 0x38, 0x4B, 
+	0x31, 0xE0, 0x5E, 0x4B, 0x37, 0x78, 0x1A, 0xF7, 0xFD, 0x60, 0x1A, 0xE0, 0x57, 0xFA, 0x4F, 0x78, 
+	0x1A, 0x4B, 0x2D, 0x70, 0x9A, 0x4B, 0x34, 0xF7, 0xFF, 0x78, 0x98, 0xE0, 0x4F, 0xFC, 0x8D, 0x78, 
+	0x1A, 0x4B, 0x29, 0x70, 0x9A, 0x4B, 0x30, 0x22, 0x0F, 0x4B, 0x29, 0xE0, 0x47, 0x70, 0x1A, 0x22, 
+	0x01, 0x4B, 0x2E, 0xE0, 0x43, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x2D, 0xE0, 0x3F, 0x70, 0x1A, 0xF7, 
+	0xFC, 0x20, 0x0C, 0xE0, 0x3B, 0xFF, 0xCB, 0xF7, 0xFC, 0x20, 0x0D, 0xE0, 0x37, 0xFF, 0xC7, 0x22, 
+	0x01, 0x4B, 0x28, 0xE0, 0x33, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x27, 0xE0, 0x2F, 0x70, 0x1A, 0x22, 
+	0x01, 0x4B, 0x26, 0xE0, 0x2B, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x25, 0xE0, 0x27, 0x70, 0x1A, 0x22, 
+	0x01, 0x4B, 0x24, 0x4B, 0x14, 0x70, 0x1A, 0x4B, 0x23, 0x78, 0x1A, 0xE0, 0x1F, 0x70, 0x1A, 0x78, 
+	0x1A, 0x4B, 0x11, 0x70, 0x9A, 0x4B, 0x1E, 0x4B, 0x0F, 0xE0, 0x1A, 0x4B, 0x1F, 0x78, 0x1A, 0x78, 
+	0x1A, 0x70, 0x1A, 0x3A, 0x01, 0x4B, 0x10, 0xD8, 0x03, 0x2A, 0x01, 0x22, 0x0F, 0x33, 0x40, 0xE0, 
+	0x0D, 0x70, 0x1A, 0x33, 0x40, 0x4A, 0x1A, 0x2A, 0x00, 0x78, 0x12, 0x4A, 0x19, 0xD0, 0x04, 0x78, 
+	0x12, 0x32, 0x40, 0xE0, 0x03, 0x70, 0x1A, 0x32, 0x40, 0x4A, 0x08, 0x70, 0x1A, 0x78, 0x12, 0x46, 
+	0xC0, 0xBD, 0x08, 0x20, 0x00, 0x00, 0x28, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x58, 0x20, 
+	0x00, 0x03, 0x1D, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x12, 0x48, 0x00, 0x00, 0x74, 0x4A, 0x20, 
+	0x00, 0x01, 0xDE, 0x20, 0x00, 0x16, 0x50, 0x20, 0x00, 0x0A, 0xAA, 0x20, 0x00, 0x01, 0xE4, 0x20, 
+	0x00, 0x01, 0xDC, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x01, 0xE7, 0x20, 0x00, 0x01, 0xE5, 0x20, 
+	0x00, 0x01, 0x8B, 0x20, 0x00, 0x01, 0xE6, 0x20, 0x00, 0x01, 0x92, 0x20, 0x00, 0x01, 0xE0, 0x20, 
+	0x00, 0x01, 0xDD, 0x00, 0x00, 0x74, 0x9A, 0x4B, 0x4A, 0xB5, 0x30, 0x2B, 0x34, 0x88, 0x1B, 0xD8, 
+	0x0C, 0xD0, 0x47, 0xD0, 0x4F, 0x2B, 0x2E, 0x2B, 0x00, 0xD8, 0x04, 0x2B, 0x1D, 0xD0, 0x14, 0xE0, 
+	0x16, 0xD1, 0x78, 0xD0, 0x51, 0x2B, 0x2F, 0xD1, 0x73, 0x2B, 0x30, 0x2B, 0x38, 0xE0, 0x56, 0xD8, 
+	0x04, 0xD0, 0x66, 0xD0, 0x39, 0x2B, 0x35, 0xD1, 0x6B, 0x2B, 0x37, 0x2B, 0x39, 0xE0, 0x5B, 0x2B, 
+	0x86, 0xD0, 0x63, 0xE0, 0x09, 0xD1, 0x66, 0x7B, 0x5A, 0x4B, 0x3B, 0x70, 0x1A, 0x4B, 0x3B, 0x4B, 
+	0x3B, 0xE0, 0x6F, 0x4B, 0x39, 0x78, 0x1A, 0xE0, 0x6A, 0x70, 0x1A, 0x4A, 0x3A, 0x49, 0x39, 0x2B, 
+	0x00, 0x78, 0x0B, 0x78, 0x10, 0xD1, 0x0F, 0x70, 0x08, 0x49, 0x34, 0x49, 0x37, 0x78, 0x50, 0x68, 
+	0x52, 0x70, 0x08, 0x4C, 0x36, 0x18, 0xD1, 0x19, 0x19, 0x78, 0x08, 0x70, 0x08, 0x33, 0x01, 0xD1, 
+	0xF7, 0x2B, 0x06, 0x68, 0x52, 0xE0, 0x55, 0x78, 0x08, 0x23, 0x00, 0x18, 0xC0, 0x4D, 0x2B, 0x18, 
+	0x10, 0x38, 0x02, 0x19, 0x58, 0x78, 0x04, 0x70, 0x04, 0x33, 0x01, 0xD1, 0xF4, 0x2B, 0x08, 0x4B, 
+	0x2C, 0xE0, 0x47, 0x4B, 0x25, 0x68, 0x1A, 0xE0, 0x42, 0x60, 0x1A, 0x05, 0xDB, 0x23, 0x80, 0x4B, 
+	0x22, 0x79, 0x1A, 0xE0, 0x3C, 0x70, 0x1A, 0x4A, 0x27, 0x4B, 0x22, 0x49, 0x1F, 0x78, 0x1B, 0x68, 
+	0x1A, 0x18, 0xD3, 0x60, 0x0A, 0x68, 0x5B, 0xE0, 0x32, 0x60, 0x4B, 0x1C, 0x1A, 0x4B, 0x1A, 0x78, 
+	0x11, 0x32, 0x2C, 0x29, 0x00, 0x4A, 0x19, 0xE0, 0x09, 0xD1, 0x07, 0x1C, 0x1A, 0x4B, 0x16, 0x78, 
+	0x11, 0x32, 0x2C, 0x29, 0x00, 0x4A, 0x15, 0x8C, 0xDB, 0xD1, 0x02, 0xE0, 0x20, 0x80, 0x13, 0x80, 
+	0x13, 0x8D, 0x1B, 0x4B, 0x19, 0xE0, 0x1D, 0x4B, 0x10, 0x78, 0x1A, 0xE0, 0x18, 0x70, 0x1A, 0x78, 
+	0x1A, 0x4B, 0x17, 0x70, 0x1A, 0x4B, 0x0D, 0x4B, 0x16, 0xE0, 0x13, 0x4B, 0x0B, 0x78, 0x1A, 0xE0, 
+	0x0E, 0x70, 0x1A, 0xB2, 0x9A, 0x3B, 0x90, 0xD8, 0x0A, 0x2A, 0x13, 0x01, 0x5B, 0x4A, 0x09, 0x49, 
+	0x06, 0x78, 0x12, 0x4A, 0x10, 0x18, 0x9B, 0x68, 0x1A, 0x18, 0x9B, 0x60, 0x0A, 0x68, 0x5B, 0xBD, 
+	0x30, 0x60, 0x4B, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x09, 0xAE, 0x50, 0x00, 0x00, 0x0C, 0x20, 
+	0x00, 0x03, 0x1D, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x70, 0x50, 0x00, 0x00, 0x0D, 0x50, 
+	0x00, 0x00, 0x0E, 0x20, 0x00, 0x09, 0x1C, 0x20, 0x00, 0x09, 0xB1, 0x00, 0x00, 0x63, 0xFF, 0x00, 
+	0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0x20, 0x00, 0x0A, 0xB3, 0x4B, 0x08, 0xB5, 0x08, 0x2B, 
+	0x86, 0x88, 0x1B, 0x4B, 0x07, 0xD1, 0x0B, 0x2A, 0x01, 0x68, 0x9A, 0x68, 0x9A, 0xDC, 0x02, 0x60, 
+	0x9A, 0x32, 0x01, 0x2B, 0x02, 0x68, 0x9B, 0xF7, 0xFF, 0xD1, 0x01, 0xBD, 0x08, 0xF8, 0x6D, 0x20, 
+	0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0x70, 0x4C, 0x31, 0xB5, 0x7F, 0x78, 0x23, 0x90, 0x03, 0x1C, 
+	0x16, 0x1C, 0x0D, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x2E, 0x20, 0x01, 0xFD, 0x6E, 0xF7, 0xFF, 0x2B, 
+	0x00, 0x78, 0x23, 0x21, 0x01, 0xD0, 0x06, 0xAA, 0x03, 0x1C, 0x08, 0x91, 0x00, 0x23, 0x04, 0xFD, 
+	0x0C, 0xF7, 0xFF, 0x99, 0x03, 0x4B, 0x28, 0x4A, 0x28, 0x78, 0x1B, 0xD1, 0x15, 0x2B, 0x00, 0x33, 
+	0x4A, 0x1C, 0x13, 0x5E, 0x1B, 0x20, 0x00, 0x42, 0x9E, 0x1B, 0x8E, 0x1C, 0x13, 0xDC, 0x05, 0x20, 
+	0x00, 0x33, 0x4C, 0x42, 0x9E, 0x5E, 0x1B, 0x48, 0x21, 0xDA, 0x08, 0x70, 0x03, 0x23, 0x01, 0x70, 
+	0x03, 0x48, 0x20, 0x70, 0x03, 0x48, 0x20, 0x70, 0x03, 0x48, 0x20, 0x2B, 0x00, 0x78, 0x53, 0x4B, 
+	0x1F, 0xD0, 0x04, 0x30, 0x2C, 0xAE, 0xF1, 0x12, 0x43, 0x59, 0x5D, 0x5B, 0x91, 0x03, 0x11, 0x89, 
+	0x00, 0x6A, 0x4B, 0x1D, 0x4B, 0x1D, 0x5A, 0xD0, 0x5E, 0xD4, 0x99, 0x03, 0x4A, 0x14, 0x08, 0xC0, 
+	0x1B, 0x04, 0xB2, 0x89, 0x7C, 0x56, 0x1A, 0x64, 0x4B, 0x19, 0xB2, 0x24, 0xDC, 0x02, 0x42, 0xB4, 
+	0x42, 0xB4, 0x42, 0x76, 0x24, 0x00, 0xDA, 0x02, 0xE0, 0x05, 0x55, 0x5C, 0x7C, 0x96, 0x5D, 0x5C, 
+	0xD0, 0x01, 0x42, 0xA6, 0x55, 0x5C, 0x34, 0x01, 0xB2, 0x9B, 0x1A, 0x43, 0xB2, 0x19, 0x7E, 0x92, 
+	0xDB, 0x02, 0x42, 0x91, 0x21, 0x01, 0x4A, 0x09, 0x4A, 0x0C, 0x70, 0x11, 0x52, 0xAB, 0x00, 0x6D, 
+	0x46, 0xC0, 0xBD, 0x7F, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x5D, 0x0C, 0x20, 0x00, 0x01, 0xE4, 
+	0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x16, 0x48, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x16, 0x30, 
+	0x20, 0x00, 0x01, 0xC4, 0x00, 0x00, 0x7B, 0x92, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 0x12, 0x3C, 
+	0x20, 0x00, 0x0A, 0xA4, 0x4B, 0x48, 0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0x89, 0xD0, 0x03, 0x2B, 0x00, 
+	0x49, 0x46, 0x20, 0x00, 0xFC, 0xF4, 0xF7, 0xFF, 0x23, 0x00, 0x4A, 0x45, 0x4A, 0x45, 0x70, 0x13, 
+	0x38, 0x01, 0x20, 0x0C, 0x00, 0x81, 0xB2, 0xC0, 0x28, 0x00, 0x50, 0x8B, 0x4B, 0x42, 0xD1, 0xF9, 
+	0x70, 0x18, 0x4A, 0x42, 0x70, 0x13, 0x23, 0x01, 0x70, 0x13, 0x4A, 0x41, 0x7E, 0x19, 0x4B, 0x41, 
+	0x7D, 0xDA, 0x91, 0x04, 0x7D, 0x1B, 0x92, 0x05, 0x1C, 0x0B, 0x93, 0x06, 0x3B, 0x01, 0xE0, 0x2D, 
+	0x1C, 0x5D, 0xB2, 0xDB, 0x01, 0xEA, 0x4C, 0x3C, 0x88, 0x16, 0x19, 0x12, 0x00, 0x5A, 0x49, 0x3B, 
+	0x52, 0x56, 0x01, 0x5C, 0x9A, 0x05, 0x01, 0xAD, 0x46, 0x9C, 0x94, 0x07, 0x3A, 0x01, 0xE0, 0x1A, 
+	0x1C, 0x93, 0xB2, 0xD2, 0x4C, 0x36, 0x18, 0xEB, 0x5B, 0x19, 0x00, 0x5B, 0x2B, 0x00, 0x9B, 0x06, 
+	0x1C, 0xD3, 0xD0, 0x05, 0x00, 0x5B, 0x18, 0xEB, 0x18, 0xC9, 0x5B, 0x1B, 0x9C, 0x07, 0x10, 0x49, 
+	0x00, 0x7B, 0x18, 0xA7, 0x4B, 0x2F, 0x1C, 0x1C, 0x4C, 0x2F, 0x52, 0xE1, 0x1B, 0x89, 0x23, 0x01, 
+	0x18, 0x40, 0x55, 0x3B, 0xD1, 0xE2, 0x2A, 0x00, 0x2B, 0x00, 0x46, 0x63, 0x4B, 0x25, 0xD1, 0xCF, 
+	0x7D, 0xD9, 0x9C, 0x04, 0xF0, 0x01, 0x43, 0x61, 0x4B, 0x28, 0xF8, 0xE7, 0x8C, 0x58, 0x1C, 0x05, 
+	0x28, 0x00, 0x4C, 0x27, 0x23, 0x40, 0xD1, 0x02, 0xE0, 0x07, 0x60, 0x23, 0x1C, 0x29, 0x01, 0x80, 
+	0xF8, 0xDA, 0xF0, 0x01, 0xDD, 0x00, 0x28, 0x6E, 0x60, 0x20, 0x20, 0x6E, 0x78, 0x23, 0x4C, 0x12, 
+	0xD0, 0x03, 0x2B, 0x00, 0x49, 0x1F, 0x20, 0x00, 0xFC, 0x8A, 0xF7, 0xFF, 0x4A, 0x1E, 0x4B, 0x1B, 
+	0x80, 0x55, 0x8C, 0x5B, 0x78, 0x23, 0x80, 0x13, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 
+	0x20, 0x00, 0x93, 0x00, 0xF7, 0xFF, 0x1C, 0x0B, 0x4B, 0x18, 0xFC, 0x23, 0x78, 0x1B, 0x48, 0x18, 
+	0x49, 0x18, 0x22, 0x00, 0x3B, 0x01, 0xE0, 0x04, 0x00, 0x5C, 0xB2, 0xDB, 0x52, 0x62, 0x54, 0xC2, 
+	0xD1, 0xF8, 0x2B, 0x00, 0xBD, 0xF0, 0xB0, 0x09, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x5D, 0x12, 
+	0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x16, 0xBC, 0x20, 0x00, 0x15, 0xF4, 0x20, 0x00, 0x09, 0x20, 
+	0x20, 0x00, 0x16, 0x3C, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x40, 0x02, 0x20, 0x00, 0x16, 0x94, 
+	0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x12, 0x48, 
+	0x20, 0x00, 0x09, 0x78, 0x00, 0x00, 0x5D, 0x1B, 0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x09, 0x7C, 
+	0x20, 0x00, 0x0A, 0xA4, 0x20, 0x00, 0x02, 0x14, 0x4A, 0xA0, 0xB5, 0xF0, 0x70, 0x13, 0x23, 0x00, 
+	0xB0, 0x85, 0x4A, 0x9F, 0x4A, 0x9F, 0x70, 0x13, 0x4A, 0x9F, 0x70, 0x13, 0x4B, 0x9F, 0x70, 0x13, 
+	0x2B, 0x00, 0x78, 0x1B, 0x20, 0x01, 0xD0, 0x03, 0xF7, 0xFF, 0x49, 0x9D, 0x24, 0x00, 0xFC, 0x31, 
+	0x4E, 0x9A, 0x4D, 0x9C, 0x78, 0x33, 0xE0, 0x11, 0xD0, 0x0C, 0x2B, 0x00, 0x7D, 0x29, 0x7D, 0xEB, 
+	0x18, 0xC9, 0x48, 0x99, 0x23, 0x00, 0x01, 0xE2, 0x93, 0x00, 0x18, 0x12, 0x20, 0x01, 0xB2, 0xC9, 
+	0xF7, 0xFF, 0x23, 0x02, 0x34, 0x01, 0xFB, 0xC5, 0x7E, 0x29, 0xB2, 0xE4, 0xD3, 0xEA, 0x42, 0x8C, 
+	0x78, 0x1B, 0x4B, 0x92, 0xD1, 0x00, 0x2B, 0x00, 0x4B, 0x91, 0xE1, 0x0D, 0x2A, 0x00, 0x78, 0x1A, 
+	0x4B, 0x90, 0xD1, 0x1F, 0x2B, 0x00, 0x78, 0x1B, 0x7D, 0xEB, 0xD0, 0x1B, 0xE0, 0x07, 0x4C, 0x8E, 
+	0xB2, 0xDB, 0x3B, 0x01, 0x18, 0x2D, 0x01, 0x5D, 0x2B, 0x00, 0x55, 0x2A, 0x1C, 0x03, 0xD1, 0xF8, 
+	0xB2, 0xC0, 0x1E, 0x58, 0xD0, 0x01, 0x2B, 0x00, 0xE7, 0xF6, 0x1C, 0x0B, 0x48, 0x86, 0x4A, 0x87, 
+	0x01, 0x49, 0x78, 0x12, 0x3A, 0x01, 0xE0, 0x03, 0x18, 0x8C, 0xB2, 0xD2, 0x2A, 0x00, 0x54, 0x23, 
+	0x4B, 0x80, 0xD1, 0xF9, 0x78, 0x19, 0x4A, 0x7E, 0x70, 0x11, 0x78, 0x1B, 0xD0, 0x70, 0x2B, 0x00, 
+	0x7E, 0x1A, 0x4B, 0x78, 0x92, 0x02, 0x7D, 0xD9, 0x93, 0x03, 0x7D, 0x1B, 0x3B, 0x01, 0xE0, 0x22, 
+	0x1C, 0x59, 0xB2, 0xDB, 0x19, 0xC8, 0x01, 0x89, 0x9D, 0x03, 0x4C, 0x79, 0x5B, 0x00, 0x00, 0x40, 
+	0xD0, 0x04, 0x2D, 0x00, 0x00, 0x49, 0x19, 0x89, 0x18, 0x40, 0x5B, 0x09, 0x01, 0x59, 0x10, 0x40, 
+	0x4D, 0x74, 0x18, 0x89, 0x5B, 0x65, 0x00, 0x4C, 0x08, 0xED, 0x4C, 0x6F, 0x1A, 0x28, 0x5D, 0x0C, 
+	0xDA, 0x04, 0x42, 0x84, 0xDD, 0x00, 0x28, 0xFF, 0x4D, 0x6B, 0x20, 0xFF, 0x2B, 0x00, 0x54, 0x68, 
+	0x1C, 0x11, 0xD1, 0xDD, 0xB2, 0xD2, 0x1E, 0x4A, 0xD0, 0x03, 0x29, 0x00, 0x1C, 0x97, 0x9B, 0x02, 
+	0xE7, 0xF4, 0x1C, 0xD6, 0x4B, 0x65, 0x4A, 0x5F, 0x78, 0x1B, 0x7E, 0x17, 0x01, 0x7F, 0x49, 0x62, 
+	0x3B, 0x01, 0xE0, 0x10, 0x4E, 0x64, 0xB2, 0xDB, 0x5B, 0x94, 0x00, 0x5A, 0x56, 0x45, 0x18, 0xF8, 
+	0x1C, 0x2A, 0xB2, 0x26, 0xDA, 0x00, 0x42, 0xB5, 0xB2, 0x12, 0x1C, 0x22, 0xDD, 0x00, 0x2A, 0xFF, 
+	0x54, 0x42, 0x22, 0xFF, 0xD1, 0xEC, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x50, 0xD0, 0x03, 0x2B, 0x00, 
+	0x49, 0x5A, 0x20, 0x03, 0xFB, 0x94, 0xF7, 0xFF, 0x4D, 0x4E, 0x24, 0x00, 0xE0, 0x0E, 0x4E, 0x4B, 
+	0x2B, 0x00, 0x78, 0x33, 0x4B, 0x50, 0xD0, 0x09, 0x18, 0xD2, 0x01, 0x62, 0x7D, 0xE9, 0x23, 0x00, 
+	0x93, 0x00, 0x20, 0x03, 0xF7, 0xFF, 0x23, 0x01, 0x34, 0x01, 0xFB, 0x2B, 0x7E, 0x2B, 0xB2, 0xE4, 
+	0xD8, 0xED, 0x42, 0xA3, 0x23, 0x01, 0x4A, 0x40, 0x4A, 0x3D, 0x70, 0x13, 0x4A, 0x3B, 0x70, 0x13, 
+	0x4B, 0x3E, 0x70, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x49, 0xD0, 0x6D, 0x02, 0x58, 0x68, 0x1B, 
+	0x4A, 0x3C, 0xD5, 0x69, 0x7D, 0x16, 0x24, 0x80, 0x7D, 0xD2, 0x7E, 0x13, 0x18, 0xB6, 0x4D, 0x45, 
+	0x06, 0x24, 0xB2, 0xF6, 0xE0, 0x18, 0x46, 0xB4, 0xB2, 0xDB, 0x3B, 0x01, 0x00, 0x5A, 0x49, 0x42, 
+	0x5A, 0x56, 0x1C, 0x5F, 0x46, 0x62, 0x01, 0xBF, 0x3A, 0x01, 0xE0, 0x0D, 0x1C, 0x91, 0xB2, 0xD2, 
+	0x48, 0x37, 0x18, 0x79, 0x5A, 0x09, 0x00, 0x49, 0x42, 0x8C, 0x1B, 0x89, 0x1C, 0x0C, 0xDA, 0x00, 
+	0xDD, 0x00, 0x42, 0x8D, 0x2A, 0x00, 0x1C, 0x0D, 0x2B, 0x00, 0xD1, 0xEF, 0x20, 0x16, 0xD1, 0xE4, 
+	0xF7, 0xFF, 0x49, 0x36, 0x4B, 0x25, 0xFB, 0x45, 0xCE, 0x50, 0xAE, 0xF1, 0x13, 0x78, 0x1B, 0x4A, 
+	0x35, 0x80, 0x55, 0x80, 0x14, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 0x16, 0x93, 
+	0x00, 0xF7, 0xFF, 0x1C, 0x0B, 0x4B, 0x26, 0xFA, 0xDF, 0x78, 0x1B, 0x20, 0x80, 0x06, 0x00, 0x49, 
+	0x2A, 0x4D, 0x2E, 0x4E, 0x2D, 0x3B, 0x01, 0xE0, 0x19, 0x5C, 0xF7, 0xB2, 0xDB, 0x46, 0x94, 0x1C, 
+	0x7A, 0x5C, 0xEA, 0x46, 0x64, 0x46, 0xA4, 0x01, 0xA4, 0x44, 0x62, 0x32, 0x02, 0x00, 0x52, 0x4C, 
+	0x1D, 0x4C, 0x22, 0x5B, 0x12, 0x46, 0x94, 0x00, 0x7F, 0x46, 0x64, 0x5B, 0x3A, 0x42, 0x90, 0x1A, 
+	0xA2, 0x1C, 0x10, 0xDA, 0x00, 0xDD, 0x00, 0x42, 0x91, 0x2B, 0x00, 0x1C, 0x11, 0x4B, 0x0C, 0xD1, 
+	0xE3, 0x78, 0x1B, 0x4A, 0x1C, 0x80, 0x51, 0x80, 0x10, 0xD0, 0x06, 0x2B, 0x00, 0x21, 0x02, 0x23, 
+	0x01, 0x20, 0x16, 0x93, 0x00, 0xF7, 0xFF, 0x1C, 0x0B, 0xB0, 0x05, 0xFA, 0xAD, 0x46, 0xC0, 0xBD, 
+	0xF0, 0x20, 0x00, 0x09, 0xAC, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x16, 0x30, 0x20, 0x00, 0x16, 
+	0x48, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x5D, 0x2C, 0x20, 0x00, 0x09, 0xAE, 0x40, 0x00, 0x40, 
+	0x84, 0x20, 0x00, 0x03, 0x1C, 0x20, 0x00, 0x01, 0xE1, 0x20, 0x00, 0x01, 0xE3, 0x20, 0x00, 0x13, 
+	0x64, 0x20, 0x00, 0x09, 0x7C, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x12, 
+	0x3C, 0x00, 0x00, 0x5D, 0x30, 0x20, 0x00, 0x00, 0x58, 0x7F, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x16, 
+	0x94, 0x00, 0x00, 0x5D, 0x36, 0x20, 0x00, 0x16, 0x54, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 
+	0x2A, 0x4B, 0xBF, 0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0xA7, 0xD0, 0x00, 0x2B, 0x00, 0x4C, 0xBD, 0xE2, 
+	0x1B, 0x7E, 0x24, 0x4E, 0xBD, 0x4D, 0xBE, 0x4F, 0xBD, 0x94, 0x07, 0x4A, 0xBE, 0x78, 0x12, 0x7C, 
+	0x6D, 0x60, 0x33, 0x60, 0x73, 0x81, 0x73, 0x82, 0x73, 0x81, 0x33, 0x82, 0x33, 0x60, 0xBB, 0x60, 
+	0x3B, 0xB2, 0x52, 0x4B, 0xB9, 0x92, 0x1D, 0x78, 0x1B, 0x22, 0xFF, 0x4C, 0xB2, 0x60, 0xFA, 0x60, 
+	0x7A, 0x93, 0x0B, 0x95, 0x11, 0x4D, 0xB2, 0x7D, 0xE4, 0x23, 0x46, 0x94, 0x09, 0x4F, 0xB0, 0x5E, 
+	0xED, 0x23, 0x48, 0x95, 0x0E, 0x4C, 0xAB, 0x5E, 0xFF, 0x7D, 0x24, 0x97, 0x0F, 0x94, 0x0C, 0x23, 
+	0x2D, 0x4E, 0xAE, 0x4D, 0xAB, 0x78, 0x6D, 0x9F, 0x11, 0x42, 0x7F, 0x68, 0x36, 0x95, 0x0D, 0x4C, 
+	0xA8, 0x97, 0x1F, 0x96, 0x12, 0x4D, 0xA6, 0x7C, 0xA4, 0x5C, 0xEB, 0x94, 0x24, 0x93, 0x13, 0x9E, 
+	0x1D, 0x1B, 0x9B, 0x23, 0x10, 0x27, 0x18, 0x93, 0x20, 0x20, 0x1C, 0x57, 0xEF, 0x56, 0x28, 0x97, 
+	0x14, 0x90, 0x19, 0x9C, 0x07, 0x56, 0x69, 0x21, 0x19, 0x94, 0x15, 0x1C, 0x25, 0x27, 0x00, 0x35, 
+	0x01, 0x91, 0x25, 0x24, 0xFF, 0x26, 0x00, 0x95, 0x16, 0x94, 0x1B, 0x97, 0x05, 0x21, 0x00, 0x20, 
+	0x00, 0x23, 0x00, 0x22, 0x00, 0x27, 0xFF, 0x25, 0x00, 0x96, 0x06, 0x24, 0x00, 0x91, 0x10, 0x90, 
+	0x18, 0x93, 0x1A, 0x92, 0x1C, 0x96, 0x21, 0x95, 0x23, 0x94, 0x1E, 0x97, 0x17, 0x2C, 0x00, 0x9C, 
+	0x07, 0xE1, 0x3B, 0xD1, 0x00, 0x4D, 0x92, 0x9B, 0x07, 0xB2, 0xDB, 0x3B, 0x01, 0x00, 0x5B, 0x93, 
+	0x07, 0x9E, 0x09, 0x5B, 0x5B, 0x2E, 0x00, 0x93, 0x0A, 0x9F, 0x07, 0xD0, 0xF0, 0x37, 0x01, 0x48, 
+	0x8D, 0x18, 0x1B, 0x01, 0xFB, 0x99, 0x0A, 0x88, 0x1A, 0x1A, 0x53, 0x9C, 0x0E, 0xDA, 0x00, 0x42, 
+	0x9C, 0x9D, 0x0F, 0xE1, 0xA6, 0xDD, 0x00, 0x42, 0x9D, 0x9E, 0x07, 0xE1, 0x9F, 0x21, 0x01, 0x01, 
+	0xBF, 0x23, 0x00, 0x25, 0x02, 0x97, 0x03, 0x01, 0x70, 0x4D, 0x83, 0xE0, 0x2C, 0x00, 0x64, 0x18, 
+	0xC4, 0x27, 0x18, 0x46, 0x6E, 0x5F, 0xBD, 0x5B, 0x2C, 0x42, 0xAC, 0x1A, 0xA4, 0xB2, 0xA7, 0xDD, 
+	0x01, 0x46, 0x6E, 0x97, 0x06, 0x5F, 0xBD, 0x27, 0x14, 0xDA, 0x01, 0x42, 0xAC, 0x94, 0x05, 0xB2, 
+	0xA4, 0x4F, 0x79, 0x18, 0xC3, 0x52, 0xFA, 0x00, 0x5B, 0xB2, 0xCB, 0x9F, 0x09, 0xD9, 0xBD, 0x42, 
+	0x9F, 0x1C, 0x8D, 0x9A, 0x03, 0x4C, 0x75, 0x19, 0x53, 0x5B, 0x1A, 0x00, 0x5B, 0x9F, 0x0E, 0x9E, 
+	0x0A, 0x1B, 0x94, 0x1C, 0x0B, 0xDD, 0x00, 0x42, 0xBC, 0x9E, 0x0F, 0xE1, 0x4C, 0x42, 0xB4, 0x31, 
+	0x01, 0xE0, 0xE5, 0xDA, 0x00, 0x2F, 0x00, 0x9F, 0x0C, 0x9E, 0x03, 0xD0, 0x07, 0x19, 0x34, 0x1C, 
+	0xDC, 0x00, 0x64, 0x4F, 0x6A, 0x18, 0xA2, 0x5B, 0xE4, 0x9C, 0x0D, 0x10, 0x52, 0xD0, 0x06, 0x2C, 
+	0x00, 0x18, 0xC4, 0x4E, 0x67, 0x9F, 0x12, 0x5D, 0xA4, 0x43, 0x7A, 0x43, 0x62, 0x9C, 0x0B, 0x13, 
+	0x12, 0xD0, 0xBA, 0x2C, 0x00, 0x4F, 0x60, 0x18, 0xC6, 0x5B, 0x3F, 0x00, 0x74, 0x4F, 0x61, 0x46, 
+	0xBC, 0x46, 0x66, 0x57, 0xBC, 0x1B, 0x34, 0x08, 0xF6, 0x46, 0x6F, 0x94, 0x08, 0x96, 0x04, 0x24, 
+	0x18, 0x9E, 0x08, 0x5F, 0xE7, 0x42, 0xBC, 0x1A, 0xB4, 0xB2, 0xA7, 0xDD, 0x01, 0x46, 0x6E, 0x97, 
+	0x06, 0x5F, 0xBE, 0x27, 0x14, 0xDA, 0x01, 0x42, 0xB4, 0x96, 0x05, 0xB2, 0xA6, 0x42, 0xBC, 0x9F, 
+	0x11, 0x18, 0xC4, 0xDD, 0x6E, 0x4C, 0x54, 0x46, 0xA4, 0x46, 0x66, 0x27, 0x00, 0x9F, 0x04, 0x55, 
+	0x37, 0x1A, 0xBC, 0x9E, 0x13, 0xD0, 0x08, 0x2E, 0x00, 0x9C, 0x08, 0x9F, 0x1D, 0x43, 0x7A, 0x9E, 
+	0x20, 0x9F, 0x04, 0x43, 0x74, 0x11, 0x24, 0x19, 0x14, 0x1C, 0x22, 0x1B, 0x3C, 0xDA, 0x28, 0x32, 
+	0x7F, 0x18, 0xC2, 0x4F, 0x48, 0x54, 0xBE, 0x26, 0x80, 0x9F, 0x23, 0x9E, 0x25, 0x18, 0xBF, 0x1B, 
+	0xA2, 0xAE, 0x21, 0x97, 0x23, 0x5E, 0xB2, 0x22, 0x00, 0xDC, 0x01, 0x42, 0x94, 0x94, 0x21, 0xB2, 
+	0xA4, 0x4C, 0x3E, 0x9A, 0x03, 0x00, 0x6D, 0x19, 0x55, 0x5B, 0x2A, 0x27, 0x00, 0x9A, 0x15, 0x53, 
+	0x2F, 0x01, 0x55, 0x9E, 0x16, 0x4A, 0x3D, 0x01, 0x74, 0x18, 0xE4, 0x18, 0xED, 0x18, 0xC3, 0x00, 
+	0x6D, 0x52, 0xAF, 0x27, 0x00, 0x00, 0x5B, 0x00, 0x64, 0x26, 0x00, 0x25, 0x00, 0x52, 0x9E, 0x52, 
+	0xA5, 0x18, 0xC2, 0xE7, 0x72, 0xDD, 0x36, 0x2C, 0x7E, 0x27, 0x7F, 0x4E, 0x32, 0x9F, 0x14, 0x54, 
+	0xB7, 0xDB, 0x03, 0x42, 0xBC, 0x1B, 0xE2, 0x9E, 0x18, 0x96, 0x18, 0x18, 0xB6, 0x22, 0x00, 0xAF, 
+	0x10, 0x42, 0x94, 0x5E, 0xBA, 0xB2, 0xA2, 0xDC, 0x24, 0x42, 0xB4, 0x9E, 0x19, 0x9F, 0x1C, 0xDB, 
+	0x11, 0x42, 0xA7, 0x9C, 0x07, 0x94, 0x1C, 0xDA, 0x00, 0x9C, 0x07, 0x9E, 0x17, 0xDD, 0x00, 0x42, 
+	0xA6, 0x9E, 0x1A, 0x94, 0x17, 0xDA, 0x00, 0x42, 0x9E, 0x9F, 0x1B, 0x93, 0x1A, 0xDA, 0x00, 0x42, 
+	0xBB, 0x9C, 0x03, 0x93, 0x1B, 0x19, 0x65, 0x4E, 0x1D, 0x5B, 0xAC, 0x00, 0x6D, 0xE7, 0xBE, 0x53, 
+	0xAA, 0x18, 0xC7, 0x9E, 0x1F, 0xDA, 0x0E, 0x42, 0xB4, 0x26, 0x00, 0x4C, 0x1B, 0xE7, 0x8E, 0x55, 
+	0x3E, 0x92, 0x10, 0xB2, 0xA2, 0x4E, 0x17, 0xE7, 0xD8, 0x2C, 0x00, 0x54, 0xB4, 0x9A, 0x25, 0xDA, 
+	0xC7, 0xDC, 0x9E, 0x42, 0x94, 0x4E, 0x14, 0xE7, 0x98, 0x5D, 0xBC, 0x97, 0x22, 0xB2, 0x67, 0x9E, 
+	0x24, 0xD1, 0x00, 0x42, 0xB7, 0x9F, 0x22, 0xE7, 0x7B, 0x34, 0x01, 0x4E, 0x0F, 0xE7, 0x76, 0x55, 
+	0xBC, 0x20, 0x00, 0x09, 0xAC, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x15, 
+	0xE4, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x00, 0x4C, 0x20, 0x00, 0x03, 0x1C, 0x04, 0x4A, 0xAE, 
+	0xF1, 0x14, 0x20, 0x00, 0x09, 0x78, 0x20, 0x00, 0x16, 0x94, 0x40, 0x00, 0x40, 0x04, 0x20, 0x00, 
+	0x03, 0xF8, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x79, 0x12, 0x20, 0x00, 0x13, 0x64, 0x20, 0x00, 
+	0x0A, 0xB3, 0x20, 0x00, 0x0D, 0x3C, 0x27, 0x01, 0x9C, 0x07, 0x2C, 0x00, 0x97, 0x1E, 0xE6, 0xC3, 
+	0xD0, 0x00, 0x46, 0x6F, 0x46, 0x6D, 0x20, 0x14, 0x26, 0x18, 0x5B, 0xC0, 0x5B, 0x76, 0x99, 0x18, 
+	0x4D, 0x41, 0x1C, 0x2F, 0xAC, 0x10, 0x82, 0x68, 0x82, 0x2E, 0x88, 0x25, 0x60, 0x29, 0x1C, 0x3C, 
+	0x9B, 0x23, 0x9E, 0x1C, 0x81, 0x3D, 0x60, 0x63, 0x4F, 0x3C, 0x88, 0x25, 0xAC, 0x21, 0x98, 0x17, 
+	0x60, 0xBE, 0x9A, 0x1B, 0x99, 0x1A, 0x9E, 0x0B, 0x4C, 0x37, 0x60, 0x39, 0x60, 0xF8, 0x81, 0x65, 
+	0x60, 0x7A, 0xD0, 0x24, 0x2E, 0x00, 0x78, 0x1B, 0x4B, 0x35, 0xD0, 0x03, 0x2B, 0x00, 0x68, 0x1B, 
+	0x4B, 0x34, 0xDD, 0x1C, 0x2B, 0x00, 0x78, 0x23, 0x4C, 0x33, 0xD1, 0x56, 0x2B, 0x00, 0x7E, 0x3B, 
+	0x4F, 0x32, 0xD0, 0x14, 0x2B, 0x00, 0x9F, 0x07, 0x4D, 0x31, 0x78, 0x23, 0x26, 0x01, 0xD0, 0x08, 
+	0x2B, 0x00, 0x01, 0x7A, 0x48, 0x2D, 0x19, 0x52, 0x7D, 0xC1, 0x23, 0x01, 0x20, 0x03, 0xF7, 0xFF, 
+	0x96, 0x00, 0x49, 0x29, 0xF8, 0x93, 0x7E, 0x0B, 0x37, 0x01, 0x42, 0xBB, 0xB2, 0xFF, 0x4C, 0x26, 
+	0xD8, 0xED, 0x2B, 0x00, 0x7D, 0x23, 0x7E, 0x22, 0xD0, 0x13, 0x3A, 0x01, 0x7D, 0xE4, 0xB2, 0xD2, 
+	0x49, 0x24, 0x20, 0x00, 0x34, 0x02, 0x01, 0x9B, 0x1C, 0x53, 0x00, 0x5B, 0x19, 0x1B, 0x5A, 0x5D, 
+	0x3A, 0x01, 0x5A, 0x5D, 0xB2, 0xD2, 0xE7, 0xF5, 0x52, 0x58, 0x96, 0x1E, 0x26, 0x01, 0x4D, 0x1D, 
+	0xE6, 0x60, 0x7E, 0xAB, 0x4E, 0x1D, 0x4F, 0x13, 0x68, 0x32, 0x21, 0x08, 0x43, 0x53, 0x48, 0x1B, 
+	0x5E, 0x79, 0x4A, 0x1B, 0x11, 0x9B, 0x0F, 0xDC, 0x17, 0xCD, 0x42, 0x99, 0x78, 0x00, 0x70, 0x15, 
+	0x41, 0x65, 0xD1, 0x0A, 0x28, 0x00, 0x2C, 0x00, 0x9C, 0x1E, 0x23, 0x01, 0xD0, 0x07, 0x4A, 0x15, 
+	0x70, 0x13, 0x70, 0x13, 0x49, 0x15, 0x70, 0x0B, 0x4A, 0x15, 0xB0, 0x27, 0x70, 0x13, 0x25, 0x01, 
+	0xBD, 0xF0, 0xE6, 0x3D, 0x95, 0x1E, 0x94, 0x1E, 0x24, 0x01, 0x20, 0x03, 0xE6, 0x3A, 0xF7, 0xFF, 
+	0x49, 0x10, 0xE7, 0xA3, 0xF8, 0xA3, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x15, 0xE4, 0x20, 0x00, 
+	0x01, 0xDE, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 
+	0x13, 0x64, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x09, 0x78, 0x20, 0x00, 
+	0x01, 0xE4, 0x20, 0x00, 0x09, 0x14, 0x20, 0x00, 0x16, 0x30, 0x20, 0x00, 0x16, 0x48, 0x20, 0x00, 
+	0x01, 0xC4, 0x00, 0x00, 0x5D, 0x70, 0x4B, 0x2F, 0xB5, 0xF0, 0x78, 0x1C, 0xB0, 0x85, 0x4E, 0x2F, 
+	0x4D, 0x2E, 0x3C, 0x01, 0xE0, 0x10, 0x57, 0x2B, 0xB2, 0xE4, 0x1C, 0x59, 0x57, 0x32, 0x01, 0x89, 
+	0x32, 0x02, 0x4A, 0x2B, 0x18, 0x89, 0x5A, 0x88, 0x00, 0x49, 0x00, 0x5B, 0x4A, 0x2A, 0x1C, 0x21, 
+	0x5A, 0x9A, 0xFA, 0xF0, 0xF7, 0xFF, 0xD1, 0xEC, 0x2C, 0x00, 0x78, 0x1B, 0x4B, 0x27, 0xD0, 0x08, 
+	0x2B, 0x00, 0x20, 0x03, 0x4B, 0x20, 0x23, 0x01, 0x78, 0x19, 0x4A, 0x24, 0x93, 0x00, 0xF7, 0xFF, 
+	0x23, 0x02, 0x4B, 0x23, 0xF8, 0x03, 0x78, 0x18, 0x49, 0x1E, 0x1C, 0x84, 0x78, 0x9A, 0x78, 0xDE, 
+	0x92, 0x03, 0x94, 0x02, 0x23, 0x00, 0x01, 0xA4, 0xE0, 0x0D, 0x00, 0x64, 0x19, 0xE4, 0x25, 0x00, 
+	0x5A, 0x65, 0x32, 0x01, 0x52, 0x65, 0x9C, 0x02, 0xE0, 0x02, 0x18, 0xE7, 0x22, 0x00, 0xD1, 0xF2, 
+	0x1A, 0xB4, 0x9D, 0x03, 0x33, 0x01, 0x42, 0xAA, 0x18, 0x1A, 0x4B, 0x15, 0xDB, 0xF5, 0x78, 0x58, 
+	0x49, 0x10, 0x1C, 0x42, 0x78, 0xDE, 0x42, 0x5B, 0x23, 0x01, 0x22, 0x00, 0x92, 0x02, 0xE0, 0x08, 
+	0x1C, 0x9F, 0x18, 0xAC, 0x9D, 0x02, 0x19, 0xE4, 0x01, 0xA4, 0x5A, 0x65, 0x00, 0x64, 0x52, 0x65, 
+	0x25, 0x00, 0x18, 0x14, 0x32, 0x01, 0xDB, 0xF3, 0x42, 0xB4, 0x33, 0x01, 0x9A, 0x03, 0xDB, 0xEC, 
+	0x42, 0x93, 0xBD, 0xF0, 0xB0, 0x05, 0x20, 0x00, 0x09, 0x7C, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 
+	0x75, 0x2A, 0x40, 0x00, 0x40, 0x00, 0x20, 0x00, 0x16, 0x94, 0x20, 0x00, 0x01, 0xEB, 0x20, 0x00, 
+	0x12, 0x3C, 0x20, 0x00, 0x03, 0x0A, 0x4B, 0x0C, 0xB5, 0x30, 0x78, 0xDB, 0x4C, 0x0C, 0xE0, 0x10, 
+	0x49, 0x0C, 0xB2, 0xDB, 0x3B, 0x01, 0x4D, 0x0B, 0x1C, 0x5A, 0x19, 0x52, 0x01, 0xD2, 0xD1, 0x03, 
+	0x1C, 0x45, 0x00, 0x5A, 0x88, 0x15, 0xE0, 0x04, 0x52, 0x55, 0x01, 0x5A, 0x88, 0x15, 0x00, 0x52, 
+	0x18, 0x12, 0x2B, 0x00, 0x53, 0x15, 0xBD, 0x30, 0xD1, 0xEC, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 
+	0x03, 0xF8, 0x20, 0x00, 0x16, 0x94, 0x40, 0x00, 0x40, 0x02, 0xB0, 0x8D, 0xB5, 0xF0, 0x92, 0x0B, 
+	0x91, 0x0A, 0x1C, 0x41, 0x4B, 0x63, 0x4A, 0x63, 0xD1, 0x0C, 0x7E, 0x12, 0x49, 0x63, 0x92, 0x03, 
+	0x3A, 0x01, 0x78, 0x5E, 0x78, 0xDA, 0x23, 0x00, 0x00, 0x54, 0x18, 0x64, 0x1C, 0x55, 0xE0, 0x0E, 
+	0x46, 0x94, 0x79, 0x5A, 0x7B, 0xDC, 0x3A, 0x01, 0x18, 0xA2, 0x4A, 0x5C, 0xE0, 0x10, 0x01, 0xC9, 
+	0x18, 0xE9, 0x88, 0x0A, 0x18, 0x89, 0x53, 0xE2, 0x00, 0x5F, 0x22, 0x00, 0x88, 0x0A, 0x3B, 0x01, 
+	0x80, 0x0A, 0x19, 0xDA, 0x46, 0x67, 0xDA, 0xF0, 0x42, 0xB2, 0x24, 0x00, 0x9A, 0x03, 0x4D, 0x54, 
+	0x01, 0x56, 0x23, 0x00, 0x18, 0x36, 0x1C, 0x11, 0x00, 0x76, 0x93, 0x07, 0x93, 0x08, 0x93, 0x05, 
+	0x93, 0x06, 0x96, 0x09, 0x95, 0x03, 0xE0, 0x55, 0x46, 0xA4, 0xD1, 0x04, 0x1C, 0x44, 0x00, 0x56, 
+	0x4C, 0x4A, 0x5A, 0xE4, 0x19, 0x34, 0x4C, 0x4B, 0xE0, 0x04, 0x19, 0x3E, 0x9F, 0x09, 0x5B, 0x34, 
+	0x01, 0x5C, 0x4F, 0x46, 0x1C, 0x4E, 0x01, 0xF6, 0x96, 0x04, 0x88, 0x37, 0x19, 0xF6, 0xB2, 0x3E, 
+	0xB2, 0x24, 0x1B, 0xA6, 0x4F, 0x45, 0x19, 0xE7, 0x00, 0x54, 0x52, 0xFE, 0x17, 0xF4, 0x40, 0x66, 
+	0x19, 0x36, 0x24, 0x01, 0x1C, 0x0F, 0x42, 0xB9, 0x43, 0xA7, 0x9C, 0x07, 0xD1, 0x09, 0x94, 0x07, 
+	0x19, 0xA4, 0xDD, 0x00, 0x42, 0xB5, 0x9F, 0x06, 0x1C, 0x35, 0xDB, 0x0B, 0x42, 0xB7, 0x9C, 0x08, 
+	0xE0, 0x0D, 0x19, 0xA4, 0x9F, 0x03, 0x42, 0xB7, 0x94, 0x08, 0x96, 0x03, 0xDD, 0x00, 0x42, 0xB4, 
+	0x9C, 0x05, 0xE0, 0x02, 0xDB, 0x02, 0xE0, 0x00, 0x96, 0x06, 0x9E, 0x04, 0x96, 0x05, 0x4E, 0x2F, 
+	0x01, 0xF4, 0x1C, 0x47, 0x19, 0xA4, 0x88, 0x27, 0xD1, 0x0E, 0x97, 0x04, 0x4E, 0x2B, 0x19, 0xBE, 
+	0x00, 0x57, 0x27, 0x10, 0x96, 0x02, 0x5B, 0xBF, 0x46, 0x6E, 0x52, 0xF7, 0x9E, 0x02, 0x26, 0x00, 
+	0x88, 0x26, 0xE0, 0x05, 0x80, 0x26, 0x4E, 0x27, 0x88, 0x27, 0x19, 0xA6, 0x9C, 0x09, 0x53, 0x37, 
+	0x01, 0x5C, 0x3B, 0x02, 0x39, 0x01, 0xDA, 0xA7, 0x45, 0x61, 0xD1, 0x13, 0x30, 0x01, 0x78, 0x23, 
+	0x4C, 0x23, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x22, 0x20, 0x01, 0xFF, 0x56, 0xF7, 0xFE, 0x2B, 0x00, 
+	0x78, 0x23, 0x4B, 0x17, 0xD0, 0x08, 0x78, 0xD9, 0x20, 0x01, 0x93, 0x00, 0x23, 0x00, 0x23, 0x02, 
+	0x4A, 0x16, 0xFE, 0xF2, 0xF7, 0xFE, 0x9F, 0x08, 0x9E, 0x07, 0x19, 0xF3, 0x9C, 0x0A, 0x9E, 0x05, 
+	0x60, 0x23, 0x35, 0x6C, 0xAE, 0xF1, 0x15, 0x9C, 0x06, 0x9F, 0x03, 0x1B, 0x65, 0x1B, 0xF3, 0xDA, 
+	0x00, 0x42, 0x9D, 0x9E, 0x0B, 0x1C, 0x1D, 0x60, 0x35, 0x4C, 0x12, 0x2B, 0x00, 0x78, 0x23, 0x20, 
+	0x0B, 0xD0, 0x03, 0xF7, 0xFE, 0x49, 0x11, 0x78, 0x23, 0xFF, 0x33, 0xD0, 0x08, 0x2B, 0x00, 0x20, 
+	0x0B, 0x4B, 0x06, 0x23, 0x01, 0x7E, 0x19, 0x4A, 0x09, 0x93, 0x00, 0xF7, 0xFE, 0x23, 0x02, 0xB0, 
+	0x0D, 0xFE, 0xCF, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x16, 0x94, 0x40, 0x00, 0x40, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x00, 0x03, 0xF8, 0x20, 
+	0x00, 0x16, 0x54, 0x20, 0x00, 0x01, 0xEB, 0x00, 0x00, 0x5D, 0x47, 0x00, 0x00, 0x5D, 0x4E, 0x4B, 
+	0xA6, 0xB5, 0xF0, 0x78, 0x1D, 0xB0, 0x85, 0xD0, 0x29, 0x2D, 0x00, 0x4C, 0xA5, 0x4B, 0xA4, 0x4B, 
+	0xA5, 0x78, 0x18, 0x68, 0x19, 0xB2, 0x46, 0x00, 0xB2, 0x68, 0x5B, 0x51, 0x13, 0x18, 0xCB, 0xB2, 
+	0xD2, 0x1D, 0x82, 0x23, 0x06, 0x25, 0x00, 0xB2, 0xDB, 0x3B, 0x01, 0xD5, 0x00, 0x1A, 0xF1, 0x00, 
+	0x89, 0x31, 0x0C, 0x18, 0x6D, 0x59, 0x09, 0x2A, 0x0B, 0x1C, 0x11, 0x39, 0x0C, 0xD9, 0x01, 0x00, 
+	0x89, 0xB2, 0xC9, 0x3A, 0x01, 0x58, 0x61, 0xB2, 0xD2, 0x1A, 0x6D, 0xD1, 0xEB, 0x2B, 0x00, 0x4A, 
+	0x93, 0x30, 0x01, 0x70, 0x10, 0xB2, 0xC0, 0x28, 0x0B, 0xB2, 0x40, 0x70, 0x13, 0xDD, 0x00, 0x78, 
+	0x1B, 0x4B, 0x92, 0xD0, 0x00, 0x2B, 0x00, 0x4B, 0x91, 0xE1, 0x15, 0x5E, 0x5B, 0x21, 0x14, 0xDA, 
+	0x02, 0x42, 0x9D, 0x22, 0x01, 0x4B, 0x8F, 0x4B, 0x8B, 0x70, 0x1A, 0x5E, 0x9E, 0x22, 0x10, 0x5F, 
+	0x1B, 0x24, 0x12, 0x4B, 0x85, 0x1A, 0xF6, 0x28, 0x00, 0x78, 0x18, 0x4B, 0x8A, 0xD1, 0x16, 0x68, 
+	0x1B, 0x4F, 0x8A, 0x80, 0xBB, 0x4C, 0x8A, 0x80, 0x3E, 0x78, 0x23, 0xD0, 0x02, 0x2B, 0x00, 0xF7, 
+	0xFE, 0x49, 0x88, 0x78, 0x23, 0xFE, 0xBD, 0xD0, 0x07, 0x2B, 0x00, 0x21, 0x02, 0x23, 0x01, 0x20, 
+	0x00, 0x93, 0x00, 0x1C, 0x0B, 0x1C, 0x3A, 0xFE, 0x5A, 0xF7, 0xFE, 0x7D, 0x9A, 0x4B, 0x7C, 0xDC, 
+	0x07, 0x42, 0x96, 0x78, 0x1A, 0x4B, 0x80, 0x29, 0x02, 0xB2, 0x51, 0x32, 0x01, 0xDC, 0x08, 0xE0, 
+	0x05, 0x70, 0x1A, 0x42, 0x9E, 0x7D, 0xDB, 0x4B, 0x7B, 0xDB, 0x02, 0x70, 0x1A, 0x22, 0x00, 0x4A, 
+	0x76, 0x4B, 0x71, 0x68, 0x1B, 0x68, 0x59, 0x18, 0xCB, 0x80, 0x15, 0x4B, 0x74, 0x80, 0x53, 0x78, 
+	0x1B, 0x80, 0x96, 0xD0, 0x06, 0x2B, 0x00, 0x93, 0x00, 0x23, 0x01, 0x21, 0x03, 0x20, 0x19, 0xF7, 
+	0xFE, 0x23, 0x02, 0x4B, 0x6B, 0xFE, 0x35, 0x78, 0x1B, 0x4C, 0x64, 0xD0, 0x61, 0x2B, 0x00, 0x78, 
+	0x2B, 0x4D, 0x6B, 0xD0, 0x03, 0x2B, 0x00, 0x49, 0x6C, 0x20, 0x19, 0xFE, 0x80, 0xF7, 0xFE, 0x78, 
+	0x1B, 0x4B, 0x69, 0xD1, 0x05, 0x2B, 0x00, 0x2A, 0x00, 0x78, 0x22, 0x4A, 0x61, 0xD0, 0x52, 0xE0, 
+	0x4F, 0x70, 0x13, 0xD1, 0x4D, 0x2B, 0x03, 0x2B, 0x00, 0x78, 0x2B, 0x20, 0x00, 0xD0, 0x03, 0xF7, 
+	0xFE, 0x49, 0x63, 0x4B, 0x55, 0xFE, 0x6D, 0x78, 0x19, 0x4A, 0x62, 0xD1, 0x1A, 0x29, 0x00, 0x70, 
+	0x18, 0x20, 0x01, 0x7D, 0xD6, 0x7E, 0x13, 0x4A, 0x60, 0x4D, 0x5F, 0x3B, 0x01, 0xE0, 0x0B, 0x18, 
+	0xF8, 0xB2, 0xDB, 0x5A, 0xA1, 0x00, 0x44, 0x52, 0xA1, 0x00, 0xC9, 0x55, 0x41, 0x21, 0x00, 0xD1, 
+	0xF4, 0x2B, 0x00, 0x1E, 0x59, 0x46, 0x63, 0x2B, 0x00, 0xB2, 0xC9, 0x1C, 0x33, 0xD0, 0x23, 0x46, 
+	0x8C, 0x01, 0x4F, 0x7E, 0x13, 0xE7, 0xF4, 0x4A, 0x54, 0x7D, 0xD6, 0x3B, 0x01, 0xE0, 0x0E, 0xB2, 
+	0xDB, 0x4D, 0x51, 0x00, 0x60, 0x18, 0xFC, 0x00, 0xE4, 0x57, 0x64, 0x5A, 0x84, 0x94, 0x02, 0x1B, 
+	0x64, 0x9D, 0x02, 0x2B, 0x00, 0x52, 0x84, 0x1C, 0x0B, 0xD1, 0xF1, 0xB2, 0xC9, 0x1E, 0x59, 0xD0, 
+	0x02, 0x2B, 0x00, 0x01, 0x4F, 0x1C, 0x33, 0x4A, 0x3A, 0xE7, 0xF5, 0x31, 0x30, 0x1C, 0x11, 0x42, 
+	0x8A, 0xC2, 0x08, 0x4B, 0x3B, 0xD1, 0xFC, 0x70, 0x1A, 0x22, 0x00, 0x22, 0x01, 0x4B, 0x44, 0xE0, 
+	0x60, 0x70, 0x1A, 0x4B, 0x43, 0x78, 0x22, 0xD1, 0x06, 0x2A, 0x00, 0x21, 0x01, 0x4A, 0x40, 0x68, 
+	0x1A, 0x70, 0x11, 0x60, 0x1A, 0x18, 0x52, 0x22, 0x00, 0xE0, 0x55, 0x4B, 0x39, 0x60, 0x1A, 0x7E, 
+	0x1C, 0x48, 0x3D, 0x49, 0x39, 0x7D, 0xDB, 0x4B, 0x2D, 0x93, 0x02, 0x93, 0x03, 0x7C, 0x9B, 0x3B, 
+	0x01, 0xE0, 0x11, 0x18, 0xF2, 0xB2, 0xDB, 0x9D, 0x03, 0x56, 0x14, 0xD1, 0x07, 0x42, 0xAC, 0x00, 
+	0x54, 0x4D, 0x31, 0x5A, 0x65, 0x57, 0x57, 0x52, 0x67, 0x1B, 0xEF, 0x54, 0x14, 0x24, 0x00, 0xD1, 
+	0xEE, 0x2B, 0x00, 0x1E, 0x65, 0x46, 0x64, 0x2C, 0x00, 0xB2, 0xED, 0x9B, 0x02, 0xD0, 0x03, 0x46, 
+	0xAC, 0x01, 0x6E, 0x4B, 0x2D, 0xE7, 0xF4, 0x07, 0x5D, 0x68, 0x1B, 0x4B, 0x20, 0xD5, 0x2B, 0x2B, 
+	0x00, 0x78, 0x1B, 0x20, 0x02, 0xD0, 0x22, 0xF7, 0xFE, 0x49, 0x29, 0xE0, 0x1D, 0xFD, 0xE9, 0x01, 
+	0x62, 0x7D, 0xE9, 0x48, 0x21, 0x1C, 0x0B, 0xE0, 0x08, 0x92, 0x02, 0x9A, 0x02, 0x3B, 0x01, 0x18, 
+	0xD2, 0xB2, 0xDB, 0x5A, 0x12, 0x00, 0x52, 0x08, 0xD2, 0x00, 0x5F, 0x2B, 0x00, 0x53, 0xBA, 0x4A, 
+	0x13, 0xD1, 0xF4, 0x2A, 0x00, 0x78, 0x12, 0x20, 0x02, 0xD0, 0x05, 0x4A, 0x0F, 0x93, 0x00, 0xF7, 
+	0xFE, 0x1C, 0x03, 0x34, 0x01, 0xFD, 0x75, 0xE0, 0x01, 0xB2, 0xE4, 0x4E, 0x0B, 0x4D, 0x11, 0x42, 
+	0xA3, 0x7E, 0x2B, 0xB0, 0x05, 0xD8, 0xDC, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x03, 0x1C, 0x20, 
+	0x00, 0x15, 0xF4, 0x20, 0x00, 0x16, 0xBC, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x09, 0x14, 0x20, 
+	0x00, 0x12, 0x48, 0x20, 0x00, 0x16, 0x3C, 0x20, 0x00, 0x16, 0x34, 0x20, 0x00, 0x16, 0x54, 0x20, 
+	0x00, 0x01, 0xEB, 0x00, 0x00, 0x5D, 0x53, 0x20, 0x00, 0x09, 0x20, 0x00, 0x00, 0x5D, 0x5A, 0x00, 
+	0x00, 0x5D, 0x63, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x13, 0x64, 0x20, 0x00, 0x03, 0xF8, 0x20, 
+	0x00, 0x16, 0x48, 0x20, 0x00, 0x01, 0xBC, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x00, 0x58, 0x00, 
+	0x00, 0x5D, 0x6C, 0x4B, 0x25, 0xB5, 0xF0, 0x78, 0x1B, 0xB0, 0x87, 0xD1, 0x2B, 0x2B, 0x00, 0x4B, 
+	0x24, 0x4A, 0x23, 0x78, 0x1B, 0x7C, 0x90, 0x7E, 0xD2, 0x90, 0x04, 0xB2, 0x52, 0x4D, 0x22, 0x92, 
+	0x05, 0xB2, 0x92, 0xE0, 0x1D, 0x4A, 0x21, 0x4C, 0x21, 0x3B, 0x01, 0x5C, 0xE1, 0xB2, 0xDB, 0x42, 
+	0xB9, 0x9F, 0x04, 0x00, 0x59, 0xD1, 0x16, 0x28, 0x00, 0x5A, 0x88, 0x5A, 0x6E, 0xD0, 0x07, 0xB2, 
+	0x34, 0x46, 0x6F, 0x24, 0x14, 0x46, 0xA4, 0x45, 0xBC, 0x5F, 0xE7, 0x00, 0x59, 0xDA, 0x05, 0x00, 
+	0xF6, 0x5A, 0x6E, 0x52, 0x50, 0x1B, 0x80, 0x1B, 0x80, 0xE0, 0x01, 0x4F, 0x14, 0x52, 0x88, 0x54, 
+	0xF9, 0x21, 0x00, 0xD1, 0xDF, 0x2B, 0x00, 0x4C, 0x12, 0x4B, 0x0E, 0x48, 0x0F, 0x78, 0x19, 0xE0, 
+	0x05, 0x1C, 0x0B, 0xB2, 0xDB, 0x3B, 0x01, 0x5A, 0x15, 0x00, 0x5A, 0x53, 0x15, 0x08, 0xED, 0xD1, 
+	0xF7, 0x2B, 0x00, 0x78, 0x12, 0x4A, 0x0C, 0xD0, 0x05, 0x2A, 0x00, 0x93, 0x00, 0x20, 0x02, 0x1C, 
+	0x03, 0x4A, 0x08, 0xFC, 0xF4, 0xF7, 0xFE, 0xBD, 0xF0, 0xB0, 0x07, 0x20, 0x00, 0x16, 0x30, 0x20, 
+	0x00, 0x12, 0x48, 0x20, 0x00, 0x09, 0x7C, 0xB3, 0x8C, 0xAE, 0xF1, 0x16, 0x20, 0x00, 0x12, 0x3C, 
+	0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 0x0A, 0xA4, 0x20, 0x00, 0x16, 0x54, 0x20, 0x00, 0x01, 0xEB, 
+	0x49, 0x09, 0xB5, 0x10, 0x48, 0x09, 0x22, 0x50, 0xF9, 0xDA, 0xF0, 0x00, 0x49, 0x09, 0x4C, 0x08, 
+	0x22, 0x42, 0x1C, 0x20, 0xF9, 0xD4, 0xF0, 0x00, 0x7B, 0xA2, 0x4B, 0x07, 0x7D, 0xE3, 0x60, 0x1A, 
+	0x7E, 0x23, 0x76, 0xE3, 0xBD, 0x10, 0x77, 0x23, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 0x12, 0x48, 
+	0x20, 0x00, 0x09, 0xAE, 0x00, 0x00, 0x74, 0x08, 0x20, 0x00, 0x16, 0x50, 0x49, 0x04, 0xB5, 0x08, 
+	0x43, 0x41, 0x4B, 0x04, 0x18, 0xC9, 0x48, 0x04, 0xF9, 0x58, 0xF0, 0x00, 0xBD, 0x08, 0xB2, 0xC0, 
+	0xFF, 0xFF, 0xFE, 0x44, 0x00, 0x02, 0x24, 0xFE, 0x00, 0x0F, 0x42, 0x40, 0x4C, 0x11, 0xB5, 0x10, 
+	0x71, 0x23, 0x23, 0x00, 0x71, 0x63, 0x23, 0x03, 0x72, 0x23, 0x23, 0x02, 0x78, 0x98, 0x4B, 0x0E, 
+	0x28, 0x03, 0x38, 0x02, 0xF0, 0x00, 0xD8, 0x14, 0x04, 0x0B, 0xF8, 0xDF, 0x20, 0xC7, 0x0B, 0x02, 
+	0x20, 0xD7, 0xE0, 0x00, 0xF7, 0xFF, 0x70, 0xE0, 0x23, 0x02, 0xFF, 0xD9, 0xE0, 0x05, 0x70, 0x20, 
+	0x70, 0xE0, 0x20, 0xF4, 0xFF, 0xD2, 0xF7, 0xFF, 0x70, 0x20, 0x23, 0x01, 0x71, 0xE3, 0x71, 0xA3, 
+	0x46, 0xC0, 0xBD, 0x10, 0x20, 0x00, 0x0A, 0xAA, 0x20, 0x00, 0x12, 0x48, 0x4B, 0x59, 0xB5, 0xF0, 
+	0x68, 0x1A, 0xB0, 0x87, 0x2A, 0x08, 0x4B, 0x58, 0x22, 0x01, 0xD1, 0x01, 0x22, 0x00, 0xE0, 0x00, 
+	0x4B, 0x56, 0x70, 0x1A, 0x33, 0x01, 0x4C, 0x56, 0x2B, 0x00, 0x7F, 0xDB, 0x71, 0xE3, 0xD1, 0x00, 
+	0x25, 0x01, 0x78, 0x23, 0x1C, 0x28, 0x79, 0xA2, 0x40, 0x90, 0x00, 0xD9, 0x1A, 0xCB, 0xB2, 0x82, 
+	0x4E, 0x50, 0x43, 0x53, 0xB2, 0xDB, 0x10, 0xDB, 0x78, 0x22, 0x80, 0x33, 0x79, 0xA0, 0x23, 0xFA, 
+	0x43, 0x53, 0x00, 0x9B, 0x1C, 0x29, 0x4F, 0x4C, 0xB2, 0x88, 0x40, 0x81, 0x43, 0x58, 0x88, 0xB9, 
+	0xF0, 0x00, 0x01, 0x09, 0xB2, 0xC1, 0xF8, 0xFB, 0x78, 0x23, 0x80, 0x71, 0x79, 0xA0, 0x22, 0x2D, 
+	0x1C, 0x2A, 0x43, 0x53, 0xB2, 0x90, 0x40, 0x82, 0x46, 0x6B, 0x43, 0x58, 0x01, 0x09, 0x81, 0x19, 
+	0xF8, 0xEC, 0xF0, 0x00, 0x80, 0xB0, 0xB2, 0xC0, 0x79, 0xB9, 0x7A, 0x23, 0x1A, 0x18, 0x00, 0xD8, 
+	0x00, 0xC0, 0x40, 0xA9, 0x30, 0xE0, 0x19, 0x49, 0x79, 0xA2, 0x43, 0x48, 0x21, 0x08, 0x46, 0x6C, 
+	0x40, 0x90, 0x5E, 0x61, 0xF0, 0x00, 0x01, 0x49, 0x4A, 0x34, 0xF8, 0x8B, 0x7D, 0x11, 0x80, 0xF0, 
+	0x4B, 0x36, 0x7D, 0xD0, 0xB2, 0xC0, 0x18, 0x08, 0x7E, 0x17, 0x70, 0x18, 0x7E, 0x56, 0x70, 0x5F, 
+	0x7F, 0x96, 0x96, 0x01, 0x43, 0x66, 0x9C, 0x01, 0x18, 0x20, 0xB2, 0xF4, 0x70, 0x98, 0xB2, 0xC0, 
+	0x7E, 0x96, 0x90, 0x02, 0x98, 0x03, 0x96, 0x03, 0x43, 0x46, 0x7F, 0xD6, 0x19, 0xC7, 0xB2, 0xF0, 
+	0x70, 0xDF, 0xB2, 0xFF, 0x46, 0xB4, 0x7E, 0xD6, 0x18, 0x61, 0x44, 0x61, 0x71, 0x19, 0xB2, 0xC9, 
+	0x19, 0x80, 0x7F, 0x16, 0xB2, 0xC0, 0x9E, 0x02, 0x1A, 0x3F, 0x1A, 0x74, 0xB2, 0xFF, 0xB2, 0xE6, 
+	0x71, 0x9E, 0x71, 0x58, 0x46, 0xBC, 0x71, 0xDF, 0x1B, 0xEC, 0x7D, 0x57, 0x1C, 0x27, 0x97, 0x04, 
+	0xB2, 0xFF, 0x43, 0x77, 0x73, 0x9F, 0x97, 0x05, 0x46, 0x64, 0x7D, 0x97, 0x43, 0x65, 0x1B, 0xED, 
+	0x9C, 0x04, 0x43, 0x47, 0x43, 0x4C, 0x74, 0x5F, 0x46, 0x6F, 0x72, 0x18, 0x5D, 0xC7, 0x20, 0x14, 
+	0xB2, 0xE4, 0xB2, 0xED, 0x74, 0x1C, 0x73, 0xDD, 0x72, 0x99, 0x72, 0x5D, 0x73, 0x1E, 0x72, 0xDF, 
+	0x7F, 0x51, 0x73, 0x5C, 0x29, 0x00, 0x4B, 0x12, 0x46, 0x69, 0xD0, 0x03, 0x70, 0x19, 0x79, 0x09, 
+	0x9C, 0x01, 0xE0, 0x03, 0x43, 0x74, 0x9E, 0x03, 0x1C, 0x93, 0x70, 0x1C, 0x9F, 0x02, 0x32, 0x03, 
+	0x7F, 0xDB, 0x7F, 0xD2, 0xB2, 0x5B, 0x18, 0xBA, 0x40, 0x9A, 0x32, 0x01, 0xB0, 0x07, 0x4B, 0x09, 
+	0xBD, 0xF0, 0x60, 0x1A, 0x20, 0x00, 0x16, 0x50, 0x20, 0x00, 0x02, 0xFA, 0x20, 0x00, 0x09, 0xAE, 
+	0x20, 0x00, 0x0A, 0xAA, 0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x03, 0x0A, 
+	0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x09, 0x18, 0x46, 0x71, 0xB4, 0x02, 0x00, 0x49, 0x08, 0x49, 
+	0x00, 0x49, 0x5C, 0x09, 0xBC, 0x02, 0x44, 0x8E, 0x46, 0xC0, 0x47, 0x70, 0x46, 0x71, 0xB4, 0x03, 
+	0x00, 0x40, 0x08, 0x49, 0x5A, 0x09, 0x00, 0x49, 0x44, 0x8E, 0x00, 0x49, 0x47, 0x70, 0xBC, 0x03, 
+	0xD0, 0x34, 0x29, 0x00, 0x22, 0x00, 0x23, 0x01, 0x42, 0x88, 0xB4, 0x10, 0x24, 0x01, 0xD3, 0x2C, 
+	0x42, 0xA1, 0x07, 0x24, 0x42, 0x81, 0xD2, 0x04, 0x01, 0x09, 0xD2, 0x02, 0xE7, 0xF8, 0x01, 0x1B, 
+	0x42, 0xA1, 0x00, 0xE4, 0x42, 0x81, 0xD2, 0x04, 0x00, 0x49, 0xD2, 0x02, 0xE7, 0xF8, 0x00, 0x5B, 
+	0xD3, 0x01, 0x42, 0x88, 0x43, 0x1A, 0x1A, 0x40, 0x42, 0xA0, 0x08, 0x4C, 0x1B, 0x00, 0xD3, 0x02, 
+	0x43, 0x22, 0x08, 0x5C, 0x42, 0xA0, 0x08, 0x8C, 0x1B, 0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0x9C, 
+	0x42, 0xA0, 0x08, 0xCC, 0x1B, 0x00, 0xD3, 0x02, 0x43, 0x22, 0x08, 0xDC, 0xD0, 0x03, 0x28, 0x00, 
+	0xD0, 0x01, 0x09, 0x1B, 0xE7, 0xE3, 0x09, 0x09, 0xBC, 0x10, 0x1C, 0x10, 0x28, 0x00, 0x47, 0x70, 
+	0x20, 0x00, 0xD0, 0x01, 0xB4, 0x07, 0x43, 0xC0, 0xA1, 0x02, 0x48, 0x02, 0x90, 0x02, 0x18, 0x40, 
+	0x46, 0xC0, 0xBD, 0x03, 0x00, 0x00, 0x00, 0xD9, 0xD0, 0xF0, 0x29, 0x00, 0xF7, 0xFF, 0xB5, 0x03, 
+	0xBC, 0x0E, 0xFF, 0xB9, 0x1A, 0x89, 0x43, 0x42, 0x46, 0xC0, 0x47, 0x18, 0xD0, 0x41, 0x29, 0x00, 
+	0x1C, 0x04, 0xB4, 0x10, 0x46, 0xA4, 0x40, 0x4C, 0x22, 0x00, 0x23, 0x01, 0xD5, 0x00, 0x29, 0x00, 
+	0x28, 0x00, 0x42, 0x49, 0x42, 0x40, 0xD5, 0x00, 0xD3, 0x2C, 0x42, 0x88, 0x07, 0x24, 0x24, 0x01, 
+	0xD2, 0x04, 0x42, 0xA1, 0xD2, 0x02, 0x42, 0x81, 0x01, 0x1B, 0x01, 0x09, 0x00, 0xE4, 0xE7, 0xF8, 
+	0xD2, 0x04, 0x42, 0xA1, 0xD2, 0x02, 0x42, 0x81, 0x00, 0x5B, 0x00, 0x49, 0x42, 0x88, 0xE7, 0xF8, 
+	0x1A, 0x40, 0xD3, 0x01, 0x08, 0x4C, 0x43, 0x1A, 0xD3, 0x02, 0x42, 0xA0, 0x08, 0x5C, 0x1B, 0x00, 
+	0x08, 0x8C, 0x43, 0x22, 0xD3, 0x02, 0x42, 0xA0, 0x08, 0x9C, 0x1B, 0x00, 0x08, 0xCC, 0x43, 0x22, 
+	0xD3, 0x02, 0x42, 0xA0, 0x08, 0xDC, 0x1B, 0x00, 0x28, 0x00, 0x43, 0x22, 0x09, 0x1B, 0xD0, 0x03, 
+	0x09, 0x09, 0xD0, 0x01, 0x1C, 0x10, 0xE7, 0xE3, 0x2C, 0x00, 0x46, 0x64, 0x42, 0x40, 0xD5, 0x00, 
+	0x47, 0x70, 0xBC, 0x10, 0xD0, 0x06, 0x28, 0x00, 0x20, 0x00, 0xDB, 0x03, 0x08, 0x40, 0x43, 0xC0, 
+	0x20, 0x80, 0xE0, 0x01, 0xB4, 0x07, 0x06, 0x00, 0xA1, 0x02, 0x48, 0x02, 0x90, 0x02, 0x18, 0x40, 
+	0x46, 0xC0, 0xBD, 0x03, 0x00, 0x00, 0x00, 0x19, 0xD0, 0xEB, 0x29, 0x00, 0xF7, 0xFF, 0xB5, 0x03, 
+	0xBC, 0x0E, 0xFF, 0xA7, 0x1A, 0x89, 0x43, 0x42, 0x46, 0xC0, 0x47, 0x18, 0x46, 0xC0, 0x47, 0x70, 
+	0x1C, 0x05, 0xB5, 0xF0, 0xD9, 0x2F, 0x2A, 0x0F, 0x43, 0x03, 0x1C, 0x0B, 0x07, 0x9C, 0x1C, 0x05, 
+	0x1C, 0x0C, 0xD1, 0x2C, 0x1C, 0x15, 0x1C, 0x03, 0x3D, 0x10, 0x68, 0x26, 0x68, 0x66, 0x60, 0x1E, 
+	0x68, 0xA6, 0x60, 0x5E, 0x68, 0xE6, 0x60, 0x9E, 0x60, 0xDE, 0x34, 0x10, 0xB2, 0x6F, 0xAE, 0xF1, 
+	0x17, 0x2D, 0x0F, 0x33, 0x10, 0x1C, 0x13, 0xD8, 0xF2, 0x09, 0x1B, 0x3B, 0x10, 0x01, 0x1B, 0x33, 
+	0x01, 0x18, 0xC9, 0x18, 0xC5, 0x40, 0x1A, 0x23, 0x0F, 0xD9, 0x0F, 0x2A, 0x03, 0x1C, 0x2C, 0x1C, 
+	0x0E, 0xCE, 0x80, 0x1C, 0x13, 0xC4, 0x80, 0x3B, 0x04, 0xD8, 0xFA, 0x2B, 0x03, 0x08, 0x9B, 0x1F, 
+	0x13, 0x00, 0x9B, 0x33, 0x01, 0x40, 0x22, 0x24, 0x03, 0x18, 0xED, 0x18, 0xC9, 0xD0, 0x05, 0x2A, 
+	0x00, 0x5C, 0xCC, 0x23, 0x00, 0x33, 0x01, 0x54, 0xEC, 0xD1, 0xFA, 0x42, 0x93, 0x46, 0xC0, 0xBD, 
+	0xF0, 0x6D, 0x6C, 0x61, 0x50, 0x69, 0x6E, 0x49, 0x20, 0x45, 0x27, 0x00, 0x74, 0x72, 0x65, 0x74, 
+	0x6E, 0x00, 0x4E, 0x20, 0x27, 0x65, 0x6C, 0x2D, 0x4E, 0x00, 0x21, 0x73, 0x73, 0x69, 0x78, 0x45, 
+	0x27, 0x4E, 0x20, 0x27, 0x74, 0x53, 0x20, 0x4E, 0x00, 0x53, 0x00, 0x50, 0x2F, 0x70, 0x65, 0x65, 
+	0x6C, 0x72, 0x2D, 0x53, 0x00, 0x74, 0x65, 0x73, 0x65, 0x53, 0x41, 0x46, 0x00, 0x64, 0x49, 0x00, 
+	0x54, 0x41, 0x00, 0x65, 0x6C, 0x76, 0x69, 0x74, 0x63, 0x70, 0x53, 0x00, 0x65, 0x00, 0x74, 0x63, 
+	0x65, 0x63, 0x61, 0x74, 0x53, 0x52, 0x00, 0x21, 0x6B, 0x41, 0x56, 0x47, 0x45, 0x65, 0x44, 0x00, 
+	0x4C, 0x00, 0x79, 0x61, 0x6C, 0x00, 0x43, 0x53, 0x4F, 0x53, 0x49, 0x4F, 0x4E, 0x6F, 0x54, 0x00, 
+	0x45, 0x20, 0x68, 0x63, 0x75, 0x54, 0x00, 0x6E, 0x4F, 0x68, 0x63, 0x75, 0x6F, 0x46, 0x46, 0x4F, 
+	0x20, 0x5F, 0x54, 0x4C, 0x00, 0x46, 0x4F, 0x52, 0x50, 0x4E, 0x49, 0x4C, 0x49, 0x69, 0x46, 0x00, 
+	0x47, 0x00, 0x64, 0x65, 0x78, 0x76, 0x6F, 0x48, 0x3D, 0x00, 0x00, 0x72, 0x6F, 0x00, 0x00, 0x49, 
+	0x2D, 0x00, 0x54, 0x2D, 0x47, 0x0D, 0x07, 0x0E, 0x12, 0x06, 0x04, 0x12, 0x0A, 0x0F, 0x12, 0x09, 
+	0x0C, 0x12, 0x08, 0x11, 0x05, 0x02, 0x10, 0x01, 0x00, 0x00, 0x72, 0x72, 0x45, 0x20, 0x79, 0x65, 
+	0x4B, 0x45, 0x52, 0x00, 0x52, 0x4E, 0x49, 0x20, 0x46, 0x43, 0x00, 0x54, 0x49, 0x6C, 0x65, 0x44, 
+	0x6D, 0x52, 0x20, 0x61, 0x74, 0x52, 0x2F, 0x66, 0x65, 0x00, 0x6C, 0x61, 0x65, 0x00, 0x77, 0x61, 
+	0x52, 0x20, 0x58, 0x41, 0x4D, 0x4D, 0x43, 0x00, 0x49, 0x4C, 0x45, 0x44, 0x5F, 0x4D, 0x5F, 0x41, 
+	0x54, 0x4D, 0x5F, 0x58, 0x41, 0x54, 0x00, 0x4E, 0x49, 0x73, 0x65, 0x6C, 0x78, 0x69, 0x44, 0x00, 
+	0x73, 0x44, 0x00, 0x66, 0x66, 0x2F, 0x46, 0x46, 0x49, 0x69, 0x42, 0x00, 0x4E, 0x72, 0x47, 0x20, 
+	0x67, 0x4E, 0x00, 0x64, 0x61, 0x45, 0x2D, 0x67, 0x65, 0x00, 0x65, 0x67, 0x64, 0x00, 0x66, 0x65, 
+	0x52, 0x41, 0x20, 0x49, 0x2D, 0x72, 0x65, 0x74, 0x66, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
+	0xFF, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x20, 0x00, 0x12, 
+	0xA0, 0x20, 0x00, 0x02, 0x28, 0x00, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x16, 0x54, 0x00, 0xFF, 0x02, 
+	0x01, 0x04, 0x00, 0x04, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0x87, 0x6A, 0xAE, 0xF1, 0x18, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0x45, 0x02, 0xFF, 0xFF, 0xE5, 0x2C, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater.h for-diff/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater.h
--- caf/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater.h	2015-10-08 21:26:28.072845000 +0900
@@ -0,0 +1,47 @@
+/*
+ * MMS100A Config Updater public ㅻ
+ * !!二쇱!!
+ * 댁⑹ 硫⑸
+ */
+#ifndef __MMS100A_CONFIG_UPDATER_H__
+#define __MMS100A_CONFIG_UPDATER_H__
+
+#define MFS_SECTION_	4
+
+/*
+ * Return values
+ */
+typedef enum
+{
+	MRET_NONE = -1,
+	MRET_SUCCESS = 0,
+	MRET_FILE_OPEN_ERROR,
+	MRET_FILE_CLOSE_ERROR,
+	MRET_FILE_FORMAT_ERROR,
+	MRET_WRITE_BUFFER_ERROR,
+	MRET_I2C_ERROR,
+	MRET_CRC_ERROR,
+	MRET_VALIDATION_ERROR,
+	MRET_COMPATIVILITY_ERROR,
+	MRET_LIMIT
+} eMFSRet_t;
+
+/*
+ * Interfaces
+ */
+extern eMFSRet_t MFS_config_update(unsigned char slave_addr);
+extern eMFSRet_t MFS_config_validate(void);
+
+struct firmware_data {
+	char *chip;
+	char *section_name;
+	char *compatible_section_name;
+	int section_version;
+	int start_page_addr;
+	int end_page_addr;
+	int compatible_version;
+	int length;
+	unsigned char data[];
+};
+
+#endif //__MMS100A_CONFIG_UPDATER_H__
diff -urN caf/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater_Customize.c for-diff/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater_Customize.c
--- caf/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater_Customize.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater_Customize.c	2015-10-08 21:26:20.152845000 +0900
@@ -0,0 +1,75 @@
+/*
+ * MMS100A Config Updater를 customize하기 위한 소스입니다.
+ * 포팅을 위해 수정하셔야 하는 소스입니다.
+ */
+#include "MMS100A_Config_Updater_Customize.h"
+
+/*
+ *  TODO: 통신에 사용하는 slave address를 기록해 주세요.
+ * !! 주의를 부탁드립니다 !!
+ * Config 실패 시 사용되는 default slave address는 0x48 입니다.
+ * 해당 slave address를 사용하는 I2C slave device가 없는지 확인해 주시고,
+ * 만일 있다면 MMM100A를 다운로드 할 때는 해당 slave device를 disable 시켜 주십시오.
+ */
+const unsigned char mfs_i2c_slave_addr = 0x48;
+
+/*
+ * TODO: .mbin file의 경로를 설정해 주세요.
+ * 마지막 경로 표시문자(e.g. slash)를 함께 입력해 주세요.
+ */
+char* mfs_mbin_path = "./";
+
+/*
+ * TODO: .mbin을 제외한 각section의 filename을 설정해 주세요.
+ */
+
+char section_filename[MFS_SECTION_][255] =
+{ "BOOT", "CORE", "PRIV", "PUBL" };
+
+/*현재 setting된 slave address를 알고 싶을 때 참조하세요.*/
+uint8_t mfs_slave_addr;
+
+mfs_bool_t MFS_I2C_set_slave_addr(unsigned char _slave_addr)
+{
+//namjja : change download addr
+//	mfs_slave_addr = _slave_addr << 1; /*수정하지 마십시오.*/
+	mfs_slave_addr = _slave_addr; /*수정하지 마십시오.*/
+
+	/* TODO: I2C slave address를 셋팅해 주세요. */
+
+	return MFS_TRUE;
+}
+
+mfs_bool_t MFS_I2C_read_with_addr(unsigned char* _read_buf, unsigned char _addr,
+		int _length)
+{
+	/* TODO: I2C로 1 byte address를 쓴 후 _length 갯수만큼 읽어 _read_buf에 채워 주세요. */
+	if (!melfas_write(mfs_slave_addr, &_addr, 1))
+		return MFS_FALSE;
+	if (!melfas_read(mfs_slave_addr, _read_buf, _length))
+		return MFS_FALSE;
+
+	return MFS_TRUE;
+}
+
+//mfs_bool_t MFS_I2C_write(const unsigned char* _write_buf, int _length)
+mfs_bool_t MFS_I2C_write(unsigned char* _write_buf, int _length)
+{
+	/*
+	 * TODO: I2C로 _write_buf의 내용을 _length 갯수만큼 써 주세요.
+	 * address를 명시해야 하는 인터페이스의 경우, _write_buf[0]이 address가 되고
+	 * _write_buf+1부터 _length-1개를 써 주시면 됩니다.
+	 */
+	if (!melfas_write(mfs_slave_addr, _write_buf, _length))
+		return MFS_FALSE;
+	return MFS_TRUE;
+}
+
+void MFS_debug_msg(const char* fmt, int a, int b, int c)
+{
+	printk(fmt, a, b, c);
+}
+void MFS_ms_delay(int msec)
+{
+	udelay(msec*1000);
+}
diff -urN caf/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater_Customize.h for-diff/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater_Customize.h
--- caf/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater_Customize.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater_Customize.h	2015-10-08 21:26:28.104845000 +0900
@@ -0,0 +1,53 @@
+/*
+ * MMS100A Config Updater를 customize하기 위한 헤더입니다.
+ * 포팅을 위해 수정하셔야 하는 헤더입니다.
+ */
+#ifndef __MMS100A_CONFIG_UPDATER_CUSTOMIZE_H__
+#define __MMS100A_CONFIG_UPDATER_CUSTOMIZE_H__
+
+/*
+ * TODO: 필요한 header 파일을 include해 주세요.
+ * 필요한 인터페이스는 아래와 같습니다.
+ * memset, malloc, free, strcmp, strstr, 디버그 메세지를 위한 함수 등.
+ */
+#if 0
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#endif
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/string.h>
+#include <linux/firmware.h>
+#include <linux/slab.h>
+#include "melfas_ts.h"
+
+#include "MMS100A_Config_Updater.h"
+
+//#include "BOOT.c"
+//#include "CORE.h"
+//#include "PRIV.h"
+//#include "PUBL.h"
+
+/*
+ * Boolean 관련 type 및 define.
+ * 그대로 두셔도 되고, system에 맞게 고쳐 주셔도 됩니다.
+ */
+typedef int mfs_bool_t;
+#define MFS_TRUE		(0==0)
+#define MFS_FALSE		(0!=0)
+
+
+extern const unsigned char mfs_i2c_slave_addr;
+
+extern char section_filename[MFS_SECTION_][255];
+extern char* mfs_mbin_path;
+extern mfs_bool_t MFS_I2C_set_slave_addr(unsigned char _slave_addr);
+extern mfs_bool_t MFS_I2C_read_with_addr(unsigned char* _read_buf, unsigned char _addr, int _length);
+extern mfs_bool_t MFS_I2C_write(unsigned char* _write_buf, int _length);
+extern void MFS_debug_msg(const char* fmt, int a, int b, int c);
+extern void MFS_ms_delay(int msec);
+int melfas_read(uint8_t slave_addr, uint8_t* buffer, int packet_len);
+int melfas_write(uint8_t slave_addr, uint8_t* buffer, int packet_len);
+int melfas_power(int on);
+#endif
diff -urN caf/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater_V02.c for-diff/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater_V02.c
--- caf/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater_V02.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/MMS100A_Config_Updater_V02.c	2015-10-08 21:26:20.168845000 +0900
@@ -0,0 +1,581 @@
+/*
+ * MMS100A Config Updater의 알고리듬이 구현된 부분입니다.
+ * !!주의!!
+ * 내용을 수정하시면 안됩니다.
+ */
+#include "MMS100A_Config_Updater_Customize.h"
+#include "BOOT_120529_v28.c"
+#include "CORE_120529_v28.c"
+#include "PRIV_120529_v28.c"
+#include "PUBL_120529_v28.c"
+
+#define MFS_HEADER_		3
+#define MFS_DATA_		1024
+#define MFS_TAIL_		2
+
+#define PACKET_			(MFS_HEADER_ + MFS_DATA_ + MFS_TAIL_)
+
+typedef enum
+{
+	MSEC_NONE = -1,
+	MSEC_BOOTLOADER = 0,
+	MSEC_CORE,
+	MSEC_PRIVATE_CONFIG,
+	MSEC_PUBLIC_CONFIG,
+	MSEC_LIMIT
+} eMFSSection_t;
+
+/*
+ * State Registers
+ */
+#define ISC_ADDR_VERSION						0xE1
+#define ISC_ADDR_SECTION_PAGE_INFO				0xE5
+
+/*
+ * Config Update Commands
+ */
+#define ISC_CMD_ENTER_ISC						0x5F
+#define ISC_CMD_ENTER_ISC_PARA1					0x01
+#define ISC_CMD_UPDATE_MODE						0xAE
+#define ISC_SUBCMD_ENTER_UPDATE					0x55
+#define ISC_SUBCMD_DATA_WRITE					0XF1
+#define ISC_SUBCMD_LEAVE_UPDATE_PARA1			0x0F
+#define ISC_SUBCMD_LEAVE_UPDATE_PARA2			0xF0
+#define ISC_CMD_CONFIRM_STATUS					0xAF
+#define ISC_STATUS_UPDATE_MODE					0x01
+#define ISC_STATUS_CRC_CHECK_SUCCESS			0x03
+
+//typedef int
+
+#if 0
+#define MFS_CHAR_2_BCD(num)	\
+	(((num/10)<<4) + (num%10))
+#else
+#define MFS_CHAR_2_BCD(num) num
+#endif
+#define MFS_MAX(x, y)		( ((x) > (y))? (x) : (y) )
+
+typedef struct
+{
+	unsigned char version;
+	unsigned char compatible_version;
+	unsigned char start_addr;
+	unsigned char end_addr;
+} tMFSFirmInfo_t;
+
+#define MFS_DEFAULT_SLAVE_ADDR	0x48
+
+#define SECTION_NAME_		5
+//static const char section_name[MFS_SECTION_][SECTION_NAME_] =
+//{ "BOOT", "CORE", "PRIV", "PUBL" };
+static const struct firmware_data  *fw_data[MFS_SECTION_];
+
+static const unsigned char crc0buf[31] =
+{ 0x1D, 0x2C, 0x05, 0x34, 0x95, 0xA4, 0x8D, 0xBC, 0x59, 0x68, 0x41, 0x70, 0xD1,
+		0xE0, 0xC9, 0xF8, 0x3F, 0x0E, 0x27, 0x16, 0xB7, 0x86, 0xAF, 0x9E, 0x7B,
+		0x4A, 0x63, 0x52, 0xF3, 0xC2, 0xEB };
+
+static const unsigned char crc1buf[31] =
+{ 0x1E, 0x9C, 0xDF, 0x5D, 0x76, 0xF4, 0xB7, 0x35, 0x2A, 0xA8, 0xEB, 0x69, 0x42,
+		0xC0, 0x83, 0x01, 0x04, 0x86, 0xC5, 0x47, 0x6C, 0xEE, 0xAD, 0x2F, 0x30,
+		0xB2, 0xF1, 0x73, 0x58, 0xDA, 0x99 };
+
+static tMFSFirmInfo_t new_info[MFS_SECTION_];
+static tMFSFirmInfo_t old_info[MFS_SECTION_];
+static unsigned char *buf;
+
+static mfs_bool_t is_config_recovery_mode(void);
+static eMFSRet_t read_old_firm_info(void);
+static eMFSRet_t check_compatibility(mfs_bool_t update[MFS_SECTION_],
+		unsigned char compatible_version[MFS_SECTION_]);
+static eMFSRet_t enter_ISC_mode(void);
+static eMFSRet_t enter_config_update_mode(void);
+static void check_renewed_section(mfs_bool_t update[MFS_SECTION_]);
+static eMFSRet_t clear_validate_markers(const mfs_bool_t update[MFS_SECTION_]);
+// static eMFSRet_t exit_config_update_mode(void);
+static int update_sections(mfs_bool_t update[MFS_SECTION_]);
+static eMFSRet_t __clear_page(unsigned char _page_addr);
+static eMFSRet_t open_mbin(void);
+static eMFSRet_t read_new_firm_info(void);
+static eMFSRet_t close_mbin(void);
+
+int MFS_config_update(unsigned char _slave_addr)
+{
+	eMFSRet_t ret;
+//	int i,j;
+
+	unsigned char compatible_version[MFS_SECTION_];
+	mfs_bool_t update[MFS_SECTION_] =
+	{ 0, };
+
+	printk("namjja : %s\n", __func__);
+
+	buf =  kmalloc(PACKET_, GFP_KERNEL);
+
+	/*Config 모드 진입 전에는 설정된 slave address를 사용.*/
+	MFS_I2C_set_slave_addr(mfs_i2c_slave_addr);
+
+	/* I2C 통신을 시도하여 실패하면 config recovery mode로 보아 slave address를 default value로 변경 */
+	if (is_config_recovery_mode())
+		MFS_I2C_set_slave_addr(MFS_DEFAULT_SLAVE_ADDR);
+	//old firmware version check
+
+	if ((ret = read_old_firm_info()) && ret != MRET_SUCCESS)
+		goto MCSDL_DOWNLOAD_FINISH;
+
+//	open_mbin(fh, dev);
+	if ((ret = open_mbin()) && ret != MRET_SUCCESS)
+		goto MCSDL_DOWNLOAD_FINISH;
+
+	if ((ret = read_new_firm_info()) && ret != MRET_SUCCESS)
+		goto MCSDL_DOWNLOAD_FINISH;
+
+	check_renewed_section(update);
+
+	if ((ret = check_compatibility(update, compatible_version))
+			&& ret != MRET_SUCCESS)
+		goto MCSDL_DOWNLOAD_FINISH;
+
+	if ((ret = enter_ISC_mode()) && ret != MRET_SUCCESS)
+		goto MCSDL_DOWNLOAD_FINISH;
+
+	/*Config 모드 진입 후 slave address를 default value로 변경.*/
+	MFS_I2C_set_slave_addr(MFS_DEFAULT_SLAVE_ADDR);
+
+	if ((ret = enter_config_update_mode()) && ret != MRET_SUCCESS)
+		goto MCSDL_DOWNLOAD_FINISH;
+
+	/* Clear last page of each section. */
+	if ((ret = clear_validate_markers(update)) && ret != MRET_SUCCESS)
+		goto MCSDL_DOWNLOAD_FINISH;
+
+	if ((ret = update_sections(update)) && ret != MRET_SUCCESS)
+	{
+		if ((ret = clear_validate_markers(update)) && ret != MRET_SUCCESS)
+			goto MCSDL_DOWNLOAD_FINISH;
+	}
+
+//	if ((ret = exit_config_update_mode()) && ret != MRET_SUCCESS)
+//		goto MCSDL_DOWNLOAD_FINISH;
+
+	MFS_debug_msg("FIRMWARE_UPDATE_FINISHED!!!\n\n", 0, 0, 0);
+
+	MCSDL_DOWNLOAD_FINISH:
+
+	kfree(buf);
+
+	close_mbin();
+
+	MFS_I2C_set_slave_addr(mfs_i2c_slave_addr);
+
+	// Reboot 해야 합니다!!!
+	melfas_power(0);
+	MFS_ms_delay(1000);
+	melfas_power(1);
+	return ret;
+}
+
+static mfs_bool_t is_config_recovery_mode(void)
+{
+	unsigned char rb;
+	if (!MFS_I2C_read_with_addr(&rb, ISC_ADDR_VERSION, 1))
+		return MFS_TRUE; //Fail 시 recovery mode로 인식.
+	return MFS_FALSE;
+}
+
+static void check_renewed_section(mfs_bool_t update[MFS_SECTION_])
+{
+	int i;
+	for (i = 0; i < MFS_SECTION_; i++)
+	{
+		MFS_debug_msg("<MELFAS> Section %d %d %d.\n", i, new_info[i].version, old_info[i].version);
+		if (new_info[i].version == 0
+				|| new_info[i].version != old_info[i].version)
+		{
+			update[i] = MFS_TRUE;
+			MFS_debug_msg("<MELFAS> Section %d will be updated.\n", i, 0, 0);
+		}
+	}
+}
+
+eMFSRet_t MFS_config_validate(void)
+{
+	int i;
+	eMFSRet_t ret;
+	//TODO: 설정된 I2C slave address로 version을 읽어서 정상 다운로드 여부를 확인!
+	MFS_I2C_set_slave_addr(mfs_i2c_slave_addr);
+
+	if ((ret = read_old_firm_info()) && ret != MRET_SUCCESS)
+		return ret;
+
+	for (i = 0; i < MFS_SECTION_; i++)
+		if (old_info[i].version != new_info[i].version)
+			return MRET_VALIDATION_ERROR;
+
+	return MRET_SUCCESS;
+}
+
+eMFSRet_t read_old_firm_info(void)
+{
+	int i;
+	unsigned char readbuf[8];
+
+	if (!MFS_I2C_read_with_addr(readbuf, ISC_ADDR_VERSION, 4))
+		return MRET_I2C_ERROR;
+
+	MFS_debug_msg("VER INFO READ\n", 0, 0, 0);
+	for (i = 0; i < MFS_SECTION_; i++)
+	{
+		old_info[i].version = readbuf[i];
+		MFS_debug_msg("\tSection %d: 0x%02X\n", i, old_info[i].version, 0);
+	}
+	old_info[MSEC_CORE].compatible_version = old_info[MSEC_BOOTLOADER].version;
+	old_info[MSEC_PRIVATE_CONFIG].compatible_version =
+			old_info[MSEC_PUBLIC_CONFIG].compatible_version =
+					old_info[MSEC_CORE].version;
+
+	if (!MFS_I2C_read_with_addr(readbuf, ISC_ADDR_SECTION_PAGE_INFO, 8))
+		return MRET_I2C_ERROR;
+
+	for (i = MFS_SECTION_; i--;)
+	{
+		old_info[i].start_addr = readbuf[i];
+//		MFS_debug_msg("Start Page Addr of Section %d: %d\n", i,
+//				old_info[i].start_addr, 0); // for debug
+		old_info[i].end_addr = readbuf[i + MFS_SECTION_];
+		MFS_debug_msg("End Page   Addr of Section %d: %d\n", i,
+				old_info[i].end_addr, 0);
+	}
+	return MRET_SUCCESS;
+}
+
+eMFSRet_t check_compatibility(mfs_bool_t update[MFS_SECTION_],
+		unsigned char expected_compat_version[MFS_SECTION_])
+{
+//#if 0 // namjja disable
+#if 1
+	int i, nRet = MRET_SUCCESS;
+	// check the compatible version
+	if (update[MSEC_BOOTLOADER])
+		expected_compat_version[MSEC_CORE] = new_info[MSEC_BOOTLOADER].version;
+	else
+		expected_compat_version[MSEC_CORE] = old_info[MSEC_BOOTLOADER].version;
+
+	if (update[MSEC_CORE])
+		expected_compat_version[MSEC_PUBLIC_CONFIG] =
+				expected_compat_version[MSEC_PRIVATE_CONFIG] =
+						new_info[MSEC_CORE].version;
+	else
+		expected_compat_version[MSEC_PUBLIC_CONFIG] =
+				expected_compat_version[MSEC_PRIVATE_CONFIG] =
+						old_info[MSEC_CORE].version;
+
+	//compare the compatible version
+	for (i = MSEC_CORE; i <= MSEC_PUBLIC_CONFIG; i++)
+	{
+		if (update[i]
+				&& expected_compat_version[i] != new_info[i].compatible_version)
+		{
+			MFS_debug_msg("<MELFAS> expected_compat_version[%d] = 0x%2X\n", i,
+					expected_compat_version[i], 0);
+			MFS_debug_msg("<MELFAS>	new_info[%d].compatible_version = 0x%2X\n",
+					i, new_info[i].compatible_version, 0);
+			MFS_debug_msg("<MELFAS> Fimware Compatible Version error!!!\n", 0,
+					0, 0);
+			nRet = MRET_COMPATIVILITY_ERROR;
+		}
+		else if (!update[i]
+				&& expected_compat_version[i] != old_info[i].compatible_version)
+		{
+			MFS_debug_msg("<MELFAS> expected_compat_version[%d] = 0x%2X\n", i,
+					expected_compat_version[i], 0);
+			MFS_debug_msg("<MELFAS>	old_info[%d].compatible_version = 0x%2X\n",
+					i, old_info[i].compatible_version, 0);
+			MFS_debug_msg("<MELFAS> Fimware Compatible Version error!!!\n", 0,
+					0, 0);
+			nRet = MRET_COMPATIVILITY_ERROR;
+		}
+	}
+
+	return nRet;
+#else
+	return MRET_SUCCESS;
+#endif
+
+}
+
+eMFSRet_t enter_ISC_mode(void)
+{
+	unsigned char write_buffer[2];
+	MFS_debug_msg("ENTER_ISC_MODE\n", 0, 0, 0);
+	write_buffer[0] = ISC_CMD_ENTER_ISC; // command
+	write_buffer[1] = ISC_CMD_ENTER_ISC_PARA1; // sub_command
+	if (write_buffer[0] != ISC_CMD_ENTER_ISC
+			|| write_buffer[1] != ISC_CMD_ENTER_ISC_PARA1)
+	{
+		MFS_debug_msg("ISC write buffer error!!!\n", 0, 0, 0);
+		return MRET_WRITE_BUFFER_ERROR;
+	}
+	if (!MFS_I2C_write(write_buffer, 2))
+	{
+		MFS_debug_msg("ISC mode enter failed!!!\n", 0, 0, 0);
+		return MRET_I2C_ERROR;
+	}
+	MFS_ms_delay(50);
+	return MRET_SUCCESS;
+}
+
+static eMFSRet_t enter_config_update_mode(void)
+{
+#define UPDATE_MODE_ENTER_CMD_		10
+	uint8_t update_mode_enter_cmd[UPDATE_MODE_ENTER_CMD_] =
+	{ ISC_CMD_UPDATE_MODE, ISC_SUBCMD_ENTER_UPDATE, 0, 0, 0, 0, 0, 0, 0, 0 };
+	unsigned char readbuf;
+	int i;
+
+	MFS_debug_msg("FIRMWARE_UPDATE_MODE_ENTER\n\n", 0, 0, 0);
+
+	if (update_mode_enter_cmd[0] != ISC_CMD_UPDATE_MODE
+			|| update_mode_enter_cmd[1] != ISC_SUBCMD_ENTER_UPDATE)
+	{
+		MFS_debug_msg("ISC write buffer error!!!\n", 0, 0, 0);
+		return MRET_WRITE_BUFFER_ERROR;
+	}
+	for (i = 2; i < UPDATE_MODE_ENTER_CMD_; i++)
+	{
+		if (update_mode_enter_cmd[i] != 0)
+		{
+			MFS_debug_msg("ISC write buffer error!!!\n", 0, 0, 0);
+			return MRET_WRITE_BUFFER_ERROR;
+		}
+	}
+
+	if (!MFS_I2C_write(update_mode_enter_cmd, UPDATE_MODE_ENTER_CMD_))
+	{
+		MFS_debug_msg("Update mode enter failed!!!\n", 0, 0, 0);
+		return MRET_I2C_ERROR;
+	}
+
+	readbuf = 0;
+
+	while (!readbuf)
+	{
+		if (!MFS_I2C_read_with_addr(&readbuf, ISC_CMD_CONFIRM_STATUS, 1))
+			return MRET_I2C_ERROR;
+		// delay  1ms
+		if (readbuf == ISC_STATUS_UPDATE_MODE)
+			MFS_debug_msg("Firmware update mode enter success!!!\n", 0, 0, 0);
+		else
+		{
+			MFS_debug_msg("Error detected!! status: 0x%02x.\n", readbuf, 0, 0);
+			MFS_ms_delay(1000);
+		}
+	}
+
+	return MRET_SUCCESS;
+}
+
+static eMFSRet_t clear_validate_markers(const mfs_bool_t update[MFS_SECTION_])
+{
+	eMFSRet_t ret = MRET_SUCCESS;
+	int i, j;
+	for (i = MSEC_CORE; i <= MSEC_PUBLIC_CONFIG; i++)
+	{
+#if 1
+		if (update[i] && old_info[i].end_addr <= 30)
+		{
+//			MFS_debug_msg("old clear section[%d]: %d.\n", i, old_info[i].end_addr, 0); // for debug
+			ret = (eMFSRet_t) __clear_page((unsigned char)old_info[i].end_addr);
+			if (ret != MRET_SUCCESS)
+				goto ERROR_HANDLER;
+		}
+#endif
+	}
+	for (i = MSEC_CORE; i <= MSEC_PUBLIC_CONFIG; i++)
+	{
+		if (update[i])
+		{
+			mfs_bool_t same_addr = MFS_FALSE;
+			for (j = MSEC_CORE; j <= MSEC_PUBLIC_CONFIG; j++)
+				if (new_info[j].end_addr == old_info[i].end_addr)
+				{
+					same_addr = MFS_TRUE;
+					break;
+				}
+			/*
+			 * old info의 marker section 외에 추가된 marker section을 erase.
+			 */
+			if (!same_addr)
+			{
+				ret = (eMFSRet_t) __clear_page((unsigned char)new_info[i].end_addr);
+				if (ret != MRET_SUCCESS)
+					goto ERROR_HANDLER;
+			}
+		}
+	}
+	ERROR_HANDLER: return ret;
+}
+
+static int update_sections(mfs_bool_t update[MFS_SECTION_])
+{
+	int i;
+	unsigned char addr, readbuf;
+	int page = 0;
+	unsigned char *buffer;
+
+	for (i = 0; i < MFS_SECTION_; i++)
+	{
+		if (update[i])
+		{
+			MFS_debug_msg("Section %d update start...\n", i, 0, 0);
+
+			for (addr = new_info[i].start_addr; addr <= new_info[i].end_addr;
+					addr++)
+			{
+				page = addr - new_info[i].start_addr;
+				buffer = (unsigned char *)&fw_data[i]->data[page*PACKET_];
+				//buffer = (unsigned char *)fw_data[i].data;
+				//buffer = (unsigned char *)melfas_BOOT.data;
+
+//				printk("namjja : page : %d\n", page*PACKET_);
+
+				MFS_debug_msg("%dth page update start...\n", addr, 0, 0);
+
+				if (buffer[0] != ISC_CMD_UPDATE_MODE
+						|| buffer[1] != ISC_SUBCMD_DATA_WRITE || buffer[2] != addr)
+				{
+					//MFS_debug_msg("ISC write buffer error!!!\n", 0, 0, 0);
+					MFS_debug_msg("ISC write buffer error!!! [%x][%x][%x]\n", buffer[0], buffer[1], buffer[2]);
+					return MRET_WRITE_BUFFER_ERROR;
+				}
+
+				if (!MFS_I2C_write(buffer, PACKET_))
+//				if (!MFS_I2C_write(buffer, MELFAS_BOOT_nLength_2))
+					return MRET_I2C_ERROR;
+
+				if (!MFS_I2C_read_with_addr(&readbuf, ISC_CMD_CONFIRM_STATUS,
+						1))
+					return MRET_I2C_ERROR;
+
+				if (readbuf == ISC_STATUS_CRC_CHECK_SUCCESS)
+				{
+					MFS_debug_msg("Page update succeeded.\n", addr, 0, 0);
+				}
+				else
+				{
+					MFS_debug_msg("Error: status is 0x%02x.\n", readbuf, 0, 0);
+					return MRET_CRC_ERROR;
+				}
+			}
+			MFS_debug_msg("Update succeeded.\n", 0, 0, 0);
+			update[i] = MFS_FALSE;
+		}
+	}
+
+	return MRET_SUCCESS;
+}
+#if 0
+eMFSRet_t exit_config_update_mode(void)
+{
+	unsigned char write_buffer[3];
+
+	MFS_debug_msg("LEAVE_FIRMWARE_UPDATE_MODE\n\n", 0, 0, 0);
+
+	write_buffer[0] = ISC_CMD_UPDATE_MODE; // command
+	write_buffer[1] = ISC_SUBCMD_LEAVE_UPDATE_PARA1;
+	write_buffer[2] = ISC_SUBCMD_LEAVE_UPDATE_PARA2;
+	if (!MFS_I2C_write(write_buffer, 3))
+	return MRET_I2C_ERROR;//delay 5ms
+	MFS_ms_delay(5);
+	return MRET_SUCCESS;
+}
+#endif
+
+static eMFSRet_t __clear_page(unsigned char _page_addr)
+{
+	unsigned char readbuf;
+	unsigned char crc0 = crc0buf[_page_addr];
+	unsigned char crc1 = crc1buf[_page_addr];
+
+//	printk("namjja : %s\n", __func__);
+	memset(buf, 0xFF, PACKET_);
+
+	buf[0] = ISC_CMD_UPDATE_MODE; // command
+	buf[1] = ISC_SUBCMD_DATA_WRITE; // sub_command
+	buf[2] = _page_addr;
+	buf[MFS_HEADER_ + MFS_DATA_ + 0] = crc0;
+	buf[MFS_HEADER_ + MFS_DATA_ + 1] = crc1;
+
+	MFS_debug_msg("%dth page clear start...", _page_addr, 0, 0);
+
+	if (buf[0] != ISC_CMD_UPDATE_MODE || buf[1] != ISC_SUBCMD_DATA_WRITE
+			|| buf[2] != _page_addr)
+	{
+		MFS_debug_msg("ISC write buffer error!!!\n", 0, 0, 0);
+		return MRET_WRITE_BUFFER_ERROR;
+	}
+
+	if (!MFS_I2C_write(buf, PACKET_))
+		return MRET_I2C_ERROR;
+	if (!MFS_I2C_read_with_addr(&readbuf, ISC_CMD_CONFIRM_STATUS, 1))
+		return MRET_I2C_ERROR;
+
+	if (readbuf != ISC_STATUS_CRC_CHECK_SUCCESS)
+	{
+		MFS_debug_msg("Page clear failed!! Status: 0x%2X\n", readbuf, 0, 0);
+		return MRET_CRC_ERROR;
+	}
+
+	MFS_debug_msg("Page clear succeeded!!\n", 0, 0, 0);
+	return MRET_SUCCESS;
+
+}
+
+static eMFSRet_t open_mbin(void)
+{
+	fw_data[0] = &melfas_BOOT;
+	fw_data[1] = &melfas_CORE;
+	fw_data[2] = &melfas_PRIV;
+	fw_data[3] = &melfas_PUBL;
+
+	return MRET_SUCCESS;
+}
+
+static eMFSRet_t read_new_firm_info(void)
+{
+	eMFSRet_t ret = MRET_SUCCESS;
+//	int i, j;
+	int i;
+
+	for (i = 0; i < MFS_SECTION_; i++)
+	{
+//		printk("namjja : SECTION_NAME [%s]\n", fw_data[i]->section_name);
+
+		new_info[i].version = MFS_CHAR_2_BCD(fw_data[i]->section_version);
+//		printk("namjja : VERSION [%d]\n", MFS_CHAR_2_BCD(fw_data[i]->section_version));	
+		new_info[i].start_addr = fw_data[i]->start_page_addr;
+//		printk("namjja : START_ADD [%d]\n", fw_data[i]->start_page_addr);
+
+		new_info[i].end_addr = fw_data[i]->end_page_addr;
+//		printk("namjja : END_PAGE_ADDR [%d]\n", fw_data[i]->end_page_addr);
+
+		new_info[i].compatible_version = MFS_CHAR_2_BCD(fw_data[i]->compatible_version);
+//namjja : disable debug msg
+#if 0
+		printk("namjja : COMPATIBLE_VERSION [%d]\n", fw_data[i]->compatible_version);
+		printk("namjja : data ");
+		for (j=0; j < 10; j++)
+		{
+			printk("[%x] ", fw_data[i]->data[j]);
+		}
+		printk("\n");
+#endif
+	}
+	return ret;
+}
+
+eMFSRet_t close_mbin()
+{
+	return MRET_SUCCESS;
+}
+
diff -urN caf/drivers/input/touchscreen/mms100_ts/Makefile for-diff/drivers/input/touchscreen/mms100_ts/Makefile
--- caf/drivers/input/touchscreen/mms100_ts/Makefile	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/Makefile	2015-09-13 14:02:59.785921000 +0900
@@ -0,0 +1,4 @@
+# Melfas MCS8000 Touchscreen controller drivers.
+# 22 Nov 2011, JhoonKim, <mailto:jhoonkim@kttech.co.kr>
+
+obj-$(CONFIG_KTTECH_TOUCH_MMS100)      += melfas_ts.o MMS100A_Config_Updater_V02.o MMS100A_Config_Updater_Customize.o
diff -urN caf/drivers/input/touchscreen/mms100_ts/PRIV_120223_v1.c for-diff/drivers/input/touchscreen/mms100_ts/PRIV_120223_v1.c
--- caf/drivers/input/touchscreen/mms100_ts/PRIV_120223_v1.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/PRIV_120223_v1.c	2015-10-08 21:26:20.184845000 +0900
@@ -0,0 +1,396 @@
+static const struct firmware_data melfas_PRIV = {
+	.section_name = "PRIV",
+	.section_version = 0x01,
+	.start_page_addr = 23,
+	.end_page_addr = 28,
+	.compatible_version = 0x45,
+	.length = 6174,
+	.data = {
+	0xAE, 0xF1, 0x17, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x52, 0x50, 0x28, 0x00, 0xB5, 0x08, 0x28, 
+	0x01, 0xD0, 0x02, 0xE0, 0x03, 0xD1, 0x1D, 0x4B, 0x0F, 0x4A, 0x0E, 0xE0, 0x18, 0x60, 0x1A, 0x68, 
+	0x1B, 0x4B, 0x0E, 0xD1, 0x12, 0x2B, 0x0C, 0x4B, 0x0E, 0x4A, 0x0D, 0x4A, 0x0E, 0x60, 0x1A, 0x60, 
+	0x1A, 0x4B, 0x0E, 0x4B, 0x0F, 0x4A, 0x0E, 0x4A, 0x0F, 0x60, 0x1A, 0x60, 0x1A, 0x4B, 0x0F, 0x4B, 
+	0x10, 0x4A, 0x0F, 0x4A, 0x10, 0x60, 0x1A, 0x60, 0x1A, 0x4B, 0x10, 0xF7, 0xFE, 0xE0, 0x01, 0xBD, 
+	0x08, 0xF8, 0xCF, 0x00, 0x00, 0x5D, 0x4D, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x11, 0x50, 0x00, 
+	0x00, 0x5E, 0x69, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x63, 0x1D, 0x20, 0x00, 0x00, 0x6C, 0x00, 
+	0x00, 0x63, 0x5D, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x68, 0x4D, 0x20, 0x00, 0x00, 0x18, 0x00, 
+	0x00, 0x5E, 0xB5, 0x20, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x5E, 0x05, 0x20, 0x00, 0x00, 0x20, 0x4B, 
+	0x10, 0xB5, 0x70, 0x68, 0x1C, 0x4A, 0x10, 0x42, 0x8C, 0x68, 0x11, 0x68, 0x1B, 0xD0, 0x17, 0x4C, 
+	0x0E, 0x68, 0x16, 0xB2, 0xF6, 0xB2, 0xDB, 0x21, 0x0F, 0x25, 0x06, 0x1C, 0x2A, 0x30, 0x01, 0x19, 
+	0x12, 0x43, 0x5A, 0x40, 0x0A, 0x78, 0x12, 0xD0, 0x09, 0x42, 0x82, 0xB2, 0xD2, 0x1C, 0x5A, 0xB2, 
+	0xDB, 0x3B, 0x1D, 0xD8, 0x00, 0x2A, 0x1D, 0x42, 0xB3, 0x1C, 0x13, 0x4B, 0x04, 0xD1, 0xEF, 0xBD, 
+	0x70, 0xB2, 0x18, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x09, 0xF0, 0x00, 
+	0x00, 0xFF, 0xFF, 0x1C, 0x03, 0xB5, 0x00, 0xD0, 0x1E, 0x2A, 0x11, 0x2A, 0x10, 0xD8, 0x02, 0xE0, 
+	0x04, 0xD1, 0x24, 0xD0, 0x0E, 0x2A, 0x40, 0xD1, 0x1F, 0x2A, 0x80, 0x1C, 0x02, 0xE0, 0x10, 0x20, 
+	0x00, 0x3A, 0x1E, 0xD8, 0x1A, 0x2A, 0x78, 0x20, 0x01, 0x4A, 0x0D, 0x4B, 0x0D, 0x73, 0xD3, 0x70, 
+	0x1A, 0x22, 0x0F, 0x4A, 0x0C, 0xE0, 0x13, 0x60, 0x91, 0x60, 0x50, 0xE0, 0x0E, 0x20, 0x01, 0x60, 
+	0xD0, 0x4A, 0x09, 0x20, 0x01, 0x61, 0x11, 0x1C, 0x02, 0xE0, 0x09, 0x20, 0x00, 0x3A, 0x0A, 0xD8, 
+	0x04, 0x2A, 0x32, 0x20, 0x01, 0x4A, 0x05, 0xE0, 0x00, 0x77, 0x53, 0xBD, 0x00, 0x20, 0x00, 0x20, 
+	0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x08, 0xF8, 0x20, 0x00, 0x0D, 0x48, 0x38, 
+	0x04, 0xB5, 0xF0, 0xD8, 0x4A, 0x28, 0x0C, 0xFC, 0xBA, 0xF7, 0xFF, 0x49, 0x49, 0x49, 0x11, 0x49, 
+	0x49, 0x1C, 0x49, 0x49, 0x07, 0x49, 0x49, 0x48, 0x21, 0x00, 0x07, 0x22, 0xD0, 0x4B, 0x21, 0x21, 
+	0x00, 0x00, 0x52, 0x69, 0x44, 0x18, 0x9F, 0x1C, 0x06, 0x1C, 0x0A, 0x49, 0x1E, 0xE0, 0x23, 0x68, 
+	0x0A, 0x23, 0x00, 0xDD, 0x02, 0x42, 0x9A, 0x18, 0xD3, 0x68, 0x4B, 0x4A, 0x1B, 0x0F, 0xDB, 0xE0, 
+	0x2C, 0x70, 0x13, 0x22, 0x00, 0x4B, 0x1A, 0xE0, 0x28, 0x60, 0x1A, 0x2D, 0x1E, 0x56, 0x1D, 0x23, 
+	0x00, 0xDD, 0x02, 0xE0, 0x22, 0x61, 0x73, 0xDD, 0x01, 0x2D, 0x0A, 0xE0, 0x04, 0x31, 0x01, 0xDA, 
+	0x01, 0x35, 0x05, 0xE0, 0x00, 0x32, 0x01, 0x30, 0x01, 0x24, 0x00, 0xD1, 0xED, 0x28, 0x17, 0x42, 
+	0xBB, 0x33, 0x20, 0x20, 0x00, 0xD0, 0x01, 0x4B, 0x09, 0xE7, 0xE8, 0x2A, 0x00, 0x61, 0x5C, 0x29, 
+	0x00, 0xD0, 0x03, 0x34, 0x01, 0xD0, 0x01, 0x2A, 0x05, 0x61, 0x5C, 0x69, 0x5A, 0xDC, 0x02, 0xDD, 
+	0x04, 0x2A, 0x64, 0x61, 0x5A, 0x22, 0x00, 0x22, 0x0D, 0x4B, 0x06, 0xBD, 0xF0, 0x70, 0x1A, 0x20, 
+	0x00, 0x08, 0xF8, 0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x11, 0x3D, 0x20, 
+	0x00, 0x0D, 0x38, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0x0E, 0xB5, 0x08, 0xB2, 0xDB, 0x88, 0x1B, 0xD0, 
+	0x02, 0x2B, 0x10, 0xD1, 0x13, 0x2B, 0xAF, 0xF7, 0xFD, 0xE0, 0x10, 0x4A, 0x0A, 0xFB, 0x7B, 0x70, 
+	0x13, 0x23, 0x00, 0x68, 0x11, 0x4A, 0x09, 0x68, 0x12, 0x4A, 0x09, 0xD0, 0x02, 0x42, 0x91, 0xFB, 
+	0x46, 0xF7, 0xFD, 0x4A, 0x07, 0xE0, 0x04, 0xE0, 0x01, 0x60, 0x13, 0xFB, 0x6A, 0xF7, 0xFD, 0x46, 
+	0xC0, 0xBD, 0x08, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x84, 0x20, 
+	0x00, 0x00, 0x80, 0x20, 0x00, 0x0D, 0x98, 0x68, 0x1A, 0x4B, 0x02, 0x60, 0x1A, 0x4B, 0x02, 0x46, 
+	0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x84, 0xF7, 0xFF, 0xB5, 0x08, 0xBD, 
+	0x08, 0xFF, 0xF3, 0x4A, 0x07, 0xB5, 0x00, 0x68, 0x10, 0x4B, 0x07, 0x42, 0x88, 0x68, 0x19, 0x68, 
+	0x10, 0xDB, 0x03, 0x1A, 0xC0, 0x68, 0x1B, 0x68, 0x10, 0xE0, 0x03, 0x30, 0x1E, 0x68, 0x1B, 0xBD, 
+	0x00, 0x1A, 0xC0, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x84, 0x4B, 0x05, 0xB5, 0x00, 0x32, 
+	0x01, 0x68, 0x1A, 0x68, 0x1A, 0x60, 0x1A, 0xDD, 0x02, 0x2A, 0x1D, 0x3A, 0x1E, 0x68, 0x1A, 0xBD, 
+	0x00, 0x60, 0x1A, 0x20, 0x00, 0x00, 0x84, 0x4A, 0xA6, 0xB5, 0xF7, 0xB2, 0x1B, 0x88, 0x13, 0xD1, 
+	0x00, 0x2B, 0xAE, 0xDC, 0x3B, 0xE1, 0xAC, 0xD1, 0x00, 0x2B, 0x0A, 0xDC, 0x18, 0xE0, 0xED, 0xD1, 
+	0x00, 0x2B, 0x05, 0xDC, 0x08, 0xE0, 0xCE, 0xD1, 0x00, 0x2B, 0x03, 0xDD, 0x00, 0xE0, 0xB7, 0x2B, 
+	0x02, 0xE0, 0xBE, 0xE1, 0xE1, 0xD0, 0x00, 0x2B, 0x07, 0xE0, 0xA4, 0xE0, 0xCC, 0xD1, 0x00, 0xE0, 
+	0xC4, 0xDA, 0x00, 0xD1, 0x00, 0x2B, 0x08, 0x2B, 0x09, 0xE0, 0xF7, 0xE1, 0xD5, 0xD0, 0x00, 0x2B, 
+	0x10, 0xE0, 0xC8, 0xE0, 0x7F, 0xD1, 0x00, 0x2B, 0x0C, 0xDC, 0x0B, 0xE0, 0xD9, 0xD1, 0x00, 0xE0, 
+	0xCF, 0xDA, 0x00, 0xD1, 0x00, 0x2B, 0x0D, 0x2B, 0x0F, 0xE0, 0xDD, 0xE1, 0xC5, 0xD0, 0x00, 0x2B, 
+	0x62, 0xE0, 0x48, 0xE1, 0xBD, 0xD1, 0x00, 0x2B, 0x61, 0xDC, 0x03, 0xE1, 0xBD, 0xD0, 0x00, 0x2B, 
+	0x64, 0xE1, 0xB3, 0xE1, 0xAB, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xA8, 0xE1, 0x97, 0xE1, 0xB6, 0xD1, 
+	0x00, 0x2B, 0xF4, 0xDC, 0x19, 0xE0, 0xF4, 0xD1, 0x00, 0x2B, 0xEF, 0xDC, 0x09, 0xE1, 0x81, 0xD1, 
+	0x00, 0x2B, 0xBF, 0x2B, 0xEE, 0xE1, 0x87, 0xE1, 0x76, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xAF, 0xE1, 
+	0x64, 0xE1, 0xA4, 0xD1, 0x00, 0x2B, 0xF1, 0xDA, 0x00, 0xE0, 0xC8, 0x2B, 0xF2, 0xE0, 0xC2, 0xE0, 
+	0xCB, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xF3, 0xE0, 0xD0, 0xE1, 0x98, 0xD1, 0x00, 0x2B, 0xF9, 0xDC, 
+	0x0B, 0xE1, 0x20, 0xD1, 0x00, 0x2B, 0xF6, 0xDA, 0x00, 0xE1, 0x00, 0x2B, 0xF7, 0xE0, 0xD8, 0xE1, 
+	0x02, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xF8, 0xE1, 0x0A, 0xE1, 0x88, 0xD1, 0x00, 0x2B, 0xFB, 0xDA, 
+	0x00, 0xE1, 0x22, 0x2B, 0xFC, 0xE1, 0x17, 0xE1, 0x26, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xFD, 0xE1, 
+	0x2B, 0xE1, 0x7C, 0xFF, 0x5E, 0xF7, 0xFF, 0x60, 0x20, 0x4C, 0x67, 0x2B, 0x00, 0x68, 0x23, 0xF7, 
+	0xFD, 0xD1, 0x01, 0x68, 0x23, 0xFA, 0xA7, 0x43, 0x5A, 0x22, 0x06, 0x4C, 0x64, 0x4B, 0x63, 0x25, 
+	0x00, 0x70, 0x1A, 0x4F, 0x63, 0x4E, 0x60, 0x68, 0x39, 0xE0, 0x12, 0x43, 0x51, 0x22, 0x06, 0x46, 
+	0x68, 0x4B, 0x61, 0xF7, 0xFF, 0x18, 0xC9, 0x23, 0x00, 0xFC, 0x37, 0x5C, 0x1A, 0x46, 0x68, 0x33, 
+	0x01, 0x54, 0xE2, 0xD1, 0xF9, 0x2B, 0x06, 0xFF, 0x50, 0xF7, 0xFF, 0x34, 0x06, 0x35, 0x01, 0x42, 
+	0x9D, 0x68, 0x33, 0x4E, 0xF0, 0xAE, 0xF1, 0x18, 0xE1, 0x51, 0xDB, 0xE9, 0x4A, 0x53, 0x49, 0x58, 
+	0x68, 0x13, 0x78, 0x0C, 0x43, 0x58, 0x20, 0x06, 0x42, 0x84, 0x23, 0x00, 0x4A, 0x51, 0xDA, 0x0A, 
+	0x4D, 0x4F, 0x78, 0x08, 0x5C, 0xC4, 0x18, 0x10, 0x33, 0x01, 0x19, 0x58, 0x2B, 0x08, 0x70, 0x04, 
+	0xE1, 0x3D, 0xD1, 0xF6, 0xE1, 0x3B, 0x60, 0x13, 0x23, 0x0F, 0x4A, 0x4E, 0x5E, 0x11, 0x20, 0x26, 
+	0x5F, 0x52, 0x25, 0x28, 0x12, 0x12, 0x11, 0x09, 0x40, 0x13, 0x43, 0x99, 0x18, 0xCB, 0x4A, 0x44, 
+	0x4B, 0x41, 0x70, 0x13, 0x23, 0x03, 0x88, 0x1A, 0x1A, 0x9A, 0xB2, 0x12, 0x8D, 0x19, 0x4B, 0x45, 
+	0x54, 0xD1, 0x4B, 0x3F, 0x88, 0x1A, 0x4B, 0x3C, 0xB2, 0x12, 0x23, 0x04, 0x4B, 0x41, 0x1A, 0x9A, 
+	0x4B, 0x3B, 0x8C, 0xD9, 0xE1, 0x1B, 0x54, 0xD1, 0x8C, 0xDA, 0x4B, 0x3F, 0x70, 0x1A, 0x4B, 0x38, 
+	0x4B, 0x3D, 0xE1, 0x16, 0x78, 0x1A, 0x33, 0x34, 0x70, 0x1A, 0x4B, 0x35, 0x4B, 0x39, 0xE1, 0x10, 
+	0x4B, 0x33, 0x7B, 0xDA, 0xE1, 0x0B, 0x70, 0x1A, 0x78, 0x1A, 0x4B, 0x38, 0x2A, 0x00, 0x4B, 0x30, 
+	0x22, 0x02, 0xD0, 0x02, 0xE1, 0x03, 0x70, 0x1A, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x34, 0xE1, 0x00, 
+	0x4B, 0x2B, 0x78, 0x1A, 0xE0, 0xFB, 0x70, 0x1A, 0x4B, 0x32, 0x88, 0x12, 0x78, 0x19, 0xB2, 0x12, 
+	0x1A, 0x9A, 0x23, 0x0B, 0x54, 0xD1, 0x4B, 0x26, 0x88, 0x1A, 0x4B, 0x23, 0xB2, 0x12, 0x4B, 0x2D, 
+	0x23, 0x0C, 0x78, 0x59, 0x4B, 0x22, 0x1A, 0x9A, 0x4B, 0x1F, 0x54, 0xD1, 0x4B, 0x2A, 0x88, 0x1A, 
+	0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0x0D, 0x54, 0xD1, 0x4B, 0x1D, 0x4B, 0x22, 0xE0, 0xE0, 
+	0x4B, 0x1B, 0x8D, 0xDA, 0xE0, 0xDB, 0x70, 0x1A, 0x78, 0x1A, 0x4B, 0x1E, 0x70, 0x1A, 0x4B, 0x18, 
+	0x21, 0x01, 0x4B, 0x15, 0x23, 0xF1, 0x88, 0x1A, 0x1A, 0x9A, 0xB2, 0x12, 0x54, 0xD1, 0x4B, 0x14, 
+	0x88, 0x1A, 0x4B, 0x11, 0xB2, 0x12, 0x4B, 0x17, 0x23, 0xF2, 0x78, 0x59, 0x4B, 0x10, 0x1A, 0x9A, 
+	0x4B, 0x0D, 0x54, 0xD1, 0x4B, 0x19, 0x88, 0x1A, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF3, 
+	0x54, 0xD1, 0x4B, 0x0B, 0x21, 0x01, 0x4B, 0x08, 0x23, 0xF4, 0x88, 0x1A, 0x1A, 0x9A, 0xB2, 0x12, 
+	0x54, 0xD1, 0x4B, 0x07, 0x88, 0x1A, 0x4B, 0x04, 0xB2, 0x12, 0x4B, 0x0A, 0x23, 0xF5, 0x78, 0x99, 
+	0x4B, 0x03, 0x1A, 0x9A, 0xE0, 0xAB, 0x54, 0xD1, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x0D, 0x98, 
+	0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x88, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x09, 0xF0, 
+	0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x01, 0xDD, 
+	0x20, 0x00, 0x01, 0xDF, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0x7C, 0x00, 0x00, 0x5B, 0xFF, 
+	0x4A, 0x49, 0x4B, 0x48, 0x18, 0xD3, 0x78, 0x1B, 0x4B, 0x48, 0x78, 0xDA, 0x4B, 0x48, 0x70, 0x1A, 
+	0x88, 0x1A, 0x49, 0x45, 0xB2, 0x12, 0x4B, 0x43, 0x18, 0xCB, 0x78, 0x1B, 0x23, 0xF7, 0x79, 0x19, 
+	0x4B, 0x42, 0x1A, 0x9A, 0x4B, 0x42, 0x54, 0xD1, 0x4B, 0x3F, 0x88, 0x1A, 0x79, 0x59, 0xB2, 0x12, 
+	0x1A, 0x9A, 0x23, 0xF8, 0x54, 0xD1, 0x4B, 0x3D, 0x88, 0x1A, 0x4B, 0x3D, 0xB2, 0x12, 0x4B, 0x3A, 
+	0x23, 0xF9, 0x79, 0x99, 0x4B, 0x39, 0x1A, 0x9A, 0x4B, 0x39, 0x54, 0xD1, 0x4B, 0x36, 0x88, 0x1A, 
+	0x79, 0xD9, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xFA, 0x54, 0xD1, 0x4B, 0x34, 0x88, 0x1A, 0x4B, 0x34, 
+	0xB2, 0x12, 0x4B, 0x31, 0x23, 0xFB, 0x7A, 0x19, 0x4B, 0x30, 0x1A, 0x9A, 0x4B, 0x30, 0x54, 0xD1, 
+	0x4B, 0x2D, 0x88, 0x1A, 0x7A, 0x59, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xFC, 0x54, 0xD1, 0x4B, 0x2B, 
+	0x88, 0x1A, 0x4B, 0x2B, 0xB2, 0x12, 0x4B, 0x28, 0x23, 0xFD, 0x7A, 0x99, 0x4B, 0x27, 0x1A, 0x9A, 
+	0xE0, 0x45, 0x54, 0xD1, 0x78, 0x1A, 0x4B, 0x27, 0x70, 0x1A, 0x4B, 0x24, 0xF9, 0x74, 0xF7, 0xFD, 
+	0x49, 0x25, 0xE0, 0x3E, 0x23, 0x00, 0x4A, 0x1F, 0x78, 0x10, 0x68, 0x0C, 0x18, 0x20, 0x4D, 0x1F, 
+	0x19, 0x58, 0x5C, 0xC4, 0x70, 0x04, 0x33, 0x01, 0xD1, 0xF5, 0x2B, 0x08, 0x4B, 0x1A, 0xE0, 0x30, 
+	0x4B, 0x1A, 0x7E, 0x1A, 0x4B, 0x1A, 0x70, 0x1A, 0x4B, 0x17, 0x88, 0x1A, 0x7D, 0xD9, 0xB2, 0x12, 
+	0x1A, 0x9A, 0x23, 0xEF, 0x54, 0xD1, 0x4B, 0x15, 0x4B, 0x18, 0xE0, 0x22, 0x4B, 0x13, 0x68, 0x1A, 
+	0xE0, 0x1D, 0x70, 0x1A, 0x4A, 0x0F, 0x49, 0x14, 0x68, 0x0C, 0x23, 0x00, 0x4D, 0x0F, 0x78, 0x10, 
+	0x5C, 0xC4, 0x18, 0x20, 0x33, 0x01, 0x19, 0x58, 0x2B, 0x08, 0x70, 0x04, 0xF7, 0xFD, 0xD1, 0xF5, 
+	0xE0, 0x0D, 0xF9, 0x43, 0x78, 0x1A, 0x4B, 0x0E, 0x70, 0x1A, 0x4B, 0x08, 0x4B, 0x0D, 0xE0, 0x08, 
+	0x4B, 0x06, 0x78, 0x9A, 0xE0, 0x03, 0x70, 0x1A, 0x78, 0xDA, 0x4B, 0x0A, 0x70, 0x1A, 0x4B, 0x03, 
+	0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x09, 0xAE, 0x50, 0x00, 0x00, 0x0C, 
+	0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x0D, 0x34, 0x20, 0x00, 0x08, 0xF8, 
+	0x00, 0x00, 0x5B, 0xFF, 0x20, 0x00, 0x00, 0x35, 0x4C, 0x0F, 0xB5, 0x73, 0x90, 0x00, 0x4D, 0x0F, 
+	0x68, 0x20, 0x91, 0x01, 0x30, 0x1F, 0x21, 0x1E, 0xF7, 0xFF, 0x68, 0x2E, 0x42, 0xB1, 0xFA, 0xAB, 
+	0x68, 0x20, 0xD0, 0xF7, 0x43, 0x50, 0x22, 0x06, 0x46, 0x69, 0x4B, 0x09, 0xF7, 0xFF, 0x18, 0xC0, 
+	0x68, 0x23, 0xFA, 0xAD, 0x60, 0x23, 0x33, 0x01, 0x2B, 0x1D, 0x68, 0x23, 0x68, 0x23, 0xDD, 0x02, 
+	0x60, 0x23, 0x3B, 0x1E, 0x46, 0xC0, 0xBD, 0x73, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x84, 
+	0x20, 0x00, 0x09, 0xF0, 0x46, 0x6A, 0xB5, 0x07, 0x70, 0x13, 0x23, 0x0F, 0x70, 0x53, 0x23, 0x00, 
+	0x70, 0xD3, 0x70, 0x93, 0x98, 0x00, 0x71, 0x53, 0xF7, 0xFF, 0x99, 0x01, 0xF7, 0xFD, 0xFF, 0xCD, 
+	0xBD, 0x07, 0xF8, 0xC1, 0x23, 0x06, 0xB5, 0x07, 0x1C, 0x18, 0x90, 0x00, 0x91, 0x01, 0x43, 0x50, 
+	0x1C, 0x1A, 0x49, 0x03, 0x46, 0x69, 0x18, 0x40, 0xFA, 0x80, 0xF7, 0xFF, 0x46, 0xC0, 0xBD, 0x07, 
+	0x20, 0x00, 0x09, 0xF0, 0x4C, 0xCA, 0xB5, 0xF0, 0x5C, 0xE3, 0x23, 0x23, 0x25, 0x00, 0xB0, 0x89, 
+	0xD1, 0x00, 0x2B, 0x00, 0x24, 0x01, 0xE0, 0xFE, 0x26, 0x00, 0x27, 0x00, 0xE0, 0x1F, 0x94, 0x02, 
+	0x24, 0x04, 0x46, 0x68, 0x24, 0x10, 0x5F, 0x00, 0x46, 0x68, 0x90, 0x05, 0x9C, 0x05, 0x5E, 0x20, 
+	0x17, 0xE0, 0x1A, 0x24, 0x40, 0x44, 0x18, 0x24, 0x9C, 0x00, 0x46, 0xA4, 0xDD, 0x3C, 0x45, 0x64, 
+	0x5E, 0x12, 0x20, 0x2C, 0xDD, 0x3C, 0x2A, 0x00, 0x23, 0x23, 0x4C, 0xB9, 0x9C, 0x02, 0x5C, 0xE3, 
+	0x34, 0x01, 0x35, 0x01, 0x36, 0x0A, 0x94, 0x02, 0x42, 0xAB, 0x37, 0x02, 0xE0, 0xD9, 0xDC, 0x00, 
+	0x19, 0xA3, 0x4C, 0xB4, 0x5E, 0x1B, 0x20, 0x3C, 0xDC, 0x00, 0x2B, 0x00, 0x4C, 0xB2, 0xE0, 0x8B, 
+	0x20, 0x3C, 0x19, 0xA1, 0x2B, 0x00, 0x5E, 0x0B, 0xE0, 0x8D, 0xDC, 0x00, 0x4C, 0xAF, 0x19, 0xE3, 
+	0x19, 0xE2, 0x8C, 0x18, 0x20, 0x18, 0x90, 0x03, 0x46, 0x68, 0x5E, 0x14, 0x46, 0xA4, 0x30, 0x0C, 
+	0x5F, 0x04, 0x24, 0x00, 0x1A, 0x20, 0x46, 0x60, 0x48, 0xA9, 0x90, 0x04, 0x5D, 0x04, 0x24, 0x34, 
+	0x9C, 0x04, 0x94, 0x00, 0x18, 0x24, 0x17, 0xE0, 0x88, 0xD0, 0xAE, 0xF1, 0x19, 0x46, 0xA4, 0x40, 
+	0x44, 0x88, 0x90, 0x88, 0x9C, 0x9C, 0x00, 0x94, 0x01, 0x45, 0xA4, 0x90, 0x04, 0x4C, 0xA2, 0xDB, 
+	0xB2, 0x2C, 0x00, 0x5D, 0x64, 0x4A, 0xA1, 0xD0, 0xBE, 0x2C, 0x00, 0x68, 0x54, 0x2C, 0x01, 0xD0, 
+	0x05, 0xE0, 0xF0, 0xD1, 0x00, 0xD1, 0x00, 0x2C, 0x02, 0x68, 0xD4, 0xE0, 0xFE, 0xD0, 0x05, 0x2C, 
+	0x00, 0xD1, 0x00, 0x2C, 0x01, 0x2C, 0x02, 0xE0, 0xDE, 0xE0, 0xF1, 0xD1, 0x00, 0x1D, 0x10, 0x46, 
+	0x6A, 0x5F, 0x14, 0x24, 0x04, 0x42, 0x94, 0x4A, 0x96, 0xE0, 0x83, 0xDD, 0x00, 0xB2, 0x02, 0x88, 
+	0x00, 0xDA, 0x00, 0x2A, 0x00, 0xB2, 0x84, 0xE0, 0xE1, 0xB2, 0xD2, 0x0A, 0x12, 0x46, 0x94, 0xB2, 
+	0xE0, 0x8C, 0x18, 0x90, 0x03, 0x4C, 0x8F, 0x80, 0x9C, 0x42, 0xA2, 0xB2, 0x02, 0x2A, 0x00, 0xDC, 
+	0x6B, 0xE0, 0xCF, 0xDA, 0x00, 0x24, 0x0F, 0x11, 0x12, 0xB2, 0xD2, 0x43, 0xA2, 0x92, 0x05, 0xB2, 
+	0x80, 0x92, 0x04, 0xB2, 0xC2, 0x1C, 0x08, 0x84, 0x18, 0x78, 0x00, 0x30, 0x40, 0x90, 0x01, 0x8F, 
+	0x8B, 0x20, 0x60, 0x99, 0x02, 0x43, 0x08, 0x42, 0x40, 0x46, 0x62, 0x99, 0x05, 0xAC, 0x06, 0x43, 
+	0x0A, 0x70, 0x20, 0x46, 0x94, 0x70, 0x60, 0x46, 0x60, 0x20, 0x0C, 0x46, 0x69, 0x46, 0x68, 0x5C, 
+	0x41, 0x21, 0x10, 0x70, 0xA1, 0x46, 0x69, 0x5C, 0x08, 0xB2, 0x1A, 0x79, 0x09, 0x71, 0x21, 0x70, 
+	0xE0, 0xDC, 0x3E, 0x2A, 0xFF, 0xB2, 0xE8, 0x71, 0x63, 0xFB, 0xDE, 0xF7, 0xFF, 0xCC, 0x03, 0x1C, 
+	0x02, 0xD0, 0x46, 0x1C, 0x53, 0xFF, 0x30, 0xF7, 0xFF, 0x4C, 0x6C, 0xE7, 0x60, 0x20, 0x3E, 0x19, 
+	0xA3, 0x2A, 0x14, 0x5E, 0x1A, 0xE7, 0x6C, 0xDD, 0x00, 0x87, 0x9A, 0x22, 0x00, 0x19, 0xC4, 0x48, 
+	0x68, 0xB2, 0x1A, 0x8D, 0xA3, 0xDC, 0x00, 0x2A, 0x00, 0x20, 0x05, 0xE7, 0x50, 0x8B, 0x22, 0x56, 
+	0x20, 0xB2, 0x11, 0x88, 0xA4, 0x24, 0x0F, 0x94, 0x03, 0x11, 0x09, 0x40, 0x04, 0x43, 0x81, 0x20, 
+	0x0F, 0x99, 0x02, 0x91, 0x05, 0x94, 0x04, 0x20, 0x20, 0x46, 0x8C, 0x43, 0x01, 0x99, 0x05, 0x98, 
+	0x04, 0x43, 0x08, 0xAC, 0x06, 0x91, 0x04, 0xB2, 0x19, 0x70, 0x21, 0x46, 0x61, 0x21, 0x0C, 0x70, 
+	0x60, 0x5C, 0x08, 0x46, 0x68, 0x70, 0xE2, 0x99, 0x04, 0x70, 0xA0, 0x22, 0x00, 0x29, 0xFF, 0x71, 
+	0x22, 0x23, 0xFF, 0xDD, 0xC0, 0x20, 0x50, 0xE7, 0xBE, 0x90, 0x05, 0x24, 0x00, 0x94, 0x04, 0x20, 
+	0xA0, 0xE7, 0x97, 0x00, 0xC0, 0x22, 0xD0, 0x24, 0x02, 0x24, 0xB4, 0x46, 0xA4, 0x00, 0xA4, 0x92, 
+	0x03, 0xF7, 0xFF, 0xE7, 0x7F, 0xE7, 0x19, 0xFE, 0xB3, 0x4B, 0x50, 0x4E, 0x4F, 0x68, 0x5A, 0x68, 
+	0x71, 0xD0, 0x60, 0x1C, 0x48, 0xD0, 0x33, 0x42, 0x91, 0xD0, 0x17, 0x1C, 0x53, 0x32, 0x01, 0x21, 
+	0x40, 0x23, 0x00, 0xAC, 0x06, 0xB2, 0xED, 0x43, 0x0A, 0x1C, 0x28, 0x70, 0x22, 0x70, 0xA3, 0x70, 
+	0x63, 0x71, 0x23, 0x70, 0xE3, 0xF7, 0xFF, 0x71, 0x63, 0x1C, 0x02, 0xFB, 0x77, 0xD0, 0x62, 0x1C, 
+	0x50, 0x98, 0x06, 0x68, 0x61, 0xFE, 0xC8, 0xF7, 0xFF, 0xE0, 0x01, 0x68, 0x71, 0xAC, 0x06, 0xB2, 
+	0xED, 0x00, 0x5B, 0x1D, 0x0B, 0x5A, 0xF2, 0x20, 0x40, 0x31, 0x01, 0x42, 0x40, 0x43, 0x01, 0x23, 
+	0x00, 0x1C, 0x28, 0x71, 0x62, 0x70, 0x63, 0x70, 0x21, 0x70, 0xE3, 0x70, 0xA3, 0xF7, 0xFF, 0x71, 
+	0x23, 0x1C, 0x02, 0xFB, 0x5B, 0x1C, 0x51, 0x98, 0x06, 0x68, 0x61, 0xD0, 0x4B, 0xFE, 0xAC, 0xF7, 
+	0xFF, 0x68, 0x1A, 0x4B, 0x33, 0x68, 0x1B, 0x4B, 0x33, 0xD0, 0x01, 0x42, 0x9A, 0xFF, 0x64, 0xF7, 
+	0xFC, 0xBD, 0xF0, 0xB0, 0x09, 0x9C, 0x01, 0x69, 0x12, 0xB2, 0x80, 0x18, 0xA0, 0x46, 0x68, 0x90, 
+	0x01, 0x80, 0x98, 0x88, 0x80, 0x88, 0x98, 0xE7, 0x1A, 0x90, 0x01, 0x68, 0x94, 0x19, 0x04, 0x98, 
+	0x03, 0xE7, 0x0A, 0x84, 0x1C, 0x22, 0x00, 0x20, 0x00, 0x20, 0x00, 0xE7, 0x2C, 0xE7, 0x1A, 0x22, 
+	0x00, 0x9C, 0x01, 0x69, 0x12, 0xE7, 0xE8, 0x1A, 0xA0, 0x68, 0x94, 0x88, 0x98, 0x98, 0x03, 0x90, 
+	0x01, 0x84, 0x1C, 0x1B, 0x04, 0x1C, 0x53, 0xE6, 0xF9, 0x21, 0x40, 0xD0, 0xD2, 0x23, 0x00, 0x32, 
+	0x01, 0x43, 0x0A, 0x46, 0x6C, 0xB2, 0xE8, 0x76, 0x22, 0x76, 0xA3, 0x76, 0x63, 0x77, 0x23, 0x76, 
+	0xE3, 0xF7, 0xFF, 0x77, 0x63, 0x1C, 0x02, 0xFB, 0x19, 0xD0, 0x0E, 0x1C, 0x50, 0x99, 0x07, 0x98, 
+	0x06, 0xFE, 0x6A, 0xF7, 0xFF, 0x68, 0x61, 0xE7, 0xBC, 0xF7, 0xFF, 0x98, 0x06, 0x68, 0x71, 0xFE, 
+	0x2F, 0x68, 0x61, 0xE7, 0x9E, 0xFE, 0x2A, 0xF7, 0xFF, 0x98, 0x06, 0xE7, 0xB2, 0xF7, 0xFF, 0x99, 
+	0x07, 0xE7, 0xAD, 0xFE, 0x25, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x20, 0x20, 0x00, 0x0D, 
+	0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x01, 0x64, 0x20, 0x00, 0x08, 
+	0xF8, 0x00, 0x00, 0x02, 0xCF, 0x00, 0x00, 0x04, 0xFF, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x00, 
+	0xCC, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x80, 0x28, 0x50, 0xB5, 0x38, 0x4B, 0x54, 0xD1, 
+	0x05, 0x60, 0x18, 0x20, 0x01, 0xFA, 0x9E, 0xF7, 0xFF, 0x4B, 0x52, 0xE0, 0xA0, 0xD1, 0x01, 0x28, 
+	0x40, 0x70, 0x1C, 0x24, 0x01, 0x2B, 0x00, 0x78, 0x1B, 0xE0, 0x97, 0xD1, 0x00, 0x28, 0x0E, 0x38, 
+	0x41, 0xE0, 0x93, 0xD9, 0x00, 0xFF, 0xF0, 0xF7, 0xFE, 0x2D, 0x08, 0x12, 0x08, 0x92, 0x92, 0x47, 
+	0x08, 0x7A, 0x64, 0x5E, 0x92, 0x00, 0x8D, 0x92, 0x92, 0x22, 0x01, 0x4B, 0x47, 0x4B, 0x47, 0x70, 
+	0x1A, 0x4A, 0x47, 0x80, 0x1A, 0xF7, 0xFC, 0x60, 0x13, 0xE0, 0x7F, 0xFE, 0xD7, 0x4B, 0x44, 0x48, 
+	0x42, 0xD1, 0x0B, 0x2A, 0xFF, 0x01, 0xC9, 0x4A, 0x43, 0x00, 0x52, 0x78, 0x12, 0x70, 0x02, 0xB2, 
+	0xD2, 0x18, 0x89, 0x4A, 0x41, 0xF7, 0xFC, 0x60, 0x19, 0xE0, 0x6F, 0xFE, 0xC7, 0x18, 0x8A, 0x01, 
+	0x89, 0x00, 0x52, 0x49, 0x3D, 0x18, 0x52, 0x24, 0x02, 0x60, 0x1A, 0x70, 0x04, 0xFE, 0xBC, 0xF7, 
+	0xFC, 0x4C, 0x35, 0xE0, 0x64, 0x48, 0x39, 0x4B, 0x36, 0xD1, 0x0A, 0x2A, 0xFF, 0x01, 0x89, 0x4A, 
+	0x35, 0x18, 0x40, 0x78, 0x12, 0xB2, 0xD2, 0x00, 0x52, 0x60, 0x18, 0x70, 0x22, 0xFE, 0xAC, 0xF7, 
+	0xFC, 0x01, 0x49, 0xE0, 0x54, 0x00, 0x52, 0x18, 0x52, 0x18, 0x80, 0x25, 0x02, 0x60, 0x18, 0x70, 
+	0x25, 0xFE, 0xA2, 0xF7, 0xFC, 0x4C, 0x28, 0xE0, 0x4A, 0x48, 0x2D, 0x4B, 0x29, 0xD1, 0x08, 0x2A, 
+	0xFF, 0x01, 0x49, 0x4A, 0x28, 0x18, 0x40, 0x78, 0x92, 0x60, 0x18, 0x70, 0x22, 0xFE, 0x94, 0xF7, 
+	0xFC, 0x01, 0x49, 0xE0, 0x3C, 0x25, 0x01, 0x18, 0x52, 0x70, 0x25, 0x18, 0x80, 0xF7, 0xFC, 0x60, 
+	0x18, 0xE0, 0x33, 0xFE, 0x8B, 0x4B, 0x1E, 0x49, 0x1C, 0x2A, 0xFF, 0x48, 0x22, 0xE0, 0x04, 0xD1, 
+	0x0E, 0x4B, 0x1B, 0x49, 0x19, 0x2A, 0xFF, 0x48, 0x20, 0x4A, 0x20, 0xD1, 0x08, 0x00, 0x52, 0x78, 
+	0x12, 0x70, 0x0A, 0xB2, 0xD2, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x1F, 0xFE, 0x77, 0x24, 0x02, 0x00, 
+	0x52, 0x70, 0x0C, 0x18, 0x80, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x17, 0xFE, 0x6F, 0x4B, 0x10, 0x48, 
+	0x0E, 0x2A, 0xFF, 0x49, 0x17, 0x4A, 0x15, 0xD1, 0x06, 0x70, 0x02, 0x78, 0x12, 0xF7, 0xFC, 0x60, 
+	0x19, 0xE0, 0x0B, 0xFE, 0x63, 0x18, 0x8A, 0x24, 0x01, 0x60, 0x1A, 0x70, 0x04, 0xA5, 0x95, 0xAE, 
+	0xF1, 0x1A, 0xFE, 0x5C, 0xF7, 0xFC, 0x4A, 0x10, 0xE0, 0x04, 0x70, 0x13, 0x23, 0x00, 0x70, 0x13, 
+	0x4A, 0x02, 0x46, 0xC0, 0xBD, 0x38, 0x20, 0x00, 0x11, 0x50, 0x20, 0x00, 0x01, 0xE5, 0x20, 0x00, 
+	0x03, 0xF6, 0x20, 0x00, 0x03, 0x08, 0x20, 0x00, 0x0D, 0x34, 0x20, 0x00, 0x03, 0x0A, 0x40, 0x00, 
+	0x40, 0x84, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 
+	0x02, 0x14, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x0A, 0xA4, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0x3E, 
+	0xB5, 0x10, 0x2B, 0x0A, 0x88, 0x1B, 0xD8, 0x04, 0xD0, 0x2B, 0xD0, 0x09, 0x2B, 0x01, 0xD1, 0x71, 
+	0x2B, 0x09, 0x2B, 0xA0, 0xE0, 0x0E, 0x2B, 0xB0, 0xD0, 0x48, 0x2B, 0x5F, 0xD0, 0x62, 0xE0, 0x55, 
+	0xD1, 0x6A, 0x78, 0x11, 0x4A, 0x36, 0x42, 0x11, 0x22, 0x0E, 0x4A, 0x35, 0xD1, 0x64, 0xE0, 0x61, 
+	0x70, 0x13, 0x33, 0x34, 0x4B, 0x34, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x30, 0xD0, 0x5C, 0x2B, 0x01, 
+	0x78, 0x1B, 0x4A, 0x31, 0xD1, 0x05, 0x4B, 0x31, 0x70, 0x13, 0x70, 0x1A, 0x22, 0x00, 0x2B, 0x02, 
+	0xE0, 0x52, 0x4A, 0x2D, 0xD1, 0x50, 0x70, 0x13, 0x23, 0x01, 0x70, 0x13, 0x4A, 0x2C, 0x4A, 0x2C, 
+	0xE0, 0x4A, 0x78, 0x11, 0x4B, 0x28, 0xD1, 0x0B, 0x29, 0x00, 0x21, 0x40, 0x1C, 0x18, 0x70, 0x01, 
+	0x30, 0x31, 0x33, 0x2F, 0x1C, 0x18, 0x30, 0x30, 0x70, 0x19, 0x70, 0x01, 0x23, 0x01, 0xE0, 0x39, 
+	0x70, 0x13, 0x1C, 0x18, 0x49, 0x24, 0x34, 0x2F, 0x1C, 0x0C, 0x30, 0x2F, 0x78, 0x24, 0x1C, 0x0C, 
+	0x70, 0x04, 0x34, 0x30, 0x31, 0x31, 0x1C, 0x18, 0x78, 0x09, 0x33, 0x31, 0x78, 0x24, 0x30, 0x30, 
+	0x70, 0x19, 0x70, 0x04, 0x23, 0x00, 0xE0, 0x25, 0x70, 0x13, 0x4A, 0x1B, 0x4B, 0x14, 0x4B, 0x1B, 
+	0x78, 0x18, 0xD1, 0x06, 0x28, 0x1A, 0x4B, 0x1A, 0x78, 0x19, 0x78, 0x1A, 0x78, 0x10, 0xF9, 0xE8, 
+	0xF7, 0xFF, 0x78, 0x11, 0xE0, 0x18, 0xF7, 0xFF, 0x78, 0x1A, 0xE0, 0x13, 0xFE, 0xD1, 0x78, 0x1B, 
+	0x4B, 0x0B, 0xD0, 0x0F, 0x2B, 0x00, 0x22, 0x08, 0x4B, 0x13, 0xF7, 0xFB, 0x60, 0x1A, 0xE0, 0x09, 
+	0xF8, 0x41, 0x78, 0x18, 0x4B, 0x0E, 0x78, 0x19, 0x4B, 0x0C, 0x78, 0x1A, 0x4B, 0x04, 0xF9, 0xD0, 
+	0xF7, 0xFF, 0x60, 0x18, 0x4B, 0x0D, 0x46, 0xC0, 0xBD, 0x10, 0x20, 0x00, 0x00, 0x28, 0x50, 0x00, 
+	0x00, 0x0C, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xDC, 0x20, 0x00, 
+	0x01, 0xDD, 0x20, 0x00, 0x01, 0xDF, 0x00, 0x00, 0x74, 0x08, 0x50, 0x00, 0x00, 0x0E, 0x50, 0x00, 
+	0x00, 0x0D, 0x50, 0x00, 0x00, 0x10, 0x20, 0x00, 0x11, 0x50, 0x20, 0x00, 0x08, 0xF8, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xE2, 0x8E, 0xAE, 0xF1, 0x1B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x52, 0x73, 0xAE, 0xF1, 0x1C, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x45, 0xFF, 0xFF, 0x67, 0x78, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/PRIV_120307_v2.c for-diff/drivers/input/touchscreen/mms100_ts/PRIV_120307_v2.c
--- caf/drivers/input/touchscreen/mms100_ts/PRIV_120307_v2.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/PRIV_120307_v2.c	2015-10-08 21:26:20.192845000 +0900
@@ -0,0 +1,396 @@
+static const struct firmware_data melfas_PRIV = {
+	.section_name = "PRIV",
+	.section_version = 0x02,
+	.start_page_addr = 23,
+	.end_page_addr = 28,
+	.compatible_version = 0x45,
+	.length = 6174,
+	.data = {
+	0xAE, 0xF1, 0x17, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x52, 0x50, 0x28, 0x00, 0xB5, 0x08, 0x28, 
+	0x01, 0xD0, 0x02, 0xE0, 0x03, 0xD1, 0x1D, 0x4B, 0x0F, 0x4A, 0x0E, 0xE0, 0x18, 0x60, 0x1A, 0x68, 
+	0x1B, 0x4B, 0x0E, 0xD1, 0x12, 0x2B, 0x0C, 0x4B, 0x0E, 0x4A, 0x0D, 0x4A, 0x0E, 0x60, 0x1A, 0x60, 
+	0x1A, 0x4B, 0x0E, 0x4B, 0x0F, 0x4A, 0x0E, 0x4A, 0x0F, 0x60, 0x1A, 0x60, 0x1A, 0x4B, 0x0F, 0x4B, 
+	0x10, 0x4A, 0x0F, 0x4A, 0x10, 0x60, 0x1A, 0x60, 0x1A, 0x4B, 0x10, 0xF7, 0xFE, 0xE0, 0x01, 0xBD, 
+	0x08, 0xF8, 0xCF, 0x00, 0x00, 0x5D, 0xC5, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x11, 0x50, 0x00, 
+	0x00, 0x60, 0x95, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x65, 0x55, 0x20, 0x00, 0x00, 0x6C, 0x00, 
+	0x00, 0x65, 0x95, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6B, 0x0D, 0x20, 0x00, 0x00, 0x18, 0x00, 
+	0x00, 0x60, 0xE1, 0x20, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x5D, 0x75, 0x20, 0x00, 0x00, 0x20, 0x4B, 
+	0x10, 0xB5, 0x70, 0x68, 0x1C, 0x4A, 0x10, 0x42, 0x8C, 0x68, 0x11, 0x68, 0x1B, 0xD0, 0x17, 0x4C, 
+	0x0E, 0x68, 0x16, 0xB2, 0xF6, 0xB2, 0xDB, 0x21, 0x0F, 0x25, 0x06, 0x1C, 0x2A, 0x30, 0x01, 0x19, 
+	0x12, 0x43, 0x5A, 0x40, 0x0A, 0x78, 0x12, 0xD0, 0x09, 0x42, 0x82, 0xB2, 0xD2, 0x1C, 0x5A, 0xB2, 
+	0xDB, 0x3B, 0x1D, 0xD8, 0x00, 0x2A, 0x1D, 0x42, 0xB3, 0x1C, 0x13, 0x4B, 0x04, 0xD1, 0xEF, 0xBD, 
+	0x70, 0xB2, 0x18, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x09, 0xF0, 0x00, 
+	0x00, 0xFF, 0xFF, 0x2A, 0x12, 0xB5, 0x00, 0xD8, 0x04, 0xD0, 0x2B, 0xD0, 0x07, 0x2A, 0x10, 0xD1, 
+	0x36, 0x2A, 0x11, 0x2A, 0x40, 0xE0, 0x1C, 0x2A, 0x80, 0xD0, 0x0E, 0xE0, 0x11, 0xD1, 0x31, 0x3A, 
+	0x1E, 0x1C, 0x02, 0x2A, 0x78, 0x23, 0x00, 0x4B, 0x17, 0xD8, 0x2C, 0x73, 0xD8, 0x22, 0x0F, 0x70, 
+	0x1A, 0x4B, 0x16, 0xE0, 0x25, 0x23, 0x01, 0x01, 0x80, 0x4B, 0x15, 0x60, 0x59, 0x43, 0x01, 0xE0, 
+	0x1F, 0x23, 0x01, 0x01, 0x80, 0x4B, 0x12, 0x60, 0x99, 0x43, 0x01, 0xE0, 0x19, 0x23, 0x01, 0x3A, 
+	0x0A, 0x1C, 0x02, 0x2A, 0x32, 0x23, 0x00, 0x4B, 0x0E, 0xD8, 0x14, 0x23, 0x01, 0x77, 0x58, 0x23, 
+	0x00, 0xE0, 0x10, 0xD8, 0x0D, 0x28, 0x01, 0x60, 0xD8, 0x4B, 0x09, 0x28, 0x00, 0x4B, 0x09, 0x22, 
+	0x1E, 0xD1, 0x03, 0x23, 0x01, 0x77, 0x5A, 0x22, 0x37, 0xE0, 0x04, 0x23, 0x01, 0x77, 0x5A, 0x23, 
+	0x00, 0xE0, 0x00, 0xBD, 0x00, 0x1C, 0x18, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x20, 
+	0x00, 0x08, 0xF8, 0x20, 0x00, 0x0D, 0x48, 0x4B, 0x0E, 0xB5, 0x08, 0xB2, 0xDB, 0x88, 0x1B, 0xD0, 
+	0x02, 0x2B, 0x10, 0xD1, 0x13, 0x2B, 0xAF, 0xF7, 0xFD, 0xE0, 0x10, 0x4A, 0x0A, 0xFB, 0xC3, 0x70, 
+	0x13, 0x23, 0x00, 0x68, 0x11, 0x4A, 0x09, 0x68, 0x12, 0x4A, 0x09, 0xD0, 0x02, 0x42, 0x91, 0xFB, 
+	0x8E, 0xF7, 0xFD, 0x4A, 0x07, 0xE0, 0x04, 0xE0, 0x01, 0x60, 0x13, 0xFB, 0xB2, 0xF7, 0xFD, 0x46, 
+	0xC0, 0xBD, 0x08, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x84, 0x20, 
+	0x00, 0x00, 0x80, 0x20, 0x00, 0x0D, 0x98, 0x38, 0x04, 0xB5, 0xF0, 0x28, 0x0C, 0xB0, 0x89, 0xE1, 
+	0x34, 0xD9, 0x00, 0xFC, 0x86, 0xF7, 0xFF, 0x01, 0x33, 0x00, 0x17, 0x01, 0x33, 0x00, 0x22, 0x00, 
+	0x32, 0x01, 0x33, 0x01, 0x33, 0x01, 0x33, 0x00, 0x38, 0x00, 0x38, 0x01, 0x33, 0x00, 0x47, 0x4B, 
+	0x94, 0x00, 0x0D, 0x48, 0x94, 0x21, 0xD0, 0x18, 0x5F, 0x00, 0x49, 0x69, 0x44, 0x21, 0x00, 0x1C, 
+	0x06, 0x1C, 0x0A, 0x49, 0x91, 0xE1, 0x07, 0x68, 0x0A, 0x23, 0x00, 0xDD, 0x02, 0x42, 0x9A, 0x18, 
+	0xD3, 0x68, 0x4B, 0x4A, 0x8E, 0x0F, 0xDB, 0xE1, 0x10, 0x70, 0x13, 0x4C, 0x8E, 0x4B, 0x8D, 0x4B, 
+	0x8E, 0x78, 0x1A, 0xD0, 0x01, 0x2A, 0x00, 0xE0, 0x00, 0x4A, 0x8D, 0x7E, 0x90, 0x4A, 0x8D, 0x01, 
+	0x80, 0x68, 0x19, 0xFC, 0xAE, 0xF7, 0xFF, 0xE1, 0x00, 0x76, 0xA0, 0x22, 0x1C, 0x4B, 0x86, 0x4B, 
+	0x89, 0x56, 0x9A, 0xE0, 0xFA, 0x60, 0x1A, 0x68, 0xDB, 0x4B, 0x7F, 0xD1, 0x03, 0x2B, 0x00, 0x22, 
+	0x1E, 0x4B, 0x81, 0xE0, 0xF2, 0x77, 0x5A, 0xD0, 0x00, 0x2B, 0x01, 0x4B, 0x7E, 0xE0, 0xEF, 0x77, 
+	0x5A, 0x22, 0x37, 0x4B, 0x78, 0xE0, 0xEB, 0x2B, 0x00, 0x68, 0xDB, 0xE0, 0xE6, 0xD0, 0x00, 0x20, 
+	0x01, 0x4C, 0x7E, 0x1C, 0x27, 0x1C, 0x22, 0x3F, 0x38, 0x3A, 0x1C, 0x90, 0x04, 0x92, 0x00, 0x21, 
+	0x00, 0xE0, 0xAA, 0x2B, 0x00, 0x5E, 0x63, 0xE0, 0x9D, 0xD1, 0x00, 0x23, 0x0A, 0x9A, 0x04, 0x98, 
+	0x04, 0x43, 0x53, 0x92, 0x06, 0x49, 0x76, 0x32, 0x38, 0x1C, 0x1A, 0x18, 0x55, 0x00, 0x46, 0x49, 
+	0x74, 0x18, 0x76, 0x18, 0x52, 0x35, 0x04, 0x36, 0x04, 0x32, 0x04, 0x93, 0x07, 0x92, 0x05, 0x21, 
+	0x00, 0xE0, 0x83, 0x2B, 0x00, 0x5E, 0x6B, 0x21, 0x00, 0xD0, 0x77, 0x22, 0x00, 0x5E, 0x73, 0x1A, 
+	0xC0, 0x5E, 0xB8, 0x9B, 0x00, 0x17, 0xC2, 0x40, 0x50, 0x18, 0x80, 0x5E, 0x59, 0x21, 0x00, 0x5E, 
+	0xB3, 0x22, 0x1C, 0x1A, 0xC9, 0xB2, 0x00, 0x18, 0xC9, 0x17, 0xCB, 0xB2, 0x09, 0x40, 0x59, 0xFA, 
+	0xCE, 0xF7, 0xFC, 0x4B, 0x63, 0x99, 0x07, 0x21, 0x32, 0x18, 0xCB, 0x4B, 0x62, 0x5E, 0x5A, 0x2A, 
+	0x00, 0x99, 0x05, 0x22, 0x00, 0xD0, 0x04, 0x2A, 0x00, 0x5E, 0x8A, 0xE0, 0x13, 0xD1, 0x04, 0x5E, 
+	0x8A, 0x22, 0x00, 0xD1, 0x0F, 0x2A, 0x00, 0x42, 0x98, 0x68, 0x1B, 0x21, 0x00, 0xDA, 0x4D, 0x23, 
+	0x00, 0x5E, 0x68, 0x90, 0x02, 0x5E, 0xE2, 0x99, 0x02, 0x92, 0x01, 0x23, 0x00, 0x18, 0x12, 0x92, 
+	0x03, 0x5E, 0xF0, 0xE0, 0x0F, 0x43, 0x48, 0x00, 0x5A, 0x68, 0x1B, 0x42, 0x98, 0x18, 0xD3, 0x23, 
+	0x00, 0xDA, 0x3B, 0x21, 0x00, 0x5E, 0xEA, 0x92, 0x02, 0x5E, 0x60, 0x18, 0x80, 0x90, 0x01, 0x21, 
+	0x00, 0x90, 0x03, 0x43, 0x50, 0x5E, 0x70, 0x5E, 0xBB, 0x22, 0x00, 0x43, 0x4B, 0x99, 0x01, 0x18, 
+	0xC0, 0x99, 0x03, 0xFC, 0x1E, 0xF7, 0xFF, 0x22, 0x1C, 0x80, 0x38, 0x98, 0x02, 0x5E, 0xB3, 0x9A, 
+	0x01, 0x99, 0x00, 0x20, 0x00, 0x43, 0x43, 0x99, 0x03, 0x5E, 0x08, 0x18, 0x18, 0x43, 0x50, 0xFC, 
+	0x10, 0xF7, 0xFF, 0x21, 0x0C, 0x9B, 0x00, 0x46, 0x68, 0x80, 0x18, 0x88, 0x62, 0x5A, 0x08, 0x88, 
+	0x6B, 0x80, 0x20, 0xB2, 0x18, 0xB2, 0x11, 0xDA, 0x00, 0x42, 0x88, 0x80, 0x63, 0x1C, 0x13, 0x79, 
+	0x23, 0x79, 0x2A, 0x18, 0xD3, 0x21, 0x00, 0x22, 0x00, 0x71, 0x23, 0x80, 0x69, 0x4B, 0x34, 0x80, 
+	0x29, 0x71, 0x2A, 0x3A, 0x01, 0x68, 0x1A, 0x98, 0x06, 0x60, 0x1A, 0x30, 0x01, 0x99, 0x05, 0x90, 
+	0x06, 0x31, 0x0A, 0x36, 0x02, 0x35, 0x0A, 0x4B, 0x30, 0x91, 0x05, 0x33, 0x04, 0x9A, 0x06, 0x42, 
+	0x9A, 0x7F, 0xDB, 0xE7, 0x74, 0xDA, 0x00, 0x98, 0x00, 0x9B, 0x04, 0x30, 0x02, 0x33, 0x01, 0x34, 
+	0x0A, 0x93, 0x04, 0x90, 0x00, 0x37, 0x02, 0x9A, 0x04, 0x4B, 0x28, 0x7F, 0xDB, 0x33, 0x04, 0x3B, 
+	0x01, 0x3A, 0x01, 0xDA, 0x00, 0x42, 0x9A, 0xE0, 0x28, 0xE7, 0x4B, 0x2D, 0x1E, 0x56, 0x1D, 0x23, 
+	0x00, 0xDD, 0x02, 0xE0, 0x22, 0x61, 0x73, 0xDD, 0x01, 0x2D, 0x0A, 0xE0, 0x04, 0x31, 0x01, 0xDA, 
+	0x01, 0x35, 0x05, 0x4A, 0x83, 0xAE, 0xF1, 0x18, 0xE0, 0x00, 0x32, 0x01, 0x30, 0x01, 0x24, 0x00, 
+	0xD1, 0xED, 0x28, 0x17, 0x42, 0xBB, 0x33, 0x20, 0x20, 0x00, 0xD0, 0x01, 0x4B, 0x0B, 0xE7, 0xE8, 
+	0x2A, 0x00, 0x61, 0x5C, 0x29, 0x00, 0xD0, 0x03, 0x34, 0x01, 0xD0, 0x01, 0x2A, 0x05, 0x61, 0x5C, 
+	0x69, 0x5A, 0xDC, 0x02, 0xDD, 0x04, 0x2A, 0x64, 0x61, 0x5A, 0x22, 0x00, 0x22, 0x0D, 0x4B, 0x11, 
+	0xB0, 0x09, 0x70, 0x1A, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x0E, 0x64, 0x20, 0x00, 0x08, 0xF8, 
+	0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x11, 0x3D, 0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x0D, 0x48, 
+	0x20, 0x00, 0x09, 0x78, 0x00, 0x00, 0x74, 0x9A, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 0x0D, 0x38, 
+	0x20, 0x00, 0x0D, 0xD8, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x03, 0x20, 0x20, 0x00, 0x02, 0x20, 
+	0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x68, 0x1A, 0x4B, 0x02, 0x60, 0x1A, 0x4B, 0x02, 
+	0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x84, 0xF7, 0xFF, 0xB5, 0x08, 
+	0xBD, 0x08, 0xFF, 0xF3, 0x4A, 0x07, 0xB5, 0x00, 0x68, 0x10, 0x4B, 0x07, 0x42, 0x88, 0x68, 0x19, 
+	0x68, 0x10, 0xDB, 0x03, 0x1A, 0xC0, 0x68, 0x1B, 0x68, 0x10, 0xE0, 0x03, 0x30, 0x1E, 0x68, 0x1B, 
+	0xBD, 0x00, 0x1A, 0xC0, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x84, 0x4B, 0x05, 0xB5, 0x00, 
+	0x32, 0x01, 0x68, 0x1A, 0x68, 0x1A, 0x60, 0x1A, 0xDD, 0x02, 0x2A, 0x1D, 0x3A, 0x1E, 0x68, 0x1A, 
+	0xBD, 0x00, 0x60, 0x1A, 0x20, 0x00, 0x00, 0x84, 0x4A, 0xA7, 0xB5, 0xF7, 0xB2, 0x1B, 0x88, 0x13, 
+	0xD1, 0x00, 0x2B, 0xAE, 0xDC, 0x3B, 0xE1, 0xB2, 0xD1, 0x00, 0x2B, 0x0A, 0xDC, 0x18, 0xE0, 0xED, 
+	0xD1, 0x00, 0x2B, 0x05, 0xDC, 0x08, 0xE0, 0xCE, 0xD1, 0x00, 0x2B, 0x03, 0xDD, 0x00, 0xE0, 0xB7, 
+	0x2B, 0x02, 0xE0, 0xBE, 0xE1, 0xE7, 0xD0, 0x00, 0x2B, 0x07, 0xE0, 0xA4, 0xE0, 0xCC, 0xD1, 0x00, 
+	0xE0, 0xC4, 0xDA, 0x00, 0xD1, 0x00, 0x2B, 0x08, 0x2B, 0x09, 0xE0, 0xF7, 0xE1, 0xDB, 0xD0, 0x00, 
+	0x2B, 0x10, 0xE0, 0xC8, 0xE0, 0x7F, 0xD1, 0x00, 0x2B, 0x0C, 0xDC, 0x0B, 0xE0, 0xD9, 0xD1, 0x00, 
+	0xE0, 0xCF, 0xDA, 0x00, 0xD1, 0x00, 0x2B, 0x0D, 0x2B, 0x0F, 0xE0, 0xDD, 0xE1, 0xCB, 0xD0, 0x00, 
+	0x2B, 0x62, 0xE0, 0x48, 0xE1, 0xC3, 0xD1, 0x00, 0x2B, 0x61, 0xDC, 0x03, 0xE1, 0xC3, 0xD0, 0x00, 
+	0x2B, 0x64, 0xE1, 0xB9, 0xE1, 0xB1, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xA8, 0xE1, 0x9D, 0xE1, 0xBC, 
+	0xD1, 0x00, 0x2B, 0xF4, 0xDC, 0x19, 0xE0, 0xF4, 0xD1, 0x00, 0x2B, 0xEF, 0xDC, 0x09, 0xE1, 0x87, 
+	0xD1, 0x00, 0x2B, 0xBF, 0x2B, 0xEE, 0xE1, 0x8D, 0xE1, 0x7C, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xAF, 
+	0xE1, 0x6A, 0xE1, 0xAA, 0xD1, 0x00, 0x2B, 0xF1, 0xDA, 0x00, 0xE0, 0xC8, 0x2B, 0xF2, 0xE0, 0xC2, 
+	0xE0, 0xCB, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xF3, 0xE0, 0xD0, 0xE1, 0x9E, 0xD1, 0x00, 0x2B, 0xF9, 
+	0xDC, 0x0B, 0xE1, 0x26, 0xD1, 0x00, 0x2B, 0xF6, 0xDA, 0x00, 0xE1, 0x06, 0x2B, 0xF7, 0xE0, 0xD9, 
+	0xE1, 0x08, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xF8, 0xE1, 0x10, 0xE1, 0x8E, 0xD1, 0x00, 0x2B, 0xFB, 
+	0xDA, 0x00, 0xE1, 0x28, 0x2B, 0xFC, 0xE1, 0x1D, 0xE1, 0x2C, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xFD, 
+	0xE1, 0x31, 0xE1, 0x82, 0xFF, 0x5E, 0xF7, 0xFF, 0x60, 0x20, 0x4C, 0x68, 0x2B, 0x00, 0x68, 0x23, 
+	0xF7, 0xFD, 0xD1, 0x01, 0x68, 0x23, 0xF9, 0x91, 0x43, 0x5A, 0x22, 0x06, 0x4C, 0x65, 0x4B, 0x64, 
+	0x25, 0x00, 0x70, 0x1A, 0x4F, 0x64, 0x4E, 0x61, 0x68, 0x39, 0xE0, 0x12, 0x43, 0x51, 0x22, 0x06, 
+	0x46, 0x68, 0x4B, 0x62, 0xF7, 0xFF, 0x18, 0xC9, 0x23, 0x00, 0xFB, 0x21, 0x5C, 0x1A, 0x46, 0x68, 
+	0x33, 0x01, 0x54, 0xE2, 0xD1, 0xF9, 0x2B, 0x06, 0xFF, 0x50, 0xF7, 0xFF, 0x34, 0x06, 0x35, 0x01, 
+	0x42, 0x9D, 0x68, 0x33, 0xE1, 0x57, 0xDB, 0xE9, 0x4A, 0x54, 0x49, 0x59, 0x68, 0x13, 0x78, 0x0C, 
+	0x43, 0x58, 0x20, 0x06, 0x42, 0x84, 0x23, 0x00, 0x4A, 0x52, 0xDA, 0x0A, 0x4D, 0x50, 0x78, 0x08, 
+	0x5C, 0xC4, 0x18, 0x10, 0x33, 0x01, 0x19, 0x58, 0x2B, 0x08, 0x70, 0x04, 0xE1, 0x43, 0xD1, 0xF6, 
+	0xE1, 0x41, 0x60, 0x13, 0x23, 0x0F, 0x4A, 0x4F, 0x5E, 0x11, 0x20, 0x26, 0x5F, 0x52, 0x25, 0x28, 
+	0x12, 0x12, 0x11, 0x09, 0x40, 0x13, 0x43, 0x99, 0x18, 0xCB, 0x4A, 0x45, 0x4B, 0x42, 0x70, 0x13, 
+	0x23, 0x03, 0x88, 0x1A, 0x1A, 0x9A, 0xB2, 0x12, 0x8D, 0x19, 0x4B, 0x46, 0x54, 0xD1, 0x4B, 0x40, 
+	0x88, 0x1A, 0x4B, 0x3D, 0xB2, 0x12, 0x23, 0x04, 0x4B, 0x42, 0x1A, 0x9A, 0x4B, 0x3C, 0x8C, 0xD9, 
+	0xE1, 0x21, 0x54, 0xD1, 0x8C, 0xDA, 0x4B, 0x40, 0x70, 0x1A, 0x4B, 0x39, 0x4B, 0x3E, 0xE1, 0x1C, 
+	0x78, 0x1A, 0x33, 0x34, 0x70, 0x1A, 0x4B, 0x36, 0x4B, 0x3A, 0xE1, 0x16, 0x4B, 0x34, 0x7B, 0xDA, 
+	0xE1, 0x11, 0x70, 0x1A, 0x78, 0x1A, 0x4B, 0x39, 0x2A, 0x00, 0x4B, 0x31, 0x22, 0x02, 0xD0, 0x02, 
+	0xE1, 0x09, 0x70, 0x1A, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x35, 0xE1, 0x06, 0x4B, 0x2C, 0x78, 0x1A, 
+	0xE1, 0x01, 0x70, 0x1A, 0x4B, 0x33, 0x88, 0x12, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0x0B, 
+	0x54, 0xD1, 0x4B, 0x27, 0x88, 0x1A, 0x4B, 0x24, 0xB2, 0x12, 0x4B, 0x2E, 0x23, 0x0C, 0x78, 0x59, 
+	0x4B, 0x23, 0x1A, 0x9A, 0x4B, 0x20, 0x54, 0xD1, 0x4B, 0x2B, 0x88, 0x1A, 0x78, 0x19, 0xB2, 0x12, 
+	0x1A, 0x9A, 0x23, 0x0D, 0x54, 0xD1, 0x4B, 0x1E, 0x4B, 0x23, 0xE0, 0xE6, 0x4B, 0x1C, 0x8D, 0xDA, 
+	0xE0, 0xE1, 0x70, 0x1A, 0x78, 0x1A, 0x4B, 0x1F, 0x70, 0x1A, 0x4B, 0x19, 0x21, 0x01, 0x4B, 0x16, 
+	0x23, 0xF1, 0x88, 0x1A, 0x1A, 0x9A, 0xB2, 0x12, 0x54, 0xD1, 0x4B, 0x15, 0x88, 0x1A, 0x4B, 0x12, 
+	0xB2, 0x12, 0x4B, 0x18, 0x23, 0xF2, 0x78, 0x59, 0x4B, 0x11, 0x1A, 0x9A, 0x4B, 0x0E, 0x54, 0xD1, 
+	0x4B, 0x1A, 0x88, 0x1A, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF3, 0x54, 0xD1, 0x4B, 0x0C, 
+	0x88, 0x1A, 0x4B, 0x09, 0xB2, 0x12, 0x4B, 0x16, 0x23, 0xF4, 0x78, 0x19, 0x4B, 0x08, 0x1A, 0x9A, 
+	0x4B, 0x05, 0x54, 0xD1, 0x4B, 0x13, 0x88, 0x1A, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF5, 
+	0x54, 0xD1, 0x4B, 0x03, 0x46, 0xC0, 0xE0, 0xB0, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x0D, 0x98, 
+	0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x88, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x09, 0xF0, 
+	0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x01, 0xDD, 
+	0x20, 0x00, 0x01, 0xDF, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0x7C, 0x00, 0x00, 0x5B, 0xFF, 
+	0x00, 0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0x4A, 0x49, 0x4B, 0x48, 0x18, 0xD3, 0x78, 0x1B, 
+	0x4B, 0x48, 0x78, 0xDA, 0x4B, 0x48, 0x70, 0x1A, 0x88, 0x1A, 0x49, 0x45, 0xB2, 0x12, 0x4B, 0x43, 
+	0x18, 0xCB, 0x78, 0x1B, 0x23, 0xF7, 0x79, 0x19, 0x4B, 0x42, 0x1A, 0x9A, 0x4B, 0x42, 0x54, 0xD1, 
+	0x4B, 0x3F, 0x88, 0x1A, 0x79, 0x59, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF8, 0x54, 0xD1, 0x4B, 0x3D, 
+	0x88, 0x1A, 0x4B, 0x3D, 0xB2, 0x12, 0x4B, 0x3A, 0x11, 0xE3, 0xAE, 0xF1, 0x19, 0x23, 0xF9, 0x79, 
+	0x99, 0x4B, 0x39, 0x1A, 0x9A, 0x4B, 0x39, 0x54, 0xD1, 0x4B, 0x36, 0x88, 0x1A, 0x79, 0xD9, 0xB2, 
+	0x12, 0x1A, 0x9A, 0x23, 0xFA, 0x54, 0xD1, 0x4B, 0x34, 0x88, 0x1A, 0x4B, 0x34, 0xB2, 0x12, 0x4B, 
+	0x31, 0x23, 0xFB, 0x7A, 0x19, 0x4B, 0x30, 0x1A, 0x9A, 0x4B, 0x30, 0x54, 0xD1, 0x4B, 0x2D, 0x88, 
+	0x1A, 0x7A, 0x59, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xFC, 0x54, 0xD1, 0x4B, 0x2B, 0x88, 0x1A, 0x4B, 
+	0x2B, 0xB2, 0x12, 0x4B, 0x28, 0x23, 0xFD, 0x7A, 0x99, 0x4B, 0x27, 0x1A, 0x9A, 0xE0, 0x45, 0x54, 
+	0xD1, 0x78, 0x1A, 0x4B, 0x27, 0x70, 0x1A, 0x4B, 0x24, 0xF8, 0x58, 0xF7, 0xFD, 0x49, 0x25, 0xE0, 
+	0x3E, 0x23, 0x00, 0x4A, 0x1F, 0x78, 0x10, 0x68, 0x0C, 0x18, 0x20, 0x4D, 0x1F, 0x19, 0x58, 0x5C, 
+	0xC4, 0x70, 0x04, 0x33, 0x01, 0xD1, 0xF5, 0x2B, 0x08, 0x4B, 0x1A, 0xE0, 0x30, 0x4B, 0x1A, 0x7E, 
+	0x1A, 0x4B, 0x1A, 0x70, 0x1A, 0x4B, 0x17, 0x88, 0x1A, 0x7D, 0xD9, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 
+	0xEF, 0x54, 0xD1, 0x4B, 0x15, 0x4B, 0x18, 0xE0, 0x22, 0x4B, 0x13, 0x68, 0x1A, 0xE0, 0x1D, 0x70, 
+	0x1A, 0x4A, 0x0F, 0x49, 0x14, 0x68, 0x0C, 0x23, 0x00, 0x4D, 0x0F, 0x78, 0x10, 0x5C, 0xC4, 0x18, 
+	0x20, 0x33, 0x01, 0x19, 0x58, 0x2B, 0x08, 0x70, 0x04, 0xF7, 0xFD, 0xD1, 0xF5, 0xE0, 0x0D, 0xF8, 
+	0x27, 0x78, 0x1A, 0x4B, 0x0E, 0x70, 0x1A, 0x4B, 0x08, 0x4B, 0x0D, 0xE0, 0x08, 0x4B, 0x06, 0x78, 
+	0x9A, 0xE0, 0x03, 0x70, 0x1A, 0x78, 0xDA, 0x4B, 0x0A, 0x70, 0x1A, 0x4B, 0x03, 0x46, 0xC0, 0xBD, 
+	0xF7, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x09, 0xAE, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 
+	0x28, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x0D, 0x34, 0x20, 0x00, 0x08, 0xF8, 0x00, 0x00, 0x5B, 
+	0xFF, 0x20, 0x00, 0x00, 0x35, 0x4C, 0x0F, 0xB5, 0x73, 0x90, 0x00, 0x4D, 0x0F, 0x68, 0x20, 0x91, 
+	0x01, 0x30, 0x1F, 0x21, 0x1E, 0xF7, 0xFF, 0x68, 0x2E, 0x42, 0xB1, 0xF9, 0x8F, 0x68, 0x20, 0xD0, 
+	0xF7, 0x43, 0x50, 0x22, 0x06, 0x46, 0x69, 0x4B, 0x09, 0xF7, 0xFF, 0x18, 0xC0, 0x68, 0x23, 0xF9, 
+	0x91, 0x60, 0x23, 0x33, 0x01, 0x2B, 0x1D, 0x68, 0x23, 0x68, 0x23, 0xDD, 0x02, 0x60, 0x23, 0x3B, 
+	0x1E, 0x46, 0xC0, 0xBD, 0x73, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x09, 
+	0xF0, 0x46, 0x6A, 0xB5, 0x07, 0x70, 0x13, 0x23, 0x0F, 0x70, 0x53, 0x23, 0x00, 0x70, 0xD3, 0x70, 
+	0x93, 0x98, 0x00, 0x71, 0x53, 0xF7, 0xFF, 0x99, 0x01, 0xF7, 0xFC, 0xFF, 0xCD, 0xBD, 0x07, 0xFF, 
+	0xA5, 0x23, 0x06, 0xB5, 0x07, 0x1C, 0x18, 0x90, 0x00, 0x91, 0x01, 0x43, 0x50, 0x1C, 0x1A, 0x49, 
+	0x03, 0x46, 0x69, 0x18, 0x40, 0xF9, 0x64, 0xF7, 0xFF, 0x46, 0xC0, 0xBD, 0x07, 0x20, 0x00, 0x09, 
+	0xF0, 0x4C, 0xCB, 0xB5, 0xF0, 0x69, 0x23, 0x4E, 0xCB, 0x42, 0x5A, 0xB0, 0x8B, 0x22, 0x23, 0x41, 
+	0x53, 0x42, 0x5B, 0x5C, 0xB5, 0x40, 0x1E, 0x26, 0x1E, 0x96, 0x05, 0x22, 0x00, 0x26, 0x00, 0x61, 
+	0xA2, 0xD1, 0x00, 0x2D, 0x00, 0x1E, 0x6B, 0xE1, 0x2D, 0x48, 0xC3, 0xB2, 0xDB, 0x1C, 0x13, 0xE0, 
+	0x00, 0x4E, 0xC2, 0x00, 0x9A, 0x00, 0x52, 0x18, 0xD2, 0x26, 0x3C, 0x18, 0xB2, 0x1E, 0x5A, 0x5F, 
+	0x91, 0x41, 0xB1, 0x1E, 0x4E, 0xB2, 0xD2, 0x54, 0xC1, 0xD1, 0xF0, 0x2B, 0x00, 0x2D, 0x00, 0x26, 
+	0x00, 0xE1, 0x16, 0xDC, 0x00, 0x27, 0x00, 0x4D, 0xB9, 0x95, 0x01, 0x35, 0x40, 0x2A, 0x00, 0xE0, 
+	0x12, 0x4D, 0xB6, 0xDD, 0x22, 0x8B, 0x1A, 0x88, 0x99, 0x80, 0x99, 0x19, 0xEB, 0x4D, 0xB1, 0x84, 
+	0x1A, 0x5C, 0xEB, 0x23, 0x23, 0x36, 0x01, 0x9D, 0x01, 0x37, 0x02, 0x35, 0x0A, 0x42, 0xB3, 0x95, 
+	0x01, 0xE0, 0xFE, 0xDC, 0x00, 0x19, 0xEB, 0x4D, 0xAE, 0xB2, 0x0A, 0x8D, 0x99, 0xDC, 0x00, 0x2A, 
+	0x00, 0x9D, 0x01, 0xE0, 0xDC, 0x95, 0x07, 0x3D, 0x04, 0x5E, 0x2D, 0x20, 0x00, 0xDC, 0x00, 0x2D, 
+	0x00, 0x69, 0xA1, 0xE0, 0x8A, 0xD1, 0xDA, 0x29, 0x00, 0x19, 0xE9, 0x4D, 0xA4, 0x90, 0x03, 0x8C, 
+	0x08, 0x5E, 0x1D, 0x20, 0x18, 0x95, 0x02, 0x20, 0x0C, 0x5F, 0x45, 0x46, 0x6D, 0x88, 0x9B, 0x98, 
+	0x02, 0x95, 0x04, 0x1A, 0x2D, 0x20, 0x34, 0x4D, 0x9F, 0x90, 0x02, 0x5C, 0x28, 0x17, 0xC5, 0x98, 
+	0x04, 0x40, 0x68, 0x19, 0x40, 0x46, 0x84, 0x9D, 0x02, 0x45, 0xAC, 0x88, 0x88, 0xE0, 0xAF, 0xDB, 
+	0x00, 0xB2, 0x1B, 0xB2, 0x05, 0x17, 0xDD, 0x1A, 0xEB, 0x40, 0x6B, 0x19, 0x5B, 0x42, 0x9D, 0x9D, 
+	0x02, 0xE0, 0xA5, 0xDC, 0x00, 0xDC, 0xBA, 0x2A, 0x00, 0x11, 0x93, 0x68, 0x62, 0x2B, 0x01, 0xD0, 
+	0x05, 0xE1, 0x07, 0xD1, 0x00, 0xD1, 0x00, 0x2B, 0x02, 0x68, 0xA2, 0xE1, 0x53, 0xD0, 0x05, 0x11, 
+	0x93, 0xD1, 0x00, 0x2B, 0x01, 0x2B, 0x02, 0xE1, 0x05, 0xE1, 0x51, 0xD1, 0x00, 0xB2, 0x02, 0x4B, 
+	0x8A, 0xDD, 0x00, 0x42, 0x9A, 0x1E, 0x13, 0xE0, 0xA6, 0xE1, 0x3F, 0xDA, 0x00, 0xB2, 0xDB, 0x0A, 
+	0x1B, 0x93, 0x02, 0xB2, 0x80, 0x93, 0x03, 0xB2, 0xC3, 0x80, 0x88, 0x8C, 0x0B, 0xB2, 0x1A, 0x48, 
+	0x83, 0xDD, 0x00, 0x42, 0x82, 0x2A, 0x00, 0xE0, 0x8F, 0xE1, 0x2C, 0xDA, 0x00, 0x25, 0x0F, 0x11, 
+	0x12, 0x43, 0xAA, 0xB2, 0x9B, 0xB2, 0xD8, 0xB2, 0xD2, 0x90, 0x06, 0x92, 0x04, 0x9D, 0x07, 0x84, 
+	0x0B, 0x21, 0x60, 0xB2, 0xF0, 0x42, 0x49, 0x1C, 0x42, 0x43, 0x11, 0x88, 0x2B, 0x9A, 0x02, 0x9D, 
+	0x01, 0x99, 0x04, 0x46, 0x8C, 0x43, 0x11, 0x78, 0x2D, 0x95, 0x07, 0xB2, 0x1A, 0xAD, 0x08, 0x92, 
+	0x02, 0x70, 0x2A, 0x46, 0x62, 0x22, 0x0C, 0x70, 0x69, 0x5C, 0x51, 0x46, 0x69, 0x70, 0xA9, 0x46, 
+	0x6A, 0x5C, 0x8A, 0x21, 0x18, 0x70, 0xEA, 0x46, 0x69, 0x5C, 0x51, 0x22, 0x1C, 0x71, 0x29, 0x9A, 
+	0x02, 0xDC, 0x42, 0x2A, 0xFF, 0xF7, 0xFF, 0x71, 0x6B, 0x1C, 0x02, 0xFA, 0xA7, 0x1C, 0x53, 0xCD, 
+	0x03, 0xF7, 0xFF, 0xD0, 0x43, 0xE7, 0x5A, 0xFF, 0x15, 0xDC, 0x00, 0x2A, 0x00, 0x20, 0x05, 0xE7, 
+	0x57, 0x8B, 0x1D, 0x56, 0x18, 0x95, 0x06, 0x46, 0x84, 0x20, 0x18, 0x46, 0x6A, 0x88, 0x9B, 0x5E, 
+	0x85, 0x11, 0x2A, 0xB2, 0xF0, 0x95, 0x02, 0x1C, 0x45, 0x46, 0x65, 0x93, 0x03, 0x40, 0x2B, 0x23, 
+	0x0F, 0x23, 0x0F, 0x93, 0x04, 0x1C, 0x0B, 0x43, 0x9A, 0x46, 0x94, 0x99, 0x02, 0x43, 0x11, 0x22, 
+	0x20, 0x99, 0x04, 0x91, 0x02, 0x43, 0x11, 0x46, 0x62, 0xB2, 0x19, 0x91, 0x04, 0x46, 0x6A, 0x46, 
+	0x8C, 0x5C, 0x8A, 0x21, 0x08, 0x70, 0x2A, 0xAD, 0x08, 0x22, 0x10, 0x46, 0x69, 0x46, 0x6A, 0x5C, 
+	0x51, 0x21, 0x0C, 0x70, 0x69, 0x46, 0x69, 0x5C, 0x8A, 0x22, 0x18, 0x70, 0xAA, 0x22, 0x00, 0x5C, 
+	0x51, 0x46, 0x62, 0x71, 0x2A, 0x2A, 0xFF, 0x70, 0xE9, 0x23, 0xFF, 0xDD, 0xBC, 0xF7, 0xFF, 0x71, 
+	0x6B, 0x1C, 0x02, 0xFA, 0x63, 0x1C, 0x53, 0xCD, 0x03, 0xF7, 0xFF, 0xD1, 0xBB, 0xE7, 0x16, 0xFE, 
+	0x9B, 0x5D, 0x9B, 0x4B, 0x43, 0xD0, 0x00, 0x2B, 0x00, 0xE7, 0x53, 0xE7, 0x56, 0x38, 0x02, 0x98, 
+	0x01, 0x5F, 0x40, 0x25, 0x00, 0x42, 0xA8, 0x9D, 0x05, 0xE7, 0x1A, 0xDD, 0x00, 0x22, 0x00, 0x9B, 
+	0x01, 0x80, 0x1A, 0x3B, 0x04, 0x23, 0x50, 0xE7, 0x03, 0x93, 0x04, 0x22, 0x00, 0xED, 0x03, 0xAE, 
+	0xF1, 0x1A, 0x92, 0x06, 0x23, 0xA0, 0xE7, 0x73, 0x00, 0xDB, 0x25, 0xD0, 0x20, 0x02, 0x20, 0xB4, 
+	0x90, 0x02, 0x00, 0x80, 0x95, 0x03, 0x4D, 0x34, 0xE7, 0x5A, 0x68, 0x69, 0x4B, 0x34, 0x1C, 0x48, 
+	0x68, 0x5A, 0xE0, 0x69, 0xD1, 0x00, 0xD0, 0x35, 0x42, 0x91, 0xD0, 0x18, 0x1C, 0x53, 0x32, 0x01, 
+	0x21, 0x40, 0x23, 0x00, 0xAC, 0x08, 0xB2, 0xF6, 0x43, 0x0A, 0x1C, 0x30, 0x70, 0x22, 0x70, 0xA3, 
+	0x70, 0x63, 0x71, 0x23, 0x70, 0xE3, 0xF7, 0xFF, 0x71, 0x63, 0x1C, 0x02, 0xFA, 0x21, 0xD1, 0x00, 
+	0x1C, 0x50, 0x68, 0x61, 0xE0, 0x86, 0xF7, 0xFF, 0x98, 0x08, 0x68, 0x69, 0xFE, 0x8D, 0xB2, 0xF6, 
+	0xE0, 0x01, 0x1D, 0x0B, 0xAC, 0x08, 0x20, 0x40, 0x00, 0x5B, 0x42, 0x40, 0x5A, 0xEA, 0x23, 0x00, 
+	0x31, 0x01, 0x71, 0x62, 0x43, 0x01, 0x70, 0x21, 0x1C, 0x30, 0x70, 0xA3, 0x70, 0x63, 0x71, 0x23, 
+	0x70, 0xE3, 0xFA, 0x04, 0xF7, 0xFF, 0x98, 0x08, 0x1C, 0x02, 0xD1, 0x00, 0x1C, 0x51, 0x68, 0x61, 
+	0xE0, 0x6E, 0xFE, 0x70, 0xF7, 0xFF, 0x68, 0x1A, 0x4B, 0x16, 0x68, 0x1B, 0x4B, 0x16, 0xD0, 0x01, 
+	0x42, 0x9A, 0xFE, 0x0C, 0xF7, 0xFC, 0xBD, 0xF0, 0xB0, 0x0B, 0x23, 0x3F, 0x98, 0x03, 0x18, 0xC3, 
+	0x40, 0x13, 0x88, 0x88, 0x84, 0x0B, 0x23, 0x3F, 0xE6, 0xF3, 0x18, 0x80, 0x40, 0x1A, 0x80, 0x88, 
+	0xB2, 0x80, 0x46, 0xC0, 0xE6, 0xF6, 0x20, 0x00, 0x08, 0xF8, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 
+	0x01, 0xEC, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x0D, 0x48, 0x00, 0x00, 
+	0x02, 0xCF, 0x00, 0x00, 0x04, 0xFF, 0x20, 0x00, 0x01, 0x64, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 
+	0x00, 0xCC, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x80, 0xD0, 0xCB, 0x1C, 0x53, 0x21, 0x40, 
+	0xB2, 0xF0, 0x26, 0x21, 0x32, 0x01, 0x43, 0x0A, 0x23, 0x00, 0x44, 0x6E, 0xAD, 0x08, 0x70, 0x33, 
+	0x70, 0x2A, 0x22, 0x23, 0x21, 0x22, 0x44, 0x6A, 0x26, 0x25, 0xAD, 0x09, 0x44, 0x69, 0x70, 0x13, 
+	0x44, 0x6E, 0x70, 0x2B, 0x70, 0x0B, 0xF7, 0xFF, 0x70, 0x33, 0x1C, 0x02, 0xF9, 0xB1, 0xD0, 0x21, 
+	0x1C, 0x50, 0x99, 0x09, 0x98, 0x08, 0xFE, 0x1E, 0xF7, 0xFF, 0x23, 0x00, 0xE7, 0xAC, 0xE6, 0xCF, 
+	0x22, 0x00, 0x23, 0x00, 0x20, 0x00, 0x23, 0x3F, 0xE6, 0xBC, 0x9A, 0x03, 0x40, 0x13, 0x1A, 0xD3, 
+	0x88, 0x88, 0xE6, 0xA4, 0x84, 0x0B, 0x40, 0x1A, 0x23, 0x3F, 0xB2, 0x80, 0x1A, 0x80, 0xE6, 0xA7, 
+	0x80, 0x88, 0x98, 0x08, 0x68, 0x61, 0xFD, 0xD0, 0xF7, 0xFF, 0xE7, 0x7A, 0x68, 0x69, 0xF7, 0xFF, 
+	0x68, 0x61, 0xE7, 0x8F, 0xFD, 0xCB, 0x99, 0x09, 0x98, 0x08, 0xFD, 0xC6, 0xF7, 0xFF, 0xB5, 0x38, 
+	0xE7, 0x8A, 0xD1, 0x05, 0x28, 0x50, 0x20, 0x01, 0x4B, 0x53, 0xF7, 0xFF, 0x60, 0x18, 0xE0, 0xA0, 
+	0xF9, 0x3D, 0x28, 0x40, 0x4B, 0x51, 0x24, 0x01, 0xD1, 0x01, 0x78, 0x1B, 0x70, 0x1C, 0xD1, 0x00, 
+	0x2B, 0x00, 0x38, 0x41, 0xE0, 0x97, 0xD9, 0x00, 0x28, 0x0E, 0xF7, 0xFE, 0xE0, 0x93, 0x12, 0x08, 
+	0xFE, 0x8F, 0x47, 0x08, 0x2D, 0x08, 0x5E, 0x92, 0x92, 0x92, 0x92, 0x92, 0x7A, 0x64, 0x4B, 0x47, 
+	0x00, 0x8D, 0x70, 0x1A, 0x22, 0x01, 0x80, 0x1A, 0x4B, 0x46, 0x60, 0x13, 0x4A, 0x46, 0xFD, 0x76, 
+	0xF7, 0xFC, 0x48, 0x42, 0xE0, 0x7F, 0x2A, 0xFF, 0x4B, 0x43, 0x4A, 0x43, 0xD1, 0x0B, 0x78, 0x12, 
+	0x01, 0xC9, 0xB2, 0xD2, 0x00, 0x52, 0x4A, 0x41, 0x70, 0x02, 0x60, 0x19, 0x18, 0x89, 0xFD, 0x66, 
+	0xF7, 0xFC, 0x01, 0x89, 0xE0, 0x6F, 0x49, 0x3D, 0x18, 0x8A, 0x24, 0x02, 0x00, 0x52, 0x70, 0x04, 
+	0x18, 0x52, 0xF7, 0xFC, 0x60, 0x1A, 0xE0, 0x64, 0xFD, 0x5B, 0x4B, 0x36, 0x4C, 0x34, 0x2A, 0xFF, 
+	0x48, 0x38, 0x4A, 0x35, 0xD1, 0x0A, 0x78, 0x12, 0x01, 0x89, 0x00, 0x52, 0x18, 0x40, 0x70, 0x22, 
+	0xB2, 0xD2, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x54, 0xFD, 0x4B, 0x18, 0x52, 0x01, 0x49, 0x25, 0x02, 
+	0x00, 0x52, 0x70, 0x25, 0x18, 0x80, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x4A, 0xFD, 0x41, 0x4B, 0x29, 
+	0x4C, 0x27, 0x2A, 0xFF, 0x48, 0x2C, 0x4A, 0x28, 0xD1, 0x08, 0x78, 0x92, 0x01, 0x49, 0x70, 0x22, 
+	0x18, 0x40, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x3C, 0xFD, 0x33, 0x18, 0x52, 0x01, 0x49, 0x18, 0x80, 
+	0x25, 0x01, 0x60, 0x18, 0x70, 0x25, 0xFD, 0x2A, 0xF7, 0xFC, 0x49, 0x1C, 0xE0, 0x33, 0x48, 0x22, 
+	0x4B, 0x1D, 0xD1, 0x0E, 0x2A, 0xFF, 0x49, 0x19, 0xE0, 0x04, 0x48, 0x20, 0x4B, 0x1A, 0xD1, 0x08, 
+	0x2A, 0xFF, 0x78, 0x12, 0x4A, 0x1F, 0xB2, 0xD2, 0x00, 0x52, 0x60, 0x18, 0x70, 0x0A, 0xFD, 0x16, 
+	0xF7, 0xFC, 0x00, 0x52, 0xE0, 0x1F, 0x18, 0x80, 0x24, 0x02, 0x60, 0x18, 0x70, 0x0C, 0xFD, 0x0E, 
+	0xF7, 0xFC, 0x48, 0x0E, 0xE0, 0x17, 0x49, 0x17, 0x4B, 0x0F, 0xD1, 0x06, 0x2A, 0xFF, 0x78, 0x12, 
+	0x4A, 0x14, 0x60, 0x19, 0x70, 0x02, 0xFD, 0x02, 0xF7, 0xFC, 0x24, 0x01, 0xE0, 0x0B, 0x70, 0x04, 
+	0x18, 0x8A, 0xF7, 0xFC, 0x60, 0x1A, 0xE0, 0x04, 0xFC, 0xFB, 0x23, 0x00, 0x4A, 0x0F, 0x4A, 0x02, 
+	0x70, 0x13, 0xBD, 0x38, 0x70, 0x13, 0x20, 0x00, 0x11, 0x50, 0x20, 0x00, 0x01, 0xE5, 0x20, 0x00, 
+	0x03, 0xF6, 0x20, 0x00, 0x03, 0x08, 0x20, 0x00, 0x0D, 0x34, 0x20, 0x00, 0x03, 0x0A, 0x40, 0x00, 
+	0x40, 0x84, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 
+	0x02, 0x14, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x0A, 0xA4, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0x2E, 
+	0xB5, 0x08, 0x2B, 0x0A, 0x88, 0x1B, 0xD8, 0x04, 0xD0, 0x2B, 0xD0, 0x09, 0x2B, 0x01, 0xD1, 0x51, 
+	0x2B, 0x09, 0x2B, 0xA0, 0xE0, 0x0E, 0x2B, 0xB0, 0xD0, 0x28, 0x2B, 0x5F, 0xD0, 0x42, 0xE0, 0x35, 
+	0xD1, 0x4A, 0x78, 0x11, 0x4A, 0x26, 0x42, 0x11, 0x22, 0x0E, 0x4A, 0x25, 0xD1, 0x44, 0xE0, 0x41, 
+	0x70, 0x13, 0x33, 0x34, 0x4B, 0x24, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x20, 0xD0, 0x3C, 0x2B, 0x01, 
+	0x78, 0x1B, 0x4A, 0x21, 0xD1, 0x05, 0x4B, 0x21, 0x70, 0x13, 0x70, 0x1A, 0x22, 0x00, 0x2B, 0x02, 
+	0xE0, 0x32, 0x4A, 0x1D, 0xD1, 0x30, 0x70, 0x13, 0x23, 0x01, 0x70, 0x13, 0x4A, 0x1C, 0x4B, 0x17, 
+	0xE0, 0x2A, 0x4B, 0x1B, 0x78, 0x1A, 0xE0, 0x25, 0x61, 0x1A, 0x4A, 0x1A, 0x4B, 0x14, 0x4B, 0x1A, 
+	0x78, 0x18, 0xD1, 0x06, 0x28, 0x1A, 0x4B, 0x19, 0x78, 0x19, 0x78, 0x1A, 0x78, 0x10, 0xF8, 0xA8, 
+	0xF7, 0xFF, 0x78, 0x11, 0xE0, 0x18, 0xF7, 0xFF, 0x78, 0x1A, 0xE0, 0x13, 0xFE, 0xF2, 0x78, 0x1B, 
+	0x4B, 0x0B, 0xD0, 0x0F, 0x2B, 0x00, 0x22, 0x08, 0x4B, 0x12, 0xF7, 0xFA, 0x60, 0x1A, 0xE0, 0x09, 
+	0xFF, 0x01, 0x78, 0x18, 0x4B, 0x0D, 0x78, 0x19, 0x4B, 0x0B, 0x78, 0x1A, 0x4B, 0x04, 0xF8, 0x90, 
+	0xF7, 0xFF, 0x60, 0x18, 0x4B, 0x07, 0x46, 0xC0, 0xBD, 0x08, 0x20, 0x00, 0x00, 0x28, 0x50, 0x00, 
+	0x00, 0x0C, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xDC, 0x20, 0x00, 
+	0x01, 0xDD, 0x20, 0x00, 0x08, 0xF8, 0x50, 0x00, 0x00, 0x0E, 0x50, 0x00, 0x00, 0x0D, 0x50, 0x00, 
+	0x00, 0x10, 0x20, 0x00, 0x11, 0x50, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0x69, 0x03, 0xAE, 0xF1, 0x1B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x52, 0x73, 0xAE, 0xF1, 0x1C, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x45, 0xFF, 0xFF, 0x5C, 0xA1, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/PRIV_120317_v5.c for-diff/drivers/input/touchscreen/mms100_ts/PRIV_120317_v5.c
--- caf/drivers/input/touchscreen/mms100_ts/PRIV_120317_v5.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/PRIV_120317_v5.c	2015-10-08 21:26:20.224845000 +0900
@@ -0,0 +1,396 @@
+static const struct firmware_data melfas_PRIV = {
+	.section_name = "PRIV",
+	.section_version = 0x04,
+	.start_page_addr = 23,
+	.end_page_addr = 28,
+	.compatible_version = 0x45,
+	.length = 6174,
+	.data = {
+	0xAE, 0xF1, 0x17, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x52, 0x50, 0x28, 0x00, 0xB5, 0x08, 0x28, 
+	0x01, 0xD0, 0x02, 0xE0, 0x03, 0xD1, 0x1D, 0x4B, 0x0F, 0x4A, 0x0E, 0xE0, 0x18, 0x60, 0x1A, 0x68, 
+	0x1B, 0x4B, 0x0E, 0xD1, 0x12, 0x2B, 0x0C, 0x4B, 0x0E, 0x4A, 0x0D, 0x4A, 0x0E, 0x60, 0x1A, 0x60, 
+	0x1A, 0x4B, 0x0E, 0x4B, 0x0F, 0x4A, 0x0E, 0x4A, 0x0F, 0x60, 0x1A, 0x60, 0x1A, 0x4B, 0x0F, 0x4B, 
+	0x10, 0x4A, 0x0F, 0x4A, 0x10, 0x60, 0x1A, 0x60, 0x1A, 0x4B, 0x10, 0xF7, 0xFE, 0xE0, 0x01, 0xBD, 
+	0x08, 0xF8, 0xCF, 0x00, 0x00, 0x5E, 0x09, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x11, 0x50, 0x00, 
+	0x00, 0x61, 0x6D, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x66, 0x2D, 0x20, 0x00, 0x00, 0x6C, 0x00, 
+	0x00, 0x66, 0x6D, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6B, 0xE5, 0x20, 0x00, 0x00, 0x18, 0x00, 
+	0x00, 0x61, 0xB9, 0x20, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x5D, 0xB9, 0x20, 0x00, 0x00, 0x20, 0x4B, 
+	0x10, 0xB5, 0x70, 0x68, 0x1C, 0x4A, 0x10, 0x42, 0x8C, 0x68, 0x11, 0x68, 0x1B, 0xD0, 0x17, 0x4C, 
+	0x0E, 0x68, 0x16, 0xB2, 0xF6, 0xB2, 0xDB, 0x21, 0x0F, 0x25, 0x06, 0x1C, 0x2A, 0x30, 0x01, 0x19, 
+	0x12, 0x43, 0x5A, 0x40, 0x0A, 0x78, 0x12, 0xD0, 0x09, 0x42, 0x82, 0xB2, 0xD2, 0x1C, 0x5A, 0xB2, 
+	0xDB, 0x3B, 0x1D, 0xD8, 0x00, 0x2A, 0x1D, 0x42, 0xB3, 0x1C, 0x13, 0x4B, 0x04, 0xD1, 0xEF, 0xBD, 
+	0x70, 0xB2, 0x18, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x09, 0xF0, 0x00, 
+	0x00, 0xFF, 0xFF, 0x2A, 0x12, 0xB5, 0x00, 0xD8, 0x04, 0xD0, 0x2D, 0xD0, 0x09, 0x2A, 0x10, 0xD1, 
+	0x53, 0x2A, 0x11, 0x2A, 0x40, 0xE0, 0x1E, 0x2A, 0x80, 0xD0, 0x10, 0x2A, 0x13, 0xD0, 0x14, 0xE0, 
+	0x30, 0xD1, 0x4C, 0x3A, 0x1E, 0x1C, 0x02, 0x2A, 0x78, 0x23, 0x00, 0x4B, 0x25, 0xD8, 0x47, 0x73, 
+	0xD8, 0x22, 0x0F, 0x70, 0x1A, 0x4B, 0x24, 0xE0, 0x40, 0x23, 0x01, 0x01, 0x80, 0x4B, 0x23, 0x60, 
+	0x59, 0x43, 0x01, 0xE0, 0x3A, 0x23, 0x01, 0x01, 0x80, 0x4B, 0x20, 0x60, 0x99, 0x43, 0x01, 0xE0, 
+	0x34, 0x23, 0x01, 0x3A, 0x0A, 0x1C, 0x02, 0x2A, 0x32, 0x23, 0x00, 0x4B, 0x1C, 0xD8, 0x2F, 0x23, 
+	0x01, 0x77, 0x58, 0x28, 0x00, 0xE0, 0x2B, 0x4B, 0x19, 0xD1, 0x03, 0x77, 0x5A, 0x22, 0x1E, 0x23, 
+	0x00, 0xE0, 0x05, 0xD1, 0x22, 0x28, 0x01, 0x22, 0x37, 0x4B, 0x15, 0x4B, 0x13, 0x77, 0x5A, 0x23, 
+	0x01, 0x60, 0xD8, 0x28, 0x00, 0xE0, 0x1B, 0x4B, 0x11, 0xD1, 0x09, 0x1C, 0x1A, 0x21, 0x96, 0x00, 
+	0xC9, 0x32, 0x08, 0x33, 0x48, 0x87, 0xD1, 0x80, 0x1A, 0x22, 0x64, 0x23, 0x00, 0xE0, 0x0A, 0xD1, 
+	0x0C, 0x28, 0x01, 0x49, 0x0B, 0x4B, 0x0A, 0x32, 0x08, 0x1C, 0x1A, 0x4A, 0x0A, 0x87, 0xD1, 0x80, 
+	0x1A, 0x33, 0x48, 0x61, 0x18, 0x4B, 0x05, 0xE0, 0x00, 0x23, 0x01, 0x1C, 0x18, 0x23, 0x00, 0x46, 
+	0xC0, 0xBD, 0x00, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x08, 0xF8, 0x20, 
+	0x00, 0x0D, 0x48, 0x00, 0x00, 0x13, 0x88, 0xFF, 0xFF, 0xEC, 0x78, 0x4B, 0x0E, 0xB5, 0x08, 0xB2, 
+	0xDB, 0x88, 0x1B, 0xD0, 0x02, 0x2B, 0x10, 0xD1, 0x13, 0x2B, 0xAF, 0xF7, 0xFD, 0xE0, 0x10, 0x4A, 
+	0x0A, 0xFB, 0xA1, 0x70, 0x13, 0x23, 0x00, 0x68, 0x11, 0x4A, 0x09, 0x68, 0x12, 0x4A, 0x09, 0xD0, 
+	0x02, 0x42, 0x91, 0xFB, 0x6C, 0xF7, 0xFD, 0x4A, 0x07, 0xE0, 0x04, 0xE0, 0x01, 0x60, 0x13, 0xFB, 
+	0x90, 0xF7, 0xFD, 0x46, 0xC0, 0xBD, 0x08, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0x2A, 0x20, 
+	0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x0D, 0x98, 0x38, 0x04, 0xB5, 0xF0, 0x28, 
+	0x0C, 0xB0, 0x89, 0xE1, 0x72, 0xD9, 0x00, 0xFC, 0x64, 0xF7, 0xFF, 0x01, 0x71, 0x00, 0x0D, 0x01, 
+	0x71, 0x00, 0x18, 0x00, 0x28, 0x01, 0x71, 0x01, 0x71, 0x01, 0x71, 0x00, 0x2E, 0x00, 0x2E, 0x01, 
+	0x71, 0x00, 0x54, 0x49, 0xB3, 0x01, 0x17, 0x68, 0x0A, 0x23, 0x00, 0xDD, 0x02, 0x42, 0x9A, 0x18, 
+	0xD3, 0x68, 0x4B, 0x4A, 0xB0, 0x0F, 0xDB, 0xE1, 0x58, 0x70, 0x13, 0x4C, 0xB0, 0x4B, 0xAF, 0x4B, 
+	0xB0, 0x78, 0x1A, 0xD0, 0x01, 0x2A, 0x00, 0xE0, 0x00, 0x4A, 0xAF, 0x7E, 0x90, 0x4A, 0xAF, 0x01, 
+	0x80, 0x68, 0x19, 0xFC, 0x96, 0xF7, 0xFF, 0xE1, 0x48, 0x76, 0xA0, 0x22, 0x1C, 0x4B, 0xA8, 0x4B, 
+	0xAB, 0x56, 0x9A, 0xE1, 0x42, 0x60, 0x1A, 0x68, 0xD3, 0x4A, 0xAA, 0xD1, 0x03, 0x2B, 0x00, 0x21, 
+	0x1E, 0x4B, 0xA3, 0xE0, 0x04, 0x77, 0x59, 0xD1, 0x02, 0x2B, 0x01, 0x21, 0x37, 0x4B, 0xA0, 0x69, 
+	0x13, 0x77, 0x59, 0xD1, 0x09, 0x2B, 0x00, 0x21, 0x96, 0x4B, 0x9D, 0x32, 0x08, 0x1C, 0x1A, 0x87, 
+	0xD1, 0x00, 0xC9, 0x22, 0x64, 0x33, 0x48, 0xE1, 0x28, 0x80, 0x1A, 0xD0, 0x00, 0x2B, 0x01, 0x4B, 
+	0x97, 0xE1, 0x25, 0x1C, 0x1A, 0x49, 0x9C, 0x87, 0xD1, 0x32, 0x08, 0x33, 0x48, 0x4A, 0x9B, 0xE1, 
+	0x1C, 0x80, 0x1A, 0x68, 0xDB, 0x4B, 0x97, 0xD0, 0x00, 0x2B, 0x00, 0x4C, 0x98, 0xE1, 0x17, 0x1C, 
+	0x20, 0x21, 0x01, 0x38, 0x1C, 0x1C, 0x27, 0x90, 0x00, 0x3F, 0x38, 0xE0, 0xAA, 0x91, 0x04, 0x5E, 
+	0xA3, 0x22, 0x00, 0xD1, 0x00, 0x2B, 0x00, 0x9B, 0x04, 0xE0, 0x9D, 0x93, 0x06, 0x98, 0x04, 0x43, 
+	0x43, 0x23, 0x0A, 0x1C, 0x1A, 0x49, 0x8F, 0x00, 0x46, 0x32, 0x38, 0x18, 0x76, 0x18, 0x55, 0x35, 
+	0x04, 0x49, 0x8D, 0x32, 0x04, 0x18, 0x52, 0x92, 0x05, 0x36, 0x04, 0xE0, 0x83, 0x93, 0x07, 0x5E, 
+	0x6B, 0x21, 0x00, 0xD0, 0x77, 0x2B, 0x00, 0x5E, 0x73, 0x21, 0x00, 0x5E, 0xB8, 0x22, 0x00, 0x17, 
+	0xC2, 0x1A, 0xC0, 0x18, 0x80, 0x9B, 0x00, 0x21, 0x00, 0x40, 0x50, 0x22, 0x1C, 0x5E, 0x59, 0xB2, 
+	0x00, 0x5E, 0xB3, 0x17, 0xCB, 0x1A, 0xC9, 0x40, 0x59, 0x18, 0xC9, 0xF7, 0xFC, 0xB2, 0x09, 0x99, 
+	0x07, 0xFA, 0x9F, 0x18, 0xCB, 0x4B, 0x7C, 0x5E, 0x5A, 0x21, 0x32, 0x99, 0x05, 0x4B, 0x7B, 0xD0, 
+	0x04, 0x2A, 0x00, 0x5E, 0x8A, 0x22, 0x00, 0xD1, 0x04, 0x2A, 0x00, 0x22, 0x00, 0xE0, 0x13, 0x2A, 
+	0x00, 0x5E, 0x8A, 0x68, 0x1B, 0xD1, 0x0F, 0xDA, 0x4D, 0x42, 0x98, 0x5E, 0x68, 0x21, 0x00, 0x5E, 
+	0xE2, 0x23, 0x00, 0x92, 0x01, 0x90, 0x02, 0x18, 0x12, 0x99, 0x02, 0x5E, 0xF0, 0x23, 0x00, 0x43, 
+	0x48, 0x92, 0x03, 0x68, 0x1A, 0xE0, 0x0F, 0x43, 0x53, 0x23, 0x06, 0xDA, 0x3B, 0x42, 0x98, 0x5E, 
+	0xEA, 0x23, 0x00, 0x5E, 0x60, 0x21, 0x00, 0x90, 0x01, 0x92, 0x02, 0x90, 0x03, 0x18, 0x80, 0x5E, 
+	0x70, 0x21, 0x00, 0x22, 0x00, 0x43, 0x50, 0x99, 0x01, 0x5E, 0xBB, 0x99, 0x03, 0x43, 0x4B, 0xF7, 
+	0xFF, 0x18, 0xC0, 0x80, 0x38, 0xFB, 0xEF, 0x5E, 0xB3, 0x22, 0x1C, 0x99, 0x00, 0x98, 0x02, 0x43, 
+	0x43, 0x9A, 0x01, 0x5E, 0x08, 0x20, 0x00, 0x43, 0x50, 0x99, 0x03, 0xF7, 0xFF, 0x18, 0x18, 0x9B, 
+	0x00, 0xFB, 0xE1, 0x80, 0x18, 0x21, 0x0C, 0x5A, 0x08, 0x46, 0x68, 0x80, 0x20, 0x88, 0x62, 0xB2, 
+	0x11, 0x88, 0x6B, 0x42, 0x88, 0xB2, 0x18, 0x1C, 0x13, 0xDA, 0x00, 0x79, 0x2A, 0x80, 0x63, 0x21, 
+	0x00, 0x79, 0x23, 0x71, 0x23, 0x18, 0xD3, 0x4B, 0x4E, 0x22, 0x00, 0x71, 0x2A, 0x80, 0x69, 0x68, 
+	0x1A, 0x80, 0x29, 0x50, 0x8C, 0xAE, 0xF1, 0x18, 0x60, 0x1A, 0x3A, 0x01, 0x99, 0x05, 0x98, 0x06, 
+	0x31, 0x0A, 0x30, 0x01, 0x35, 0x0A, 0x90, 0x06, 0x91, 0x05, 0x36, 0x02, 0x9A, 0x06, 0x4B, 0x49, 
+	0x7F, 0xDB, 0x33, 0x04, 0xDA, 0x00, 0x42, 0x9A, 0x9B, 0x04, 0xE7, 0x74, 0x33, 0x01, 0x98, 0x00, 
+	0x93, 0x04, 0x30, 0x02, 0x37, 0x02, 0x34, 0x0A, 0x4B, 0x42, 0x90, 0x00, 0x33, 0x04, 0x9A, 0x04, 
+	0x3A, 0x01, 0x7F, 0xDB, 0x42, 0x9A, 0x3B, 0x01, 0xE7, 0x4B, 0xDA, 0x00, 0x4B, 0x3E, 0xE0, 0x59, 
+	0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x3D, 0xD1, 0x09, 0x48, 0x33, 0x21, 0xD0, 0x18, 0x5F, 0x00, 0x49, 
+	0x69, 0x44, 0x21, 0x00, 0x1C, 0x06, 0x1C, 0x0A, 0x4B, 0x36, 0xE0, 0x37, 0x33, 0x04, 0x21, 0x00, 
+	0x4A, 0x31, 0x7F, 0xDB, 0x1C, 0x08, 0x24, 0x0A, 0x3B, 0x01, 0xE0, 0x07, 0x1C, 0x25, 0xB2, 0xDB, 
+	0x19, 0x55, 0x43, 0x5D, 0x4D, 0x32, 0x87, 0xA9, 0x2B, 0x00, 0x54, 0xE8, 0x60, 0x13, 0xD1, 0xF5, 
+	0x22, 0x01, 0x49, 0x30, 0x60, 0x4A, 0x42, 0x52, 0x60, 0x0B, 0x4A, 0x2F, 0xE0, 0x04, 0x78, 0x12, 
+	0xB2, 0xD2, 0x3A, 0x01, 0x00, 0x40, 0x1D, 0x10, 0x2A, 0x00, 0x52, 0x43, 0xE7, 0xD2, 0xD1, 0xF8, 
+	0x2D, 0x1E, 0x56, 0x1D, 0x23, 0x00, 0xDD, 0x02, 0xE0, 0x22, 0x61, 0x73, 0xDD, 0x01, 0x2D, 0x0A, 
+	0xE0, 0x04, 0x31, 0x01, 0xDA, 0x01, 0x35, 0x05, 0xE0, 0x00, 0x32, 0x01, 0x30, 0x01, 0x24, 0x00, 
+	0xD1, 0xED, 0x28, 0x17, 0x42, 0xBB, 0x33, 0x20, 0x20, 0x00, 0xD0, 0x01, 0x4B, 0x12, 0xE7, 0xE8, 
+	0x2A, 0x00, 0x61, 0x5C, 0x29, 0x00, 0xD0, 0x03, 0x34, 0x01, 0xD0, 0x01, 0x2A, 0x05, 0x61, 0x5C, 
+	0x69, 0x5A, 0xDC, 0x02, 0xDD, 0x04, 0x2A, 0x64, 0x61, 0x5A, 0x22, 0x00, 0x22, 0x0D, 0x4B, 0x17, 
+	0xB0, 0x09, 0x70, 0x1A, 0x46, 0xC0, 0xBD, 0xF0, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x11, 0x3D, 
+	0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0x78, 0x00, 0x00, 0x74, 0x9A, 
+	0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 0x0D, 0x38, 0x20, 0x00, 0x08, 0xF8, 0x00, 0x00, 0x13, 0x88, 
+	0xFF, 0xFF, 0xEC, 0x78, 0x20, 0x00, 0x0D, 0xD8, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x03, 0x20, 
+	0x20, 0x00, 0x02, 0x20, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x00, 0xF5, 0x20, 0x00, 0x0E, 0x64, 
+	0x20, 0x00, 0x01, 0x64, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x03, 0x1D, 
+	0x68, 0x1A, 0x4B, 0x02, 0x60, 0x1A, 0x4B, 0x02, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x80, 
+	0x20, 0x00, 0x00, 0x84, 0xF7, 0xFF, 0xB5, 0x08, 0xBD, 0x08, 0xFF, 0xF3, 0x4A, 0x07, 0xB5, 0x00, 
+	0x68, 0x10, 0x4B, 0x07, 0x42, 0x88, 0x68, 0x19, 0x68, 0x10, 0xDB, 0x03, 0x1A, 0xC0, 0x68, 0x1B, 
+	0x68, 0x10, 0xE0, 0x03, 0x30, 0x1E, 0x68, 0x1B, 0xBD, 0x00, 0x1A, 0xC0, 0x20, 0x00, 0x00, 0x80, 
+	0x20, 0x00, 0x00, 0x84, 0x4B, 0x05, 0xB5, 0x00, 0x32, 0x01, 0x68, 0x1A, 0x68, 0x1A, 0x60, 0x1A, 
+	0xDD, 0x02, 0x2A, 0x1D, 0x3A, 0x1E, 0x68, 0x1A, 0xBD, 0x00, 0x60, 0x1A, 0x20, 0x00, 0x00, 0x84, 
+	0x4A, 0xA7, 0xB5, 0xF7, 0xB2, 0x1B, 0x88, 0x13, 0xD1, 0x00, 0x2B, 0xAE, 0xDC, 0x3B, 0xE1, 0xB2, 
+	0xD1, 0x00, 0x2B, 0x0A, 0xDC, 0x18, 0xE0, 0xED, 0xD1, 0x00, 0x2B, 0x05, 0xDC, 0x08, 0xE0, 0xCE, 
+	0xD1, 0x00, 0x2B, 0x03, 0xDD, 0x00, 0xE0, 0xB7, 0x2B, 0x02, 0xE0, 0xBE, 0xE1, 0xE7, 0xD0, 0x00, 
+	0x2B, 0x07, 0xE0, 0xA4, 0xE0, 0xCC, 0xD1, 0x00, 0xE0, 0xC4, 0xDA, 0x00, 0xD1, 0x00, 0x2B, 0x08, 
+	0x2B, 0x09, 0xE0, 0xF7, 0xE1, 0xDB, 0xD0, 0x00, 0x2B, 0x10, 0xE0, 0xC8, 0xE0, 0x7F, 0xD1, 0x00, 
+	0x2B, 0x0C, 0xDC, 0x0B, 0xE0, 0xD9, 0xD1, 0x00, 0xE0, 0xCF, 0xDA, 0x00, 0xD1, 0x00, 0x2B, 0x0D, 
+	0x2B, 0x0F, 0xE0, 0xDD, 0xE1, 0xCB, 0xD0, 0x00, 0x2B, 0x62, 0xE0, 0x48, 0xE1, 0xC3, 0xD1, 0x00, 
+	0x2B, 0x61, 0xDC, 0x03, 0xE1, 0xC3, 0xD0, 0x00, 0x2B, 0x64, 0xE1, 0xB9, 0xE1, 0xB1, 0xD1, 0x00, 
+	0xD0, 0x00, 0x2B, 0xA8, 0xE1, 0x9D, 0xE1, 0xBC, 0xD1, 0x00, 0x2B, 0xF4, 0xDC, 0x19, 0xE0, 0xF4, 
+	0xD1, 0x00, 0x2B, 0xEF, 0xDC, 0x09, 0xE1, 0x87, 0xD1, 0x00, 0x2B, 0xBF, 0x2B, 0xEE, 0xE1, 0x8D, 
+	0xE1, 0x7C, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xAF, 0xE1, 0x6A, 0xE1, 0xAA, 0xD1, 0x00, 0x2B, 0xF1, 
+	0xDA, 0x00, 0xE0, 0xC8, 0x2B, 0xF2, 0xE0, 0xC2, 0xE0, 0xCB, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xF3, 
+	0xE0, 0xD0, 0xE1, 0x9E, 0xD1, 0x00, 0x2B, 0xF9, 0xDC, 0x0B, 0xE1, 0x26, 0xD1, 0x00, 0x2B, 0xF6, 
+	0xDA, 0x00, 0xE1, 0x06, 0x2B, 0xF7, 0xE0, 0xD9, 0xE1, 0x08, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xF8, 
+	0xE1, 0x10, 0xE1, 0x8E, 0xD1, 0x00, 0x2B, 0xFB, 0xDA, 0x00, 0xE1, 0x28, 0x2B, 0xFC, 0xE1, 0x1D, 
+	0xE1, 0x2C, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xFD, 0xE1, 0x31, 0xE1, 0x82, 0xFF, 0x5E, 0xF7, 0xFF, 
+	0x60, 0x20, 0x4C, 0x68, 0x2B, 0x00, 0x68, 0x23, 0xF7, 0xFD, 0xD1, 0x01, 0x68, 0x23, 0xF9, 0x25, 
+	0x43, 0x5A, 0x22, 0x06, 0x4C, 0x65, 0x4B, 0x64, 0x25, 0x00, 0x70, 0x1A, 0x4F, 0x64, 0x4E, 0x61, 
+	0x68, 0x39, 0xE0, 0x12, 0x43, 0x51, 0x22, 0x06, 0x46, 0x68, 0x4B, 0x62, 0xF7, 0xFF, 0x18, 0xC9, 
+	0x23, 0x00, 0xFA, 0xB5, 0x5C, 0x1A, 0x46, 0x68, 0x33, 0x01, 0x54, 0xE2, 0xD1, 0xF9, 0x2B, 0x06, 
+	0xFF, 0x50, 0xF7, 0xFF, 0x34, 0x06, 0x35, 0x01, 0x42, 0x9D, 0x68, 0x33, 0xE1, 0x57, 0xDB, 0xE9, 
+	0x4A, 0x54, 0x49, 0x59, 0x68, 0x13, 0x78, 0x0C, 0x43, 0x58, 0x20, 0x06, 0x42, 0x84, 0x23, 0x00, 
+	0x4A, 0x52, 0xDA, 0x0A, 0x4D, 0x50, 0x78, 0x08, 0x5C, 0xC4, 0x18, 0x10, 0x33, 0x01, 0x19, 0x58, 
+	0x2B, 0x08, 0x70, 0x04, 0xE1, 0x43, 0xD1, 0xF6, 0xE1, 0x41, 0x60, 0x13, 0x23, 0x0F, 0x4A, 0x4F, 
+	0x5E, 0x11, 0x20, 0x26, 0x5F, 0x52, 0x25, 0x28, 0x12, 0x12, 0x11, 0x09, 0x40, 0x13, 0x43, 0x99, 
+	0x18, 0xCB, 0x4A, 0x45, 0x4B, 0x42, 0x70, 0x13, 0x23, 0x03, 0x88, 0x1A, 0x1A, 0x9A, 0xB2, 0x12, 
+	0x8D, 0x19, 0x4B, 0x46, 0x54, 0xD1, 0x4B, 0x40, 0x88, 0x1A, 0x4B, 0x3D, 0xB2, 0x12, 0x23, 0x04, 
+	0x4B, 0x42, 0x1A, 0x9A, 0x4B, 0x3C, 0x8C, 0xD9, 0xE1, 0x21, 0x54, 0xD1, 0x8C, 0xDA, 0x4B, 0x40, 
+	0x70, 0x1A, 0x4B, 0x39, 0x4B, 0x3E, 0xE1, 0x1C, 0x78, 0x1A, 0x33, 0x34, 0x70, 0x1A, 0x4B, 0x36, 
+	0x4B, 0x3A, 0xE1, 0x16, 0x4B, 0x34, 0x7B, 0xDA, 0xE1, 0x11, 0x70, 0x1A, 0x78, 0x1A, 0x4B, 0x39, 
+	0x2A, 0x00, 0x4B, 0x31, 0x22, 0x02, 0xD0, 0x02, 0xE1, 0x09, 0x70, 0x1A, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x35, 0xE1, 0x06, 0x4B, 0x2C, 0x78, 0x1A, 0xE1, 0x01, 0x70, 0x1A, 0x4B, 0x33, 0x88, 0x12, 
+	0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0x0B, 0x54, 0xD1, 0x4B, 0x27, 0x88, 0x1A, 0x4B, 0x24, 
+	0xB2, 0x12, 0x4B, 0x2E, 0x23, 0x0C, 0x78, 0x59, 0x4B, 0x23, 0x1A, 0x9A, 0x4B, 0x20, 0x54, 0xD1, 
+	0x4B, 0x2B, 0x88, 0x1A, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0x0D, 0x54, 0xD1, 0x4B, 0x1E, 
+	0x4B, 0x23, 0xE0, 0xE6, 0x4B, 0x1C, 0x8D, 0xDA, 0xE0, 0xE1, 0x70, 0x1A, 0x78, 0x1A, 0x4B, 0x1F, 
+	0x70, 0x1A, 0x4B, 0x19, 0x21, 0x01, 0x4B, 0x16, 0x59, 0x6F, 0xAE, 0xF1, 0x19, 0x23, 0xF1, 0x88, 
+	0x1A, 0x1A, 0x9A, 0xB2, 0x12, 0x54, 0xD1, 0x4B, 0x15, 0x88, 0x1A, 0x4B, 0x12, 0xB2, 0x12, 0x4B, 
+	0x18, 0x23, 0xF2, 0x78, 0x59, 0x4B, 0x11, 0x1A, 0x9A, 0x4B, 0x0E, 0x54, 0xD1, 0x4B, 0x1A, 0x88, 
+	0x1A, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF3, 0x54, 0xD1, 0x4B, 0x0C, 0x88, 0x1A, 0x4B, 
+	0x09, 0xB2, 0x12, 0x4B, 0x16, 0x23, 0xF4, 0x78, 0x19, 0x4B, 0x08, 0x1A, 0x9A, 0x4B, 0x05, 0x54, 
+	0xD1, 0x4B, 0x13, 0x88, 0x1A, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF5, 0x54, 0xD1, 0x4B, 
+	0x03, 0x46, 0xC0, 0xE0, 0xB0, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x0D, 0x98, 0x50, 0x00, 0x00, 
+	0x0C, 0x20, 0x00, 0x00, 0x88, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x09, 0xF0, 0x20, 0x00, 0x00, 
+	0x2A, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x01, 
+	0xDF, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0x7C, 0x00, 0x00, 0x5B, 0xFF, 0x00, 0x00, 0x73, 
+	0xFF, 0x00, 0x00, 0x7B, 0xFF, 0x4A, 0x49, 0x4B, 0x48, 0x18, 0xD3, 0x78, 0x1B, 0x4B, 0x48, 0x78, 
+	0xDA, 0x4B, 0x48, 0x70, 0x1A, 0x88, 0x1A, 0x49, 0x45, 0xB2, 0x12, 0x4B, 0x43, 0x18, 0xCB, 0x78, 
+	0x1B, 0x23, 0xF7, 0x79, 0x19, 0x4B, 0x42, 0x1A, 0x9A, 0x4B, 0x42, 0x54, 0xD1, 0x4B, 0x3F, 0x88, 
+	0x1A, 0x79, 0x59, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF8, 0x54, 0xD1, 0x4B, 0x3D, 0x88, 0x1A, 0x4B, 
+	0x3D, 0xB2, 0x12, 0x4B, 0x3A, 0x23, 0xF9, 0x79, 0x99, 0x4B, 0x39, 0x1A, 0x9A, 0x4B, 0x39, 0x54, 
+	0xD1, 0x4B, 0x36, 0x88, 0x1A, 0x79, 0xD9, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xFA, 0x54, 0xD1, 0x4B, 
+	0x34, 0x88, 0x1A, 0x4B, 0x34, 0xB2, 0x12, 0x4B, 0x31, 0x23, 0xFB, 0x7A, 0x19, 0x4B, 0x30, 0x1A, 
+	0x9A, 0x4B, 0x30, 0x54, 0xD1, 0x4B, 0x2D, 0x88, 0x1A, 0x7A, 0x59, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 
+	0xFC, 0x54, 0xD1, 0x4B, 0x2B, 0x88, 0x1A, 0x4B, 0x2B, 0xB2, 0x12, 0x4B, 0x28, 0x23, 0xFD, 0x7A, 
+	0x99, 0x4B, 0x27, 0x1A, 0x9A, 0xE0, 0x45, 0x54, 0xD1, 0x78, 0x1A, 0x4B, 0x27, 0x70, 0x1A, 0x4B, 
+	0x24, 0xFF, 0xEC, 0xF7, 0xFC, 0x49, 0x25, 0xE0, 0x3E, 0x23, 0x00, 0x4A, 0x1F, 0x78, 0x10, 0x68, 
+	0x0C, 0x18, 0x20, 0x4D, 0x1F, 0x19, 0x58, 0x5C, 0xC4, 0x70, 0x04, 0x33, 0x01, 0xD1, 0xF5, 0x2B, 
+	0x08, 0x4B, 0x1A, 0xE0, 0x30, 0x4B, 0x1A, 0x7E, 0x1A, 0x4B, 0x1A, 0x70, 0x1A, 0x4B, 0x17, 0x88, 
+	0x1A, 0x7D, 0xD9, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xEF, 0x54, 0xD1, 0x4B, 0x15, 0x4B, 0x18, 0xE0, 
+	0x22, 0x4B, 0x13, 0x68, 0x1A, 0xE0, 0x1D, 0x70, 0x1A, 0x4A, 0x0F, 0x49, 0x14, 0x68, 0x0C, 0x23, 
+	0x00, 0x4D, 0x0F, 0x78, 0x10, 0x5C, 0xC4, 0x18, 0x20, 0x33, 0x01, 0x19, 0x58, 0x2B, 0x08, 0x70, 
+	0x04, 0xF7, 0xFC, 0xD1, 0xF5, 0xE0, 0x0D, 0xFF, 0xBB, 0x78, 0x1A, 0x4B, 0x0E, 0x70, 0x1A, 0x4B, 
+	0x08, 0x4B, 0x0D, 0xE0, 0x08, 0x4B, 0x06, 0x78, 0x9A, 0xE0, 0x03, 0x70, 0x1A, 0x78, 0xDA, 0x4B, 
+	0x0A, 0x70, 0x1A, 0x4B, 0x03, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x09, 
+	0xAE, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x0D, 
+	0x34, 0x20, 0x00, 0x08, 0xF8, 0x00, 0x00, 0x5B, 0xFF, 0x20, 0x00, 0x00, 0x35, 0x4C, 0x0F, 0xB5, 
+	0x73, 0x90, 0x00, 0x4D, 0x0F, 0x68, 0x20, 0x91, 0x01, 0x30, 0x1F, 0x21, 0x1E, 0xF7, 0xFF, 0x68, 
+	0x2E, 0x42, 0xB1, 0xF9, 0x23, 0x68, 0x20, 0xD0, 0xF7, 0x43, 0x50, 0x22, 0x06, 0x46, 0x69, 0x4B, 
+	0x09, 0xF7, 0xFF, 0x18, 0xC0, 0x68, 0x23, 0xF9, 0x25, 0x60, 0x23, 0x33, 0x01, 0x2B, 0x1D, 0x68, 
+	0x23, 0x68, 0x23, 0xDD, 0x02, 0x60, 0x23, 0x3B, 0x1E, 0x46, 0xC0, 0xBD, 0x73, 0x20, 0x00, 0x00, 
+	0x80, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x09, 0xF0, 0x46, 0x6A, 0xB5, 0x07, 0x70, 0x13, 0x23, 
+	0x0F, 0x70, 0x53, 0x23, 0x00, 0x70, 0xD3, 0x70, 0x93, 0x98, 0x00, 0x71, 0x53, 0xF7, 0xFF, 0x99, 
+	0x01, 0xF7, 0xFC, 0xFF, 0xCD, 0xBD, 0x07, 0xFF, 0x39, 0x23, 0x06, 0xB5, 0x07, 0x1C, 0x18, 0x90, 
+	0x00, 0x91, 0x01, 0x43, 0x50, 0x1C, 0x1A, 0x49, 0x03, 0x46, 0x69, 0x18, 0x40, 0xF8, 0xF8, 0xF7, 
+	0xFF, 0x46, 0xC0, 0xBD, 0x07, 0x20, 0x00, 0x09, 0xF0, 0x4C, 0xCB, 0xB5, 0xF0, 0x69, 0x23, 0x4E, 
+	0xCB, 0x3B, 0x02, 0xB0, 0x8B, 0x41, 0x93, 0x1E, 0x5A, 0x5C, 0xB5, 0x22, 0x23, 0x26, 0x0F, 0x42, 
+	0x5B, 0x22, 0x00, 0x40, 0x1E, 0x61, 0xA2, 0x96, 0x05, 0x2D, 0x00, 0x26, 0x00, 0xE1, 0x2D, 0xD1, 
+	0x00, 0xB2, 0xDB, 0x1E, 0x6B, 0xE0, 0x00, 0x48, 0xC2, 0x00, 0x9A, 0x1C, 0x13, 0x18, 0xD2, 0x4E, 
+	0xC1, 0x18, 0xB2, 0x00, 0x52, 0x5F, 0x91, 0x26, 0x3C, 0x1E, 0x4E, 0x1E, 0x5A, 0x54, 0xC1, 0x41, 
+	0xB1, 0x2B, 0x00, 0xB2, 0xD2, 0x26, 0x00, 0xD1, 0xF0, 0xDC, 0x00, 0x2D, 0x00, 0x4D, 0xB9, 0xE1, 
+	0x16, 0x35, 0x40, 0x27, 0x00, 0xE0, 0x12, 0x95, 0x01, 0xDD, 0x22, 0x2A, 0x00, 0x88, 0x99, 0x4D, 
+	0xB5, 0x19, 0xEB, 0x8B, 0x1A, 0x84, 0x1A, 0x80, 0x99, 0x23, 0x23, 0x4D, 0xB0, 0x9D, 0x01, 0x5C, 
+	0xEB, 0x35, 0x0A, 0x36, 0x01, 0x95, 0x01, 0x37, 0x02, 0xDC, 0x00, 0x42, 0xB3, 0x4D, 0xAE, 0xE0, 
+	0xFE, 0x8D, 0x99, 0x19, 0xEB, 0x2A, 0x00, 0xB2, 0x0A, 0xE0, 0xDC, 0xDC, 0x00, 0x3D, 0x04, 0x9D, 
+	0x01, 0x20, 0x00, 0x95, 0x07, 0x2D, 0x00, 0x5E, 0x2D, 0xE0, 0x8A, 0xDC, 0x00, 0x29, 0x00, 0x69, 
+	0xA1, 0x4D, 0xA4, 0xD1, 0xDA, 0x8C, 0x08, 0x19, 0xE9, 0x20, 0x18, 0x90, 0x03, 0x20, 0x0C, 0x5E, 
+	0x1D, 0x46, 0x6D, 0x95, 0x02, 0x98, 0x02, 0x5F, 0x45, 0x1A, 0x2D, 0x88, 0x9B, 0x4D, 0x9F, 0x95, 
+	0x04, 0x5C, 0x28, 0x20, 0x34, 0x98, 0x04, 0x90, 0x02, 0x19, 0x40, 0x17, 0xC5, 0x9D, 0x02, 0x40, 
+	0x68, 0x88, 0x88, 0x46, 0x84, 0xDB, 0x00, 0x45, 0xAC, 0xB2, 0x05, 0xE0, 0xAF, 0x1A, 0xEB, 0xB2, 
+	0x1B, 0x19, 0x5B, 0x17, 0xDD, 0x9D, 0x02, 0x40, 0x6B, 0xDC, 0x00, 0x42, 0x9D, 0x2A, 0x00, 0xE0, 
+	0xA5, 0x68, 0x62, 0xDC, 0xBA, 0xD0, 0x05, 0x11, 0x93, 0xD1, 0x00, 0x2B, 0x01, 0x2B, 0x02, 0xE1, 
+	0x07, 0xE1, 0x52, 0xD1, 0x00, 0x11, 0x93, 0x68, 0xA2, 0x2B, 0x01, 0xD0, 0x05, 0xE1, 0x05, 0xD1, 
+	0x00, 0xD1, 0x00, 0x2B, 0x02, 0x4B, 0x8A, 0xE1, 0x50, 0x42, 0x9A, 0xB2, 0x02, 0xE0, 0xA6, 0xDD, 
+	0x00, 0xDA, 0x00, 0x1E, 0x13, 0x0A, 0x1B, 0xE1, 0x3E, 0xB2, 0x80, 0xB2, 0xDB, 0xB2, 0xC3, 0x93, 
+	0x02, 0x8C, 0x0B, 0x93, 0x03, 0x48, 0x83, 0x80, 0x88, 0x42, 0x82, 0xB2, 0x1A, 0xE0, 0x8F, 0xDD, 
+	0x00, 0xDA, 0x00, 0x2A, 0x00, 0x11, 0x12, 0xE1, 0x2B, 0xB2, 0x9B, 0x25, 0x0F, 0xB2, 0xD2, 0x43, 
+	0xAA, 0x92, 0x04, 0xB2, 0xD8, 0x84, 0x0B, 0x90, 0x06, 0xB2, 0xF0, 0x9D, 0x07, 0x1C, 0x42, 0x21, 
+	0x60, 0x88, 0x2B, 0x42, 0x49, 0x9D, 0x01, 0x43, 0x11, 0x46, 0x8C, 0x9A, 0x02, 0x78, 0x2D, 0x99, 
+	0x04, 0xB2, 0x1A, 0x43, 0x11, 0x92, 0x02, 0x95, 0x07, 0x46, 0x62, 0xAD, 0x08, 0x70, 0x69, 0x70, 
+	0x2A, 0x46, 0x69, 0x22, 0x0C, 0x46, 0x6A, 0x5C, 0x51, 0x21, 0x18, 0x70, 0xA9, 0x73, 0x0C, 0xAE, 
+	0xF1, 0x1A, 0x46, 0x69, 0x5C, 0x8A, 0x22, 0x1C, 0x70, 0xEA, 0x9A, 0x02, 0x5C, 0x51, 0x2A, 0xFF, 
+	0x71, 0x29, 0x71, 0x6B, 0xDC, 0x42, 0xFA, 0x3A, 0xF7, 0xFF, 0xCD, 0x03, 0x1C, 0x02, 0xD0, 0x43, 
+	0x1C, 0x53, 0xFF, 0x14, 0xF7, 0xFF, 0x2A, 0x00, 0xE7, 0x5A, 0xE7, 0x57, 0xDC, 0x00, 0x56, 0x18, 
+	0x20, 0x05, 0x46, 0x84, 0x8B, 0x1D, 0x46, 0x6A, 0x95, 0x06, 0x5E, 0x85, 0x20, 0x18, 0xB2, 0xF0, 
+	0x88, 0x9B, 0x1C, 0x45, 0x11, 0x2A, 0x93, 0x03, 0x95, 0x02, 0x23, 0x0F, 0x46, 0x65, 0x93, 0x04, 
+	0x40, 0x2B, 0x43, 0x9A, 0x23, 0x0F, 0x99, 0x02, 0x1C, 0x0B, 0x22, 0x20, 0x46, 0x94, 0x91, 0x02, 
+	0x43, 0x11, 0x46, 0x62, 0x99, 0x04, 0x91, 0x04, 0x43, 0x11, 0x46, 0x8C, 0xB2, 0x19, 0x21, 0x08, 
+	0x46, 0x6A, 0xAD, 0x08, 0x5C, 0x8A, 0x46, 0x69, 0x70, 0x2A, 0x5C, 0x51, 0x22, 0x10, 0x70, 0x69, 
+	0x46, 0x6A, 0x5C, 0x8A, 0x21, 0x0C, 0x70, 0xAA, 0x46, 0x69, 0x5C, 0x51, 0x22, 0x18, 0x71, 0x2A, 
+	0x22, 0x00, 0x70, 0xE9, 0x46, 0x62, 0xDD, 0xBC, 0x2A, 0xFF, 0x71, 0x6B, 0x23, 0xFF, 0xF9, 0xF6, 
+	0xF7, 0xFF, 0xCD, 0x03, 0x1C, 0x02, 0xD1, 0xBB, 0x1C, 0x53, 0xFE, 0x9A, 0xF7, 0xFF, 0x4B, 0x43, 
+	0xE7, 0x16, 0x2B, 0x00, 0x5D, 0x9B, 0xE7, 0x56, 0xD0, 0x00, 0x98, 0x01, 0xE7, 0x53, 0x25, 0x00, 
+	0x38, 0x02, 0x9D, 0x05, 0x5F, 0x40, 0xDD, 0x00, 0x42, 0xA8, 0x9B, 0x01, 0xE7, 0x1A, 0x3B, 0x04, 
+	0x22, 0x00, 0xE7, 0x03, 0x80, 0x1A, 0x22, 0x00, 0x23, 0x50, 0x23, 0xA0, 0x93, 0x04, 0x00, 0xDB, 
+	0x92, 0x06, 0x20, 0x02, 0xE7, 0x73, 0x90, 0x02, 0x25, 0xD0, 0x95, 0x03, 0x20, 0xB4, 0xE7, 0x5A, 
+	0x00, 0x80, 0x4B, 0x34, 0x4D, 0x33, 0x68, 0x5A, 0x68, 0x69, 0xD1, 0x00, 0x1C, 0x48, 0x42, 0x91, 
+	0xE0, 0x68, 0x1C, 0x53, 0xD0, 0x35, 0x21, 0x40, 0xD0, 0x18, 0xAC, 0x08, 0x32, 0x01, 0x43, 0x0A, 
+	0x23, 0x00, 0x70, 0x22, 0xB2, 0xF6, 0x70, 0x63, 0x1C, 0x30, 0x70, 0xE3, 0x70, 0xA3, 0x71, 0x63, 
+	0x71, 0x23, 0xF9, 0xB4, 0xF7, 0xFF, 0x1C, 0x50, 0x1C, 0x02, 0xE0, 0x85, 0xD1, 0x00, 0x98, 0x08, 
+	0x68, 0x61, 0xFE, 0x8C, 0xF7, 0xFF, 0xE0, 0x01, 0x68, 0x69, 0xAC, 0x08, 0xB2, 0xF6, 0x00, 0x5B, 
+	0x1D, 0x0B, 0x5A, 0xEA, 0x20, 0x40, 0x31, 0x01, 0x42, 0x40, 0x43, 0x01, 0x23, 0x00, 0x1C, 0x30, 
+	0x71, 0x62, 0x70, 0x63, 0x70, 0x21, 0x70, 0xE3, 0x70, 0xA3, 0xF7, 0xFF, 0x71, 0x23, 0x1C, 0x02, 
+	0xF9, 0x97, 0x1C, 0x51, 0x98, 0x08, 0xE0, 0x6D, 0xD1, 0x00, 0xF7, 0xFF, 0x68, 0x61, 0x4B, 0x16, 
+	0xFE, 0x6F, 0x4B, 0x16, 0x68, 0x1A, 0x42, 0x9A, 0x68, 0x1B, 0xF7, 0xFC, 0xD0, 0x01, 0xB0, 0x0B, 
+	0xFD, 0x9F, 0x98, 0x03, 0xBD, 0xF0, 0x40, 0x13, 0x23, 0x3F, 0x84, 0x0B, 0x18, 0xC3, 0xE6, 0xF3, 
+	0x88, 0x88, 0x40, 0x1A, 0x23, 0x3F, 0xB2, 0x80, 0x18, 0x80, 0xE6, 0xF6, 0x80, 0x88, 0x20, 0x00, 
+	0x08, 0xF8, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xEC, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 
+	0x01, 0x20, 0x20, 0x00, 0x0D, 0x48, 0x00, 0x00, 0x02, 0xCF, 0x00, 0x00, 0x04, 0xFF, 0x20, 0x00, 
+	0x01, 0x64, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x00, 0xCC, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 
+	0x00, 0x80, 0xD0, 0xCC, 0x1C, 0x53, 0x21, 0x40, 0xB2, 0xF0, 0x26, 0x21, 0x32, 0x01, 0x43, 0x0A, 
+	0x23, 0x00, 0x44, 0x6E, 0xAD, 0x08, 0x70, 0x33, 0x70, 0x2A, 0x22, 0x23, 0x21, 0x22, 0x44, 0x6A, 
+	0x26, 0x25, 0xAD, 0x09, 0x44, 0x69, 0x70, 0x13, 0x44, 0x6E, 0x70, 0x2B, 0x70, 0x0B, 0xF7, 0xFF, 
+	0x70, 0x33, 0x1C, 0x02, 0xF9, 0x45, 0xD0, 0x21, 0x1C, 0x50, 0x99, 0x09, 0x98, 0x08, 0xFE, 0x1E, 
+	0xF7, 0xFF, 0x23, 0x00, 0xE7, 0xAD, 0xE6, 0xD0, 0x22, 0x00, 0x23, 0x00, 0x20, 0x00, 0x23, 0x3F, 
+	0xE6, 0xBD, 0x9A, 0x03, 0x40, 0x13, 0x1A, 0xD3, 0x88, 0x88, 0xE6, 0xA5, 0x84, 0x0B, 0x40, 0x1A, 
+	0x23, 0x3F, 0xB2, 0x80, 0x1A, 0x80, 0xE6, 0xA8, 0x80, 0x88, 0x98, 0x08, 0x68, 0x61, 0xFD, 0xD0, 
+	0xF7, 0xFF, 0xE7, 0x7B, 0x68, 0x69, 0xF7, 0xFF, 0x68, 0x61, 0xE7, 0x90, 0xFD, 0xCB, 0x99, 0x09, 
+	0x98, 0x08, 0xFD, 0xC6, 0xF7, 0xFF, 0xB5, 0x38, 0xE7, 0x8B, 0xD1, 0x05, 0x28, 0x50, 0x20, 0x01, 
+	0x4B, 0x53, 0xF7, 0xFF, 0x60, 0x18, 0xE0, 0xA0, 0xF8, 0xD1, 0x28, 0x40, 0x4B, 0x51, 0x24, 0x01, 
+	0xD1, 0x01, 0x78, 0x1B, 0x70, 0x1C, 0xD1, 0x00, 0x2B, 0x00, 0x38, 0x41, 0xE0, 0x97, 0xD9, 0x00, 
+	0x28, 0x0E, 0xF7, 0xFE, 0xE0, 0x93, 0x12, 0x08, 0xFE, 0x23, 0x47, 0x08, 0x2D, 0x08, 0x5E, 0x92, 
+	0x92, 0x92, 0x92, 0x92, 0x7A, 0x64, 0x4B, 0x47, 0x00, 0x8D, 0x70, 0x1A, 0x22, 0x01, 0x80, 0x1A, 
+	0x4B, 0x46, 0x60, 0x13, 0x4A, 0x46, 0xFD, 0x0A, 0xF7, 0xFC, 0x48, 0x42, 0xE0, 0x7F, 0x2A, 0xFF, 
+	0x4B, 0x43, 0x4A, 0x43, 0xD1, 0x0B, 0x78, 0x12, 0x01, 0xC9, 0xB2, 0xD2, 0x00, 0x52, 0x4A, 0x41, 
+	0x70, 0x02, 0x60, 0x19, 0x18, 0x89, 0xFC, 0xFA, 0xF7, 0xFC, 0x01, 0x89, 0xE0, 0x6F, 0x49, 0x3D, 
+	0x18, 0x8A, 0x24, 0x02, 0x00, 0x52, 0x70, 0x04, 0x18, 0x52, 0xF7, 0xFC, 0x60, 0x1A, 0xE0, 0x64, 
+	0xFC, 0xEF, 0x4B, 0x36, 0x4C, 0x34, 0x2A, 0xFF, 0x48, 0x38, 0x4A, 0x35, 0xD1, 0x0A, 0x78, 0x12, 
+	0x01, 0x89, 0x00, 0x52, 0x18, 0x40, 0x70, 0x22, 0xB2, 0xD2, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x54, 
+	0xFC, 0xDF, 0x18, 0x52, 0x01, 0x49, 0x25, 0x02, 0x00, 0x52, 0x70, 0x25, 0x18, 0x80, 0xF7, 0xFC, 
+	0x60, 0x18, 0xE0, 0x4A, 0xFC, 0xD5, 0x4B, 0x29, 0x4C, 0x27, 0x2A, 0xFF, 0x48, 0x2C, 0x4A, 0x28, 
+	0xD1, 0x08, 0x78, 0x92, 0x01, 0x49, 0x70, 0x22, 0x18, 0x40, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x3C, 
+	0xFC, 0xC7, 0x18, 0x52, 0x01, 0x49, 0x18, 0x80, 0x25, 0x01, 0x60, 0x18, 0x70, 0x25, 0xFC, 0xBE, 
+	0xF7, 0xFC, 0x49, 0x1C, 0xE0, 0x33, 0x48, 0x22, 0x4B, 0x1D, 0xD1, 0x0E, 0x2A, 0xFF, 0x49, 0x19, 
+	0xE0, 0x04, 0x48, 0x20, 0x4B, 0x1A, 0xD1, 0x08, 0x2A, 0xFF, 0x78, 0x12, 0x4A, 0x1F, 0xB2, 0xD2, 
+	0x00, 0x52, 0x60, 0x18, 0x70, 0x0A, 0xFC, 0xAA, 0xF7, 0xFC, 0x00, 0x52, 0xE0, 0x1F, 0x18, 0x80, 
+	0x24, 0x02, 0x60, 0x18, 0x70, 0x0C, 0xFC, 0xA2, 0xF7, 0xFC, 0x48, 0x0E, 0xE0, 0x17, 0x49, 0x17, 
+	0x4B, 0x0F, 0xD1, 0x06, 0x2A, 0xFF, 0x78, 0x12, 0x4A, 0x14, 0x60, 0x19, 0x70, 0x02, 0xFC, 0x96, 
+	0xF7, 0xFC, 0x24, 0x01, 0xE0, 0x0B, 0x70, 0x04, 0x18, 0x8A, 0xF7, 0xFC, 0x60, 0x1A, 0xE0, 0x04, 
+	0xFC, 0x8F, 0x23, 0x00, 0x4A, 0x0F, 0x4A, 0x02, 0x70, 0x13, 0xBD, 0x38, 0x70, 0x13, 0x20, 0x00, 
+	0x11, 0x50, 0x20, 0x00, 0x01, 0xE5, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x03, 0x08, 0x20, 0x00, 
+	0x0D, 0x34, 0x20, 0x00, 0x03, 0x0A, 0x40, 0x00, 0x40, 0x84, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 
+	0x0A, 0xB3, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 
+	0x0A, 0xA4, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0x2F, 0xB5, 0x08, 0x2B, 0x0A, 0x88, 0x1B, 0xD8, 0x04, 
+	0xD0, 0x2B, 0xD0, 0x09, 0x2B, 0x01, 0xD1, 0x54, 0x2B, 0x09, 0x2B, 0xA0, 0xE0, 0x0E, 0x2B, 0xB0, 
+	0xD0, 0x2B, 0x9F, 0x26, 0xAE, 0xF1, 0x1B, 0x2B, 0x5F, 0xD0, 0x45, 0xE0, 0x38, 0xD1, 0x4D, 0x78, 
+	0x11, 0x4A, 0x27, 0x42, 0x11, 0x22, 0x0E, 0x4A, 0x26, 0xD1, 0x47, 0xE0, 0x44, 0x70, 0x13, 0x33, 
+	0x34, 0x4B, 0x25, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x21, 0xD0, 0x3F, 0x2B, 0x01, 0x78, 0x1B, 0x4A, 
+	0x22, 0xD1, 0x05, 0x4B, 0x22, 0x70, 0x13, 0x70, 0x1A, 0x22, 0x00, 0x2B, 0x02, 0xE0, 0x35, 0x4A, 
+	0x1E, 0xD1, 0x33, 0x70, 0x13, 0x23, 0x01, 0x70, 0x13, 0x4A, 0x1D, 0x4B, 0x18, 0xE0, 0x2D, 0x2B, 
+	0x01, 0x78, 0x1B, 0x4B, 0x1B, 0xD1, 0x29, 0x61, 0x1A, 0x22, 0x02, 0x4B, 0x14, 0xE0, 0x25, 0x78, 
+	0x18, 0x4A, 0x19, 0x28, 0x1A, 0x4B, 0x19, 0x78, 0x19, 0xD1, 0x06, 0x78, 0x10, 0x4B, 0x18, 0xF7, 
+	0xFF, 0x78, 0x1A, 0xE0, 0x18, 0xF8, 0x39, 0x78, 0x1A, 0x78, 0x11, 0xFE, 0xEF, 0xF7, 0xFF, 0x4B, 
+	0x0B, 0xE0, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x12, 0xD0, 0x0F, 0x60, 0x1A, 0x22, 0x08, 0xFE, 
+	0x92, 0xF7, 0xFA, 0x4B, 0x0D, 0xE0, 0x09, 0x4B, 0x0B, 0x78, 0x18, 0x4B, 0x04, 0x78, 0x19, 0xF7, 
+	0xFF, 0x78, 0x1A, 0x4B, 0x07, 0xF8, 0x21, 0xBD, 0x08, 0x60, 0x18, 0x20, 0x00, 0x00, 0x28, 0x50, 
+	0x00, 0x00, 0x0C, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xDC, 0x20, 
+	0x00, 0x01, 0xDD, 0x20, 0x00, 0x08, 0xF8, 0x50, 0x00, 0x00, 0x0E, 0x50, 0x00, 0x00, 0x0D, 0x50, 
+	0x00, 0x00, 0x10, 0x20, 0x00, 0x11, 0x50, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xA9, 0xF9, 0xAE, 0xF1, 0x1C, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x04, 0x45, 0xFF, 0xFF, 0xC5, 0x45, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/PRIV_120327_v7.c for-diff/drivers/input/touchscreen/mms100_ts/PRIV_120327_v7.c
--- caf/drivers/input/touchscreen/mms100_ts/PRIV_120327_v7.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/PRIV_120327_v7.c	2015-10-08 21:26:20.244845000 +0900
@@ -0,0 +1,396 @@
+static const struct firmware_data melfas_PRIV = {
+	.section_name = "PRIV",
+	.section_version = 0x06,
+	.start_page_addr = 23,
+	.end_page_addr = 28,
+	.compatible_version = 0x45,
+	.length = 6174,
+	.data = {
+	0xAE, 0xF1, 0x17, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x52, 0x50, 0x28, 0x00, 0xB5, 0x08, 0x28, 
+	0x01, 0xD0, 0x02, 0xE0, 0x03, 0xD1, 0x1D, 0x4B, 0x0F, 0x4A, 0x0E, 0xE0, 0x18, 0x60, 0x1A, 0x68, 
+	0x1B, 0x4B, 0x0E, 0xD1, 0x12, 0x2B, 0x0C, 0x4B, 0x0E, 0x4A, 0x0D, 0x4A, 0x0E, 0x60, 0x1A, 0x60, 
+	0x1A, 0x4B, 0x0E, 0x4B, 0x0F, 0x4A, 0x0E, 0x4A, 0x0F, 0x60, 0x1A, 0x60, 0x1A, 0x4B, 0x0F, 0x4B, 
+	0x10, 0x4A, 0x0F, 0x4A, 0x10, 0x60, 0x1A, 0x60, 0x1A, 0x4B, 0x10, 0xF7, 0xFE, 0xE0, 0x01, 0xBD, 
+	0x08, 0xF8, 0xCF, 0x00, 0x00, 0x5E, 0x09, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x11, 0x50, 0x00, 
+	0x00, 0x61, 0x7D, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x66, 0x3D, 0x20, 0x00, 0x00, 0x6C, 0x00, 
+	0x00, 0x66, 0x7D, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6B, 0xD9, 0x20, 0x00, 0x00, 0x18, 0x00, 
+	0x00, 0x61, 0xC9, 0x20, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x5D, 0xB9, 0x20, 0x00, 0x00, 0x20, 0x4B, 
+	0x10, 0xB5, 0x70, 0x68, 0x1C, 0x4A, 0x10, 0x42, 0x8C, 0x68, 0x11, 0x68, 0x1B, 0xD0, 0x17, 0x4C, 
+	0x0E, 0x68, 0x16, 0xB2, 0xF6, 0xB2, 0xDB, 0x21, 0x0F, 0x25, 0x06, 0x1C, 0x2A, 0x30, 0x01, 0x19, 
+	0x12, 0x43, 0x5A, 0x40, 0x0A, 0x78, 0x12, 0xD0, 0x09, 0x42, 0x82, 0xB2, 0xD2, 0x1C, 0x5A, 0xB2, 
+	0xDB, 0x3B, 0x1D, 0xD8, 0x00, 0x2A, 0x1D, 0x42, 0xB3, 0x1C, 0x13, 0x4B, 0x04, 0xD1, 0xEF, 0xBD, 
+	0x70, 0xB2, 0x18, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x09, 0xF0, 0x00, 
+	0x00, 0xFF, 0xFF, 0x2A, 0x12, 0xB5, 0x00, 0xD8, 0x04, 0xD0, 0x2D, 0xD0, 0x09, 0x2A, 0x10, 0xD1, 
+	0x53, 0x2A, 0x11, 0x2A, 0x40, 0xE0, 0x1E, 0x2A, 0x80, 0xD0, 0x10, 0x2A, 0x13, 0xD0, 0x14, 0xE0, 
+	0x30, 0xD1, 0x4C, 0x3A, 0x1E, 0x1C, 0x02, 0x2A, 0x78, 0x23, 0x00, 0x4B, 0x25, 0xD8, 0x47, 0x73, 
+	0xD8, 0x22, 0x0F, 0x70, 0x1A, 0x4B, 0x24, 0xE0, 0x40, 0x23, 0x01, 0x01, 0x80, 0x4B, 0x23, 0x60, 
+	0x59, 0x43, 0x01, 0xE0, 0x3A, 0x23, 0x01, 0x01, 0x80, 0x4B, 0x20, 0x60, 0x99, 0x43, 0x01, 0xE0, 
+	0x34, 0x23, 0x01, 0x3A, 0x0A, 0x1C, 0x02, 0x2A, 0x32, 0x23, 0x00, 0x4B, 0x1C, 0xD8, 0x2F, 0x23, 
+	0x01, 0x77, 0x58, 0x28, 0x00, 0xE0, 0x2B, 0x4B, 0x19, 0xD1, 0x03, 0x77, 0x5A, 0x22, 0x1E, 0x23, 
+	0x00, 0xE0, 0x05, 0xD1, 0x22, 0x28, 0x01, 0x22, 0x37, 0x4B, 0x15, 0x4B, 0x13, 0x77, 0x5A, 0x23, 
+	0x01, 0x60, 0xD8, 0x28, 0x00, 0xE0, 0x1B, 0x4B, 0x11, 0xD1, 0x09, 0x1C, 0x1A, 0x21, 0x96, 0x00, 
+	0xC9, 0x32, 0x08, 0x33, 0x48, 0x87, 0xD1, 0x80, 0x1A, 0x22, 0x64, 0x23, 0x00, 0xE0, 0x0A, 0xD1, 
+	0x0C, 0x28, 0x01, 0x49, 0x0B, 0x4B, 0x0A, 0x32, 0x08, 0x1C, 0x1A, 0x4A, 0x0A, 0x87, 0xD1, 0x80, 
+	0x1A, 0x33, 0x48, 0x61, 0x18, 0x4B, 0x05, 0xE0, 0x00, 0x23, 0x01, 0x1C, 0x18, 0x23, 0x00, 0x46, 
+	0xC0, 0xBD, 0x00, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x20, 0x00, 0x08, 0xF8, 0x20, 
+	0x00, 0x0D, 0x48, 0x00, 0x00, 0x13, 0x88, 0xFF, 0xFF, 0xEC, 0x78, 0x4B, 0x0E, 0xB5, 0x08, 0xB2, 
+	0xDB, 0x88, 0x1B, 0xD0, 0x02, 0x2B, 0x10, 0xD1, 0x13, 0x2B, 0xAF, 0xF7, 0xFD, 0xE0, 0x10, 0x4A, 
+	0x0A, 0xFB, 0xA1, 0x70, 0x13, 0x23, 0x00, 0x68, 0x11, 0x4A, 0x09, 0x68, 0x12, 0x4A, 0x09, 0xD0, 
+	0x02, 0x42, 0x91, 0xFB, 0x6C, 0xF7, 0xFD, 0x4A, 0x07, 0xE0, 0x04, 0xE0, 0x01, 0x60, 0x13, 0xFB, 
+	0x90, 0xF7, 0xFD, 0x46, 0xC0, 0xBD, 0x08, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0x2A, 0x20, 
+	0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x0D, 0x98, 0xB0, 0x89, 0xB5, 0xF0, 0xD9, 
+	0x00, 0x28, 0x10, 0xF7, 0xFF, 0xE1, 0x7A, 0x00, 0x11, 0xFC, 0x65, 0x01, 0x79, 0x01, 0x79, 0x00, 
+	0x15, 0x01, 0x79, 0x00, 0x20, 0x01, 0x79, 0x01, 0x79, 0x01, 0x79, 0x01, 0x79, 0x00, 0x30, 0x00, 
+	0x36, 0x01, 0x79, 0x00, 0x5C, 0x00, 0x36, 0x01, 0x1F, 0x01, 0x79, 0x22, 0x01, 0x4B, 0xB4, 0xE1, 
+	0x63, 0x72, 0x1A, 0x23, 0x00, 0x49, 0xB3, 0x42, 0x9A, 0x68, 0x0A, 0x68, 0x4B, 0xDD, 0x02, 0x0F, 
+	0xDB, 0x18, 0xD3, 0x70, 0x13, 0x4A, 0xB0, 0x4B, 0xB0, 0xE1, 0x58, 0x78, 0x1A, 0x4C, 0xB0, 0x2A, 
+	0x00, 0x4B, 0xB0, 0x4A, 0xB0, 0xD0, 0x01, 0x4A, 0xB0, 0xE0, 0x00, 0x68, 0x19, 0x7E, 0x90, 0xF7, 
+	0xFF, 0x01, 0x80, 0x76, 0xA0, 0xFC, 0x8F, 0x4B, 0xA9, 0xE1, 0x48, 0x56, 0x9A, 0x22, 0x1C, 0x60, 
+	0x1A, 0x4B, 0xAB, 0x4A, 0xAB, 0xE1, 0x42, 0x2B, 0x00, 0x68, 0xD3, 0x4B, 0xA4, 0xD1, 0x03, 0x77, 
+	0x59, 0x21, 0x1E, 0x2B, 0x01, 0xE0, 0x04, 0x4B, 0xA1, 0xD1, 0x02, 0x77, 0x59, 0x21, 0x37, 0x2B, 
+	0x00, 0x69, 0x13, 0x4B, 0x9E, 0xD1, 0x09, 0x1C, 0x1A, 0x21, 0x96, 0x00, 0xC9, 0x32, 0x08, 0x33, 
+	0x48, 0x87, 0xD1, 0x80, 0x1A, 0x22, 0x64, 0x2B, 0x01, 0xE1, 0x28, 0xE1, 0x25, 0xD0, 0x00, 0x49, 
+	0x9D, 0x4B, 0x97, 0x32, 0x08, 0x1C, 0x1A, 0x4A, 0x9C, 0x87, 0xD1, 0x80, 0x1A, 0x33, 0x48, 0x4B, 
+	0x98, 0xE1, 0x1C, 0x2B, 0x00, 0x68, 0xDB, 0xE1, 0x17, 0xD0, 0x00, 0x21, 0x01, 0x4C, 0x98, 0x1C, 
+	0x27, 0x1C, 0x20, 0x3F, 0x38, 0x38, 0x1C, 0x91, 0x04, 0x90, 0x00, 0x22, 0x00, 0xE0, 0xAA, 0x2B, 
+	0x00, 0x5E, 0xA3, 0xE0, 0x9D, 0xD1, 0x00, 0x98, 0x04, 0x9B, 0x04, 0x23, 0x0A, 0x93, 0x06, 0x49, 
+	0x90, 0x43, 0x43, 0x32, 0x38, 0x1C, 0x1A, 0x18, 0x55, 0x00, 0x46, 0x49, 0x8E, 0x18, 0x76, 0x18, 
+	0x52, 0x35, 0x04, 0x36, 0x04, 0x32, 0x04, 0x93, 0x07, 0x92, 0x05, 0x21, 0x00, 0xE0, 0x83, 0x2B, 
+	0x00, 0x5E, 0x6B, 0x21, 0x00, 0xD0, 0x77, 0x22, 0x00, 0x5E, 0x73, 0x1A, 0xC0, 0x5E, 0xB8, 0x9B, 
+	0x00, 0x17, 0xC2, 0x40, 0x50, 0x18, 0x80, 0x5E, 0x59, 0x21, 0x00, 0x5E, 0xB3, 0x22, 0x1C, 0x1A, 
+	0xC9, 0xB2, 0x00, 0x18, 0xC9, 0x17, 0xCB, 0xB2, 0x09, 0x40, 0x59, 0xFA, 0x98, 0xF7, 0xFC, 0x4B, 
+	0x7D, 0x99, 0x07, 0x21, 0x32, 0x18, 0xCB, 0x4B, 0x7C, 0x5E, 0x5A, 0x2A, 0x00, 0x99, 0x05, 0x22, 
+	0x00, 0xD0, 0x04, 0x2A, 0x00, 0x5E, 0x8A, 0xE0, 0x13, 0xD1, 0x04, 0x5E, 0x8A, 0x22, 0x00, 0xD1, 
+	0x0F, 0x2A, 0x00, 0x42, 0x98, 0x68, 0x1B, 0x21, 0x00, 0xDA, 0x4D, 0x23, 0x00, 0x5E, 0x68, 0x90, 
+	0x02, 0x5E, 0xE2, 0x99, 0x02, 0x92, 0x01, 0x23, 0x00, 0x18, 0x12, 0x92, 0x03, 0x5E, 0xF0, 0xE0, 
+	0x0F, 0x43, 0x48, 0x23, 0x06, 0x68, 0x1A, 0x42, 0x98, 0x43, 0x53, 0x23, 0x00, 0xDA, 0x3B, 0x21, 
+	0x00, 0x5E, 0xEA, 0x92, 0x02, 0x5E, 0x60, 0x18, 0x80, 0x90, 0x01, 0x21, 0x00, 0x90, 0x03, 0x43, 
+	0x50, 0x5E, 0x70, 0x5E, 0xBB, 0x22, 0x00, 0x43, 0x4B, 0x99, 0x01, 0x18, 0xC0, 0x99, 0x03, 0xFB, 
+	0xE8, 0xF7, 0xFF, 0x22, 0x1C, 0x80, 0x38, 0x98, 0x02, 0x5E, 0xB3, 0x9A, 0x01, 0x99, 0x00, 0x20, 
+	0x00, 0x43, 0x43, 0x99, 0x03, 0x5E, 0x08, 0x18, 0x18, 0x43, 0x50, 0xFB, 0xDA, 0xF7, 0xFF, 0x21, 
+	0x0C, 0x9B, 0x00, 0x46, 0x68, 0x80, 0x18, 0x88, 0x62, 0x5A, 0x08, 0x88, 0x6B, 0x80, 0x20, 0xB2, 
+	0x18, 0xB2, 0x11, 0xDA, 0x00, 0x42, 0x88, 0x80, 0x63, 0x1C, 0x13, 0x79, 0x23, 0x79, 0x2A, 0x18, 
+	0xD3, 0x21, 0x00, 0x09, 0x77, 0xAE, 0xF1, 0x18, 0x22, 0x00, 0x71, 0x23, 0x80, 0x69, 0x4B, 0x4E, 
+	0x80, 0x29, 0x71, 0x2A, 0x3A, 0x01, 0x68, 0x1A, 0x98, 0x06, 0x60, 0x1A, 0x30, 0x01, 0x99, 0x05, 
+	0x90, 0x06, 0x31, 0x0A, 0x36, 0x02, 0x35, 0x0A, 0x4B, 0x4A, 0x91, 0x05, 0x33, 0x04, 0x9A, 0x06, 
+	0x42, 0x9A, 0x7F, 0xDB, 0xE7, 0x74, 0xDA, 0x00, 0x98, 0x00, 0x9B, 0x04, 0x30, 0x02, 0x33, 0x01, 
+	0x34, 0x0A, 0x93, 0x04, 0x90, 0x00, 0x37, 0x02, 0x9A, 0x04, 0x4B, 0x42, 0x7F, 0xDB, 0x33, 0x04, 
+	0x3B, 0x01, 0x3A, 0x01, 0xDA, 0x00, 0x42, 0x9A, 0xE0, 0x59, 0xE7, 0x4B, 0x78, 0x1B, 0x4B, 0x3E, 
+	0xD1, 0x09, 0x2B, 0x00, 0x21, 0xD0, 0x4B, 0x3D, 0x00, 0x49, 0x48, 0x33, 0x21, 0x00, 0x18, 0x5F, 
+	0x1C, 0x0A, 0x69, 0x44, 0xE0, 0x37, 0x1C, 0x06, 0x21, 0x00, 0x4B, 0x36, 0x7F, 0xDB, 0x33, 0x04, 
+	0x24, 0x0A, 0x4A, 0x31, 0xE0, 0x07, 0x1C, 0x08, 0xB2, 0xDB, 0x3B, 0x01, 0x43, 0x5D, 0x1C, 0x25, 
+	0x87, 0xA9, 0x19, 0x55, 0x54, 0xE8, 0x4D, 0x32, 0xD1, 0xF5, 0x2B, 0x00, 0x49, 0x31, 0x60, 0x13, 
+	0x42, 0x52, 0x22, 0x01, 0x4A, 0x30, 0x60, 0x4A, 0x78, 0x12, 0x60, 0x0B, 0x3A, 0x01, 0xE0, 0x04, 
+	0x1D, 0x10, 0xB2, 0xD2, 0x52, 0x43, 0x00, 0x40, 0xD1, 0xF8, 0x2A, 0x00, 0x56, 0x1D, 0xE7, 0xD2, 
+	0xDD, 0x02, 0x2D, 0x1E, 0x61, 0x73, 0x23, 0x00, 0x2D, 0x0A, 0xE0, 0x22, 0x31, 0x01, 0xDD, 0x01, 
+	0x35, 0x05, 0xE0, 0x04, 0x32, 0x01, 0xDA, 0x01, 0x24, 0x00, 0xE0, 0x00, 0x28, 0x17, 0x30, 0x01, 
+	0x33, 0x20, 0xD1, 0xED, 0xD0, 0x01, 0x42, 0xBB, 0xE7, 0xE8, 0x20, 0x00, 0x61, 0x5C, 0x4B, 0x12, 
+	0xD0, 0x03, 0x2A, 0x00, 0xD0, 0x01, 0x29, 0x00, 0x61, 0x5C, 0x34, 0x01, 0xDC, 0x02, 0x2A, 0x05, 
+	0x2A, 0x64, 0x69, 0x5A, 0x22, 0x00, 0xDD, 0x04, 0x4B, 0x18, 0x61, 0x5A, 0x70, 0x1A, 0x22, 0x0D, 
+	0xBD, 0xF0, 0xB0, 0x09, 0x20, 0x00, 0x0A, 0xAA, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x11, 0x3D, 
+	0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x09, 0x78, 0x00, 0x00, 0x74, 0x9A, 
+	0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 0x0D, 0x38, 0x20, 0x00, 0x08, 0xF8, 0x00, 0x00, 0x13, 0x88, 
+	0xFF, 0xFF, 0xEC, 0x78, 0x20, 0x00, 0x0D, 0xD8, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x03, 0x20, 
+	0x20, 0x00, 0x02, 0x20, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x00, 0xF5, 0x20, 0x00, 0x0E, 0x64, 
+	0x20, 0x00, 0x01, 0x64, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 0x03, 0x1D, 
+	0x68, 0x1A, 0x4B, 0x02, 0x60, 0x1A, 0x4B, 0x02, 0x46, 0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x80, 
+	0x20, 0x00, 0x00, 0x84, 0xF7, 0xFF, 0xB5, 0x08, 0xBD, 0x08, 0xFF, 0xF3, 0x4A, 0x07, 0xB5, 0x00, 
+	0x68, 0x10, 0x4B, 0x07, 0x42, 0x88, 0x68, 0x19, 0x68, 0x10, 0xDB, 0x03, 0x1A, 0xC0, 0x68, 0x1B, 
+	0x68, 0x10, 0xE0, 0x03, 0x30, 0x1E, 0x68, 0x1B, 0xBD, 0x00, 0x1A, 0xC0, 0x20, 0x00, 0x00, 0x80, 
+	0x20, 0x00, 0x00, 0x84, 0x4B, 0x05, 0xB5, 0x00, 0x32, 0x01, 0x68, 0x1A, 0x68, 0x1A, 0x60, 0x1A, 
+	0xDD, 0x02, 0x2A, 0x1D, 0x3A, 0x1E, 0x68, 0x1A, 0xBD, 0x00, 0x60, 0x1A, 0x20, 0x00, 0x00, 0x84, 
+	0x4A, 0xA7, 0xB5, 0xF7, 0xB2, 0x1B, 0x88, 0x13, 0xD1, 0x00, 0x2B, 0xAE, 0xDC, 0x3B, 0xE1, 0xB2, 
+	0xD1, 0x00, 0x2B, 0x0A, 0xDC, 0x18, 0xE0, 0xED, 0xD1, 0x00, 0x2B, 0x05, 0xDC, 0x08, 0xE0, 0xCE, 
+	0xD1, 0x00, 0x2B, 0x03, 0xDD, 0x00, 0xE0, 0xB7, 0x2B, 0x02, 0xE0, 0xBE, 0xE1, 0xE7, 0xD0, 0x00, 
+	0x2B, 0x07, 0xE0, 0xA4, 0xE0, 0xCC, 0xD1, 0x00, 0xE0, 0xC4, 0xDA, 0x00, 0xD1, 0x00, 0x2B, 0x08, 
+	0x2B, 0x09, 0xE0, 0xF7, 0xE1, 0xDB, 0xD0, 0x00, 0x2B, 0x10, 0xE0, 0xC8, 0xE0, 0x7F, 0xD1, 0x00, 
+	0x2B, 0x0C, 0xDC, 0x0B, 0xE0, 0xD9, 0xD1, 0x00, 0xE0, 0xCF, 0xDA, 0x00, 0xD1, 0x00, 0x2B, 0x0D, 
+	0x2B, 0x0F, 0xE0, 0xDD, 0xE1, 0xCB, 0xD0, 0x00, 0x2B, 0x62, 0xE0, 0x48, 0xE1, 0xC3, 0xD1, 0x00, 
+	0x2B, 0x61, 0xDC, 0x03, 0xE1, 0xC3, 0xD0, 0x00, 0x2B, 0x64, 0xE1, 0xB9, 0xE1, 0xB1, 0xD1, 0x00, 
+	0xD0, 0x00, 0x2B, 0xA8, 0xE1, 0x9D, 0xE1, 0xBC, 0xD1, 0x00, 0x2B, 0xF4, 0xDC, 0x19, 0xE0, 0xF4, 
+	0xD1, 0x00, 0x2B, 0xEF, 0xDC, 0x09, 0xE1, 0x87, 0xD1, 0x00, 0x2B, 0xBF, 0x2B, 0xEE, 0xE1, 0x8D, 
+	0xE1, 0x7C, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xAF, 0xE1, 0x6A, 0xE1, 0xAA, 0xD1, 0x00, 0x2B, 0xF1, 
+	0xDA, 0x00, 0xE0, 0xC8, 0x2B, 0xF2, 0xE0, 0xC2, 0xE0, 0xCB, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xF3, 
+	0xE0, 0xD0, 0xE1, 0x9E, 0xD1, 0x00, 0x2B, 0xF9, 0xDC, 0x0B, 0xE1, 0x26, 0xD1, 0x00, 0x2B, 0xF6, 
+	0xDA, 0x00, 0xE1, 0x06, 0x2B, 0xF7, 0xE0, 0xD9, 0xE1, 0x08, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xF8, 
+	0xE1, 0x10, 0xE1, 0x8E, 0xD1, 0x00, 0x2B, 0xFB, 0xDA, 0x00, 0xE1, 0x28, 0x2B, 0xFC, 0xE1, 0x1D, 
+	0xE1, 0x2C, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xFD, 0xE1, 0x31, 0xE1, 0x82, 0xFF, 0x5E, 0xF7, 0xFF, 
+	0x60, 0x20, 0x4C, 0x68, 0x2B, 0x00, 0x68, 0x23, 0xF7, 0xFD, 0xD1, 0x01, 0x68, 0x23, 0xF9, 0x1D, 
+	0x43, 0x5A, 0x22, 0x06, 0x4C, 0x65, 0x4B, 0x64, 0x25, 0x00, 0x70, 0x1A, 0x4F, 0x64, 0x4E, 0x61, 
+	0x68, 0x39, 0xE0, 0x12, 0x43, 0x51, 0x22, 0x06, 0x46, 0x68, 0x4B, 0x62, 0xF7, 0xFF, 0x18, 0xC9, 
+	0x23, 0x00, 0xFA, 0xAD, 0x5C, 0x1A, 0x46, 0x68, 0x33, 0x01, 0x54, 0xE2, 0xD1, 0xF9, 0x2B, 0x06, 
+	0xFF, 0x50, 0xF7, 0xFF, 0x34, 0x06, 0x35, 0x01, 0x42, 0x9D, 0x68, 0x33, 0xE1, 0x57, 0xDB, 0xE9, 
+	0x4A, 0x54, 0x49, 0x59, 0x68, 0x13, 0x78, 0x0C, 0x43, 0x58, 0x20, 0x06, 0x42, 0x84, 0x23, 0x00, 
+	0x4A, 0x52, 0xDA, 0x0A, 0x4D, 0x50, 0x78, 0x08, 0x5C, 0xC4, 0x18, 0x10, 0x33, 0x01, 0x19, 0x58, 
+	0x2B, 0x08, 0x70, 0x04, 0xE1, 0x43, 0xD1, 0xF6, 0xE1, 0x41, 0x60, 0x13, 0x23, 0x0F, 0x4A, 0x4F, 
+	0x5E, 0x11, 0x20, 0x26, 0x5F, 0x52, 0x25, 0x28, 0x12, 0x12, 0x11, 0x09, 0x40, 0x13, 0x43, 0x99, 
+	0x18, 0xCB, 0x4A, 0x45, 0x4B, 0x42, 0x70, 0x13, 0x23, 0x03, 0x88, 0x1A, 0x1A, 0x9A, 0xB2, 0x12, 
+	0x8D, 0x19, 0x4B, 0x46, 0x54, 0xD1, 0x4B, 0x40, 0x88, 0x1A, 0x4B, 0x3D, 0xB2, 0x12, 0x23, 0x04, 
+	0x4B, 0x42, 0x1A, 0x9A, 0x4B, 0x3C, 0x8C, 0xD9, 0xE1, 0x21, 0x54, 0xD1, 0x8C, 0xDA, 0x4B, 0x40, 
+	0x70, 0x1A, 0x4B, 0x39, 0x4B, 0x3E, 0xE1, 0x1C, 0x78, 0x1A, 0x33, 0x34, 0x70, 0x1A, 0x4B, 0x36, 
+	0x4B, 0x3A, 0xE1, 0x16, 0x4B, 0x34, 0x7B, 0xDA, 0xE1, 0x11, 0x70, 0x1A, 0x78, 0x1A, 0x4B, 0x39, 
+	0x2A, 0x00, 0x4B, 0x31, 0x22, 0x02, 0xD0, 0x02, 0xE1, 0x09, 0x70, 0x1A, 0x70, 0x1A, 0x22, 0x01, 
+	0x4B, 0x35, 0xE1, 0x06, 0x4B, 0x2C, 0x78, 0x1A, 0xE1, 0x01, 0x70, 0x1A, 0x4B, 0x33, 0x88, 0x12, 
+	0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0x0B, 0x54, 0xD1, 0x4B, 0x27, 0x88, 0x1A, 0x4B, 0x24, 
+	0xB2, 0x12, 0x4B, 0x2E, 0x23, 0x0C, 0x78, 0x59, 0x4B, 0x23, 0x1A, 0x9A, 0x4B, 0x20, 0x54, 0xD1, 
+	0x4B, 0x2B, 0x88, 0x1A, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0x0D, 0x54, 0xD1, 0x4B, 0x1E, 
+	0x4B, 0x23, 0xE0, 0xE6, 0x4B, 0x1C, 0x8D, 0xDA, 0xFE, 0xDA, 0xAE, 0xF1, 0x19, 0xE0, 0xE1, 0x70, 
+	0x1A, 0x78, 0x1A, 0x4B, 0x1F, 0x70, 0x1A, 0x4B, 0x19, 0x21, 0x01, 0x4B, 0x16, 0x23, 0xF1, 0x88, 
+	0x1A, 0x1A, 0x9A, 0xB2, 0x12, 0x54, 0xD1, 0x4B, 0x15, 0x88, 0x1A, 0x4B, 0x12, 0xB2, 0x12, 0x4B, 
+	0x18, 0x23, 0xF2, 0x78, 0x59, 0x4B, 0x11, 0x1A, 0x9A, 0x4B, 0x0E, 0x54, 0xD1, 0x4B, 0x1A, 0x88, 
+	0x1A, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF3, 0x54, 0xD1, 0x4B, 0x0C, 0x88, 0x1A, 0x4B, 
+	0x09, 0xB2, 0x12, 0x4B, 0x16, 0x23, 0xF4, 0x78, 0x19, 0x4B, 0x08, 0x1A, 0x9A, 0x4B, 0x05, 0x54, 
+	0xD1, 0x4B, 0x13, 0x88, 0x1A, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF5, 0x54, 0xD1, 0x4B, 
+	0x03, 0x46, 0xC0, 0xE0, 0xB0, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x0D, 0x98, 0x50, 0x00, 0x00, 
+	0x0C, 0x20, 0x00, 0x00, 0x88, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x09, 0xF0, 0x20, 0x00, 0x00, 
+	0x2A, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x01, 
+	0xDF, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0x7C, 0x00, 0x00, 0x5B, 0xFF, 0x00, 0x00, 0x73, 
+	0xFF, 0x00, 0x00, 0x7B, 0xFF, 0x4A, 0x49, 0x4B, 0x48, 0x18, 0xD3, 0x78, 0x1B, 0x4B, 0x48, 0x78, 
+	0xDA, 0x4B, 0x48, 0x70, 0x1A, 0x88, 0x1A, 0x49, 0x45, 0xB2, 0x12, 0x4B, 0x43, 0x18, 0xCB, 0x78, 
+	0x1B, 0x23, 0xF7, 0x79, 0x19, 0x4B, 0x42, 0x1A, 0x9A, 0x4B, 0x42, 0x54, 0xD1, 0x4B, 0x3F, 0x88, 
+	0x1A, 0x79, 0x59, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF8, 0x54, 0xD1, 0x4B, 0x3D, 0x88, 0x1A, 0x4B, 
+	0x3D, 0xB2, 0x12, 0x4B, 0x3A, 0x23, 0xF9, 0x79, 0x99, 0x4B, 0x39, 0x1A, 0x9A, 0x4B, 0x39, 0x54, 
+	0xD1, 0x4B, 0x36, 0x88, 0x1A, 0x79, 0xD9, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xFA, 0x54, 0xD1, 0x4B, 
+	0x34, 0x88, 0x1A, 0x4B, 0x34, 0xB2, 0x12, 0x4B, 0x31, 0x23, 0xFB, 0x7A, 0x19, 0x4B, 0x30, 0x1A, 
+	0x9A, 0x4B, 0x30, 0x54, 0xD1, 0x4B, 0x2D, 0x88, 0x1A, 0x7A, 0x59, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 
+	0xFC, 0x54, 0xD1, 0x4B, 0x2B, 0x88, 0x1A, 0x4B, 0x2B, 0xB2, 0x12, 0x4B, 0x28, 0x23, 0xFD, 0x7A, 
+	0x99, 0x4B, 0x27, 0x1A, 0x9A, 0xE0, 0x45, 0x54, 0xD1, 0x78, 0x1A, 0x4B, 0x27, 0x70, 0x1A, 0x4B, 
+	0x24, 0xFF, 0xE4, 0xF7, 0xFC, 0x49, 0x25, 0xE0, 0x3E, 0x23, 0x00, 0x4A, 0x1F, 0x78, 0x10, 0x68, 
+	0x0C, 0x18, 0x20, 0x4D, 0x1F, 0x19, 0x58, 0x5C, 0xC4, 0x70, 0x04, 0x33, 0x01, 0xD1, 0xF5, 0x2B, 
+	0x08, 0x4B, 0x1A, 0xE0, 0x30, 0x4B, 0x1A, 0x7E, 0x1A, 0x4B, 0x1A, 0x70, 0x1A, 0x4B, 0x17, 0x88, 
+	0x1A, 0x7D, 0xD9, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xEF, 0x54, 0xD1, 0x4B, 0x15, 0x4B, 0x18, 0xE0, 
+	0x22, 0x4B, 0x13, 0x68, 0x1A, 0xE0, 0x1D, 0x70, 0x1A, 0x4A, 0x0F, 0x49, 0x14, 0x68, 0x0C, 0x23, 
+	0x00, 0x4D, 0x0F, 0x78, 0x10, 0x5C, 0xC4, 0x18, 0x20, 0x33, 0x01, 0x19, 0x58, 0x2B, 0x08, 0x70, 
+	0x04, 0xF7, 0xFC, 0xD1, 0xF5, 0xE0, 0x0D, 0xFF, 0xB3, 0x78, 0x1A, 0x4B, 0x0E, 0x70, 0x1A, 0x4B, 
+	0x08, 0x4B, 0x0D, 0xE0, 0x08, 0x4B, 0x06, 0x78, 0x9A, 0xE0, 0x03, 0x70, 0x1A, 0x78, 0xDA, 0x4B, 
+	0x0A, 0x70, 0x1A, 0x4B, 0x03, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x09, 
+	0xAE, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x0D, 
+	0x34, 0x20, 0x00, 0x08, 0xF8, 0x00, 0x00, 0x5B, 0xFF, 0x20, 0x00, 0x00, 0x35, 0x4C, 0x0F, 0xB5, 
+	0x73, 0x90, 0x00, 0x4D, 0x0F, 0x68, 0x20, 0x91, 0x01, 0x30, 0x1F, 0x21, 0x1E, 0xF7, 0xFF, 0x68, 
+	0x2E, 0x42, 0xB1, 0xF9, 0x1B, 0x68, 0x20, 0xD0, 0xF7, 0x43, 0x50, 0x22, 0x06, 0x46, 0x69, 0x4B, 
+	0x09, 0xF7, 0xFF, 0x18, 0xC0, 0x68, 0x23, 0xF9, 0x1D, 0x60, 0x23, 0x33, 0x01, 0x2B, 0x1D, 0x68, 
+	0x23, 0x68, 0x23, 0xDD, 0x02, 0x60, 0x23, 0x3B, 0x1E, 0x46, 0xC0, 0xBD, 0x73, 0x20, 0x00, 0x00, 
+	0x80, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x09, 0xF0, 0x46, 0x6A, 0xB5, 0x07, 0x70, 0x13, 0x23, 
+	0x0F, 0x70, 0x53, 0x23, 0x00, 0x70, 0xD3, 0x70, 0x93, 0x98, 0x00, 0x71, 0x53, 0xF7, 0xFF, 0x99, 
+	0x01, 0xF7, 0xFC, 0xFF, 0xCD, 0xBD, 0x07, 0xFF, 0x31, 0x23, 0x06, 0xB5, 0x07, 0x1C, 0x18, 0x90, 
+	0x00, 0x91, 0x01, 0x43, 0x50, 0x1C, 0x1A, 0x49, 0x03, 0x46, 0x69, 0x18, 0x40, 0xF8, 0xF0, 0xF7, 
+	0xFF, 0x46, 0xC0, 0xBD, 0x07, 0x20, 0x00, 0x09, 0xF0, 0x4C, 0xCD, 0xB5, 0xF0, 0x69, 0x23, 0x4D, 
+	0xCD, 0x3B, 0x02, 0xB0, 0x8B, 0x41, 0x93, 0x1E, 0x5A, 0x5C, 0xAC, 0x22, 0x23, 0x25, 0x0F, 0x42, 
+	0x5B, 0x95, 0x07, 0x40, 0x1D, 0x2C, 0x00, 0x25, 0x00, 0xE0, 0xC3, 0xD1, 0x00, 0xB2, 0xDB, 0x1E, 
+	0x63, 0xE0, 0x00, 0x48, 0xC5, 0x00, 0x9A, 0x1C, 0x13, 0x18, 0xD2, 0x4D, 0xC4, 0x18, 0xAA, 0x00, 
+	0x52, 0x5F, 0x51, 0x25, 0x3C, 0x1E, 0x4D, 0x1E, 0x5A, 0x54, 0xC1, 0x41, 0xA9, 0x2B, 0x00, 0xB2, 
+	0xD2, 0x25, 0x00, 0xD1, 0xF0, 0xDC, 0x00, 0x2C, 0x00, 0x4F, 0xBC, 0xE0, 0xAC, 0x37, 0x40, 0x26, 
+	0x00, 0xB2, 0x04, 0xE0, 0x12, 0x1A, 0xE3, 0xB2, 0x1B, 0x19, 0x1B, 0x17, 0xDC, 0x45, 0x9C, 0x40, 
+	0x63, 0x29, 0x00, 0xDD, 0x33, 0x4C, 0xB3, 0xDD, 0x35, 0x5C, 0xE3, 0x23, 0x23, 0x36, 0x02, 0x35, 
+	0x01, 0x42, 0xAB, 0x37, 0x0A, 0xE0, 0x95, 0xDC, 0x00, 0x19, 0xA3, 0x4C, 0xB1, 0xB2, 0x11, 0x8D, 
+	0x9A, 0xDC, 0x00, 0x29, 0x00, 0x1F, 0x38, 0xE0, 0xF5, 0x24, 0x00, 0x90, 0x01, 0x2C, 0x00, 0x5F, 
+	0x04, 0xE0, 0xAC, 0xDC, 0x00, 0x19, 0xA2, 0x4C, 0xA9, 0x90, 0x03, 0x8C, 0x10, 0x5E, 0x1C, 0x20, 
+	0x18, 0x94, 0x02, 0x20, 0x0C, 0x5F, 0x04, 0x46, 0x6C, 0x88, 0x9B, 0x98, 0x02, 0x94, 0x02, 0x1A, 
+	0x24, 0x20, 0x34, 0x4C, 0xA4, 0x46, 0x84, 0x5C, 0x20, 0x17, 0xC4, 0x98, 0x02, 0x40, 0x60, 0x19, 
+	0x00, 0x9C, 0x02, 0x90, 0x02, 0x45, 0x64, 0x88, 0x90, 0x4B, 0x9F, 0xDB, 0xC3, 0x2B, 0x00, 0x5D, 
+	0x5B, 0x4C, 0x97, 0xD0, 0xC7, 0x11, 0x8B, 0x68, 0x61, 0x2B, 0x01, 0xD0, 0x05, 0xE1, 0x0C, 0xD1, 
+	0x00, 0xD1, 0x00, 0x2B, 0x02, 0x4C, 0x92, 0xE1, 0x1C, 0x11, 0x8B, 0x68, 0xA1, 0x2B, 0x01, 0xD0, 
+	0x05, 0xE0, 0xFC, 0xD1, 0x00, 0xD1, 0x00, 0x2B, 0x02, 0x4B, 0x94, 0xE1, 0x0C, 0x42, 0x99, 0xB2, 
+	0x01, 0xE0, 0xC8, 0xDD, 0x00, 0xDA, 0x00, 0x29, 0x00, 0x0A, 0x09, 0xE1, 0x01, 0xB2, 0x80, 0xB2, 
+	0xC9, 0xB2, 0xC1, 0x91, 0x02, 0x8C, 0x13, 0x91, 0x04, 0x48, 0x8D, 0x80, 0x90, 0x42, 0x81, 0xB2, 
+	0x19, 0xE0, 0xB1, 0xDD, 0x00, 0xDA, 0x00, 0x29, 0x00, 0x11, 0x09, 0xE0, 0xEE, 0x43, 0x81, 0x20, 
+	0x0F, 0xB2, 0x9B, 0xB2, 0xC9, 0xB2, 0xD9, 0x91, 0x05, 0x99, 0x01, 0x91, 0x06, 0x88, 0x0B, 0x84, 
+	0x13, 0x21, 0x60, 0xB2, 0xE8, 0x42, 0x49, 0x1C, 0x42, 0x46, 0x8C, 0x43, 0x11, 0x99, 0x05, 0x9A, 
+	0x02, 0x43, 0x11, 0x78, 0x3C, 0x94, 0x03, 0xB2, 0x1A, 0xAC, 0x08, 0x92, 0x02, 0x70, 0x22, 0x46, 
+	0x62, 0x22, 0x10, 0x70, 0x61, 0x5C, 0x51, 0x46, 0x69, 0x70, 0xA1, 0x46, 0x6A, 0x5C, 0x8A, 0x21, 
+	0x18, 0x70, 0xE2, 0x46, 0x69, 0x5C, 0x51, 0x22, 0x0C, 0x71, 0x21, 0x9A, 0x02, 0x09, 0xC7, 0xAE, 
+	0xF1, 0x1A, 0xDC, 0x6D, 0x2A, 0xFF, 0xF7, 0xFF, 0x71, 0x63, 0x1C, 0x02, 0xFA, 0x41, 0x1C, 0x53, 
+	0xCC, 0x03, 0xF7, 0xFF, 0xD0, 0x6E, 0x4C, 0x68, 0xFF, 0x23, 0x5C, 0xE3, 0x23, 0x23, 0x36, 0x02, 
+	0x35, 0x01, 0x42, 0xAB, 0x37, 0x0A, 0xE7, 0x69, 0xDD, 0x00, 0x4B, 0x6C, 0x4E, 0x6B, 0x68, 0x5A, 
+	0x68, 0x71, 0xD1, 0x00, 0x1C, 0x48, 0x42, 0x91, 0xE0, 0xD8, 0xE0, 0x90, 0xD1, 0x00, 0xD0, 0x73, 
+	0x1C, 0x53, 0x32, 0x01, 0x21, 0x40, 0x23, 0x00, 0xAC, 0x08, 0xB2, 0xED, 0x43, 0x0A, 0x1C, 0x28, 
+	0x70, 0x22, 0x70, 0xA3, 0x70, 0x63, 0x71, 0x23, 0x70, 0xE3, 0xF7, 0xFF, 0x71, 0x63, 0x1C, 0x02, 
+	0xFA, 0x17, 0xD1, 0x00, 0x1C, 0x50, 0x68, 0x61, 0xE0, 0xE1, 0xF7, 0xFF, 0x98, 0x08, 0x68, 0x71, 
+	0xFE, 0xF7, 0x29, 0x00, 0xE0, 0x5C, 0xE7, 0x38, 0xDC, 0x00, 0x56, 0x18, 0x20, 0x05, 0x46, 0x84, 
+	0x8B, 0x1C, 0x46, 0x69, 0x94, 0x05, 0x5E, 0x44, 0x20, 0x14, 0xB2, 0xE8, 0x88, 0x9B, 0x1C, 0x44, 
+	0x11, 0x21, 0x93, 0x02, 0x94, 0x03, 0x23, 0x0F, 0x46, 0x64, 0x46, 0x9C, 0x40, 0x23, 0x43, 0x99, 
+	0x23, 0x0F, 0x99, 0x03, 0x91, 0x04, 0x22, 0x20, 0x1C, 0x13, 0x9A, 0x04, 0x43, 0x11, 0x46, 0x61, 
+	0x91, 0x03, 0x46, 0x8C, 0x43, 0x11, 0x91, 0x04, 0xB2, 0x19, 0x21, 0x0C, 0x46, 0x6A, 0xAC, 0x08, 
+	0x5C, 0x8A, 0x70, 0x22, 0x46, 0x61, 0x46, 0x6A, 0x70, 0x61, 0x5C, 0x8A, 0x21, 0x08, 0x70, 0xA2, 
+	0x46, 0x69, 0x5C, 0x51, 0x22, 0x14, 0x70, 0xE1, 0x9A, 0x04, 0x71, 0x21, 0x21, 0x00, 0xDD, 0x91, 
+	0x2A, 0xFF, 0x71, 0x63, 0x23, 0xFF, 0xF9, 0xD2, 0xF7, 0xFF, 0xCC, 0x03, 0x1C, 0x02, 0xD1, 0x90, 
+	0x1C, 0x53, 0xFE, 0x7E, 0xF7, 0xFF, 0x1E, 0xB8, 0xE6, 0xF9, 0x5F, 0x00, 0x24, 0x00, 0x42, 0xA0, 
+	0x9C, 0x07, 0xE7, 0x02, 0xDD, 0x00, 0x22, 0x00, 0x1F, 0x3B, 0xE6, 0xEE, 0x80, 0x1A, 0x93, 0x06, 
+	0x23, 0x00, 0x23, 0xA0, 0x24, 0x50, 0x00, 0xDB, 0x94, 0x05, 0x23, 0xD0, 0xE7, 0x51, 0x20, 0xB4, 
+	0x24, 0x02, 0x94, 0x02, 0x93, 0x04, 0xE7, 0x38, 0x00, 0x80, 0xAC, 0x08, 0xB2, 0xED, 0x00, 0x5B, 
+	0x1D, 0x0B, 0x5A, 0xF2, 0x20, 0x40, 0x31, 0x01, 0x42, 0x40, 0x43, 0x01, 0x23, 0x00, 0x1C, 0x28, 
+	0x71, 0x62, 0x70, 0x63, 0x70, 0x21, 0x70, 0xE3, 0x70, 0xA3, 0xF7, 0xFF, 0x71, 0x23, 0x1C, 0x02, 
+	0xF9, 0x9F, 0x1C, 0x51, 0x98, 0x08, 0xE0, 0x6E, 0xD1, 0x00, 0xF7, 0xFF, 0x68, 0x61, 0x4B, 0x20, 
+	0xFE, 0x7F, 0x4B, 0x20, 0x68, 0x1A, 0x42, 0x9A, 0x68, 0x1B, 0xF7, 0xFC, 0xD0, 0x01, 0xB0, 0x0B, 
+	0xFD, 0xA7, 0x23, 0x3F, 0xBD, 0xF0, 0x18, 0x40, 0x40, 0x19, 0x80, 0x90, 0xB2, 0x80, 0x98, 0x03, 
+	0xE6, 0xFF, 0x40, 0x19, 0x23, 0x3F, 0x84, 0x11, 0x18, 0x41, 0xE6, 0xEE, 0x88, 0x90, 0x21, 0x00, 
+	0x23, 0x00, 0x20, 0x00, 0xE7, 0x0D, 0xE6, 0xFA, 0x21, 0x00, 0x40, 0x19, 0x23, 0x3F, 0xB2, 0x80, 
+	0x1A, 0x40, 0xE6, 0xEC, 0x80, 0x90, 0x40, 0x19, 0x23, 0x3F, 0x88, 0x90, 0x9B, 0x03, 0x84, 0x11, 
+	0x1A, 0x59, 0x46, 0xC0, 0xE6, 0xDB, 0x20, 0x00, 0x08, 0xF8, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 
+	0x01, 0xEC, 0x20, 0x00, 0x0D, 0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x0D, 0x48, 0x20, 0x00, 
+	0x01, 0x64, 0x00, 0x00, 0x02, 0xCF, 0x00, 0x00, 0x04, 0xFF, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 
+	0x00, 0xCC, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x80, 0xD0, 0xB8, 0x1C, 0x53, 0x21, 0x40, 
+	0xB2, 0xE8, 0x25, 0x21, 0x32, 0x01, 0x43, 0x0A, 0x23, 0x00, 0x44, 0x6D, 0xAC, 0x08, 0x70, 0x2B, 
+	0x70, 0x22, 0x22, 0x23, 0x21, 0x22, 0x44, 0x6A, 0x25, 0x25, 0xAC, 0x09, 0x44, 0x69, 0x70, 0x13, 
+	0x44, 0x6D, 0x70, 0x23, 0x70, 0x0B, 0xF7, 0xFF, 0x70, 0x2B, 0x1C, 0x02, 0xF9, 0x39, 0xD0, 0x0E, 
+	0x1C, 0x50, 0x99, 0x09, 0x98, 0x08, 0xFE, 0x1A, 0xF7, 0xFF, 0x68, 0x61, 0xE7, 0x99, 0xF7, 0xFF, 
+	0x98, 0x08, 0x68, 0x71, 0xFD, 0xDF, 0x68, 0x61, 0xE7, 0x7A, 0xFD, 0xDA, 0xF7, 0xFF, 0x98, 0x08, 
+	0xE7, 0x8F, 0xF7, 0xFF, 0x99, 0x09, 0xE7, 0x8A, 0xFD, 0xD5, 0x28, 0x50, 0xB5, 0x38, 0x4B, 0x54, 
+	0xD1, 0x05, 0x60, 0x18, 0x20, 0x01, 0xF8, 0xD8, 0xF7, 0xFF, 0x4B, 0x52, 0xE0, 0xA0, 0xD1, 0x01, 
+	0x28, 0x40, 0x70, 0x1C, 0x24, 0x01, 0x2B, 0x00, 0x78, 0x1B, 0xE0, 0x97, 0xD1, 0x00, 0x28, 0x0E, 
+	0x38, 0x41, 0xE0, 0x93, 0xD9, 0x00, 0xFE, 0x2A, 0xF7, 0xFE, 0x2D, 0x08, 0x12, 0x08, 0x92, 0x92, 
+	0x47, 0x08, 0x7A, 0x64, 0x5E, 0x92, 0x00, 0x8D, 0x92, 0x92, 0x22, 0x01, 0x4B, 0x47, 0x4B, 0x47, 
+	0x70, 0x1A, 0x4A, 0x47, 0x80, 0x1A, 0xF7, 0xFC, 0x60, 0x13, 0xE0, 0x7F, 0xFD, 0x11, 0x4B, 0x44, 
+	0x48, 0x42, 0xD1, 0x0B, 0x2A, 0xFF, 0x01, 0xC9, 0x4A, 0x43, 0x00, 0x52, 0x78, 0x12, 0x70, 0x02, 
+	0xB2, 0xD2, 0x18, 0x89, 0x4A, 0x41, 0xF7, 0xFC, 0x60, 0x19, 0xE0, 0x6F, 0xFD, 0x01, 0x18, 0x8A, 
+	0x01, 0x89, 0x00, 0x52, 0x49, 0x3D, 0x18, 0x52, 0x24, 0x02, 0x60, 0x1A, 0x70, 0x04, 0xFC, 0xF6, 
+	0xF7, 0xFC, 0x4C, 0x35, 0xE0, 0x64, 0x48, 0x39, 0x4B, 0x36, 0xD1, 0x0A, 0x2A, 0xFF, 0x01, 0x89, 
+	0x4A, 0x35, 0x18, 0x40, 0x78, 0x12, 0xB2, 0xD2, 0x00, 0x52, 0x60, 0x18, 0x70, 0x22, 0xFC, 0xE6, 
+	0xF7, 0xFC, 0x01, 0x49, 0xE0, 0x54, 0x00, 0x52, 0x18, 0x52, 0x18, 0x80, 0x25, 0x02, 0x60, 0x18, 
+	0x70, 0x25, 0xFC, 0xDC, 0xF7, 0xFC, 0x4C, 0x28, 0xE0, 0x4A, 0x48, 0x2D, 0x4B, 0x29, 0xD1, 0x08, 
+	0x2A, 0xFF, 0x01, 0x49, 0x4A, 0x28, 0x18, 0x40, 0x78, 0x92, 0x60, 0x18, 0x70, 0x22, 0xFC, 0xCE, 
+	0xF7, 0xFC, 0x01, 0x49, 0xE0, 0x3C, 0x25, 0x01, 0x18, 0x52, 0x70, 0x25, 0x18, 0x80, 0xF7, 0xFC, 
+	0x60, 0x18, 0xE0, 0x33, 0xFC, 0xC5, 0x4B, 0x1E, 0x49, 0x1C, 0x2A, 0xFF, 0x48, 0x22, 0xE0, 0x04, 
+	0xD1, 0x0E, 0x4B, 0x1B, 0x49, 0x19, 0x2A, 0xFF, 0x48, 0x20, 0x4A, 0x20, 0xD1, 0x08, 0x00, 0x52, 
+	0x78, 0x12, 0x70, 0x0A, 0xB2, 0xD2, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x1F, 0xFC, 0xB1, 0x24, 0x02, 
+	0x00, 0x52, 0x70, 0x0C, 0x18, 0x80, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x17, 0xFC, 0xA9, 0x4B, 0x10, 
+	0x48, 0x0E, 0x2A, 0xFF, 0x49, 0x17, 0x4A, 0x15, 0xD1, 0x06, 0x70, 0x02, 0x78, 0x12, 0xF7, 0xFC, 
+	0x60, 0x19, 0xE0, 0x0B, 0xFC, 0x9D, 0x18, 0x8A, 0x24, 0x01, 0x60, 0x1A, 0x70, 0x04, 0xFC, 0x96, 
+	0xF7, 0xFC, 0x4A, 0x10, 0xE0, 0x04, 0x70, 0x13, 0x23, 0x00, 0x70, 0x13, 0x4A, 0x02, 0x46, 0xC0, 
+	0xBD, 0x38, 0x20, 0x00, 0x11, 0x50, 0x20, 0x00, 0x01, 0xE5, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 
+	0x03, 0x08, 0x20, 0x00, 0x0D, 0x34, 0x20, 0x00, 0x03, 0x0A, 0x40, 0x00, 0x40, 0x84, 0x20, 0x00, 
+	0x03, 0xF8, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 
+	0x09, 0x7C, 0x20, 0x00, 0x0A, 0xA4, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0x2F, 0xB5, 0x08, 0x2B, 0x0A, 
+	0x88, 0x1B, 0xD8, 0x04, 0xD0, 0x2B, 0xD0, 0x09, 0x2B, 0x01, 0xD1, 0x54, 0x2B, 0x09, 0x2B, 0xA0, 
+	0xE0, 0x0E, 0x2B, 0xB0, 0xD0, 0x2B, 0x2B, 0x5F, 0xD0, 0x45, 0xE0, 0x38, 0xD1, 0x4D, 0x78, 0x11, 
+	0x4A, 0x27, 0x0A, 0x77, 0xAE, 0xF1, 0x1B, 0x42, 0x11, 0x22, 0x0E, 0x4A, 0x26, 0xD1, 0x47, 0xE0, 
+	0x44, 0x70, 0x13, 0x33, 0x34, 0x4B, 0x25, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x21, 0xD0, 0x3F, 0x2B, 
+	0x01, 0x78, 0x1B, 0x4A, 0x22, 0xD1, 0x05, 0x4B, 0x22, 0x70, 0x13, 0x70, 0x1A, 0x22, 0x00, 0x2B, 
+	0x02, 0xE0, 0x35, 0x4A, 0x1E, 0xD1, 0x33, 0x70, 0x13, 0x23, 0x01, 0x70, 0x13, 0x4A, 0x1D, 0x4B, 
+	0x18, 0xE0, 0x2D, 0x2B, 0x01, 0x78, 0x1B, 0x4B, 0x1B, 0xD1, 0x29, 0x61, 0x1A, 0x22, 0x02, 0x4B, 
+	0x14, 0xE0, 0x25, 0x78, 0x18, 0x4A, 0x19, 0x28, 0x1A, 0x4B, 0x19, 0x78, 0x19, 0xD1, 0x06, 0x78, 
+	0x10, 0x4B, 0x18, 0xF7, 0xFF, 0x78, 0x1A, 0xE0, 0x18, 0xF8, 0x3F, 0x78, 0x1A, 0x78, 0x11, 0xFE, 
+	0xEE, 0xF7, 0xFF, 0x4B, 0x0B, 0xE0, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x12, 0xD0, 0x0F, 0x60, 
+	0x1A, 0x22, 0x08, 0xFE, 0x98, 0xF7, 0xFA, 0x4B, 0x0D, 0xE0, 0x09, 0x4B, 0x0B, 0x78, 0x18, 0x4B, 
+	0x04, 0x78, 0x19, 0xF7, 0xFF, 0x78, 0x1A, 0x4B, 0x07, 0xF8, 0x27, 0xBD, 0x08, 0x60, 0x18, 0x20, 
+	0x00, 0x00, 0x28, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x01, 0xDC, 0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x08, 0xF8, 0x50, 0x00, 0x00, 0x0E, 0x50, 
+	0x00, 0x00, 0x0D, 0x50, 0x00, 0x00, 0x10, 0x20, 0x00, 0x11, 0x50, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6B, 0x31, 0xAE, 0xF1, 0x1C, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x06, 0x45, 0xFF, 0xFF, 0xD3, 0xF2, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/PRIV_120409_v8.c for-diff/drivers/input/touchscreen/mms100_ts/PRIV_120409_v8.c
--- caf/drivers/input/touchscreen/mms100_ts/PRIV_120409_v8.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/PRIV_120409_v8.c	2015-10-08 21:26:20.260845000 +0900
@@ -0,0 +1,268 @@
+static const struct firmware_data melfas_PRIV = {
+	.section_name = "PRIV",
+	.section_version = 0x07,
+	.start_page_addr = 25,
+	.end_page_addr = 28,
+	.compatible_version = 0x46,
+	.length = 4116,
+	.data = {
+	0xAE, 0xF1, 0x19, 0x30, 0x48, 0x31, 0x4D, 0x36, 0x34, 0x52, 0x50, 0x28, 0x00, 0xB5, 0x08, 0x28, 
+	0x01, 0xD0, 0x02, 0xE0, 0x03, 0xD1, 0x1D, 0x4B, 0x0F, 0x4A, 0x0E, 0xE0, 0x18, 0x60, 0x1A, 0x68, 
+	0x1B, 0x4B, 0x0E, 0xD1, 0x12, 0x2B, 0x0C, 0x4B, 0x0E, 0x4A, 0x0D, 0x4A, 0x0E, 0x60, 0x1A, 0x60, 
+	0x1A, 0x4B, 0x0E, 0x4B, 0x0F, 0x4A, 0x0E, 0x4A, 0x0F, 0x60, 0x1A, 0x60, 0x1A, 0x4B, 0x0F, 0x4B, 
+	0x10, 0x4A, 0x0F, 0x4A, 0x10, 0x60, 0x1A, 0x60, 0x1A, 0x4B, 0x10, 0xF7, 0xFD, 0xE0, 0x01, 0xBD, 
+	0x08, 0xFD, 0x23, 0x00, 0x00, 0x65, 0x91, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x16, 0x50, 0x00, 
+	0x00, 0x67, 0xE5, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x6C, 0xA5, 0x20, 0x00, 0x00, 0x6C, 0x00, 
+	0x00, 0x6C, 0xE5, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x71, 0xD5, 0x20, 0x00, 0x00, 0x18, 0x00, 
+	0x00, 0x68, 0x31, 0x20, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x67, 0x81, 0x20, 0x00, 0x00, 0x20, 0x4B, 
+	0x10, 0xB5, 0x70, 0x68, 0x1C, 0x4A, 0x10, 0x42, 0x8C, 0x68, 0x11, 0x68, 0x1B, 0xD0, 0x17, 0x4C, 
+	0x0E, 0x68, 0x16, 0xB2, 0xF6, 0xB2, 0xDB, 0x21, 0x0F, 0x25, 0x06, 0x1C, 0x2A, 0x30, 0x01, 0x19, 
+	0x12, 0x43, 0x5A, 0x40, 0x0A, 0x78, 0x12, 0xD0, 0x09, 0x42, 0x82, 0xB2, 0xD2, 0x1C, 0x5A, 0xB2, 
+	0xDB, 0x3B, 0x1D, 0xD8, 0x00, 0x2A, 0x1D, 0x42, 0xB3, 0x1C, 0x13, 0x4B, 0x04, 0xD1, 0xEF, 0xBD, 
+	0x70, 0xB2, 0x18, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x09, 0xF0, 0x00, 
+	0x00, 0xFF, 0xFF, 0x2A, 0x12, 0xB5, 0x00, 0xD8, 0x05, 0xD0, 0x25, 0xD0, 0x0A, 0x2A, 0x10, 0x2A, 
+	0x11, 0x23, 0x01, 0xE0, 0x3E, 0xD1, 0x3E, 0xD0, 0x10, 0x2A, 0x40, 0xD0, 0x14, 0x2A, 0x80, 0xD1, 
+	0x37, 0x2A, 0x13, 0x1C, 0x02, 0xE0, 0x1B, 0x23, 0x00, 0x3A, 0x1E, 0xD8, 0x32, 0x2A, 0x78, 0x22, 
+	0x0F, 0x4B, 0x1A, 0x4B, 0x1A, 0x73, 0xD8, 0x23, 0x01, 0x70, 0x1A, 0x4B, 0x19, 0xE0, 0x2B, 0x43, 
+	0x01, 0x01, 0x80, 0x23, 0x01, 0x60, 0x59, 0x4B, 0x16, 0xE0, 0x25, 0x43, 0x01, 0x01, 0x80, 0x23, 
+	0x01, 0x60, 0x99, 0x4B, 0x13, 0xE0, 0x1F, 0x23, 0x01, 0x60, 0xD8, 0x28, 0x00, 0xE0, 0x1B, 0x4B, 
+	0x11, 0xD1, 0x09, 0x1C, 0x1A, 0x21, 0x96, 0x00, 0xC9, 0x32, 0x08, 0x33, 0x48, 0x87, 0xD1, 0x80, 
+	0x1A, 0x22, 0x64, 0x23, 0x00, 0xE0, 0x0A, 0xD1, 0x0C, 0x28, 0x01, 0x49, 0x0B, 0x4B, 0x0A, 0x32, 
+	0x08, 0x1C, 0x1A, 0x4A, 0x0A, 0x87, 0xD1, 0x80, 0x1A, 0x33, 0x48, 0x61, 0x18, 0x4B, 0x05, 0xE0, 
+	0x00, 0x23, 0x01, 0x1C, 0x18, 0x23, 0x00, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x09, 0xAE, 0x20, 
+	0x00, 0x03, 0x1D, 0x20, 0x00, 0x08, 0xF8, 0x20, 0x00, 0x12, 0x48, 0x00, 0x00, 0x13, 0x88, 0xFF, 
+	0xFF, 0xEC, 0x78, 0x28, 0x10, 0xB5, 0xF8, 0xE0, 0xCA, 0xD9, 0x00, 0xFC, 0x74, 0xF7, 0xFF, 0xC9, 
+	0xC9, 0xC9, 0x09, 0xC9, 0x18, 0xC9, 0x0D, 0xC9, 0xC9, 0x28, 0xC9, 0xC9, 0xC9, 0x2E, 0x2E, 0x4B, 
+	0x60, 0x00, 0x48, 0x72, 0x1A, 0x22, 0x01, 0x49, 0x5F, 0xE0, 0xBB, 0x68, 0x0A, 0x23, 0x00, 0xDD, 
+	0x02, 0x42, 0x9A, 0x18, 0xD3, 0x68, 0x4B, 0x4A, 0x5C, 0x0F, 0xDB, 0xE0, 0xB0, 0x70, 0x13, 0x4C, 
+	0x5C, 0x4B, 0x5B, 0x4B, 0x5C, 0x78, 0x1A, 0xD0, 0x01, 0x2A, 0x00, 0xE0, 0x00, 0x4A, 0x5B, 0x7E, 
+	0x90, 0x4A, 0x5B, 0x01, 0x80, 0x68, 0x19, 0xFC, 0xB0, 0xF7, 0xFF, 0xE0, 0xA0, 0x76, 0xA0, 0x22, 
+	0x1C, 0x4B, 0x54, 0x4B, 0x57, 0x56, 0x9A, 0xE0, 0x9A, 0x60, 0x1A, 0x69, 0x1B, 0x4B, 0x56, 0xD1, 
+	0x09, 0x2B, 0x00, 0x21, 0x96, 0x4B, 0x4F, 0x32, 0x08, 0x1C, 0x1A, 0x87, 0xD1, 0x00, 0xC9, 0x22, 
+	0x64, 0x33, 0x48, 0xE0, 0x8C, 0x80, 0x1A, 0xD0, 0x00, 0x2B, 0x01, 0x4B, 0x49, 0xE0, 0x89, 0x1C, 
+	0x1A, 0x49, 0x4E, 0x87, 0xD1, 0x32, 0x08, 0x33, 0x48, 0x4A, 0x4D, 0xE0, 0x80, 0x80, 0x1A, 0x68, 
+	0xDB, 0x4B, 0x49, 0xD0, 0x1C, 0x2B, 0x00, 0x33, 0x04, 0x4B, 0x4A, 0x2A, 0x02, 0x7F, 0xDA, 0xE0, 
+	0x16, 0xD8, 0x0A, 0x87, 0xB4, 0x18, 0xEE, 0x27, 0x00, 0x4E, 0x47, 0x18, 0x76, 0x19, 0x96, 0x70, 
+	0x37, 0x3E, 0x01, 0xE0, 0x06, 0x39, 0x01, 0x43, 0x55, 0x25, 0x0A, 0x23, 0x00, 0x48, 0x43, 0x19, 
+	0x45, 0x1C, 0x19, 0x18, 0x8E, 0x1C, 0x1C, 0x2E, 0x02, 0x3B, 0x0A, 0x23, 0x02, 0xDC, 0xEA, 0x4B, 
+	0x3F, 0x60, 0x03, 0x2B, 0x00, 0x78, 0x1B, 0x48, 0x37, 0xD1, 0x09, 0x22, 0xD0, 0x4B, 0x3D, 0x21, 
+	0x00, 0x00, 0x52, 0x69, 0x44, 0x18, 0x9F, 0x1C, 0x06, 0x1C, 0x0A, 0x4B, 0x35, 0xE0, 0x3D, 0x33, 
+	0x04, 0x24, 0x0A, 0x49, 0x35, 0x7F, 0xDB, 0x22, 0x00, 0x43, 0x5C, 0x1C, 0x10, 0x19, 0x0C, 0x18, 
+	0xA5, 0xE0, 0x06, 0x4D, 0x30, 0x87, 0xA8, 0x19, 0x5D, 0x3B, 0x01, 0x70, 0x2E, 0x26, 0x00, 0x2B, 
+	0x00, 0x3A, 0x0A, 0x4A, 0x30, 0xD1, 0xF5, 0x21, 0x01, 0x60, 0x0B, 0x60, 0x51, 0x42, 0x49, 0x60, 
+	0x13, 0x49, 0x2E, 0x1C, 0x18, 0x78, 0x09, 0x42, 0x64, 0x00, 0x4C, 0x3C, 0x02, 0x00, 0x49, 0xE0, 
+	0x01, 0x18, 0x52, 0x81, 0x08, 0x18, 0xD1, 0x42, 0xA3, 0x3B, 0x02, 0xE7, 0xCC, 0xD1, 0xFA, 0x2D, 
+	0x1E, 0x56, 0x1D, 0x23, 0x00, 0xDD, 0x02, 0xE0, 0x22, 0x61, 0x73, 0xDD, 0x01, 0x2D, 0x0A, 0xE0, 
+	0x04, 0x31, 0x01, 0xDA, 0x01, 0x35, 0x05, 0xE0, 0x00, 0x32, 0x01, 0x30, 0x01, 0x24, 0x00, 0xD1, 
+	0xED, 0x28, 0x17, 0x42, 0xBB, 0x33, 0x20, 0x20, 0x00, 0xD0, 0x01, 0x4B, 0x12, 0xE7, 0xE8, 0x2A, 
+	0x00, 0x61, 0x5C, 0x29, 0x00, 0xD0, 0x03, 0x34, 0x01, 0xD0, 0x01, 0x2A, 0x05, 0x61, 0x5C, 0x69, 
+	0x5A, 0xDC, 0x02, 0xDD, 0x04, 0x2A, 0x64, 0x61, 0x5A, 0x22, 0x00, 0x22, 0x0D, 0x4B, 0x14, 0xBD, 
+	0xF8, 0x70, 0x1A, 0x20, 0x00, 0x0A, 0xAA, 0x20, 0x00, 0x01, 0x70, 0x20, 0x00, 0x16, 0x3D, 0x20, 
+	0x00, 0x01, 0xDD, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x09, 0x78, 0x00, 0x00, 0x74, 0x9A, 0x00, 
+	0x00, 0x74, 0x4A, 0x20, 0x00, 0x0D, 0x38, 0x20, 0x00, 0x08, 0xF8, 0x00, 0x00, 0x13, 0x88, 0xFF, 
+	0xFF, 0xEC, 0x78, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0x64, 0x20, 0x00, 0x12, 0x9C, 0x20, 
+	0x00, 0x00, 0xF5, 0x20, 0x00, 0x13, 0x64, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x09, 0x7C, 0x20, 
+	0x00, 0x03, 0x1D, 0x4B, 0x0E, 0xB5, 0x08, 0xB2, 0xDB, 0x88, 0x1B, 0xD0, 0x02, 0x2B, 0x10, 0xD1, 
+	0x13, 0x2B, 0xAF, 0xF7, 0xFC, 0xE0, 0x10, 0x4A, 0x0A, 0xFF, 0x11, 0x70, 0x13, 0x23, 0x00, 0x68, 
+	0x11, 0x4A, 0x09, 0x68, 0x12, 0x4A, 0x09, 0xD0, 0x02, 0x42, 0x91, 0xFE, 0xDC, 0xF7, 0xFC, 0x4A, 
+	0x07, 0xE0, 0x04, 0xE0, 0x01, 0x60, 0x13, 0xFF, 0x00, 0xF7, 0xFC, 0x46, 0xC0, 0xBD, 0x08, 0x20, 
+	0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x80, 0x20, 
+	0x00, 0x12, 0x98, 0x68, 0x1A, 0x4B, 0x02, 0x60, 0x1A, 0x4B, 0x02, 0x46, 0xC0, 0x47, 0x70, 0x20, 
+	0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x84, 0xF7, 0xFF, 0xB5, 0x08, 0xBD, 0x08, 0xFF, 0xF3, 0x4A, 
+	0x07, 0xB5, 0x00, 0x68, 0x10, 0x4B, 0x07, 0x42, 0x88, 0x68, 0x19, 0x68, 0x10, 0xDB, 0x03, 0x1A, 
+	0xC0, 0x68, 0x1B, 0xE7, 0x09, 0xAE, 0xF1, 0x1A, 0x68, 0x10, 0xE0, 0x03, 0x30, 0x1E, 0x68, 0x1B, 
+	0xBD, 0x00, 0x1A, 0xC0, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x84, 0x4B, 0x05, 0xB5, 0x00, 
+	0x32, 0x01, 0x68, 0x1A, 0x68, 0x1A, 0x60, 0x1A, 0xDD, 0x02, 0x2A, 0x1D, 0x3A, 0x1E, 0x68, 0x1A, 
+	0xBD, 0x00, 0x60, 0x1A, 0x20, 0x00, 0x00, 0x84, 0x4A, 0xA7, 0xB5, 0xF7, 0xB2, 0x1B, 0x88, 0x13, 
+	0xD1, 0x00, 0x2B, 0xAE, 0xDC, 0x3B, 0xE1, 0xB2, 0xD1, 0x00, 0x2B, 0x0A, 0xDC, 0x18, 0xE0, 0xED, 
+	0xD1, 0x00, 0x2B, 0x05, 0xDC, 0x08, 0xE0, 0xCE, 0xD1, 0x00, 0x2B, 0x03, 0xDD, 0x00, 0xE0, 0xB7, 
+	0x2B, 0x02, 0xE0, 0xBE, 0xE1, 0xE7, 0xD0, 0x00, 0x2B, 0x07, 0xE0, 0xA4, 0xE0, 0xCC, 0xD1, 0x00, 
+	0xE0, 0xC4, 0xDA, 0x00, 0xD1, 0x00, 0x2B, 0x08, 0x2B, 0x09, 0xE0, 0xF7, 0xE1, 0xDB, 0xD0, 0x00, 
+	0x2B, 0x10, 0xE0, 0xC8, 0xE0, 0x7F, 0xD1, 0x00, 0x2B, 0x0C, 0xDC, 0x0B, 0xE0, 0xD9, 0xD1, 0x00, 
+	0xE0, 0xCF, 0xDA, 0x00, 0xD1, 0x00, 0x2B, 0x0D, 0x2B, 0x0F, 0xE0, 0xDD, 0xE1, 0xCB, 0xD0, 0x00, 
+	0x2B, 0x62, 0xE0, 0x48, 0xE1, 0xC3, 0xD1, 0x00, 0x2B, 0x61, 0xDC, 0x03, 0xE1, 0xC3, 0xD0, 0x00, 
+	0x2B, 0x64, 0xE1, 0xB9, 0xE1, 0xB1, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xA8, 0xE1, 0x9D, 0xE1, 0xBC, 
+	0xD1, 0x00, 0x2B, 0xF4, 0xDC, 0x19, 0xE0, 0xF4, 0xD1, 0x00, 0x2B, 0xEF, 0xDC, 0x09, 0xE1, 0x87, 
+	0xD1, 0x00, 0x2B, 0xBF, 0x2B, 0xEE, 0xE1, 0x8D, 0xE1, 0x7C, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xAF, 
+	0xE1, 0x6A, 0xE1, 0xAA, 0xD1, 0x00, 0x2B, 0xF1, 0xDA, 0x00, 0xE0, 0xC8, 0x2B, 0xF2, 0xE0, 0xC2, 
+	0xE0, 0xCB, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xF3, 0xE0, 0xD0, 0xE1, 0x9E, 0xD1, 0x00, 0x2B, 0xF9, 
+	0xDC, 0x0B, 0xE1, 0x26, 0xD1, 0x00, 0x2B, 0xF6, 0xDA, 0x00, 0xE1, 0x06, 0x2B, 0xF7, 0xE0, 0xD9, 
+	0xE1, 0x08, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xF8, 0xE1, 0x10, 0xE1, 0x8E, 0xD1, 0x00, 0x2B, 0xFB, 
+	0xDA, 0x00, 0xE1, 0x28, 0x2B, 0xFC, 0xE1, 0x1D, 0xE1, 0x2C, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xFD, 
+	0xE1, 0x31, 0xE1, 0x82, 0xFF, 0x5E, 0xF7, 0xFF, 0x60, 0x20, 0x4C, 0x68, 0x2B, 0x00, 0x68, 0x23, 
+	0xF7, 0xFC, 0xD1, 0x01, 0x68, 0x23, 0xFE, 0x3D, 0x43, 0x5A, 0x22, 0x06, 0x4C, 0x65, 0x4B, 0x64, 
+	0x25, 0x00, 0x70, 0x1A, 0x4F, 0x64, 0x4E, 0x61, 0x68, 0x39, 0xE0, 0x12, 0x43, 0x51, 0x22, 0x06, 
+	0x46, 0x68, 0x4B, 0x62, 0xF7, 0xFF, 0x18, 0xC9, 0x23, 0x00, 0xFB, 0x55, 0x5C, 0x1A, 0x46, 0x68, 
+	0x33, 0x01, 0x54, 0xE2, 0xD1, 0xF9, 0x2B, 0x06, 0xFF, 0x50, 0xF7, 0xFF, 0x34, 0x06, 0x35, 0x01, 
+	0x42, 0x9D, 0x68, 0x33, 0xE1, 0x57, 0xDB, 0xE9, 0x4A, 0x54, 0x49, 0x59, 0x68, 0x13, 0x78, 0x0C, 
+	0x43, 0x58, 0x20, 0x06, 0x42, 0x84, 0x23, 0x00, 0x4A, 0x52, 0xDA, 0x0A, 0x4D, 0x50, 0x78, 0x08, 
+	0x5C, 0xC4, 0x18, 0x10, 0x33, 0x01, 0x19, 0x58, 0x2B, 0x08, 0x70, 0x04, 0xE1, 0x43, 0xD1, 0xF6, 
+	0xE1, 0x41, 0x60, 0x13, 0x23, 0x0F, 0x4A, 0x4F, 0x5E, 0x11, 0x20, 0x26, 0x5F, 0x52, 0x25, 0x28, 
+	0x12, 0x12, 0x11, 0x09, 0x40, 0x13, 0x43, 0x99, 0x18, 0xCB, 0x4A, 0x45, 0x4B, 0x42, 0x70, 0x13, 
+	0x23, 0x03, 0x88, 0x1A, 0x1A, 0x9A, 0xB2, 0x12, 0x8D, 0x19, 0x4B, 0x46, 0x54, 0xD1, 0x4B, 0x40, 
+	0x88, 0x1A, 0x4B, 0x3D, 0xB2, 0x12, 0x23, 0x04, 0x4B, 0x42, 0x1A, 0x9A, 0x4B, 0x3C, 0x8C, 0xD9, 
+	0xE1, 0x21, 0x54, 0xD1, 0x8C, 0xDA, 0x4B, 0x40, 0x70, 0x1A, 0x4B, 0x39, 0x4B, 0x3E, 0xE1, 0x1C, 
+	0x78, 0x1A, 0x33, 0x34, 0x70, 0x1A, 0x4B, 0x36, 0x4B, 0x3A, 0xE1, 0x16, 0x4B, 0x34, 0x7B, 0xDA, 
+	0xE1, 0x11, 0x70, 0x1A, 0x78, 0x1A, 0x4B, 0x39, 0x2A, 0x00, 0x4B, 0x31, 0x22, 0x02, 0xD0, 0x02, 
+	0xE1, 0x09, 0x70, 0x1A, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x35, 0xE1, 0x06, 0x4B, 0x2C, 0x78, 0x1A, 
+	0xE1, 0x01, 0x70, 0x1A, 0x4B, 0x33, 0x88, 0x12, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0x0B, 
+	0x54, 0xD1, 0x4B, 0x27, 0x88, 0x1A, 0x4B, 0x24, 0xB2, 0x12, 0x4B, 0x2E, 0x23, 0x0C, 0x78, 0x59, 
+	0x4B, 0x23, 0x1A, 0x9A, 0x4B, 0x20, 0x54, 0xD1, 0x4B, 0x2B, 0x88, 0x1A, 0x78, 0x19, 0xB2, 0x12, 
+	0x1A, 0x9A, 0x23, 0x0D, 0x54, 0xD1, 0x4B, 0x1E, 0x4B, 0x23, 0xE0, 0xE6, 0x4B, 0x1C, 0x8D, 0xDA, 
+	0xE0, 0xE1, 0x70, 0x1A, 0x78, 0x1A, 0x4B, 0x1F, 0x70, 0x1A, 0x4B, 0x19, 0x21, 0x01, 0x4B, 0x16, 
+	0x23, 0xF1, 0x88, 0x1A, 0x1A, 0x9A, 0xB2, 0x12, 0x54, 0xD1, 0x4B, 0x15, 0x88, 0x1A, 0x4B, 0x12, 
+	0xB2, 0x12, 0x4B, 0x18, 0x23, 0xF2, 0x78, 0x59, 0x4B, 0x11, 0x1A, 0x9A, 0x4B, 0x0E, 0x54, 0xD1, 
+	0x4B, 0x1A, 0x88, 0x1A, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF3, 0x54, 0xD1, 0x4B, 0x0C, 
+	0x88, 0x1A, 0x4B, 0x09, 0xB2, 0x12, 0x4B, 0x16, 0x23, 0xF4, 0x78, 0x19, 0x4B, 0x08, 0x1A, 0x9A, 
+	0x4B, 0x05, 0x54, 0xD1, 0x4B, 0x13, 0x88, 0x1A, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF5, 
+	0x54, 0xD1, 0x4B, 0x03, 0x46, 0xC0, 0xE0, 0xB0, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x12, 0x98, 
+	0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x88, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x09, 0xF0, 
+	0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x01, 0xDD, 
+	0x20, 0x00, 0x01, 0xDF, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0x7C, 0x00, 0x00, 0x63, 0xFF, 
+	0x00, 0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0x4A, 0x49, 0x4B, 0x48, 0x18, 0xD3, 0x78, 0x1B, 
+	0x4B, 0x48, 0x78, 0xDA, 0x4B, 0x48, 0x70, 0x1A, 0x88, 0x1A, 0x49, 0x45, 0xB2, 0x12, 0x4B, 0x43, 
+	0x18, 0xCB, 0x78, 0x1B, 0x23, 0xF7, 0x79, 0x19, 0x4B, 0x42, 0x1A, 0x9A, 0x4B, 0x42, 0x54, 0xD1, 
+	0x4B, 0x3F, 0x88, 0x1A, 0x79, 0x59, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF8, 0x54, 0xD1, 0x4B, 0x3D, 
+	0x88, 0x1A, 0x4B, 0x3D, 0xB2, 0x12, 0x4B, 0x3A, 0x23, 0xF9, 0x79, 0x99, 0x4B, 0x39, 0x1A, 0x9A, 
+	0x4B, 0x39, 0x54, 0xD1, 0x4B, 0x36, 0x88, 0x1A, 0x79, 0xD9, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xFA, 
+	0x54, 0xD1, 0x4B, 0x34, 0x88, 0x1A, 0x4B, 0x34, 0xB2, 0x12, 0x4B, 0x31, 0x23, 0xFB, 0x7A, 0x19, 
+	0x4B, 0x30, 0x1A, 0x9A, 0x4B, 0x30, 0x54, 0xD1, 0x4B, 0x2D, 0x88, 0x1A, 0x7A, 0x59, 0xB2, 0x12, 
+	0x1A, 0x9A, 0x23, 0xFC, 0x54, 0xD1, 0x4B, 0x2B, 0x88, 0x1A, 0x4B, 0x2B, 0xB2, 0x12, 0x4B, 0x28, 
+	0x23, 0xFD, 0x7A, 0x99, 0x4B, 0x27, 0x1A, 0x9A, 0xE0, 0x45, 0x54, 0xD1, 0x78, 0x1A, 0x4B, 0x27, 
+	0x70, 0x1A, 0x4B, 0x24, 0xFD, 0x04, 0xF7, 0xFC, 0x49, 0x25, 0xE0, 0x3E, 0x23, 0x00, 0x4A, 0x1F, 
+	0x78, 0x10, 0x68, 0x0C, 0x18, 0x20, 0x4D, 0x1F, 0x19, 0x58, 0x5C, 0xC4, 0x70, 0x04, 0x33, 0x01, 
+	0xD1, 0xF5, 0x2B, 0x08, 0x4B, 0x1A, 0xE0, 0x30, 0x4B, 0x1A, 0x7E, 0x1A, 0x4B, 0x1A, 0x70, 0x1A, 
+	0x4B, 0x17, 0x88, 0x1A, 0x7D, 0xD9, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xEF, 0x54, 0xD1, 0x4B, 0x15, 
+	0x4B, 0x18, 0xE0, 0x22, 0x4B, 0x13, 0x68, 0x1A, 0xE0, 0x1D, 0x70, 0x1A, 0x4A, 0x0F, 0x49, 0x14, 
+	0x68, 0x0C, 0x23, 0x00, 0x4D, 0x0F, 0x78, 0x10, 0x23, 0xB9, 0xAE, 0xF1, 0x1B, 0x5C, 0xC4, 0x18, 
+	0x20, 0x33, 0x01, 0x19, 0x58, 0x2B, 0x08, 0x70, 0x04, 0xF7, 0xFC, 0xD1, 0xF5, 0xE0, 0x0D, 0xFC, 
+	0xD3, 0x78, 0x1A, 0x4B, 0x0E, 0x70, 0x1A, 0x4B, 0x08, 0x4B, 0x0D, 0xE0, 0x08, 0x4B, 0x06, 0x78, 
+	0x9A, 0xE0, 0x03, 0x70, 0x1A, 0x78, 0xDA, 0x4B, 0x0A, 0x70, 0x1A, 0x4B, 0x03, 0x46, 0xC0, 0xBD, 
+	0xF7, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x09, 0xAE, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 
+	0x28, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x0D, 0x34, 0x20, 0x00, 0x08, 0xF8, 0x00, 0x00, 0x63, 
+	0xFF, 0x20, 0x00, 0x00, 0x35, 0x4C, 0x0F, 0xB5, 0x73, 0x90, 0x00, 0x4D, 0x0F, 0x68, 0x20, 0x91, 
+	0x01, 0x30, 0x1F, 0x21, 0x1E, 0xF7, 0xFF, 0x68, 0x2E, 0x42, 0xB1, 0xF9, 0xC3, 0x68, 0x20, 0xD0, 
+	0xF7, 0x43, 0x50, 0x22, 0x06, 0x46, 0x69, 0x4B, 0x09, 0xF7, 0xFF, 0x18, 0xC0, 0x68, 0x23, 0xF9, 
+	0xC5, 0x60, 0x23, 0x33, 0x01, 0x2B, 0x1D, 0x68, 0x23, 0x68, 0x23, 0xDD, 0x02, 0x60, 0x23, 0x3B, 
+	0x1E, 0x46, 0xC0, 0xBD, 0x73, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x09, 
+	0xF0, 0x46, 0x6A, 0xB5, 0x07, 0x70, 0x13, 0x23, 0x0F, 0x70, 0x53, 0x23, 0x00, 0x70, 0xD3, 0x70, 
+	0x93, 0x98, 0x00, 0x71, 0x53, 0xF7, 0xFF, 0x99, 0x01, 0xF7, 0xFC, 0xFF, 0xCD, 0xBD, 0x07, 0xFC, 
+	0x51, 0x23, 0x06, 0xB5, 0x07, 0x1C, 0x18, 0x90, 0x00, 0x91, 0x01, 0x43, 0x50, 0x1C, 0x1A, 0x49, 
+	0x03, 0x46, 0x69, 0x18, 0x40, 0xF9, 0x98, 0xF7, 0xFF, 0x46, 0xC0, 0xBD, 0x07, 0x20, 0x00, 0x09, 
+	0xF0, 0x4C, 0xBF, 0xB5, 0xF0, 0x69, 0x23, 0x4D, 0xBF, 0x3B, 0x02, 0xB0, 0x8B, 0x41, 0x93, 0x1E, 
+	0x5A, 0x5C, 0xAC, 0x22, 0x23, 0x25, 0x0F, 0x42, 0x5B, 0x95, 0x07, 0x40, 0x1D, 0x2C, 0x00, 0x25, 
+	0x00, 0xE0, 0xBE, 0xD1, 0x00, 0xB2, 0xDB, 0x1E, 0x63, 0xE0, 0x00, 0x48, 0xB7, 0x00, 0x9A, 0x1C, 
+	0x13, 0x18, 0xD2, 0x4D, 0xB6, 0x18, 0xAA, 0x00, 0x52, 0x5F, 0x51, 0x25, 0x3C, 0x1E, 0x4D, 0x1E, 
+	0x5A, 0x54, 0xC1, 0x41, 0xA9, 0x2B, 0x00, 0xB2, 0xD2, 0x25, 0x00, 0xD1, 0xF0, 0xDC, 0x00, 0x2C, 
+	0x00, 0x4F, 0xAE, 0xE0, 0xA7, 0x37, 0x40, 0x26, 0x00, 0x24, 0x10, 0xE0, 0x15, 0x5E, 0x20, 0x46, 
+	0x68, 0x1A, 0xC3, 0xB2, 0x1B, 0x9C, 0x05, 0x17, 0xD8, 0x40, 0x43, 0x18, 0x1B, 0xDD, 0x34, 0x42, 
+	0x9C, 0xDD, 0x36, 0x29, 0x00, 0x23, 0x23, 0x4C, 0xA3, 0x35, 0x01, 0x5C, 0xE3, 0x37, 0x0A, 0x36, 
+	0x02, 0xDC, 0x00, 0x42, 0xAB, 0x4C, 0xA2, 0xE0, 0x8D, 0x8D, 0x9A, 0x19, 0xA3, 0x29, 0x00, 0xB2, 
+	0x11, 0xE0, 0xED, 0xDC, 0x00, 0x90, 0x06, 0x1F, 0x38, 0x5F, 0x04, 0x24, 0x00, 0xDC, 0x00, 0x2C, 
+	0x00, 0x4C, 0x9A, 0xE0, 0xA4, 0x8C, 0x10, 0x19, 0xA2, 0x20, 0x18, 0x90, 0x03, 0x20, 0x0C, 0x5E, 
+	0x1C, 0x46, 0x6C, 0x94, 0x04, 0x98, 0x04, 0x5F, 0x04, 0x1A, 0x24, 0x88, 0x9B, 0x4C, 0x95, 0x94, 
+	0x04, 0x5C, 0x20, 0x20, 0x34, 0x98, 0x04, 0x90, 0x05, 0x19, 0x00, 0x17, 0xC4, 0x46, 0x84, 0x40, 
+	0x60, 0x88, 0x90, 0x9C, 0x05, 0x45, 0xA4, 0x90, 0x04, 0x4B, 0x8F, 0xDB, 0xBF, 0x2B, 0x00, 0x5D, 
+	0x5B, 0x4C, 0x87, 0xD0, 0xC6, 0x11, 0x8B, 0x68, 0x61, 0x2B, 0x01, 0xD0, 0x05, 0xE0, 0xF4, 0xD1, 
+	0x00, 0xD1, 0x00, 0x2B, 0x02, 0x4C, 0x82, 0xE0, 0xF7, 0x11, 0x8B, 0x68, 0xA1, 0x2B, 0x01, 0xD0, 
+	0x05, 0xE0, 0xE4, 0xD1, 0x00, 0xD1, 0x00, 0x2B, 0x02, 0x8C, 0x10, 0xE0, 0xF3, 0x90, 0x02, 0x46, 
+	0x6C, 0x20, 0x08, 0x21, 0x05, 0x5F, 0x03, 0x56, 0x51, 0x88, 0x92, 0x9C, 0x06, 0x46, 0x8C, 0xB2, 
+	0xE8, 0x88, 0x23, 0x11, 0x19, 0x94, 0x03, 0x1C, 0x44, 0x46, 0x64, 0x92, 0x04, 0x40, 0x22, 0x22, 
+	0x0F, 0x22, 0x0F, 0x92, 0x06, 0x91, 0x01, 0x43, 0x91, 0x42, 0x4A, 0x21, 0x60, 0x78, 0x3C, 0x99, 
+	0x03, 0x92, 0x03, 0x43, 0x0A, 0x9A, 0x06, 0x99, 0x01, 0x43, 0x0A, 0x94, 0x05, 0xB2, 0x1A, 0x46, 
+	0x94, 0x46, 0x69, 0x92, 0x06, 0x5C, 0x51, 0x22, 0x0C, 0x46, 0x62, 0xAC, 0x08, 0x70, 0x62, 0x70, 
+	0x21, 0x22, 0x10, 0x46, 0x69, 0x46, 0x6A, 0x5C, 0x51, 0x21, 0x08, 0x70, 0xA1, 0x46, 0x69, 0x5C, 
+	0x8A, 0x22, 0x14, 0x70, 0xE2, 0x9A, 0x06, 0x5C, 0x51, 0x2A, 0xFF, 0x71, 0x21, 0x71, 0x63, 0xDC, 
+	0x6D, 0xFB, 0x12, 0xF7, 0xFF, 0xCC, 0x03, 0x1C, 0x02, 0xD0, 0x6E, 0x1C, 0x53, 0xFF, 0x28, 0xF7, 
+	0xFF, 0x23, 0x23, 0x4C, 0x5C, 0x35, 0x01, 0x5C, 0xE3, 0x37, 0x0A, 0x36, 0x02, 0xDD, 0x00, 0x42, 
+	0xAB, 0x4E, 0x5E, 0xE7, 0x71, 0x68, 0x71, 0x4B, 0x5E, 0x1C, 0x48, 0x68, 0x5A, 0xE0, 0xBD, 0xD1, 
+	0x00, 0xD1, 0x00, 0x42, 0x91, 0x1C, 0x53, 0xE0, 0x81, 0x21, 0x40, 0xD0, 0x65, 0xAC, 0x08, 0x32, 
+	0x01, 0x43, 0x0A, 0x23, 0x00, 0x70, 0x22, 0xB2, 0xED, 0x70, 0x63, 0x1C, 0x28, 0x70, 0xE3, 0x70, 
+	0xA3, 0x71, 0x63, 0x71, 0x23, 0xFA, 0xE8, 0xF7, 0xFF, 0x1C, 0x50, 0x1C, 0x02, 0xE0, 0xC6, 0xD1, 
+	0x00, 0x98, 0x08, 0x68, 0x61, 0xFE, 0xFC, 0xF7, 0xFF, 0xE0, 0x4E, 0x68, 0x71, 0xDC, 0x00, 0x29, 
+	0x00, 0x20, 0x05, 0xE7, 0x40, 0x8B, 0x1C, 0x56, 0x18, 0x94, 0x05, 0x46, 0x84, 0x20, 0x14, 0x46, 
+	0x69, 0x88, 0x9B, 0x5E, 0x44, 0x11, 0x21, 0xB2, 0xE8, 0x94, 0x03, 0x1C, 0x44, 0x46, 0x64, 0x93, 
+	0x04, 0x40, 0x23, 0x23, 0x0F, 0x23, 0x0F, 0x46, 0x9C, 0x91, 0x06, 0x43, 0x99, 0x1C, 0x13, 0x99, 
+	0x03, 0x43, 0x11, 0x22, 0x20, 0x91, 0x03, 0x9A, 0x06, 0x43, 0x11, 0x46, 0x61, 0xB2, 0x19, 0x46, 
+	0x8C, 0x46, 0x6A, 0x91, 0x06, 0x5C, 0x8A, 0x21, 0x0C, 0x46, 0x61, 0xAC, 0x08, 0x70, 0x61, 0x70, 
+	0x22, 0x21, 0x10, 0x46, 0x6A, 0x46, 0x69, 0x5C, 0x8A, 0x22, 0x14, 0x70, 0xA2, 0x9A, 0x06, 0x5C, 
+	0x51, 0x21, 0x00, 0x70, 0xE1, 0x2A, 0xFF, 0x71, 0x21, 0x23, 0xFF, 0xDD, 0x91, 0xF7, 0xFF, 0x71, 
+	0x63, 0x1C, 0x02, 0xFA, 0xA3, 0x1C, 0x53, 0xCC, 0x03, 0xF7, 0xFF, 0xD1, 0x90, 0xE7, 0x01, 0xFE, 
+	0x83, 0x24, 0x00, 0x1E, 0xB8, 0x9C, 0x07, 0x5F, 0x00, 0xDD, 0x00, 0x42, 0xA0, 0x1F, 0x3B, 0xE7, 
+	0x0A, 0x80, 0x1A, 0x22, 0x00, 0xB2, 0xED, 0xE6, 0xF6, 0x1D, 0x0B, 0xAC, 0x08, 0x20, 0x40, 0x00, 
+	0x5B, 0x42, 0x40, 0x5A, 0xF2, 0x23, 0x00, 0x31, 0x01, 0x71, 0x62, 0x43, 0x01, 0x70, 0x21, 0x1C, 
+	0x28, 0x70, 0xA3, 0x70, 0x63, 0x71, 0x23, 0x70, 0xE3, 0xFA, 0x7E, 0xF7, 0xFF, 0x98, 0x08, 0x1C, 
+	0x02, 0xD0, 0x62, 0x1C, 0x51, 0xF7, 0xFF, 0x68, 0x61, 0x4B, 0x1A, 0xFE, 0x93, 0x4B, 0x1A, 0x68, 
+	0x1A, 0x42, 0x9A, 0x68, 0x1B, 0xF7, 0xFC, 0xD0, 0x01, 0xB0, 0x0B, 0xFA, 0xDB, 0x88, 0x93, 0xBD, 
+	0xF0, 0x40, 0x01, 0x20, 0x3F, 0x80, 0x91, 0x18, 0x59, 0x98, 0x03, 0xE7, 0x17, 0x40, 0x19, 0x23, 
+	0x3F, 0x84, 0x11, 0x18, 0x41, 0x23, 0x3F, 0xE7, 0x07, 0x9B, 0x03, 0x40, 0x19, 0x84, 0x11, 0x1A, 
+	0x59, 0x88, 0x93, 0xE7, 0x01, 0x40, 0x01, 0x20, 0x3F, 0x80, 0x91, 0x1A, 0x59, 0x46, 0xC0, 0xE7, 
+	0x05, 0x20, 0x00, 0x08, 0xF8, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xEC, 0x20, 0x00, 0x12, 
+	0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x01, 0x64, 0xD1, 0x1C, 0xAE, 
+	0xF1, 0x1C, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x00, 0xCC, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 
+	0x00, 0x80, 0xD0, 0xC4, 0x1C, 0x53, 0x21, 0x40, 0xB2, 0xE8, 0x25, 0x21, 0x32, 0x01, 0x43, 0x0A, 
+	0x23, 0x00, 0x44, 0x6D, 0xAC, 0x08, 0x70, 0x2B, 0x70, 0x22, 0x22, 0x23, 0x21, 0x22, 0x44, 0x6A, 
+	0x25, 0x25, 0xAC, 0x09, 0x44, 0x69, 0x70, 0x13, 0x44, 0x6D, 0x70, 0x23, 0x70, 0x0B, 0xF7, 0xFF, 
+	0x70, 0x2B, 0x1C, 0x02, 0xFA, 0x25, 0xD0, 0x0E, 0x1C, 0x50, 0x99, 0x09, 0x98, 0x08, 0xFE, 0x3A, 
+	0xF7, 0xFF, 0x68, 0x61, 0xE7, 0xA5, 0xF7, 0xFF, 0x98, 0x08, 0x68, 0x71, 0xFD, 0xFF, 0x68, 0x61, 
+	0xE7, 0x87, 0xFD, 0xFA, 0xF7, 0xFF, 0x98, 0x08, 0xE7, 0x9B, 0xF7, 0xFF, 0x99, 0x09, 0xE7, 0x96, 
+	0xFD, 0xF5, 0x28, 0x50, 0xB5, 0x38, 0x4B, 0x49, 0xD1, 0x05, 0x60, 0x18, 0x20, 0x01, 0xF9, 0xC4, 
+	0xF7, 0xFF, 0x4B, 0x47, 0xE0, 0x8A, 0xD1, 0x01, 0x28, 0x40, 0x70, 0x1C, 0x24, 0x01, 0x2B, 0x00, 
+	0x78, 0x1B, 0xE0, 0x81, 0xD1, 0x00, 0x28, 0x0E, 0x38, 0x41, 0xF7, 0xFE, 0xD8, 0x7E, 0x12, 0x08, 
+	0xFE, 0xF3, 0x32, 0x08, 0x18, 0x08, 0x49, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x65, 0x4F, 0x4B, 0x3D, 
+	0x00, 0x78, 0x70, 0x1A, 0x22, 0x01, 0x80, 0x1A, 0x4B, 0x3C, 0x60, 0x13, 0x4A, 0x3C, 0xFA, 0x52, 
+	0xF7, 0xFC, 0x4C, 0x38, 0xE0, 0x6A, 0x48, 0x3A, 0x4B, 0x39, 0xD1, 0x10, 0x2A, 0xFF, 0x4C, 0x35, 
+	0xE0, 0x04, 0x48, 0x38, 0x4B, 0x36, 0xD1, 0x0A, 0x2A, 0xFF, 0x01, 0x89, 0x4A, 0x37, 0x18, 0x40, 
+	0x78, 0x12, 0xB2, 0xD2, 0x00, 0x52, 0x60, 0x18, 0x70, 0x22, 0xFA, 0x3C, 0xF7, 0xFC, 0x01, 0x49, 
+	0xE0, 0x54, 0x00, 0x52, 0x18, 0x52, 0x18, 0x80, 0x25, 0x02, 0x60, 0x18, 0x70, 0x25, 0xFA, 0x32, 
+	0xF7, 0xFC, 0x4C, 0x28, 0xE0, 0x4A, 0x48, 0x2D, 0x4B, 0x29, 0xD1, 0x08, 0x2A, 0xFF, 0x01, 0x49, 
+	0x4A, 0x2A, 0x18, 0x40, 0x78, 0x92, 0x60, 0x18, 0x70, 0x22, 0xFA, 0x24, 0xF7, 0xFC, 0x01, 0x49, 
+	0xE0, 0x3C, 0x25, 0x01, 0x18, 0x52, 0x70, 0x25, 0x18, 0x80, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x33, 
+	0xFA, 0x1B, 0x4B, 0x1E, 0x49, 0x1C, 0x2A, 0xFF, 0x48, 0x22, 0xE0, 0x04, 0xD1, 0x0E, 0x4B, 0x1B, 
+	0x49, 0x19, 0x2A, 0xFF, 0x48, 0x20, 0x4A, 0x20, 0xD1, 0x08, 0x00, 0x52, 0x78, 0x12, 0x70, 0x0A, 
+	0xB2, 0xD2, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x1F, 0xFA, 0x07, 0x24, 0x02, 0x00, 0x52, 0x70, 0x0C, 
+	0x18, 0x80, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x17, 0xF9, 0xFF, 0x4B, 0x10, 0x48, 0x0E, 0x2A, 0xFF, 
+	0x49, 0x17, 0x4A, 0x15, 0xD1, 0x06, 0x70, 0x02, 0x78, 0x12, 0xF7, 0xFC, 0x60, 0x19, 0xE0, 0x0B, 
+	0xF9, 0xF3, 0x18, 0x8A, 0x24, 0x01, 0x60, 0x1A, 0x70, 0x04, 0xF9, 0xEC, 0xF7, 0xFC, 0x4A, 0x10, 
+	0xE0, 0x04, 0x70, 0x13, 0x23, 0x00, 0x70, 0x13, 0x4A, 0x02, 0x46, 0xC0, 0xBD, 0x38, 0x20, 0x00, 
+	0x16, 0x50, 0x20, 0x00, 0x01, 0xE5, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x03, 0x08, 0x20, 0x00, 
+	0x0D, 0x34, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 
+	0x0A, 0xB3, 0x20, 0x00, 0x12, 0x3C, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 0x09, 0x7C, 0x20, 0x00, 
+	0x0A, 0xA4, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0x2F, 0xB5, 0x08, 0x2B, 0x0A, 0x88, 0x1B, 0xD8, 0x04, 
+	0xD0, 0x2B, 0xD0, 0x09, 0x2B, 0x01, 0xD1, 0x54, 0x2B, 0x09, 0x2B, 0xA0, 0xE0, 0x0E, 0x2B, 0xB0, 
+	0xD0, 0x2B, 0x2B, 0x5F, 0xD0, 0x45, 0xE0, 0x38, 0xD1, 0x4D, 0x78, 0x11, 0x4A, 0x27, 0x42, 0x11, 
+	0x22, 0x0E, 0x4A, 0x26, 0xD1, 0x47, 0xE0, 0x44, 0x70, 0x13, 0x33, 0x34, 0x4B, 0x25, 0x2B, 0x00, 
+	0x78, 0x1B, 0x4B, 0x21, 0xD0, 0x3F, 0x2B, 0x01, 0x78, 0x1B, 0x4A, 0x22, 0xD1, 0x05, 0x4B, 0x22, 
+	0x70, 0x13, 0x70, 0x1A, 0x22, 0x00, 0x2B, 0x02, 0xE0, 0x35, 0x4A, 0x1E, 0xD1, 0x33, 0x70, 0x13, 
+	0x23, 0x01, 0x70, 0x13, 0x4A, 0x1D, 0x4B, 0x18, 0xE0, 0x2D, 0x2B, 0x01, 0x78, 0x1B, 0x4B, 0x1B, 
+	0xD1, 0x29, 0x61, 0x1A, 0x22, 0x02, 0x4B, 0x14, 0xE0, 0x25, 0x78, 0x18, 0x4A, 0x19, 0x28, 0x1A, 
+	0x4B, 0x19, 0x78, 0x19, 0xD1, 0x06, 0x78, 0x10, 0x4B, 0x18, 0xF7, 0xFF, 0x78, 0x1A, 0xE0, 0x18, 
+	0xF9, 0x41, 0x78, 0x1A, 0x78, 0x11, 0xFF, 0x04, 0xF7, 0xFF, 0x4B, 0x0B, 0xE0, 0x13, 0x2B, 0x00, 
+	0x78, 0x1B, 0x4B, 0x12, 0xD0, 0x0F, 0x60, 0x1A, 0x22, 0x08, 0xFB, 0x9A, 0xF7, 0xFA, 0x4B, 0x0D, 
+	0xE0, 0x09, 0x4B, 0x0B, 0x78, 0x18, 0x4B, 0x04, 0x78, 0x19, 0xF7, 0xFF, 0x78, 0x1A, 0x4B, 0x07, 
+	0xF9, 0x29, 0xBD, 0x08, 0x60, 0x18, 0x20, 0x00, 0x00, 0x28, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 
+	0x01, 0xE8, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xDC, 0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 
+	0x08, 0xF8, 0x50, 0x00, 0x00, 0x0E, 0x50, 0x00, 0x00, 0x0D, 0x50, 0x00, 0x00, 0x10, 0x20, 0x00, 
+	0x16, 0x50, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x46, 
+	0xFF, 0xFF, 0x14, 0x2F, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/PRIV_120529_v28.c for-diff/drivers/input/touchscreen/mms100_ts/PRIV_120529_v28.c
--- caf/drivers/input/touchscreen/mms100_ts/PRIV_120529_v28.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/PRIV_120529_v28.c	2015-10-08 21:26:20.268845000 +0900
@@ -0,0 +1,268 @@
+static const struct firmware_data melfas_PRIV = {
+	.section_name = "PRIV",
+	.section_version = 0x19,
+	.start_page_addr = 25,
+	.end_page_addr = 28,
+	.compatible_version = 0x45,
+	.length = 4116,
+	.data = {
+	0xAE, 0xF1, 0x19, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x52, 0x50, 0x28, 0x00, 0xB5, 0x08, 0x28, 
+	0x01, 0xD0, 0x02, 0xE0, 0x03, 0xD1, 0x1D, 0x4B, 0x0F, 0x4A, 0x0E, 0xE0, 0x18, 0x60, 0x1A, 0x68, 
+	0x1B, 0x4B, 0x0E, 0xD1, 0x12, 0x2B, 0x0C, 0x4B, 0x0E, 0x4A, 0x0D, 0x4A, 0x0E, 0x60, 0x1A, 0x60, 
+	0x1A, 0x4B, 0x0E, 0x4B, 0x0F, 0x4A, 0x0E, 0x4A, 0x0F, 0x60, 0x1A, 0x60, 0x1A, 0x4B, 0x0F, 0x4B, 
+	0x10, 0x4A, 0x0F, 0x4A, 0x10, 0x60, 0x1A, 0x60, 0x1A, 0x4B, 0x10, 0xF7, 0xFD, 0xE0, 0x01, 0xBD, 
+	0x08, 0xFE, 0x7D, 0x00, 0x00, 0x65, 0xA9, 0x20, 0x00, 0x01, 0xF8, 0x20, 0x00, 0x16, 0x50, 0x00, 
+	0x00, 0x67, 0xD9, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 0x6C, 0x99, 0x20, 0x00, 0x00, 0x6C, 0x00, 
+	0x00, 0x6C, 0xD9, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x71, 0xC9, 0x20, 0x00, 0x00, 0x18, 0x00, 
+	0x00, 0x68, 0x25, 0x20, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x67, 0x75, 0x20, 0x00, 0x00, 0x20, 0x4B, 
+	0x10, 0xB5, 0x70, 0x68, 0x1C, 0x4A, 0x10, 0x42, 0x8C, 0x68, 0x11, 0x68, 0x1B, 0xD0, 0x17, 0x4C, 
+	0x0E, 0x68, 0x16, 0xB2, 0xF6, 0xB2, 0xDB, 0x21, 0x0F, 0x25, 0x06, 0x1C, 0x2A, 0x30, 0x01, 0x19, 
+	0x12, 0x43, 0x5A, 0x40, 0x0A, 0x78, 0x12, 0xD0, 0x09, 0x42, 0x82, 0xB2, 0xD2, 0x1C, 0x5A, 0xB2, 
+	0xDB, 0x3B, 0x1D, 0xD8, 0x00, 0x2A, 0x1D, 0x42, 0xB3, 0x1C, 0x13, 0x4B, 0x04, 0xD1, 0xEF, 0xBD, 
+	0x70, 0xB2, 0x18, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x09, 0xF0, 0x00, 
+	0x00, 0xFF, 0xFF, 0x1C, 0x03, 0xB5, 0x00, 0xD0, 0x25, 0x2A, 0x13, 0x2A, 0x10, 0xD8, 0x05, 0x20, 
+	0x01, 0xD0, 0x0A, 0xD1, 0x44, 0x2A, 0x11, 0x2A, 0x40, 0xE0, 0x44, 0x2A, 0x80, 0xD0, 0x10, 0x2A, 
+	0x1A, 0xD0, 0x14, 0xE0, 0x32, 0xD1, 0x3D, 0x3A, 0x1E, 0x1C, 0x02, 0x2A, 0x78, 0x20, 0x00, 0x4A, 
+	0x1D, 0xD8, 0x38, 0x73, 0xD3, 0x20, 0x01, 0x22, 0x0F, 0x4B, 0x1C, 0xE0, 0x31, 0x70, 0x1A, 0x4A, 
+	0x1B, 0x01, 0x83, 0x60, 0x51, 0x43, 0x19, 0xE0, 0x2B, 0x20, 0x01, 0x4A, 0x18, 0x01, 0x83, 0x60, 
+	0x91, 0x43, 0x19, 0xE0, 0x25, 0x20, 0x01, 0xD1, 0x09, 0x28, 0x00, 0x20, 0x96, 0x4A, 0x15, 0x31, 
+	0x08, 0x1C, 0x11, 0x87, 0xC8, 0x00, 0xC0, 0x21, 0x64, 0x32, 0x48, 0xE0, 0x0A, 0x80, 0x11, 0x2B, 
+	0x01, 0x20, 0x00, 0x4A, 0x0F, 0xD1, 0x16, 0x1C, 0x11, 0x48, 0x0F, 0x87, 0xC8, 0x31, 0x08, 0x32, 
+	0x48, 0x49, 0x0E, 0x4A, 0x0A, 0x80, 0x11, 0x61, 0x13, 0x20, 0x01, 0x4A, 0x0C, 0xE0, 0x0A, 0x70, 
+	0x10, 0x20, 0x01, 0x4A, 0x0B, 0x01, 0x5B, 0x18, 0x89, 0x18, 0xC9, 0x60, 0x11, 0x4A, 0x0A, 0x20, 
+	0x00, 0xE0, 0x00, 0x46, 0xC0, 0xBD, 0x00, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x03, 0x1D, 0x20, 
+	0x00, 0x08, 0xF8, 0x20, 0x00, 0x12, 0x48, 0x00, 0x00, 0x13, 0x88, 0xFF, 0xFF, 0xEC, 0x78, 0x20, 
+	0x00, 0x03, 0xF6, 0x20, 0x00, 0x13, 0x64, 0x20, 0x00, 0x0D, 0x34, 0x28, 0x10, 0xB5, 0xF8, 0xE0, 
+	0xB7, 0xD9, 0x00, 0xFA, 0x4C, 0xF7, 0xFF, 0xB6, 0xB6, 0xB6, 0x09, 0xB6, 0x18, 0xB6, 0x0D, 0xB6, 
+	0xB6, 0x28, 0xB6, 0xB6, 0xB6, 0x2E, 0x2E, 0x4B, 0x57, 0x00, 0x47, 0x72, 0x1A, 0x22, 0x01, 0x49, 
+	0x56, 0xE0, 0xA8, 0x68, 0x0A, 0x23, 0x00, 0xDD, 0x02, 0x42, 0x9A, 0x18, 0xD3, 0x68, 0x4B, 0x4A, 
+	0x53, 0x0F, 0xDB, 0xE0, 0x9D, 0x70, 0x13, 0x4C, 0x53, 0x4B, 0x52, 0x4B, 0x53, 0x78, 0x1A, 0xD0, 
+	0x01, 0x2A, 0x00, 0xE0, 0x00, 0x4A, 0x52, 0x7E, 0x90, 0x4A, 0x52, 0x01, 0x80, 0x68, 0x19, 0xFA, 
+	0x88, 0xF7, 0xFF, 0xE0, 0x8D, 0x76, 0xA0, 0x22, 0x1C, 0x4B, 0x4B, 0x4B, 0x4E, 0x56, 0x9A, 0xE0, 
+	0x87, 0x60, 0x1A, 0x69, 0x1B, 0x4B, 0x4D, 0xD1, 0x09, 0x2B, 0x00, 0x21, 0x96, 0x4B, 0x46, 0x32, 
+	0x08, 0x1C, 0x1A, 0x87, 0xD1, 0x00, 0xC9, 0x22, 0x64, 0x33, 0x48, 0xE0, 0x79, 0x80, 0x1A, 0xD1, 
+	0x77, 0x2B, 0x01, 0x49, 0x46, 0x4B, 0x40, 0x32, 0x08, 0x1C, 0x1A, 0x4A, 0x45, 0x87, 0xD1, 0x80, 
+	0x1A, 0x33, 0x48, 0x4B, 0x44, 0xE0, 0x6E, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x3F, 0xD1, 0x07, 0x69, 
+	0x59, 0x48, 0x42, 0x1C, 0x1D, 0x23, 0x00, 0x46, 0x84, 0x1C, 0x1A, 0x4B, 0x40, 0xE0, 0x40, 0x33, 
+	0x04, 0x24, 0x0A, 0x49, 0x3F, 0x7F, 0xDB, 0x22, 0x00, 0x43, 0x5C, 0x1C, 0x10, 0x19, 0x0C, 0x18, 
+	0xA5, 0xE0, 0x06, 0x4D, 0x3C, 0x87, 0xA8, 0x19, 0x5D, 0x3B, 0x01, 0x70, 0x2E, 0x26, 0x00, 0x2B, 
+	0x00, 0x3A, 0x0A, 0x4A, 0x39, 0xD1, 0xF5, 0x21, 0x01, 0x60, 0x0B, 0x60, 0x51, 0x42, 0x49, 0x60, 
+	0x13, 0x49, 0x37, 0x1C, 0x18, 0x78, 0x09, 0x42, 0x64, 0x00, 0x4C, 0x3C, 0x02, 0x00, 0x49, 0xE0, 
+	0x01, 0x18, 0x52, 0x81, 0x08, 0x18, 0xD1, 0x42, 0xA3, 0x3B, 0x02, 0xE7, 0xCE, 0xD1, 0xFA, 0x1D, 
+	0x66, 0x56, 0x3C, 0x32, 0x01, 0xDA, 0x01, 0x2C, 0x28, 0xE0, 0x03, 0x2C, 0x1E, 0xDC, 0x0A, 0x2C, 
+	0x0A, 0xDC, 0x03, 0x35, 0x01, 0xDD, 0x02, 0x21, 0x00, 0xE0, 0x00, 0x28, 0x17, 0x30, 0x01, 0xE0, 
+	0x02, 0xD1, 0xEE, 0x1C, 0x0A, 0x21, 0x00, 0x33, 0x01, 0xE0, 0x06, 0xDC, 0x03, 0x2B, 0x0C, 0x20, 
+	0x00, 0x01, 0x5F, 0xE7, 0xE3, 0x44, 0x67, 0x61, 0x59, 0x4B, 0x18, 0xDD, 0x03, 0x2A, 0x04, 0x31, 
+	0x01, 0x68, 0xD9, 0xE0, 0x01, 0x60, 0xD9, 0x60, 0xD9, 0x21, 0x00, 0x2A, 0x00, 0x4B, 0x13, 0x2D, 
+	0x00, 0xD0, 0x04, 0x69, 0x5A, 0xD0, 0x02, 0x61, 0x5A, 0x32, 0x01, 0x2A, 0x64, 0x69, 0x5A, 0x68, 
+	0xDA, 0xDC, 0x02, 0xDD, 0x05, 0x2A, 0x64, 0x60, 0xDA, 0x22, 0x00, 0x4B, 0x15, 0x61, 0x5A, 0x70, 
+	0x1A, 0x22, 0x0D, 0x46, 0xC0, 0xBD, 0xF8, 0x20, 0x00, 0x0A, 0xAA, 0x20, 0x00, 0x01, 0x70, 0x20, 
+	0x00, 0x16, 0x3D, 0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x09, 0x78, 0x00, 
+	0x00, 0x74, 0x9A, 0x00, 0x00, 0x74, 0x4A, 0x20, 0x00, 0x0D, 0x38, 0x20, 0x00, 0x08, 0xF8, 0x00, 
+	0x00, 0x13, 0x88, 0xFF, 0xFF, 0xEC, 0x78, 0x20, 0x00, 0x00, 0xF5, 0x20, 0x00, 0x13, 0x64, 0x20, 
+	0x00, 0x09, 0xAE, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x01, 0x64, 0x20, 0x00, 0x00, 0xE0, 0x20, 
+	0x00, 0x09, 0x7C, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0x0E, 0xB5, 0x08, 0xB2, 0xDB, 0x88, 0x1B, 0xD0, 
+	0x02, 0x2B, 0x10, 0xD1, 0x13, 0x2B, 0xAF, 0xF7, 0xFD, 0xE0, 0x10, 0x4A, 0x0A, 0xF8, 0x6D, 0x70, 
+	0x13, 0x23, 0x00, 0x68, 0x11, 0x4A, 0x09, 0x68, 0x12, 0x4A, 0x09, 0xD0, 0x02, 0x42, 0x91, 0xF8, 
+	0x38, 0xF7, 0xFD, 0x4A, 0x07, 0xE0, 0x04, 0xE0, 0x01, 0x60, 0x13, 0xF8, 0x5C, 0xF7, 0xFD, 0x46, 
+	0xC0, 0xBD, 0x08, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x00, 0x84, 0x20, 
+	0x00, 0x00, 0x80, 0x20, 0x00, 0x12, 0x98, 0x68, 0x1A, 0x4B, 0x02, 0x60, 0x1A, 0x4B, 0x02, 0x46, 
+	0xC0, 0x47, 0x70, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x84, 0xF7, 0xFF, 0xB5, 0x08, 0xBD, 
+	0x08, 0xFF, 0xF3, 0x4A, 0x07, 0xB5, 0x00, 0x68, 0x10, 0x4B, 0x07, 0x42, 0x88, 0x68, 0x19, 0x68, 
+	0x10, 0xDB, 0x03, 0x1A, 0xC0, 0x68, 0x1B, 0x68, 0x10, 0xE0, 0x03, 0x30, 0x1E, 0x68, 0x1B, 0xBD, 
+	0x00, 0x1A, 0xC0, 0x64, 0xF6, 0xAE, 0xF1, 0x1A, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x84, 
+	0x4B, 0x05, 0xB5, 0x00, 0x32, 0x01, 0x68, 0x1A, 0x68, 0x1A, 0x60, 0x1A, 0xDD, 0x02, 0x2A, 0x1D, 
+	0x3A, 0x1E, 0x68, 0x1A, 0xBD, 0x00, 0x60, 0x1A, 0x20, 0x00, 0x00, 0x84, 0x4A, 0xA7, 0xB5, 0xF7, 
+	0xB2, 0x1B, 0x88, 0x13, 0xD1, 0x00, 0x2B, 0xAE, 0xDC, 0x3B, 0xE1, 0xB2, 0xD1, 0x00, 0x2B, 0x0A, 
+	0xDC, 0x18, 0xE0, 0xED, 0xD1, 0x00, 0x2B, 0x05, 0xDC, 0x08, 0xE0, 0xCE, 0xD1, 0x00, 0x2B, 0x03, 
+	0xDD, 0x00, 0xE0, 0xB7, 0x2B, 0x02, 0xE0, 0xBE, 0xE1, 0xE7, 0xD0, 0x00, 0x2B, 0x07, 0xE0, 0xA4, 
+	0xE0, 0xCC, 0xD1, 0x00, 0xE0, 0xC4, 0xDA, 0x00, 0xD1, 0x00, 0x2B, 0x08, 0x2B, 0x09, 0xE0, 0xF7, 
+	0xE1, 0xDB, 0xD0, 0x00, 0x2B, 0x10, 0xE0, 0xC8, 0xE0, 0x7F, 0xD1, 0x00, 0x2B, 0x0C, 0xDC, 0x0B, 
+	0xE0, 0xD9, 0xD1, 0x00, 0xE0, 0xCF, 0xDA, 0x00, 0xD1, 0x00, 0x2B, 0x0D, 0x2B, 0x0F, 0xE0, 0xDD, 
+	0xE1, 0xCB, 0xD0, 0x00, 0x2B, 0x62, 0xE0, 0x48, 0xE1, 0xC3, 0xD1, 0x00, 0x2B, 0x61, 0xDC, 0x03, 
+	0xE1, 0xC3, 0xD0, 0x00, 0x2B, 0x64, 0xE1, 0xB9, 0xE1, 0xB1, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xA8, 
+	0xE1, 0x9D, 0xE1, 0xBC, 0xD1, 0x00, 0x2B, 0xF4, 0xDC, 0x19, 0xE0, 0xF4, 0xD1, 0x00, 0x2B, 0xEF, 
+	0xDC, 0x09, 0xE1, 0x87, 0xD1, 0x00, 0x2B, 0xBF, 0x2B, 0xEE, 0xE1, 0x8D, 0xE1, 0x7C, 0xD1, 0x00, 
+	0xD0, 0x00, 0x2B, 0xAF, 0xE1, 0x6A, 0xE1, 0xAA, 0xD1, 0x00, 0x2B, 0xF1, 0xDA, 0x00, 0xE0, 0xC8, 
+	0x2B, 0xF2, 0xE0, 0xC2, 0xE0, 0xCB, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xF3, 0xE0, 0xD0, 0xE1, 0x9E, 
+	0xD1, 0x00, 0x2B, 0xF9, 0xDC, 0x0B, 0xE1, 0x26, 0xD1, 0x00, 0x2B, 0xF6, 0xDA, 0x00, 0xE1, 0x06, 
+	0x2B, 0xF7, 0xE0, 0xD9, 0xE1, 0x08, 0xD1, 0x00, 0xD0, 0x00, 0x2B, 0xF8, 0xE1, 0x10, 0xE1, 0x8E, 
+	0xD1, 0x00, 0x2B, 0xFB, 0xDA, 0x00, 0xE1, 0x28, 0x2B, 0xFC, 0xE1, 0x1D, 0xE1, 0x2C, 0xD1, 0x00, 
+	0xD0, 0x00, 0x2B, 0xFD, 0xE1, 0x31, 0xE1, 0x82, 0xFF, 0x5E, 0xF7, 0xFF, 0x60, 0x20, 0x4C, 0x68, 
+	0x2B, 0x00, 0x68, 0x23, 0xF7, 0xFC, 0xD1, 0x01, 0x68, 0x23, 0xFF, 0x99, 0x43, 0x5A, 0x22, 0x06, 
+	0x4C, 0x65, 0x4B, 0x64, 0x25, 0x00, 0x70, 0x1A, 0x4F, 0x64, 0x4E, 0x61, 0x68, 0x39, 0xE0, 0x12, 
+	0x43, 0x51, 0x22, 0x06, 0x46, 0x68, 0x4B, 0x62, 0xF7, 0xFF, 0x18, 0xC9, 0x23, 0x00, 0xF9, 0x3F, 
+	0x5C, 0x1A, 0x46, 0x68, 0x33, 0x01, 0x54, 0xE2, 0xD1, 0xF9, 0x2B, 0x06, 0xFF, 0x50, 0xF7, 0xFF, 
+	0x34, 0x06, 0x35, 0x01, 0x42, 0x9D, 0x68, 0x33, 0xE1, 0x57, 0xDB, 0xE9, 0x4A, 0x54, 0x49, 0x59, 
+	0x68, 0x13, 0x78, 0x0C, 0x43, 0x58, 0x20, 0x06, 0x42, 0x84, 0x23, 0x00, 0x4A, 0x52, 0xDA, 0x0A, 
+	0x4D, 0x50, 0x78, 0x08, 0x5C, 0xC4, 0x18, 0x10, 0x33, 0x01, 0x19, 0x58, 0x2B, 0x08, 0x70, 0x04, 
+	0xE1, 0x43, 0xD1, 0xF6, 0xE1, 0x41, 0x60, 0x13, 0x23, 0x0F, 0x4A, 0x4F, 0x5E, 0x11, 0x20, 0x26, 
+	0x5F, 0x52, 0x25, 0x28, 0x12, 0x12, 0x11, 0x09, 0x40, 0x13, 0x43, 0x99, 0x18, 0xCB, 0x4A, 0x45, 
+	0x4B, 0x42, 0x70, 0x13, 0x23, 0x03, 0x88, 0x1A, 0x1A, 0x9A, 0xB2, 0x12, 0x8D, 0x19, 0x4B, 0x46, 
+	0x54, 0xD1, 0x4B, 0x40, 0x88, 0x1A, 0x4B, 0x3D, 0xB2, 0x12, 0x23, 0x04, 0x4B, 0x42, 0x1A, 0x9A, 
+	0x4B, 0x3C, 0x8C, 0xD9, 0xE1, 0x21, 0x54, 0xD1, 0x8C, 0xDA, 0x4B, 0x40, 0x70, 0x1A, 0x4B, 0x39, 
+	0x4B, 0x3E, 0xE1, 0x1C, 0x78, 0x1A, 0x33, 0x34, 0x70, 0x1A, 0x4B, 0x36, 0x4B, 0x3A, 0xE1, 0x16, 
+	0x4B, 0x34, 0x7B, 0xDA, 0xE1, 0x11, 0x70, 0x1A, 0x78, 0x1A, 0x4B, 0x39, 0x2A, 0x00, 0x4B, 0x31, 
+	0x22, 0x02, 0xD0, 0x02, 0xE1, 0x09, 0x70, 0x1A, 0x70, 0x1A, 0x22, 0x01, 0x4B, 0x35, 0xE1, 0x06, 
+	0x4B, 0x2C, 0x78, 0x1A, 0xE1, 0x01, 0x70, 0x1A, 0x4B, 0x33, 0x88, 0x12, 0x78, 0x19, 0xB2, 0x12, 
+	0x1A, 0x9A, 0x23, 0x0B, 0x54, 0xD1, 0x4B, 0x27, 0x88, 0x1A, 0x4B, 0x24, 0xB2, 0x12, 0x4B, 0x2E, 
+	0x23, 0x0C, 0x78, 0x59, 0x4B, 0x23, 0x1A, 0x9A, 0x4B, 0x20, 0x54, 0xD1, 0x4B, 0x2B, 0x88, 0x1A, 
+	0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0x0D, 0x54, 0xD1, 0x4B, 0x1E, 0x4B, 0x23, 0xE0, 0xE6, 
+	0x4B, 0x1C, 0x8D, 0xDA, 0xE0, 0xE1, 0x70, 0x1A, 0x78, 0x1A, 0x4B, 0x1F, 0x70, 0x1A, 0x4B, 0x19, 
+	0x21, 0x01, 0x4B, 0x16, 0x23, 0xF1, 0x88, 0x1A, 0x1A, 0x9A, 0xB2, 0x12, 0x54, 0xD1, 0x4B, 0x15, 
+	0x88, 0x1A, 0x4B, 0x12, 0xB2, 0x12, 0x4B, 0x18, 0x23, 0xF2, 0x78, 0x59, 0x4B, 0x11, 0x1A, 0x9A, 
+	0x4B, 0x0E, 0x54, 0xD1, 0x4B, 0x1A, 0x88, 0x1A, 0x78, 0x19, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF3, 
+	0x54, 0xD1, 0x4B, 0x0C, 0x88, 0x1A, 0x4B, 0x09, 0xB2, 0x12, 0x4B, 0x16, 0x23, 0xF4, 0x78, 0x19, 
+	0x4B, 0x08, 0x1A, 0x9A, 0x4B, 0x05, 0x54, 0xD1, 0x4B, 0x13, 0x88, 0x1A, 0x78, 0x19, 0xB2, 0x12, 
+	0x1A, 0x9A, 0x23, 0xF5, 0x54, 0xD1, 0x4B, 0x03, 0x46, 0xC0, 0xE0, 0xB0, 0x20, 0x00, 0x00, 0x28, 
+	0x20, 0x00, 0x12, 0x98, 0x50, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x88, 0x20, 0x00, 0x00, 0x84, 
+	0x20, 0x00, 0x09, 0xF0, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x12, 0x48, 
+	0x20, 0x00, 0x01, 0xDD, 0x20, 0x00, 0x01, 0xDF, 0x20, 0x00, 0x03, 0x0A, 0x20, 0x00, 0x09, 0x7C, 
+	0x00, 0x00, 0x63, 0xFF, 0x00, 0x00, 0x73, 0xFF, 0x00, 0x00, 0x7B, 0xFF, 0x4A, 0x49, 0x4B, 0x48, 
+	0x18, 0xD3, 0x78, 0x1B, 0x4B, 0x48, 0x78, 0xDA, 0x4B, 0x48, 0x70, 0x1A, 0x88, 0x1A, 0x49, 0x45, 
+	0xB2, 0x12, 0x4B, 0x43, 0x18, 0xCB, 0x78, 0x1B, 0x23, 0xF7, 0x79, 0x19, 0x4B, 0x42, 0x1A, 0x9A, 
+	0x4B, 0x42, 0x54, 0xD1, 0x4B, 0x3F, 0x88, 0x1A, 0x79, 0x59, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xF8, 
+	0x54, 0xD1, 0x4B, 0x3D, 0x88, 0x1A, 0x4B, 0x3D, 0xB2, 0x12, 0x4B, 0x3A, 0x23, 0xF9, 0x79, 0x99, 
+	0x4B, 0x39, 0x1A, 0x9A, 0x4B, 0x39, 0x54, 0xD1, 0x4B, 0x36, 0x88, 0x1A, 0x79, 0xD9, 0xB2, 0x12, 
+	0x1A, 0x9A, 0x23, 0xFA, 0x54, 0xD1, 0x4B, 0x34, 0x88, 0x1A, 0x4B, 0x34, 0xB2, 0x12, 0x4B, 0x31, 
+	0x23, 0xFB, 0x7A, 0x19, 0x4B, 0x30, 0x1A, 0x9A, 0x4B, 0x30, 0x54, 0xD1, 0x4B, 0x2D, 0x88, 0x1A, 
+	0x7A, 0x59, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xFC, 0x54, 0xD1, 0x4B, 0x2B, 0x88, 0x1A, 0x4B, 0x2B, 
+	0xB2, 0x12, 0x4B, 0x28, 0x23, 0xFD, 0x7A, 0x99, 0x4B, 0x27, 0x1A, 0x9A, 0xE0, 0x45, 0x54, 0xD1, 
+	0x78, 0x1A, 0x4B, 0x27, 0x70, 0x1A, 0x4B, 0x24, 0xFE, 0x60, 0xF7, 0xFC, 0x49, 0x25, 0xE0, 0x3E, 
+	0x23, 0x00, 0x4A, 0x1F, 0x78, 0x10, 0x68, 0x0C, 0x18, 0x20, 0x4D, 0x1F, 0x19, 0x58, 0x5C, 0xC4, 
+	0x70, 0x04, 0x33, 0x01, 0xD1, 0xF5, 0x2B, 0x08, 0x4B, 0x1A, 0xE0, 0x30, 0x4B, 0x1A, 0x7E, 0x1A, 
+	0x4B, 0x1A, 0x70, 0x1A, 0x4B, 0x17, 0x88, 0x1A, 0x7D, 0xD9, 0xB2, 0x12, 0x1A, 0x9A, 0x23, 0xEF, 
+	0x54, 0xD1, 0x4B, 0x15, 0x4B, 0x18, 0xE0, 0x22, 0x4B, 0x13, 0x68, 0x1A, 0xE0, 0x1D, 0x70, 0x1A, 
+	0x4A, 0x0F, 0x49, 0x14, 0x68, 0x0C, 0x23, 0x00, 0x4D, 0x0F, 0x78, 0x10, 0x5C, 0xC4, 0x18, 0x20, 
+	0x33, 0x01, 0x19, 0x58, 0x2B, 0x08, 0x70, 0x04, 0x78, 0x32, 0xAE, 0xF1, 0x1B, 0xF7, 0xFC, 0xD1, 
+	0xF5, 0xE0, 0x0D, 0xFE, 0x2F, 0x78, 0x1A, 0x4B, 0x0E, 0x70, 0x1A, 0x4B, 0x08, 0x4B, 0x0D, 0xE0, 
+	0x08, 0x4B, 0x06, 0x78, 0x9A, 0xE0, 0x03, 0x70, 0x1A, 0x78, 0xDA, 0x4B, 0x0A, 0x70, 0x1A, 0x4B, 
+	0x03, 0x46, 0xC0, 0xBD, 0xF7, 0x20, 0x00, 0x00, 0x2A, 0x20, 0x00, 0x09, 0xAE, 0x50, 0x00, 0x00, 
+	0x0C, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 0x0D, 0x34, 0x20, 0x00, 0x08, 
+	0xF8, 0x00, 0x00, 0x63, 0xFF, 0x20, 0x00, 0x00, 0x35, 0x4C, 0x0F, 0xB5, 0x73, 0x90, 0x00, 0x4D, 
+	0x0F, 0x68, 0x20, 0x91, 0x01, 0x30, 0x1F, 0x21, 0x1E, 0xF7, 0xFE, 0x68, 0x2E, 0x42, 0xB1, 0xFF, 
+	0xAD, 0x68, 0x20, 0xD0, 0xF7, 0x43, 0x50, 0x22, 0x06, 0x46, 0x69, 0x4B, 0x09, 0xF7, 0xFE, 0x18, 
+	0xC0, 0x68, 0x23, 0xFF, 0xAF, 0x60, 0x23, 0x33, 0x01, 0x2B, 0x1D, 0x68, 0x23, 0x68, 0x23, 0xDD, 
+	0x02, 0x60, 0x23, 0x3B, 0x1E, 0x46, 0xC0, 0xBD, 0x73, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 
+	0x84, 0x20, 0x00, 0x09, 0xF0, 0x46, 0x6A, 0xB5, 0x07, 0x70, 0x13, 0x23, 0x0F, 0x70, 0x53, 0x23, 
+	0x00, 0x70, 0xD3, 0x70, 0x93, 0x98, 0x00, 0x71, 0x53, 0xF7, 0xFF, 0x99, 0x01, 0xF7, 0xFC, 0xFF, 
+	0xCD, 0xBD, 0x07, 0xFD, 0xAD, 0x23, 0x06, 0xB5, 0x07, 0x1C, 0x18, 0x90, 0x00, 0x91, 0x01, 0x43, 
+	0x50, 0x1C, 0x1A, 0x49, 0x03, 0x46, 0x69, 0x18, 0x40, 0xFF, 0x82, 0xF7, 0xFE, 0x46, 0xC0, 0xBD, 
+	0x07, 0x20, 0x00, 0x09, 0xF0, 0x4C, 0xBF, 0xB5, 0xF0, 0x69, 0x23, 0x4D, 0xBF, 0x3B, 0x02, 0xB0, 
+	0x8B, 0x41, 0x93, 0x1E, 0x5A, 0x5C, 0xAC, 0x22, 0x23, 0x25, 0x19, 0x42, 0x5B, 0x95, 0x07, 0x40, 
+	0x1D, 0x2C, 0x00, 0x25, 0x00, 0xE0, 0xBE, 0xD1, 0x00, 0xB2, 0xDB, 0x1E, 0x63, 0xE0, 0x00, 0x48, 
+	0xB7, 0x00, 0x9A, 0x1C, 0x13, 0x18, 0xD2, 0x4D, 0xB6, 0x18, 0xAA, 0x00, 0x52, 0x5F, 0x51, 0x25, 
+	0x3C, 0x1E, 0x4D, 0x1E, 0x5A, 0x54, 0xC1, 0x41, 0xA9, 0x2B, 0x00, 0xB2, 0xD2, 0x25, 0x00, 0xD1, 
+	0xF0, 0xDC, 0x00, 0x2C, 0x00, 0x4F, 0xAE, 0xE0, 0xA7, 0x37, 0x40, 0x26, 0x00, 0x24, 0x10, 0xE0, 
+	0x15, 0x5E, 0x20, 0x46, 0x68, 0x1A, 0xC3, 0xB2, 0x1B, 0x9C, 0x05, 0x17, 0xD8, 0x40, 0x43, 0x18, 
+	0x1B, 0xDD, 0x34, 0x42, 0x9C, 0xDD, 0x36, 0x29, 0x00, 0x23, 0x23, 0x4C, 0xA3, 0x35, 0x01, 0x5C, 
+	0xE3, 0x37, 0x0A, 0x36, 0x02, 0xDC, 0x00, 0x42, 0xAB, 0x4C, 0xA2, 0xE0, 0x8D, 0x8D, 0x9A, 0x19, 
+	0xA3, 0x29, 0x00, 0xB2, 0x11, 0xE0, 0xED, 0xDC, 0x00, 0x90, 0x06, 0x1F, 0x38, 0x5F, 0x04, 0x24, 
+	0x00, 0xDC, 0x00, 0x2C, 0x00, 0x4C, 0x9A, 0xE0, 0xA4, 0x8C, 0x10, 0x19, 0xA2, 0x20, 0x18, 0x90, 
+	0x03, 0x20, 0x0C, 0x5E, 0x1C, 0x46, 0x6C, 0x94, 0x04, 0x98, 0x04, 0x5F, 0x04, 0x1A, 0x24, 0x88, 
+	0x9B, 0x4C, 0x95, 0x94, 0x04, 0x5C, 0x20, 0x20, 0x34, 0x98, 0x04, 0x90, 0x05, 0x19, 0x00, 0x17, 
+	0xC4, 0x46, 0x84, 0x40, 0x60, 0x88, 0x90, 0x9C, 0x05, 0x45, 0xA4, 0x90, 0x04, 0x4B, 0x8F, 0xDB, 
+	0xBF, 0x2B, 0x00, 0x5D, 0x5B, 0x4C, 0x87, 0xD0, 0xC6, 0x11, 0x8B, 0x68, 0x61, 0x2B, 0x01, 0xD0, 
+	0x05, 0xE0, 0xF4, 0xD1, 0x00, 0xD1, 0x00, 0x2B, 0x02, 0x4C, 0x82, 0xE0, 0xF7, 0x11, 0x8B, 0x68, 
+	0xA1, 0x2B, 0x01, 0xD0, 0x05, 0xE0, 0xE4, 0xD1, 0x00, 0xD1, 0x00, 0x2B, 0x02, 0x8C, 0x10, 0xE0, 
+	0xF3, 0x90, 0x02, 0x46, 0x6C, 0x20, 0x08, 0x21, 0x05, 0x5F, 0x03, 0x56, 0x51, 0x88, 0x92, 0x9C, 
+	0x06, 0x46, 0x8C, 0xB2, 0xE8, 0x88, 0x23, 0x11, 0x19, 0x94, 0x03, 0x1C, 0x44, 0x46, 0x64, 0x92, 
+	0x04, 0x40, 0x22, 0x22, 0x0F, 0x22, 0x0F, 0x92, 0x06, 0x91, 0x01, 0x43, 0x91, 0x42, 0x4A, 0x21, 
+	0x60, 0x78, 0x3C, 0x99, 0x03, 0x92, 0x03, 0x43, 0x0A, 0x9A, 0x06, 0x99, 0x01, 0x43, 0x0A, 0x94, 
+	0x05, 0xB2, 0x1A, 0x46, 0x94, 0x46, 0x69, 0x92, 0x06, 0x5C, 0x51, 0x22, 0x0C, 0x46, 0x62, 0xAC, 
+	0x08, 0x70, 0x62, 0x70, 0x21, 0x22, 0x10, 0x46, 0x69, 0x46, 0x6A, 0x5C, 0x51, 0x21, 0x08, 0x70, 
+	0xA1, 0x46, 0x69, 0x5C, 0x8A, 0x22, 0x14, 0x70, 0xE2, 0x9A, 0x06, 0x5C, 0x51, 0x2A, 0xFF, 0x71, 
+	0x21, 0x71, 0x63, 0xDC, 0x6D, 0xFB, 0x18, 0xF7, 0xFF, 0xCC, 0x03, 0x1C, 0x02, 0xD0, 0x6E, 0x1C, 
+	0x53, 0xFF, 0x28, 0xF7, 0xFF, 0x23, 0x23, 0x4C, 0x5C, 0x35, 0x01, 0x5C, 0xE3, 0x37, 0x0A, 0x36, 
+	0x02, 0xDD, 0x00, 0x42, 0xAB, 0x4E, 0x5E, 0xE7, 0x71, 0x68, 0x71, 0x4B, 0x5E, 0x1C, 0x48, 0x68, 
+	0x5A, 0xE0, 0xBD, 0xD1, 0x00, 0xD1, 0x00, 0x42, 0x91, 0x1C, 0x53, 0xE0, 0x81, 0x21, 0x40, 0xD0, 
+	0x65, 0xAC, 0x08, 0x32, 0x01, 0x43, 0x0A, 0x23, 0x00, 0x70, 0x22, 0xB2, 0xED, 0x70, 0x63, 0x1C, 
+	0x28, 0x70, 0xE3, 0x70, 0xA3, 0x71, 0x63, 0x71, 0x23, 0xFA, 0xEE, 0xF7, 0xFF, 0x1C, 0x50, 0x1C, 
+	0x02, 0xE0, 0xC6, 0xD1, 0x00, 0x98, 0x08, 0x68, 0x61, 0xFE, 0xFC, 0xF7, 0xFF, 0xE0, 0x4E, 0x68, 
+	0x71, 0xDC, 0x00, 0x29, 0x00, 0x20, 0x05, 0xE7, 0x40, 0x8B, 0x1C, 0x56, 0x18, 0x94, 0x05, 0x46, 
+	0x84, 0x20, 0x14, 0x46, 0x69, 0x88, 0x9B, 0x5E, 0x44, 0x11, 0x21, 0xB2, 0xE8, 0x94, 0x03, 0x1C, 
+	0x44, 0x46, 0x64, 0x93, 0x04, 0x40, 0x23, 0x23, 0x0F, 0x23, 0x0F, 0x46, 0x9C, 0x91, 0x06, 0x43, 
+	0x99, 0x1C, 0x13, 0x99, 0x03, 0x43, 0x11, 0x22, 0x20, 0x91, 0x03, 0x9A, 0x06, 0x43, 0x11, 0x46, 
+	0x61, 0xB2, 0x19, 0x46, 0x8C, 0x46, 0x6A, 0x91, 0x06, 0x5C, 0x8A, 0x21, 0x0C, 0x46, 0x61, 0xAC, 
+	0x08, 0x70, 0x61, 0x70, 0x22, 0x21, 0x10, 0x46, 0x6A, 0x46, 0x69, 0x5C, 0x8A, 0x22, 0x14, 0x70, 
+	0xA2, 0x9A, 0x06, 0x5C, 0x51, 0x21, 0x00, 0x70, 0xE1, 0x2A, 0xFF, 0x71, 0x21, 0x23, 0xFF, 0xDD, 
+	0x91, 0xF7, 0xFF, 0x71, 0x63, 0x1C, 0x02, 0xFA, 0xA9, 0x1C, 0x53, 0xCC, 0x03, 0xF7, 0xFF, 0xD1, 
+	0x90, 0xE7, 0x01, 0xFE, 0x83, 0x24, 0x00, 0x1E, 0xB8, 0x9C, 0x07, 0x5F, 0x00, 0xDD, 0x00, 0x42, 
+	0xA0, 0x1F, 0x3B, 0xE7, 0x0A, 0x80, 0x1A, 0x22, 0x00, 0xB2, 0xED, 0xE6, 0xF6, 0x1D, 0x0B, 0xAC, 
+	0x08, 0x20, 0x40, 0x00, 0x5B, 0x42, 0x40, 0x5A, 0xF2, 0x23, 0x00, 0x31, 0x01, 0x71, 0x62, 0x43, 
+	0x01, 0x70, 0x21, 0x1C, 0x28, 0x70, 0xA3, 0x70, 0x63, 0x71, 0x23, 0x70, 0xE3, 0xFA, 0x84, 0xF7, 
+	0xFF, 0x98, 0x08, 0x1C, 0x02, 0xD0, 0x62, 0x1C, 0x51, 0xF7, 0xFF, 0x68, 0x61, 0x4B, 0x1A, 0xFE, 
+	0x93, 0x4B, 0x1A, 0x68, 0x1A, 0x42, 0x9A, 0x68, 0x1B, 0xF7, 0xFC, 0xD0, 0x01, 0xB0, 0x0B, 0xFC, 
+	0x37, 0x88, 0x93, 0xBD, 0xF0, 0x40, 0x01, 0x20, 0x3F, 0x80, 0x91, 0x18, 0x59, 0x98, 0x03, 0xE7, 
+	0x17, 0x40, 0x19, 0x23, 0x3F, 0x84, 0x11, 0x18, 0x41, 0x23, 0x3F, 0xE7, 0x07, 0x9B, 0x03, 0x40, 
+	0x19, 0x84, 0x11, 0x1A, 0x59, 0x88, 0x93, 0xE7, 0x01, 0x40, 0x01, 0x20, 0x3F, 0x80, 0x91, 0x1A, 
+	0x59, 0x46, 0xC0, 0xE7, 0x05, 0x20, 0x00, 0x08, 0xF8, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 
+	0xEC, 0x20, 0x00, 0x12, 0x9C, 0x20, 0x00, 0x01, 0x20, 0x20, 0x00, 0x12, 0x48, 0x20, 0x00, 0x01, 
+	0x64, 0x20, 0x00, 0x00, 0xE0, 0x20, 0x00, 0x00, 0xCC, 0x20, 0x00, 0x00, 0x84, 0x39, 0x30, 0xAE, 
+	0xF1, 0x1C, 0x20, 0x00, 0x00, 0x80, 0xD0, 0xC4, 0x1C, 0x53, 0x21, 0x40, 0xB2, 0xE8, 0x25, 0x21, 
+	0x32, 0x01, 0x43, 0x0A, 0x23, 0x00, 0x44, 0x6D, 0xAC, 0x08, 0x70, 0x2B, 0x70, 0x22, 0x22, 0x23, 
+	0x21, 0x22, 0x44, 0x6A, 0x25, 0x25, 0xAC, 0x09, 0x44, 0x69, 0x70, 0x13, 0x44, 0x6D, 0x70, 0x23, 
+	0x70, 0x0B, 0xF7, 0xFF, 0x70, 0x2B, 0x1C, 0x02, 0xFA, 0x2B, 0xD0, 0x0E, 0x1C, 0x50, 0x99, 0x09, 
+	0x98, 0x08, 0xFE, 0x3A, 0xF7, 0xFF, 0x68, 0x61, 0xE7, 0xA5, 0xF7, 0xFF, 0x98, 0x08, 0x68, 0x71, 
+	0xFD, 0xFF, 0x68, 0x61, 0xE7, 0x87, 0xFD, 0xFA, 0xF7, 0xFF, 0x98, 0x08, 0xE7, 0x9B, 0xF7, 0xFF, 
+	0x99, 0x09, 0xE7, 0x96, 0xFD, 0xF5, 0x28, 0x50, 0xB5, 0x38, 0x4B, 0x49, 0xD1, 0x05, 0x60, 0x18, 
+	0x20, 0x01, 0xF9, 0xCA, 0xF7, 0xFF, 0x4B, 0x47, 0xE0, 0x8A, 0xD1, 0x01, 0x28, 0x40, 0x70, 0x1C, 
+	0x24, 0x01, 0x2B, 0x00, 0x78, 0x1B, 0xE0, 0x81, 0xD1, 0x00, 0x28, 0x0E, 0x38, 0x41, 0xF7, 0xFE, 
+	0xD8, 0x7E, 0x12, 0x08, 0xFC, 0xDD, 0x32, 0x08, 0x18, 0x08, 0x49, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 
+	0x65, 0x4F, 0x4B, 0x3D, 0x00, 0x78, 0x70, 0x1A, 0x22, 0x01, 0x80, 0x1A, 0x4B, 0x3C, 0x60, 0x13, 
+	0x4A, 0x3C, 0xFB, 0xAE, 0xF7, 0xFC, 0x4C, 0x38, 0xE0, 0x6A, 0x48, 0x3A, 0x4B, 0x39, 0xD1, 0x10, 
+	0x2A, 0xFF, 0x4C, 0x35, 0xE0, 0x04, 0x48, 0x38, 0x4B, 0x36, 0xD1, 0x0A, 0x2A, 0xFF, 0x01, 0x89, 
+	0x4A, 0x37, 0x18, 0x40, 0x78, 0x12, 0xB2, 0xD2, 0x00, 0x52, 0x60, 0x18, 0x70, 0x22, 0xFB, 0x98, 
+	0xF7, 0xFC, 0x01, 0x49, 0xE0, 0x54, 0x00, 0x52, 0x18, 0x52, 0x18, 0x80, 0x25, 0x02, 0x60, 0x18, 
+	0x70, 0x25, 0xFB, 0x8E, 0xF7, 0xFC, 0x4C, 0x28, 0xE0, 0x4A, 0x48, 0x2D, 0x4B, 0x29, 0xD1, 0x08, 
+	0x2A, 0xFF, 0x01, 0x49, 0x4A, 0x2A, 0x18, 0x40, 0x78, 0x92, 0x60, 0x18, 0x70, 0x22, 0xFB, 0x80, 
+	0xF7, 0xFC, 0x01, 0x49, 0xE0, 0x3C, 0x25, 0x01, 0x18, 0x52, 0x70, 0x25, 0x18, 0x80, 0xF7, 0xFC, 
+	0x60, 0x18, 0xE0, 0x33, 0xFB, 0x77, 0x4B, 0x1E, 0x49, 0x1C, 0x2A, 0xFF, 0x48, 0x22, 0xE0, 0x04, 
+	0xD1, 0x0E, 0x4B, 0x1B, 0x49, 0x19, 0x2A, 0xFF, 0x48, 0x20, 0x4A, 0x20, 0xD1, 0x08, 0x00, 0x52, 
+	0x78, 0x12, 0x70, 0x0A, 0xB2, 0xD2, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x1F, 0xFB, 0x63, 0x24, 0x02, 
+	0x00, 0x52, 0x70, 0x0C, 0x18, 0x80, 0xF7, 0xFC, 0x60, 0x18, 0xE0, 0x17, 0xFB, 0x5B, 0x4B, 0x10, 
+	0x48, 0x0E, 0x2A, 0xFF, 0x49, 0x17, 0x4A, 0x15, 0xD1, 0x06, 0x70, 0x02, 0x78, 0x12, 0xF7, 0xFC, 
+	0x60, 0x19, 0xE0, 0x0B, 0xFB, 0x4F, 0x18, 0x8A, 0x24, 0x01, 0x60, 0x1A, 0x70, 0x04, 0xFB, 0x48, 
+	0xF7, 0xFC, 0x4A, 0x10, 0xE0, 0x04, 0x70, 0x13, 0x23, 0x00, 0x70, 0x13, 0x4A, 0x02, 0x46, 0xC0, 
+	0xBD, 0x38, 0x20, 0x00, 0x16, 0x50, 0x20, 0x00, 0x01, 0xE5, 0x20, 0x00, 0x03, 0xF6, 0x20, 0x00, 
+	0x03, 0x08, 0x20, 0x00, 0x0D, 0x34, 0x20, 0x00, 0x0D, 0x3C, 0x20, 0x00, 0x03, 0xF8, 0x20, 0x00, 
+	0x03, 0x0A, 0x20, 0x00, 0x0A, 0xB3, 0x20, 0x00, 0x12, 0x3C, 0x20, 0x00, 0x02, 0x14, 0x20, 0x00, 
+	0x09, 0x7C, 0x20, 0x00, 0x0A, 0xA4, 0x20, 0x00, 0x03, 0x1D, 0x4B, 0x2F, 0xB5, 0x08, 0x2B, 0x0A, 
+	0x88, 0x1B, 0xD8, 0x04, 0xD0, 0x2B, 0xD0, 0x09, 0x2B, 0x01, 0xD1, 0x54, 0x2B, 0x09, 0x2B, 0xA0, 
+	0xE0, 0x0E, 0x2B, 0xB0, 0xD0, 0x2B, 0x2B, 0x5F, 0xD0, 0x45, 0xE0, 0x38, 0xD1, 0x4D, 0x78, 0x11, 
+	0x4A, 0x27, 0x42, 0x11, 0x22, 0x0E, 0x4A, 0x26, 0xD1, 0x47, 0xE0, 0x44, 0x70, 0x13, 0x33, 0x34, 
+	0x4B, 0x25, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x21, 0xD0, 0x3F, 0x2B, 0x01, 0x78, 0x1B, 0x4A, 0x22, 
+	0xD1, 0x05, 0x4B, 0x22, 0x70, 0x13, 0x70, 0x1A, 0x22, 0x00, 0x2B, 0x02, 0xE0, 0x35, 0x4A, 0x1E, 
+	0xD1, 0x33, 0x70, 0x13, 0x23, 0x01, 0x70, 0x13, 0x4A, 0x1D, 0x4B, 0x18, 0xE0, 0x2D, 0x2B, 0x01, 
+	0x78, 0x1B, 0x4B, 0x1B, 0xD1, 0x29, 0x61, 0x1A, 0x22, 0x02, 0x4B, 0x14, 0xE0, 0x25, 0x78, 0x18, 
+	0x4A, 0x19, 0x28, 0x1A, 0x4B, 0x19, 0x78, 0x19, 0xD1, 0x06, 0x78, 0x10, 0x4B, 0x18, 0xF7, 0xFF, 
+	0x78, 0x1A, 0xE0, 0x18, 0xF9, 0x47, 0x78, 0x1A, 0x78, 0x11, 0xFF, 0x04, 0xF7, 0xFF, 0x4B, 0x0B, 
+	0xE0, 0x13, 0x2B, 0x00, 0x78, 0x1B, 0x4B, 0x12, 0xD0, 0x0F, 0x60, 0x1A, 0x22, 0x08, 0xFB, 0x94, 
+	0xF7, 0xFA, 0x4B, 0x0D, 0xE0, 0x09, 0x4B, 0x0B, 0x78, 0x18, 0x4B, 0x04, 0x78, 0x19, 0xF7, 0xFF, 
+	0x78, 0x1A, 0x4B, 0x07, 0xF9, 0x2F, 0xBD, 0x08, 0x60, 0x18, 0x20, 0x00, 0x00, 0x28, 0x50, 0x00, 
+	0x00, 0x0C, 0x20, 0x00, 0x01, 0xE8, 0x20, 0x00, 0x09, 0xAE, 0x20, 0x00, 0x01, 0xDC, 0x20, 0x00, 
+	0x01, 0xDD, 0x20, 0x00, 0x08, 0xF8, 0x50, 0x00, 0x00, 0x0E, 0x50, 0x00, 0x00, 0x0D, 0x50, 0x00, 
+	0x00, 0x10, 0x20, 0x00, 0x16, 0x50, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x19, 0x45, 
+	0xFF, 0xFF, 0x38, 0x28, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/PUBL_120223_v1.c for-diff/drivers/input/touchscreen/mms100_ts/PUBL_120223_v1.c
--- caf/drivers/input/touchscreen/mms100_ts/PUBL_120223_v1.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/PUBL_120223_v1.c	2015-10-08 21:26:20.300845000 +0900
@@ -0,0 +1,139 @@
+static const struct firmware_data melfas_PUBL = {
+	.section_name = "PUBL",
+	.section_version = 0x01,
+	.start_page_addr = 29,
+	.end_page_addr = 30,
+	.compatible_version = 0x45,
+	.length = 2058,
+	.data = {
+	0xAE, 0xF1, 0x1D, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x42, 0x50, 0x4F, 0x02, 0x41, 0x02, 0x00, 
+	0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x0C, 0x48, 0x00, 0x01, 0x01, 0x0A, 0x1E, 0x17, 
+	0x01, 0x01, 0x00, 0x17, 0x00, 0x00, 0x0D, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x01, 0x01, 0x05, 
+	0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0xD0, 0x5A, 0x01, 0x01, 0x00, 0x01, 0x00, 0x5A, 0x5A, 0x00, 
+	0x6E, 0x00, 0x00, 0x00, 0x16, 0x00, 0x4B, 0x32, 0x32, 0x03, 0x07, 0x01, 0x01, 0x00, 0x10, 0x02, 
+	0x58, 0x00, 0x04, 0x03, 0x04, 0x03, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0F, 0x05, 0xFA, 
+	0x24, 0x00, 0x05, 0xF6, 0x0A, 0x0F, 0x0A, 0x1E, 0x06, 0xF6, 0x07, 0x00, 0x00, 0x00, 0x1E, 0x00, 
+	0x00, 0x02, 0x0E, 0x00, 0x06, 0x00, 0x24, 0x00, 0x3C, 0x14, 0x32, 0x00, 0x1E, 0x00, 0x05, 0x14, 
+	0x01, 0x01, 0x02, 0x00, 0x28, 0x00, 0x96, 0x01, 0x09, 0x00, 0x46, 0x00, 0x0A, 0x07, 0x01, 0x03, 
+	0x0A, 0x00, 0x4B, 0x00, 0x60, 0x06, 0x06, 0x80, 0x00, 0x7F, 0xFF, 0x01, 0x01, 0x00, 0x01, 0x02, 
+	0x58, 0x00, 0x04, 0x03, 0x04, 0x03, 0x18, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0F, 0x05, 0xFA, 
+	0x24, 0x00, 0x05, 0xF6, 0x0A, 0x0F, 0x0A, 0x1E, 0x0C, 0xF6, 0x07, 0x00, 0x00, 0x00, 0x1E, 0x00, 
+	0x00, 0x01, 0xCF, 0x00, 0x06, 0x00, 0x24, 0x00, 0x3C, 0x14, 0x32, 0x00, 0x1E, 0x00, 0x14, 0x14, 
+	0x01, 0x01, 0x02, 0x00, 0x28, 0x00, 0x96, 0x01, 0x09, 0x00, 0x46, 0x00, 0x0A, 0x07, 0x01, 0x03, 
+	0x0A, 0x00, 0x4B, 0x00, 0x60, 0x06, 0x06, 0x80, 0x00, 0x7F, 0xFF, 0x0D, 0x0E, 0x00, 0x01, 0x06, 
+	0x0A, 0x0B, 0x0C, 0x02, 0x03, 0x04, 0x05, 0x12, 0x11, 0x10, 0x01, 0x19, 0x15, 0x14, 0x13, 0x1D, 
+	0x1C, 0x1B, 0x1A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x0D, 0x0E, 0x0F, 0x10, 0x07, 0x08, 0x0B, 0x0C, 0x03, 0x04, 0x05, 0x06, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
+	0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
+	0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
+	0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
+	0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
+	0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
+	0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
+	0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
+	0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0xED, 0xEC, 0xAE, 0xF1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x27, 0x00, 0x00, 0x32, 0x30, 0x30, 0x2E, 
+	0x33, 0x34, 0x33, 0x32, 0x39, 0x38, 0x37, 0x37, 0x3B, 0x3A, 0x3A, 0x3A, 0x35, 0x35, 0x35, 0x3C, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x29, 0x25, 0x00, 0x00, 0x2E, 0x2D, 0x2D, 0x2A, 
+	0x34, 0x30, 0x31, 0x30, 0x35, 0x35, 0x34, 0x35, 0x39, 0x36, 0x38, 0x35, 0x35, 0x33, 0x33, 0x39, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x28, 0x26, 0x00, 0x00, 0x2E, 0x2E, 0x2C, 0x2C, 
+	0x32, 0x31, 0x30, 0x2F, 0x35, 0x35, 0x33, 0x32, 0x3F, 0x3B, 0x36, 0x34, 0x32, 0x34, 0x31, 0x3A, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x24, 0x00, 0x00, 0x30, 0x2D, 0x2D, 0x2B, 
+	0x32, 0x30, 0x32, 0x2F, 0x3A, 0x36, 0x35, 0x34, 0x38, 0x42, 0x38, 0x36, 0x35, 0x32, 0x39, 0x36, 
+	0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x26, 0x00, 0x00, 0x2E, 0x2F, 0x2D, 0x2C, 
+	0x32, 0x31, 0x32, 0x31, 0x36, 0x36, 0x35, 0x34, 0x3B, 0x37, 0x37, 0x35, 0x34, 0x33, 0x35, 0x3B, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x25, 0x00, 0x00, 0x30, 0x30, 0x2C, 0x29, 
+	0x34, 0x33, 0x33, 0x35, 0x35, 0x38, 0x35, 0x35, 0x38, 0x3C, 0x38, 0x35, 0x36, 0x34, 0x31, 0x35, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x28, 0x25, 0x00, 0x00, 0x2E, 0x2E, 0x2B, 0x2B, 
+	0x32, 0x31, 0x32, 0x30, 0x35, 0x35, 0x35, 0x33, 0x39, 0x39, 0x36, 0x36, 0x32, 0x32, 0x33, 0x32, 
+	0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x27, 0x25, 0x00, 0x00, 0x32, 0x2D, 0x2D, 0x2A, 
+	0x31, 0x2F, 0x2F, 0x30, 0x35, 0x36, 0x35, 0x33, 0x32, 0x3C, 0x37, 0x38, 0x32, 0x32, 0x33, 0x33, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x28, 0x25, 0x00, 0x00, 0x2F, 0x2F, 0x2D, 0x2A, 
+	0x32, 0x30, 0x30, 0x32, 0x36, 0x35, 0x31, 0x34, 0x33, 0x37, 0x38, 0x35, 0x31, 0x31, 0x32, 0x34, 
+	0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x29, 0x27, 0x00, 0x00, 0x2F, 0x31, 0x2D, 0x2A, 
+	0x33, 0x33, 0x31, 0x30, 0x35, 0x35, 0x35, 0x34, 0x32, 0x37, 0x36, 0x38, 0x33, 0x32, 0x33, 0x31, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x27, 0x00, 0x00, 0x32, 0x2E, 0x2D, 0x2B, 
+	0x35, 0x32, 0x32, 0x30, 0x3B, 0x35, 0x36, 0x35, 0x32, 0x38, 0x3B, 0x36, 0x31, 0x32, 0x35, 0x32, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x29, 0x26, 0x00, 0x00, 0x2E, 0x2F, 0x2C, 0x2B, 
+	0x35, 0x32, 0x32, 0x30, 0x36, 0x35, 0x39, 0x33, 0x33, 0x32, 0x32, 0x37, 0x34, 0x36, 0x35, 0x32, 
+	0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x28, 0x00, 0x00, 0x32, 0x31, 0x2E, 0x2F, 
+	0x39, 0x35, 0x34, 0x33, 0x3A, 0x3B, 0x3A, 0x36, 0x37, 0x36, 0x3C, 0x3A, 0x35, 0x38, 0x37, 0x35, 
+	0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x45, 0xFF, 0xFF, 0xD8, 0x36, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/PUBL_120307_v2.c for-diff/drivers/input/touchscreen/mms100_ts/PUBL_120307_v2.c
--- caf/drivers/input/touchscreen/mms100_ts/PUBL_120307_v2.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/PUBL_120307_v2.c	2015-10-08 21:26:20.320845000 +0900
@@ -0,0 +1,139 @@
+static const struct firmware_data melfas_PUBL = {
+	.section_name = "PUBL",
+	.section_version = 0x03,
+	.start_page_addr = 29,
+	.end_page_addr = 30,
+	.compatible_version = 0x45,
+	.length = 2058,
+	.data = {
+	0xAE, 0xF1, 0x1D, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x42, 0x50, 0x4F, 0x03, 0x41, 0x03, 0x00, 
+	0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x50, 0x0C, 0x48, 0x00, 0x01, 0x01, 0x0A, 0x1E, 0x17, 
+	0x01, 0x01, 0x00, 0x17, 0x00, 0x00, 0x0D, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x01, 0x01, 0x05, 
+	0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0xD0, 0x5A, 0x01, 0x01, 0x00, 0x01, 0x00, 0x5A, 0x5A, 0x00, 
+	0x6E, 0x00, 0x00, 0x00, 0x16, 0x00, 0x4B, 0x32, 0x32, 0x03, 0x07, 0x01, 0x01, 0x00, 0x10, 0x02, 
+	0x58, 0x00, 0x04, 0x03, 0x04, 0x03, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0F, 0x05, 0xFA, 
+	0x24, 0x00, 0x05, 0xF6, 0x0A, 0x0F, 0x0A, 0x1E, 0x06, 0xF6, 0x07, 0x23, 0xE1, 0x00, 0x1E, 0x00, 
+	0x00, 0x02, 0x0E, 0x00, 0x0B, 0x00, 0x21, 0x00, 0x37, 0x14, 0x32, 0x00, 0x1B, 0x00, 0x14, 0x14, 
+	0x01, 0x01, 0x00, 0x00, 0x28, 0x00, 0x96, 0x01, 0x09, 0x00, 0x46, 0x00, 0x0A, 0x07, 0x01, 0x03, 
+	0x0A, 0x00, 0x4B, 0x00, 0x60, 0x06, 0x06, 0x80, 0x00, 0x7F, 0xFF, 0x01, 0x01, 0x00, 0x01, 0x02, 
+	0x58, 0x00, 0x04, 0x03, 0x04, 0x03, 0x18, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0F, 0x05, 0xFA, 
+	0x24, 0x00, 0x05, 0xF6, 0x0A, 0x0F, 0x0A, 0x1E, 0x0C, 0xF6, 0x07, 0x23, 0xE1, 0x00, 0x1E, 0x00, 
+	0x00, 0x01, 0xCF, 0x00, 0x0B, 0x00, 0x21, 0x00, 0x37, 0x14, 0x32, 0x00, 0x1B, 0x00, 0x14, 0x14, 
+	0x01, 0x01, 0x02, 0x00, 0x28, 0x00, 0x96, 0x01, 0x09, 0x00, 0x46, 0x00, 0x0A, 0x07, 0x01, 0x03, 
+	0x0A, 0x00, 0x4B, 0x00, 0x60, 0x06, 0x06, 0x80, 0x00, 0x7F, 0xFF, 0x0D, 0x0E, 0x00, 0x01, 0x06, 
+	0x0A, 0x0B, 0x0C, 0x02, 0x03, 0x04, 0x05, 0x12, 0x11, 0x10, 0x01, 0x19, 0x15, 0x14, 0x13, 0x1D, 
+	0x1C, 0x1B, 0x1A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x0D, 0x0E, 0x0F, 0x10, 0x07, 0x08, 0x0B, 0x0C, 0x03, 0x04, 0x05, 0x06, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
+	0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
+	0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
+	0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
+	0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
+	0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
+	0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
+	0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
+	0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x66, 0xA4, 0xAE, 0xF1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x27, 0x00, 0x00, 0x32, 0x30, 0x30, 0x2E, 
+	0x33, 0x34, 0x33, 0x32, 0x39, 0x38, 0x37, 0x37, 0x3B, 0x3A, 0x3A, 0x3A, 0x35, 0x35, 0x35, 0x3C, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x29, 0x25, 0x00, 0x00, 0x2E, 0x2D, 0x2D, 0x2A, 
+	0x34, 0x30, 0x31, 0x30, 0x35, 0x35, 0x34, 0x35, 0x39, 0x36, 0x38, 0x35, 0x35, 0x33, 0x33, 0x39, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x28, 0x26, 0x00, 0x00, 0x2E, 0x2E, 0x2C, 0x2C, 
+	0x32, 0x31, 0x30, 0x2F, 0x35, 0x35, 0x33, 0x32, 0x3F, 0x3B, 0x36, 0x34, 0x32, 0x34, 0x31, 0x3A, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x24, 0x00, 0x00, 0x30, 0x2D, 0x2D, 0x2B, 
+	0x32, 0x30, 0x32, 0x2F, 0x3A, 0x36, 0x35, 0x34, 0x38, 0x42, 0x38, 0x36, 0x35, 0x32, 0x39, 0x36, 
+	0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x26, 0x00, 0x00, 0x2E, 0x2F, 0x2D, 0x2C, 
+	0x32, 0x31, 0x32, 0x31, 0x36, 0x36, 0x35, 0x34, 0x3B, 0x37, 0x37, 0x35, 0x34, 0x33, 0x35, 0x3B, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x25, 0x00, 0x00, 0x30, 0x30, 0x2C, 0x29, 
+	0x34, 0x33, 0x33, 0x35, 0x35, 0x38, 0x35, 0x35, 0x38, 0x3C, 0x38, 0x35, 0x36, 0x34, 0x31, 0x35, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x28, 0x25, 0x00, 0x00, 0x2E, 0x2E, 0x2B, 0x2B, 
+	0x32, 0x31, 0x32, 0x30, 0x35, 0x35, 0x35, 0x33, 0x39, 0x39, 0x36, 0x36, 0x32, 0x32, 0x33, 0x32, 
+	0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x27, 0x25, 0x00, 0x00, 0x32, 0x2D, 0x2D, 0x2A, 
+	0x31, 0x2F, 0x2F, 0x30, 0x35, 0x36, 0x35, 0x33, 0x32, 0x3C, 0x37, 0x38, 0x32, 0x32, 0x33, 0x33, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x28, 0x25, 0x00, 0x00, 0x2F, 0x2F, 0x2D, 0x2A, 
+	0x32, 0x30, 0x30, 0x32, 0x36, 0x35, 0x31, 0x34, 0x33, 0x37, 0x38, 0x35, 0x31, 0x31, 0x32, 0x34, 
+	0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x29, 0x27, 0x00, 0x00, 0x2F, 0x31, 0x2D, 0x2A, 
+	0x33, 0x33, 0x31, 0x30, 0x35, 0x35, 0x35, 0x34, 0x32, 0x37, 0x36, 0x38, 0x33, 0x32, 0x33, 0x31, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x27, 0x00, 0x00, 0x32, 0x2E, 0x2D, 0x2B, 
+	0x35, 0x32, 0x32, 0x30, 0x3B, 0x35, 0x36, 0x35, 0x32, 0x38, 0x3B, 0x36, 0x31, 0x32, 0x35, 0x32, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x29, 0x26, 0x00, 0x00, 0x2E, 0x2F, 0x2C, 0x2B, 
+	0x35, 0x32, 0x32, 0x30, 0x36, 0x35, 0x39, 0x33, 0x33, 0x32, 0x32, 0x37, 0x34, 0x36, 0x35, 0x32, 
+	0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x28, 0x00, 0x00, 0x32, 0x31, 0x2E, 0x2F, 
+	0x39, 0x35, 0x34, 0x33, 0x3A, 0x3B, 0x3A, 0x36, 0x37, 0x36, 0x3C, 0x3A, 0x35, 0x38, 0x37, 0x35, 
+	0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x45, 0xFF, 0xFF, 0xCE, 0x81, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/PUBL_120317_v5.c for-diff/drivers/input/touchscreen/mms100_ts/PUBL_120317_v5.c
--- caf/drivers/input/touchscreen/mms100_ts/PUBL_120317_v5.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/PUBL_120317_v5.c	2015-10-08 21:26:20.336845000 +0900
@@ -0,0 +1,139 @@
+static const struct firmware_data melfas_PUBL = {
+	.section_name = "PUBL",
+	.section_version = 0x05,
+	.start_page_addr = 29,
+	.end_page_addr = 30,
+	.compatible_version = 0x45,
+	.length = 2058,
+	.data = {
+	0xAE, 0xF1, 0x1D, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x42, 0x50, 0x4F, 0x05, 0x41, 0x05, 0x00, 
+	0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x50, 0x0C, 0x48, 0x00, 0x01, 0x01, 0x0A, 0x1E, 0x17, 
+	0x01, 0x01, 0x00, 0x17, 0x00, 0x00, 0x0D, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x01, 0x01, 0x05, 
+	0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0xD0, 0x55, 0x01, 0x01, 0x00, 0x01, 0x00, 0x55, 0x55, 0x00, 
+	0x6E, 0x00, 0x00, 0x00, 0x16, 0x00, 0x4B, 0x32, 0x32, 0x03, 0x07, 0x01, 0x01, 0x00, 0x10, 0x02, 
+	0x58, 0x00, 0x04, 0x03, 0x04, 0x03, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0F, 0x05, 0xFA, 
+	0x24, 0x00, 0x06, 0xF6, 0x0A, 0x0F, 0x0A, 0x37, 0x06, 0xF6, 0x07, 0x1A, 0xE9, 0x00, 0x1E, 0x00, 
+	0x00, 0x02, 0x0E, 0x00, 0x13, 0x00, 0x21, 0x00, 0x37, 0x14, 0x32, 0x00, 0x1B, 0x00, 0x14, 0x14, 
+	0x01, 0x01, 0x00, 0x00, 0x19, 0x00, 0x46, 0x01, 0x09, 0x00, 0x37, 0x00, 0x0A, 0x07, 0x01, 0x03, 
+	0x0A, 0x00, 0x4B, 0x00, 0x64, 0x04, 0xB0, 0x80, 0x00, 0x7F, 0xFF, 0x01, 0x01, 0x00, 0x01, 0x02, 
+	0x58, 0x00, 0x04, 0x03, 0x04, 0x03, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0F, 0x05, 0xFA, 
+	0x24, 0x00, 0x06, 0xF6, 0x0A, 0x0F, 0x0A, 0x1E, 0x06, 0xF6, 0x07, 0x1A, 0xE9, 0x00, 0x1E, 0x00, 
+	0x00, 0x02, 0x0E, 0x00, 0x13, 0x00, 0x21, 0x00, 0x37, 0x14, 0x32, 0x00, 0x1B, 0x00, 0x14, 0x14, 
+	0x01, 0x01, 0x00, 0x00, 0x19, 0x00, 0x46, 0x01, 0x09, 0x00, 0x1E, 0x00, 0x0A, 0x07, 0x01, 0x03, 
+	0x0A, 0x00, 0x4B, 0x00, 0x64, 0x04, 0xB0, 0x80, 0x00, 0x7F, 0xFF, 0x0D, 0x0E, 0x00, 0x01, 0x06, 
+	0x0A, 0x0B, 0x0C, 0x02, 0x03, 0x04, 0x05, 0x12, 0x11, 0x10, 0x01, 0x19, 0x15, 0x14, 0x13, 0x1D, 
+	0x1C, 0x1B, 0x1A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x0D, 0x0E, 0x0F, 0x10, 0x07, 0x08, 0x0B, 0x0C, 0x03, 0x04, 0x05, 0x06, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
+	0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
+	0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
+	0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
+	0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
+	0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
+	0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
+	0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
+	0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
+	0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x2D, 0xB4, 0xAE, 0xF1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x27, 0x00, 0x00, 0x32, 0x30, 0x30, 0x2E, 
+	0x33, 0x34, 0x33, 0x32, 0x39, 0x38, 0x37, 0x37, 0x3B, 0x3A, 0x3A, 0x3A, 0x35, 0x35, 0x35, 0x3C, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x29, 0x25, 0x00, 0x00, 0x2E, 0x2D, 0x2D, 0x2A, 
+	0x34, 0x30, 0x31, 0x30, 0x35, 0x35, 0x34, 0x35, 0x39, 0x36, 0x38, 0x35, 0x35, 0x33, 0x33, 0x39, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x28, 0x26, 0x00, 0x00, 0x2E, 0x2E, 0x2C, 0x2C, 
+	0x32, 0x31, 0x30, 0x2F, 0x35, 0x35, 0x33, 0x32, 0x3F, 0x3B, 0x36, 0x34, 0x32, 0x34, 0x31, 0x3A, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x24, 0x00, 0x00, 0x30, 0x2D, 0x2D, 0x2B, 
+	0x32, 0x30, 0x32, 0x2F, 0x3A, 0x36, 0x35, 0x34, 0x38, 0x42, 0x38, 0x36, 0x35, 0x32, 0x39, 0x36, 
+	0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x26, 0x00, 0x00, 0x2E, 0x2F, 0x2D, 0x2C, 
+	0x32, 0x31, 0x32, 0x31, 0x36, 0x36, 0x35, 0x34, 0x3B, 0x37, 0x37, 0x35, 0x34, 0x33, 0x35, 0x3B, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x25, 0x00, 0x00, 0x30, 0x30, 0x2C, 0x29, 
+	0x34, 0x33, 0x33, 0x35, 0x35, 0x38, 0x35, 0x35, 0x38, 0x3C, 0x38, 0x35, 0x36, 0x34, 0x31, 0x35, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x28, 0x25, 0x00, 0x00, 0x2E, 0x2E, 0x2B, 0x2B, 
+	0x32, 0x31, 0x32, 0x30, 0x35, 0x35, 0x35, 0x33, 0x39, 0x39, 0x36, 0x36, 0x32, 0x32, 0x33, 0x32, 
+	0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x27, 0x25, 0x00, 0x00, 0x32, 0x2D, 0x2D, 0x2A, 
+	0x31, 0x2F, 0x2F, 0x30, 0x35, 0x36, 0x35, 0x33, 0x32, 0x3C, 0x37, 0x38, 0x32, 0x32, 0x33, 0x33, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x28, 0x25, 0x00, 0x00, 0x2F, 0x2F, 0x2D, 0x2A, 
+	0x32, 0x30, 0x30, 0x32, 0x36, 0x35, 0x31, 0x34, 0x33, 0x37, 0x38, 0x35, 0x31, 0x31, 0x32, 0x34, 
+	0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x29, 0x27, 0x00, 0x00, 0x2F, 0x31, 0x2D, 0x2A, 
+	0x33, 0x33, 0x31, 0x30, 0x35, 0x35, 0x35, 0x34, 0x32, 0x37, 0x36, 0x38, 0x33, 0x32, 0x33, 0x31, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x27, 0x00, 0x00, 0x32, 0x2E, 0x2D, 0x2B, 
+	0x35, 0x32, 0x32, 0x30, 0x3B, 0x35, 0x36, 0x35, 0x32, 0x38, 0x3B, 0x36, 0x31, 0x32, 0x35, 0x32, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x29, 0x26, 0x00, 0x00, 0x2E, 0x2F, 0x2C, 0x2B, 
+	0x35, 0x32, 0x32, 0x30, 0x36, 0x35, 0x39, 0x33, 0x33, 0x32, 0x32, 0x37, 0x34, 0x36, 0x35, 0x32, 
+	0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x28, 0x00, 0x00, 0x32, 0x31, 0x2E, 0x2F, 
+	0x39, 0x35, 0x34, 0x33, 0x3A, 0x3B, 0x3A, 0x36, 0x37, 0x36, 0x3C, 0x3A, 0x35, 0x38, 0x37, 0x35, 
+	0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x45, 0xFF, 0xFF, 0x57, 0x65, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/PUBL_120327_v7.c for-diff/drivers/input/touchscreen/mms100_ts/PUBL_120327_v7.c
--- caf/drivers/input/touchscreen/mms100_ts/PUBL_120327_v7.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/PUBL_120327_v7.c	2015-10-08 21:26:20.352845000 +0900
@@ -0,0 +1,139 @@
+static const struct firmware_data melfas_PUBL = {
+	.section_name = "PUBL",
+	.section_version = 0x07,
+	.start_page_addr = 29,
+	.end_page_addr = 30,
+	.compatible_version = 0x45,
+	.length = 2058,
+	.data = {
+	0xAE, 0xF1, 0x1D, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x42, 0x50, 0x4F, 0x07, 0x41, 0x07, 0x00, 
+	0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x0C, 0x48, 0x00, 0x01, 0x01, 0x0A, 0x1E, 0x17, 
+	0x01, 0x01, 0x00, 0x17, 0x00, 0x00, 0x0D, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x01, 0x01, 0x05, 
+	0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0xD0, 0x55, 0x01, 0x01, 0x00, 0x01, 0x00, 0x55, 0x55, 0x00, 
+	0x6E, 0x00, 0x00, 0x00, 0x16, 0x00, 0x4B, 0x32, 0x32, 0x03, 0x07, 0x01, 0x01, 0x00, 0x10, 0x01, 
+	0xF4, 0x00, 0x02, 0x03, 0x04, 0x03, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0F, 0x05, 0xFA, 
+	0x24, 0x00, 0x06, 0xF6, 0x0A, 0x0F, 0x0A, 0x1E, 0x06, 0xF6, 0x07, 0x1A, 0xE9, 0x00, 0x1E, 0x00, 
+	0x00, 0x02, 0x26, 0x00, 0x12, 0x00, 0x1E, 0x00, 0x3C, 0x14, 0x32, 0x00, 0x1E, 0x00, 0x14, 0x14, 
+	0x01, 0x01, 0x01, 0x00, 0x2D, 0x00, 0x46, 0x01, 0x09, 0x00, 0x37, 0x00, 0x0A, 0x07, 0x01, 0x03, 
+	0x0A, 0x00, 0x4B, 0x00, 0x64, 0x04, 0xB0, 0x80, 0x00, 0x7F, 0xFF, 0x01, 0x01, 0x00, 0x01, 0x02, 
+	0x58, 0x00, 0x04, 0x03, 0x04, 0x03, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0F, 0x05, 0xFA, 
+	0x24, 0x00, 0x06, 0xF6, 0x0A, 0x0F, 0x0A, 0x37, 0x06, 0xF6, 0x07, 0x1A, 0xE9, 0x00, 0x1E, 0x00, 
+	0x00, 0x02, 0x12, 0x00, 0x12, 0x00, 0x1E, 0x00, 0x3C, 0x14, 0x32, 0x00, 0x1E, 0x00, 0x14, 0x14, 
+	0x01, 0x01, 0x02, 0x00, 0x2D, 0x00, 0x46, 0x01, 0x09, 0x00, 0x37, 0x00, 0x0A, 0x07, 0x01, 0x03, 
+	0x0A, 0x00, 0x4B, 0x00, 0x64, 0x04, 0xB0, 0x80, 0x00, 0x7F, 0xFF, 0x0D, 0x0E, 0x00, 0x01, 0x06, 
+	0x0A, 0x0B, 0x0C, 0x02, 0x03, 0x04, 0x05, 0x12, 0x11, 0x10, 0x01, 0x19, 0x15, 0x14, 0x13, 0x1D, 
+	0x1C, 0x1B, 0x1A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x0D, 0x0E, 0x0F, 0x10, 0x07, 0x08, 0x0B, 0x0C, 0x03, 0x04, 0x05, 0x06, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x02, 0x02, 0x03, 0x03, 0x01, 
+	0x01, 0x01, 0x02, 0xFF, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFE, 0xFE, 0xFE, 0xFF, 0x00, 
+	0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
+	0x03, 0x04, 0x04, 0x01, 0x02, 0x02, 0x02, 0x01, 0x00, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0x00, 0xFE, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x02, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x02, 0x00, 
+	0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFE, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x04, 0x04, 0x01, 
+	0x02, 0x02, 0x03, 0x01, 0x00, 0x01, 0x01, 0xFF, 0x00, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0x00, 
+	0xFE, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
+	0x04, 0x00, 0x00, 0x02, 0x03, 0x03, 0x03, 0x01, 0x01, 0x02, 0x02, 0xFF, 0xFF, 0x01, 0x00, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x03, 0x01, 
+	0x00, 0x01, 0x01, 0x00, 0x00, 0xFF, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0xFE, 0xFE, 0xFE, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x02, 
+	0x03, 0x03, 0x03, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0xFF, 0xFE, 
+	0xFE, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x03, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x03, 0x01, 0x01, 0x01, 0x01, 0xFF, 
+	0x00, 0xFF, 0x00, 0xFE, 0xFE, 0xFF, 0xFF, 0x00, 0xFE, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x02, 0x03, 0x03, 0x04, 0x01, 
+	0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 
+	0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
+	0x04, 0x04, 0x05, 0x02, 0x02, 0x02, 0x03, 0x00, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 
+	0xFE, 0xFF, 0xFF, 0x00, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x02, 0x03, 0x03, 0x04, 0x01, 0x01, 0x02, 0x02, 0xFF, 
+	0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0xFE, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x04, 0x04, 0x02, 
+	0x02, 0x02, 0x03, 0x00, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 
+	0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
+	0x05, 0x00, 0x00, 0x02, 0x03, 0x03, 0x04, 0x01, 0x02, 0x02, 0x02, 0xFF, 0xFF, 0x00, 0x01, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x92, 0x2E, 0xAE, 0xF1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x27, 0x00, 0x00, 0x35, 0x36, 0x32, 0x32, 
+	0x3B, 0x37, 0x38, 0x36, 0x3A, 0x3B, 0x3A, 0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x3A, 
+	0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x25, 0x00, 0x00, 0x32, 0x30, 0x30, 0x2F, 
+	0x36, 0x35, 0x33, 0x32, 0x36, 0x34, 0x35, 0x36, 0x36, 0x36, 0x38, 0x36, 0x36, 0x36, 0x37, 0x36, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x24, 0x00, 0x00, 0x30, 0x30, 0x2F, 0x2D, 
+	0x34, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x34, 0x36, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x25, 0x00, 0x00, 0x32, 0x30, 0x2F, 0x2E, 
+	0x35, 0x34, 0x34, 0x32, 0x35, 0x36, 0x34, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 
+	0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x25, 0x00, 0x00, 0x32, 0x30, 0x2F, 0x2E, 
+	0x34, 0x35, 0x34, 0x32, 0x37, 0x35, 0x34, 0x36, 0x36, 0x36, 0x36, 0x36, 0x34, 0x36, 0x36, 0x37, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x25, 0x00, 0x00, 0x30, 0x2F, 0x2E, 0x2D, 
+	0x33, 0x32, 0x32, 0x31, 0x34, 0x35, 0x34, 0x33, 0x36, 0x35, 0x35, 0x35, 0x34, 0x36, 0x36, 0x34, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x26, 0x00, 0x00, 0x31, 0x30, 0x30, 0x2D, 
+	0x33, 0x33, 0x33, 0x31, 0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x25, 0x00, 0x00, 0x30, 0x30, 0x2F, 0x2D, 
+	0x34, 0x34, 0x32, 0x32, 0x35, 0x34, 0x36, 0x33, 0x36, 0x36, 0x34, 0x35, 0x35, 0x34, 0x36, 0x36, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x26, 0x00, 0x00, 0x32, 0x31, 0x2F, 0x2E, 
+	0x35, 0x34, 0x33, 0x33, 0x35, 0x34, 0x36, 0x34, 0x36, 0x36, 0x36, 0x35, 0x35, 0x36, 0x36, 0x36, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x26, 0x00, 0x00, 0x32, 0x30, 0x30, 0x2E, 
+	0x35, 0x34, 0x33, 0x32, 0x35, 0x34, 0x36, 0x34, 0x35, 0x34, 0x36, 0x34, 0x36, 0x35, 0x34, 0x35, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x26, 0x00, 0x00, 0x30, 0x30, 0x2E, 0x2D, 
+	0x33, 0x32, 0x33, 0x32, 0x36, 0x34, 0x36, 0x34, 0x34, 0x34, 0x35, 0x33, 0x36, 0x35, 0x34, 0x35, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x26, 0x00, 0x00, 0x32, 0x30, 0x2F, 0x2D, 
+	0x34, 0x34, 0x34, 0x32, 0x37, 0x36, 0x36, 0x34, 0x36, 0x34, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 
+	0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x30, 0x28, 0x00, 0x00, 0x36, 0x34, 0x32, 0x31, 
+	0x36, 0x39, 0x38, 0x35, 0x3A, 0x39, 0x3B, 0x39, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x3A, 
+	0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x45, 0xFF, 0xFF, 0xA1, 0x17, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/PUBL_120409_v8.c for-diff/drivers/input/touchscreen/mms100_ts/PUBL_120409_v8.c
--- caf/drivers/input/touchscreen/mms100_ts/PUBL_120409_v8.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/PUBL_120409_v8.c	2015-10-08 21:26:20.356845000 +0900
@@ -0,0 +1,139 @@
+static const struct firmware_data melfas_PUBL = {
+	.section_name = "PUBL",
+	.section_version = 0x08,
+	.start_page_addr = 29,
+	.end_page_addr = 30,
+	.compatible_version = 0x46,
+	.length = 2058,
+	.data = {
+	0xAE, 0xF1, 0x1D, 0x30, 0x48, 0x31, 0x4D, 0x36, 0x34, 0x42, 0x50, 0x4F, 0x08, 0x41, 0x08, 0x00, 
+	0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x0C, 0x48, 0x00, 0x01, 0x01, 0x0A, 0x1E, 0x17, 
+	0x01, 0x01, 0x00, 0x17, 0x00, 0x00, 0x0D, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x01, 0x01, 0x05, 
+	0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0xD0, 0x55, 0x01, 0x01, 0x00, 0x01, 0x00, 0x55, 0x55, 0x00, 
+	0x6E, 0x00, 0x00, 0x00, 0x16, 0x00, 0x4B, 0x32, 0x32, 0x03, 0x07, 0x01, 0x01, 0x00, 0x10, 0x01, 
+	0xF4, 0x00, 0x02, 0x03, 0x04, 0x03, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0F, 0x05, 0xFA, 
+	0x24, 0x00, 0x06, 0xF6, 0x0A, 0x0F, 0x0A, 0x0F, 0x04, 0xF6, 0x07, 0x1A, 0xE9, 0x00, 0x1E, 0x00, 
+	0x00, 0x02, 0x26, 0x00, 0x12, 0x00, 0x1E, 0x00, 0x3C, 0x14, 0x32, 0x00, 0x1E, 0x00, 0x0A, 0x05, 
+	0x01, 0x01, 0x01, 0x00, 0x37, 0x00, 0x5A, 0x01, 0x09, 0x00, 0x41, 0x00, 0x0A, 0x07, 0x01, 0x03, 
+	0x0A, 0x00, 0x4B, 0x00, 0x64, 0x04, 0xB0, 0x80, 0x00, 0x7F, 0xFF, 0x01, 0x01, 0x00, 0x01, 0x02, 
+	0x58, 0x00, 0x04, 0x03, 0x04, 0x03, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0F, 0x05, 0xFA, 
+	0x24, 0x00, 0x06, 0xF6, 0x0A, 0x0F, 0x0A, 0x37, 0x06, 0xF6, 0x07, 0x1A, 0xE9, 0x00, 0x1E, 0x00, 
+	0x00, 0x02, 0x12, 0x00, 0x12, 0x00, 0x1E, 0x00, 0x3C, 0x14, 0x32, 0x00, 0x1E, 0x00, 0x14, 0x14, 
+	0x01, 0x01, 0x02, 0x00, 0x2D, 0x00, 0x46, 0x01, 0x09, 0x00, 0x37, 0x00, 0x0A, 0x07, 0x01, 0x03, 
+	0x0A, 0x00, 0x4B, 0x00, 0x64, 0x04, 0xB0, 0x80, 0x00, 0x7F, 0xFF, 0x0D, 0x0E, 0x00, 0x01, 0x06, 
+	0x0A, 0x0B, 0x0C, 0x02, 0x03, 0x04, 0x05, 0x12, 0x11, 0x10, 0x01, 0x19, 0x15, 0x14, 0x13, 0x1D, 
+	0x1C, 0x1B, 0x1A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x0D, 0x0E, 0x0F, 0x10, 0x07, 0x08, 0x0B, 0x0C, 0x03, 0x04, 0x05, 0x06, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x02, 0x02, 0x03, 0x03, 0x01, 
+	0x01, 0x01, 0x02, 0xFF, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFE, 0xFE, 0xFE, 0xFF, 0x00, 
+	0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
+	0x03, 0x04, 0x04, 0x01, 0x02, 0x02, 0x02, 0x01, 0x00, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0x00, 0xFE, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x02, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x02, 0x00, 
+	0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFE, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x04, 0x04, 0x01, 
+	0x02, 0x02, 0x03, 0x01, 0x00, 0x01, 0x01, 0xFF, 0x00, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0x00, 
+	0xFE, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
+	0x04, 0x00, 0x00, 0x02, 0x03, 0x03, 0x03, 0x01, 0x01, 0x02, 0x02, 0xFF, 0xFF, 0x01, 0x00, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x03, 0x01, 
+	0x00, 0x01, 0x01, 0x00, 0x00, 0xFF, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0xFE, 0xFE, 0xFE, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x02, 
+	0x03, 0x03, 0x03, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0xFF, 0xFE, 
+	0xFE, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x03, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x03, 0x01, 0x01, 0x01, 0x01, 0xFF, 
+	0x00, 0xFF, 0x00, 0xFE, 0xFE, 0xFF, 0xFF, 0x00, 0xFE, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x02, 0x03, 0x03, 0x04, 0x01, 
+	0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 
+	0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
+	0x04, 0x04, 0x05, 0x02, 0x02, 0x02, 0x03, 0x00, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 
+	0xFE, 0xFF, 0xFF, 0x00, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x02, 0x03, 0x03, 0x04, 0x01, 0x01, 0x02, 0x02, 0xFF, 
+	0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0xFE, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x04, 0x04, 0x02, 
+	0x02, 0x02, 0x03, 0x00, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 
+	0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
+	0x05, 0x00, 0x00, 0x02, 0x03, 0x03, 0x04, 0x01, 0x02, 0x02, 0x02, 0xFF, 0xFF, 0x00, 0x01, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x98, 0xA5, 0xAE, 0xF1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x27, 0x00, 0x00, 0x35, 0x36, 0x32, 0x32, 
+	0x3B, 0x37, 0x38, 0x36, 0x3A, 0x3B, 0x3A, 0x3C, 0x3A, 0x3C, 0x3A, 0x3A, 0x3A, 0x39, 0x39, 0x3A, 
+	0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x25, 0x00, 0x00, 0x32, 0x30, 0x30, 0x2F, 
+	0x36, 0x35, 0x33, 0x32, 0x36, 0x34, 0x35, 0x36, 0x36, 0x36, 0x38, 0x36, 0x36, 0x36, 0x37, 0x36, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x24, 0x00, 0x00, 0x30, 0x30, 0x2F, 0x2D, 
+	0x34, 0x33, 0x33, 0x33, 0x34, 0x35, 0x34, 0x34, 0x36, 0x36, 0x35, 0x35, 0x35, 0x36, 0x35, 0x36, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x25, 0x00, 0x00, 0x32, 0x30, 0x2F, 0x2E, 
+	0x35, 0x34, 0x34, 0x32, 0x35, 0x36, 0x34, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x35, 
+	0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x25, 0x00, 0x00, 0x32, 0x30, 0x2F, 0x2E, 
+	0x34, 0x35, 0x34, 0x32, 0x37, 0x35, 0x34, 0x36, 0x36, 0x36, 0x36, 0x36, 0x34, 0x36, 0x36, 0x37, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x25, 0x00, 0x00, 0x30, 0x2F, 0x2E, 0x2D, 
+	0x33, 0x32, 0x32, 0x31, 0x34, 0x35, 0x34, 0x33, 0x36, 0x35, 0x35, 0x35, 0x34, 0x36, 0x36, 0x34, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x26, 0x00, 0x00, 0x31, 0x30, 0x30, 0x2D, 
+	0x33, 0x33, 0x33, 0x31, 0x35, 0x36, 0x36, 0x35, 0x36, 0x35, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x25, 0x00, 0x00, 0x30, 0x30, 0x2F, 0x2D, 
+	0x34, 0x34, 0x32, 0x32, 0x35, 0x34, 0x36, 0x33, 0x36, 0x36, 0x34, 0x35, 0x35, 0x34, 0x36, 0x36, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x26, 0x00, 0x00, 0x32, 0x31, 0x2F, 0x2E, 
+	0x35, 0x34, 0x33, 0x33, 0x35, 0x34, 0x36, 0x34, 0x36, 0x36, 0x36, 0x35, 0x35, 0x36, 0x36, 0x36, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x26, 0x00, 0x00, 0x32, 0x30, 0x30, 0x2E, 
+	0x35, 0x34, 0x33, 0x32, 0x35, 0x34, 0x36, 0x34, 0x35, 0x34, 0x36, 0x34, 0x36, 0x35, 0x34, 0x35, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x26, 0x00, 0x00, 0x30, 0x30, 0x2E, 0x2D, 
+	0x33, 0x32, 0x33, 0x32, 0x36, 0x34, 0x36, 0x34, 0x34, 0x34, 0x35, 0x33, 0x36, 0x35, 0x34, 0x35, 
+	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x26, 0x00, 0x00, 0x32, 0x30, 0x2F, 0x2D, 
+	0x34, 0x34, 0x34, 0x32, 0x37, 0x36, 0x36, 0x34, 0x36, 0x34, 0x36, 0x35, 0x36, 0x36, 0x35, 0x36, 
+	0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x30, 0x28, 0x00, 0x00, 0x36, 0x34, 0x32, 0x31, 
+	0x36, 0x39, 0x38, 0x35, 0x3A, 0x39, 0x3B, 0x39, 0x39, 0x3A, 0x3A, 0x39, 0x3A, 0x38, 0x39, 0x3A, 
+	0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0x08, 0x46, 0xFF, 0xFF, 0xDC, 0xA6, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/PUBL_120529_v28.c for-diff/drivers/input/touchscreen/mms100_ts/PUBL_120529_v28.c
--- caf/drivers/input/touchscreen/mms100_ts/PUBL_120529_v28.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/PUBL_120529_v28.c	2015-10-08 21:26:20.376845000 +0900
@@ -0,0 +1,139 @@
+static const struct firmware_data melfas_PUBL = {
+	.section_name = "PUBL",
+	.section_version = 0x25,
+	.start_page_addr = 29,
+	.end_page_addr = 30,
+	.compatible_version = 0x45,
+	.length = 2058,
+	.data = {
+	0xAE, 0xF1, 0x1D, 0x30, 0x48, 0x31, 0x4D, 0x35, 0x34, 0x42, 0x50, 0x4F, 0x25, 0x41, 0x28, 0x00, 
+	0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x37, 0x0C, 0x48, 0x00, 0x01, 0x01, 0x0A, 0x1E, 0x17, 
+	0x01, 0x01, 0x00, 0x17, 0x00, 0x00, 0x0D, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x01, 0x01, 0x05, 
+	0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0xD0, 0x55, 0x01, 0x01, 0x00, 0x01, 0x00, 0x55, 0x55, 0x00, 
+	0x6E, 0x00, 0x00, 0x00, 0x16, 0x00, 0x4B, 0x32, 0x32, 0x03, 0x07, 0x01, 0x01, 0x00, 0x10, 0x01, 
+	0x2C, 0x00, 0x02, 0x03, 0x02, 0x03, 0x18, 0x02, 0x00, 0x00, 0x01, 0x06, 0x00, 0x0F, 0x05, 0xFA, 
+	0x24, 0x00, 0x06, 0xF6, 0x0A, 0x0F, 0x0A, 0x0F, 0x06, 0xF6, 0x0A, 0x1A, 0xE9, 0x00, 0x1E, 0x00, 
+	0x00, 0x03, 0x20, 0x00, 0x2A, 0x00, 0x65, 0x00, 0x46, 0x14, 0x32, 0x00, 0x23, 0x00, 0x32, 0x05, 
+	0x01, 0x01, 0x01, 0x00, 0x46, 0x00, 0x82, 0x01, 0x09, 0x00, 0x64, 0x00, 0x0A, 0x07, 0x01, 0x03, 
+	0x0A, 0x00, 0x4B, 0x00, 0xC8, 0x05, 0xDC, 0x00, 0xC8, 0x09, 0xC4, 0x01, 0x01, 0x00, 0x01, 0x02, 
+	0x58, 0x00, 0x04, 0x03, 0x04, 0x03, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0F, 0x05, 0xFA, 
+	0x24, 0x00, 0x06, 0xF6, 0x0A, 0x0F, 0x0A, 0x37, 0x06, 0xF6, 0x07, 0x1A, 0xE9, 0x00, 0x1E, 0x00, 
+	0x00, 0x02, 0x12, 0x00, 0x2A, 0x00, 0x65, 0x00, 0x46, 0x14, 0x32, 0x00, 0x23, 0x00, 0x14, 0x14, 
+	0x01, 0x01, 0x02, 0x00, 0x2D, 0x00, 0x46, 0x01, 0x09, 0x00, 0x37, 0x00, 0x0A, 0x07, 0x01, 0x03, 
+	0x0A, 0x00, 0x4B, 0x00, 0x64, 0x04, 0xB0, 0x80, 0x00, 0x7F, 0xFF, 0x0D, 0x0E, 0x00, 0x01, 0x06, 
+	0x0A, 0x0B, 0x0C, 0x02, 0x03, 0x04, 0x05, 0x12, 0x11, 0x10, 0x01, 0x19, 0x15, 0x14, 0x13, 0x1D, 
+	0x1C, 0x1B, 0x1A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x0D, 0x0E, 0x0F, 0x10, 0x07, 0x08, 0x0B, 0x0C, 0x03, 0x04, 0x05, 0x06, 0x00, 
+	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x09, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x07, 
+	0x07, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x00, 
+	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
+	0x08, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 
+	0x06, 0x07, 0x07, 0x00, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x09, 0x09, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x08, 0x08, 0x07, 
+	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x09, 0x09, 0x08, 
+	0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x07, 0x07, 0x07, 0x00, 
+	0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 
+	0x09, 0x00, 0x00, 0x08, 0x08, 0x08, 0x09, 0x07, 0x07, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 
+	0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x07, 
+	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07, 0x00, 0x06, 0x06, 0x06, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x09, 0x00, 0x00, 0x08, 
+	0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x06, 0x07, 0x07, 0x07, 0x06, 
+	0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x08, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x08, 0x07, 
+	0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x07, 0x00, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x09, 0x00, 0x00, 0x08, 0x08, 0x08, 0x09, 0x07, 
+	0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x06, 0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x00, 
+	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
+	0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 
+	0x06, 0x06, 0x07, 0x00, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x09, 0x09, 0x00, 0x00, 0x08, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x08, 0x07, 
+	0x07, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x09, 0x09, 0x09, 0x08, 
+	0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x00, 
+	0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 
+	0x09, 0x00, 0x00, 0x08, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x06, 
+	0x06, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0xA5, 0xD8, 0xAE, 0xF1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x29, 0x00, 0x00, 0x35, 0x34, 0x32, 0x2F, 
+	0x38, 0x38, 0x36, 0x36, 0x3D, 0x39, 0x39, 0x3D, 0x3F, 0x3E, 0x3F, 0x39, 0x3A, 0x3B, 0x4C, 0x3A, 
+	0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x26, 0x00, 0x00, 0x30, 0x33, 0x2D, 0x2B, 
+	0x35, 0x33, 0x35, 0x31, 0x37, 0x35, 0x34, 0x38, 0x3A, 0x3A, 0x37, 0x34, 0x36, 0x39, 0x41, 0x35, 
+	0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x26, 0x00, 0x00, 0x35, 0x35, 0x2C, 0x2A, 
+	0x33, 0x33, 0x32, 0x31, 0x35, 0x36, 0x33, 0x37, 0x3C, 0x39, 0x36, 0x34, 0x36, 0x3C, 0x42, 0x36, 
+	0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x25, 0x00, 0x00, 0x36, 0x38, 0x2C, 0x2B, 
+	0x34, 0x32, 0x34, 0x32, 0x36, 0x38, 0x34, 0x36, 0x41, 0x37, 0x36, 0x33, 0x37, 0x40, 0x40, 0x36, 
+	0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x25, 0x00, 0x00, 0x35, 0x38, 0x2C, 0x2A, 
+	0x33, 0x33, 0x31, 0x31, 0x37, 0x38, 0x34, 0x35, 0x41, 0x36, 0x35, 0x34, 0x36, 0x41, 0x41, 0x35, 
+	0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x24, 0x00, 0x00, 0x34, 0x34, 0x2B, 0x2A, 
+	0x32, 0x33, 0x30, 0x30, 0x35, 0x38, 0x34, 0x34, 0x3D, 0x36, 0x34, 0x33, 0x36, 0x43, 0x3E, 0x36, 
+	0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x24, 0x00, 0x00, 0x33, 0x35, 0x2C, 0x2A, 
+	0x32, 0x33, 0x31, 0x31, 0x35, 0x39, 0x34, 0x34, 0x39, 0x39, 0x35, 0x35, 0x36, 0x46, 0x3B, 0x38, 
+	0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x24, 0x00, 0x00, 0x31, 0x31, 0x2D, 0x2A, 
+	0x32, 0x32, 0x30, 0x31, 0x37, 0x38, 0x34, 0x33, 0x3A, 0x39, 0x36, 0x37, 0x36, 0x49, 0x3B, 0x37, 
+	0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x29, 0x25, 0x00, 0x00, 0x31, 0x31, 0x2C, 0x2A, 
+	0x32, 0x32, 0x30, 0x30, 0x33, 0x39, 0x33, 0x33, 0x3E, 0x3A, 0x35, 0x37, 0x3B, 0x4B, 0x3C, 0x36, 
+	0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x29, 0x25, 0x00, 0x00, 0x31, 0x30, 0x2D, 0x2B, 
+	0x32, 0x31, 0x30, 0x30, 0x36, 0x38, 0x34, 0x32, 0x3F, 0x3D, 0x36, 0x38, 0x36, 0x4B, 0x3C, 0x36, 
+	0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x29, 0x26, 0x00, 0x00, 0x31, 0x30, 0x2D, 0x2A, 
+	0x34, 0x31, 0x30, 0x30, 0x35, 0x38, 0x34, 0x33, 0x3F, 0x3E, 0x35, 0x38, 0x36, 0x40, 0x38, 0x38, 
+	0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x25, 0x00, 0x00, 0x33, 0x31, 0x2E, 0x2C, 
+	0x35, 0x32, 0x31, 0x31, 0x36, 0x39, 0x34, 0x34, 0x3D, 0x3B, 0x35, 0x3D, 0x37, 0x3D, 0x39, 0x3A, 
+	0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x28, 0x00, 0x00, 0x36, 0x34, 0x32, 0x2E, 
+	0x39, 0x36, 0x34, 0x36, 0x39, 0x3D, 0x39, 0x38, 0x3F, 0x3F, 0x39, 0x44, 0x3A, 0x3F, 0x3D, 0x42, 
+	0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
+	0xFF, 0xFF, 0xFF, 0xFF, 0x25, 0x45, 0xFF, 0xFF, 0x9B, 0x52, 
+},
+};
diff -urN caf/drivers/input/touchscreen/mms100_ts/melfas_ts.c for-diff/drivers/input/touchscreen/mms100_ts/melfas_ts.c
--- caf/drivers/input/touchscreen/mms100_ts/melfas_ts.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/melfas_ts.c	2015-10-08 21:26:20.420845000 +0900
@@ -0,0 +1,1264 @@
+/* drivers/input/touchscreen/melfas_ts.c
+ *
+ * Copyright (C) 2010 Melfas, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/earlysuspend.h>
+#include <linux/hrtimer.h>
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/mutex.h>
+#include <linux/regulator/consumer.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/board_kttech.h>
+#include <mach/board.h>
+
+#include <mach/gpio.h>
+#include <mach/irqs.h>
+#include <mach/pmic.h>
+
+#include "melfas_ts.h"
+//#include "MMS100A_Config_Updater.h"
+
+
+#define TS_MAX_Z_TOUCH			255
+#define TS_MAX_W_TOUCH		100
+
+
+#define TS_MAX_X_COORD 		720
+#define TS_MAX_Y_COORD 		1280
+
+#define FW_VERSION				0x28
+#define COMP_VERSION			0x41
+
+#define TS_READ_START_ADDR 	0x0F
+#define TS_READ_START_ADDR2 	0x10
+#define TS_READ_VERSION_ADDR	0xF0
+
+#define TS_READ_REGS_LEN 		66
+#define MELFAS_MAX_TOUCH		10
+#define MAX_ESD_RETRY			3
+
+#define DEBUG_PRINT 			0
+
+
+#define SET_DOWNLOAD_BY_GPIO	1
+
+#if SET_DOWNLOAD_BY_GPIO
+#include "MMS100A_Config_Updater.h"
+struct i2c_client *download_client;
+#endif // SET_DOWNLOAD_BY_GPIO
+
+#define I2C_RETRY_CNT		5
+
+#define MELFAS_ON			1
+#define MELFAS_OFF			0
+#define DEFAULT_FPS			50
+#define DEFAULT_MERGE		30
+#define DEFAULT_EDIT		0
+
+#define SUSPEND_MODE 1
+#define RESUME_MODE 0
+
+struct muti_touch_info
+{
+	int strength;
+	int width;	
+	int posX;
+	int posY;
+};
+
+struct melfas_ts_data 
+{
+	uint16_t addr;
+	struct i2c_client *client; 
+	struct input_dev *input_dev;
+	struct melfas_tsi_platform_data *pdata;
+	struct semaphore	msg_sem;
+	struct work_struct  work;
+	uint32_t flags;
+	uint32_t fps;
+	uint32_t merge;
+	uint32_t edit;
+	uint32_t esd_disable_detection;
+	uint32_t esd_test_mode;
+	uint32_t esd_counter;
+	uint32_t esd_enable_counter;
+	unsigned char fw_version;
+	unsigned char core_version;
+	unsigned char priv_version;
+	unsigned char pub_version;
+	int (*power)(int on);
+	struct early_suspend early_suspend;
+
+	struct delayed_work esd_detect_dwork;
+	struct delayed_work enable_esd_detect_dwork;
+};
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void melfas_ts_early_suspend(struct early_suspend *h);
+static void melfas_ts_late_resume(struct early_suspend *h);
+#endif
+
+struct workqueue_struct *esd_detect_dwork_wq = NULL;
+struct workqueue_struct *enable_esd_detect_dwork_wq = NULL;
+
+atomic_t is_suspend = ATOMIC_INIT(0);
+static struct muti_touch_info g_Mtouch_info[MELFAS_MAX_TOUCH];
+
+#ifdef USING_GPIO_FOR_VDD
+#ifdef USING_LVS6
+static struct regulator *qt602240_reg_lvs6;
+#endif
+#else
+static struct regulator *melfas_reg_l9;
+#endif
+
+int melfas_power(int on);
+static int melfas_init_panel(struct melfas_ts_data *ts);
+/* For sys filesystem */
+static unsigned int melfas_debug_point_level = 0;
+
+static void set_fps(struct melfas_ts_data *ts, int val);
+static void set_merge(struct melfas_ts_data *ts, int val);
+static void set_edit(struct melfas_ts_data *ts, int val);
+
+static ssize_t melfas_debug_point_show(struct device *dev, 
+				struct device_attribute *attr, char *buf);
+static ssize_t melfas_debug_point_store(struct device *dev, 
+				struct device_attribute *attr, const char *buf, size_t count);
+static ssize_t melfas_fps_ts_show(struct device *dev,
+                            struct device_attribute *attr, char *buf);
+static ssize_t melfas_fps_ts_store(struct device *dev,
+                struct device_attribute *attr, const char *buf, size_t count);
+static ssize_t melfas_esd_ts_show(struct device *dev,
+							struct device_attribute *attr, char *buf);
+static ssize_t melfas_esd_ts_store(struct device *dev,
+				struct device_attribute *attr, const char *buf, size_t count);
+static ssize_t melfas_merge_ts_show(struct device *dev,
+                            struct device_attribute *attr, char *buf);
+static ssize_t melfas_merge_ts_store(struct device *dev,
+                struct device_attribute *attr, const char *buf, size_t count);
+static ssize_t melfas_edit_ts_show(struct device *dev,
+                            struct device_attribute *attr, char *buf);
+static ssize_t melfas_edit_ts_store(struct device *dev,
+                struct device_attribute *attr, const char *buf, size_t count);
+static ssize_t melfas_version_show(struct device *dev, 
+				struct device_attribute *attr, char *buf);
+
+static DEVICE_ATTR(version, 0444, melfas_version_show, NULL);
+static DEVICE_ATTR(debug_point, 0600, melfas_debug_point_show, melfas_debug_point_store);
+static DEVICE_ATTR(fps_ts, 0600, melfas_fps_ts_show, melfas_fps_ts_store);
+static DEVICE_ATTR(esd_ts, 0600, melfas_esd_ts_show, melfas_esd_ts_store);
+static DEVICE_ATTR(merge_ts, 0600, melfas_merge_ts_show, melfas_merge_ts_store);
+static DEVICE_ATTR(edit_ts, 0600, melfas_edit_ts_show, melfas_edit_ts_store);
+
+static struct attribute *melfas_attrs[] = {
+	&dev_attr_version.attr,
+	&dev_attr_debug_point.attr,
+	&dev_attr_fps_ts.attr,
+	&dev_attr_esd_ts.attr,
+	&dev_attr_merge_ts.attr,
+	&dev_attr_edit_ts.attr,
+	NULL
+};
+
+static const struct attribute_group melfas_attr_group = {
+	.attrs = melfas_attrs,
+};
+
+static int melfas_read_bytes(struct i2c_client *client, uint8_t addr, uint8_t *buf, uint16_t length)
+{
+	struct melfas_ts_data *ts;
+	int ret, i;
+
+	ts = i2c_get_clientdata(client);
+
+	if(atomic_read(&is_suspend) == SUSPEND_MODE)
+		return 0;
+
+	for(i=0; i<I2C_RETRY_CNT; i++){
+		buf[0] = addr;
+		/* Send to read address */
+		ret = i2c_master_send(client, buf, 1);
+		if(ret < 0) {
+			printk("[melfas] I2C master-send failed.(%d)\n", ret);
+		}
+		else {
+		/* Receive to read data */
+		ret = i2c_master_recv(client, buf, length);
+		if(ret != length) {
+			printk("[melfas] I2C master-receive failed.(%d)\n", ret);
+		}
+		else
+			break;
+		}
+	}
+	return ret;
+}
+
+static int melfas_write_bytes(struct i2c_client *client, uint8_t addr, uint8_t *val, uint16_t length)
+{
+	struct melfas_ts_data *ts;
+	int ret, i;
+
+	struct {
+		uint8_t i2c_addr;
+		uint8_t buf[256];
+	} i2c_block_transfer;
+
+	ts = i2c_get_clientdata(client);
+
+	if(atomic_read(&is_suspend) == SUSPEND_MODE)
+		return 0;
+
+	i2c_block_transfer.i2c_addr = addr;
+
+	for(i=0; i < length; i++)
+		i2c_block_transfer.buf[i] = *val++;
+
+	for(i=0; i<I2C_RETRY_CNT; i++){
+		/* Send to write address */
+		ret = i2c_master_send(client, (u8 *)&i2c_block_transfer, length+1);
+		if(ret < 0)
+			printk("[melfas] I2C master-send failed.(%d)\n", ret);
+	}
+	return ret;
+}
+
+static ssize_t melfas_version_show(struct device *dev, 
+				struct device_attribute *attr, char *buf)
+{
+	struct melfas_ts_data *ts = (struct melfas_ts_data *)dev_get_drvdata(dev);
+    int count = 0;
+
+	count += sprintf(buf+count, "F/W version  : %x\n", ts->fw_version);
+	count += sprintf(buf+count, "Core version : %x\n", ts->core_version);
+	count += sprintf(buf+count, "Priv version : %x\n", ts->priv_version);
+	count += sprintf(buf+count, "Pub version  : %x\n", ts->pub_version);
+
+	return count;
+}
+static ssize_t melfas_debug_point_show(struct device *dev, 
+								struct device_attribute *attr, char *buf)
+{
+	int count = 0;
+
+	count += sprintf(buf+count, "1 : DEBUG_LOW_POSITION\n\n");
+	count += sprintf(buf+count, "Debug Point Level : %x\n", melfas_debug_point_level);
+
+	return count;
+}
+
+static ssize_t melfas_debug_point_store(struct device *dev, 
+				struct device_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int level = 0;
+
+	if (sscanf(buf, "%u", &level) != 1) {
+		printk("Invalid values\n");
+		return -EINVAL;
+	}
+
+	switch(level){
+		case 0:
+			level = 0;
+			break;
+		case 1:
+			level = (melfas_debug_point_level | DEBUG_LOW_POSITION);
+			break;
+		default:
+			level = 0;
+			break;
+	}
+
+	melfas_debug_point_level = level;
+
+	return count;
+}
+
+static ssize_t melfas_fps_ts_show(struct device *dev,
+                            struct device_attribute *attr, char *buffer)
+{
+	struct melfas_ts_data *ts = (struct melfas_ts_data *)dev_get_drvdata(dev);
+    int count = 0;
+
+    count += sprintf(buffer+count, "FPS : %d \n", ts->fps);
+	
+    return count;
+}
+
+static ssize_t melfas_fps_ts_store(struct device *dev,
+                struct device_attribute *attr, const char *buffer, size_t count)
+{
+	struct melfas_ts_data *ts = (struct melfas_ts_data *)dev_get_drvdata(dev);
+	int val;
+
+	if(sscanf(buffer, "%d", &val) != 1) {
+		printk("melfas : Invalid value\n");
+		return count;
+	}
+
+	if(atomic_read(&is_suspend) == SUSPEND_MODE)
+		goto out;
+
+	if(val < 30)
+		val = 30;
+	if(val > 150)
+		val = 150;
+
+	set_fps(ts, val);
+
+out:
+	return count;
+}
+
+static ssize_t melfas_esd_ts_show(struct device *dev,
+							struct device_attribute *attr, char *buf)
+{
+	struct melfas_ts_data *ts = (struct melfas_ts_data *)dev_get_drvdata(dev);
+	int count = 0;
+
+	count += sprintf(buf+count, "ESD : %d \nCount : %d\n", 
+							ts->esd_test_mode, ts->esd_enable_counter);
+
+	return count;
+}
+
+static ssize_t melfas_esd_ts_store(struct device *dev,
+				struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct melfas_ts_data *ts = (struct melfas_ts_data *)dev_get_drvdata(dev);
+	int val;
+
+	if(sscanf(buf, "%d", &val) != 1) {
+//		printk("namjja : Invalid value\n");
+		return count;
+	}
+
+	if(atomic_read(&is_suspend) == SUSPEND_MODE)
+		goto out;
+
+	if(val)
+		ts->esd_test_mode = 1;
+out:
+	return count;
+}
+
+static ssize_t melfas_merge_ts_show(struct device *dev,
+                            struct device_attribute *attr, char *buffer)
+{
+	struct melfas_ts_data *ts = (struct melfas_ts_data *)dev_get_drvdata(dev);
+    int count = 0;
+
+    count += sprintf(buffer+count, "FPS : %d \n", ts->merge);
+	
+    return count;
+}
+
+static ssize_t melfas_merge_ts_store(struct device *dev,
+                struct device_attribute *attr, const char *buffer, size_t count)
+{
+	struct melfas_ts_data *ts = (struct melfas_ts_data *)dev_get_drvdata(dev);
+	int val;
+
+	if(sscanf(buffer, "%d", &val) != 1) {
+//		printk("namjja : Invalid value\n");
+		return count;
+	}
+
+	if(atomic_read(&is_suspend) == SUSPEND_MODE)
+		goto out;
+
+	if(val < 10)
+		val = 10;
+	if(val > 60)
+		val = 60;
+
+	set_merge(ts, val);
+
+out:
+	return count;
+}
+
+static ssize_t melfas_edit_ts_show(struct device *dev,
+                            struct device_attribute *attr, char *buffer)
+{
+	struct melfas_ts_data *ts = (struct melfas_ts_data *)dev_get_drvdata(dev);
+	int count = 0;
+
+	count += sprintf(buffer+count, "Edit : %d \n", ts->edit);
+
+	return count;
+}
+
+static ssize_t melfas_edit_ts_store(struct device *dev,
+                struct device_attribute *attr, const char *buffer, size_t count)
+{
+	struct melfas_ts_data *ts = (struct melfas_ts_data *)dev_get_drvdata(dev);
+	int val;
+
+	if(sscanf(buffer, "%d", &val) != 1) {
+//		printk("namjja : Invalid value\n");
+		return count;
+	}
+
+	if(atomic_read(&is_suspend) == SUSPEND_MODE)
+		goto out;
+
+	if(val)
+		val = 1;
+	else
+		val = 0;
+
+	set_edit(ts, val);
+
+out:
+	return count;
+}
+
+/* Disable ESD Detection logic */
+static void disable_esd_detection(struct melfas_ts_data *ts)
+{
+	uint8_t buf_ts[TS_READ_REGS_LEN];
+
+	if(atomic_read(&is_suspend) == SUSPEND_MODE)
+		return;
+
+	buf_ts[0] = TS_CMD_SET_ESD;
+	buf_ts[1] = 0x1;
+
+	if(melfas_write_bytes(ts->client, TS_VNDR_CMDID, buf_ts, 2) < 0) {
+		printk("[melfas] Disable ESD Detection set failed.\n");
+	}
+
+	if(melfas_read_bytes(ts->client, TS_VNDR_CMD_RESULT, buf_ts, 1)< 0) {
+		printk("[melfas] Disable ESD Detection set result read failed.\n");
+	}
+
+	if(buf_ts[0] != 0x1) {
+		printk("[melfas] Disable ESD Detection set failed.(%d)\n", buf_ts[0]);
+		return;
+	}
+	else
+		printk("[melfas] Disable ESD Detection set succeed.(%d)\n", buf_ts[0]);
+
+	ts->esd_disable_detection = 1;
+
+	if(ts->esd_enable_counter < MAX_ESD_RETRY && !delayed_work_pending(&ts->enable_esd_detect_dwork)) {
+		queue_delayed_work(enable_esd_detect_dwork_wq, &ts->enable_esd_detect_dwork, ENABLE_ESD_DETECT_LIMIT_TIME);
+		printk("[melfas] ESD Detection %d ms after enable (%d)\n",
+				ENABLE_ESD_DETECT_LIMIT_TIME, ts->esd_enable_counter);
+	}
+	return;
+}
+
+/* Disable ESD Detection logic */
+static void enable_esd_detection_dworker(struct work_struct *work)
+{
+	struct melfas_ts_data *ts;
+	uint8_t buf_ts[TS_READ_REGS_LEN];
+
+	ts = container_of(work, struct melfas_ts_data, enable_esd_detect_dwork.work);
+
+	if(atomic_read(&is_suspend) == SUSPEND_MODE)
+		return;
+
+	buf_ts[0] = TS_CMD_SET_ESD;
+	buf_ts[1] = 0x0;
+
+	if(melfas_write_bytes(ts->client, TS_VNDR_CMDID, buf_ts, 2) < 0) {
+		printk("[melfas] enable ESD Detection set failed.\n");
+	}
+
+	if(melfas_read_bytes(ts->client, TS_VNDR_CMD_RESULT, buf_ts, 1)< 0) {
+		printk("[melfas] enable ESD Detection set result read failed.\n");
+	}
+
+	if(buf_ts[0] != 0x1) {
+		printk("[melfas] enable ESD Detection set failed.(%d)\n", buf_ts[0]);
+		return;
+	}
+	else
+		printk("[melfas] enable ESD Detection set succeed.(%d)\n", buf_ts[0]);
+
+	ts->esd_enable_counter++;
+	ts->esd_disable_detection = 0;
+	ts->esd_test_mode = 0;
+
+#if 0
+	if(ts->esd_enable_counter > 10)
+		ts->esd_enable_counter = 0;
+#endif
+
+	return;
+}
+
+/* ESD Detection logic */
+static void esd_detect_dworker(struct work_struct *work)
+{
+	struct melfas_ts_data *ts;
+	ts = container_of(work, struct melfas_ts_data, esd_detect_dwork.work);
+
+	ts->esd_counter++;
+
+	/* Recovery TSP */
+	melfas_power(MELFAS_OFF);
+	msleep(500);
+	melfas_power(MELFAS_ON);
+
+	melfas_init_panel(ts);
+	/* Print Debugging information */
+	printk("[melfas] ESD Detection logic. TSP Reset completed.\n");
+
+	/* Limit exceed. Please. Check the TSP Panel */
+	if(ts->esd_counter > ESD_RETRY_COUNTER_LIMIT) {
+		printk("[melfas] ESD Detection limit exceed. ESD Detection disabled.\n");
+		/* Disable ESD Detection */
+		disable_esd_detection(ts);
+
+		ts->esd_counter = 0;
+	}
+
+	return;
+}
+
+#if SET_DOWNLOAD_BY_GPIO
+int melfas_write(uint8_t slave_addr, uint8_t* buffer, int packet_len)
+{
+	int ret;
+	struct i2c_adapter *adap = download_client->adapter;
+	struct i2c_msg msg;
+
+	msg.addr = slave_addr;
+	msg.flags = download_client->flags & I2C_M_TEN;
+	msg.len = packet_len;
+	msg.buf = (char *)buffer;
+
+	ret = i2c_transfer(adap, &msg, 1);
+
+	return (ret == 1);
+}
+
+int melfas_read(uint8_t slave_addr, uint8_t* buffer, int packet_len)
+{
+	struct i2c_adapter *adap = download_client->adapter;
+	struct i2c_msg msg;
+	int ret;
+
+	msg.addr = slave_addr;
+	msg.flags = download_client->flags & I2C_M_TEN;
+	msg.flags |= I2C_M_RD;
+	msg.len = packet_len;
+	msg.buf = buffer;
+
+	ret = i2c_transfer(adap, &msg, 1);
+
+	return (ret == 1);
+}
+#endif
+
+static int read_result(struct melfas_ts_data *ts)
+{
+	uint8_t buf[1];
+
+	if(melfas_read_bytes(ts->client, TS_VNDR_CMD_RESULT, buf, 1) <0)
+	{
+		printk(KERN_ERR "%s: i2c_master_recv() failed\n", __func__);
+	}
+	
+	printk("melfas result %d\n", buf[0]);
+
+	return buf[0] == 1 ? 1 : 0;
+}
+
+static void set_edit(struct melfas_ts_data *ts, int val)
+{
+	uint8_t buf[6];
+
+	buf[0] = TS_CMD_SET_EDIT;
+	buf[1] = (val & 0xff);
+
+	if(melfas_write_bytes(ts->client, TS_VNDR_CMDID, buf, 2) <0)
+	{
+		printk(KERN_ERR "%s: i2c_master_send() failed\n", __func__);
+	}
+
+	if(read_result(ts))
+		ts->edit = (val & 0xff);
+}
+
+static void set_merge(struct melfas_ts_data *ts, int val)
+{
+	uint8_t buf[6];
+
+	buf[0] = TS_CMD_SET_MERGE;
+	buf[1] = (val & 0xff);
+
+	if(melfas_write_bytes(ts->client, TS_VNDR_CMDID, buf, 2) <0)
+	{
+		printk(KERN_ERR "%s: i2c_master_send() failed\n", __func__);
+	}
+
+	if(read_result(ts))
+		ts->merge = (val & 0xff);
+}
+
+static void set_fps(struct melfas_ts_data *ts, int val)
+{
+	uint8_t buf[6];
+
+	buf[0] = TS_CMD_SET_FRAMERATE;
+	buf[1] = (val & 0xff);
+
+	if(melfas_write_bytes(ts->client, TS_VNDR_CMDID, buf, 2) <0)
+	{
+		printk(KERN_ERR "%s: i2c_master_send() failed\n", __func__);
+	}
+
+	if(read_result(ts))
+		ts->fps = (val & 0xff);
+}
+
+static int melfas_init_gpio(void)
+{
+	int rc = 0;
+
+#ifdef USING_GPIO_FOR_VDD
+	 gpio_tlmm_config(GPIO_CFG(TSP_3_3V_EN, 0, GPIO_CFG_OUTPUT, GPIO_CFG_NO_PULL, GPIO_CFG_8MA), GPIO_CFG_ENABLE);
+
+	if (gpio_request(TSP_3_3V_EN, "ts_en") < 0){
+		printk("melfas : ts_en failed\n");
+		goto gpio_failed;
+	}
+//	printk("melfas : power on\n");
+
+	rc = gpio_direction_output(TSP_3_3V_EN, 1);
+#endif
+
+	if(gpio_request(MELFAS_TSP_INT, "ts_int") < 0){
+		printk("melfas : ts_int failed\n");
+		goto gpio_failed;
+	}
+
+	gpio_tlmm_config(GPIO_CFG(MELFAS_TSP_INT, 0, GPIO_CFG_INPUT, GPIO_CFG_PULL_UP, GPIO_CFG_2MA), GPIO_CFG_ENABLE);
+	rc = gpio_direction_input(MELFAS_TSP_INT);
+//	printk("melfas : int gpio en\n");
+	return rc;
+gpio_failed:
+	printk("melfas : GPIO Request failed\n");
+	return -EINVAL;
+}
+
+int melfas_power(int on)
+{
+	int rc = 0;
+	if (on) {
+
+#ifdef USING_GPIO_FOR_VDD
+		gpio_set_value(TSP_3_3V_EN, 1);
+		
+#ifdef USING_LVS6
+		if (qt602240_reg_lvs6)
+			return rc;
+
+		qt602240_reg_lvs6 = regulator_get(NULL, "8921_lvs6");
+
+		rc = regulator_enable(qt602240_reg_lvs6);
+		if (rc) {
+			printk("melfas : Regulator Enable (LVS6) failed! (%d)\n", rc);
+			regulator_put(qt602240_reg_lvs6);
+			return rc;
+		}
+#endif
+#else
+		melfas_reg_l9 =  regulator_get(NULL, "8921_l9");
+
+		rc = regulator_set_voltage(melfas_reg_l9, 3300000, 3300000);
+		if (!rc){
+			rc = regulator_enable(melfas_reg_l9);
+//			printk("namjja : power on\n");
+			msleep(500);
+		}else{
+			printk("namjja : failed power\n");
+		}
+#endif
+
+		msleep(10);
+
+		gpio_tlmm_config(GPIO_CFG(MELFAS_TSP_SCL, 1, GPIO_CFG_OUTPUT, GPIO_CFG_PULL_UP, GPIO_CFG_8MA), GPIO_CFG_ENABLE);
+		gpio_tlmm_config(GPIO_CFG(MELFAS_TSP_SDA, 1, GPIO_CFG_OUTPUT, GPIO_CFG_PULL_UP, GPIO_CFG_8MA), GPIO_CFG_ENABLE);
+
+		return rc;
+	} else {
+#if 1
+		gpio_tlmm_config(GPIO_CFG(MELFAS_TSP_SCL, 0, GPIO_CFG_INPUT, GPIO_CFG_NO_PULL, GPIO_CFG_2MA), GPIO_CFG_ENABLE);
+		gpio_tlmm_config(GPIO_CFG(MELFAS_TSP_SDA, 0, GPIO_CFG_INPUT, GPIO_CFG_NO_PULL, GPIO_CFG_2MA), GPIO_CFG_ENABLE);
+#else
+		gpio_tlmm_config(GPIO_CFG(MELFAS_TSP_SCL, 0, GPIO_CFG_OUTPUT, GPIO_CFG_PULL_DOWN, GPIO_CFG_2MA), GPIO_CFG_ENABLE);
+		gpio_tlmm_config(GPIO_CFG(MELFAS_TSP_SDA, 0, GPIO_CFG_OUTPUT, GPIO_CFG_PULL_DOWN, GPIO_CFG_2MA), GPIO_CFG_ENABLE);
+		msleep(10);
+		gpio_set_value(MELFAS_TSP_SCL, 1);
+		gpio_set_value(MELFAS_TSP_SDA, 1);
+#endif
+		msleep(10);
+#ifdef USING_GPIO_FOR_VDD
+		gpio_set_value(TSP_3_3V_EN, 0);
+
+#ifdef USING_LVS6
+		if (!qt602240_reg_lvs6)
+			return rc;
+
+		rc = regulator_disable(qt602240_reg_lvs6);
+		if(rc) {
+			printk("melfas : Regulator Disable (LVS6) failed! (%d)\n", rc);
+			return rc;
+		}
+
+		regulator_put(qt602240_reg_lvs6);
+		qt602240_reg_lvs6 = NULL;
+#endif
+
+#else
+		rc = regulator_disable(melfas_reg_l9);
+#endif
+		return rc;
+	}
+}
+
+//#ifndef CONFIG_HAS_EARLYSUSPEND
+static int melfas_init_panel(struct melfas_ts_data *ts)
+{
+	char buf = 0x00;
+	int ret;
+	int i;
+
+	for (i = 0; i < MELFAS_MAX_TOUCH ; i++)  /* _SUPPORT_MULTITOUCH_ */
+		g_Mtouch_info[i].strength = 0;	
+
+    input_report_key(ts->input_dev, BTN_TOUCH, 0);
+	input_sync(ts->input_dev);
+
+	ret = i2c_master_send(ts->client, &buf, 1);
+
+	if(ret <0)
+	{
+		printk(KERN_ERR "melfas_ts_probe: i2c_master_send() failed\n [%d]", ret);	
+		return 0;
+	}
+
+	return true;
+}
+//#endif
+
+static void melfas_ts_get_data(struct melfas_ts_data *ts)
+{
+	int ret = 0, i;
+	uint8_t buf[TS_READ_REGS_LEN];
+	int read_num, FingerID;
+	int touchType;
+	int chkpress = 0;
+
+
+#if DEBUG_PRINT
+	printk(KERN_ERR "melfas_ts_work_func\n");
+
+#endif 
+
+	ret = melfas_read_bytes(ts->client, TS_READ_START_ADDR, buf, 1);
+	if(ret < 0)
+	{
+#if DEBUG_PRINT
+		printk(KERN_ERR "melfas_ts_work_func: i2c failed\n");
+		return ;	
+#endif 
+	}
+
+	read_num = buf[0];
+	if(read_num > TS_READ_REGS_LEN)
+		read_num = TS_READ_REGS_LEN;
+	
+	if(read_num>0)
+	{
+		ret = melfas_read_bytes(ts->client, TS_READ_START_ADDR2, buf, read_num);
+		if(ret < 0)
+		{
+#if DEBUG_PRINT
+			printk(KERN_ERR "melfas_ts_work_func: i2c failed\n");
+			return ;	
+#endif 
+		}
+
+		for(i=0; i<read_num; i=i+6)
+		{
+			FingerID = (buf[i] & 0x0F)-1;
+			touchType = (buf[i] & 0x60)>>5;
+
+			if(ts->esd_test_mode || (touchType == TOUCH_TYPE_NONE && FingerID >= MELFAS_MAX_TOUCH)) {
+				printk("melfas : EDS Detection\n");
+				ts->esd_test_mode = 0;
+				if(!delayed_work_pending(&ts->esd_detect_dwork))
+					queue_delayed_work(esd_detect_dwork_wq, &ts->esd_detect_dwork, 0);
+				return;
+			}
+			if(FingerID >= MELFAS_MAX_TOUCH){
+				printk("melfas : FingerID error\n");
+				return;
+			}
+
+			g_Mtouch_info[FingerID].posX= (uint16_t)(buf[i+1] & 0x0F) << 8 | buf[i+2];
+			g_Mtouch_info[FingerID].posY= (uint16_t)(buf[i+1] & 0xF0) << 4 | buf[i+3];	
+			
+			if((buf[i] & 0x80)==0)
+				g_Mtouch_info[FingerID].strength = 0;
+			else
+				g_Mtouch_info[FingerID].strength = buf[i+4];
+			
+			g_Mtouch_info[FingerID].width= buf[i+5];					
+
+		}
+	
+	}
+
+	if (ret < 0)
+	{
+		printk(KERN_ERR "melfas_ts_work_func: i2c failed\n");
+		return ;	
+	}
+	else 
+	{
+
+		for(i=0; i<MELFAS_MAX_TOUCH; i++)
+		{
+			if(g_Mtouch_info[i].strength== 0)
+				continue;
+			
+			input_report_abs(ts->input_dev, ABS_MT_TRACKING_ID, i);
+			input_report_abs(ts->input_dev, ABS_MT_POSITION_X, g_Mtouch_info[i].posX);
+			input_report_abs(ts->input_dev, ABS_MT_POSITION_Y, g_Mtouch_info[i].posY);
+			input_report_abs(ts->input_dev, ABS_MT_TOUCH_MAJOR, g_Mtouch_info[i].strength );
+			input_report_abs(ts->input_dev, ABS_MT_WIDTH_MAJOR, g_Mtouch_info[i].width);      				
+			input_mt_sync(ts->input_dev);          
+			if(g_Mtouch_info[i].strength > 0)
+				chkpress++;
+
+			if (melfas_debug_point_level & DEBUG_LOW_POSITION) {
+				printk("melfas_ts_work_func: Touch ID: %d, State : %d, x: %d, y: %d, z: %d w: %d\n", 
+					i, (g_Mtouch_info[i].strength>0), g_Mtouch_info[i].posX, g_Mtouch_info[i].posY, g_Mtouch_info[i].strength, g_Mtouch_info[i].width);
+			}
+
+#if 0
+			if(g_Mtouch_info[i].strength == 0)
+				g_Mtouch_info[i].strength = -1;
+#endif
+		}
+#if DEBUG_PRINT
+		printk("namjja : release [%d]\n", !!chkpress);
+#endif
+		input_report_key(ts->input_dev, BTN_TOUCH, !!chkpress);
+			
+		input_sync(ts->input_dev);
+	}
+			
+}
+
+static irqreturn_t melfas_ts_irq_handler(int irq, void *handle)
+{
+	struct melfas_ts_data *ts = (struct melfas_ts_data *)handle;
+#if DEBUG_PRINT
+	printk(KERN_ERR "melfas : melfas_ts_irq_handler\n");
+#endif
+
+	if (down_interruptible(&ts->msg_sem)) { 
+		printk("melfas_ts_irq_handler Interrupted "
+					"while waiting for msg_sem!\n");
+	}
+	else {
+		melfas_ts_get_data(ts);
+		up(&ts->msg_sem);
+	}
+	return IRQ_HANDLED;
+}
+
+static int melfas_ftm_mode_probe(struct i2c_client *client)
+{
+	struct input_dev *input_dev;
+	int ret = 0;
+
+	input_dev = input_allocate_device();
+    if (!input_dev)
+    {
+		printk(KERN_ERR "melfas_ftm_mode_probe : Not enough memory\n");
+		ret = -ENOMEM;
+		return ret;
+	} 
+	input_dev->name = "melfas-ts" ;
+
+	input_dev->keybit[BIT_WORD(KEY_MENU)] |= BIT_MASK(KEY_MENU);
+	input_dev->keybit[BIT_WORD(KEY_HOME)] |= BIT_MASK(KEY_HOME);
+	input_dev->keybit[BIT_WORD(KEY_BACK)] |= BIT_MASK(KEY_BACK);		
+	input_dev->keybit[BIT_WORD(KEY_SEARCH)] |= BIT_MASK(KEY_SEARCH);			
+
+
+	__set_bit(BTN_TOUCH, input_dev->keybit);
+	__set_bit(EV_ABS,  input_dev->evbit);
+	__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+
+	input_set_abs_params(input_dev, ABS_MT_POSITION_X, 0, TS_MAX_X_COORD, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_POSITION_Y, 0, TS_MAX_Y_COORD, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, 0, TS_MAX_Z_TOUCH, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_TRACKING_ID, 0, MELFAS_MAX_TOUCH, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_WIDTH_MAJOR, 0, TS_MAX_W_TOUCH, 0, 0);
+	__set_bit(EV_SYN, input_dev->evbit); 
+	__set_bit(EV_KEY, input_dev->evbit);	
+
+
+    ret = input_register_device(input_dev);
+	if(ret)
+		return ret;
+	ret = sysfs_create_group(&client->dev.kobj, &melfas_attr_group);
+
+	return ret;
+}
+
+static int melfas_ts_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+	struct melfas_ts_data *ts;
+	int ret = 0, i; 
+	
+	uint8_t buf[6] = {0,};
+	
+//	printk("namjja : %s\n", __func__);
+#if DEBUG_PRINT
+	printk(KERN_ERR "kim ms : melfas_ts_probe\n");
+#endif
+
+	if(get_kttech_ftm_mode() == FTM_MODE_NO_LCD){
+		printk("melfas : FTM mode\n");
+		ret = melfas_ftm_mode_probe(client);
+		if(ret)
+			printk("melfas : FTM error : %d\n", ret);
+		return 0;
+	}
+	melfas_power(MELFAS_ON);
+	
+	melfas_init_gpio();
+	msleep(500);
+
+    if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
+    {
+        printk(KERN_ERR "melfas_ts_probe: need I2C_FUNC_I2C\n");
+        ret = -ENODEV;
+        goto err_check_functionality_failed;
+    }
+
+    ts = kmalloc(sizeof(struct melfas_ts_data), GFP_KERNEL);
+    if (ts == NULL)
+    {
+        printk(KERN_ERR "melfas_ts_probe: failed to create a state of melfas-ts\n");
+        ret = -ENOMEM;
+        goto err_alloc_data_failed;
+    }
+
+    ts->client = client;
+    i2c_set_clientdata(client, ts);
+
+#if DEBUG_PRINT
+	printk(KERN_ERR "melfas_ts_probe: i2c_master_send() [%d], Add[%d]\n", ret, ts->client->addr);
+#endif
+
+	ts->esd_counter = 0;
+	ts->esd_disable_detection = 0;
+	ts->esd_enable_counter = 0;
+	ts->esd_test_mode = 0;
+
+#if SET_DOWNLOAD_BY_GPIO
+	ret = melfas_read_bytes(ts->client, TS_READ_VERSION_ADDR, buf, 6);
+	printk(KERN_ERR "melfas_ts_probe : F/W version [%x]\n", buf[0]);
+	ts->fw_version = buf[0];
+	printk(KERN_ERR "melfas_ts_probe : H/W version [%x]\n", buf[1]);
+	printk(KERN_ERR "melfas_ts_probe : Comp F/W version [%x]\n", buf[2]);
+	printk(KERN_ERR "melfas_ts_probe : Core F/W version [%x]\n", buf[3]);
+	ts->core_version = buf[3];
+	printk(KERN_ERR "melfas_ts_probe : Priv F/W version [%x]\n", buf[4]);
+	ts->priv_version = buf[4];
+	printk(KERN_ERR "melfas_ts_probe : Pub F/W version [%x]\n", buf[5]);
+	ts->pub_version = buf[5];
+
+	if(ret < 0)
+	{
+		printk(KERN_ERR "melfas_ts_probe : i2c_master_recv [%d]\n", ret);			
+	}
+#if 1
+	download_client = ts->client;
+	if((buf[0] < FW_VERSION && buf[2] == COMP_VERSION) || (buf[0] == 0))
+	{
+		ret = MFS_config_update(0x48);
+		if(ret != 0)
+		{
+			printk(KERN_ERR "SET Download Fail - error code [%d]\n", ret);			
+		}
+	}else{
+		printk("Not Upgrade %x %x\n", buf[0], buf[2]);
+	}	
+#endif
+#endif // SET_DOWNLOAD_BY_GPIO
+	
+	ts->input_dev = input_allocate_device();
+    if (!ts->input_dev)
+    {
+		printk(KERN_ERR "melfas_ts_probe: Not enough memory\n");
+		ret = -ENOMEM;
+		goto err_input_dev_alloc_failed;
+	} 
+
+	set_fps(ts, DEFAULT_FPS);
+	set_merge(ts, DEFAULT_MERGE);
+	set_edit(ts, DEFAULT_EDIT);
+	ts->input_dev->name = "melfas-ts" ;
+
+	//ts->input_dev->evbit[0] = BIT_MASK(EV_ABS) | BIT_MASK(EV_KEY);
+	
+
+	ts->input_dev->keybit[BIT_WORD(KEY_MENU)] |= BIT_MASK(KEY_MENU);
+	ts->input_dev->keybit[BIT_WORD(KEY_HOME)] |= BIT_MASK(KEY_HOME);
+	ts->input_dev->keybit[BIT_WORD(KEY_BACK)] |= BIT_MASK(KEY_BACK);		
+	ts->input_dev->keybit[BIT_WORD(KEY_SEARCH)] |= BIT_MASK(KEY_SEARCH);			
+
+
+	__set_bit(BTN_TOUCH, ts->input_dev->keybit);
+	__set_bit(EV_ABS,  ts->input_dev->evbit);
+	__set_bit(INPUT_PROP_DIRECT, ts->input_dev->propbit);	
+//	ts->input_dev->evbit[0] =  BIT_MASK(EV_SYN) | BIT_MASK(EV_ABS) | BIT_MASK(EV_KEY);	
+
+	input_set_abs_params(ts->input_dev, ABS_MT_POSITION_X, 0, TS_MAX_X_COORD, 0, 0);
+	input_set_abs_params(ts->input_dev, ABS_MT_POSITION_Y, 0, TS_MAX_Y_COORD, 0, 0);
+	input_set_abs_params(ts->input_dev, ABS_MT_TOUCH_MAJOR, 0, TS_MAX_Z_TOUCH, 0, 0);
+	input_set_abs_params(ts->input_dev, ABS_MT_TRACKING_ID, 0, MELFAS_MAX_TOUCH, 0, 0);
+	input_set_abs_params(ts->input_dev, ABS_MT_WIDTH_MAJOR, 0, TS_MAX_W_TOUCH, 0, 0);
+	__set_bit(EV_SYN, ts->input_dev->evbit); 
+	__set_bit(EV_KEY, ts->input_dev->evbit);	
+
+
+    ret = input_register_device(ts->input_dev);
+    if (ret)
+    {
+        printk(KERN_ERR "melfas_ts_probe: Failed to register device\n");
+        ret = -ENOMEM;
+        goto err_input_register_device_failed;
+    }
+
+	INIT_DELAYED_WORK(&ts->esd_detect_dwork, esd_detect_dworker);
+	INIT_DELAYED_WORK(&ts->enable_esd_detect_dwork, enable_esd_detection_dworker);
+	esd_detect_dwork_wq = create_singlethread_workqueue("tsp_esd_detect");
+	if (!esd_detect_dwork_wq)
+		goto err_input_register_device_failed;
+
+	enable_esd_detect_dwork_wq = create_singlethread_workqueue("tsp_enable_esd_detect");
+	if (!enable_esd_detect_dwork_wq)
+		goto err_input_register_device_failed;
+
+    if (ts->client->irq)
+    {
+#if DEBUG_PRINT
+        printk(KERN_ERR "melfas_ts_probe: trying to request irq: %s-%d\n", ts->client->name, ts->client->irq);
+#endif
+       
+//	ret = request_threaded_irq(client->irq, NULL, melfas_ts_irq_handler,IRQF_TRIGGER_FALLING, ts->client->name, ts);
+	sema_init(&ts->msg_sem, 1);
+	ret = request_threaded_irq(client->irq, NULL, melfas_ts_irq_handler,IRQF_TRIGGER_LOW | IRQF_ONESHOT, ts->client->name, ts);
+
+        if (ret > 0)
+        {
+            printk(KERN_ERR "melfas_ts_probe: Can't allocate irq %d, ret %d\n", ts->client->irq, ret);
+            ret = -EBUSY;
+            goto err_request_irq;
+        }
+    }
+
+	for (i = 0; i < MELFAS_MAX_TOUCH ; i++)  /* _SUPPORT_MULTITOUCH_ */
+		g_Mtouch_info[i].strength = 0;	
+
+#if DEBUG_PRINT	
+	printk(KERN_ERR "melfas_ts_probe: succeed to register input device\n");
+#endif
+
+#if CONFIG_HAS_EARLYSUSPEND
+	ts->early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
+	ts->early_suspend.suspend = melfas_ts_early_suspend;
+	ts->early_suspend.resume = melfas_ts_late_resume;
+	register_early_suspend(&ts->early_suspend);
+#endif
+	
+	ret = sysfs_create_group(&client->dev.kobj, &melfas_attr_group);
+	if (ret)
+		goto err_check_functionality_failed;
+		
+#if DEBUG_PRINT
+	printk(KERN_INFO "melfas_ts_probe: Start touchscreen. name: %s, irq: %d\n", ts->client->name, ts->client->irq);
+#endif
+	return 0;
+
+err_request_irq:
+	printk(KERN_ERR "melfas-ts: err_request_irq failed\n");
+	free_irq(client->irq, ts);
+err_input_register_device_failed:
+	printk(KERN_ERR "melfas-ts: err_input_register_device failed\n");
+	input_free_device(ts->input_dev);
+err_input_dev_alloc_failed:
+	printk(KERN_ERR "melfas-ts: err_input_dev_alloc failed\n");
+err_alloc_data_failed:
+	printk(KERN_ERR "melfas-ts: err_alloc_data failed_\n");	
+//err_detect_failed:
+	printk(KERN_ERR "melfas-ts: err_detect failed\n");
+	kfree(ts);
+err_check_functionality_failed:
+	printk(KERN_ERR "melfas-ts: err_check_functionality failed_\n");
+
+	return ret;
+}
+
+static int melfas_ts_remove(struct i2c_client *client)
+{
+	struct melfas_ts_data *ts = i2c_get_clientdata(client);
+
+	unregister_early_suspend(&ts->early_suspend);
+	free_irq(client->irq, ts);
+	//ts->power(false);  // modified
+	sysfs_remove_group(&client->dev.kobj, &melfas_attr_group);
+	melfas_power(MELFAS_OFF);
+	input_unregister_device(ts->input_dev);
+	kfree(ts);
+	return 0;
+}
+
+//#ifndef CONFIG_HAS_EARLYSUSPEND
+static int melfas_ts_suspend(struct i2c_client *client, pm_message_t mesg)
+{
+	int ret;
+	int i;    
+//namjja
+//	struct melfas_ts_data *ts = i2c_get_clientdata(client);
+
+	for (i = 0; i < MELFAS_MAX_TOUCH ; i++)
+	{
+		g_Mtouch_info[i].strength = 0;
+		g_Mtouch_info[i].posX = 0;
+		g_Mtouch_info[i].posY = 0;
+		g_Mtouch_info[i].width = 0;
+	}
+    
+	disable_irq(client->irq);
+
+//namjja
+//	ret = cancel_work_sync(&ts->work);
+//	if (ret) /* if work was pending disable-count is now 2 */
+//		enable_irq(client->irq);
+
+	ret = i2c_smbus_write_byte_data(client, 0x01, 0x00); /* deep sleep */
+	
+	if (ret < 0)
+		printk(KERN_ERR "melfas_ts_suspend: i2c_smbus_write_byte_data failed\n");
+
+	return 0;
+}
+
+static int melfas_ts_resume(struct i2c_client *client)
+{
+	struct melfas_ts_data *ts = i2c_get_clientdata(client);
+
+	melfas_init_panel(ts);
+	enable_irq(client->irq); // scl wave
+
+	return 0;
+}
+//#endif
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void melfas_ts_early_suspend(struct early_suspend *h)
+{
+	struct melfas_ts_data *ts;
+	ts = container_of(h, struct melfas_ts_data, early_suspend);
+	atomic_set(&is_suspend, SUSPEND_MODE);
+
+	/* Cancel Workqueue */
+	if(delayed_work_pending(&ts->enable_esd_detect_dwork))
+		cancel_delayed_work_sync(&ts->enable_esd_detect_dwork);
+
+	if(delayed_work_pending(&ts->esd_detect_dwork))
+		cancel_delayed_work_sync(&ts->esd_detect_dwork);
+
+	melfas_ts_suspend(ts->client, PMSG_SUSPEND);
+	melfas_power(MELFAS_OFF);
+	msleep(50);
+	input_report_key(ts->input_dev, BTN_TOUCH, 0);
+	input_sync(ts->input_dev);
+}
+
+static void melfas_ts_late_resume(struct early_suspend *h)
+{
+	struct melfas_ts_data *ts;
+	melfas_power(MELFAS_ON);
+	msleep(50);
+	ts = container_of(h, struct melfas_ts_data, early_suspend);
+	melfas_ts_resume(ts->client);
+	atomic_set(&is_suspend, RESUME_MODE);
+	if(ts->esd_disable_detection == 1)
+		disable_esd_detection(ts);
+}
+#endif
+
+static const struct i2c_device_id melfas_ts_id[] =
+{
+    { "melfas-ts", 0 },
+    { }
+};
+
+static struct i2c_driver melfas_ts_driver =
+{
+    .driver = {
+    .name = "melfas-ts",
+    },
+    .id_table = melfas_ts_id,
+    .probe = melfas_ts_probe,
+    .remove = __devexit_p(melfas_ts_remove),
+#ifndef CONFIG_HAS_EARLYSUSPEND
+	.suspend		= melfas_ts_suspend,
+	.resume		= melfas_ts_resume,
+#endif
+};
+
+static int __devinit melfas_ts_init(void)
+{
+	return i2c_add_driver(&melfas_ts_driver);
+}
+
+static void __exit melfas_ts_exit(void)
+{
+	i2c_del_driver(&melfas_ts_driver);
+}
+
+MODULE_DESCRIPTION("Driver for Melfas MTSI Touchscreen Controller");
+MODULE_AUTHOR("MinSang, Kim <kimms@melfas.com>");
+MODULE_VERSION("0.1");
+MODULE_LICENSE("GPL");
+
+module_init(melfas_ts_init);
+module_exit(melfas_ts_exit);
diff -urN caf/drivers/input/touchscreen/mms100_ts/melfas_ts.h for-diff/drivers/input/touchscreen/mms100_ts/melfas_ts.h
--- caf/drivers/input/touchscreen/mms100_ts/melfas_ts.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/input/touchscreen/mms100_ts/melfas_ts.h	2015-10-08 21:26:28.112845000 +0900
@@ -0,0 +1,50 @@
+/*
+ * include/linux/melfas_ts.h - platform data structure for MCS Series sensor
+ *
+ * Copyright (C) 2010 Melfas, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _LINUX_MELFAS_TS_H
+#define _LINUX_MELFAS_TS_H
+
+#define MELFAS_TS_NAME "melfas-ts"
+
+#define USING_GPIO_FOR_VDD 1
+//#define USING_LVS6 1
+
+struct melfas_tsi_platform_data {
+	int x_size;
+	int y_size;
+	int  version;
+	int (*power)(int on); // modified
+};
+
+#define TOUCH_TYPE_NONE			0
+#define TOUCH_TYPE_SCREEN		1
+#define TOUCH_TYPE_KEY			2
+
+#define TS_CMD_SET_FRAMERATE    0x10
+#define TS_CMD_SET_MERGE	    0x11
+#define TS_CMD_SET_EDIT			0x12
+#define TS_CMD_SET_ESD			0x13
+#define TS_CMD_SET_CORRPOS_X    0x40
+#define TS_CMD_SET_CORRPOS_Y    0x80
+
+#define TS_VNDR_CMDID           0xB0
+#define TS_VNDR_CMD_RESULT      0xBF
+
+#define DEBUG_LOW_POSITION       (0x1 << 0)
+
+#define ENABLE_ESD_DETECT_LIMIT_TIME	1000
+#define ESD_RETRY_COUNTER_LIMIT			3
+#endif /* _LINUX_MELFAS_TS_H */
diff -urN caf/drivers/leds/leds-pm8xxx.c for-diff/drivers/leds/leds-pm8xxx.c
--- caf/drivers/leds/leds-pm8xxx.c	2015-09-08 23:43:50.347167080 +0900
+++ for-diff/drivers/leds/leds-pm8xxx.c	2015-09-13 14:02:59.821921000 +0900
@@ -772,6 +772,34 @@
 	return rc;
 }
 
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* implement camera flash led by PMIC */
+#ifdef CONFIG_KTTECH_FLASH_PMIC
+struct pm8xxx_led_data *led_kp;
+
+//int pm8xxx_led_kp_set(enum led_brightness value)
+int pm8xxx_led_kp_set(int value)
+{ 
+	int rc;
+	u8 level;
+	//printk("[HJM] %s, led_brightness value:%d \n", __func__, value);
+
+	level = (value << PM8XXX_DRV_KEYPAD_BL_SHIFT) & PM8XXX_DRV_KEYPAD_BL_MASK;
+
+	led_kp->reg &= ~PM8XXX_DRV_KEYPAD_BL_MASK;
+	led_kp->reg |= level;
+
+	rc = pm8xxx_writeb(led_kp->dev->parent, SSBI_REG_ADDR_DRV_KEYPAD, led_kp->reg);
+
+	if (rc < 0) {
+		dev_err(led_kp->cdev.dev, "can't set keypad backlight level rc=%d\n", rc);
+	}
+	//printk("[HJM] %s, return rc:%d; \n", __func__, rc);
+	return rc;
+}
+EXPORT_SYMBOL(pm8xxx_led_kp_set);
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 
 static int __devinit pm8xxx_led_probe(struct platform_device *pdev)
 {
@@ -841,6 +869,14 @@
 			goto fail_id_check;
 		}
 
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* implement camera flash led by PMIC */
+#ifdef CONFIG_KTTECH_FLASH_PMIC
+		if (led_dat->id == PM8XXX_ID_LED_KB_LIGHT)
+			led_kp = led_dat;
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
 		led_dat->cdev.name		= curr_led->name;
 		led_dat->cdev.default_trigger   = curr_led->default_trigger;
 		led_dat->cdev.brightness_set    = pm8xxx_led_set;
diff -urN caf/drivers/media/video/msm/actuators/msm_actuator.c for-diff/drivers/media/video/msm/actuators/msm_actuator.c
--- caf/drivers/media/video/msm/actuators/msm_actuator.c	2015-09-08 23:43:50.479167082 +0900
+++ for-diff/drivers/media/video/msm/actuators/msm_actuator.c	2015-09-13 14:02:59.949921000 +0900
@@ -70,7 +70,8 @@
 	uint16_t value = 0;
 	uint32_t size = a_ctrl->reg_tbl_size, i = 0;
 	int32_t rc = 0;
-	CDBG("%s: IN\n", __func__);
+	//printk("%s: IN\n", __func__);
+
 	for (i = 0; i < size; i++) {
 		if (write_arr[i].reg_write_type == MSM_ACTUATOR_WRITE_DAC) {
 			value = (next_lens_position <<
@@ -113,7 +114,7 @@
 		rc = msm_camera_i2c_write(&a_ctrl->i2c_client,
 			i2c_byte1, i2c_byte2, a_ctrl->i2c_data_type);
 	}
-		CDBG("%s: OUT\n", __func__);
+		//printk("%s: OUT\n", __func__);
 	return rc;
 }
 
@@ -123,7 +124,7 @@
 {
 	int32_t rc = -EFAULT;
 	int32_t i = 0;
-	CDBG("%s called\n", __func__);
+	printk("%s called\n", __func__);
 
 	for (i = 0; i < size; i++) {
 		switch (type) {
@@ -149,7 +150,7 @@
 	}
 
 	a_ctrl->curr_step_pos = 0;
-	CDBG("%s Exit:%d\n", __func__, rc);
+	printk("%s Exit:%d\n", __func__, rc);
 	return rc;
 }
 
@@ -232,7 +233,13 @@
 	int dir = move_params->dir;
 	int32_t num_steps = move_params->num_steps;
 
-	CDBG("%s called, dir %d, num_steps %d\n",
+  #ifdef CONFIG_MACH_KTTECH
+  uint8_t code_val_msb, code_val_lsb;
+  uint16_t code_val;
+  uint8_t msb, lsb;
+  #endif
+
+	printk("%s called, dir %d, num_steps %d\n",
 		__func__,
 		dir,
 		num_steps);
@@ -240,9 +247,57 @@
 	if (dest_step_pos == a_ctrl->curr_step_pos)
 		return rc;
 
+  #ifdef CONFIG_MACH_KTTECH  // kuzuri_jb_test - AF tuning from E100
+  /* Determine sign direction */
+	if (dir == MOVE_NEAR)
+		sign_dir = 32;	//modified by MCNEX
+	else if (dir == MOVE_FAR)
+		sign_dir = -32;	//modified by MCNEX
+	else {
+		pr_err("Illegal focus direction\n");
+		rc = -EINVAL;
+		return rc;
+	}
+	/* Determine destination step position */
+	dest_step_pos = a_ctrl->curr_step_pos +
+		(sign_dir * num_steps);
+
+	if (dest_step_pos < 0)
+		dest_step_pos = 0;
+	else if (dest_step_pos > 1023)
+		dest_step_pos = 1023;
+
+	if (dest_step_pos == a_ctrl->curr_step_pos)
+		return rc;
+
+	printk("kuzuri:: curr_step_pos= %d , dest_step_pos= %d\n", a_ctrl->curr_step_pos, dest_step_pos);
+	//dest_step_pos = next_lens_position;
+
+	code_val_msb = dest_step_pos >> 4;
+	code_val_lsb = (dest_step_pos & 0x000F) << 4;
+	code_val = (code_val_msb << 8) | (code_val_lsb) | 0xF/*slew-rate*/;	//modified by MCNEX
+	//rc = s5k4e5_wrapper_i2c_write(a_ctrl, code_val, NULL);
+
+	msb = (code_val & 0xFF00) >> 8;
+	lsb = code_val & 0xFF;
+	//printk(KERN_ERR "S5K4E5_write_AF_I2C():: msb= 0x%X ,lsb= 0x%X , pos= 0x%X\n", msb, lsb, code_val);
+	//s5k4e5_af_i2c_write_b_sensor(a_ctrl, msb, lsb);
+	rc = msm_camera_i2c_write(&a_ctrl->i2c_client,
+			msb, lsb, a_ctrl->i2c_data_type);
+    if (rc >= 0) {
+		rc = 0;
+		a_ctrl->curr_step_pos = dest_step_pos;
+	}
+	return rc;
+	// __end_kuzuri
+	#endif
+
+
 	curr_lens_pos = a_ctrl->step_position_table[a_ctrl->curr_step_pos];
-	CDBG("curr_step_pos =%d dest_step_pos =%d curr_lens_pos=%d\n",
+	/*
+	printk("curr_step_pos =%d dest_step_pos =%d curr_lens_pos=%d\n",
 		a_ctrl->curr_step_pos, dest_step_pos, curr_lens_pos);
+	*/
 
 	while (a_ctrl->curr_step_pos != dest_step_pos) {
 		step_boundary =
@@ -312,7 +367,7 @@
 	uint16_t step_boundary = 0;
 	uint32_t max_code_size = 1;
 	uint16_t data_size = set_info->actuator_params.data_size;
-	CDBG("%s called\n", __func__);
+	printk("%s called\n", __func__);
 
 	for (; data_size > 0; data_size--)
 		max_code_size *= 2;
@@ -366,7 +421,7 @@
 	struct msm_actuator_move_params_t *move_params)
 {
 	int32_t rc = 0;
-	CDBG("%s called\n", __func__);
+	printk("%s called\n", __func__);
 
 	if (a_ctrl->curr_step_pos != 0)
 		rc = a_ctrl->func_tbl->actuator_move_focus(a_ctrl, move_params);
@@ -392,7 +447,7 @@
 	struct reg_settings_t *init_settings = NULL;
 	int32_t rc = -EFAULT;
 	uint16_t i = 0;
-	CDBG("%s: IN\n", __func__);
+	printk("%s: IN\n", __func__);
 
 	for (i = 0; i < ARRAY_SIZE(actuators); i++) {
 		if (set_info->actuator_params.act_type ==
@@ -490,7 +545,7 @@
 		sizeof(struct msm_actuator_cfg_data)))
 		return -EFAULT;
 	mutex_lock(a_ctrl->actuator_mutex);
-	CDBG("%s called, type %d\n", __func__, cdata.cfgtype);
+	printk("%s called, type %d\n", __func__, cdata.cfgtype);
 	switch (cdata.cfgtype) {
 	case CFG_SET_ACTUATOR_INFO:
 		rc = msm_actuator_init(a_ctrl, &cdata.cfg.set_info);
@@ -525,7 +580,7 @@
 {
 	int rc = 0;
 	struct msm_actuator_ctrl_t *act_ctrl_t = NULL;
-	CDBG("%s called\n", __func__);
+	printk("%s called\n", __func__);
 
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
 		pr_err("i2c_check_functionality failed\n");
@@ -533,7 +588,7 @@
 	}
 
 	act_ctrl_t = (struct msm_actuator_ctrl_t *)(id->driver_data);
-	CDBG("%s client = %x\n",
+	printk("%s client = %x\n",
 		__func__, (unsigned int) client);
 	act_ctrl_t->i2c_client.client = client;
 
@@ -546,7 +601,7 @@
 		act_ctrl_t->i2c_client.client,
 		act_ctrl_t->act_v4l2_subdev_ops);
 
-	CDBG("%s succeeded\n", __func__);
+	printk("%s succeeded\n", __func__);
 	return rc;
 
 probe_failure:
@@ -557,14 +612,14 @@
 int32_t msm_actuator_power_up(struct msm_actuator_ctrl_t *a_ctrl)
 {
 	int rc = 0;
-	CDBG("%s called\n", __func__);
+	printk("%s called\n", __func__);
 
-	CDBG("vcm info: %x %x\n", a_ctrl->vcm_pwd,
+	printk("vcm info: %x %x\n", a_ctrl->vcm_pwd,
 		a_ctrl->vcm_enable);
 	if (a_ctrl->vcm_enable) {
 		rc = gpio_request(a_ctrl->vcm_pwd, "msm_actuator");
 		if (!rc) {
-			CDBG("Enable VCM PWD\n");
+			printk("Enable VCM PWD\n");
 			gpio_direction_output(a_ctrl->vcm_pwd, 1);
 		}
 	}
@@ -590,7 +645,7 @@
 static int __init msm_actuator_i2c_add_driver(
 	void)
 {
-	CDBG("%s called\n", __func__);
+	printk("%s called\n", __func__);
 	return i2c_add_driver(msm_actuator_t.i2c_driver);
 }
 
diff -urN caf/drivers/media/video/msm/flash.c for-diff/drivers/media/video/msm/flash.c
--- caf/drivers/media/video/msm/flash.c	2015-09-08 23:43:50.483167082 +0900
+++ for-diff/drivers/media/video/msm/flash.c	2015-09-13 14:02:59.949921000 +0900
@@ -23,6 +23,13 @@
 #include <mach/camera.h>
 #include <mach/gpio.h>
 
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* implement flash module : KTD267 */
+#ifdef CONFIG_KTTECH_FLASH_KTD267
+#include <linux/board_kttech.h>
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
 struct i2c_client *sx150x_client;
 struct timer_list timer_flash;
 static struct msm_camera_sensor_info *sensor_data;
@@ -31,6 +38,86 @@
 	MSM_CAM_FLASH_ON,
 };
 
+#if defined CONFIG_MSM_CAMERA_FLASH_SC628A
+static struct i2c_client *sc628a_client;
+
+static const struct i2c_device_id sc628a_i2c_id[] = {
+	{"sc628a", 0},
+	{ }
+};
+
+static int32_t sc628a_i2c_txdata(unsigned short saddr,
+		unsigned char *txdata, int length)
+{
+	struct i2c_msg msg[] = {
+		{
+			.addr = saddr,
+			.flags = 0,
+			.len = length,
+			.buf = txdata,
+		},
+	};
+	if (i2c_transfer(sc628a_client->adapter, msg, 1) < 0) {
+		CDBG("sc628a_i2c_txdata faild 0x%x\n", saddr);
+		return -EIO;
+	}
+
+	return 0;
+}
+
+static int32_t sc628a_i2c_write_b_flash(uint8_t waddr, uint8_t bdata)
+{
+	int32_t rc = -EFAULT;
+	unsigned char buf[2];
+	if (!sc628a_client)
+		return  -ENOTSUPP;
+
+	memset(buf, 0, sizeof(buf));
+	buf[0] = waddr;
+	buf[1] = bdata;
+
+	rc = sc628a_i2c_txdata(sc628a_client->addr>>1, buf, 2);
+	if (rc < 0) {
+		CDBG("i2c_write_b failed, addr = 0x%x, val = 0x%x!\n",
+				waddr, bdata);
+	}
+	usleep_range(4000, 5000);
+
+	return rc;
+}
+
+static int sc628a_i2c_probe(struct i2c_client *client,
+		const struct i2c_device_id *id)
+{
+	int rc = 0;
+	CDBG("sc628a_probe called!\n");
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		pr_err("i2c_check_functionality failed\n");
+		goto probe_failure;
+	}
+
+	sc628a_client = client;
+
+	CDBG("sc628a_probe successed! rc = %d\n", rc);
+	return 0;
+
+probe_failure:
+	pr_err("sc628a_probe failed! rc = %d\n", rc);
+	return rc;
+}
+
+static struct i2c_driver sc628a_i2c_driver = {
+	.id_table = sc628a_i2c_id,
+	.probe  = sc628a_i2c_probe,
+	.remove = __exit_p(sc628a_i2c_remove),
+	.driver = {
+		.name = "sc628a",
+	},
+};
+#endif
+
+#if defined CONFIG_MSM_CAMERA_FLASH_SC628A
 static struct i2c_client *sc628a_client;
 
 static int32_t flash_i2c_txdata(struct i2c_client *client,
@@ -151,7 +238,7 @@
 		.name = "tps61310",
 	},
 };
-
+#endif
 static int config_flash_gpio_table(enum msm_cam_flash_stat stat,
 			struct msm_camera_sensor_strobe_flash_data *sfdata)
 {
@@ -319,8 +406,8 @@
 	struct msm_camera_sensor_flash_external *external,
 	unsigned led_state)
 {
-	int rc = 0;
-
+    int rc = 0;
+#if defined CONFIG_MSM_CAMERA_FLASH_SC628A
 	switch (led_state) {
 
 	case MSM_CAMERA_LED_INIT:
@@ -458,11 +545,81 @@
 		if (tps61310_client)
 			rc = flash_i2c_write_b(tps61310_client, 0x01, 0x8B);
 		break;
+#endif
+
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* implement flash module : KTD267 */
+#ifdef CONFIG_KTTECH_FLASH_KTD267
+	switch (led_state) {
+
+	case MSM_CAMERA_LED_INIT:
+		//printk("[HJM] %s, case MSM_CAMERA_LED_INIT:\n", __func__);
+		rc = gpio_request(TORCH_ENABLE, "torch_en");
+		if (rc) {
+			printk("%s: gpio_request failed on TORCH_ENABLE:3, rc=%d\n", __func__,  rc);
+		}
+	
+		rc = gpio_tlmm_config(GPIO_CFG(TORCH_ENABLE, 0, GPIO_CFG_OUTPUT, GPIO_CFG_NO_PULL, GPIO_CFG_8MA), GPIO_CFG_ENABLE);
+		if (rc) {
+			printk("%s: gpio_tlmm_config failed on TORCH_ENABLE:3, rc=%d\n", __func__, rc);
+		}
+
+		rc = gpio_request(FLASH_ENABLE, "flash_en");
+		if (rc) {
+			printk("%s: gpio_request failed on FLASH_ENABLE:63, rc=%d\n", __func__,  rc);
+		}
+	
+		rc = gpio_tlmm_config(GPIO_CFG(FLASH_ENABLE, 0, GPIO_CFG_OUTPUT, GPIO_CFG_NO_PULL, GPIO_CFG_8MA), GPIO_CFG_ENABLE);
+		if (rc) {
+			printk("%s: gpio_tlmm_config failed on FLASH_ENABLE:63, rc=%d\n", __func__, rc);
+		}
+		break;
+	case MSM_CAMERA_LED_RELEASE:
+		//printk("[HJM] %s, case MSM_CAMERA_LED_RELEASE:\n", __func__);
+		rc = gpio_direction_output(TORCH_ENABLE, 0);
+		if (!rc)
+			gpio_free(TORCH_ENABLE);
+		else
+			printk("%s: gpio_direction_output failed %d\n", __func__,	 rc);
 
+		rc = gpio_direction_output(FLASH_ENABLE, 0);
+		if (!rc)
+			gpio_free(FLASH_ENABLE);
+		else
+			printk("%s: gpio_direction_output failed %d\n", __func__,	 rc);
+		break;
+	case MSM_CAMERA_LED_OFF:
+		//printk("[HJM] %s, case MSM_CAMERA_LED_OFF:\n", __func__);
+		rc = gpio_direction_output(TORCH_ENABLE, 0);
+		rc = gpio_direction_output(FLASH_ENABLE, 0);
+		break;
+	case MSM_CAMERA_LED_LOW:
+		//printk("[HJM] %s, case MSM_CAMERA_LED_LOW:\n", __func__);
+		rc = gpio_direction_output(TORCH_ENABLE, 1);
+		break;
+	case MSM_CAMERA_LED_HIGH:
+		//printk("[HJM] %s, case MSM_CAMERA_LED_HIGH:\n", __func__);
+		rc = gpio_direction_output(TORCH_ENABLE, 0);
+		if (rc) {
+			printk("%s: rc:%d = gpio_direction_output(TORCH_ENABLE, 0); failed\n", __func__, rc);
+		}
+		rc = gpio_direction_output(FLASH_ENABLE, 1);
+		if (rc) {
+			printk("%s: rc:%d = gpio_direction_output(FLASH_ENABLE, 1); failed\n", __func__, rc);
+		}
+		msleep(500);
+		rc = gpio_direction_output(FLASH_ENABLE, 0);
+		if (rc) {
+			printk("%s: rc:%d = gpio_direction_output(FLASH_ENABLE, 0); failed\n", __func__, rc);
+		}
+		break;
 	default:
 		rc = -EFAULT;
 		break;
 	}
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	return rc;
 }
 
@@ -557,6 +714,57 @@
 	return rc;
 }
 
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* implement camera flash led by PMIC */
+#ifdef CONFIG_KTTECH_FLASH_PMIC
+int msm_camera_flash_pmic_kb_light(
+	struct msm_camera_sensor_flash_pmic *pmic,
+	unsigned led_state)
+{
+	int rc = 0;
+	//printk("[HJM] %s, led_state:%d\n", __func__, led_state);
+
+	switch (led_state) {
+	case MSM_CAMERA_LED_OFF:
+		//printk("[HJM] %s, case MSM_CAMERA_LED_OFF:\n", __func__);
+		//pm8xxx_led_kp_set(LED_OFF);
+		//pm8xxx_led_kp_set(0);
+		rc = pmic->pmic_set_current_kb_light(0);
+		break;
+
+	case MSM_CAMERA_LED_LOW:
+		//printk("[HJM] %s, case MSM_CAMERA_LED_LOW:\n", __func__);
+		//pm8xxx_led_kp_set(LED_HALF);
+		//pm8xxx_led_kp_set(127);
+		rc = pmic->pmic_set_current_kb_light(200);
+		break;
+
+	case MSM_CAMERA_LED_HIGH:
+		//printk("[HJM] %s, case MSM_CAMERA_LED_HIGH:\n", __func__);
+		//pm8xxx_led_kp_set(LED_FULL);
+		//pm8xxx_led_kp_set(255);
+		rc = pmic->pmic_set_current_kb_light(255);
+		break;
+
+	case MSM_CAMERA_LED_INIT:
+		//printk("[HJM] %s, case MSM_CAMERA_LED_INIT:\n", __func__);
+		break;
+	case MSM_CAMERA_LED_RELEASE:
+		//printk("[HJM] %s, case MSM_CAMERA_LED_RELEASE:\n", __func__);
+		break;
+
+	default:
+		//printk("[HJM] %s, default:\n", __func__);
+		rc = -EFAULT;
+		break;
+	}
+	CDBG("flash_set_led_state: return %d\n", rc);
+	//printk("[HJM] %s, return rc:%d;\n", __func__, rc);
+
+	return rc;
+}
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 int32_t msm_camera_flash_set_led_state(
 	struct msm_camera_sensor_flash_data *fdata, unsigned led_state)
 {
@@ -568,8 +776,15 @@
 
 	switch (fdata->flash_src->flash_sr_type) {
 	case MSM_CAMERA_FLASH_SRC_PMIC:
+#ifdef CONFIG_KTTECH_FLASH_PMIC
+		//printk("[HJM] %s, case MSM_CAMERA_FLASH_SRC_PMIC:\n", __func__);
+		rc = msm_camera_flash_pmic_kb_light(&fdata->flash_src->_fsrc.pmic_src,
+			led_state);
+#else
 		rc = msm_camera_flash_pmic(&fdata->flash_src->_fsrc.pmic_src,
 			led_state);
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 		break;
 
 	case MSM_CAMERA_FLASH_SRC_PWM:
diff -urN caf/drivers/media/video/msm/io/msm_camera_i2c.c for-diff/drivers/media/video/msm/io/msm_camera_i2c.c
--- caf/drivers/media/video/msm/io/msm_camera_i2c.c	2015-09-08 23:43:50.483167082 +0900
+++ for-diff/drivers/media/video/msm/io/msm_camera_i2c.c	2015-09-13 14:02:59.949921000 +0900
@@ -262,7 +262,15 @@
 			addr, data, data_type);
 		if (rc == 0 || rc < 0)
 			break;
+		/* Begin - jaemoon.hwang@kttech.co.kr */
+		/* improve polling time */
+#if 1
+		//usleep_range(5000, 6000);
+		usleep_range(4000, 5000);
+#else
 		usleep_range(10000, 11000);
+#endif
+		/* End - jaemoon.hwang@kttech.co.kr */
 	}
 	return rc;
 }
diff -urN caf/drivers/media/video/msm/sensors/Makefile for-diff/drivers/media/video/msm/sensors/Makefile
--- caf/drivers/media/video/msm/sensors/Makefile	2015-09-08 23:43:50.491167082 +0900
+++ for-diff/drivers/media/video/msm/sensors/Makefile	2015-09-13 14:02:59.957921000 +0900
@@ -4,6 +4,7 @@
 EXTRA_CFLAGS += -Idrivers/media/video/msm/eeprom
 EXTRA_CFLAGS += -Idrivers/media/video/msm/csi
 obj-$(CONFIG_MSM_CAMERA_SENSOR) += msm_sensor.o
+obj-$(CONFIG_KTTECH_CAMERA_S5K4E5) += s5k4e5.o
 obj-$(CONFIG_OV5647) += ov5647_v4l2.o
 obj-$(CONFIG_OV8825) += ov8825_v4l2.o
 obj-$(CONFIG_IMX074) += imx074_v4l2.o
diff -urN caf/drivers/media/video/msm/sensors/msm_sensor.c for-diff/drivers/media/video/msm/sensors/msm_sensor.c
--- caf/drivers/media/video/msm/sensors/msm_sensor.c	2015-09-08 23:43:50.491167082 +0900
+++ for-diff/drivers/media/video/msm/sensors/msm_sensor.c	2015-09-13 14:02:59.957921000 +0900
@@ -14,8 +14,99 @@
 #include "msm.h"
 #include "msm_ispif.h"
 #include "msm_camera_i2c_mux.h"
+#ifdef CONFIG_MACH_KTTECH
+#include <linux/string.h>
+#include <linux/regulator/consumer.h>
+#include <linux/board_kttech.h>
+#endif
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1
+#define S5K4E5_EEP_PAGE_SIZE				256		// GT24C16
+#define S5K4E5_EEP_CAL_DATA_SIZE		S5K4E5_EEP_PAGE_SIZE * 5
+static char eeprom_data[S5K4E5_EEP_CAL_DATA_SIZE];
+
+static struct i2c_client *s5k4e5_eeprom_client;
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 
 /*=============================================================*/
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1
+static int s5k4e5_i2c_rxburst(unsigned short saddr, unsigned char *rxdata,	int length)
+{
+	unsigned char tmp_buf = 0;
+
+	struct i2c_msg msgs[] = {
+		{
+			.addr  = saddr,
+			.flags = 0,
+			.len   = 1,
+			.buf   = &tmp_buf,
+		},
+		{
+			.addr  = saddr,
+			.flags = I2C_M_RD,
+			.len   = length,
+			.buf   = rxdata,
+		},
+	};
+	
+	if (i2c_transfer(s5k4e5_eeprom_client->adapter, msgs, 2) < 0) {
+		printk("s5k4e5_i2c_rxdata faild 0x%x\n", saddr);
+		return -EIO;
+	}
+
+#if 0 /* eeprom data checking code */
+{
+		int32_t i = 0;
+		for (i = 0; i < S5K4E5_EEP_PAGE_SIZE; i++)
+			CDBG("============= %s: index = %d,	val = 0x%x \n", __func__, i, *(rxdata+i));
+}
+#endif
+
+	return 0;
+}
+
+static void s5k4e5_get_eeprom_data(void)
+{
+	int32_t pageAddr = 0, rc = 0;
+	char buf[S5K4E5_EEP_PAGE_SIZE];
+	unsigned short addr_shifted;
+
+  	memset(buf, 0, sizeof(buf));
+	memset(eeprom_data, 0, S5K4E5_EEP_CAL_DATA_SIZE);
+  
+  	CDBG("%s: \n", __func__);
+
+	addr_shifted = s5k4e5_eeprom_client->addr >> 1;
+  
+	while (pageAddr < 5)
+	{
+		rc = s5k4e5_i2c_rxburst(addr_shifted | pageAddr, buf, S5K4E5_EEP_PAGE_SIZE);
+		if (rc < 0) {
+			printk("s5k4e5_i2c_read 0x%x failed!\n", s5k4e5_eeprom_client->addr);
+			return;
+		}
+
+		memcpy(eeprom_data + pageAddr * S5K4E5_EEP_PAGE_SIZE, buf, S5K4E5_EEP_PAGE_SIZE);
+		pageAddr++;
+	}
+
+#if 0	/* eeprom data checking code */
+{
+		int32_t i = 0;
+		for (i = 0; i < pageAddr * S5K4E5_EEP_PAGE_SIZE; i++)
+			CDBG("%s: eeprom_data : index = %d,	val = 0x%x ", __func__, i, *(eeprom_data+i));
+}
+#endif
+
+}
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+/*=============================================================*/
 int32_t msm_sensor_adjust_frame_lines(struct msm_sensor_ctrl_t *s_ctrl,
 	uint16_t res)
 {
@@ -314,6 +405,12 @@
 			int mode, struct sensor_init_cfg *init_info)
 {
 	int32_t rc = 0;
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1
+	struct msm_camera_sensor_info *data = s_ctrl->sensordata;
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	s_ctrl->fps_divider = Q10;
 	s_ctrl->cam_mode = MSM_SENSOR_MODE_INVALID;
 
@@ -330,6 +427,16 @@
 			rc = s_ctrl->func_tbl->sensor_setting(s_ctrl,
 				MSM_SENSOR_REG_INIT, 0);
 	}
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1
+	if (strcmp(data->sensor_name, "s5k4e5") == 0) {
+		s5k4e5_get_eeprom_data();
+	}
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
 	return rc;
 }
 
@@ -390,6 +497,60 @@
 int32_t msm_sensor_get_csi_params(struct msm_sensor_ctrl_t *s_ctrl,
 		struct csi_lane_params_t *sensor_output_info)
 {
+  //printk("kuzuri__ msm.sensor.get.csi_params():: enter....\n");
+  if ( sensor_output_info==NULL )
+  {
+      printk("kuzuri__ output_info is NULL....error..\n");
+      return 0;
+  }
+  if ( s_ctrl==NULL )
+  {
+    printk("kuzuri__ s_ctrl is NULL....error..\n");
+    return 0;
+  }
+  //printk("s_ctrl.i2c_addr= %X , s_ctrl.sensordata->sensor_name = %s \n", s_ctrl->sensor_i2c_addr, s_ctrl->sensordata->sensor_name );
+
+  if ( s_ctrl->sensordata==NULL )
+  {
+    printk("kuzuri__ s_ctrl.sensordata is NULL....error..\n");
+    return 0;
+  }
+  if ( s_ctrl->sensordata->sensor_platform_info==NULL )
+  {
+    printk("kuzuri__ s_ctrl.sensordata.sensor_platform_info is NULL....error..\n");
+    return 0;
+  }
+  if ( s_ctrl->sensordata->sensor_platform_info->csi_lane_params==NULL )
+  {
+    printk("kuzuri__ s_ctrl.sensordata.sensor_platform_info.csi_lane_params is NULL....error..\n");
+    return 0;
+  }
+  if (0 ) // s_ctrl->sensordata->sensor_platform_info->csi_lane_params->csi_lane_assign==NULL )
+  {
+    printk("kuzuri__ s_ctrl.sensordata.sensor_platform_info.csi_lane_params.csi_lane_assign = %X\n", s_ctrl->sensordata->sensor_platform_info->csi_lane_params->csi_lane_assign);
+    //return 0;
+  }
+  if ( 0 ) //s_ctrl->sensordata->sensor_platform_info->csi_lane_params->csi_lane_mask==NULL )
+  {
+    printk("kuzuri__ s_ctrl.sensordata.sensor_platform_info.csi_lane_params.csi_lane_mask= %X\n", s_ctrl->sensordata->sensor_platform_info->csi_lane_params->csi_lane_mask);
+    //return 0;
+  }
+   if ( 0 ) //s_ctrl->sensordata->csi_if==NULL )
+  {
+    printk("kuzuri__ s_ctrl.sensordata.csi_if = %X\n", s_ctrl->sensordata->csi_if);
+    //return 0;
+  }
+  if ( 0 ) //s_ctrl->sensordata->pdata[0].csid_core==NULL )
+  {
+    printk("kuzuri__ s_ctrl.sensordata.pdata[0].csid_core= %X\n", s_ctrl->sensordata->pdata[0].csid_core);
+    //return 0;
+  }
+  if ( 0 ) //s_ctrl->csid_version==NULL )
+  {
+    printk("kuzuri__ s_ctrl.csid_version= %X\n", s_ctrl->csid_version);
+    //return 0;
+  }
+  
 	sensor_output_info->csi_lane_assign = s_ctrl->sensordata->
 		sensor_platform_info->csi_lane_params->csi_lane_assign;
 	sensor_output_info->csi_lane_mask = s_ctrl->sensordata->
@@ -502,6 +663,62 @@
 				rc = -EFAULT;
 			break;
 
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1
+		case CFG_GET_CAL_DATA:
+	  		CDBG("%s:  case CFG_GET_CAL_DATA:     cal_data_idx = %d\n", __func__, cdata.cfg.eeprom_value.cal_data_idx);
+	  		if (cdata.cfg.eeprom_value.cal_data_idx > 1)
+				rc = -EFAULT;
+			else {
+				memcpy(cdata.cfg.eeprom_value.cal_v, eeprom_data + (cdata.cfg.eeprom_value.cal_data_idx	* MAX_CAL_DATA_PACKET_LEN), MAX_CAL_DATA_PACKET_LEN);
+				if (copy_to_user((void *)argp,
+					&cdata,
+					sizeof(struct sensor_cfg_data)))
+					rc = -EFAULT;
+			}
+			break;
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* SENSOR_SET_WB */
+#if 1
+		case CFG_SET_WB:
+			CDBG("%s:  case CFG_SET_WB: cdata.cfg.wb_val:%d\n", __func__, cdata.cfg.wb_val);
+			if (s_ctrl->func_tbl->
+			sensor_set_wb == NULL) {
+				rc = -EFAULT;
+				break;
+			}
+			rc = s_ctrl->func_tbl->
+				sensor_set_wb(
+				s_ctrl,
+				cdata.cfg.wb_val);	
+			break;
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* SENSOR_SET_BRIGHTNESS */
+#if 1
+		case CFG_SET_BRIGHTNESS:
+			printk("%s:  case CFG_SET_BRIGHTNESS: cdata.cfg.brightness:%d\n", __func__, cdata.cfg.brightness);
+			if (s_ctrl->func_tbl->
+			sensor_set_brightness == NULL) {
+			  printk(" CFG_SET_BRIGHTNESS:--- func_tbl is NULL ...\n");
+				rc = -EFAULT;
+				break;
+			}
+			rc = s_ctrl->func_tbl->
+				sensor_set_brightness(
+				s_ctrl,
+				cdata.cfg.brightness);
+			break;
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
 		case CFG_START_STREAM:
 			if (s_ctrl->func_tbl->sensor_start_stream == NULL) {
 				rc = -EFAULT;
@@ -567,11 +784,327 @@
 	return 0;
 }
 
+
+#ifdef CONFIG_KTTECH_CAMERA
+static struct regulator *vreg_S8_2P2 = NULL;
+static struct regulator *vreg_LVS5_1P8 = NULL;
+static struct regulator *vreg_L11_2P85 = NULL;
+static struct regulator *vreg_L8_3P0 = NULL;	// S5K4E5 AF
+
+static int camera_power=0;
+
+int cam_get_power(void)
+{
+	printk("[HJM] %s, Start\n", __func__);
+	return camera_power;
+}
+
+EXPORT_SYMBOL(cam_get_power);
+
+
+static int cam_setup_power(int cam_type)
+{
+	int rc = 0;
+	const char *str_S8_2P2 = "8921_s8";
+	const char *str_LVS5_1P8 = "8921_lvs5";
+	const char *str_L11_2P85 = "8921_l11";	
+	const char *str_L8_3P0 = "8921_l8";		// S5K4E5 AF
+
+	//return rc;
+
+	printk("%s: cam_type = %d\n", __func__, cam_type);
+	/* Back camera power up sequence  : vreg_S8_2P2/CAM_5M_EN(DVDD) -> VREG_L11_2P85 -> VREG_LVS5_1P8 -> VREG_L8_3P0(AF_2.8V) */
+	/* Front camera power up sequence : VREG_LVS5_1P8 -> VREG_L11_2P85 */
+
+	msleep(1);
+	
+	/* power on LDO for CAM_DVDD_1.8V */
+	if (cam_type == BACK_CAMERA_2D) {
+		printk("%s: if (cam_type == BACK_CAMERA_2D)\n", __func__);
+		vreg_S8_2P2 = regulator_get(NULL, str_S8_2P2);
+		if (IS_ERR(vreg_S8_2P2)) {
+			rc = PTR_ERR(vreg_S8_2P2);
+			printk("%s: regulator_get failed %s = %d\n", __func__, str_S8_2P2, rc);
+		}
+
+		if (!rc)
+			//rc = regulator_set_voltage(vreg_S8_2P2, 2100000, 2100000);	//rollback 2200000 -> 2100000 because it could affect cpu clock
+			/* Since Qualcomm 1049 patch, min_uV and max_uV of S8 were changed from 2100000 -> 2050000.
+			   So, I change S8 for camera from 2100000 -> 2050000 because it could affect cpu clock.
+			   refer to \kernel\arch\arm\mach-msm\acpuclock-8960.c and \kernel\arch\arm\mach-msm\board-8960-regulator.c */
+			rc = regulator_set_voltage(vreg_S8_2P2, 2050000, 2050000);
+		else {
+			printk("%s: regulator_get failed %s = %d\n", __func__, str_S8_2P2, rc);
+			goto fail_0;
+		}
+
+		msleep(1);
+
+		if (!rc)
+			rc = regulator_enable(vreg_S8_2P2);
+		else {
+			printk("%s: regulator_set_voltage failed %s = %d\n", __func__, str_S8_2P2, rc);
+			goto fail_0;
+		}
+
+		rc = gpio_request(CAM_5M_EN, "cam_5m_en");
+		if (rc) {
+			printk("%s: gpio_request failed on CAM_5M_EN:58, rc=%d\n", __func__,  rc);
+			goto fail_1;
+		}
+	
+		rc = gpio_tlmm_config(GPIO_CFG(CAM_5M_EN, 0, GPIO_CFG_OUTPUT, GPIO_CFG_NO_PULL, GPIO_CFG_8MA), GPIO_CFG_ENABLE);
+		if (rc) {
+			printk("%s: gpio_tlmm_config failed on CAM_5M_EN:58, rc=%d\n", __func__, rc);
+			goto fail_1;
+		}
+
+		rc = gpio_direction_output(CAM_5M_EN, 1);
+		if (rc) {
+			printk("%s: gpio_direction_output failed on CAM_5M_EN:58, rc=%d\n", __func__, rc);
+			goto fail_1;
+		}
+	}
+
+	msleep(1);
+
+	if (cam_type == BACK_CAMERA_2D) {
+		/* Back camera power up sequence : VREG_L11_2P85 -> VREG_LVS5_1P8 */
+		
+		/* VREG_L11_2P85 */
+		vreg_L11_2P85 = regulator_get(NULL, str_L11_2P85);
+		if (IS_ERR(vreg_L11_2P85)) {
+			rc = PTR_ERR(vreg_L11_2P85);
+			printk("%s: regulator_get failed %s = %d\n", __func__, str_L11_2P85, rc);
+		}
+
+		if (!rc)
+			rc = regulator_set_voltage(vreg_L11_2P85, 2800000, 2800000);	/* change voltage of L11  : 2.85V -> 2.8V */
+		else {
+			printk("%s: regulator_get failed %s = %d\n", __func__,	str_L11_2P85, rc);
+			goto fail_2;
+		}
+
+		if (!rc)
+			rc = regulator_enable(vreg_L11_2P85);
+		else {
+			printk("%s: regulator_set_voltage failed %s = %d\n", __func__, str_L11_2P85, rc);
+			goto fail_2;
+		}
+
+		msleep(1);
+		
+		/* VREG_LVS5_1P8 */
+		vreg_LVS5_1P8 = regulator_get(NULL, str_LVS5_1P8);
+		if (IS_ERR(vreg_LVS5_1P8)) {
+			rc = PTR_ERR(vreg_LVS5_1P8);
+			printk("%s: regulator_get failed %s = %d\n", __func__, str_LVS5_1P8, rc);
+		}
+
+		if (!rc) {
+			rc = regulator_enable(vreg_LVS5_1P8);
+		} else {
+			printk("%s: regulator_get failed %s = %d\n", __func__, str_LVS5_1P8, rc);
+			goto fail_3;
+		}
+	} else {	/* cam_type == FRONT_CAMERA_2D */
+		/* Front camera power up sequence : VREG_L11_2P85 -> VREG_LVS5_1P8 */
+		
+		/* VREG_LVS5_1P8 */
+		vreg_LVS5_1P8 = regulator_get(NULL, str_LVS5_1P8);
+		if (IS_ERR(vreg_LVS5_1P8)) {
+			rc = PTR_ERR(vreg_LVS5_1P8);
+			printk("%s: regulator_get failed %s = %d\n", __func__, str_LVS5_1P8, rc);
+		}
+
+		if (!rc) {
+			rc = regulator_enable(vreg_LVS5_1P8);
+		}
+		else {
+			printk("%s: regulator_get failed %s = %d\n", __func__, str_LVS5_1P8, rc);
+			goto fail_2;
+		}
+
+		msleep(1);
+
+		/* VREG_L11_2P85 */
+		vreg_L11_2P85 = regulator_get(NULL, str_L11_2P85);
+		if (IS_ERR(vreg_L11_2P85)) {
+			rc = PTR_ERR(vreg_L11_2P85);
+			printk("%s: regulator_get failed %s = %d\n", __func__, str_L11_2P85, rc);
+		}
+
+		if (!rc)
+			rc = regulator_set_voltage(vreg_L11_2P85, 2800000, 2800000);	/* change voltage of L11  : 2.85V -> 2.8V */
+		else {
+			printk("%s: regulator_get failed %s = %d\n", __func__,	str_L11_2P85, rc);
+			goto fail_3;
+		}
+
+		if (!rc)
+			rc = regulator_enable(vreg_L11_2P85);
+		else {
+			printk("%s: regulator_set_voltage failed %s = %d\n", __func__, str_L11_2P85, rc);
+			goto fail_3;
+		}
+	}
+	
+
+	/* VREG_L8_3P0 : AF_2.8V */
+	if (cam_type == BACK_CAMERA_2D) {
+		printk("%s: if (cam_type == BACK_CAMERA_2D)\n", __func__);
+		msleep(1);
+		vreg_L8_3P0 = regulator_get(NULL, str_L8_3P0);
+		if (IS_ERR(vreg_L8_3P0)) {
+			rc = PTR_ERR(vreg_L8_3P0);
+			printk("%s: regulator_get failed %s = %d\n", __func__, str_L8_3P0, rc);
+		}
+
+		if (!rc)
+			rc = regulator_set_voltage(vreg_L8_3P0, 3000000, 3000000);
+		else {
+			printk("%s: regulator_get failed %s = %d\n", __func__,	str_L8_3P0, rc);
+			goto fail_4;
+		}
+
+		if (!rc)
+			rc = regulator_enable(vreg_L8_3P0);
+		else {
+			printk("%s: regulator_set_voltage failed %s = %d\n", __func__, str_L8_3P0, rc);
+			goto fail_4;
+		}
+	}
+
+    camera_power =1;
+	printk("%s: Camera power set-up completed\n", __func__);
+	return rc;
+
+fail_4:
+	if (cam_type == BACK_CAMERA_2D) {
+		regulator_disable(vreg_LVS5_1P8);
+		regulator_put(vreg_L8_3P0);
+	}
+
+fail_3:
+	if (cam_type == BACK_CAMERA_2D) {
+		regulator_disable(vreg_L11_2P85);
+		regulator_put(vreg_LVS5_1P8);
+		vreg_LVS5_1P8 = NULL;
+	} else {	/* cam_type == FRONT_CAMERA_2D */
+		regulator_disable(vreg_LVS5_1P8);
+		regulator_put(vreg_L11_2P85);
+		vreg_L11_2P85 = NULL;
+	}
+
+fail_2:
+	if (cam_type == BACK_CAMERA_2D) {
+		regulator_put(vreg_L11_2P85);
+		vreg_L11_2P85 = NULL;
+	} else {	/* cam_type == FRONT_CAMERA_2D */
+		regulator_put(vreg_LVS5_1P8);
+		vreg_LVS5_1P8 = NULL;
+	}
+
+fail_1:
+	regulator_disable(vreg_S8_2P2);
+
+fail_0:
+	regulator_put(vreg_S8_2P2);
+	vreg_S8_2P2 = NULL;	
+
+	printk("%s: Camera power failed \n", __func__);
+	return rc;
+};
+
+static void cam_shutdown_power(int cam_type)
+{
+	int rc = 0;
+	printk("%s, cam_type = %d\n", __func__, cam_type);
+	//return;
+
+	/* Back camera power down sequence  : vreg_L11_2P85 -> vreg_S8_2P2/CAM_5M_EN(DVDD) -> vreg_LVS5_1P8 -> VREG_L8_3P0(AF_2.8V) */
+	/* Front camera power down sequence : vreg_L11_2P85 -> vreg_S8_2P2(DVDD) */
+
+	msleep(1);
+
+	if (cam_type == BACK_CAMERA_2D) {
+		/* Back camera power down sequence : vreg_L11_2P85 -> vreg_S8_2P2/CAM_5M_EN(DVDD) -> vreg_LVS5_1P8 */
+		if (vreg_L11_2P85) {
+			regulator_disable(vreg_L11_2P85);
+			regulator_put(vreg_L11_2P85);
+			vreg_L11_2P85 = NULL;
+		}
+
+		msleep(1);
+
+		/* vreg_S8_2P2/CAM_5M_EN(DVDD) */
+		if (vreg_S8_2P2) {
+			regulator_disable(vreg_S8_2P2);
+			regulator_put(vreg_S8_2P2);
+			vreg_S8_2P2 = NULL;
+		}
+
+		rc = gpio_direction_output(CAM_5M_EN, 0);
+		if (!rc)
+			gpio_free(CAM_5M_EN);
+		else
+			printk("%s: gpio_direction_output failed %d\n", __func__,	 rc);
+
+		msleep(1);
+		
+		if (vreg_LVS5_1P8) {
+			regulator_disable(vreg_LVS5_1P8);
+			regulator_put(vreg_LVS5_1P8);
+			vreg_LVS5_1P8 = NULL;
+		}
+
+		msleep(1);
+		
+		/* VREG_L8_3P0(AF_2.8V) */
+		if (vreg_L8_3P0) {
+			regulator_disable(vreg_L8_3P0);
+			regulator_put(vreg_L8_3P0);
+			vreg_L8_3P0 = NULL;
+		} 
+	} else { /* cam_type == FRONT_CAMERA_2D */
+		/* Front camera power down sequence : vreg_L11_2P85 -> vreg_LVS5_1P8 */
+		if (vreg_L11_2P85) {
+			regulator_disable(vreg_L11_2P85);
+			regulator_put(vreg_L11_2P85);
+			vreg_L11_2P85 = NULL;
+		}
+
+		msleep(1);
+
+		if (vreg_LVS5_1P8) {
+			regulator_disable(vreg_LVS5_1P8);
+			regulator_put(vreg_LVS5_1P8);
+			vreg_LVS5_1P8 = NULL;
+		}
+	}
+
+	msleep(1);
+	
+    camera_power =0;
+	printk("%s: Camera power shut-down completed\n", __func__);
+}
+#endif
+
 int32_t msm_sensor_power_up(struct msm_sensor_ctrl_t *s_ctrl)
 {
 	int32_t rc = 0;
 	struct msm_camera_sensor_info *data = s_ctrl->sensordata;
 	CDBG("%s: %d\n", __func__, __LINE__);
+#ifdef CONFIG_MACH_KTTECH
+	if (strcmp(data->sensor_name, "s5k4e5") == 0) {
+		/* BACK_CAMERA_2D */
+		cam_setup_power(0);
+	} else if (strcmp(data->sensor_name, "mt9m114") == 0) {
+		/* FRONT_CAMERA_2D */
+		cam_setup_power(1);
+	}
+#endif
+
 	s_ctrl->reg_ptr = kzalloc(sizeof(struct regulator *)
 			* data->sensor_platform_info->num_vreg, GFP_KERNEL);
 	if (!s_ctrl->reg_ptr) {
@@ -586,6 +1119,9 @@
 		goto request_gpio_failed;
 	}
 
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* This code is not used in O7 */
+#if 0 //ndef CONFIG_MACH_KTTECH
 	rc = msm_camera_config_vreg(&s_ctrl->sensor_i2c_client->client->dev,
 			s_ctrl->sensordata->sensor_platform_info->cam_vreg,
 			s_ctrl->sensordata->sensor_platform_info->num_vreg,
@@ -603,6 +1139,8 @@
 		pr_err("%s: enable regulator failed\n", __func__);
 		goto enable_vreg_failed;
 	}
+#endif //#ifndef CONFIG_MACH_KTTECH
+/* End - jaemoon.hwang@kttech.co.kr */
 
 	rc = msm_camera_config_gpio_table(data, 1);
 	if (rc < 0) {
@@ -633,6 +1171,10 @@
 enable_clk_failed:
 		msm_camera_config_gpio_table(data, 0);
 config_gpio_failed:
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* This code is not used in O7 */
+#if 0 //ndef CONFIG_MACH_KTTECH
 	msm_camera_enable_vreg(&s_ctrl->sensor_i2c_client->client->dev,
 			s_ctrl->sensordata->sensor_platform_info->cam_vreg,
 			s_ctrl->sensordata->sensor_platform_info->num_vreg,
@@ -644,6 +1186,8 @@
 		s_ctrl->sensordata->sensor_platform_info->num_vreg,
 		s_ctrl->reg_ptr, 0);
 config_vreg_failed:
+#endif	//#ifndef CONFIG_MACH_KTTECH
+/* End - jaemoon.hwang@kttech.co.kr */
 	msm_camera_request_gpio_table(data, 0);
 request_gpio_failed:
 	kfree(s_ctrl->reg_ptr);
@@ -664,6 +1208,10 @@
 	msm_cam_clk_enable(&s_ctrl->sensor_i2c_client->client->dev,
 		cam_clk_info, &s_ctrl->cam_clk, ARRAY_SIZE(cam_clk_info), 0);
 	msm_camera_config_gpio_table(data, 0);
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* This code is not used in O7 */
+#if 0 //ndef CONFIG_MACH_KTTECH
 	msm_camera_enable_vreg(&s_ctrl->sensor_i2c_client->client->dev,
 		s_ctrl->sensordata->sensor_platform_info->cam_vreg,
 		s_ctrl->sensordata->sensor_platform_info->num_vreg,
@@ -672,8 +1220,21 @@
 		s_ctrl->sensordata->sensor_platform_info->cam_vreg,
 		s_ctrl->sensordata->sensor_platform_info->num_vreg,
 		s_ctrl->reg_ptr, 0);
+#endif	//#ifndef CONFIG_MACH_KTTECH
+/* End - jaemoon.hwang@kttech.co.kr */
+
 	msm_camera_request_gpio_table(data, 0);
 	kfree(s_ctrl->reg_ptr);
+
+#ifdef CONFIG_MACH_KTTECH
+	if (strcmp(data->sensor_name, "s5k4e5") == 0) {
+		/* BACK_CAMERA_2D */
+		cam_shutdown_power(0);
+	} else if (strcmp(data->sensor_name, "mt9m114") == 0) {
+		/* FRONT_CAMERA_2D */
+		cam_shutdown_power(1);
+	}
+#endif
 	return 0;
 }
 
@@ -685,13 +1246,15 @@
 			s_ctrl->sensor_i2c_client,
 			s_ctrl->sensor_id_info->sensor_id_reg_addr, &chipid,
 			MSM_CAMERA_I2C_WORD_DATA);
+	printk("[HJM] %s, s_ctrl->sensordata->sensor_name: %s, s_ctrl->sensor_i2c_addr: 0x%x\n", __func__, s_ctrl->sensordata->sensor_name, s_ctrl->sensor_i2c_addr);
 	if (rc < 0) {
 		pr_err("%s: %s: read id failed\n", __func__,
 			s_ctrl->sensordata->sensor_name);
 		return rc;
 	}
 
-	CDBG("msm_sensor id: %d\n", chipid);
+	printk("msm_sensor (%s)  id: %X  / wanna= %X\n", s_ctrl->sensordata->sensor_name, chipid, s_ctrl->sensor_id_info->sensor_id);
+	printk("[HJM] msm_sensor id: %d\n", chipid);
 	if (chipid != s_ctrl->sensor_id_info->sensor_id) {
 		pr_err("msm_sensor_match_id chip id doesnot match\n");
 		return -ENODEV;
@@ -709,7 +1272,7 @@
 {
 	int rc = 0;
 	struct msm_sensor_ctrl_t *s_ctrl;
-	CDBG("%s %s_i2c_probe called\n", __func__, client->name);
+	printk("%s %s_i2c_probe called\n", __func__, client->name);
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
 		pr_err("%s %s i2c_check_functionality failed\n",
 			__func__, client->name);
@@ -730,6 +1293,17 @@
 		return rc;
 	}
 
+	/* Begin - jaemoon.hwang@kttech.co.kr */
+	/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1
+	if (strcmp(client->name, "s5k4e5_eeprom") == 0) {
+		s5k4e5_eeprom_client = client;
+		CDBG("%s_i2c_probe succeed return rc:%d;\n", client->name, rc);
+		return rc;
+	}
+#endif
+	/* End - jaemoon.hwang@kttech.co.kr */
+
 	s_ctrl->sensordata = client->dev.platform_data;
 	if (s_ctrl->sensordata == NULL) {
 		pr_err("%s %s NULL sensor data\n", __func__, client->name);
@@ -818,14 +1392,14 @@
 	struct msm_sensor_v4l2_ctrl_info_t *v4l2_ctrl =
 		s_ctrl->msm_sensor_v4l2_ctrl_info;
 
-	CDBG("%s\n", __func__);
-	CDBG("%d\n", ctrl->id);
+	printk("%s\n", __func__);
+	printk("%d\n", ctrl->id);
 	if (v4l2_ctrl == NULL)
 		return rc;
 	for (i = 0; i < s_ctrl->num_v4l2_ctrl; i++) {
 		if (v4l2_ctrl[i].ctrl_id == ctrl->id) {
 			if (v4l2_ctrl[i].s_v4l2_ctrl != NULL) {
-				CDBG("\n calling msm_sensor_s_ctrl_by_enum\n");
+				printk("\n calling msm_sensor_s_ctrl_by_enum\n");
 				rc = v4l2_ctrl[i].s_v4l2_ctrl(
 					s_ctrl,
 					&s_ctrl->msm_sensor_v4l2_ctrl_info[i],
@@ -846,7 +1420,7 @@
 		(struct msm_sensor_ctrl_t *) sd->dev_priv;
 
 	CDBG("%s\n", __func__);
-	CDBG("%s id: %d\n", __func__, qctrl->id);
+	printk("%s id: %d\n", __func__, qctrl->id);
 
 	if (s_ctrl->msm_sensor_v4l2_ctrl_info == NULL)
 		return rc;
@@ -921,3 +1495,120 @@
 
 	return 0;
 }
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* SENSOR_SET_WB */
+#if 1
+int msm_sensor_set_wb(struct msm_sensor_ctrl_t *s_ctrl, int wb)
+{
+	int rc = 0;
+	CDBG("%s enter, wb:%d\n", __func__, wb);
+	
+	switch (wb) {
+
+		case 1: { // CAMERA_WB_AUTO
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x098E, 0xC909, MSM_CAMERA_I2C_WORD_DATA); 
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0990, 0x0300, MSM_CAMERA_I2C_WORD_DATA); 
+		}
+		break;
+
+		case 5: { // CAMERA_WB_DAYLIGHT
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x098E, 0xC909, MSM_CAMERA_I2C_WORD_DATA); 
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0990, 0x0100, MSM_CAMERA_I2C_WORD_DATA); 			
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0xC8F0, 0x1964, MSM_CAMERA_I2C_WORD_DATA); 
+		}
+		break;
+
+		case 6: { // CAMERA_WB_CLOUDY_DAYLIGHT
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x098E, 0xC909, MSM_CAMERA_I2C_WORD_DATA); 
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0990, 0x0100, MSM_CAMERA_I2C_WORD_DATA); 			
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0xC8F0, 0x13EC, MSM_CAMERA_I2C_WORD_DATA); 	
+		}
+		break;
+
+		case 4: { // CAMERA_WB_FLUORESCENT
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x098E, 0xC909, MSM_CAMERA_I2C_WORD_DATA); 
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0990, 0x0100, MSM_CAMERA_I2C_WORD_DATA); 			
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0xC8F0, 0x1130, MSM_CAMERA_I2C_WORD_DATA); 
+		}
+		break;
+
+		case 3: { // CAMERA_WB_INCANDESCENT
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x098E, 0xC909, MSM_CAMERA_I2C_WORD_DATA); 
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0990, 0x0100, MSM_CAMERA_I2C_WORD_DATA); 			
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0xC8F0, 0x0AF0, MSM_CAMERA_I2C_WORD_DATA); 						
+		}
+		break;
+
+	}
+
+	CDBG("%s return rc:%d; exit\n", __func__, rc);
+	return rc;
+}
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* SENSOR_SET_BRIGHTNESS */
+#if 1
+int msm_sensor_set_brightness(struct msm_sensor_ctrl_t *s_ctrl, int brightness)
+{
+	int rc = 0;
+
+	printk("%s enter, brightness:%d\n", __func__, brightness);
+
+	switch (brightness) {
+
+		case 0: { // Brightness -5
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x098E, 0xC87A, MSM_CAMERA_I2C_WORD_DATA); 
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0990, 0x1400, MSM_CAMERA_I2C_WORD_DATA);
+		}
+		break;
+
+		case 1: { // Brightness -3
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x098E, 0xC87A, MSM_CAMERA_I2C_WORD_DATA); 
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0990, 0x2000, MSM_CAMERA_I2C_WORD_DATA); 			
+		}
+		break;
+
+		case 2: { // Brightness -2
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x098E, 0xC87A, MSM_CAMERA_I2C_WORD_DATA); 
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0990, 0x2E00, MSM_CAMERA_I2C_WORD_DATA); 
+		}
+		break;
+
+		case 3: { // Brightness 0
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x098E, 0xC87A, MSM_CAMERA_I2C_WORD_DATA); 
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0990, 0x3E00, MSM_CAMERA_I2C_WORD_DATA); 
+		}
+		break;
+
+		case 4: { // Brightness +2
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x098E, 0xC87A, MSM_CAMERA_I2C_WORD_DATA); 
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0990, 0x5200, MSM_CAMERA_I2C_WORD_DATA); 
+		}
+		break;
+
+		case 5: { // Brightness +3
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x098E, 0xC87A, MSM_CAMERA_I2C_WORD_DATA); 
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0990, 0x6600, MSM_CAMERA_I2C_WORD_DATA); 
+		}
+		break;
+
+		case 6: { // Brightness +5
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x098E, 0xC87A, MSM_CAMERA_I2C_WORD_DATA); 
+			rc = msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0990, 0x8000, MSM_CAMERA_I2C_WORD_DATA); 
+		}
+		break;
+
+		default: {
+		}
+	}
+
+
+	printk("%s return rc:%d; exit\n", __func__, rc);
+	return rc;
+
+}
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
diff -urN caf/drivers/media/video/msm/sensors/msm_sensor.h for-diff/drivers/media/video/msm/sensors/msm_sensor.h
--- caf/drivers/media/video/msm/sensors/msm_sensor.h	2015-09-08 23:43:50.491167082 +0900
+++ for-diff/drivers/media/video/msm/sensors/msm_sensor.h	2015-09-13 14:02:59.957921000 +0900
@@ -136,6 +136,18 @@
 		(struct msm_sensor_ctrl_t *);
 	int (*sensor_power_up) (struct msm_sensor_ctrl_t *);
 	int32_t (*sensor_match_id)(struct msm_sensor_ctrl_t *s_ctrl);
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* SENSOR_SET_WB */
+#if 1
+	int (*sensor_set_wb) (struct msm_sensor_ctrl_t *, int);
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* SENSOR_SET_BRIGHTNESS */
+#if 1
+	int (*sensor_set_brightness) (struct msm_sensor_ctrl_t *, int);
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	int (*sensor_adjust_frame_lines)
 		(struct msm_sensor_ctrl_t *s_ctrl, uint16_t res);
 	int32_t (*sensor_get_csi_params)(struct msm_sensor_ctrl_t *,
@@ -211,6 +223,19 @@
 int32_t msm_sensor_power_down(struct msm_sensor_ctrl_t *s_ctrl);
 
 int32_t msm_sensor_match_id(struct msm_sensor_ctrl_t *s_ctrl);
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* SENSOR_SET_WB */
+#if 1
+int msm_sensor_set_wb(struct msm_sensor_ctrl_t *s_ctrl, int wb);
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* SENSOR_SET_BRIGHTNESS */
+#if 1
+int msm_sensor_set_brightness(struct msm_sensor_ctrl_t *s_ctrl, int brightness);
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
 int msm_sensor_i2c_probe(struct i2c_client *client,
 	const struct i2c_device_id *id);
 int32_t msm_sensor_power(struct v4l2_subdev *sd, int on);
diff -urN caf/drivers/media/video/msm/sensors/mt9m114_v4l2.c for-diff/drivers/media/video/msm/sensors/mt9m114_v4l2.c
--- caf/drivers/media/video/msm/sensors/mt9m114_v4l2.c	2015-09-08 23:43:50.491167082 +0900
+++ for-diff/drivers/media/video/msm/sensors/mt9m114_v4l2.c	2015-09-13 14:02:59.961921000 +0900
@@ -1,4 +1,4 @@
-/* Copyright (c) 2011-2012, Code Aurora Forum. All rights reserved.
+/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -29,15 +29,30 @@
 
 static struct msm_camera_i2c_reg_conf mt9m114_720p_settings[] = {
 	{0xdc00, 0x50, MSM_CAMERA_I2C_BYTE_DATA, MSM_CAMERA_I2C_CMD_WRITE},
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* improve camera opening time by removing setting value of MSM_CAMERA_I2C_CMD_POLL */
+#if 0
 	{MT9M114_COMMAND_REGISTER, MT9M114_COMMAND_REGISTER_SET_STATE,
 		MSM_CAMERA_I2C_UNSET_WORD_MASK, MSM_CAMERA_I2C_CMD_POLL},
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	{MT9M114_COMMAND_REGISTER, (MT9M114_COMMAND_REGISTER_OK |
 		MT9M114_COMMAND_REGISTER_SET_STATE), MSM_CAMERA_I2C_WORD_DATA,
 		MSM_CAMERA_I2C_CMD_WRITE},
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* improve camera opening time by removing setting value of MSM_CAMERA_I2C_CMD_POLL */
+/* should check if this register need to be set or not again for compatibility someday */
+#if 0
 	{MT9M114_COMMAND_REGISTER, MT9M114_COMMAND_REGISTER_SET_STATE,
 		MSM_CAMERA_I2C_UNSET_WORD_MASK, MSM_CAMERA_I2C_CMD_POLL},
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	{0xDC01, 0x52, MSM_CAMERA_I2C_BYTE_DATA, MSM_CAMERA_I2C_CMD_POLL},
 
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* set 1280x960 size */
+/* remove 720p settings */
+#if 0
 	{0x098E, 0, MSM_CAMERA_I2C_BYTE_DATA},
 	{0xC800, 0x007C,},/*y_addr_start = 124*/
 	{0xC802, 0x0004,},/*x_addr_start = 4*/
@@ -53,7 +68,15 @@
 	{0xC816, 0x0060,},/*fine_correction = 96*/
 	{0xC818, 0x02D3,},/*cpipe_last_row = 723*/
 	{0xC826, 0x0020,},/*reg_0_data = 32*/
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_ROTATION */
+/* FLIP_V */
+#if 1
+	{0xC834, 0x0003,},/*sensor_control_read_mode = 0*/
+#else
 	{0xC834, 0x0000,},/*sensor_control_read_mode = 0*/
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	{0xC854, 0x0000,},/*crop_window_xoffset = 0*/
 	{0xC856, 0x0000,},/*crop_window_yoffset = 0*/
 	{0xC858, 0x0500,},/*crop_window_width = 1280*/
@@ -72,8 +95,1354 @@
 	{0xC91E, 0x0000,},/*stat_ae_window_ystart = 0*/
 	{0xC920, 0x00FF,},/*stat_ae_window_xend = 255*/
 	{0xC922, 0x008F,},/*stat_ae_window_yend = 143*/
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 };
 
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* change tuning register : Version 1 */
+#if 1	/* register values modified by MCNEX */
+static struct msm_camera_i2c_reg_conf mt9m114_recommend_settings[] = {
+	{0xDC01, 0x52, MSM_CAMERA_I2C_BYTE_DATA, MSM_CAMERA_I2C_CMD_POLL},	// added for stability
+	{0x301A, 0x0200, MSM_CAMERA_I2C_SET_WORD_MASK},	// should check if this register is set well or not again as soon as possible
+	{0x098E, 0, MSM_CAMERA_I2C_BYTE_DATA},
+	/*cam_sysctl_pll_enable = 1*/
+	{0xC97E, 0x01, MSM_CAMERA_I2C_BYTE_DATA},
+	/*cam_sysctl_pll_divider_m_n = 288*/
+	{0xC980, 0x0120,},
+	/*cam_sysctl_pll_divider_p = 1792*/
+	{0xC982, 0x0700,},
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* set 1280x960 size */
+/* change the order of mipi control register set */
+#if 0
+	/*output_control = 32769*/
+	{0xC984, 0x8001,},
+	/*mipi_timing_t_hs_zero = 3840*/
+	{0xC988, 0x0F00,},
+	/*mipi_timing_t_hs_exit_hs_trail = 2823*/
+	{0xC98A, 0x0B07,},
+	/*mipi_timing_t_clk_post_clk_pre = 3329*/
+	{0xC98C, 0x0D01,},
+	/*mipi_timing_t_clk_trail_clk_zero = 1821*/
+	{0xC98E, 0x071D,},
+	/*mipi_timing_t_lpx = 6*/
+	{0xC990, 0x0006,},
+	/*mipi_timing_init_timing = 2572*/
+	{0xC992, 0x0A0C,},
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* set 1280x960 size */
+#if 1
+	{0xC800, 0x0004,},/*y_addr_start = 4*/
+	{0xC802, 0x0004,},/*x_addr_start = 4*/
+	{0xC804, 0x03CB,},/*y_addr_end = 971*/
+	{0xC806, 0x050B,},/*x_addr_end = 1291*/
+	{0x098E, 0x4808,},
+	{0x0990, 0x02DC,}, 	// cam_sensor_cfg_pixclk
+	{0x0992, 0x6C00,}, 	// cam_sensor_cfg_pixclk
+	//{0xC808, 0x02DC,},/*pixclk = 48000000*/
+	//{0xC80A, 0x6C00,},/*pixclk = 48000000*/
+	{0xC80C, 0x0001,},/*row_speed = 1*/
+	{0xC80E, 0x00DB,},/*fine_integ_time_min = 219*/
+	{0xC810, 0x05B3,},/*fine_integ_time_max = 1459*/
+	{0xC812, 0x03EE,},/*frame_length_lines = 1006*/
+	{0xC814, 0x0640,},/*line_length_pck = 1600*/
+	{0xC816, 0x0060,},/*fine_correction = 96*/
+	{0xC818, 0x03C3,},/*cpipe_last_row = 963*/
+	{0xC826, 0x0020,},/*reg_0_data = 32*/
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_ROTATION */
+/* FLIP_V */
+#if 1
+	{0xC834, 0x0003,},/*sensor_control_read_mode = 0*/
+#else
+	{0xC834, 0x0000,},/*sensor_control_read_mode = 0*/
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+	{0xC854, 0x0000,},/*crop_window_xoffset = 0*/
+	{0xC856, 0x0000,},/*crop_window_yoffset = 0*/
+	{0xC858, 0x0500,},/*crop_window_width = 1280*/
+	{0xC85A, 0x03C0,},/*crop_window_height = 960*/
+	{0xC85C, 0x03, MSM_CAMERA_I2C_BYTE_DATA},  /*crop_cropmode = 3*/
+	{0xC868, 0x0500,},/*output_width = 1280*/
+	{0xC86A, 0x03C0,},/*output_height = 960*/   
+	//{0xC86C, 0x0012,},/*CAM_OUTPUT_FORMAT*/  
+	{0xC878, 0x00, MSM_CAMERA_I2C_BYTE_DATA},  /*aet_aemode = 0*/
+	{0xC88C, 0x1E02,},/*aet_max_frame_rate = 7682*/
+	{0xC88E, 0x0F00,},/*aet_min_frame_rate = 3840*/
+	{0xC914, 0x0000,},/*stat_awb_window_xstart = 0*/
+	{0xC916, 0x0000,},/*stat_awb_window_ystart = 0*/
+	{0xC918, 0x04FF,},/*stat_awb_window_xend = 1279*/
+	{0xC91A, 0x03BF,},/*stat_awb_window_yend = 959*/
+	{0xC91C, 0x0000,},/*stat_ae_window_xstart = 0*/
+	{0xC91E, 0x0000,},/*stat_ae_window_ystart = 0*/
+	{0xC920, 0x00FF,},/*stat_ae_window_xend = 255*/
+	{0xC922, 0x00BF,},/*stat_ae_window_yend = 143*/
+	{0x098E, 0xE801,},// LOGICAL_ADDRESS_ACCESS                                               
+	{0x0990, 0x0000,},// cam_aet_aemode                                                       
+	{0x098E, 0xCC03,},// LOGICAL_ADDRESS_ACCESS [UVC_POWER_LINE_FREQUENCY_CONTROL]            
+	{0x0990, 0x0200,},// UVC_POWER_LINE_FREQUENCY_CONTROL  ==> 60Hz : 0x0200 , 50Hz ==>0x0100 
+#else
+	{0xC800, 0x007C,},/*y_addr_start = 124*/
+	{0xC802, 0x0004,},/*x_addr_start = 4*/
+	{0xC804, 0x0353,},/*y_addr_end = 851*/
+	{0xC806, 0x050B,},/*x_addr_end = 1291*/
+	{0xC808, 0x02DC,},/*pixclk = 48000000*/
+	{0xC80A, 0x6C00,},/*pixclk = 48000000*/
+	{0xC80C, 0x0001,},/*row_speed = 1*/
+	{0xC80E, 0x00DB,},/*fine_integ_time_min = 219*/
+	{0xC810, 0x05BD,},/*fine_integ_time_max = 1469*/
+	{0xC812, 0x03E8,},/*frame_length_lines = 1000*/
+	{0xC814, 0x0640,},/*line_length_pck = 1600*/
+	{0xC816, 0x0060,},/*fine_correction = 96*/
+	{0xC818, 0x02D3,},/*cpipe_last_row = 723*/
+	{0xC826, 0x0020,},/*reg_0_data = 32*/
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_ROTATION */
+/* FLIP_V */
+#if 1
+	{0xC834, 0x0003,},/*sensor_control_read_mode = 0*/
+#else
+	{0xC834, 0x0000,},/*sensor_control_read_mode = 0*/
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+	{0xC854, 0x0000,},/*crop_window_xoffset = 0*/
+	{0xC856, 0x0000,},/*crop_window_yoffset = 0*/
+	{0xC858, 0x0500,},/*crop_window_width = 1280*/
+	{0xC85A, 0x02D0,},/*crop_window_height = 720*/
+	{0xC85C, 0x03, MSM_CAMERA_I2C_BYTE_DATA},  /*crop_cropmode = 3*/
+	{0xC868, 0x0500,},/*output_width = 1280*/
+	{0xC86A, 0x02D0,},/*output_height = 720*/
+	{0xC878, 0x00, MSM_CAMERA_I2C_BYTE_DATA},  /*aet_aemode = 0*/
+	{0xC88C, 0x1E00,},/*aet_max_frame_rate = 7680*/
+	{0xC88E, 0x1E00,},/*aet_min_frame_rate = 7680*/
+	{0xC914, 0x0000,},/*stat_awb_window_xstart = 0*/
+	{0xC916, 0x0000,},/*stat_awb_window_ystart = 0*/
+	{0xC918, 0x04FF,},/*stat_awb_window_xend = 1279*/
+	{0xC91A, 0x02CF,},/*stat_awb_window_yend = 719*/
+	{0xC91C, 0x0000,},/*stat_ae_window_xstart = 0*/
+	{0xC91E, 0x0000,},/*stat_ae_window_ystart = 0*/
+	{0xC920, 0x00FF,},/*stat_ae_window_xend = 255*/
+	{0xC922, 0x008F,},/*stat_ae_window_yend = 143*/
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
+	/* Begin - change config */
+	{0x098E, 0xDC00,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x2800,}, 	// AE_TRACK_AE_TRACKING_DAMPENING_SPEED
+	{0x0080, 0x8002,}, 	// COMMAND_REGISTER
+	{0x0080, 0xFFF0, MSM_CAMERA_I2C_WORD_DATA, MSM_CAMERA_I2C_CMD_POLL},	//jaemoon.hwang add
+	/* End - change config */
+
+	/*Sensor optimization*/
+	{0x316A, 0x8270,},
+	{0x316C, 0x8270,},
+	{0x3ED0, 0x2305,},
+	{0x3ED2, 0x77CF,},
+	{0x316E, 0x8202,},
+	{0x3180, 0x87FF,},
+	{0x30D4, 0x6080,},
+	{0xA802, 0x0008,},/*AE_TRACK_MODE*/
+	{0x3E14, 0xFF39,},
+	{0x0982, 0x0001,},/*ACCESS_CTL_STAT*/
+	{0x098A, 0x5000,},/*PHYSICAL_ADDRESS_ACCESS*/
+	{0xD000, 0x70CF,},
+	{0xD002, 0xFFFF,},
+	{0xD004, 0xC5D4,},
+	{0xD006, 0x903A,},
+	{0xD008, 0x2144,},
+	{0xD00A, 0x0C00,},
+	{0xD00C, 0x2186,},
+	{0xD00E, 0x0FF3,},
+	{0xD010, 0xB844,},
+	{0xD012, 0xB948,},
+	{0xD014, 0xE082,},
+	{0xD016, 0x20CC,},
+	{0xD018, 0x80E2,},
+	{0xD01A, 0x21CC,},
+	{0xD01C, 0x80A2,},
+	{0xD01E, 0x21CC,},
+	{0xD020, 0x80E2,},
+	{0xD022, 0xF404,},
+	{0xD024, 0xD801,},
+	{0xD026, 0xF003,},
+	{0xD028, 0xD800,},
+	{0xD02A, 0x7EE0,},
+	{0xD02C, 0xC0F1,},
+	{0xD02E, 0x08BA,},
+	{0xD030, 0x0600,},
+	{0xD032, 0xC1A1,},
+	{0xD034, 0x76CF,},
+	{0xD036, 0xFFFF,},
+	{0xD038, 0xC130,},
+	{0xD03A, 0x6E04,},
+	{0xD03C, 0xC040,},
+	{0xD03E, 0x71CF,},
+	{0xD040, 0xFFFF,},
+	{0xD042, 0xC790,},
+	{0xD044, 0x8103,},
+	{0xD046, 0x77CF,},
+	{0xD048, 0xFFFF,},
+	{0xD04A, 0xC7C0,},
+	{0xD04C, 0xE001,},
+	{0xD04E, 0xA103,},
+	{0xD050, 0xD800,},
+	{0xD052, 0x0C6A,},
+	{0xD054, 0x04E0,},
+	{0xD056, 0xB89E,},
+	{0xD058, 0x7508,},
+	{0xD05A, 0x8E1C,},
+	{0xD05C, 0x0809,},
+	{0xD05E, 0x0191,},
+	{0xD060, 0xD801,},
+	{0xD062, 0xAE1D,},
+	{0xD064, 0xE580,},
+	{0xD066, 0x20CA,},
+	{0xD068, 0x0022,},
+	{0xD06A, 0x20CF,},
+	{0xD06C, 0x0522,},
+	{0xD06E, 0x0C5C,},
+	{0xD070, 0x04E2,},
+	{0xD072, 0x21CA,},
+	{0xD074, 0x0062,},
+	{0xD076, 0xE580,},
+	{0xD078, 0xD901,},
+	{0xD07A, 0x79C0,},
+	{0xD07C, 0xD800,},
+	{0xD07E, 0x0BE6,},
+	{0xD080, 0x04E0,},
+	{0xD082, 0xB89E,},
+	{0xD084, 0x70CF,},
+	{0xD086, 0xFFFF,},
+	{0xD088, 0xC8D4,},
+	{0xD08A, 0x9002,},
+	{0xD08C, 0x0857,},
+	{0xD08E, 0x025E,},
+	{0xD090, 0xFFDC,},
+	{0xD092, 0xE080,},
+	{0xD094, 0x25CC,},
+	{0xD096, 0x9022,},
+	{0xD098, 0xF225,},
+	{0xD09A, 0x1700,},
+	{0xD09C, 0x108A,},
+	{0xD09E, 0x73CF,},
+	{0xD0A0, 0xFF00,},
+	{0xD0A2, 0x3174,},
+	{0xD0A4, 0x9307,},
+	{0xD0A6, 0x2A04,},
+	{0xD0A8, 0x103E,},
+	{0xD0AA, 0x9328,},
+	{0xD0AC, 0x2942,},
+	{0xD0AE, 0x7140,},
+	{0xD0B0, 0x2A04,},
+	{0xD0B2, 0x107E,},
+	{0xD0B4, 0x9349,},
+	{0xD0B6, 0x2942,},
+	{0xD0B8, 0x7141,},
+	{0xD0BA, 0x2A04,},
+	{0xD0BC, 0x10BE,},
+	{0xD0BE, 0x934A,},
+	{0xD0C0, 0x2942,},
+	{0xD0C2, 0x714B,},
+	{0xD0C4, 0x2A04,},
+	{0xD0C6, 0x10BE,},
+	{0xD0C8, 0x130C,},
+	{0xD0CA, 0x010A,},
+	{0xD0CC, 0x2942,},
+	{0xD0CE, 0x7142,},
+	{0xD0D0, 0x2250,},
+	{0xD0D2, 0x13CA,},
+	{0xD0D4, 0x1B0C,},
+	{0xD0D6, 0x0284,},
+	{0xD0D8, 0xB307,},
+	{0xD0DA, 0xB328,},
+	{0xD0DC, 0x1B12,},
+	{0xD0DE, 0x02C4,},
+	{0xD0E0, 0xB34A,},
+	{0xD0E2, 0xED88,},
+	{0xD0E4, 0x71CF,},
+	{0xD0E6, 0xFF00,},
+	{0xD0E8, 0x3174,},
+	{0xD0EA, 0x9106,},
+	{0xD0EC, 0xB88F,},
+	{0xD0EE, 0xB106,},
+	{0xD0F0, 0x210A,},
+	{0xD0F2, 0x8340,},
+	{0xD0F4, 0xC000,},
+	{0xD0F6, 0x21CA,},
+	{0xD0F8, 0x0062,},
+	{0xD0FA, 0x20F0,},
+	{0xD0FC, 0x0040,},
+	{0xD0FE, 0x0B02,},
+	{0xD100, 0x0320,},
+	{0xD102, 0xD901,},
+	{0xD104, 0x07F1,},
+	{0xD106, 0x05E0,},
+	{0xD108, 0xC0A1,},
+	{0xD10A, 0x78E0,},
+	{0xD10C, 0xC0F1,},
+	{0xD10E, 0x71CF,},
+	{0xD110, 0xFFFF,},
+	{0xD112, 0xC7C0,},
+	{0xD114, 0xD840,},
+	{0xD116, 0xA900,},
+	{0xD118, 0x71CF,},
+	{0xD11A, 0xFFFF,},
+	{0xD11C, 0xD02C,},
+	{0xD11E, 0xD81E,},
+	{0xD120, 0x0A5A,},
+	{0xD122, 0x04E0,},
+	{0xD124, 0xDA00,},
+	{0xD126, 0xD800,},
+	{0xD128, 0xC0D1,},
+	{0xD12A, 0x7EE0,},
+	{0x098E, 0x0000,},
+	
+	{0xE000, 0x010C,}, 	// PATCHLDR_LOADER_ADDRESS
+	{0xE002, 0x0204,}, 	// PATCHLDR_PATCH_ID
+	{0x098E, 0x6004,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x4103,}, 	// MCU_VARIABLE_DATA0
+	{0x0992, 0x0202,}, 	// MCU_VARIABLE_DATA1
+	{0x0080, 0xFFF0,}, 	// COMMAND_REGISTER
+	{0x0080, 0xFFF1,}, 	// COMMAND_REGISTER
+	{0x0080, 0xFFF0, MSM_CAMERA_I2C_WORD_DATA, MSM_CAMERA_I2C_CMD_POLL},	//jaemoon.hwang add
+	//0304
+	{0x0982, 0x0001,}, 	// ACCESS_CTL_STAT
+	{0x098A, 0x512C,}, 	// PHYSICAL_ADDRESS_ACCESS
+	{0xD12C, 0x70CF,},
+	{0xD12E, 0xFFFF,},
+	{0xD130, 0xC5D4,},
+	{0xD132, 0x903A,},
+	{0xD134, 0x2144,},
+	{0xD136, 0x0C00,},
+	{0xD138, 0x2186,},
+	{0xD13A, 0x0FF3,},
+	{0xD13C, 0xB844,},
+	{0xD13E, 0x262F,},
+	{0xD140, 0xF008,},
+	{0xD142, 0xB948,},
+	{0xD144, 0x21CC,},
+	{0xD146, 0x8021,},
+	{0xD148, 0xD801,},
+	{0xD14A, 0xF203,},
+	{0xD14C, 0xD800,},
+	{0xD14E, 0x7EE0,},
+	{0xD150, 0xC0F1,},
+	{0xD152, 0x71CF,},
+	{0xD154, 0xFFFF,},
+	{0xD156, 0xC610,},
+	{0xD158, 0x910E,},
+	{0xD15A, 0x208C,},
+	{0xD15C, 0x8014,},
+	{0xD15E, 0xF418,},
+	{0xD160, 0x910F,},
+	{0xD162, 0x208C,},
+	{0xD164, 0x800F,},
+	{0xD166, 0xF414,},
+	{0xD168, 0x9116,},
+	{0xD16A, 0x208C,},
+	{0xD16C, 0x800A,},
+	{0xD16E, 0xF410,},
+	{0xD170, 0x9117,},
+	{0xD172, 0x208C,},
+	{0xD174, 0x8807,},
+	{0xD176, 0xF40C,},
+	{0xD178, 0x9118,},
+	{0xD17A, 0x2086,},
+	{0xD17C, 0x0FF3,},
+	{0xD17E, 0xB848,},
+	{0xD180, 0x080D,},
+	{0xD182, 0x0090,},
+	{0xD184, 0xFFEA,},
+	{0xD186, 0xE081,},
+	{0xD188, 0xD801,},
+	{0xD18A, 0xF203,},
+	{0xD18C, 0xD800,},
+	{0xD18E, 0xC0D1,},
+	{0xD190, 0x7EE0,},
+	{0xD192, 0x78E0,},
+	{0xD194, 0xC0F1,},
+	{0xD196, 0x71CF,},
+	{0xD198, 0xFFFF,},
+	{0xD19A, 0xC610,},
+	{0xD19C, 0x910E,},
+	{0xD19E, 0x208C,},
+	{0xD1A0, 0x800A,},
+	{0xD1A2, 0xF418,},
+	{0xD1A4, 0x910F,},
+	{0xD1A6, 0x208C,},
+	{0xD1A8, 0x8807,},
+	{0xD1AA, 0xF414,},
+	{0xD1AC, 0x9116,},
+	{0xD1AE, 0x208C,},
+	{0xD1B0, 0x800A,},
+	{0xD1B2, 0xF410,},
+	{0xD1B4, 0x9117,},
+	{0xD1B6, 0x208C,},
+	{0xD1B8, 0x8807,},
+	{0xD1BA, 0xF40C,},
+	{0xD1BC, 0x9118,},
+	{0xD1BE, 0x2086,},
+	{0xD1C0, 0x0FF3,},
+	{0xD1C2, 0xB848,},
+	{0xD1C4, 0x080D,},
+	{0xD1C6, 0x0090,},
+	{0xD1C8, 0xFFD9,},
+	{0xD1CA, 0xE080,},
+	{0xD1CC, 0xD801,},
+	{0xD1CE, 0xF203,},
+	{0xD1D0, 0xD800,},
+	{0xD1D2, 0xF1DF,},
+	{0xD1D4, 0x9040,},
+	{0xD1D6, 0x71CF,},
+	{0xD1D8, 0xFFFF,},
+	{0xD1DA, 0xC5D4,},
+	{0xD1DC, 0xB15A,},
+	{0xD1DE, 0x9041,},
+	{0xD1E0, 0x73CF,},
+	{0xD1E2, 0xFFFF,},
+	{0xD1E4, 0xC7D0,},
+	{0xD1E6, 0xB140,},
+	{0xD1E8, 0x9042,},
+	{0xD1EA, 0xB141,},
+	{0xD1EC, 0x9043,},
+	{0xD1EE, 0xB142,},
+	{0xD1F0, 0x9044,},
+	{0xD1F2, 0xB143,},
+	{0xD1F4, 0x9045,},
+	{0xD1F6, 0xB147,},
+	{0xD1F8, 0x9046,},
+	{0xD1FA, 0xB148,},
+	{0xD1FC, 0x9047,},
+	{0xD1FE, 0xB14B,},
+	{0xD200, 0x9048,},
+	{0xD202, 0xB14C,},
+	{0xD204, 0x9049,},
+	{0xD206, 0x1958,},
+	{0xD208, 0x0084,},
+	{0xD20A, 0x904A,},
+	{0xD20C, 0x195A,},
+	{0xD20E, 0x0084,},
+	{0xD210, 0x8856,},
+	{0xD212, 0x1B36,},
+	{0xD214, 0x8082,},
+	{0xD216, 0x8857,},
+	{0xD218, 0x1B37,},
+	{0xD21A, 0x8082,},
+	{0xD21C, 0x904C,},
+	{0xD21E, 0x19A7,},
+	{0xD220, 0x009C,},
+	{0xD222, 0x881A,},
+	{0xD224, 0x7FE0,},
+	{0xD226, 0x1B54,},
+	{0xD228, 0x8002,},
+	{0xD22A, 0x78E0,},
+	{0xD22C, 0x71CF,},
+	{0xD22E, 0xFFFF,},
+	{0xD230, 0xC350,},
+	{0xD232, 0xD828,},
+	{0xD234, 0xA90B,},
+	{0xD236, 0x8100,},
+	{0xD238, 0x01C5,},
+	{0xD23A, 0x0320,},
+	{0xD23C, 0xD900,},
+	{0xD23E, 0x78E0,},
+	{0xD240, 0x220A,},
+	{0xD242, 0x1F80,},
+	{0xD244, 0xFFFF,},
+	{0xD246, 0xD4E0,},
+	{0xD248, 0xC0F1,},
+	{0xD24A, 0x0811,},
+	{0xD24C, 0x0051,},
+	{0xD24E, 0x2240,},
+	{0xD250, 0x1200,},
+	{0xD252, 0xFFE1,},
+	{0xD254, 0xD801,},
+	{0xD256, 0xF006,},
+	{0xD258, 0x2240,},
+	{0xD25A, 0x1900,},
+	{0xD25C, 0xFFDE,},
+	{0xD25E, 0xD802,},
+	{0xD260, 0x1A05,},
+	{0xD262, 0x1002,},
+	{0xD264, 0xFFF2,},
+	{0xD266, 0xF195,},
+	{0xD268, 0xC0F1,},
+	{0xD26A, 0x0E7E,},
+	{0xD26C, 0x05C0,},
+	{0xD26E, 0x75CF,},
+	{0xD270, 0xFFFF,},
+	{0xD272, 0xC84C,},
+	{0xD274, 0x9502,},
+	{0xD276, 0x77CF,},
+	{0xD278, 0xFFFF,},
+	{0xD27A, 0xC344,},
+	{0xD27C, 0x2044,},
+	{0xD27E, 0x008E,},
+	{0xD280, 0xB8A1,},
+	{0xD282, 0x0926,},
+	{0xD284, 0x03E0,},
+	{0xD286, 0xB502,},
+	{0xD288, 0x9502,},
+	{0xD28A, 0x952E,},
+	{0xD28C, 0x7E05,},
+	{0xD28E, 0xB5C2,},
+	{0xD290, 0x70CF,},
+	{0xD292, 0xFFFF,},
+	{0xD294, 0xC610,},
+	{0xD296, 0x099A,},
+	{0xD298, 0x04A0,},
+	{0xD29A, 0xB026,},
+	{0xD29C, 0x0E02,},
+	{0xD29E, 0x0560,},
+	{0xD2A0, 0xDE00,},
+	{0xD2A2, 0x0A12,},
+	{0xD2A4, 0x0320,},
+	{0xD2A6, 0xB7C4,},
+	{0xD2A8, 0x0B36,},
+	{0xD2AA, 0x03A0,},
+	{0xD2AC, 0x70C9,},
+	{0xD2AE, 0x9502,},
+	{0xD2B0, 0x7608,},
+	{0xD2B2, 0xB8A8,},
+	{0xD2B4, 0xB502,},
+	{0xD2B6, 0x70CF,},
+	{0xD2B8, 0x0000,},
+	{0xD2BA, 0x5536,},
+	{0xD2BC, 0x7860,},
+	{0xD2BE, 0x2686,},
+	{0xD2C0, 0x1FFB,},
+	{0xD2C2, 0x9502,},
+	{0xD2C4, 0x78C5,},
+	{0xD2C6, 0x0631,},
+	{0xD2C8, 0x05E0,},
+	{0xD2CA, 0xB502,},
+	{0xD2CC, 0x72CF,},
+	{0xD2CE, 0xFFFF,},
+	{0xD2D0, 0xC5D4,},
+	{0xD2D2, 0x923A,},
+	{0xD2D4, 0x73CF,},
+	{0xD2D6, 0xFFFF,},
+	{0xD2D8, 0xC7D0,},
+	{0xD2DA, 0xB020,},
+	{0xD2DC, 0x9220,},
+	{0xD2DE, 0xB021,},
+	{0xD2E0, 0x9221,},
+	{0xD2E2, 0xB022,},
+	{0xD2E4, 0x9222,},
+	{0xD2E6, 0xB023,},
+	{0xD2E8, 0x9223,},
+	{0xD2EA, 0xB024,},
+	{0xD2EC, 0x9227,},
+	{0xD2EE, 0xB025,},
+	{0xD2F0, 0x9228,},
+	{0xD2F2, 0xB026,},
+	{0xD2F4, 0x922B,},
+	{0xD2F6, 0xB027,},
+	{0xD2F8, 0x922C,},
+	{0xD2FA, 0xB028,},
+	{0xD2FC, 0x1258,},
+	{0xD2FE, 0x0101,},
+	{0xD300, 0xB029,},
+	{0xD302, 0x125A,},
+	{0xD304, 0x0101,},
+	{0xD306, 0xB02A,},
+	{0xD308, 0x1336,},
+	{0xD30A, 0x8081,},
+	{0xD30C, 0xA836,},
+	{0xD30E, 0x1337,},
+	{0xD310, 0x8081,},
+	{0xD312, 0xA837,},
+	{0xD314, 0x12A7,},
+	{0xD316, 0x0701,},
+	{0xD318, 0xB02C,},
+	{0xD31A, 0x1354,},
+	{0xD31C, 0x8081,},
+	{0xD31E, 0x7FE0,},
+	{0xD320, 0xA83A,},
+	{0xD322, 0x78E0,},
+	{0xD324, 0xC0F1,},
+	{0xD326, 0x0DC2,},
+	{0xD328, 0x05C0,},
+	{0xD32A, 0x7608,},
+	{0xD32C, 0x09BB,},
+	{0xD32E, 0x0010,},
+	{0xD330, 0x75CF,},
+	{0xD332, 0xFFFF,},
+	{0xD334, 0xD4E0,},
+	{0xD336, 0x8D21,},
+	{0xD338, 0x8D00,},
+	{0xD33A, 0x2153,},
+	{0xD33C, 0x0003,},
+	{0xD33E, 0xB8C0,},
+	{0xD340, 0x8D45,},
+	{0xD342, 0x0B23,},
+	{0xD344, 0x0000,},
+	{0xD346, 0xEA8F,},
+	{0xD348, 0x0915,},
+	{0xD34A, 0x001E,},
+	{0xD34C, 0xFF81,},
+	{0xD34E, 0xE808,},
+	{0xD350, 0x2540,},
+	{0xD352, 0x1900,},
+	{0xD354, 0xFFDE,},
+	{0xD356, 0x8D00,},
+	{0xD358, 0xB880,},
+	{0xD35A, 0xF004,},
+	{0xD35C, 0x8D00,},
+	{0xD35E, 0xB8A0,},
+	{0xD360, 0xAD00,},
+	{0xD362, 0x8D05,},
+	{0xD364, 0xE081,},
+	{0xD366, 0x20CC,},
+	{0xD368, 0x80A2,},
+	{0xD36A, 0xDF00,},
+	{0xD36C, 0xF40A,},
+	{0xD36E, 0x71CF,},
+	{0xD370, 0xFFFF,},
+	{0xD372, 0xC84C,},
+	{0xD374, 0x9102,},
+	{0xD376, 0x7708,},
+	{0xD378, 0xB8A6,},
+	{0xD37A, 0x2786,},
+	{0xD37C, 0x1FFE,},
+	{0xD37E, 0xB102,},
+	{0xD380, 0x0B42,},
+	{0xD382, 0x0180,},
+	{0xD384, 0x0E3E,},
+	{0xD386, 0x0180,},
+	{0xD388, 0x0F4A,},
+	{0xD38A, 0x0160,},
+	{0xD38C, 0x70C9,},
+	{0xD38E, 0x8D05,},
+	{0xD390, 0xE081,},
+	{0xD392, 0x20CC,},
+	{0xD394, 0x80A2,},
+	{0xD396, 0xF429,},
+	{0xD398, 0x76CF,},
+	{0xD39A, 0xFFFF,},
+	{0xD39C, 0xC84C,},
+	{0xD39E, 0x082D,},
+	{0xD3A0, 0x0051,},
+	{0xD3A2, 0x70CF,},
+	{0xD3A4, 0xFFFF,},
+	{0xD3A6, 0xC90C,},
+	{0xD3A8, 0x8805,},
+	{0xD3AA, 0x09B6,},
+	{0xD3AC, 0x0360,},
+	{0xD3AE, 0xD908,},
+	{0xD3B0, 0x2099,},
+	{0xD3B2, 0x0802,},
+	{0xD3B4, 0x9634,},
+	{0xD3B6, 0xB503,},
+	{0xD3B8, 0x7902,},
+	{0xD3BA, 0x1523,},
+	{0xD3BC, 0x1080,},
+	{0xD3BE, 0xB634,},
+	{0xD3C0, 0xE001,},
+	{0xD3C2, 0x1D23,},
+	{0xD3C4, 0x1002,},
+	{0xD3C6, 0xF00B,},
+	{0xD3C8, 0x9634,},
+	{0xD3CA, 0x9503,},
+	{0xD3CC, 0x6038,},
+	{0xD3CE, 0xB614,},
+	{0xD3D0, 0x153F,},
+	{0xD3D2, 0x1080,},
+	{0xD3D4, 0xE001,},
+	{0xD3D6, 0x1D3F,},
+	{0xD3D8, 0x1002,},
+	{0xD3DA, 0xFFA4,},
+	{0xD3DC, 0x9602,},
+	{0xD3DE, 0x7F05,},
+	{0xD3E0, 0xD800,},
+	{0xD3E2, 0xB6E2,},
+	{0xD3E4, 0xAD05,},
+	{0xD3E6, 0x0511,},
+	{0xD3E8, 0x05E0,},
+	{0xD3EA, 0xD800,},
+	{0xD3EC, 0xC0F1,},
+	{0xD3EE, 0x0CFE,},
+	{0xD3F0, 0x05C0,},
+	{0xD3F2, 0x0A96,},
+	{0xD3F4, 0x05A0,},
+	{0xD3F6, 0x7608,},
+	{0xD3F8, 0x0C22,},
+	{0xD3FA, 0x0240,},
+	{0xD3FC, 0xE080,},
+	{0xD3FE, 0x20CA,},
+	{0xD400, 0x0F82,},
+	{0xD402, 0x0000,},
+	{0xD404, 0x190B,},
+	{0xD406, 0x0C60,},
+	{0xD408, 0x05A2,},
+	{0xD40A, 0x21CA,},
+	{0xD40C, 0x0022,},
+	{0xD40E, 0x0C56,},
+	{0xD410, 0x0240,},
+	{0xD412, 0xE806,},
+	{0xD414, 0x0E0E,},
+	{0xD416, 0x0220,},
+	{0xD418, 0x70C9,},
+	{0xD41A, 0xF048,},
+	{0xD41C, 0x0896,},
+	{0xD41E, 0x0440,},
+	{0xD420, 0x0E96,},
+	{0xD422, 0x0400,},
+	{0xD424, 0x0966,},
+	{0xD426, 0x0380,},
+	{0xD428, 0x75CF,},
+	{0xD42A, 0xFFFF,},
+	{0xD42C, 0xD4E0,},
+	{0xD42E, 0x8D00,},
+	{0xD430, 0x084D,},
+	{0xD432, 0x001E,},
+	{0xD434, 0xFF47,},
+	{0xD436, 0x080D,},
+	{0xD438, 0x0050,},
+	{0xD43A, 0xFF57,},
+	{0xD43C, 0x0841,},
+	{0xD43E, 0x0051,},
+	{0xD440, 0x8D04,},
+	{0xD442, 0x9521,},
+	{0xD444, 0xE064,},
+	{0xD446, 0x790C,},
+	{0xD448, 0x702F,},
+	{0xD44A, 0x0CE2,},
+	{0xD44C, 0x05E0,},
+	{0xD44E, 0xD964,},
+	{0xD450, 0x72CF,},
+	{0xD452, 0xFFFF,},
+	{0xD454, 0xC700,},
+	{0xD456, 0x9235,},
+	{0xD458, 0x0811,},
+	{0xD45A, 0x0043,},
+	{0xD45C, 0xFF3D,},
+	{0xD45E, 0x080D,},
+	{0xD460, 0x0051,},
+	{0xD462, 0xD801,},
+	{0xD464, 0xFF77,},
+	{0xD466, 0xF025,},
+	{0xD468, 0x9501,},
+	{0xD46A, 0x9235,},
+	{0xD46C, 0x0911,},
+	{0xD46E, 0x0003,},
+	{0xD470, 0xFF49,},
+	{0xD472, 0x080D,},
+	{0xD474, 0x0051,},
+	{0xD476, 0xD800,},
+	{0xD478, 0xFF72,},
+	{0xD47A, 0xF01B,},
+	{0xD47C, 0x0886,},
+	{0xD47E, 0x03E0,},
+	{0xD480, 0xD801,},
+	{0xD482, 0x0EF6,},
+	{0xD484, 0x03C0,},
+	{0xD486, 0x0F52,},
+	{0xD488, 0x0340,},
+	{0xD48A, 0x0DBA,},
+	{0xD48C, 0x0200,},
+	{0xD48E, 0x0AF6,},
+	{0xD490, 0x0440,},
+	{0xD492, 0x0C22,},
+	{0xD494, 0x0400,},
+	{0xD496, 0x0D72,},
+	{0xD498, 0x0440,},
+	{0xD49A, 0x0DC2,},
+	{0xD49C, 0x0200,},
+	{0xD49E, 0x0972,},
+	{0xD4A0, 0x0440,},
+	{0xD4A2, 0x0D3A,},
+	{0xD4A4, 0x0220,},
+	{0xD4A6, 0xD820,},
+	{0xD4A8, 0x0BFA,},
+	{0xD4AA, 0x0260,},
+	{0xD4AC, 0x70C9,},
+	{0xD4AE, 0x0451,},
+	{0xD4B0, 0x05C0,},
+	{0xD4B2, 0x78E0,},
+	{0xD4B4, 0xD900,},
+	{0xD4B6, 0xF00A,},
+	{0xD4B8, 0x70CF,},
+	{0xD4BA, 0xFFFF,},
+	{0xD4BC, 0xD520,},
+	{0xD4BE, 0x7835,},
+	{0xD4C0, 0x8041,},
+	{0xD4C2, 0x8000,},
+	{0xD4C4, 0xE102,},
+	{0xD4C6, 0xA040,},
+	{0xD4C8, 0x09F1,},
+	{0xD4CA, 0x8114,},
+	{0xD4CC, 0x71CF,},
+	{0xD4CE, 0xFFFF,},
+	{0xD4D0, 0xD4E0,},
+	{0xD4D2, 0x70CF,},
+	{0xD4D4, 0xFFFF,},
+	{0xD4D6, 0xC594,},
+	{0xD4D8, 0xB03A,},
+	{0xD4DA, 0x7FE0,},
+	{0xD4DC, 0xD800,},
+	{0xD4DE, 0x0000,},
+	{0xD4E0, 0x0000,},
+	{0xD4E2, 0x0500,},
+	{0xD4E4, 0x0500,},
+	{0xD4E6, 0x0200,},
+	{0xD4E8, 0x0330,},
+	{0xD4EA, 0x0000,},
+	{0xD4EC, 0x0000,},
+	{0xD4EE, 0x03CD,},
+	{0xD4F0, 0x050D,},
+	{0xD4F2, 0x01C5,},
+	{0xD4F4, 0x03B3,},
+	{0xD4F6, 0x00E0,},
+	{0xD4F8, 0x01E3,},
+	{0xD4FA, 0x0280,},
+	{0xD4FC, 0x01E0,},
+	{0xD4FE, 0x0109,},
+	{0xD500, 0x0080,},
+	{0xD502, 0x0500,},
+	{0xD504, 0x0000,},
+	{0xD506, 0x0000,},
+	{0xD508, 0x0000,},
+	{0xD50A, 0x0000,},
+	{0xD50C, 0x0000,},
+	{0xD50E, 0x0000,},
+	{0xD510, 0x0000,},
+	{0xD512, 0x0000,},
+	{0xD514, 0x0000,},
+	{0xD516, 0x0000,},
+	{0xD518, 0x0000,},
+	{0xD51A, 0x0000,},
+	{0xD51C, 0x0000,},
+	{0xD51E, 0x0000,},
+	{0xD520, 0xFFFF,},
+	{0xD522, 0xC9B4,},
+	{0xD524, 0xFFFF,},
+	{0xD526, 0xD324,},
+	{0xD528, 0xFFFF,},
+	{0xD52A, 0xCA34,},
+	{0xD52C, 0xFFFF,},
+	{0xD52E, 0xD3EC,},
+	{0x098E, 0x0000,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0xE000, 0x04B4,}, 	// PATCHLDR_LOADER_ADDRESS
+	{0xE002, 0x0304,}, 	// PATCHLDR_PATCH_ID
+	{0x098E, 0x6004,}, 	// LOGICAL_ADDRESS_ACCESS 
+	{0x0990, 0x4103,}, 	// MCU_VARIABLE_DATA0		  
+	{0x0992, 0x0202,}, 	// MCU_VARIABLE_DATA1		  
+	{0x0080, 0xFFF0,}, 	// COMMAND_REGISTER
+	{0x0080, 0xFFF1,}, 	// COMMAND_REGISTER
+	{0x0080, 0xFFF0, MSM_CAMERA_I2C_WORD_DATA, MSM_CAMERA_I2C_CMD_POLL},	//jaemoon.hwang add
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* remove patch 1204 to reduce opening time */
+#if 0
+	{0x0982, 0x0001,},    // ACCESS_CTL_STAT
+	{0x098A, 0x60BC,},    // PHYSICAL_ADDRESS_ACCESS
+	{0xE0BC, 0xC0F1,},
+	{0xE0BE, 0x082A,},
+	{0xE0C0, 0x05A0,},
+	{0xE0C2, 0xD800,},
+	{0xE0C4, 0x71CF,},
+	{0xE0C6, 0xFFFF,},
+	{0xE0C8, 0xC344,},
+	{0xE0CA, 0x77CF,},
+	{0xE0CC, 0xFFFF,},
+	{0xE0CE, 0xC7C0,},
+	{0xE0D0, 0xB104,},
+	{0xE0D2, 0x8F1F,},
+	{0xE0D4, 0x75CF,},
+	{0xE0D6, 0xFFFF,},
+	{0xE0D8, 0xC84C,},
+	{0xE0DA, 0x0811,},
+	{0xE0DC, 0x005E,},
+	{0xE0DE, 0x70CF,},
+	{0xE0E0, 0x0000,},
+	{0xE0E2, 0x500E,},
+	{0xE0E4, 0x7840,},
+	{0xE0E6, 0xF019,},
+	{0xE0E8, 0x0CC6,},
+	{0xE0EA, 0x0340,},
+	{0xE0EC, 0x0E26,},
+	{0xE0EE, 0x0340,},
+	{0xE0F0, 0x95C2,},
+	{0xE0F2, 0x0E21,},
+	{0xE0F4, 0x101E,},
+	{0xE0F6, 0x0E0D,},
+	{0xE0F8, 0x119E,},
+	{0xE0FA, 0x0D56,},
+	{0xE0FC, 0x0340,},
+	{0xE0FE, 0xF008,},
+	{0xE100, 0x2650,},
+	{0xE102, 0x1040,},
+	{0xE104, 0x0AA2,},
+	{0xE106, 0x0360,},
+	{0xE108, 0xB502,},
+	{0xE10A, 0xB5C2,},
+	{0xE10C, 0x0B22,},
+	{0xE10E, 0x0400,},
+	{0xE110, 0x0CCE,},
+	{0xE112, 0x0320,},
+	{0xE114, 0xD800,},
+	{0xE116, 0x70CF,},
+	{0xE118, 0xFFFF,},
+	{0xE11A, 0xC5D4,},
+	{0xE11C, 0x902C,},
+	{0xE11E, 0x72CF,},
+	{0xE120, 0xFFFF,},
+	{0xE122, 0xE218,},
+	{0xE124, 0x9009,},
+	{0xE126, 0xE105,},
+	{0xE128, 0x73CF,},
+	{0xE12A, 0xFF00,},
+	{0xE12C, 0x2FD0,},
+	{0xE12E, 0x7822,},
+	{0xE130, 0x7910,},
+	{0xE132, 0xB202,},
+	{0xE134, 0x1382,},
+	{0xE136, 0x0700,},
+	{0xE138, 0x0815,},
+	{0xE13A, 0x03DE,},
+	{0xE13C, 0x1387,},
+	{0xE13E, 0x0700,},
+	{0xE140, 0x2102,},
+	{0xE142, 0x000A,},
+	{0xE144, 0x212F,},
+	{0xE146, 0x0288,},
+	{0xE148, 0x1A04,},
+	{0xE14A, 0x0284,},
+	{0xE14C, 0x13B9,},
+	{0xE14E, 0x0700,},
+	{0xE150, 0xB8C1,},
+	{0xE152, 0x0815,},
+	{0xE154, 0x0052,},
+	{0xE156, 0xDB00,},
+	{0xE158, 0x230F,},
+	{0xE15A, 0x0003,},
+	{0xE15C, 0x2102,},
+	{0xE15E, 0x00C0,},
+	{0xE160, 0x7910,},
+	{0xE162, 0xB202,},
+	{0xE164, 0x9507,},
+	{0xE166, 0x7822,},
+	{0xE168, 0xE080,},
+	{0xE16A, 0xD900,},
+	{0xE16C, 0x20CA,},
+	{0xE16E, 0x004B,},
+	{0xE170, 0xB805,},
+	{0xE172, 0x9533,},
+	{0xE174, 0x7815,},
+	{0xE176, 0x6038,},
+	{0xE178, 0x0FB2,},
+	{0xE17A, 0x0560,},
+	{0xE17C, 0xB861,},
+	{0xE17E, 0xB711,},
+	{0xE180, 0x0775,},
+	{0xE182, 0x0540,},
+	{0xE184, 0xD900,},
+	{0xE186, 0xF00A,},
+	{0xE188, 0x70CF,},
+	{0xE18A, 0xFFFF,},
+	{0xE18C, 0xE210,},
+	{0xE18E, 0x7835,},
+	{0xE190, 0x8041,},
+	{0xE192, 0x8000,},
+	{0xE194, 0xE102,},
+	{0xE196, 0xA040,},
+	{0xE198, 0x09F1,},
+	{0xE19A, 0x8094,},
+	{0xE19C, 0x7FE0,},
+	{0xE19E, 0xD800,},
+	{0xE1A0, 0xC0F1,},
+	{0xE1A2, 0xC5E1,},
+	{0xE1A4, 0x71CF,},
+	{0xE1A6, 0x0000,},
+	{0xE1A8, 0x45E6,},
+	{0xE1AA, 0x7960,},
+	{0xE1AC, 0x7508,},
+	{0xE1AE, 0x70CF,},
+	{0xE1B0, 0xFFFF,},
+	{0xE1B2, 0xC84C,},
+	{0xE1B4, 0x9002,},
+	{0xE1B6, 0x083D,},
+	{0xE1B8, 0x021E,},
+	{0xE1BA, 0x0D39,},
+	{0xE1BC, 0x10D1,},
+	{0xE1BE, 0x70CF,},
+	{0xE1C0, 0xFF00,},
+	{0xE1C2, 0x3354,},
+	{0xE1C4, 0x9055,},
+	{0xE1C6, 0x71CF,},
+	{0xE1C8, 0xFFFF,},
+	{0xE1CA, 0xC5D4,},
+	{0xE1CC, 0x116C,},
+	{0xE1CE, 0x0103,},
+	{0xE1D0, 0x1170,},
+	{0xE1D2, 0x00C1,},
+	{0xE1D4, 0xE381,},
+	{0xE1D6, 0x22C6,},
+	{0xE1D8, 0x0F81,},
+	{0xE1DA, 0x0000,},
+	{0xE1DC, 0x00FF,},
+	{0xE1DE, 0x22C4,},
+	{0xE1E0, 0x0F82,},
+	{0xE1E2, 0xFFFF,},
+	{0xE1E4, 0x00FF,},
+	{0xE1E6, 0x29C0,},
+	{0xE1E8, 0x0222,},
+	{0xE1EA, 0x7945,},
+	{0xE1EC, 0x7930,},
+	{0xE1EE, 0xB035,},
+	{0xE1F0, 0x0715,},
+	{0xE1F2, 0x0540,},
+	{0xE1F4, 0xD900,},
+	{0xE1F6, 0xF00A,},
+	{0xE1F8, 0x70CF,},
+	{0xE1FA, 0xFFFF,},
+	{0xE1FC, 0xE224,},
+	{0xE1FE, 0x7835,},
+	{0xE200, 0x8041,},
+	{0xE202, 0x8000,},
+	{0xE204, 0xE102,},
+	{0xE206, 0xA040,},
+	{0xE208, 0x09F1,},
+	{0xE20A, 0x8094,},
+	{0xE20C, 0x7FE0,},
+	{0xE20E, 0xD800,},
+	{0xE210, 0xFFFF,},
+	{0xE212, 0xCB40,},
+	{0xE214, 0xFFFF,},
+	{0xE216, 0xE0BC,},
+	{0xE218, 0x0000,},
+	{0xE21A, 0x0000,},
+	{0xE21C, 0x0000,},
+	{0xE21E, 0x0000,},
+	{0xE220, 0x0000,},
+	{0x098E, 0x0000,},      // LOGICAL_ADDRESS_ACCESS
+	{0xE000, 0x1184,},      // PATCHLDR_LOADER_ADDRESS
+	{0xE002, 0x1204,},      // PATCHLDR_PATCH_ID
+	{0x098E, 0x6004,},      // PATCHLDR_FIRMWARE_ID 
+	{0x0990, 0x4103,},      // PATCHLDR_FIRMWARE_ID 
+	{0x0992, 0x0202,},      // PATCHLDR_FIRMWARE_ID 
+	{0x0080, 0xFFF0,},      // COMMAND_REGISTER
+	{0x0080, 0xFFF1,},      // COMMAND_REGISTER
+	{0x0080, 0xFFF0, MSM_CAMERA_I2C_WORD_DATA, MSM_CAMERA_I2C_CMD_POLL},	//jaemoon.hwang add
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
+	/*[Tuning_settings]*/
+
+	/*[CCM]*/	
+	{0x3640, 0x0250,}, 	// P_G1_P0Q0							
+	{0x3642, 0xF649,}, 	// P_G1_P0Q1							
+	{0x3644, 0x30AF,}, 	// P_G1_P0Q2							
+	{0x3646, 0xCCEA,}, 	// P_G1_P0Q3							
+	{0x3648, 0xD2AE,}, 	// P_G1_P0Q4							
+	{0x364A, 0x00B0,}, 	// P_R_P0Q0							  
+	{0x364C, 0xCD89,}, 	// P_R_P0Q1							  
+	{0x364E, 0x742F,}, 	// P_R_P0Q2							  
+	{0x3650, 0x5F4C,}, 	// P_R_P0Q3							  
+	{0x3652, 0x7AEA,}, 	// P_R_P0Q4							  
+	{0x3654, 0x01B0,}, 	// P_B_P0Q0							  
+	{0x3656, 0x1C4B,}, 	// P_B_P0Q1							  
+	{0x3658, 0x1D2F,}, 	// P_B_P0Q2							  
+	{0x365A, 0xD0E8,}, 	// P_B_P0Q3							  
+	{0x365C, 0xB3CE,}, 	// P_B_P0Q4							  
+	{0x365E, 0x0150,}, 	// P_G2_P0Q0							
+	{0x3660, 0xB5AA,}, 	// P_G2_P0Q1							
+	{0x3662, 0x446F,}, 	// P_G2_P0Q2							
+	{0x3664, 0xACCB,}, 	// P_G2_P0Q3							
+	{0x3666, 0x852F,}, 	// P_G2_P0Q4							
+	{0x3680, 0x32EA,}, 	// P_G1_P1Q0							
+	{0x3682, 0x89A7,}, 	// P_G1_P1Q1							
+	{0x3684, 0xFE6B,}, 	// P_G1_P1Q2							
+	{0x3686, 0x246B,}, 	// P_G1_P1Q3							
+	{0x3688, 0x25CD,}, 	// P_G1_P1Q4							
+	{0x368A, 0x82CB,}, 	// P_R_P1Q0							  
+	{0x368C, 0xDCE9,}, 	// P_R_P1Q1							  
+	{0x368E, 0x07AD,}, 	// P_R_P1Q2							  
+	{0x3690, 0x15CD,}, 	// P_R_P1Q3							  
+	{0x3692, 0xAD0B,}, 	// P_R_P1Q4							  
+	{0x3694, 0xA448,}, 	// P_B_P1Q0							  
+	{0x3696, 0x8B4D,}, 	// P_B_P1Q1							  
+	{0x3698, 0xF84A,}, 	// P_B_P1Q2							  
+	{0x369A, 0x3BCE,}, 	// P_B_P1Q3							  
+	{0x369C, 0x346D,}, 	// P_B_P1Q4							  
+	{0x369E, 0x226C,}, 	// P_G2_P1Q0							
+	{0x36A0, 0x1589,}, 	// P_G2_P1Q1							
+	{0x36A2, 0x8E0E,}, 	// P_G2_P1Q2							
+	{0x36A4, 0x52CB,}, 	// P_G2_P1Q3							
+	{0x36A6, 0x5F0D,}, 	// P_G2_P1Q4							
+	{0x36C0, 0x0BD0,}, 	// P_G1_P2Q0							
+	{0x36C2, 0xE26D,}, 	// P_G1_P2Q1							
+	{0x36C4, 0xAA70,}, 	// P_G1_P2Q2							
+	{0x36C6, 0x0670,}, 	// P_G1_P2Q3							
+	{0x36C8, 0x3570,}, 	// P_G1_P2Q4							
+	{0x36CA, 0x1C90,}, 	// P_R_P2Q0							  
+	{0x36CC, 0x53CB,}, 	// P_R_P2Q1							  
+	{0x36CE, 0x2BD0,}, 	// P_R_P2Q2							  
+	{0x36D0, 0x72EA,}, 	// P_R_P2Q3							  
+	{0x36D2, 0xAB92,}, 	// P_R_P2Q4							  
+	{0x36D4, 0x594F,}, 	// P_B_P2Q0							  
+	{0x36D6, 0xFBAC,}, 	// P_B_P2Q1							  
+	{0x36D8, 0xFAEF,}, 	// P_B_P2Q2							  
+	{0x36DA, 0x742F,}, 	// P_B_P2Q3							  
+	{0x36DC, 0x1C70,}, 	// P_B_P2Q4							  
+	{0x36DE, 0x0AB0,}, 	// P_G2_P2Q0							
+	{0x36E0, 0x922E,}, 	// P_G2_P2Q1							
+	{0x36E2, 0xB370,}, 	// P_G2_P2Q2							
+	{0x36E4, 0x0DB0,}, 	// P_G2_P2Q3							
+	{0x36E6, 0x1A70,}, 	// P_G2_P2Q4							
+	{0x3700, 0xA04D,}, 	// P_G1_P3Q0							
+	{0x3702, 0x992B,}, 	// P_G1_P3Q1							
+	{0x3704, 0x52AF,}, 	// P_G1_P3Q2							
+	{0x3706, 0xA54D,}, 	// P_G1_P3Q3							
+	{0x3708, 0xECB0,}, 	// P_G1_P3Q4							
+	{0x370A, 0x9ACB,}, 	// P_R_P3Q0							  
+	{0x370C, 0x784C,}, 	// P_R_P3Q1							  
+	{0x370E, 0xC0EB,}, 	// P_R_P3Q2							  
+	{0x3710, 0xA50E,}, 	// P_R_P3Q3							  
+	{0x3712, 0x0170,}, 	// P_R_P3Q4							  
+	{0x3714, 0x012E,}, 	// P_B_P3Q0							  
+	{0x3716, 0x182E,}, 	// P_B_P3Q1							  
+	{0x3718, 0xBB0E,}, 	// P_B_P3Q2							  
+	{0x371A, 0xBE4F,}, 	// P_B_P3Q3							  
+	{0x371C, 0x1A50,}, 	// P_B_P3Q4							  
+	{0x371E, 0x932D,}, 	// P_G2_P3Q0							
+	{0x3720, 0x594B,}, 	// P_G2_P3Q1							
+	{0x3722, 0x056F,}, 	// P_G2_P3Q2							
+	{0x3724, 0xFBEE,}, 	// P_G2_P3Q3							
+	{0x3726, 0x9970,}, 	// P_G2_P3Q4							
+	{0x3740, 0x9970,}, 	// P_G1_P4Q0							
+	{0x3742, 0x45AE,}, 	// P_G1_P4Q1							
+	{0x3744, 0xBF2E,}, 	// P_G1_P4Q2							
+	{0x3746, 0xE4D0,}, 	// P_G1_P4Q3							
+	{0x3748, 0x2211,}, 	// P_G1_P4Q4							
+	{0x374A, 0xAE2C,}, 	// P_R_P4Q0							  
+	{0x374C, 0x4D6C,}, 	// P_R_P4Q1							  
+	{0x374E, 0xF2B2,}, 	// P_R_P4Q2							  
+	{0x3750, 0x8FAE,}, 	// P_R_P4Q3							  
+	{0x3752, 0x0D94,}, 	// P_R_P4Q4							  
+	{0x3754, 0xEE8D,}, 	// P_B_P4Q0							  
+	{0x3756, 0x108F,}, 	// P_B_P4Q1							  
+	{0x3758, 0x932F,}, 	// P_B_P4Q2							  
+	{0x375A, 0xB111,}, 	// P_B_P4Q3							  
+	{0x375C, 0x1E52,}, 	// P_B_P4Q4							  
+	{0x375E, 0x9A30,}, 	// P_G2_P4Q0							
+	{0x3760, 0x22AF,}, 	// P_G2_P4Q1							
+	{0x3762, 0xDDCF,}, 	// P_G2_P4Q2							
+	{0x3764, 0xD3F0,}, 	// P_G2_P4Q3							
+	{0x3766, 0x0C52,}, 	// P_G2_P4Q4							
+	{0x3784, 0x02A0,}, 	// CENTER_COLUMN					
+	{0x3782, 0x01E0,}, 	// CENTER_ROW						  					
+	{0x098E, 0x0000,}, 	// LOGICAL_ADDRESS_ACCESS 
+	{0xC960, 0x0CD0,}, 	// CAM_PGA_L_CONFIG_COLOUR_TEMP
+	{0xC962, 0x7E60,}, 	// CAM_PGA_L_CONFIG_GREEN_RED_Q14
+	{0xC964, 0x7088,}, 	// CAM_PGA_L_CONFIG_RED_Q14
+	//{0xC964, 0x7588,}, 	// CAM_PGA_L_CONFIG_RED_Q14
+	{0xC966, 0x7D88,}, 	// CAM_PGA_L_CONFIG_GREEN_BLUE_Q14
+	{0xC968, 0x80CE,}, 	// CAM_PGA_L_CONFIG_BLUE_Q14
+	{0xC96A, 0x122A,}, 	// CAM_PGA_M_CONFIG_COLOUR_TEMP
+	{0xC96C, 0x7F94,}, 	// CAM_PGA_M_CONFIG_GREEN_RED_Q14
+	{0xC96E, 0x8053,}, 	// CAM_PGA_M_CONFIG_RED_Q14
+	{0xC970, 0x7FE0,}, 	// CAM_PGA_M_CONFIG_GREEN_BLUE_Q14
+	{0xC972, 0x7F11,}, 	// CAM_PGA_M_CONFIG_BLUE_Q14
+	{0xC974, 0x154A,}, 	// CAM_PGA_R_CONFIG_COLOUR_TEMP
+	{0xC976, 0x80DF,}, 	// CAM_PGA_R_CONFIG_GREEN_RED_Q14
+	{0xC978, 0x7800,}, 	// CAM_PGA_R_CONFIG_RED_Q14
+	//{0xC978, 0x829C,}, 	// CAM_PGA_R_CONFIG_RED_Q14
+	{0xC97A, 0x813F,}, 	// CAM_PGA_R_CONFIG_GREEN_BLUE_Q14
+	{0xC97C, 0x7DDB,}, 	// CAM_PGA_R_CONFIG_BLUE_Q14
+	{0xC95E, 0x0003,}, 	// CAM_PGA_PGA_CONTROL
+	{0x098E, 0xC87A,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x3E00,}, 	// CAM_AET_TARGET_AVERAGE_LUMA
+	{0x098E, 0xBC07,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x0100,}, 	// LL_GAMMA_SELECT 							 
+	{0xC892, 0x01D2,}, 	// CAM_AWB_CCM_L_0
+	{0xC894, 0xFEED,}, 	// CAM_AWB_CCM_L_1
+	{0xC896, 0xFFF1,}, 	// CAM_AWB_CCM_L_2
+	{0xC898, 0xFF6A,}, 	// CAM_AWB_CCM_L_3
+	{0xC89A, 0x01A5,}, 	// CAM_AWB_CCM_L_4
+	{0xC89C, 0xFFFB,}, 	// CAM_AWB_CCM_L_5
+	{0xC89E, 0xFF91,}, 	// CAM_AWB_CCM_L_6
+	{0xC8A0, 0xFF51,}, 	// CAM_AWB_CCM_L_7
+	//{0xC8A0, 0xFED1,}, 	// CAM_AWB_CCM_L_7
+	{0xC8A2, 0x02C9,}, 	// CAM_AWB_CCM_L_8
+	{0xC8A4, 0x01E5,}, 	// CAM_AWB_CCM_M_0
+	{0xC8A6, 0xFED7,}, 	// CAM_AWB_CCM_M_1
+	{0xC8A8, 0xFFEF,}, 	// CAM_AWB_CCM_M_2
+	{0xC8AA, 0xFF34,}, 	// CAM_AWB_CCM_M_3
+	{0xC8AC, 0x01DD,}, 	// CAM_AWB_CCM_M_4
+	{0xC8AE, 0xFFFA,}, 	// CAM_AWB_CCM_M_5
+	{0xC8B0, 0xFF88,}, 	// CAM_AWB_CCM_M_6
+	{0xC8B2, 0xFEBB,}, 	// CAM_AWB_CCM_M_7
+	{0xC8B4, 0x02EB,}, 	// CAM_AWB_CCM_M_8
+	{0xC8B6, 0x017F,}, 	// CAM_AWB_CCM_R_0
+	{0xC8B8, 0xFF78,}, 	// CAM_AWB_CCM_R_1
+	{0xC8BA, 0xFFFC,}, 	// CAM_AWB_CCM_R_2
+	{0xC8BC, 0xFF90,}, 	// CAM_AWB_CCM_R_3
+	{0xC8BE, 0x0152,}, 	// CAM_AWB_CCM_R_4
+	{0xC8C0, 0xFFEB,}, 	// CAM_AWB_CCM_R_5
+	{0xC8C2, 0xFFB1,}, 	// CAM_AWB_CCM_R_6
+	{0xC8C4, 0xFF09,}, 	// CAM_AWB_CCM_R_7
+	//{0xC8C4, 0xFED9,}, 	// CAM_AWB_CCM_R_7
+	{0xC8C6, 0x02DE,}, 	// CAM_AWB_CCM_R_8
+	{0xC8C8, 0x0075,}, 	// CAM_AWB_CCM_L_RG_GAIN
+	{0xC8CA, 0x011C,}, 	// CAM_AWB_CCM_L_BG_GAIN
+	{0xC8CC, 0x009A,}, 	// CAM_AWB_CCM_M_RG_GAIN
+	{0xC8CE, 0x0105,}, 	// CAM_AWB_CCM_M_BG_GAIN
+	{0xC8D0, 0x00A4,}, 	// CAM_AWB_CCM_R_RG_GAIN
+	{0xC8D2, 0x00AC,}, 	// CAM_AWB_CCM_R_BG_GAIN
+	{0xC8D4, 0x0A8C,}, 	// CAM_AWB_CCM_L_CTEMP
+	{0xC8D6, 0x0F0A,}, 	// CAM_AWB_CCM_M_CTEMP
+	{0xC8D8, 0x1964,}, 	// CAM_AWB_CCM_R_CTEMP
+	{0xC914, 0x0000,}, 	// CAM_STAT_AWB_CLIP_WINDOW_XSTART
+	{0xC916, 0x0000,}, 	// CAM_STAT_AWB_CLIP_WINDOW_YSTART
+	{0xC918, 0x04FF,}, 	// CAM_STAT_AWB_CLIP_WINDOW_XEND
+	{0xC91A, 0x03BF,}, 	// CAM_STAT_AWB_CLIP_WINDOW_YEND
+	{0xC904, 0x0033,}, 	// CAM_AWB_AWB_XSHIFT_PRE_ADJ
+	{0xC906, 0x0044,}, 	// CAM_AWB_AWB_YSHIFT_PRE_ADJ
+	//{0xC906, 0x0040,}, 	// CAM_AWB_AWB_YSHIFT_PRE_ADJ
+	{0xC90A, 0x0ED8,}, 	// CAM_AWB_TINTS_CTEMP_THRESHOLD
+	//{0xC90A, 0x0DAC,}, 	// CAM_AWB_TINTS_CTEMP_THRESHOLD
+	{0x098E, 0xC8F2,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x0400,}, 	// CAM_AWB_AWB_XSCALE	
+	{0x098E, 0xC8F3,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x0200,}, 	// CAM_AWB_AWB_XSCALE	
+	{0xC8F4, 0x0000,}, 	// CAM_AWB_AWB_WEIGHTS_0
+	{0xC8F6, 0x0000,}, 	// CAM_AWB_AWB_WEIGHTS_1
+	{0xC8F8, 0x0000,}, 	// CAM_AWB_AWB_WEIGHTS_2
+	{0xC8FA, 0xE724,}, 	// CAM_AWB_AWB_WEIGHTS_3
+	{0xC8FC, 0x1580,}, 	// CAM_AWB_AWB_WEIGHTS_4
+	{0xC8FE, 0x2045,}, 	// CAM_AWB_AWB_WEIGHTS_5
+	{0xC900, 0x063E,}, 	// CAM_AWB_AWB_WEIGHTS_6
+	{0xC902, 0x007C,}, 	// CAM_AWB_AWB_WEIGHTS_7
+	{0x098E, 0xC90C,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x7000,}, 	// CAM_AWB_K_R_L
+	//{0x0990, 0x8000,}, 	// CAM_AWB_K_R_L
+	{0x098E, 0xC90D,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x8000,}, 	// CAM_AWB_K_G_L
+	{0x098E, 0xC90E,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x7400,}, 	// CAM_AWB_K_B_L
+	{0x098E, 0xC90F,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x8000,}, 	// CAM_AWB_K_R_R
+	{0x098E, 0xC910,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x8000,}, 	// CAM_AWB_K_G_R
+	{0x098E, 0xC911,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x8000,}, 	// CAM_AWB_K_B_R
+	{0x098E, 0xC912,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x0000,}, 	// CAM_STAT_LUMA_THRESH_LOW
+	{0x098E, 0xAC0C,}, 	// LOGICAL_ADDRESS_ACCESS [AWB_B_SCENE_RATIO_LOWER]
+	{0x0990, 0x2300,}, 	// AWB_B_SCENE_RATIO_LOWER
+	{0x098E, 0xAC16,}, 	// AWB_PRE_AWB_RATIOS_TRACKING_SPEED   // 2011.07.04
+	{0x0990, 0x2000,},
+	{0x098E, 0xAC17,}, 	// AWB_STATISTICS_TRACKING_SPEED  // 2011.07.04
+	{0x0990, 0x2000,},
+	{0xC926, 0x0020,}, 	// CAM_LL_START_BRIGHTNESS
+	{0xC928, 0x009A,}, 	// CAM_LL_STOP_BRIGHTNESS
+	{0xC946, 0x0070,}, 	// CAM_LL_START_GAIN_METRIC
+	{0xC948, 0x00F3,}, 	// CAM_LL_STOP_GAIN_METRIC
+	{0xC952, 0x0020,}, 	// CAM_LL_START_TARGET_LUMA_BM
+	{0xC954, 0x009A,}, 	// CAM_LL_STOP_TARGET_LUMA_BM
+	{0x098E, 0xC92A,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x8000,}, 	// CAM_LL_START_SATURATION   // 2011.07.04
+	{0x098E, 0xC92B,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x7000,}, 	// CAM_LL_END_SATURATION    // 2011.07.04
+	{0x098E, 0xC92C,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x0000,}, 	// CAM_LL_START_DESATURATION
+	{0x098E, 0xC92D,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x9F00,}, 	// CAM_LL_END_DESATURATION
+	{0x098E, 0xC92E,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x7000,}, 	// CAM_LL_START_DEMOSAIC   // 2011.07.04
+	{0x098E, 0xC95B,}, 	// LOGICAL_ADDRESS_ACCESS 			
+	{0x0990, 0x0000,}, 	// CAM_SEQ_DARK_COLOR_KILL
+	{0x098E, 0xC95C,}, 	// LOGICAL_ADDRESS_ACCESS  
+	{0x0990, 0x6200,}, 	// CAM_SEQ_BRIGHT_COLOR_KILL       
+	{0x098E, 0x4948,}, 	// LOGICAL_ADDRESS_ACCESS
+ 	{0xC948, 0x01A0,}, 	// CAM_LL_STOP_GAIN_METRIC
+	{0x098E, 0xC92F,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x0700,}, 	// CAM_LL_START_AP_GAIN   // 2011.07.04
+	{0x098E, 0xC930,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x0300,}, 	// CAM_LL_START_AP_THRESH
+	{0x098E, 0xC931,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x6400,}, 	// CAM_LL_STOP_DEMOSAIC
+	{0x098E, 0xC932,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x0700,}, 	// CAM_LL_STOP_AP_GAIN
+	{0x098E, 0xC933,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x0700,}, 	// CAM_LL_STOP_AP_THRESH
+	{0x098E, 0xC934,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x3C00,}, 	// CAM_LL_START_NR_RED
+	{0x098E, 0xC935,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x2C00,}, 	// CAM_LL_START_NR_GREEN
+	{0x098E, 0xC936,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x3C00,}, 	// CAM_LL_START_NR_BLUE
+	{0x098E, 0xC937,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x1000,}, 	// CAM_LL_START_NR_THRESH
+	{0x098E, 0xC938,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x6400,}, 	// CAM_LL_STOP_NR_RED
+	{0x098E, 0xC939,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x6400,}, 	// CAM_LL_STOP_NR_GREEN
+	{0x098E, 0xC93A,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x6400,}, 	// CAM_LL_STOP_NR_BLUE
+	{0x098E, 0xC93B,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x3200,}, 	// CAM_LL_STOP_NR_THRESH
+	{0xC93C, 0x0020,}, 	// CAM_LL_START_CONTRAST_BM
+	{0xC93E, 0x009A,}, 	// CAM_LL_STOP_CONTRAST_BM
+	{0xC940, 0x00DC,}, 	// CAM_LL_GAMMA
+	{0x098E, 0xC942,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x3C00,}, 	// CAM_LL_START_CONTRAST_GRADIENT
+	{0x098E, 0xC943,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x2800,}, 	// CAM_LL_STOP_CONTRAST_GRADIENT
+	{0x098E, 0xC944,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x3C00,}, 	// CAM_LL_START_CONTRAST_LUMA_PERCENTAGE
+	{0x098E, 0xC945,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x2000,}, 	// CAM_LL_STOP_CONTRAST_LUMA_PERCENTAGE
+	{0xC94A, 0x0230,}, 	// CAM_LL_START_FADE_TO_BLACK_LUMA
+	{0xC94C, 0x0010,}, 	// CAM_LL_STOP_FADE_TO_BLACK_LUMA
+	{0xC94E, 0x01CD,}, 	// CAM_LL_CLUSTER_DC_TH_BM
+	{0x098E, 0xC950,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x0500,}, 	// CAM_LL_CLUSTER_DC_GATE_PERCENTAGE
+	{0x098E, 0xC951,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x4000,}, 	// CAM_LL_SUMMING_SENSITIVITY_FACTOR
+	{0x098E, 0xC87B,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x1B00,}, 	// CAM_AET_TARGET_AVERAGE_LUMA_DARK
+	{0x098E, 0xC878,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x0800,}, 	// CAM_AET_AEMODE = 0
+	{0xC890, 0x0080,}, 	// CAM_AET_TARGET_GAIN
+	{0xC882, 0x00C0,}, 	// CAM_AET_AE_MAX_VIRT_DGAIN
+	{0xC886, 0x0100,}, 	// CAM_AET_AE_MAX_VIRT_AGAIN
+	{0xC87C, 0x000A,}, 	// CAM_AET_BLACK_CLIPPING_TARGET
+	{0x098E, 0xB00C,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x2500,}, 	//1A00	// BLACKLEVEL_MAX_BLACK_LEVEL     
+	{0x098E, 0xB00D,}, 	// LOGICAL_ADDRESS_ACCESS [BLACKLEVEL_BLACK_LEVEL_DAMPENING]
+	{0x0990, 0x1000,}, 	// BLACKLEVEL_BLACK_LEVEL_DAMPENING  
+	{0x098E, 0xB42A,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x0500,}, 	// CCM_DELTA_GAIN
+	{0x098E, 0xA80A,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x2000,}, 	// AE_TRACK_AE_TRACKING_DAMPENING_SPEED
+	{0xC984, 0x8001,}, 	// CAM_PORT_OUTPUT_CONTROL
+	{0x001E, 0x0777,}, 	// PAD_SLEW
+	{0x098E, 0xB42C,}, 	// LOGICAL_ADDRESS_ACCESS [CCM_GREY_SATURATION]
+	{0x0990, 0x7000,}, 	// CCM_GREY_SATURATION      // 2011.07.04
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* set 1280x960 size */
+/* change the order of mipi control register set */
+#if 1
+	{0xC984, 0x8041,},	/*mipi_output_control*/                               
+	{0xC988, 0x0F00,},	/*mipi_timing_t_hs_zero = 3840*/                      
+	{0xC98A, 0x0B07,},	/*mipi_timing_t_hs_exit_hs_trail = 2823*/             
+	{0xC98C, 0x0D01,},	/*mipi_timing_t_clk_post_clk_pre = 3329*/             
+	{0xC98E, 0x071D,},	/*mipi_timing_t_clk_trail_clk_zero = 1821*/           
+	{0xC990, 0x0006,},	/*mipi_timing_t_lpx = 6*/                             
+	{0xC992, 0x0A0C,},  /*mipi_timing_init_timing = 2572*/                    
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+	{0x098E, 0xDC00,}, 	// LOGICAL_ADDRESS_ACCESS
+	{0x0990, 0x2800,}, 	// AE_TRACK_AE_TRACKING_DAMPENING_SPEED
+	{0x0080, 0x8002,}, 	// COMMAND_REGISTER
+	{0x0080, 0xFFF0, MSM_CAMERA_I2C_WORD_DATA, MSM_CAMERA_I2C_CMD_POLL},	//jaemoon.hwang add
+};
+#else	/* original register values by Qualcomm */
 static struct msm_camera_i2c_reg_conf mt9m114_recommend_settings[] = {
 	{0x301A, 0x0200, MSM_CAMERA_I2C_SET_WORD_MASK},
 	{0x098E, 0, MSM_CAMERA_I2C_BYTE_DATA},
@@ -1026,6 +2395,7 @@
 	{0xC878, 0x08, MSM_CAMERA_I2C_SET_BYTE_MASK},
 	{0xBC02, 0x08, MSM_CAMERA_I2C_UNSET_BYTE_MASK},
 };
+#endif
 
 static struct v4l2_subdev_info mt9m114_subdev_info[] = {
 	{
@@ -1039,17 +2409,38 @@
 
 static struct msm_camera_i2c_reg_conf mt9m114_config_change_settings[] = {
 	{0xdc00, 0x28, MSM_CAMERA_I2C_BYTE_DATA, MSM_CAMERA_I2C_CMD_WRITE},
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* improve camera opening time by removing setting value of MSM_CAMERA_I2C_CMD_POLL */
+#if 0
 	{MT9M114_COMMAND_REGISTER, MT9M114_COMMAND_REGISTER_SET_STATE,
 		MSM_CAMERA_I2C_UNSET_WORD_MASK, MSM_CAMERA_I2C_CMD_POLL},
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	{MT9M114_COMMAND_REGISTER, (MT9M114_COMMAND_REGISTER_OK |
 		MT9M114_COMMAND_REGISTER_SET_STATE), MSM_CAMERA_I2C_WORD_DATA,
 		MSM_CAMERA_I2C_CMD_WRITE},
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* improve camera opening time by removing setting value of MSM_CAMERA_I2C_CMD_POLL */
+/* should check if this register need to be set or not again for compatibility someday */
+#if 0
 	{MT9M114_COMMAND_REGISTER, MT9M114_COMMAND_REGISTER_SET_STATE,
 		MSM_CAMERA_I2C_UNSET_WORD_MASK, MSM_CAMERA_I2C_CMD_POLL},
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	{0xDC01, 0x31, MSM_CAMERA_I2C_BYTE_DATA},
 };
 
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* improve stability of mt9m114 sensor by adding stop_stream register */
+/* remove stop_stream register 05/17 */
+#if 0	/* added */
+static struct msm_camera_i2c_reg_conf mt9m114_stop_stream_conf[] = {
+	{0x301A, 0x0230 , MSM_CAMERA_I2C_WORD_DATA, MSM_CAMERA_I2C_CMD_WRITE}
+};
+#else	/* org */
 static void mt9m114_stop_stream(struct msm_sensor_ctrl_t *s_ctrl) {}
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 
 static struct msm_camera_i2c_conf_array mt9m114_init_conf[] = {
 	{mt9m114_recommend_settings,
@@ -1079,15 +2470,26 @@
 };
 
 static struct msm_camera_i2c_reg_conf mt9m114_refresh[] = {
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* improve camera opening time by removing setting value of MSM_CAMERA_I2C_CMD_POLL */
+#if 0
 	{MT9M114_COMMAND_REGISTER, MT9M114_COMMAND_REGISTER_REFRESH,
 		MSM_CAMERA_I2C_UNSET_WORD_MASK, MSM_CAMERA_I2C_CMD_POLL},
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	{MT9M114_COMMAND_REGISTER, (MT9M114_COMMAND_REGISTER_OK |
 		MT9M114_COMMAND_REGISTER_REFRESH), MSM_CAMERA_I2C_WORD_DATA,
 		MSM_CAMERA_I2C_CMD_WRITE},
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* improve camera opening time by removing setting value of MSM_CAMERA_I2C_CMD_POLL */
+/* should check if this register need to be set or not again for compatibility someday */
+#if 0
 	{MT9M114_COMMAND_REGISTER, MT9M114_COMMAND_REGISTER_REFRESH,
 		MSM_CAMERA_I2C_UNSET_WORD_MASK, MSM_CAMERA_I2C_CMD_POLL},
 	{MT9M114_COMMAND_REGISTER, MT9M114_COMMAND_REGISTER_OK,
 		MSM_CAMERA_I2C_SET_WORD_MASK, MSM_CAMERA_I2C_CMD_POLL},
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 };
 
 static struct msm_camera_i2c_conf_array mt9m114_saturation_confs[][2] = {
@@ -1175,11 +2577,25 @@
 static struct msm_sensor_output_info_t mt9m114_dimensions[] = {
 	{
 		.x_output = 0x500,
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* set 1280x960 size */
+#if 1
+		.y_output = 0x3C0,
+#else
 		.y_output = 0x2D0,
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 		.line_length_pclk = 0x500,
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* set 1280x960 size */
+#if 1
+		.frame_length_lines = 0x3C0,
+#else
 		.frame_length_lines = 0x2D0,
-		.vt_pixel_clk = 48000000,
-		.op_pixel_clk = 128000000,
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+		.vt_pixel_clk = 768000000,
+		.op_pixel_clk = 768000000,
 		.binning_factor = 1,
 	},
 };
@@ -1191,6 +2607,7 @@
 
 static struct msm_camera_csi2_params mt9m114_csi_params = {
 	.csid_params = {
+		.lane_assign = 0xe4,
 		.lane_cnt = 1,
 		.lut_params = {
 			.num_cid = 2,
@@ -1260,7 +2677,15 @@
 
 static struct msm_sensor_fn_t mt9m114_func_tbl = {
 	.sensor_start_stream = msm_sensor_start_stream,
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* improve stability of mt9m114 sensor by adding stop_stream register */
+/* remove stop_stream register 05/17 */
+#if 0	/* added */
+	.sensor_stop_stream = msm_sensor_stop_stream,
+#else	/* org */
 	.sensor_stop_stream = mt9m114_stop_stream,
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	.sensor_setting = msm_sensor_setting,
 	.sensor_set_sensor_mode = msm_sensor_set_sensor_mode,
 	.sensor_mode_init = msm_sensor_mode_init,
@@ -1268,6 +2693,18 @@
 	.sensor_config = msm_sensor_config,
 	.sensor_power_up = msm_sensor_power_up,
 	.sensor_power_down = msm_sensor_power_down,
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* SENSOR_SET_WB */
+#if 1
+	.sensor_set_wb = msm_sensor_set_wb,
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* SENSOR_SET_BRIGHTNESS */
+#if 1
+	.sensor_set_brightness = msm_sensor_set_brightness,
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	.sensor_get_csi_params = msm_sensor_get_csi_params,
 };
 
@@ -1275,6 +2712,14 @@
 	.default_data_type = MSM_CAMERA_I2C_BYTE_DATA,
 	.start_stream_conf = mt9m114_config_change_settings,
 	.start_stream_conf_size = ARRAY_SIZE(mt9m114_config_change_settings),
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* improve stability of mt9m114 sensor by adding stop_stream register */
+/* remove stop_stream register 05/17 */
+#if 0 /* added */
+	.stop_stream_conf = mt9m114_stop_stream_conf,
+	.stop_stream_conf_size = ARRAY_SIZE(mt9m114_stop_stream_conf),
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 	.init_settings = &mt9m114_init_conf[0],
 	.init_size = ARRAY_SIZE(mt9m114_init_conf),
 	.mode_settings = &mt9m114_confs[0],
diff -urN caf/drivers/media/video/msm/sensors/s5k4e5.c for-diff/drivers/media/video/msm/sensors/s5k4e5.c
--- caf/drivers/media/video/msm/sensors/s5k4e5.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/media/video/msm/sensors/s5k4e5.c	2015-09-13 14:02:59.961921000 +0900
@@ -0,0 +1,635 @@
+/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/module.h>
+#include "msm_sensor.h"
+#include "s5k4e5.h"
+#define SENSOR_NAME "s5k4e5"
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1
+#define SENSOR_EEPROM_NAME "s5k4e5_eeprom"
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+#define PLATFORM_DRIVER_NAME "msm_camera_s5k4e5"
+#define s5k4e5_obj s5k4e5_##obj
+
+DEFINE_MUTEX(s5k4e5_mut);
+static struct msm_sensor_ctrl_t s5k4e5_s_ctrl;
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1
+static struct msm_sensor_ctrl_t s5k4e5_eeprom_s_ctrl;
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
+static struct msm_camera_i2c_reg_conf s5k4e5_start_settings[] = {
+	{0x0100, 0x01},
+};
+
+static struct msm_camera_i2c_reg_conf s5k4e5_stop_settings[] = {
+	{0x0100, 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf s5k4e5_groupon_settings[] = {
+	{0x0104, 0x01},
+};
+
+static struct msm_camera_i2c_reg_conf s5k4e5_groupoff_settings[] = {
+	{0x0104, 0x0},
+};
+
+static struct msm_camera_i2c_reg_conf s5k4e5_prev_settings[] = {
+
+	// Integration setting ... 				
+	{0x0200, 0x03},		// fine integration time				
+	{0x0201, 0x5C},				
+	{0x0202, 0x03},		// coarse integration time				
+	{0x0203, 0xd0},				
+	{0x0204, 0x00},		// Analog Gain				
+	{0x0205, 0x20},				
+	{0x0340, 0x07},		// Frame Length				
+	{0x0341, 0xB4},				
+	{0x0342, 0x0A},		//line_length_pclk			
+	{0x0343, 0xB2},				
+	//Size Setting ...				
+	// 2608x1960				
+	{0x30A9, 0x03},		//Horizontal Binning Off				
+	{0x300E, 0x28},		//Vertical Binning Off				
+	{0x302B, 0x01},				
+	{0x3029, 0x34},		// DBLR & PLA				
+	{0x0380, 0x00},		//x_even_inc 1				
+	{0x0381, 0x01},
+	{0x0382, 0x00},		//x_odd_inc 1
+	{0x0383, 0x01},
+	{0x0384, 0x00},		//y_even_inc 1
+	{0x0385, 0x01},
+	{0x0386, 0x00},		//y_odd_inc 3
+	{0x0387, 0x01},
+	{0x0344, 0x00},		//x_addr_start
+	{0x0345, 0x00},
+	{0x0346, 0x00},		//y_addr_start
+	{0x0347, 0x00},
+	{0x0348, 0x0A},		//x_addr_end
+	{0x0349, 0x2F},
+	{0x034A, 0x07},		//y_addr_end
+	{0x034B, 0xA7},
+	{0x034C, 0x0A},		//x_output_size_High
+	{0x034D, 0x30},
+	{0x034E, 0x07},		//y_output_size_High
+	{0x034F, 0xA8},
+};
+
+static struct msm_camera_i2c_reg_conf s5k4e5_snap_settings[] = {
+	// Integration setting ... 				
+	{0x0200, 0x03},		// fine integration time				
+	{0x0201, 0x5C},				
+	{0x0202, 0x03},		// coarse integration time				
+	{0x0203, 0xd0},				
+	{0x0204, 0x00},		// Analog Gain				
+	{0x0205, 0x20},				
+	{0x0340, 0x07},		// Frame Length				
+	{0x0341, 0xB4},				
+	{0x0342, 0x0A},		//line_length_pclk			
+	{0x0343, 0xB2},				
+	//Size Setting ...				
+	// 2608x1960				
+	{0x30A9, 0x03},		//Horizontal Binning Off				
+	{0x300E, 0x28},		//Vertical Binning Off				
+	{0x302B, 0x01},				
+	{0x3029, 0x34},		// DBLR & PLA				
+	{0x0380, 0x00},		//x_even_inc 1				
+	{0x0381, 0x01},
+	{0x0382, 0x00},		//x_odd_inc 1
+	{0x0383, 0x01},
+	{0x0384, 0x00},		//y_even_inc 1
+	{0x0385, 0x01},
+	{0x0386, 0x00},		//y_odd_inc 3
+	{0x0387, 0x01},
+	{0x0344, 0x00},		//x_addr_start
+	{0x0345, 0x00},
+	{0x0346, 0x00},		//y_addr_start
+	{0x0347, 0x00},
+	{0x0348, 0x0A},		//x_addr_end
+	{0x0349, 0x2F},
+	{0x034A, 0x07},		//y_addr_end
+	{0x034B, 0xA7},
+	{0x034C, 0x0A},		//x_output_size_High
+	{0x034D, 0x30},
+	{0x034E, 0x07},		//y_output_size_High
+	{0x034F, 0xA8},
+};
+
+static struct msm_camera_i2c_reg_conf s5k4e5_1080p_settings[] = {
+	// Integration setting ... 				
+	{0x0200, 0x03},		// fine integration time				
+	{0x0201, 0x5C},				
+	{0x0202, 0x03},		// coarse integration time				
+	{0x0203, 0xd0},				
+	{0x0204, 0x00},		// Analog Gain				
+	{0x0205, 0x20},				
+	{0x0340, 0x07},		// Frame Length				
+	{0x0341, 0xB4},				
+	{0x0342, 0x0A},		//line_length_pclk
+	{0x0343, 0xB2},				
+	//Size Setting ...				
+	// 2608x1960				
+	{0x30A9, 0x03},		//Horizontal Binning Off
+	{0x300E, 0x28},		//Vertical Binning Off
+	{0x302B, 0x01},				
+	{0x3029, 0x34},		// DBLR & PLA				
+	{0x0380, 0x00},		//x_even_inc 1				
+	{0x0381, 0x01},
+	{0x0382, 0x00},		//x_odd_inc 1
+	{0x0383, 0x01},
+	{0x0384, 0x00},		//y_even_inc 1
+	{0x0385, 0x01},
+	{0x0386, 0x00},		//y_odd_inc 3
+	{0x0387, 0x01},
+	{0x0344, 0x00},		//x_addr_start
+	{0x0345, 0x00},
+	{0x0346, 0x00},		//y_addr_start
+	{0x0347, 0x00},
+	{0x0348, 0x0A},		//x_addr_end
+	{0x0349, 0x2F},
+	{0x034A, 0x07},		//y_addr_end
+	{0x034B, 0xA7},
+	{0x034C, 0x0A},		//x_output_size_High
+	{0x034D, 0x30},
+	{0x034E, 0x07},		//y_output_size_High
+	{0x034F, 0xA8},
+};
+
+static struct msm_camera_i2c_reg_conf s5k4e5_recommend_settings[] = {
+
+	// Sensor reset
+	{0x0103, 0x1},		// TBD : test				
+	
+	//+++++++++++++++++++++++++++++++//
+	// Analog Setting
+	//// CDS timing setting ...
+	{0x3000, 0x05},
+	{0x3001, 0x03},
+	{0x3002, 0x08},
+	{0x3003, 0x0A},
+	{0x3004, 0x50},
+	{0x3005, 0x0E},
+	{0x3006, 0x5E},
+	{0x3007, 0x00},
+	{0x3008, 0x78},
+	{0x3009, 0x78},
+	{0x300A, 0x50},
+	{0x300B, 0x08},
+	{0x300C, 0x14},
+	{0x300D, 0x00},
+	{0x300F, 0x40},
+	{0x301B, 0x77},
+
+	// CDS option setting ...
+	{0x3010, 0x00},
+	{0x3011, 0x3A},
+	{0x3012, 0x30},
+	{0x3013, 0xA0},
+	{0x3014, 0x00},
+	{0x3015, 0x00},
+	{0x3016, 0x52},
+	{0x3017, 0x94},
+	{0x3018, 0x70},
+	{0x301D, 0xD4},
+	{0x3021, 0x02},
+	{0x3022, 0x24},
+	{0x3024, 0x40},
+	{0x3027, 0x08},
+
+	// Pixel option setting ...      
+	{0x301C, 0x06},
+	{0x30D8, 0x3F},
+
+	//+++++++++++++++++++++++++++++++//
+	// ADLC setting ...
+	{0x3070, 0x5F},
+	{0x3071, 0x00},
+	{0x3080, 0x04},
+	{0x3081, 0x38},
+	{0x302E, 0x0B},
+
+	//+++++++++++++++++++++++++++++++++//
+	//Mirror setting
+	{0x0101, 0x00}, // kuzuri_jb from O7 main.. O9: 0x03
+  
+	// MIPI setting				
+	{0x30BD, 0x00},		//SEL_CCP[0]				
+	{0x3084, 0x15},		//SYNC Mode				
+	{0x30BE, 0x1A},		//M_PCLKDIV_AUTO[4], M_DIV_PCLK[3:0]				
+	{0x30C1, 0x01},		//pack video enable [0]				
+	{0x30EE, 0x02},		//DPHY enable [1]				
+	{0x3111, 0x86},		//Embedded data off [5]				
+	{0x30E8, 0x0F},		//Continuous mode 			
+	{0x30E3, 0x38},		//According to MCLK			
+	{0x30E4, 0x40},				
+	{0x3113, 0x70},				
+	{0x3114, 0x80},				
+	{0x3115, 0x7B},				
+	{0x3116, 0xC0},				
+	{0x30EE, 0x12},				
+
+	// PLL setting ...				
+	{0x0305, 0x06},				
+	{0x0306, 0x00},
+	{0x0307, 0x64},				
+	{0x30B5, 0x00},
+	{0x30E2, 0x02},		//num lanes[1:0] = 2				
+	{0x30F1, 0xD0},		// DPHY Band Control			
+	{0x30BC, 0xB0},		// [7]bit : DBLR enable, [6]~[3]bit : DBLR Div			
+										// DBLR clock = Pll output/DBLR Div = 66.6Mhz			
+	{0x30BF, 0xAB},		//outif_enable[7], data_type[5:0](2Bh = bayer 10bit)				
+	{0x30C0, 0x80},		//video_offset[7:4]				
+	{0x30C8, 0x0C},		//video_data_length 				
+	{0x30C9, 0xBC},				
+	{0x3112, 0x00},		//gain option sel off			
+	{0x3030, 0x07},		//old shut mode	
+	
+};
+
+static struct v4l2_subdev_info s5k4e5_subdev_info[] = {
+	{
+	.code   = V4L2_MBUS_FMT_SBGGR10_1X10,
+	.colorspace = V4L2_COLORSPACE_JPEG,
+	.fmt    = 1,
+	.order    = 0,
+	},
+	/* more can be supported, to be added later */
+};
+
+static struct msm_camera_i2c_conf_array s5k4e5_init_conf[] = {
+	{&s5k4e5_recommend_settings[0],
+	ARRAY_SIZE(s5k4e5_recommend_settings), 0, MSM_CAMERA_I2C_BYTE_DATA}
+};
+
+static struct msm_camera_i2c_conf_array s5k4e5_confs[] = {
+	{&s5k4e5_prev_settings[0],
+	ARRAY_SIZE(s5k4e5_prev_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
+	{&s5k4e5_snap_settings[0],
+	ARRAY_SIZE(s5k4e5_snap_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
+	{&s5k4e5_1080p_settings[0],
+	ARRAY_SIZE(s5k4e5_1080p_settings), 0, MSM_CAMERA_I2C_BYTE_DATA},
+};
+
+static struct msm_sensor_output_info_t s5k4e5_dimensions[] = {
+	{
+		.x_output = 0xA30,
+		.y_output = 0x7A8,
+		//.line_length_pclk = 0x85c,	//jaemoon.hwang
+		.line_length_pclk = 0xAB2,
+		//.frame_length_lines = 0x460,	//jaemoon.hwang
+		.frame_length_lines = 0x7B4,
+		.vt_pixel_clk = 160000000,
+		.op_pixel_clk = 160000000,
+		.binning_factor = 1,
+	},
+	{
+		.x_output = 0xA30,
+		.y_output = 0x7A8,
+		//.line_length_pclk = 0x85c,	//jaemoon.hwang
+		.line_length_pclk = 0xAB2,
+		//.frame_length_lines = 0x460,	//jaemoon.hwang
+		.frame_length_lines = 0x7B4,
+		.vt_pixel_clk = 160000000,
+		.op_pixel_clk = 160000000,
+		.binning_factor = 1,
+	},
+	{
+		.x_output = 0xA30,
+		.y_output = 0x7A8,
+		//.line_length_pclk = 0x85c,	//jaemoon.hwang
+		.line_length_pclk = 0xAB2,
+		//.frame_length_lines = 0x460,	//jaemoon.hwang
+		.frame_length_lines = 0x7B4,
+		.vt_pixel_clk = 160000000,
+		.op_pixel_clk = 160000000,
+		.binning_factor = 1,
+	},
+};
+
+
+#if 1
+static struct msm_camera_csid_vc_cfg s5k4e5_cid_cfg[] = {
+	{0, CSI_RAW10, CSI_DECODE_10BIT},
+	{1, CSI_EMBED_DATA, CSI_DECODE_8BIT},
+};
+
+static struct msm_camera_csi2_params s5k4e5_csi_params = {
+	.csid_params = {
+		.lane_assign = 0xe4,
+		.lane_cnt = 2,
+		.lut_params = {
+			.num_cid = 2,
+			.vc_cfg = s5k4e5_cid_cfg,
+		},
+	},
+	.csiphy_params = {
+		.lane_cnt = 2,
+		//.settle_cnt = 0x1B,
+		.settle_cnt = 0x14,	//from s5k3h2
+	},
+};
+
+static struct msm_camera_csi2_params *s5k4e5_csi_params_array[] = {
+	&s5k4e5_csi_params,
+	&s5k4e5_csi_params,
+	&s5k4e5_csi_params,
+};
+
+#else
+static struct msm_camera_csi_params s5k4e5_csi_params = {
+	.data_format = CSI_10BIT,
+	.lane_cnt    = 2,
+	.lane_assign = 0xe4,
+	.dpcm_scheme = 0,
+	.settle_cnt  = 24,
+};
+
+static struct msm_camera_csi_params *s5k4e5_csi_params_array[] = {
+	&s5k4e5_csi_params,
+	&s5k4e5_csi_params,
+};
+
+#endif
+
+static struct msm_sensor_output_reg_addr_t s5k4e5_reg_addr = {
+	.x_output = 0x034C,
+	.y_output = 0x034E,
+	.line_length_pclk = 0x0342,
+	.frame_length_lines = 0x0340,	
+};
+
+static struct msm_sensor_id_info_t s5k4e5_id_info = {
+	.sensor_id_reg_addr = 0x0000,
+	//.sensor_id = 0x4E10,	//jaemoon.hwang
+	.sensor_id = 0x4E50,
+};
+
+static struct msm_sensor_exp_gain_info_t s5k4e5_exp_gain_info = {
+	.coarse_int_time_addr = 0x0202,
+	.global_gain_addr = 0x0204,
+	//.vert_offset = 3,
+	.vert_offset = 8, 		//from s5k3h2  // kuzuri_jb from O9 perf
+//	.vert_offset = 12, 		//from s5k3h2  // kuzuri_test_cam
+};
+
+static int32_t s5k4e5_write_exp_gain(struct msm_sensor_ctrl_t *s_ctrl,
+		uint16_t gain, uint32_t line)
+{
+	/* Begin - jaemoon.hwang@kttech.co.kr */
+	/* remove red line noise in low light environment */
+	/* This code comes from msm8260 */
+	/* So, needs debuging based on msm8960 */
+#if 1
+	uint16_t max_legal_gain = 0x0200;
+	int32_t rc = 0;
+	static uint32_t fl_lines;
+
+  printk("S5k_sensor: write_exp_gain(): Max legal gain= 0x%X at Line:%d\n", gain, __LINE__);
+	if (gain > max_legal_gain) {
+		gain = max_legal_gain;
+	}
+	/* Analogue Gain */
+	msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0204, 
+		(gain&0xFF00)>>8, MSM_CAMERA_I2C_BYTE_DATA);
+	msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0205, 
+		gain&0xFF, MSM_CAMERA_I2C_BYTE_DATA);
+	//printk("org fl_lines(0x%x), gain(0x%x) @LINE:%d \n", s_ctrl->curr_frame_length_lines, gain, __LINE__);
+
+	if (line > (s_ctrl->curr_frame_length_lines - 4)) {
+		fl_lines = line+4;
+		s_ctrl->func_tbl->sensor_group_hold_on(s_ctrl);
+		msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0340, 
+			(fl_lines&0xFF00)>>8, MSM_CAMERA_I2C_BYTE_DATA);
+		msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0341, 
+			fl_lines&0xFF, MSM_CAMERA_I2C_BYTE_DATA);
+
+		/* Coarse Integration Time */
+		msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0202, 
+			(line&0xFF00)>>8, MSM_CAMERA_I2C_BYTE_DATA);
+		msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0203, 
+			line&0xFF, MSM_CAMERA_I2C_BYTE_DATA);
+		s_ctrl->func_tbl->sensor_group_hold_off(s_ctrl);
+		//printk("fl_lines(0x%x), line(0x%x) @LINE:%d \n", fl_lines, line, __LINE__);
+		
+	} else if (line < (fl_lines - 4)) {
+		fl_lines = line+4;
+		if (fl_lines < s_ctrl->curr_frame_length_lines)
+			fl_lines = s_ctrl->curr_frame_length_lines;
+
+		s_ctrl->func_tbl->sensor_group_hold_on(s_ctrl);
+		msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0340, 
+			(fl_lines&0xFF00)>>8, MSM_CAMERA_I2C_BYTE_DATA);
+		msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0341, 
+			fl_lines&0xFF, MSM_CAMERA_I2C_BYTE_DATA);
+
+		/* Coarse Integration Time */
+		msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0202, 
+			(line&0xFF00)>>8, MSM_CAMERA_I2C_BYTE_DATA);
+		msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0203, 
+			line&0xFF, MSM_CAMERA_I2C_BYTE_DATA);
+		s_ctrl->func_tbl->sensor_group_hold_off(s_ctrl);
+		//printk("fl_lines(0x%x), line(0x%x) @LINE:%d \n", fl_lines, line, __LINE__);
+
+	} else {
+		fl_lines = line+4;
+		s_ctrl->func_tbl->sensor_group_hold_on(s_ctrl);
+		msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0340, 
+			(fl_lines&0xFF00)>>8, MSM_CAMERA_I2C_BYTE_DATA);
+		msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0341, 
+			fl_lines&0xFF, MSM_CAMERA_I2C_BYTE_DATA);
+
+		/* Coarse Integration Time */
+		msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0202, 
+			(line&0xFF00)>>8, MSM_CAMERA_I2C_BYTE_DATA);
+		msm_camera_i2c_write(s_ctrl->sensor_i2c_client, 0x0203, 
+			line&0xFF, MSM_CAMERA_I2C_BYTE_DATA);
+		s_ctrl->func_tbl->sensor_group_hold_off(s_ctrl);
+		//printk("fl_lines(0x%x), line(0x%x) @LINE:%d \n", fl_lines, line, __LINE__);
+	}
+	return rc;
+#else
+	uint32_t fl_lines, offset;
+	uint8_t int_time[3];
+	fl_lines =
+		(s_ctrl->curr_frame_length_lines * s_ctrl->fps_divider) / Q10;
+	offset = s_ctrl->sensor_exp_gain_info->vert_offset;
+	if (line > (fl_lines - offset))
+		fl_lines = line + offset;
+
+	/* Begin - jaemoon.hwang@kttech.co.kr */
+	/* temporarily hard-code exposure gain */
+	/* This code will be changed when camera tuning is performed */
+#if 1
+	gain |= 0x20;
+#endif
+	/* End - jaemoon.hwang@kttech.co.kr */
+
+	s_ctrl->func_tbl->sensor_group_hold_on(s_ctrl);
+	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
+		s_ctrl->sensor_output_reg_addr->frame_length_lines, fl_lines,
+		MSM_CAMERA_I2C_WORD_DATA);
+	int_time[0] = line >> 12;
+	int_time[1] = line >> 4;
+	int_time[2] = line << 4;
+	msm_camera_i2c_write_seq(s_ctrl->sensor_i2c_client,
+		s_ctrl->sensor_exp_gain_info->coarse_int_time_addr-1,
+		&int_time[0], 3);
+	msm_camera_i2c_write(s_ctrl->sensor_i2c_client,
+		s_ctrl->sensor_exp_gain_info->global_gain_addr, gain,
+		MSM_CAMERA_I2C_WORD_DATA);
+	s_ctrl->func_tbl->sensor_group_hold_off(s_ctrl);
+	return 0;
+#endif
+	/* End - jaemoon.hwang@kttech.co.kr */
+}
+
+static const struct i2c_device_id s5k4e5_i2c_id[] = {
+	{SENSOR_NAME, (kernel_ulong_t)&s5k4e5_s_ctrl},
+	{ }
+};
+
+static struct i2c_driver s5k4e5_i2c_driver = {
+	.id_table = s5k4e5_i2c_id,
+	.probe  = msm_sensor_i2c_probe,
+	.driver = {
+		.name = SENSOR_NAME,
+	},
+};
+
+static struct msm_camera_i2c_client s5k4e5_sensor_i2c_client = {
+	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
+};
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1
+static const struct i2c_device_id s5k4e5_eeprom_i2c_id[] = {
+	{SENSOR_EEPROM_NAME, (kernel_ulong_t)&s5k4e5_eeprom_s_ctrl},
+	{ }
+};
+
+static struct i2c_driver s5k4e5_eeprom_i2c_driver = {
+	.id_table = s5k4e5_eeprom_i2c_id,
+	.probe  = msm_sensor_i2c_probe,
+	.driver = {
+		.name = SENSOR_EEPROM_NAME,
+	},
+};
+
+static struct msm_camera_i2c_client s5k4e5_eeprom_sensor_i2c_client = {
+	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
+};
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
+static int __init msm_sensor_init_module(void)
+{
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1
+	i2c_add_driver(&s5k4e5_eeprom_i2c_driver);
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+	return i2c_add_driver(&s5k4e5_i2c_driver);
+}
+
+static struct v4l2_subdev_core_ops s5k4e5_subdev_core_ops = {
+	.ioctl = msm_sensor_subdev_ioctl,
+	.s_power = msm_sensor_power,
+};
+
+static struct v4l2_subdev_video_ops s5k4e5_subdev_video_ops = {
+	.enum_mbus_fmt = msm_sensor_v4l2_enum_fmt,
+};
+
+static struct v4l2_subdev_ops s5k4e5_subdev_ops = {
+	.core = &s5k4e5_subdev_core_ops,
+	.video  = &s5k4e5_subdev_video_ops,
+};
+
+static struct msm_sensor_fn_t s5k4e5_func_tbl = {
+	.sensor_start_stream = msm_sensor_start_stream,
+	.sensor_stop_stream = msm_sensor_stop_stream,
+	.sensor_group_hold_on = msm_sensor_group_hold_on,
+	.sensor_group_hold_off = msm_sensor_group_hold_off,
+	.sensor_set_fps = msm_sensor_set_fps,
+	.sensor_write_exp_gain = s5k4e5_write_exp_gain,
+	.sensor_write_snapshot_exp_gain = s5k4e5_write_exp_gain,
+	.sensor_setting = msm_sensor_setting,
+	.sensor_set_sensor_mode = msm_sensor_set_sensor_mode,
+	.sensor_mode_init = msm_sensor_mode_init,
+	.sensor_get_output_info = msm_sensor_get_output_info,
+	.sensor_config = msm_sensor_config,
+	.sensor_power_up = msm_sensor_power_up,
+	.sensor_power_down = msm_sensor_power_down,
+	.sensor_get_csi_params = msm_sensor_get_csi_params,
+};
+
+static struct msm_sensor_reg_t s5k4e5_regs = {
+	.default_data_type = MSM_CAMERA_I2C_BYTE_DATA,
+	.start_stream_conf = s5k4e5_start_settings,
+	.start_stream_conf_size = ARRAY_SIZE(s5k4e5_start_settings),
+	.stop_stream_conf = s5k4e5_stop_settings,
+	.stop_stream_conf_size = ARRAY_SIZE(s5k4e5_stop_settings),
+	.group_hold_on_conf = s5k4e5_groupon_settings,
+	.group_hold_on_conf_size = ARRAY_SIZE(s5k4e5_groupon_settings),
+	.group_hold_off_conf = s5k4e5_groupoff_settings,
+	.group_hold_off_conf_size =
+		ARRAY_SIZE(s5k4e5_groupoff_settings),
+	.init_settings = &s5k4e5_init_conf[0],
+	.init_size = ARRAY_SIZE(s5k4e5_init_conf),
+	.mode_settings = &s5k4e5_confs[0],
+	.output_settings = &s5k4e5_dimensions[0],
+	.num_conf = ARRAY_SIZE(s5k4e5_confs),
+};
+
+static struct msm_sensor_ctrl_t s5k4e5_s_ctrl = {
+	.msm_sensor_reg = &s5k4e5_regs,
+	.sensor_i2c_client = &s5k4e5_sensor_i2c_client,
+	.sensor_i2c_addr = 0x20,
+	.sensor_output_reg_addr = &s5k4e5_reg_addr,
+	.sensor_id_info = &s5k4e5_id_info,
+	.sensor_exp_gain_info = &s5k4e5_exp_gain_info,
+	.cam_mode = MSM_SENSOR_MODE_INVALID,
+	.csi_params = &s5k4e5_csi_params_array[0],
+//	.csic_params = &s5k4e5_csi_params_array[0],
+	.msm_sensor_mutex = &s5k4e5_mut,
+	.sensor_i2c_driver = &s5k4e5_i2c_driver,
+	.sensor_v4l2_subdev_info = s5k4e5_subdev_info,
+	.sensor_v4l2_subdev_info_size = ARRAY_SIZE(s5k4e5_subdev_info),
+	.sensor_v4l2_subdev_ops = &s5k4e5_subdev_ops,
+	.func_tbl = &s5k4e5_func_tbl,
+	.clk_rate = MSM_SENSOR_MCLK_24HZ,
+};
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1	// def CONFIG_CALIBRATION_FEATURE
+static struct msm_sensor_ctrl_t s5k4e5_eeprom_s_ctrl = {
+	.sensor_i2c_client = &s5k4e5_eeprom_sensor_i2c_client,
+	.sensor_i2c_addr = 0xA0,	// GT24C16 : original 0xA0
+	.sensor_i2c_driver = &s5k4e5_eeprom_i2c_driver,
+};
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
+
+module_init(msm_sensor_init_module);
+MODULE_DESCRIPTION("Samsung LSI 5MP Bayer sensor driver");
+MODULE_LICENSE("GPL v2");
+
+
diff -urN caf/drivers/media/video/msm/sensors/s5k4e5.h for-diff/drivers/media/video/msm/sensors/s5k4e5.h
--- caf/drivers/media/video/msm/sensors/s5k4e5.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/media/video/msm/sensors/s5k4e5.h	2015-09-13 14:02:59.961921000 +0900
@@ -0,0 +1,16 @@
+/* Copyright (c) 2011, Code Aurora Forum. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <mach/board.h>
+extern struct platform_driver s5k4e5_driver;
+
diff -urN caf/drivers/mfd/pm8xxx-pwm.c for-diff/drivers/mfd/pm8xxx-pwm.c
--- caf/drivers/mfd/pm8xxx-pwm.c	2015-09-08 23:43:50.547167084 +0900
+++ for-diff/drivers/mfd/pm8xxx-pwm.c	2015-09-13 14:03:00.013921000 +0900
@@ -790,6 +790,93 @@
 }
 EXPORT_SYMBOL_GPL(pwm_config);
 
+#ifdef CONFIG_KTTECH_PWM_NANO_SEC_CTRL
+
+static void pm8xxx_pwm_calc_pwm_value_nsec(struct pwm_device *pwm,
+				      unsigned int period_ns,
+				      unsigned int duty_ns)
+{
+	unsigned int max_pwm_value, tmp;
+	unsigned int duty_us = duty_ns/1000;
+	
+	/* Figure out pwm_value with overflow handling */
+	tmp = 1 << (sizeof(tmp) * 8 - pwm->period.pwm_size);
+	if (duty_us < tmp) {
+		tmp = duty_ns << pwm->period.pwm_size;
+		pwm->pwm_value = tmp / period_ns;
+	} else {
+		tmp = period_ns >> pwm->period.pwm_size;
+		pwm->pwm_value = duty_ns / tmp;
+	}
+	max_pwm_value = (1 << pwm->period.pwm_size) - 1;
+	if (pwm->pwm_value > max_pwm_value)
+		pwm->pwm_value = max_pwm_value;
+}
+
+
+int pwm_config_nsec_ctrl(struct pwm_device *pwm, int duty_ns, int period_ns)
+{
+	struct pm8xxx_pwm_period *period;
+	int period_us;
+	int	rc = 0;
+
+#if 0
+	if (pwm == NULL || IS_ERR(pwm) ||
+		duty_us > period_us ||
+		(unsigned)period_us > PM8XXX_PWM_PERIOD_MAX ||
+		(unsigned)period_us < PM8XXX_PWM_PERIOD_MIN) {
+		pr_err("Invalid pwm handle or parameters\n");
+		return -EINVAL;
+	}
+#endif
+
+	if (pwm->chip == NULL) {
+		pr_err("No pwm_chip\n");
+		return -ENODEV;
+	}
+
+	period = &pwm->period;
+
+	mutex_lock(&pwm->chip->pwm_mutex);
+
+	if (!pwm->in_use) {
+		rc = -EINVAL;
+		goto out_unlock;
+	}
+
+	period_us = period_ns/1000;
+
+	if (pwm->pwm_period != period_us) {
+		pm8xxx_pwm_calc_period(period_us, period);
+		pm8xxx_pwm_save_period(pwm);
+		pwm->pwm_period = period_us;
+	}
+
+	pm8xxx_pwm_calc_pwm_value_nsec(pwm, period_ns, duty_ns);
+	pm8xxx_pwm_save_pwm_value(pwm);
+
+	if (pwm_chip->is_lpg_supported) {
+		pm8xxx_pwm_save(&pwm->pwm_lpg_ctl[1],
+				PM8XXX_PWM_BYPASS_LUT, PM8XXX_PWM_BYPASS_LUT);
+
+		pm8xxx_pwm_bank_sel(pwm);
+		rc = pm8xxx_lpg_pwm_write(pwm, 1, 6);
+	} else {
+		rc = pm8xxx_pwm_write(pwm);
+	}
+
+	pr_debug("duty/period=%u/%u usec: pwm_value=%d (of %d)\n",
+		 (unsigned)duty_ns, (unsigned)period_ns,
+		 pwm->pwm_value, 1 << period->pwm_size);
+
+out_unlock:
+	mutex_unlock(&pwm->chip->pwm_mutex);
+	return rc;
+}
+EXPORT_SYMBOL_GPL(pwm_config_nsec_ctrl);
+
+#endif /* CONFIG_KTTECH_PWM_NANO_SEC_CTRL */
+
 /**
  * pwm_enable - start a PWM output toggling
  * @pwm: the PWM device
diff -urN caf/drivers/misc/Makefile for-diff/drivers/misc/Makefile
--- caf/drivers/misc/Makefile	2015-09-08 23:43:50.555167084 +0900
+++ for-diff/drivers/misc/Makefile	2015-09-13 14:03:00.017921000 +0900
@@ -71,3 +71,5 @@
 obj-$(CONFIG_PMIC8058_XOADC) += pmic8058-xoadc.o
 obj-$(CONFIG_QSEECOM) += qseecom.o
 obj-$(CONFIG_QFP_FUSE) += qfp_fuse.o
+# KTTech add
+obj-y += kttech/
diff -urN caf/drivers/misc/kttech/Makefile for-diff/drivers/misc/kttech/Makefile
--- caf/drivers/misc/kttech/Makefile	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/misc/kttech/Makefile	2015-09-13 14:03:00.021921000 +0900
@@ -0,0 +1 @@
+obj-y += kttgenmod.o
diff -urN caf/drivers/misc/kttech/kttgenmod.c for-diff/drivers/misc/kttech/kttgenmod.c
--- caf/drivers/misc/kttech/kttgenmod.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/misc/kttech/kttgenmod.c	2015-09-13 14:03:00.021921000 +0900
@@ -0,0 +1,288 @@
+// KTTech module for general purpose
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/sched.h>
+#include <asm/io.h>
+#include <linux/mfd/pm8xxx/misc.h>
+#include <linux/init.h>
+#include <linux/rtc.h>
+
+#include <linux/kttgenmod.h>
+
+#ifndef KTTECH_FINAL_BUILD
+//#define WATCHDOG_TEST
+#endif
+
+#ifdef WATCHDOG_TEST
+#include <linux/workqueue.h>
+#endif
+
+#define BITS_PART16(x, high, low) (( x >> low )  & ( 0xffff >> (32-high-1+low) ))
+#define BITS_PART32(x, high, low) (( x >> low )  & ( 0xffffffff >> (32-high-1+low) ))
+
+
+static u32 para_chiprev;
+static uint msm_version;
+static long rooting_sec;
+
+static int __init rooting_setup(char *str)
+{
+	unsigned long sec;
+
+	if(!strict_strtoul(str, 0, &sec))
+	{
+		rooting_sec = sec;
+	}
+	return 1;
+}
+
+__setup("androidboot.rooting=", rooting_setup);
+
+static ssize_t rooting_show(struct device *dev,
+            struct device_attribute *attr, char *buf)
+{
+	int count = 0;
+
+	if(rooting_sec){
+		struct rtc_time tm;
+
+		rtc_time_to_tm(rooting_sec, &tm);
+		count += sprintf(buf, "%d-%02d-%02d %02d:%02d:%02d\n",
+			tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
+			tm.tm_hour+9, tm.tm_min, tm.tm_sec);
+	} else {
+		count += sprintf(buf, "No Rooting\n");
+	}
+
+	return count;
+}
+static ssize_t stack_debug_show(struct device *dev,
+            struct device_attribute *attr, char *buf)
+{
+	int count = 0;
+
+	count += sprintf(buf, "stack dump\n");
+	return count;
+}
+
+static ssize_t stack_debug_store(struct device *dev,
+            struct device_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int level;
+	struct task_struct *tsk;
+
+	if (sscanf(buf, "%u", &level) != 1) {
+		printk("Invalid values\n");
+		return -EINVAL;
+	}
+
+	if(level == 1) {
+		printk(" ========== Stack DUMP =============\n");
+
+		for_each_process(tsk) {
+			printk(KERN_INFO "\nPID: %d, Name: %s\n",
+					tsk->pid, tsk->comm);
+			show_stack(tsk, NULL);
+		}
+	}
+
+	return count;
+}
+
+struct kobject *kttech_kobj;
+
+static DEVICE_ATTR(tsk_stack_dump, 0600, stack_debug_show, stack_debug_store);
+static DEVICE_ATTR(rooting, 0444, rooting_show, NULL);
+
+static kttgenmod_device_t busy_device = 0;
+static ssize_t busy_device_show(struct device *dev,
+            struct device_attribute *attr, char *buf)
+{
+	int len = 0;
+
+	if(!buf)
+	{
+		printk(KERN_INFO "%s: Invalid buf !!! \n", __func__);
+		return 0;
+	}
+	
+	len = sprintf(buf, "%d\n", busy_device);
+	if (len < 0)
+	{
+		printk(KERN_INFO "%s: Invalid len !!! \n", __func__);
+		return 0;
+	}
+	
+	return len;
+}
+
+static ssize_t busy_device_store(struct device *dev,
+            struct device_attribute *attr, const char *buf, size_t count)
+{
+	kttgenmod_device_t  device;
+
+	if (sscanf(buf, "%u", &device) != 1) {
+		printk("Invalid values\n");
+		return -EINVAL;
+	}
+
+	busy_device = device;
+
+	return count;
+}
+
+struct kobject *kttech_kobj;
+
+static DEVICE_ATTR(busy_device, 0600, busy_device_show, busy_device_store);
+
+
+#ifdef WATCHDOG_TEST
+static void watchdog_test_work(struct work_struct *work);
+static DECLARE_DELAYED_WORK(watchdog_test, watchdog_test_work);
+static void watchdog_test_work(struct work_struct *work)
+{
+	printk("%s watchdog test enter while  \n",__func__);
+	while(1) {}
+}
+
+
+static int  enable_watchdog_test= 0;
+static ssize_t watchdog_test_show(struct device *dev,
+            struct device_attribute *attr, char *buf)
+{
+	int len = 0;
+
+	if(!buf)
+	{
+		printk(KERN_INFO "%s: Invalid buf !!! \n", __func__);
+		return 0;
+	}
+	
+	len = sprintf(buf, "%d\n", enable_watchdog_test);
+	if (len < 0)
+	{
+		printk(KERN_INFO "%s: Invalid len !!! \n", __func__);
+		return 0;
+	}
+	
+	return len;
+}
+
+static ssize_t watchdog_test_store(struct device *dev,
+            struct device_attribute *attr, const char *buf, size_t count)
+{
+	int  enable;
+
+	if (sscanf(buf, "%d", &enable) != 1) {
+		printk("Invalid values\n");
+		return -EINVAL;
+	}
+
+	enable_watchdog_test = enable;
+
+	schedule_delayed_work_on(0, &watchdog_test, msecs_to_jiffies(1000));
+	
+	return count;
+}
+
+struct kobject *kttech_kobj;
+
+static DEVICE_ATTR(watchdog_test, 0666, watchdog_test_show, watchdog_test_store);
+#endif
+
+static struct attribute *stack_attrs[] = {
+    &dev_attr_tsk_stack_dump.attr,
+    &dev_attr_busy_device.attr,
+    &dev_attr_rooting.attr,
+#ifdef WATCHDOG_TEST    
+    &dev_attr_watchdog_test.attr, 
+#endif    
+    NULL
+};
+
+static const struct attribute_group stack_attr_group = {
+    .attrs = stack_attrs,
+};
+
+static int __init kttpre_init(void)
+{
+	u32* up;
+	int ret = 0;
+
+	printk("### %s, \n", __func__);
+	up = (u32*)ioremap(0x00802054, 0x16);
+	para_chiprev = *up;
+	printk("	chip rev=%08x", para_chiprev);	
+
+	msm_version = BITS_PART32(para_chiprev, 31, 28);
+
+	// refer : DEVICE REVISION GUIDLE 
+	printk("    Manufacture ID code = %0x \n", BITS_PART32(para_chiprev, 11,  1));
+	printk("    Part Number         = %0x \n", BITS_PART32(para_chiprev, 27, 12));
+	printk("    Version Data        = %0x \n", msm_version);
+
+	iounmap(up);
+
+	kttech_kobj = kobject_create_and_add("kttech_misc", NULL);
+    if(!kttech_kobj) {
+        printk(KERN_ERR "pwk: can not create stack_dump sys file\n");
+    } else {
+        ret = sysfs_create_group(kttech_kobj, &stack_attr_group);
+    }
+	
+	return ret;
+}
+
+static int __init kttlate_init(void)
+{	
+	//int ret;
+
+	struct pm8xxx_coincell_chg coincell_config;
+
+	printk("### %s, \n", __func__);
+
+          // gun@kttech.co.kr  - moved SMPL configuration into SBL3
+	// SMPL configuration
+	//ret = pm8xxx_smpl_set_delay(PM8XXX_SMPL_DELAY_1p5);
+	//printk("***    smpl set delay ret = %d \n", ret);
+	//ret = pm8xxx_smpl_control(0); // disable SMPL
+	//printk("***    smpl control ret = %d \n", ret);
+	// gun@kttech.co.kr  - moved SMPL configuration into SBL3
+
+	pm8xxx_coincell_chg_config(&coincell_config);
+
+	printk("coincell charger configuration = state: %d, voltage: 0x%x, resister: 0x%x\n",
+	  coincell_config.state, coincell_config.voltage, coincell_config.resistor);
+
+	return 0;
+
+}
+
+uint get_msmchip_id(void)
+{
+	return para_chiprev;
+}
+
+uint get_msmchip_ver(void)
+{
+	return msm_version;
+}
+
+void kttgenmod_set_device(kttgenmod_device_t device)
+{
+	busy_device |= device;
+}
+EXPORT_SYMBOL(kttgenmod_set_device);
+
+void kttgenmod_clear_device(kttgenmod_device_t device)
+{
+	busy_device &= ~device;
+}
+EXPORT_SYMBOL(kttgenmod_clear_device);
+
+module_param(msm_version, uint, 0644);
+MODULE_LICENSE("GPL");
+arch_initcall(kttpre_init);
+late_initcall(kttlate_init);
diff -urN caf/drivers/nfc/Makefile for-diff/drivers/nfc/Makefile
--- caf/drivers/nfc/Makefile	2015-09-08 23:43:53.263167136 +0900
+++ for-diff/drivers/nfc/Makefile	2015-09-13 14:03:02.589921000 +0900
@@ -5,5 +5,6 @@
 obj-$(CONFIG_PN544_NFC)		+= pn544.o
 obj-$(CONFIG_NFC_PN533)		+= pn533.o
 obj-$(CONFIG_NFC_WILINK)	+= nfcwilink.o
+obj-$(CONFIG_KTTECH_PN544_NFC)		+= pn544-kttech.o
 
 ccflags-$(CONFIG_NFC_DEBUG) := -DDEBUG
diff -urN caf/drivers/nfc/pn544-kttech.c for-diff/drivers/nfc/pn544-kttech.c
--- caf/drivers/nfc/pn544-kttech.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/nfc/pn544-kttech.c	2015-09-13 14:03:02.589921000 +0900
@@ -0,0 +1,649 @@
+/*
+ * Copyright (C) 2010 NXP Semiconductors
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/list.h>
+#include <linux/i2c.h>
+#include <linux/irq.h>
+#include <linux/jiffies.h>
+#include <linux/uaccess.h>
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/miscdevice.h>
+#include <linux/spinlock.h>
+#include <linux/nfc/pn544-kttech.h>
+
+#ifdef NFC_USE_MSM_XO
+#include <mach/msm_xo.h>
+#endif
+
+// KTT_UPDATE : FEATURE_KTTECH_NFC
+// modify : kkong120322
+// description :
+// S=====================================================================
+typedef enum{
+    KTTECH_CMD_SET_LOG_ENABLE,
+    KTTECH_CMD_SET_LOG_DISABLE,
+    KTTECH_CMD_SET_CLK_REQ_PIN_MODE,
+    KTTECH_CMD_END
+}KTTECH_CMD_TYPE;
+// E=====================================================================
+
+#ifdef NFC_USE_MSM_XO
+static struct msm_xo_voter *nfc_clock;
+#endif
+
+#define _PN544_DEV_ERROR_FIX
+#define _PN544_I2C_LOG_VIEW
+//#define _PN544_I2C_TEST
+
+#define MAX_BUFFER_SIZE	512
+#ifdef _PN544_I2C_LOG_VIEW
+#define MAX_PRINTABLE_BUFFER_SIZE	64
+static bool log_enable = false;
+#endif
+
+#define READ_IRQ_MODIFY
+
+#ifdef READ_IRQ_MODIFY
+bool do_reading = false;
+static bool cancle_read = false;
+#endif
+
+struct pn544_dev	{
+	wait_queue_head_t	read_wq;
+	struct mutex		read_mutex;
+	struct i2c_client	*client;
+	struct miscdevice	pn544_device;
+	unsigned int 		ven_gpio;
+	unsigned int 		firm_gpio;
+	unsigned int		irq_gpio;
+	bool			irq_enabled;
+	spinlock_t		irq_enabled_lock;
+};
+
+static struct pn544_i2c_platform_data *platform_data;
+#ifdef _PN544_DEV_ERROR_FIX
+static struct pn544_dev *g_pn544_dev;
+#endif
+  
+static void pn544_disable_irq(struct pn544_dev *pn544_dev)
+{
+    unsigned long flags;
+
+    spin_lock_irqsave(&pn544_dev->irq_enabled_lock, flags);
+    if (pn544_dev->irq_enabled) {
+        disable_irq_nosync(pn544_dev->client->irq);
+        pn544_dev->irq_enabled = false;
+    }
+    spin_unlock_irqrestore(&pn544_dev->irq_enabled_lock, flags);
+}
+
+static irqreturn_t pn544_dev_irq_handler(int irq, void *dev_id)
+{
+    struct pn544_dev *pn544_dev = dev_id;
+
+    pn544_disable_irq(pn544_dev);
+#ifdef READ_IRQ_MODIFY
+    do_reading=1;
+#endif
+
+#ifdef _PN544_I2C_LOG_VIEW
+    if(log_enable)
+        printk(KERN_INFO "%s :\n", __func__);
+#endif
+
+    /* Wake up waiting readers */
+    wake_up(&pn544_dev->read_wq);
+
+    return IRQ_HANDLED;
+}
+
+static ssize_t pn544_dev_read(struct file *filp, char __user *buf,
+		size_t count, loff_t *offset)
+{
+    struct pn544_dev *pn544_dev = filp->private_data;
+    char tmp[MAX_BUFFER_SIZE];
+    int ret;
+
+    if (count > MAX_BUFFER_SIZE)
+    count = MAX_BUFFER_SIZE;
+
+    pr_debug("%s : reading %zu bytes.\n", __func__, count);
+
+    mutex_lock(&pn544_dev->read_mutex);
+
+    if (!gpio_get_value(pn544_dev->irq_gpio)) {
+        if (filp->f_flags & O_NONBLOCK) {
+            ret = -EAGAIN;
+            goto fail;
+        }
+
+        pn544_dev->irq_enabled = true;
+
+#ifdef READ_IRQ_MODIFY
+        do_reading=0;
+#endif
+
+        enable_irq(pn544_dev->client->irq);
+#ifdef READ_IRQ_MODIFY
+        ret = wait_event_interruptible(pn544_dev->read_wq, do_reading);
+#else
+        ret = wait_event_interruptible(pn544_dev->read_wq,
+        gpio_get_value(pn544_dev->irq_gpio));
+#endif
+        pn544_disable_irq(pn544_dev);
+
+#ifdef READ_IRQ_MODIFY
+        if(cancle_read == true)
+        {
+            cancle_read = false;
+            ret = -1;
+            goto fail;
+        }
+#endif
+        if (ret)
+        goto fail;
+
+    }
+
+    /* Read data */
+    ret = i2c_master_recv(pn544_dev->client, tmp, count);
+    mutex_unlock(&pn544_dev->read_mutex);
+
+#ifdef _PN544_I2C_LOG_VIEW
+    if(log_enable)
+    {
+        int i;
+        char print_tmp[MAX_PRINTABLE_BUFFER_SIZE];
+        char *p_print_tmp = print_tmp;
+
+        printk(KERN_INFO "%s Data: (%zu bytes)\n", __func__, count);
+        memset((char*)print_tmp, 0, sizeof(print_tmp));
+        for(i=0; i<count; i++)
+        {
+            sprintf(p_print_tmp, " %02x", tmp[i]);
+            p_print_tmp += (sizeof(char)*3);
+            if(i%20 == 0 && i !=0)
+            {
+                printk(KERN_INFO "%s", print_tmp);
+                memset((char*)print_tmp, 0, sizeof(print_tmp));
+                p_print_tmp = print_tmp;
+            }
+        }
+        if(0 != print_tmp[0])
+            printk(KERN_INFO "%s", print_tmp);
+
+        printk(KERN_INFO "ven:%d(%x), irq:%d(%x), firm:%d(%x)", pn544_dev->ven_gpio, gpio_get_value(pn544_dev->ven_gpio), 
+                                                                                                    pn544_dev->irq_gpio, gpio_get_value(pn544_dev->irq_gpio), 
+                                                                                                    pn544_dev->firm_gpio, gpio_get_value(pn544_dev->firm_gpio));
+    }
+#endif
+
+    if (ret < 0) {
+        printk(KERN_ERR "%s: fail!!!!!!i2c_master_recv returned %d\n", __func__, ret);
+        return ret;
+    }
+    if (ret > count) {
+        printk(KERN_ERR "%s: fail!!!!!!received too many bytes from i2c (%d)\n", __func__, ret);
+        return -EIO;
+    }
+    if (copy_to_user(buf, tmp, ret)) {
+        printk(KERN_ERR "%s : failed to copy to user space\n", __func__);
+        return -EFAULT;
+    }
+    return ret;
+
+fail:
+    mutex_unlock(&pn544_dev->read_mutex);
+    return ret;
+}
+
+static ssize_t pn544_dev_write(struct file *filp, const char __user *buf,
+		size_t count, loff_t *offset)
+{
+    struct pn544_dev  *pn544_dev;
+    char tmp[MAX_BUFFER_SIZE];
+    int ret;
+
+    pn544_dev = filp->private_data;
+
+    if (count > MAX_BUFFER_SIZE)
+        count = MAX_BUFFER_SIZE;
+
+    if (copy_from_user(tmp, buf, count)) {
+        printk(KERN_INFO "%s : failed to copy from user space\n", __func__);
+        return -EFAULT;
+    }
+
+#ifdef _PN544_I2C_LOG_VIEW
+    if(log_enable)
+    {
+        int i;
+        char print_tmp[MAX_PRINTABLE_BUFFER_SIZE];
+        char *p_print_tmp = print_tmp;
+
+        printk(KERN_INFO "%s Data: (%zu bytes)\n", __func__, count);
+        memset((char*)print_tmp, 0, sizeof(print_tmp));
+        for(i=0; i<count; i++)
+        {
+            sprintf(p_print_tmp, " %02x", tmp[i]);
+            p_print_tmp += (sizeof(char)*3);
+            if(i%20 == 0 && i !=0)
+            {
+                printk(KERN_INFO "%s", print_tmp);
+                memset((char*)print_tmp, 0, sizeof(print_tmp));
+                p_print_tmp = print_tmp;
+            }
+        }
+        if(0 != print_tmp[0])
+            printk(KERN_INFO "%s", print_tmp);
+
+        printk(KERN_INFO "ven:%d(%x), irq:%d(%x), firm:%d(%x)", pn544_dev->ven_gpio, gpio_get_value(pn544_dev->ven_gpio), 
+                                                                                                  pn544_dev->irq_gpio, gpio_get_value(pn544_dev->irq_gpio), 
+                                                                                                  pn544_dev->firm_gpio, gpio_get_value(pn544_dev->firm_gpio));
+    }
+#endif
+
+    /* Set power : (12.02.06) debugged for i2c failed message at suspend/resume. */
+    //gpio_set_value(pn544_dev->firm_gpio, 0);
+    //gpio_set_value(pn544_dev->ven_gpio, 1);
+    //msleep(10);
+
+    /* Write data */
+    ret = i2c_master_send(pn544_dev->client, tmp, count);
+    if (ret != count) {
+#ifdef _PN544_I2C_LOG_VIEW		
+    if(log_enable)
+        printk(KERN_ERR "%s error!!!!!!!!(%d)\n", __func__, ret);
+#endif		
+        ret = -EIO;
+    }
+    return ret;
+}
+
+#ifdef _PN544_I2C_TEST
+static int pn544_dev_test(struct i2c_client *client)
+{
+    int ret;
+    char tmpTx[6];
+    char tmpRx[4];
+
+    printk(KERN_ERR "%s :\n", __func__);
+
+    tmpTx[0]=0x05;
+    tmpTx[1]=0xF9;
+    tmpTx[2]=0x04;
+    tmpTx[3]=0x00;
+    tmpTx[4]=0xC3;
+    tmpTx[5]=0xE5;
+
+    ret = i2c_master_send(client, tmpTx, 6);
+    if (ret < 0) {
+        printk(KERN_ERR "%s : i2c_master_send returned %d\n", __func__, ret);
+        ret = -EIO;
+    }
+
+    /* Read data */
+    ret = i2c_master_recv(client, tmpRx, 4);
+    if (ret < 0) {
+        printk(KERN_ERR "%s : i2c_master_recv returned %d\n", __func__, ret);
+        ret = -EIO;
+    }
+
+    printk(KERN_ERR "%s : get data %d %d %d %d\n", __func__, tmpRx[0], tmpRx[1], tmpRx[2], tmpRx[3]);
+
+    return ret;
+}
+#endif
+
+static int pn544_dev_open(struct inode *inode, struct file *filp)
+{
+#ifdef _PN544_DEV_ERROR_FIX
+    filp->private_data = g_pn544_dev;
+
+#ifdef _PN544_I2C_LOG_VIEW
+    if(log_enable)
+    {
+        printk(KERN_INFO "ven:%d(%x), irq:%d(%x), firm:%d(%x)", g_pn544_dev->ven_gpio, gpio_get_value(g_pn544_dev->ven_gpio), 
+                                                                                                      g_pn544_dev->irq_gpio, gpio_get_value(g_pn544_dev->irq_gpio), 
+                                                                                                      g_pn544_dev->firm_gpio, gpio_get_value(g_pn544_dev->firm_gpio));
+    }
+#endif
+#else
+    struct pn544_dev *pn544_dev = container_of(filp->private_data,
+                                                        			struct pn544_dev,
+                                                        			pn544_device);
+
+    filp->private_data = pn544_dev;
+#endif
+
+    printk(KERN_INFO "%s : %d,%d\n", __func__, imajor(inode), iminor(inode));
+
+    return 0;
+}
+
+// KTT_UPDATE : FEATURE_KTTECH_NFC
+// modify : kkong120322
+// description : 
+// S=====================================================================
+static int pn544_kttech_cmd_process(unsigned long command)
+{
+    int ret = 0;
+
+    if(log_enable) {
+        printk(KERN_INFO "%s:  command(%ld)\n", __func__, command);
+    }
+
+    switch(command)
+    {
+        case KTTECH_CMD_SET_LOG_ENABLE:
+            log_enable = true;
+            break;
+
+        case KTTECH_CMD_SET_LOG_DISABLE:
+            log_enable = false;
+            break;
+
+#ifdef NFC_USE_MSM_XO
+        case KTTECH_CMD_SET_CLK_REQ_PIN_MODE:
+            ret = msm_xo_mode_vote(nfc_clock, MSM_XO_MODE_PIN_CTRL);
+            if (ret < 0) {
+                printk(KERN_ERR "%s:  Failed to vote for TCX0_D1 ON (%d)\n", __func__, ret);
+            }
+            break;
+#endif
+
+        default:
+            printk(KERN_ERR "%s:  Invalid Parameter (%ld)\n", __func__, command);
+            break;
+    }
+
+    return ret;
+}
+// E=====================================================================
+
+static long pn544_dev_ioctl(struct file *filp,
+		unsigned int cmd, unsigned long arg)
+{
+    struct pn544_dev *pn544_dev = filp->private_data;
+
+    switch (cmd) {
+        case PN544_SET_PWR:
+            if (arg == 2) {
+                /* power on with firmware download (requires hw reset)
+                */
+                printk(KERN_INFO "%s power on with firmware\n", __func__);
+                gpio_set_value(pn544_dev->ven_gpio, 1);
+                gpio_set_value(pn544_dev->firm_gpio, 1);
+                msleep(20);
+                gpio_set_value(pn544_dev->ven_gpio, 0);
+                msleep(60);
+                gpio_set_value(pn544_dev->ven_gpio, 1);
+                msleep(20);
+            } else if (arg == 1) {
+                /* power on */
+                printk(KERN_INFO "%s power on, gpio:[%d] [%d]\n", __func__, pn544_dev->firm_gpio, pn544_dev->ven_gpio);
+                gpio_set_value(pn544_dev->firm_gpio, 0);
+                gpio_set_value(pn544_dev->ven_gpio, 1);
+                msleep(20);
+            } else  if (arg == 0) {
+                /* power off */
+                printk(KERN_INFO "%s power off\n", __func__);
+                gpio_set_value(pn544_dev->firm_gpio, 0);
+                gpio_set_value(pn544_dev->ven_gpio, 0);
+                msleep(60);
+#ifdef READ_IRQ_MODIFY
+            } else if (arg == 3) {
+                pr_info("%s Read Cancle\n", __func__);
+                cancle_read = true;
+                do_reading = 1;
+                wake_up(&pn544_dev->read_wq);
+#endif
+            } else {
+                printk(KERN_INFO "%s bad arg\n", __func__);
+                return -EINVAL;
+            }
+            break;
+
+        // KTT_UPDATE : FEATURE_KTTECH_NFC
+        // modify : kkong120322
+        // description : 
+        // S=====================================================================
+#ifdef NFC_USE_MSM_XO
+        case KTTECH_PN544_COMMAND:
+            pn544_kttech_cmd_process(arg);
+            break;
+#endif
+        // E=====================================================================
+
+        default:
+            printk(KERN_INFO "%s bad ioctl %d\n", __func__, cmd);
+            return -EINVAL;
+    }
+
+    return 0;
+}
+
+static const struct file_operations pn544_dev_fops = {
+	.owner	= THIS_MODULE,
+	.llseek	= no_llseek,
+	.read	= pn544_dev_read,
+	.write	= pn544_dev_write,
+	.open	= pn544_dev_open,
+	.unlocked_ioctl  = pn544_dev_ioctl,
+};
+
+static int pn544_probe(struct i2c_client *client,
+		const struct i2c_device_id *id)
+{
+    int ret;
+    //struct pn544_i2c_platform_data *platform_data;
+    struct pn544_dev *pn544_dev;
+
+    printk("***************** pn544_probe *****************\n");
+    
+    platform_data = client->dev.platform_data;
+    
+    if (platform_data == NULL) {
+        printk(KERN_INFO "%s : nfc probe fail\n", __func__);
+        return  -ENODEV;
+    }
+
+#ifdef _PN544_I2C_LOG_VIEW
+    if(log_enable)
+        printk(KERN_INFO "%s : nfc probe start, firm_gpio:%d, ven_gpio:%d\n", __func__, gpio_get_value(platform_data->firm_gpio), gpio_get_value(platform_data->ven_gpio));
+#endif
+
+#ifdef NFC_USE_MSM_XO
+    nfc_clock = msm_xo_get(MSM_XO_TCXO_D1, "nfc_clock");
+    if (IS_ERR(nfc_clock)) {
+        ret = PTR_ERR(nfc_clock);
+        printk(KERN_ERR "%s: Couldn't get TCXO_D1 vote for NFC (%d)\n", __func__, ret);
+    }
+#endif
+
+    platform_data->setup_power(&client->dev);
+    platform_data->setup_gpio(1);
+
+    printk(KERN_INFO "nfc probe platform data (irq%d:%d) (ven%d:%d) (firm%d:%d)\n",
+                                    platform_data->irq_gpio, gpio_get_value(platform_data->irq_gpio), 
+                                    platform_data->ven_gpio, gpio_get_value(platform_data->ven_gpio),
+                                    platform_data->firm_gpio, gpio_get_value(platform_data->firm_gpio));
+
+    if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+        printk(KERN_INFO "%s : need I2C_FUNC_I2C\n", __func__);
+        return  -ENODEV;
+    }
+
+#if 0    //kkong110316
+    ret = gpio_request(platform_data->irq_gpio, "nfc_int");
+    if (ret)
+        return  -ENODEV;
+    ret = gpio_request(platform_data->ven_gpio, "nfc_ven");
+    if (ret)
+        goto err_ven;
+    ret = gpio_request(platform_data->firm_gpio, "nfc_firm");
+    if (ret)
+        goto err_firm;
+#endif
+
+    pn544_dev = kzalloc(sizeof(*pn544_dev), GFP_KERNEL);
+    if (pn544_dev == NULL) {
+        dev_err(&client->dev,
+                        "failed to allocate memory for module data\n");
+                        ret = -ENOMEM;
+        goto err_exit;
+    }
+
+    dev_info(&client->adapter->dev, "detected pn544\n");
+
+    pn544_dev->irq_gpio = platform_data->irq_gpio;
+    pn544_dev->ven_gpio  = platform_data->ven_gpio;
+    pn544_dev->firm_gpio  = platform_data->firm_gpio;
+    pn544_dev->client   = client;
+
+    /* init mutex and queues */
+    init_waitqueue_head(&pn544_dev->read_wq);
+    mutex_init(&pn544_dev->read_mutex);
+    spin_lock_init(&pn544_dev->irq_enabled_lock);
+
+    pn544_dev->pn544_device.minor = MISC_DYNAMIC_MINOR;
+    pn544_dev->pn544_device.name = "pn544";
+    pn544_dev->pn544_device.fops = &pn544_dev_fops;
+
+    ret = misc_register(&pn544_dev->pn544_device);
+    if (ret) {
+        printk(KERN_INFO "%s : misc_register failed\n", __FILE__);
+        goto err_misc_register;
+    }
+
+    /* request irq.  the irq is set whenever the chip has data available
+    * for reading.  it is cleared when all data has been read.
+    */
+    printk(KERN_INFO "%s : requesting IRQ %d\n", __func__, client->irq);
+    pn544_dev->irq_enabled = true;
+    ret = request_irq(client->irq, pn544_dev_irq_handler,
+    IRQF_TRIGGER_HIGH, client->name, pn544_dev);
+    if (ret) {
+        dev_err(&client->dev, "request_irq failed\n");
+        goto err_request_irq_failed;
+    }
+
+    pn544_disable_irq(pn544_dev);
+#ifdef _PN544_DEV_ERROR_FIX
+    g_pn544_dev = pn544_dev;
+#endif
+    i2c_set_clientdata(client, pn544_dev);
+#ifdef _PN544_I2C_TEST
+    pn544_dev_test(client);
+#endif
+    return 0;
+
+err_request_irq_failed:
+    misc_deregister(&pn544_dev->pn544_device);
+err_misc_register:
+    mutex_destroy(&pn544_dev->read_mutex);
+    kfree(pn544_dev);
+err_exit:
+    gpio_free(platform_data->firm_gpio);
+#if 0    //kkong110316
+err_firm:
+    gpio_free(platform_data->ven_gpio);
+err_ven:
+    gpio_free(platform_data->irq_gpio);
+#endif
+    return ret;
+}
+
+static int pn544_remove(struct i2c_client *client)
+{
+    struct pn544_dev *pn544_dev;
+
+    pn544_dev = i2c_get_clientdata(client);
+    free_irq(client->irq, pn544_dev);
+    misc_deregister(&pn544_dev->pn544_device);
+    mutex_destroy(&pn544_dev->read_mutex);
+    gpio_free(pn544_dev->irq_gpio);
+    gpio_free(pn544_dev->ven_gpio);
+    gpio_free(pn544_dev->firm_gpio);
+    kfree(pn544_dev);
+
+    return 0;
+}
+
+static int pn544_suspend(struct i2c_client *client, pm_message_t mesg)
+{
+#ifdef _PN544_I2C_TEST
+    printk(KERN_ERR "%s :\n", __func__);
+#elif defined(_PN544_I2C_LOG_VIEW)
+    if(log_enable)
+        printk(KERN_ERR "%s :\n", __func__);
+#endif
+    //platform_data->set_power(&client->dev,0);
+
+    return 0;
+}
+
+static int pn544_resume(struct i2c_client *client)
+{
+#ifdef _PN544_I2C_TEST
+    printk(KERN_ERR "%s :\n", __func__);
+#elif defined(_PN544_I2C_LOG_VIEW)
+    if(log_enable)
+        printk(KERN_ERR "%s :\n", __func__);
+#endif
+    //platform_data->set_power(&client->dev,1);
+
+    return 0;
+}
+
+static const struct i2c_device_id pn544_id[] = {
+	{ "pn544", 0 },
+	{ }
+};
+
+static struct i2c_driver pn544_driver = {
+    .driver		= {
+                        .name	= "pn544",
+     },
+    .probe		= pn544_probe,                        
+    .remove		= pn544_remove,
+    .suspend    = pn544_suspend,
+    .resume     = pn544_resume,
+    .id_table	= pn544_id,    
+};
+
+/*
+* module load/unload record keeping
+*/
+
+static int __init pn544_dev_init(void)
+{
+    int ret;
+
+    //printk(KERN_INFO "Loading pn544 driver\n");
+    ret = i2c_add_driver(&pn544_driver);
+    printk(KERN_INFO"%s: i2c_add_driver result %d\n", __func__, ret);
+
+    return ret;
+}
+module_init(pn544_dev_init);
+
+static void __exit pn544_dev_exit(void)
+{
+    printk(KERN_INFO "Unloading pn544 driver\n");
+    i2c_del_driver(&pn544_driver);
+}
+module_exit(pn544_dev_exit);
+
+MODULE_AUTHOR("Sylvain Fonteneau");
+MODULE_DESCRIPTION("NFC PN544 driver");
+MODULE_LICENSE("GPL");
diff -urN caf/drivers/power/Makefile for-diff/drivers/power/Makefile
--- caf/drivers/power/Makefile	2015-09-08 23:43:53.951167149 +0900
+++ for-diff/drivers/power/Makefile	2015-09-13 14:03:02.665921000 +0900
@@ -58,3 +58,4 @@
 obj-$(CONFIG_PM8921_CHARGER)	+= pm8921-charger.o
 obj-$(CONFIG_LTC4088_CHARGER)	+= ltc4088-charger.o
 obj-$(CONFIG_CHARGER_SMB347)	+= smb347-charger.o
+obj-$(CONFIG_KTTECH_BATTERY_GAUGE_MAXIM)   += max17040_kttech.o
diff -urN caf/drivers/power/max17040_kttech.c for-diff/drivers/power/max17040_kttech.c
--- caf/drivers/power/max17040_kttech.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/power/max17040_kttech.c	2015-10-08 21:37:39.676858000 +0900
@@ -0,0 +1,555 @@
+#include <linux/module.h>
+#include <linux/param.h>
+#include <linux/jiffies.h>
+#include <linux/workqueue.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/power_supply.h>
+#include <linux/idr.h>
+#include <linux/i2c.h>
+#include <linux/slab.h>
+#include <asm/unaligned.h>
+#include <linux/kernel.h>
+#include <linux/timer.h>
+
+#ifdef CONFIG_MACH_KTTECH
+#include <mach/board.h>
+#endif
+
+#include <linux/mfd/pm8xxx/pm8921-charger.h>
+
+//void max17040_init(void);
+int max17040_get_soc(int batt_temp);
+int max17040_get_voltage(void);
+//int max17040_get_current(void);
+int max17040_get_temperature(void);
+
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+
+/**************************************************************************
+ * KTTECH_MAXIM_BATT_MODEL_18BIT
+ *
+ * RCOMP = 0xB700, FullSoc = 98.45, EmptySoc = 1.68, 18bit mode
+ *
+ * 업체에서 전달 받은 배터리 모델 값이 19BIT일 경우 Feature 삭제
+***************************************************************************/
+//#define KTTECH_MAXIM_BATT_MODEL_18BIT 
+
+static int maxim_read_reg(u8 regoffset, u8 *value);
+
+#define MAX17410_SLAVE_ADDR			0x36
+#define MAX17410_QUP_I2C_BUS_ID	1
+
+#define MAX17410_I2C_RETRY_NUM		16
+
+#define MAX17040_VCELL_MSB	0x02
+#define MAX17040_VCELL_LSB	0x03
+#define MAX17040_SOC_MSB	0x04
+#define MAX17040_SOC_LSB	0x05
+#define MAX17040_MODE_MSB	0x06
+#define MAX17040_MODE_LSB	0x07
+#define MAX17040_VER_MSB	0x08
+#define MAX17040_VER_LSB	0x09
+#define MAX17040_RCOMP_MSB	0x0C
+#define MAX17040_RCOMP_LSB	0x0D
+#define MAX17040_OCV_MSB    0x0E
+#define MAX17040_OCV_LSB      0x0F
+#define MAX17040_CMD_MSB	0xFE
+#define MAX17040_CMD_LSB	0xFF
+
+#if 0
+#define MAXIM_FGAUGE_MSG_LVL KERN_INFO"[MAXIM Fual gauge] : "
+#define MAXIM_FGAUGE_ERR_LVL KERN_ERR"[### MAXIM Fual gauge error!!! ###] : "
+#define MAXIM_FGAUGE_MSG(_fmt_,_arg_...) printk(MAXIM_FGAUGE_MSG_LVL _fmt_,##_arg_)
+#define MAXIM_FGAUGE_ERR(_fmt_,_arg_...) printk(MAXIM_FGAUGE_ERR_LVL _fmt_,##_arg_)
+#else
+#define MAXIM_FGAUGE_MSG(_fmt_,_arg_...)
+#define MAXIM_FGAUGE_ERR(_fmt_,_arg_...)  printk(KERN_ERR _fmt_,##_arg_)
+#endif
+
+static unsigned char m_batt_not_present = 0;
+static unsigned char m_latest_rcomp_msb = 0x70;
+struct timer_list m_batt_insert_check_timer;
+
+static void max17040_batt_insert_check_func(unsigned long data)
+{
+	//m_batt_insert_check_timer.expires = jiffies + (HZ*2);
+	//add_timer(&m_batt_insert_check_timer);
+	m_batt_not_present = 1;
+	printk("[gun]max17040_batt_insert_check_func() => No Battery!\n");
+	pm8921_update_battery_status_force();
+}
+
+static int maxim_read_reg(u8 regoffset, u8 *value)
+{
+	struct i2c_adapter *adap;
+	int ret;
+	struct i2c_msg msg[2];
+
+	adap = i2c_get_adapter(MAX17410_QUP_I2C_BUS_ID);
+	if (!adap)
+		return -ENODEV;
+
+	/* setup the address to read */
+	msg[0].addr = MAX17410_SLAVE_ADDR;
+	msg[0].len = 1;
+	msg[0].flags = 0;
+	msg[0].buf = &regoffset;
+
+	/* setup the read buffer */
+	msg[1].addr = MAX17410_SLAVE_ADDR;
+	msg[1].flags = I2C_M_RD;
+	msg[1].len = 2;
+	msg[1].buf = value;
+
+	ret = i2c_transfer(adap, msg, 2);
+
+	return (ret >= 0) ? 0 : ret;
+}
+
+
+static int maxim_write_reg(u8 regoffset, u8 msb, u8 lsb)
+{
+	struct i2c_adapter *adap;
+	int ret;
+	struct i2c_msg msg;
+	u8 buf[4];
+
+	adap = i2c_get_adapter(MAX17410_QUP_I2C_BUS_ID);
+	if (!adap){
+		MAXIM_FGAUGE_ERR("No Device (MAX17410_QUP_I2C_BUS_ID) \n");
+		return -ENODEV;
+	}
+
+	buf[0] = regoffset;
+	buf[1] = msb;
+	buf[2] = lsb;
+
+	/* setup the address to write */
+	msg.addr = MAX17410_SLAVE_ADDR;
+	msg.flags = 0x0;
+	msg.len = 3;
+	msg.buf = buf;
+
+	ret = i2c_transfer(adap, &msg, 1);
+
+	return ret;
+	
+}
+
+static int maxim_write_data(u8 reg_offset, u8 *data, int num_bytes)
+{
+	struct i2c_adapter *adap;
+	int ret;
+	struct i2c_msg msg;
+	u8 buf[32];
+
+	adap = i2c_get_adapter(MAX17410_QUP_I2C_BUS_ID);
+	if (!adap){
+		MAXIM_FGAUGE_ERR("No Device (MAX17410_QUP_I2C_BUS_ID) \n");
+		return -ENODEV;
+	}
+
+	buf[0] = reg_offset;
+	memcpy(&buf[1], data, num_bytes);
+
+	/* setup the address to write */
+	msg.addr = MAX17410_SLAVE_ADDR;
+	msg.flags = 0x0;
+	msg.len = num_bytes + 1;
+	msg.buf = buf;
+
+	ret = i2c_transfer(adap, &msg, 1);
+
+	return ret;
+
+}
+
+
+static int max17040_update_rcomp(int batt_temp)
+{
+
+	#define INIT_RCOMP 11250  // 0x70*100  + 50 // from  INI file
+	#define TEMP_CO_HOT  -30		  // -0.3 *100
+	#define TEMP_CO_COLD -520  // -5.2 *100
+
+	int new_rcomp=0;
+	//u8 rcomp_buf[2];
+	
+	if(batt_temp >= 200){
+		new_rcomp = INIT_RCOMP + ( ((batt_temp - 200)/10) * TEMP_CO_HOT);
+	}
+
+	if(batt_temp < 200){
+		new_rcomp = INIT_RCOMP + ( ((batt_temp - 200)/10) * TEMP_CO_COLD);
+
+	}
+	new_rcomp /= 100;
+
+	if(new_rcomp > 0xff) new_rcomp = 0xff;
+	if(new_rcomp < 0) new_rcomp = 0;
+
+	//printk(KERN_INFO"[gun] new RCOMP = 0x%x\n", new_rcomp);
+	m_latest_rcomp_msb = (unsigned char)new_rcomp;
+
+	if( maxim_write_reg(MAX17040_RCOMP_MSB, (u8)(new_rcomp), 0x00) < 0){
+		MAXIM_FGAUGE_ERR("max17040 I2C failed to write \n");
+		return -1;
+	}
+
+	return 0;
+
+}
+
+static int max17040_need_to_update_rcomp(int batt_temp)
+{
+	#define UPDATE_CONDITION  30   // 3℃
+	#define INVALID_BATT_TEMP  -300
+		
+	static int latest_temp = 200;         // starting temperature
+	
+	int temp_diff;
+
+	if( batt_temp == INVALID_BATT_TEMP ) return 0;
+
+	temp_diff = batt_temp - latest_temp;
+
+	// check if RCOMP need to be updated		
+	if( (temp_diff >= UPDATE_CONDITION) ||(temp_diff <=  -1*UPDATE_CONDITION) )
+	{
+
+		printk(KERN_INFO"[gun]::Battery temperature current= %d, latest= %d, diff=%d\n",
+			batt_temp, latest_temp, temp_diff);	
+		latest_temp = batt_temp;
+		return 1;
+	}
+
+	return 0;
+
+}
+
+
+static int max17040_loading_custom_model(void)
+{
+	u8 rcomp_buf[2];
+	u8 ocv_buf[2];
+	u8 soc_buf[2];
+	u8 data[16];
+
+	printk("::: max17040_loading_custom_model() :::\n");
+
+	// 1. unlock Model Access
+	maxim_write_reg(0x3E,0x4A,0x57);
+
+	// 2. Read RCOMP and OCV
+	maxim_read_reg(MAX17040_RCOMP_MSB, rcomp_buf);
+	printk(KERN_INFO"[gun] RCOMP read value = 0x%x\n", ((rcomp_buf[0]<<8) + rcomp_buf[1]));
+	
+	maxim_read_reg(MAX17040_OCV_MSB, ocv_buf);
+	printk(KERN_INFO"[gun] OCV read value = 0x%x\n", ((ocv_buf[0]<<8) + ocv_buf[1]));
+
+	// 3. Write OCV
+	maxim_write_reg(MAX17040_OCV_MSB, 0xE2, 0x00);
+
+	// 4. Write RCOMP to a Maximum value of 0xFF00
+	maxim_write_reg(MAX17040_RCOMP_MSB, 0xFF, 0x00);
+
+	// 5. Write Model
+	data[0]  = 0x84;
+	data[1]  = 0xD0;
+	data[2]  = 0xB5;
+	data[3]  = 0xD0;
+	data[4]  = 0xB7;
+	data[5]  = 0x50;
+	data[6]  = 0xB9;
+	data[7]  = 0x20;
+	data[8]  = 0xB9;
+	data[9]  = 0x80;
+	data[10] = 0xBB;
+	data[11] = 0x70;
+	data[12] = 0xBC;
+	data[13] = 0x80;
+	data[14] = 0xBD;
+	data[15] = 0x30;
+	maxim_write_data(0x40, data, 16);
+
+	data[0]  = 0xBD; 
+	data[1]  = 0xC0; 
+	data[2]  = 0xBE; 
+	data[3]  = 0xE0; 
+	data[4]  = 0xC1; 
+	data[5]  = 0x90; 
+	data[6]  = 0xC5; 
+	data[7]  = 0xA0; 
+	data[8]  = 0xC8; 
+	data[9]  = 0x50; 
+	data[10] = 0xCB; 
+	data[11] = 0xD0; 
+	data[12] = 0xD1; 
+	data[13] = 0xC0; 
+	data[14] = 0xD8; 
+	data[15] = 0x00; 
+	maxim_write_data(0x50, data, 16);
+
+	data[0]  = 0x00;
+	data[1]  = 0x20;
+	data[2]  = 0x21;
+	data[3]  = 0x60;
+	data[4]  = 0x1A;
+	data[5]  = 0x40;
+	data[6]  = 0x66;
+	data[7]  = 0x10;
+	data[8]  = 0x00;
+	data[9]  = 0x20;
+	data[10] =0x2F;
+	data[11] =0x10;
+	data[12] =0x4A; 
+	data[13] =0xA0; 
+	data[14] =0x7A;
+	data[15] =0xD0; 
+	maxim_write_data(0x60, data, 16);
+
+	data[0]   = 0x2C;
+	data[1]   = 0xA0;
+	data[2]   = 0x19;
+	data[3]   = 0xF0;
+	data[4]   = 0x11;
+	data[5]   = 0xC0;
+	data[6]   = 0x18;
+	data[7]   = 0x10;
+	data[8]   = 0x12;
+	data[9]   = 0xF0;
+	data[10] = 0x0D;
+	data[11] = 0xF0;
+	data[12] = 0x0D;
+	data[13] = 0x20;
+	data[14] = 0x0D;
+	data[15] = 0x20;
+	maxim_write_data(0x70, data, 16);
+
+	// 6. Delay at least 150mS
+	msleep(150);
+
+	// 7. Write OCV
+	maxim_write_reg(MAX17040_OCV_MSB, 0xE2, 0x00);
+
+	// 8. Delay between 150mS and 600mS
+	msleep(200);
+
+	// 9. Read SOC Register and Compare to expected result
+	maxim_read_reg(MAX17040_SOC_MSB, soc_buf);
+	printk(KERN_INFO"[gun] SOC read value = 0x%x\n", ((soc_buf[0]<<8) + soc_buf[1]));
+
+	if((soc_buf[0] < 0xE7) || (soc_buf[0]>0xE9))
+	{	
+		MAXIM_FGAUGE_ERR("Battery model was not loaded successful soc1 = 0x%x soc2 = 0x%x\n", soc_buf[0], soc_buf[1]);
+		return -1;
+	} 
+
+	//  10. Restore RCOMP and OCV
+	maxim_write_reg(MAX17040_RCOMP_MSB, rcomp_buf[0], rcomp_buf[1]);
+	maxim_write_reg(MAX17040_OCV_MSB, ocv_buf[0], ocv_buf[1]);
+
+	//  11. Lock Model Access
+	maxim_write_reg(0x3E,0x00,0x00);
+
+	//  12. Update RCOMP
+	//maxim_write_reg(MAX17040_RCOMP_MSB, rcomp_buf[0], rcomp_buf[1]);
+	MAXIM_FGAUGE_ERR("latest RCOMP: %x\n", m_latest_rcomp_msb);
+	maxim_write_reg(MAX17040_RCOMP_MSB, m_latest_rcomp_msb, 0x00);
+
+	msleep(150);
+	MAXIM_FGAUGE_ERR("Battery model was loaded successful\n");
+
+	return 0;
+	
+}
+
+
+
+int max17040_get_voltage(void)
+{
+	static int voltage_err_count = 0;
+	u8 voltage[2];
+	int vcell;
+	int err;
+	int i = 0;
+	static int max17040_latest_voltage = 0;
+
+#ifdef CONFIG_MACH_KTTECH
+	if ( get_kttech_ftm_mode() != KTTECH_FTM_MODE_NONE ){
+		// if phone is in FTM mode, return constant SoC
+		MAXIM_FGAUGE_ERR("In FTM mode, return a voltage => 3800\n");
+		return 3800;
+	}
+#endif
+
+	for(i = 0; i < MAX17410_I2C_RETRY_NUM; i++)
+	{
+		err = maxim_read_reg(MAX17040_VCELL_MSB, &voltage[0]);
+		if(err >= 0) {
+			vcell = (((voltage[0] << 4) + (voltage[1] >> 4)) * 5) >> 2;
+			MAXIM_FGAUGE_MSG(" %s: %d %x %x\n", __func__, vcell, voltage[0], voltage[1]);
+			max17040_latest_voltage = vcell;
+			return vcell;
+		}
+		voltage_err_count++;
+	}	
+
+	MAXIM_FGAUGE_ERR("kttech-charger I2C failed.. %d\n", voltage_err_count);
+	return max17040_latest_voltage;
+	
+}
+
+#if 0
+static int max17040_quick_start(void)
+{
+
+	MAXIM_FGAUGE_ERR("max17040_quick_start() called \n");
+
+	if(maxim_write_reg(MAX17040_MODE_MSB, 0x40, 0x00) < 0){
+		MAXIM_FGAUGE_ERR("MAX17040_MODE_MSB #1 - write failed \n");
+		return -1;
+	}
+
+	msleep(500);
+
+	if(maxim_write_reg(MAX17040_MODE_MSB, 0x00, 0x00) < 0){
+		MAXIM_FGAUGE_ERR("MAX17040_MODE_MSB #2 - write failed \n");
+		return -1;
+	}
+	
+	return 0;
+	
+}
+#endif
+
+int max17040_batt_insert_irq_handler(int batt_present)
+{
+
+	MAXIM_FGAUGE_ERR("max17040_batt_insert_irq_handler(batt_present= %d)\n", batt_present);
+
+	if(batt_present){
+
+		if(max17040_loading_custom_model() != 0)
+		{
+			MAXIM_FGAUGE_ERR("failed to load custom model data\n");
+			max17040_loading_custom_model();
+		}
+		//max17040_quick_start();
+		//msleep(500);
+		m_batt_not_present = 0;
+		del_timer(&m_batt_insert_check_timer);
+		pm8921_update_battery_status_force();
+
+	}else{
+		//max17040_quick_start();
+		m_batt_insert_check_timer.expires = jiffies + HZ*3 + HZ/2;
+		m_batt_insert_check_timer.data = 0;
+		m_batt_insert_check_timer.function = &max17040_batt_insert_check_func;
+		printk("[gun] add timer \n");
+		add_timer(&m_batt_insert_check_timer);		
+	}
+	
+	return 0;
+
+}
+
+
+int max17040_get_soc(int batt_temp)
+{
+	static int soc_err_count = 0;
+	u8 soc[2];
+	int SOCValue;
+	int DisplayedSOC;
+	int err;
+	int i = 0;
+
+	#ifdef CONFIG_MACH_KTTECH
+	if ( get_kttech_ftm_mode() != KTTECH_FTM_MODE_NONE ){
+		// if phone is in FTM mode, return constant SoC
+		MAXIM_FGAUGE_ERR("In FTM mode, return a constant SoC => 50\n");
+		return 50;
+	}
+	#endif
+
+	if(m_batt_not_present) return 0;
+
+	if(max17040_need_to_update_rcomp(batt_temp)){
+		max17040_update_rcomp(batt_temp);
+	}
+
+	for(i = 0; i < MAX17410_I2C_RETRY_NUM; i++)
+	{
+		err = maxim_read_reg(MAX17040_SOC_MSB, &soc[0]);
+		if(err >= 0) {
+#ifdef KTTECH_MAXIM_BATT_MODEL_18BIT
+			//Spider Model : RCOMP = 0xB700, FullSoc = 95.55, EmptySoc = 1.68, 18bit mode
+			SOCValue = (( (soc[0] << 8) + soc[1] ) );
+			DisplayedSOC = (SOCValue - 431) / 240;
+			if(DisplayedSOC > 100)
+				DisplayedSOC = 100;
+			else if(DisplayedSOC < 0)
+				DisplayedSOC = 0;
+#else 
+			// 19bit mode, FullSoc = 101.80, EmpySoc = 0.68
+			// 512 => 1%, FullSocRaw = 512*FullSoc, EmptySocRaw=512*EmptySoc
+			// DisplayedSoc = (SocRaw - EmptySocRaw)/((FullSocRaw-EmptySocRaw)/100)
+			//                           = (SocRaw - 512*0.68)/((512*101.8 - 512*0.68)/100)
+			//                           =(SocRaw - 348)/((52121-348)/100)
+
+			// 19bit mode, FullSoc = 98.0 , EmpySoc = 0.2
+			// 512 => 1%, FullSocRaw = 512*FullSoc, EmptySocRaw=512*EmptySoc
+			// DisplayedSoc = (SocRaw - EmptySocRaw)/((FullSocRaw-EmptySocRaw)/100)
+			//                           = (SocRaw - 512*0.2)/((512*98.2 - 512*0.2)/100)
+			//                           =(SocRaw - 102)/(50176-102)/100)
+			SOCValue = (( (soc[0] << 8) + soc[1] ) );
+
+			// additional compensation(or trick) for low battery state
+			// The voltage level of SoC 1% should be changed to 3.55V
+			if(SOCValue < 25000){
+				if(likely(SOCValue > 350)){
+					SOCValue += (35000/SOCValue);
+				}
+			}
+			
+			DisplayedSOC = (SOCValue - 0) / 496;
+			if(DisplayedSOC > 100)
+				DisplayedSOC = 100;
+			else if(DisplayedSOC < 0)
+				DisplayedSOC = 0;
+#endif
+			//MAXIM_FGAUGE_ERR("Maxim17040:: displayedSoC=%d RawSoC=0x%x%02x Batt_temp: %d\n", 
+				//DisplayedSOC, soc[0], soc[1], batt_temp);
+			return DisplayedSOC;
+		}
+		soc_err_count++;
+	}
+
+	MAXIM_FGAUGE_ERR("kttech-charger I2C failed. %d\n", soc_err_count);
+	return err;
+}
+
+int max17040_get_temperature(void)
+{
+	return 30;
+}
+
+static int __init max17040_init(void)
+{
+	printk("[gun]max17040_init() called\n");
+	init_timer(&m_batt_insert_check_timer);
+	return 0;
+}
+module_init(max17040_init);
+
+static void __exit max17040_exit(void)
+{
+	del_timer_sync(&m_batt_insert_check_timer);
+}
+module_exit(max17040_exit);
+
+MODULE_DESCRIPTION("KTtech MAX17040 Fuel Gauge");
+MODULE_LICENSE("GPL");
+
+#endif
diff -urN caf/drivers/power/pm8921-charger.c for-diff/drivers/power/pm8921-charger.c
--- caf/drivers/power/pm8921-charger.c	2015-09-08 23:43:53.955167149 +0900
+++ for-diff/drivers/power/pm8921-charger.c	2015-10-08 21:27:36.864846000 +0900
@@ -31,6 +31,10 @@
 #include <mach/msm_xo.h>
 #include <mach/msm_hsusb.h>
 
+#ifdef CONFIG_MACH_KTTECH
+#include <mach/board.h>
+#endif
+
 #define CHG_BUCK_CLOCK_CTRL	0x14
 
 #define PBL_ACCESS1		0x04
@@ -273,6 +277,10 @@
 	bool				has_dc_supply;
 	u8				active_path;
 	int				recent_reported_soc;
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	struct delayed_work 	max17040_work;
+#endif
+
 };
 
 /* user space parameter to limit usb current */
@@ -290,6 +298,27 @@
 
 static struct pm8xxx_adc_arb_btm_param btm_config;
 
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+extern int max17040_get_voltage(void);
+extern int max17040_get_soc(int batt_temp);
+extern int max17040_batt_insert_irq_handler(int batt_present);
+
+static int test_batt_temp;
+static int latest_batt_real_temp=200;
+static int param_set_battery_voltage(const char *val, struct kernel_param *kp)
+{
+	int ret;
+	ret = param_set_int(val, kp);
+	if (ret) {
+		pr_err("error setting value %d\n", ret);
+		return ret;
+	}	
+	return 0;
+}
+module_param_call(test_batt_temp, param_set_battery_voltage, param_get_int, &test_batt_temp, 0644);
+static int get_prop_batt_present(struct pm8921_chg_chip *chip);
+#endif
+
 static int pm_chg_masked_write(struct pm8921_chg_chip *chip, u16 addr,
 							u8 mask, u8 val)
 {
@@ -1072,6 +1101,10 @@
 	struct pm8921_chg_chip *chip = container_of(work,
 				struct pm8921_chg_chip, battery_id_valid_work);
 
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	max17040_batt_insert_irq_handler(get_prop_batt_present(chip));
+#endif
+
 	check_battery_valid(chip);
 }
 
@@ -1360,8 +1393,23 @@
 	POWER_SUPPLY_PROP_CURRENT_NOW,
 	POWER_SUPPLY_PROP_TEMP,
 	POWER_SUPPLY_PROP_ENERGY_FULL,
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN,
+#endif
+
 };
 
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+static int get_prop_battery_uvolts(struct pm8921_chg_chip *chip)
+{
+	int uVolts;
+	
+	uVolts = max17040_get_voltage()*1000;
+	pr_debug(":::: max17040_based mVolts= %d\n",uVolts/1000);
+	return uVolts;
+
+}
+#else
 static int get_prop_battery_uvolts(struct pm8921_chg_chip *chip)
 {
 	int rc;
@@ -1393,12 +1441,30 @@
 		return (current_voltage_mv - low_voltage) * 100
 		    / (high_voltage - low_voltage);
 }
+#endif
 
 static int get_prop_batt_present(struct pm8921_chg_chip *chip)
 {
 	return pm_chg_get_rt_status(chip, BATT_INSERTED_IRQ);
 }
 
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+static int get_prop_batt_capacity(struct pm8921_chg_chip *chip)
+{
+	int percent_soc = 0;
+
+	if(test_batt_temp != 0){
+		percent_soc = max17040_get_soc(test_batt_temp);
+	}else{
+		percent_soc = max17040_get_soc(latest_batt_real_temp);
+	}
+	
+	//pr_info("::::  max17040_based SOC =  %d , real batt temp=%d, test batt temp=%d \n", 
+		//percent_soc, latest_batt_real_temp, test_batt_temp);
+	return percent_soc;
+	
+}
+#else
 static int get_prop_batt_capacity(struct pm8921_chg_chip *chip)
 {
 	int percent_soc;
@@ -1417,6 +1483,7 @@
 	chip->recent_reported_soc = percent_soc;
 	return percent_soc;
 }
+#endif
 
 static int get_prop_batt_current(struct pm8921_chg_chip *chip)
 {
@@ -1518,18 +1585,30 @@
 	int rc;
 	struct pm8xxx_adc_chan_result result;
 
+#ifdef CONFIG_MACH_KTTECH
+	if ( get_kttech_ftm_mode() != KTTECH_FTM_MODE_NONE ){
+		// if phone is in FTM mode, return constant temp
+		printk("In FTM mode, return a temp => 300\n");
+		return 300;
+	}
+#endif
+
 	rc = pm8xxx_adc_read(chip->batt_temp_channel, &result);
 	if (rc) {
 		pr_err("error reading adc channel = %d, rc = %d\n",
 					chip->vbat_channel, rc);
 		return rc;
 	}
-	pr_debug("batt_temp phy = %lld meas = 0x%llx\n", result.physical,
-						result.measurement);
+	//pr_debug("batt_temp phy = %lld meas = 0x%llx\n", result.physical,
+						//result.measurement); // kttech
 	if (result.physical > MAX_TOLERABLE_BATT_TEMP_DDC)
 		pr_err("BATT_TEMP= %d > 68degC, device will be shutdown\n",
 							(int) result.physical);
 
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	latest_batt_real_temp = (int)result.physical;
+#endif
+
 	return (int)result.physical;
 }
 
@@ -1577,6 +1656,12 @@
 	case POWER_SUPPLY_PROP_ENERGY_FULL:
 		val->intval = get_prop_batt_fcc(chip) * 1000;
 		break;
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	case POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN:
+		// O7: battery full design capacity 2040mA
+		val->intval = 2040000;
+		break;
+#endif
 	default:
 		return -EINVAL;
 	}
@@ -1619,6 +1704,11 @@
 static void __pm8921_charger_vbus_draw(unsigned int mA)
 {
 	int i, rc;
+
+#ifdef CONFIG_MACH_KTTECH
+	printk("[%s] charge mA=%d \n", __func__, mA);
+#endif
+
 	if (!the_chip) {
 		pr_err("called before init\n");
 		return;
@@ -1626,6 +1716,19 @@
 
 	if (mA >= 0 && mA <= 2) {
 		usb_chg_current = 0;
+#ifdef CONFIG_MACH_KTTECH
+		if ( get_kttech_ftm_mode() == KTTECH_FTM_MODE_NONE )
+		{
+			rc = pm_chg_iusbmax_set(the_chip, 0);
+			if (rc) {
+				pr_err("unable to set iusb to %d rc = %d\n", 0, rc);
+			}
+
+			rc = pm_chg_usb_suspend_enable(the_chip, 1);
+			if (rc)
+				pr_err("fail to set suspend bit rc=%d\n", rc);
+		}
+#else
 		rc = pm_chg_iusbmax_set(the_chip, 0);
 		if (rc) {
 			pr_err("unable to set iusb to %d rc = %d\n", 0, rc);
@@ -1633,6 +1736,7 @@
 		rc = pm_chg_usb_suspend_enable(the_chip, 1);
 		if (rc)
 			pr_err("fail to set suspend bit rc=%d\n", rc);
+#endif
 	} else {
 		rc = pm_chg_usb_suspend_enable(the_chip, 0);
 		if (rc)
@@ -1648,10 +1752,20 @@
 			i--;
 		if (i < 0)
 			i = 0;
+#ifdef CONFIG_MACH_KTTECH
+		if ( get_kttech_ftm_mode() == KTTECH_FTM_MODE_NONE )
+		{
+			rc = pm_chg_iusbmax_set(the_chip, i);
+			if (rc) {
+				pr_err("unable to set iusb to %d rc = %d\n", i, rc);
+			}
+		}
+#else
 		rc = pm_chg_iusbmax_set(the_chip, i);
 		if (rc) {
 			pr_err("unable to set iusb to %d rc = %d\n", i, rc);
 		}
+#endif
 	}
 }
 
@@ -1660,7 +1774,11 @@
 {
 	unsigned long flags;
 
+#ifdef CONFIG_MACH_KTTECH
+	printk("[%s] Enter charge mA=%d \n", __func__, mA);
+#else
 	pr_debug("Enter charge=%d\n", mA);
+#endif
 
 	if (!the_chip) {
 		pr_err("chip not yet initalized\n");
@@ -1758,6 +1876,21 @@
 }
 EXPORT_SYMBOL(pm8921_is_battery_present);
 
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+int pm8921_update_battery_status_force(void)
+{
+	if (!the_chip) {
+		pr_err("called before init\n");
+		return -EINVAL;
+
+
+	}
+	power_supply_changed(&the_chip->batt_psy);
+	return 0;
+}
+EXPORT_SYMBOL(pm8921_update_battery_status_force);
+#endif
+
 int pm8921_is_batfet_closed(void)
 {
 	if (!the_chip) {
@@ -1848,10 +1981,17 @@
 		return -EINVAL;
 	}
 
+#ifdef CONFIG_MACH_KTTECH
+	if (ov > PM_USB_OV_6V) {
+		pr_err("limiting to over voltage threshold to 6volts\n");
+		ov = PM_USB_OV_6V;
+	}
+#else
 	if (ov > PM_USB_OV_7V) {
 		pr_err("limiting to over voltage threshold to 7volts\n");
 		ov = PM_USB_OV_7V;
 	}
+#endif
 
 	temp = USB_OV_THRESHOLD_MASK & (ov << USB_OV_THRESHOLD_SHIFT);
 
@@ -2286,6 +2426,14 @@
 	handle_start_ext_chg(chip);
 	pr_debug("battery present=%d", status);
 	power_supply_changed(&chip->batt_psy);
+
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	if(status){
+		schedule_delayed_work(&chip->max17040_work, 
+			round_jiffies_relative(msecs_to_jiffies(500)));
+	}
+#endif
+
 	return IRQ_HANDLED;
 }
 
@@ -3048,6 +3196,18 @@
 	}
 }
 
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+static void max17040_worker(struct work_struct *work)
+{
+	struct delayed_work *dwork = to_delayed_work(work);
+	struct pm8921_chg_chip *chip = container_of(dwork,
+				struct pm8921_chg_chip, max17040_work);
+
+	power_supply_changed(&chip->batt_psy);	
+
+}
+#endif
+
 static void btm_configure_work(struct work_struct *work)
 {
 	int rc;
@@ -3639,8 +3799,14 @@
 		return rc;
 	}
 
+#ifdef CONFIG_MACH_KTTECH
+	/* disable BTM by QA team request */
+	rc = pm_chg_masked_write(chip, CHG_CNTRL_2,
+				CHG_BAT_TEMP_DIS_BIT, (1<<2));
+#else
 	rc = pm_chg_masked_write(chip, CHG_CNTRL_2,
 				CHG_BAT_TEMP_DIS_BIT, 0);
+#endif
 	if (rc) {
 		pr_err("Failed to enable temp control chg rc=%d\n", rc);
 		return rc;
@@ -4002,6 +4168,12 @@
 	const struct pm8921_charger_platform_data *pdata
 				= pdev->dev.platform_data;
 
+#ifdef CONFIG_MACH_KTTECH //by hw request.
+	if ( get_kttech_ftm_mode() == FTM_MODE_NO_LCD ){
+		charging_disabled = 1;
+	}
+#endif
+
 	if (!pdata) {
 		pr_err("missing platform data\n");
 		return -EINVAL;
@@ -4110,12 +4282,20 @@
 	platform_set_drvdata(pdev, chip);
 	the_chip = chip;
 
+#ifdef CONFIG_MACH_KTTECH
+	pm8921_usb_ovp_set_threshold(PM_USB_OV_6V);
+#endif
+
 	wake_lock_init(&chip->eoc_wake_lock, WAKE_LOCK_SUSPEND, "pm8921_eoc");
 	INIT_DELAYED_WORK(&chip->eoc_work, eoc_worker);
 	INIT_DELAYED_WORK(&chip->vin_collapse_check_work,
 						vin_collapse_check_worker);
 	INIT_DELAYED_WORK(&chip->unplug_check_work, unplug_check_worker);
 
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+	INIT_DELAYED_WORK(&chip->max17040_work, max17040_worker);
+#endif
+
 	rc = request_irqs(chip, pdev);
 	if (rc) {
 		pr_err("couldn't register interrupts rc=%d\n", rc);
diff -urN caf/drivers/staging/android/Kconfig for-diff/drivers/staging/android/Kconfig
--- caf/drivers/staging/android/Kconfig	2015-09-08 23:43:56.439167197 +0900
+++ for-diff/drivers/staging/android/Kconfig	2015-09-13 14:03:10.449921000 +0900
@@ -32,6 +32,64 @@
 	select REED_SOLOMON_ENC8
 	select REED_SOLOMON_DEC8
 
+########## KT Tech ADD START ##########
+config ANDROID_RAM_CONSOLE_ENABLE_VERBOSE
+	bool "Enable verbose console messages on Android RAM console"
+	default y
+	depends on ANDROID_RAM_CONSOLE
+
+menuconfig ANDROID_RAM_CONSOLE_ERROR_CORRECTION
+	bool "Android RAM Console Enable error correction"
+	default n
+	depends on ANDROID_RAM_CONSOLE
+	depends on !ANDROID_RAM_CONSOLE_EARLY_INIT
+	select REED_SOLOMON
+	select REED_SOLOMON_ENC8
+	select REED_SOLOMON_DEC8
+
+if ANDROID_RAM_CONSOLE_ERROR_CORRECTION
+
+config ANDROID_RAM_CONSOLE_ERROR_CORRECTION_DATA_SIZE
+	int "Android RAM Console Data data size"
+	default 128
+	help
+	  Must be a power of 2.
+
+config ANDROID_RAM_CONSOLE_ERROR_CORRECTION_ECC_SIZE
+	int "Android RAM Console ECC size"
+	default 16
+
+config ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE
+	int "Android RAM Console Symbol size"
+	default 8
+
+config ANDROID_RAM_CONSOLE_ERROR_CORRECTION_POLYNOMIAL
+	hex "Android RAM Console Polynomial"
+	default 0x19 if (ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE = 4)
+	default 0x29 if (ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE = 5)
+	default 0x61 if (ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE = 6)
+	default 0x89 if (ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE = 7)
+	default 0x11d if (ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE = 8)
+
+endif # ANDROID_RAM_CONSOLE_ERROR_CORRECTION
+
+config ANDROID_RAM_CONSOLE_EARLY_INIT
+	bool "Start Android RAM console early"
+	default n
+	depends on ANDROID_RAM_CONSOLE
+
+config ANDROID_RAM_CONSOLE_EARLY_ADDR
+	hex "Android RAM console virtual address"
+	default 0
+	depends on ANDROID_RAM_CONSOLE_EARLY_INIT
+
+config ANDROID_RAM_CONSOLE_EARLY_SIZE
+	hex "Android RAM console buffer size"
+	default 0
+	depends on ANDROID_RAM_CONSOLE_EARLY_INIT
+
+########## KT Tech ADD END ##########
+
 config ANDROID_RAM_CONSOLE
 	bool "Android RAM buffer console"
 	depends on !S390 && !UML && HAVE_MEMBLOCK
diff -urN caf/drivers/staging/android/ram_console.c for-diff/drivers/staging/android/ram_console.c
--- caf/drivers/staging/android/ram_console.c	2015-09-08 23:43:56.439167197 +0900
+++ for-diff/drivers/staging/android/ram_console.c	2015-09-13 14:03:10.449921000 +0900
@@ -24,6 +24,426 @@
 #include <linux/io.h>
 #include "ram_console.h"
 
+#if 1 //KTTECH
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION
+#include <linux/rslib.h>
+#endif
+
+struct ram_console_buffer {
+	uint32_t    sig;
+	uint32_t    start;
+	uint32_t    size;
+	uint8_t     data[0];
+};
+
+#define RAM_CONSOLE_SIG (0x43474244) /* DBGC */
+
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_EARLY_INIT
+static char __initdata
+	ram_console_old_log_init_buffer[CONFIG_ANDROID_RAM_CONSOLE_EARLY_SIZE];
+#endif
+static char *ram_console_old_log;
+static size_t ram_console_old_log_size;
+
+static struct ram_console_buffer *ram_console_buffer;
+static size_t ram_console_buffer_size;
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION
+static char *ram_console_par_buffer;
+static struct rs_control *ram_console_rs_decoder;
+static int ram_console_corrected_bytes;
+static int ram_console_bad_blocks;
+#define ECC_BLOCK_SIZE CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION_DATA_SIZE
+#define ECC_SIZE CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION_ECC_SIZE
+#define ECC_SYMSIZE CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE
+#define ECC_POLY CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION_POLYNOMIAL
+#endif
+
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION
+static void ram_console_encode_rs8(uint8_t *data, size_t len, uint8_t *ecc)
+{
+	int i;
+	uint16_t par[ECC_SIZE];
+	/* Initialize the parity buffer */
+	memset(par, 0, sizeof(par));
+	encode_rs8(ram_console_rs_decoder, data, len, par, 0);
+	for (i = 0; i < ECC_SIZE; i++)
+		ecc[i] = par[i];
+}
+
+static int ram_console_decode_rs8(void *data, size_t len, uint8_t *ecc)
+{
+	int i;
+	uint16_t par[ECC_SIZE];
+	for (i = 0; i < ECC_SIZE; i++)
+		par[i] = ecc[i];
+	return decode_rs8(ram_console_rs_decoder, data, par, len,
+				NULL, 0, NULL, 0, NULL);
+}
+#endif
+
+static void ram_console_update(const char *s, unsigned int count)
+{
+	struct ram_console_buffer *buffer = ram_console_buffer;
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION
+	uint8_t *buffer_end = buffer->data + ram_console_buffer_size;
+	uint8_t *block;
+	uint8_t *par;
+	int size = ECC_BLOCK_SIZE;
+#endif
+	memcpy(buffer->data + buffer->start, s, count);
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION
+	block = buffer->data + (buffer->start & ~(ECC_BLOCK_SIZE - 1));
+	par = ram_console_par_buffer +
+	      (buffer->start / ECC_BLOCK_SIZE) * ECC_SIZE;
+	do {
+		if (block + ECC_BLOCK_SIZE > buffer_end)
+			size = buffer_end - block;
+		ram_console_encode_rs8(block, size, par);
+		block += ECC_BLOCK_SIZE;
+		par += ECC_SIZE;
+	} while (block < buffer->data + buffer->start + count);
+#endif
+}
+
+static void ram_console_update_header(void)
+{
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION
+	struct ram_console_buffer *buffer = ram_console_buffer;
+	uint8_t *par;
+	par = ram_console_par_buffer +
+	      DIV_ROUND_UP(ram_console_buffer_size, ECC_BLOCK_SIZE) * ECC_SIZE;
+	ram_console_encode_rs8((uint8_t *)buffer, sizeof(*buffer), par);
+#endif
+}
+
+static void
+ram_console_write(struct console *console, const char *s, unsigned int count)
+{
+	int rem;
+	struct ram_console_buffer *buffer = ram_console_buffer;
+
+	if (count > ram_console_buffer_size) {
+		s += count - ram_console_buffer_size;
+		count = ram_console_buffer_size;
+	}
+	rem = ram_console_buffer_size - buffer->start;
+	if (rem < count) {
+		ram_console_update(s, rem);
+		s += rem;
+		count -= rem;
+		buffer->start = 0;
+		buffer->size = ram_console_buffer_size;
+	}
+	ram_console_update(s, count);
+
+	buffer->start += count;
+	if (buffer->size < ram_console_buffer_size)
+		buffer->size += count;
+	ram_console_update_header();
+}
+
+static struct console ram_console = {
+	.name	= "ram",
+	.write	= ram_console_write,
+	.flags	= CON_PRINTBUFFER | CON_ENABLED,
+	.index	= -1,
+};
+
+void ram_console_enable_console(int enabled)
+{
+	if (enabled)
+		ram_console.flags |= CON_ENABLED;
+	else
+		ram_console.flags &= ~CON_ENABLED;
+}
+
+static void __init
+ram_console_save_old(struct ram_console_buffer *buffer, const char *bootinfo,
+	char *dest)
+{
+	size_t old_log_size = buffer->size;
+	size_t bootinfo_size = 0;
+	size_t total_size = old_log_size;
+	char *ptr;
+	const char *bootinfo_label = "Boot info:\n";
+
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION
+	uint8_t *block;
+	uint8_t *par;
+	char strbuf[80];
+	int strbuf_len = 0;
+
+	block = buffer->data;
+	par = ram_console_par_buffer;
+	while (block < buffer->data + buffer->size) {
+		int numerr;
+		int size = ECC_BLOCK_SIZE;
+		if (block + size > buffer->data + ram_console_buffer_size)
+			size = buffer->data + ram_console_buffer_size - block;
+		numerr = ram_console_decode_rs8(block, size, par);
+		if (numerr > 0) {
+#if 0
+			printk(KERN_INFO "ram_console: error in block %p, %d\n",
+			       block, numerr);
+#endif
+			ram_console_corrected_bytes += numerr;
+		} else if (numerr < 0) {
+#if 0
+			printk(KERN_INFO "ram_console: uncorrectable error in "
+			       "block %p\n", block);
+#endif
+			ram_console_bad_blocks++;
+		}
+		block += ECC_BLOCK_SIZE;
+		par += ECC_SIZE;
+	}
+	if (ram_console_corrected_bytes || ram_console_bad_blocks)
+		strbuf_len = snprintf(strbuf, sizeof(strbuf),
+			"\n%d Corrected bytes, %d unrecoverable blocks\n",
+			ram_console_corrected_bytes, ram_console_bad_blocks);
+	else
+		strbuf_len = snprintf(strbuf, sizeof(strbuf),
+				      "\nNo errors detected\n");
+	if (strbuf_len >= sizeof(strbuf))
+		strbuf_len = sizeof(strbuf) - 1;
+	total_size += strbuf_len;
+#endif
+
+	if (bootinfo)
+		bootinfo_size = strlen(bootinfo) + strlen(bootinfo_label);
+	total_size += bootinfo_size;
+
+	if (dest == NULL) {
+		dest = kmalloc(total_size, GFP_KERNEL);
+		if (dest == NULL) {
+			printk(KERN_ERR
+			       "ram_console: failed to allocate buffer\n");
+			return;
+		}
+	}
+
+	ram_console_old_log = dest;
+	ram_console_old_log_size = total_size;
+	memcpy(ram_console_old_log,
+	       &buffer->data[buffer->start], buffer->size - buffer->start);
+	memcpy(ram_console_old_log + buffer->size - buffer->start,
+	       &buffer->data[0], buffer->start);
+	ptr = ram_console_old_log + old_log_size;
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION
+	memcpy(ptr, strbuf, strbuf_len);
+	ptr += strbuf_len;
+#endif
+	if (bootinfo) {
+		memcpy(ptr, bootinfo_label, strlen(bootinfo_label));
+		ptr += strlen(bootinfo_label);
+		memcpy(ptr, bootinfo, bootinfo_size);
+		ptr += bootinfo_size;
+	}
+}
+
+static int __init ram_console_init(struct ram_console_buffer *buffer,
+				   size_t buffer_size, const char *bootinfo,
+				   char *old_buf)
+{
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION
+	int numerr;
+	uint8_t *par;
+#endif
+	ram_console_buffer = buffer;
+	ram_console_buffer_size =
+		buffer_size - sizeof(struct ram_console_buffer);
+
+	if (ram_console_buffer_size > buffer_size) {
+		pr_err("ram_console: buffer %p, invalid size %zu, "
+		       "datasize %zu\n", buffer, buffer_size,
+		       ram_console_buffer_size);
+		return 0;
+	}
+
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_ERROR_CORRECTION
+	ram_console_buffer_size -= (DIV_ROUND_UP(ram_console_buffer_size,
+						ECC_BLOCK_SIZE) + 1) * ECC_SIZE;
+
+	if (ram_console_buffer_size > buffer_size) {
+		pr_err("ram_console: buffer %p, invalid size %zu, "
+		       "non-ecc datasize %zu\n",
+		       buffer, buffer_size, ram_console_buffer_size);
+		return 0;
+	}
+
+	ram_console_par_buffer = buffer->data + ram_console_buffer_size;
+
+
+	/* first consecutive root is 0
+	 * primitive element to generate roots = 1
+	 */
+	ram_console_rs_decoder = init_rs(ECC_SYMSIZE, ECC_POLY, 0, 1, ECC_SIZE);
+	if (ram_console_rs_decoder == NULL) {
+		printk(KERN_INFO "ram_console: init_rs failed\n");
+		return 0;
+	}
+
+	ram_console_corrected_bytes = 0;
+	ram_console_bad_blocks = 0;
+
+	par = ram_console_par_buffer +
+	      DIV_ROUND_UP(ram_console_buffer_size, ECC_BLOCK_SIZE) * ECC_SIZE;
+
+	numerr = ram_console_decode_rs8(buffer, sizeof(*buffer), par);
+	if (numerr > 0) {
+		printk(KERN_INFO "ram_console: error in header, %d\n", numerr);
+		ram_console_corrected_bytes += numerr;
+	} else if (numerr < 0) {
+		printk(KERN_INFO
+		       "ram_console: uncorrectable error in header\n");
+		ram_console_bad_blocks++;
+	}
+#endif
+
+	if (buffer->sig == RAM_CONSOLE_SIG) {
+		if (buffer->size > ram_console_buffer_size
+		    || buffer->start > buffer->size)
+			printk(KERN_INFO "ram_console: found existing invalid "
+			       "buffer, size %d, start %d\n",
+			       buffer->size, buffer->start);
+		else {
+			printk(KERN_INFO "ram_console: found existing buffer, "
+			       "size %d, start %d\n",
+			       buffer->size, buffer->start);
+			ram_console_save_old(buffer, bootinfo, old_buf);
+		}
+	} else {
+		printk(KERN_INFO "ram_console: no valid data in buffer "
+		       "(sig = 0x%08x)\n", buffer->sig);
+	}
+
+	buffer->sig = RAM_CONSOLE_SIG;
+	buffer->start = 0;
+	buffer->size = 0;
+
+	register_console(&ram_console);
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_ENABLE_VERBOSE
+	console_verbose();
+#endif
+	return 0;
+}
+
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_EARLY_INIT
+static int __init ram_console_early_init(void)
+{
+	return ram_console_init((struct ram_console_buffer *)
+		CONFIG_ANDROID_RAM_CONSOLE_EARLY_ADDR,
+		CONFIG_ANDROID_RAM_CONSOLE_EARLY_SIZE,
+		NULL,
+		ram_console_old_log_init_buffer);
+}
+#else
+static int ram_console_driver_probe(struct platform_device *pdev)
+{
+	struct resource *res = pdev->resource;
+	size_t start;
+	size_t buffer_size;
+	void *buffer;
+	const char *bootinfo = NULL;
+	struct ram_console_platform_data *pdata = pdev->dev.platform_data;
+
+	if (res == NULL || pdev->num_resources != 1 ||
+	    !(res->flags & IORESOURCE_MEM)) {
+		printk(KERN_ERR "ram_console: invalid resource, %p %d flags "
+		       "%lx\n", res, pdev->num_resources, res ? res->flags : 0);
+		return -ENXIO;
+	}
+	buffer_size = res->end - res->start + 1;
+	start = res->start;
+	printk(KERN_INFO "ram_console: got buffer at %zx, size %zx\n",
+	       start, buffer_size);
+	buffer = ioremap(res->start, buffer_size);
+	if (buffer == NULL) {
+		printk(KERN_ERR "ram_console: failed to map memory\n");
+		return -ENOMEM;
+	}
+
+	if (pdata)
+		bootinfo = pdata->bootinfo;
+
+	return ram_console_init(buffer, buffer_size, bootinfo, NULL/* allocate */);
+}
+
+static struct platform_driver ram_console_driver = {
+	.probe = ram_console_driver_probe,
+	.driver		= {
+		.name	= "ram_console",
+	},
+};
+
+static int __init ram_console_module_init(void)
+{
+	int err;
+	err = platform_driver_register(&ram_console_driver);
+	return err;
+}
+#endif
+
+static ssize_t ram_console_read_old(struct file *file, char __user *buf,
+				    size_t len, loff_t *offset)
+{
+	loff_t pos = *offset;
+	ssize_t count;
+
+	if (pos >= ram_console_old_log_size)
+		return 0;
+
+	count = min(len, (size_t)(ram_console_old_log_size - pos));
+	if (copy_to_user(buf, ram_console_old_log + pos, count))
+		return -EFAULT;
+
+	*offset += count;
+	return count;
+}
+
+static const struct file_operations ram_console_file_ops = {
+	.owner = THIS_MODULE,
+	.read = ram_console_read_old,
+};
+
+static int __init ram_console_late_init(void)
+{
+	struct proc_dir_entry *entry;
+
+	if (ram_console_old_log == NULL)
+		return 0;
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_EARLY_INIT
+	ram_console_old_log = kmalloc(ram_console_old_log_size, GFP_KERNEL);
+	if (ram_console_old_log == NULL) {
+		printk(KERN_ERR
+		       "ram_console: failed to allocate buffer for old log\n");
+		ram_console_old_log_size = 0;
+		return 0;
+	}
+	memcpy(ram_console_old_log,
+	       ram_console_old_log_init_buffer, ram_console_old_log_size);
+#endif
+	entry = create_proc_entry("last_kmsg", S_IFREG | S_IRUGO, NULL);
+	if (!entry) {
+		printk(KERN_ERR "ram_console: failed to create proc entry\n");
+		kfree(ram_console_old_log);
+		ram_console_old_log = NULL;
+		return 0;
+	}
+
+	entry->proc_fops = &ram_console_file_ops;
+	entry->size = ram_console_old_log_size;
+	return 0;
+}
+
+#ifdef CONFIG_ANDROID_RAM_CONSOLE_EARLY_INIT
+console_initcall(ram_console_early_init);
+#else
+postcore_initcall(ram_console_module_init);
+#endif
+late_initcall(ram_console_late_init);
+
+#else
 static struct persistent_ram_zone *ram_console_zone;
 static const char *bootinfo;
 static size_t bootinfo_size;
@@ -178,3 +598,4 @@
 
 late_initcall(ram_console_late_init);
 postcore_initcall(ram_console_module_init);
+#endif
diff -urN caf/drivers/usb/gadget/android.c for-diff/drivers/usb/gadget/android.c
--- caf/drivers/usb/gadget/android.c	2015-09-08 23:43:58.427167235 +0900
+++ for-diff/drivers/usb/gadget/android.c	2015-09-13 14:03:14.929922000 +0900
@@ -75,6 +75,10 @@
 #include "u_uac1.c"
 #include "f_uac1.c"
 
+#ifdef CONFIG_MACH_KTTECH
+#include <mach/board.h>
+#endif
+
 MODULE_AUTHOR("Mike Lockwood");
 MODULE_DESCRIPTION("Android Composite USB Driver");
 MODULE_LICENSE("GPL");
@@ -83,8 +87,13 @@
 static const char longname[] = "Gadget Android";
 
 /* Default vendor and product IDs, overridden by userspace */
+#ifdef CONFIG_MACH_KTTECH
+#define VENDOR_ID		0x2116
+#define PRODUCT_ID             0x3403
+#else
 #define VENDOR_ID		0x18D1
 #define PRODUCT_ID		0x0001
+#endif
 
 struct android_usb_function {
 	char *name;
@@ -1080,18 +1089,54 @@
 static int mass_storage_function_init(struct android_usb_function *f,
 					struct usb_composite_dev *cdev)
 {
-	struct android_dev *dev = _android_dev;
 	struct mass_storage_function_config *config;
 	struct fsg_common *common;
 	int err;
+#if 0// kttech usb
 	int i;
 	const char *name[2];
+	struct android_dev *dev = _android_dev;
+#endif
 
 	config = kzalloc(sizeof(struct mass_storage_function_config),
 								GFP_KERNEL);
 	if (!config)
 		return -ENOMEM;
 
+// kttech usb
+#ifdef CONFIG_MACH_KTTECH
+	config->fsg.nluns = 2;
+	config->fsg.luns[0].removable = 1;
+	config->fsg.luns[1].removable = 1;
+
+	common = fsg_common_init(NULL, cdev, &config->fsg);
+	if (IS_ERR(common)) {
+		kfree(config);
+		return PTR_ERR(common);
+	}
+
+	err = sysfs_create_link(&f->dev->kobj,
+				&common->luns[0].dev.kobj,
+				"lun0");
+	if (err) {
+		fsg_common_release(&common->ref);
+		kfree(config);
+		return err;
+	}
+	
+	err = sysfs_create_link(&f->dev->kobj,
+				&common->luns[1].dev.kobj,
+				"lun1");
+	if (err) {
+		fsg_common_release(&common->ref);
+		kfree(config);
+		return err;
+	}
+
+    config->common = common;
+	f->config = config;
+	return 0;
+#else
 	config->fsg.nluns = 1;
 	name[0] = "lun";
 	if (dev->pdata->cdrom) {
@@ -1121,6 +1166,7 @@
 	config->common = common;
 	f->config = config;
 	return 0;
+
 error:
 	for (; i > 0 ; i--)
 		sysfs_remove_link(&f->dev->kobj, name[i-1]);
@@ -1128,6 +1174,7 @@
 	fsg_common_release(&common->ref);
 	kfree(config);
 	return err;
+#endif
 }
 
 static void mass_storage_function_cleanup(struct android_usb_function *f)
diff -urN caf/drivers/usb/otg/msm_otg.c for-diff/drivers/usb/otg/msm_otg.c
--- caf/drivers/usb/otg/msm_otg.c	2015-09-08 23:43:58.487167236 +0900
+++ for-diff/drivers/usb/otg/msm_otg.c	2015-09-13 14:03:14.989922000 +0900
@@ -1072,6 +1072,11 @@
 			mA > IDEV_ACA_CHG_LIMIT)
 		mA = IDEV_ACA_CHG_LIMIT;
 
+#ifdef CONFIG_MACH_KTTECH	// Wall charger current limit to 1A
+	if(mA > 900)
+		mA = 900;
+#endif
+
 	if (msm_otg_notify_chg_type(motg))
 		dev_err(motg->phy.dev,
 			"Failed notifying %d charger type to PMIC\n",
diff -urN caf/drivers/video/msm/Kconfig for-diff/drivers/video/msm/Kconfig
--- caf/drivers/video/msm/Kconfig	2015-09-08 23:43:58.531167237 +0900
+++ for-diff/drivers/video/msm/Kconfig	2015-09-13 14:03:15.029922000 +0900
@@ -126,10 +126,10 @@
 	bool "MDP4 overlay support"
 	default n
 
-config FB_MSM_DTV
-	depends on FB_MSM_OVERLAY
-	bool
-	default n
+# KTTech config FB_MSM_DTV
+# KTTech 	depends on FB_MSM_OVERLAY
+# KTTech 	bool
+# KTTech 	default n
 
 config FB_MSM_EXTMDDI
 	bool
@@ -221,6 +221,17 @@
 	  and up to WUXGA 1920x1200 18-bit
 	  using a dual LVDS link.
 
+# KTTech ADD
+config FB_MSM_MIPI_DSI_SHARP
+	bool
+	select FB_MSM_MIPI_DSI
+	default n
+
+config FB_KTTECH_MIPI_DSI_LG_L4500T
+	bool
+	select FB_MSM_MIPI_DSI
+	default y
+
 config FB_MSM_LCDC_ST15_WXGA
     bool
     select FB_MSM_LCDC_PANEL
@@ -405,6 +416,18 @@
 	select FB_MSM_MIPI_DSI_SIMULATOR
 	default n
 
+# KTTech ADD
+config FB_MSM_MIPI_SHARP_VIDEO_WXGA_PT
+	bool
+	select FB_MSM_MIPI_DSI_SHARP
+	default n
+
+config FB_KTTECH_MIPI_LG_L4500T_VIDEO_HD_PT
+	bool
+	select FB_KTTECH_MIPI_DSI_LG_L4500T
+	default y
+
+
 config FB_MSM_NO_MDP_PIPE_CTRL
 	depends on FB_MSM_OVERLAY
 	bool "Do not use mdp_pipe_ctrl"
@@ -557,6 +580,8 @@
 	select FB_MSM_MIPI_SIMULATOR_VIDEO
 	select FB_MSM_MIPI_CHIMEI_WXGA
 	select FB_MSM_MIPI_CHIMEI_WUXGA
+	select FB_MSM_MIPI_SHARP_VIDEO_WXGA_PT
+	select FB_KTTECH_MIPI_LG_L4500T_VIDEO_HD_PT
 	---help---
 	  Support for MIPI panel auto detect
 
@@ -694,6 +719,14 @@
 	bool "MIPI Chimei WUXGA Panel"
 	select FB_MSM_MIPI_CHIMEI_WUXGA
 
+config FB_MSM_MIPI_SHARP_VIDEO_WXGA_PT_PANEL
+	bool "MIPI SHARP VIDEO WXGA PT Panel"
+	select FB_MSM_MIPI_SHARP_VIDEO_WXGA_PT
+
+config FB_KTTECH_MIPI_LG_L4500T_VIDEO_WXGA_PT_PANEL
+	bool "KTTECH MIPI LG L4500T VIDEO WXGA PT Panel"
+	select FB_KTTECH_MIPI_LG_L4500T_VIDEO_HD_PT
+
 config FB_MSM_MIPI_TRULY_VIDEO_WVGA_PT_PANEL
 	bool "MIPI Truly Video WVGA PT Panel"
 	select FB_MSM_MIPI_TRULY_VIDEO_WVGA_PT
@@ -802,16 +835,16 @@
           Choose to enable HDCP
 
 
-config FB_MSM_HDMI_MSM_PANEL
-	depends on FB_MSM_MDP40
-	bool "MSM HDMI 1080p Panel"
-	select FB_MSM_DTV
-        select FB_MSM_EXT_INTERFACE_COMMON
-	select FB_MSM_HDMI_COMMON
-	select FB_MSM_HDMI_3D
-	default n
-	---help---
-	  Support for 480p/720p/1080i/1080p output through MSM HDMI
+# KTTech config FB_MSM_HDMI_MSM_PANEL
+# KTTech 	depends on FB_MSM_MDP40
+# KTTech 	bool "MSM HDMI 1080p Panel"
+# KTTech 	select FB_MSM_DTV
+# KTTech         select FB_MSM_EXT_INTERFACE_COMMON
+# KTTech 	select FB_MSM_HDMI_COMMON
+# KTTech 	select FB_MSM_HDMI_3D
+# KTTech 	default n
+# KTTech 	---help---
+# KTTech 	  Support for 480p/720p/1080i/1080p output through MSM HDMI
 
 config FB_MSM_HDMI_MSM_PANEL_DVI_SUPPORT
 	depends on FB_MSM_HDMI_MSM_PANEL
diff -urN caf/drivers/video/msm/Makefile for-diff/drivers/video/msm/Makefile
--- caf/drivers/video/msm/Makefile	2015-09-08 23:43:58.531167237 +0900
+++ for-diff/drivers/video/msm/Makefile	2015-09-13 14:03:15.029922000 +0900
@@ -7,6 +7,12 @@
 obj-$(CONFIG_FB_BACKLIGHT) += msm_fb_bl.o
 
 ifeq ($(CONFIG_FB_MSM_MDP_HW),y)
+
+# KTTech ADD
+obj-$(CONFIG_KTTECH_TPS61161_BL) += tps61161_bl.o
+obj-$(CONFIG_KTTECH_TPS61161_BL) += tps61161_easyscale_bl.o
+obj-$(CONFIG_KTTECH_TPS61161_PWM_BL) += tps61161_pwm_bl.o
+
 # MDP
 obj-y += mdp.o
 
@@ -76,6 +82,7 @@
 obj-$(CONFIG_FB_MSM_MIPI_DSI) += msm_mipi.o
 
 # MIPI manufacture
+obj-$(CONFIG_FB_KTTECH_MIPI_DSI_LG_L4500T) += mipi_lg_l4500t.o
 obj-$(CONFIG_FB_MSM_MIPI_DSI_TOSHIBA) += mipi_toshiba.o
 obj-$(CONFIG_FB_MSM_MIPI_DSI_NOVATEK) += mipi_novatek.o
 obj-$(CONFIG_FB_MSM_MIPI_DSI_ORISE) += mipi_orise.o
@@ -84,6 +91,7 @@
 obj-$(CONFIG_FB_MSM_MIPI_DSI_NT35510) += mipi_NT35510.o
 obj-$(CONFIG_FB_MSM_MIPI_DSI_NT35516) += mipi_truly_tft540960_1_e.o
 obj-$(CONFIG_FB_MSM_MIPI_DSI_SIMULATOR) += mipi_simulator.o
+obj-y += mipi_dummy.o
 
 # MIPI Bridge
 obj-$(CONFIG_FB_MSM_MIPI_DSI_TC358764_DSI2LVDS) += mipi_tc358764_dsi2lvds.o
@@ -129,6 +137,8 @@
 obj-y += mipi_chimei_wxga_pt.o
 obj-y += mipi_chimei_wuxga.o
 obj-y += mipi_truly_video_wvga_pt.o
+obj-y += mipi_lg_l4500t_video_hd_pt.o
+obj-y += mipi_dummy_video_hd_pt.o
 else
 obj-$(CONFIG_FB_MSM_MIPI_TOSHIBA_VIDEO_WVGA_PT) += mipi_toshiba_video_wvga_pt.o
 obj-$(CONFIG_FB_MSM_MIPI_TOSHIBA_VIDEO_WSVGA_PT) += mipi_toshiba_video_wsvga_pt.o
@@ -148,6 +158,7 @@
 obj-$(CONFIG_FB_MSM_MIPI_SIMULATOR_VIDEO) += mipi_simulator_video.o
 obj-$(CONFIG_FB_MSM_MIPI_CHIMEI_WXGA) += mipi_chimei_wxga_pt.o
 obj-$(CONFIG_FB_MSM_MIPI_CHIMEI_WUXGA) += mipi_chimei_wuxga.o
+obj-$(CONFIG_FB_KTTECH_MIPI_LG_L4500T_VIDEO_HD_PT) += mipi_lg_l4500t_video_hd_pt.o
 endif
 
 obj-$(CONFIG_FB_MSM_LCDC_PANEL) += lcdc_panel.o
diff -urN caf/drivers/video/msm/mdp4.h for-diff/drivers/video/msm/mdp4.h
--- caf/drivers/video/msm/mdp4.h	2015-09-08 23:43:58.799167242 +0900
+++ for-diff/drivers/video/msm/mdp4.h	2015-10-08 21:30:48.032850000 +0900
@@ -523,7 +523,7 @@
 {
 	return;
 }
-static inline void mdp4_dtv_base_swap(struct mdp4_overlay_pipe *pipe)
+static inline void mdp4_dtv_base_swap(int cndx, struct mdp4_overlay_pipe *pipe)
 {
 	/* empty */
 }
@@ -549,7 +549,14 @@
 void mdp4_primary_rdptr(void);
 void mdp4_dsi_cmd_overlay(struct msm_fb_data_type *mfd);
 int mdp4_lcdc_pipe_commit(int cndx, int wait);
+#ifdef CONFIG_FB_MSM_DTV
 int mdp4_dtv_pipe_commit(int cndx, int wait);
+#else
+static inline int mdp4_dtv_pipe_commit(int cndx, int wait)
+{
+	return 0;
+}
+#endif /* CONFIG_FB_MSM_DTV */
 int mdp4_dsi_cmd_update_cnt(int cndx);
 void mdp4_dsi_rdptr_init(int cndx);
 void mdp4_dsi_vsync_init(int cndx);
@@ -594,7 +601,14 @@
 void mdp4_mixer_stage_commit(int mixer);
 void mdp4_dsi_cmd_do_update(int cndx, struct mdp4_overlay_pipe *pipe);
 void mdp4_lcdc_pipe_queue(int cndx, struct mdp4_overlay_pipe *pipe);
+#ifdef CONFIG_FB_MSM_DTV
 void mdp4_dtv_pipe_queue(int cndx, struct mdp4_overlay_pipe *pipe);
+#else
+static inline void mdp4_dtv_pipe_queue(int cndx, struct mdp4_overlay_pipe *pipe)
+{
+	/*empty*/
+}
+#endif /* CONFIG_FB_MSM_DTV */
 void mdp4_overlay_pipe_free(struct mdp4_overlay_pipe *pipe);
 void mdp4_overlay_dmap_cfg(struct msm_fb_data_type *mfd, int lcdc);
 void mdp4_overlay_dmap_xy(struct mdp4_overlay_pipe *pipe);
diff -urN caf/drivers/video/msm/mdp4_overlay.c for-diff/drivers/video/msm/mdp4_overlay.c
--- caf/drivers/video/msm/mdp4_overlay.c	2015-09-08 23:43:58.799167242 +0900
+++ for-diff/drivers/video/msm/mdp4_overlay.c	2015-10-08 21:30:58.240850000 +0900
@@ -1962,10 +1962,12 @@
 			continue;
 		}
 		/* alpha channel is lost on VG pipe when using QSEED or M/N */
+		// KT Tech : Add checking y direction for alpha drop.
 		if (s_pipe->pipe_type == OVERLAY_TYPE_VIDEO &&
 			((s_pipe->op_mode & MDP4_OP_SCALEY_EN) ||
 			(s_pipe->op_mode & MDP4_OP_SCALEX_EN)) &&
-			!(s_pipe->op_mode & MDP4_OP_SCALEY_PIXEL_RPT))
+			!(s_pipe->op_mode & (MDP4_OP_SCALEX_PIXEL_RPT |
+							MDP4_OP_SCALEY_PIXEL_RPT)))
 			alpha_drop = 1;
 
 		d_pipe = mdp4_background_layer(mixer, s_pipe);
@@ -2664,9 +2666,10 @@
 
 	res = pipe->src_w * pipe->src_h;
 
-	if (res <= OVERLAY_WSVGA_SIZE)
+	// KT Tech : Fixed Bug.
+	if (res <= OVERLAY_VGA_SIZE)
 		pipe->req_bw = OVERLAY_PERF_LEVEL4;
-	else if (res <= OVERLAY_VGA_SIZE)
+	else if (res <= OVERLAY_WSVGA_SIZE)
 		pipe->req_bw = OVERLAY_PERF_LEVEL3;
 	else if (res <= OVERLAY_720P_TILE_SIZE)
 		pipe->req_bw = OVERLAY_PERF_LEVEL2;
diff -urN caf/drivers/video/msm/mdp4_overlay_dsi_video.c for-diff/drivers/video/msm/mdp4_overlay_dsi_video.c
--- caf/drivers/video/msm/mdp4_overlay_dsi_video.c	2015-09-08 23:43:58.799167242 +0900
+++ for-diff/drivers/video/msm/mdp4_overlay_dsi_video.c	2015-10-08 21:30:58.248850000 +0900
@@ -274,7 +274,11 @@
 	if (vctrl->vsync_irq_enabled == enable)
 		return;
 
+#ifdef CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD
+	pr_debug("%s: vsync enable=%d\n", __func__, enable);
+#else
 	pr_info("%s: vsync enable=%d\n", __func__, enable);
+#endif
 
 	vctrl->vsync_irq_enabled = enable;
 
diff -urN caf/drivers/video/msm/mipi_dsi.c for-diff/drivers/video/msm/mipi_dsi.c
--- caf/drivers/video/msm/mipi_dsi.c	2015-09-08 23:43:59.007167246 +0900
+++ for-diff/drivers/video/msm/mipi_dsi.c	2015-10-08 21:30:58.348850000 +0900
@@ -35,6 +35,15 @@
 #include "mdp.h"
 #include "mdp4.h"
 
+#ifdef CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD
+
+/* Macros assume PMIC GPIOs and MPPs start at 1 */
+#define PM8921_GPIO_BASE		NR_GPIO_IRQS
+#define PM8921_GPIO_PM_TO_SYS(pm_gpio)	(pm_gpio - 1 + PM8921_GPIO_BASE)
+
+#include <linux/board_kttech.h>
+#endif
+
 u32 dsi_irq;
 u32 esc_byte_ratio;
 
@@ -63,6 +72,49 @@
 
 struct device dsi_dev;
 
+#ifdef CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD
+static int dsi_l4500t_on = 0;
+
+static int mipi_lg_l4500t_lcd_reset( int on )
+{
+	int rc = 0;
+	static int gpio_disp_rst;
+
+	if( dsi_l4500t_on == 0 )
+	{
+		gpio_disp_rst = LCD_RESET_GPIO;
+
+		rc = gpio_request(gpio_disp_rst, "disp_rst_n");
+		if (rc) {
+			pr_err("request gpio_disp_rst failed, rc=%d\n", rc);
+			return -ENODEV;
+		}
+	
+		dsi_l4500t_on = true;
+	}
+
+	if ( on  )
+	{
+		/* LCD Reset Sequence */
+		gpio_set_value_cansleep(gpio_disp_rst, 1); 
+		msleep(5);
+		gpio_set_value_cansleep(gpio_disp_rst, 0); 
+		msleep(10);
+		gpio_set_value_cansleep(gpio_disp_rst, 1); 
+		msleep(10);  
+
+		printk(KERN_INFO "%s: ON \n", __func__);
+	}
+	else
+	{
+		gpio_set_value_cansleep(gpio_disp_rst, 0);
+		msleep(120);
+		printk(KERN_INFO "%s: OFF \n", __func__);
+	}
+  
+	return 0;
+}
+#endif
 static int mipi_dsi_off(struct platform_device *pdev)
 {
 	int ret = 0;
@@ -121,6 +173,12 @@
 	mipi_dsi_ahb_ctrl(0);
 	spin_unlock_bh(&dsi_clk_lock);
 
+#ifdef CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD
+	// LCD Reset
+	mipi_lg_l4500t_lcd_reset( 0);
+#endif
+
+
 	mipi_dsi_unprepare_clocks();
 	if (mipi_dsi_pdata && mipi_dsi_pdata->dsi_power_save)
 		mipi_dsi_pdata->dsi_power_save(0);
@@ -247,6 +305,11 @@
 
 	mipi_dsi_host_init(mipi);
 
+#ifdef CONFIG_KTTECH_MIPI_LG_L4500T_VIDEO_HD
+	// LCD Reset
+	mipi_lg_l4500t_lcd_reset( 1 );
+#endif
+
 	if (mipi->force_clk_lane_hs) {
 		u32 tmp;
 
diff -urN caf/drivers/video/msm/mipi_dummy.c for-diff/drivers/video/msm/mipi_dummy.c
--- caf/drivers/video/msm/mipi_dummy.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/mipi_dummy.c	2015-10-08 21:30:58.352850000 +0900
@@ -0,0 +1,119 @@
+/* Copyright (c) 2008-2010, Code Aurora Forum. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ *
+ */
+
+#include "msm_fb.h"
+#include "mipi_dsi.h"
+#include "mipi_dummy.h"
+
+static struct msm_panel_common_pdata *mipi_dummy_pdata;
+
+static struct dsi_buf dummy_tx_buf;
+static struct dsi_buf dummy_rx_buf;
+
+static int mipi_dummy_lcd_on(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static int mipi_dummy_lcd_off(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static int __devinit mipi_dummy_lcd_probe(struct platform_device *pdev)
+{
+	if (pdev->id == 0) {
+		mipi_dummy_pdata = pdev->dev.platform_data;
+		return 0;
+	}
+
+	msm_fb_add_device(pdev);
+
+	return 0;
+}
+
+static struct platform_driver this_driver = {
+	.probe  = mipi_dummy_lcd_probe,
+	.driver = {
+		.name   = "mipi_dummy",
+	},
+};
+
+static struct msm_fb_panel_data dummy_panel_data = {
+	.on		= mipi_dummy_lcd_on,
+	.off		= mipi_dummy_lcd_off,
+};
+
+static int ch_used[3];
+ 
+int mipi_dummy_device_register(struct msm_panel_info *pinfo,
+					u32 channel, u32 panel)
+{
+	struct platform_device *pdev = NULL;
+	int ret;
+
+	if ((channel >= 3) || ch_used[channel])
+		return -ENODEV;
+
+	ch_used[channel] = TRUE;
+
+	pdev = platform_device_alloc("mipi_dummy", (panel << 8)|channel);
+	if (!pdev)
+		return -ENOMEM;
+
+	dummy_panel_data.panel_info = *pinfo;
+
+	ret = platform_device_add_data(pdev, &dummy_panel_data,
+		sizeof(dummy_panel_data));
+	if (ret) {
+		printk(KERN_ERR
+		  "%s: platform_device_add_data failed!\n", __func__);
+		goto err_device_put;
+	}
+
+	ret = platform_device_add(pdev);
+	if (ret) {
+		printk(KERN_ERR
+		  "%s: platform_device_register failed!\n", __func__);
+		goto err_device_put;
+	}
+
+	return 0;
+
+err_device_put:
+	platform_device_put(pdev);
+	return ret;
+}
+
+static int __init mipi_dummy_lcd_init(void)
+{
+	mipi_dsi_buf_alloc(&dummy_tx_buf, DSI_BUF_SIZE);
+	mipi_dsi_buf_alloc(&dummy_rx_buf, DSI_BUF_SIZE);
+
+#if 0 //def CONFIG_FB_MSM_MIPI_PANEL_DETECT
+        if (msm_fb_detect_client("mipi_video_dummy_wvga"))
+                return platform_driver_register(&this_driver);
+        return 0;
+#else
+        return platform_driver_register(&this_driver);
+#endif
+
+}
+
+module_init(mipi_dummy_lcd_init);
+
diff -urN caf/drivers/video/msm/mipi_dummy.h for-diff/drivers/video/msm/mipi_dummy.h
--- caf/drivers/video/msm/mipi_dummy.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/mipi_dummy.h	2015-10-08 21:30:48.064850000 +0900
@@ -0,0 +1,38 @@
+
+/* Copyright (c) 2009-2010, Code Aurora Forum. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ *       copyright notice, this list of conditions and the following
+ *       disclaimer in the documentation and/or other materials provided
+ *       with the distribution.
+ *     * Neither the name of Code Aurora Forum, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived
+ *       from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#ifndef MIPI_DUMMY_H
+#define MIPI_DUMMY_H
+
+int mipi_dummy_device_register(struct msm_panel_info *pinfo,
+					u32 channel, u32 panel);
+
+#endif  /* MIPI_DUMMY_H */
+
diff -urN caf/drivers/video/msm/mipi_dummy_video_hd_pt.c for-diff/drivers/video/msm/mipi_dummy_video_hd_pt.c
--- caf/drivers/video/msm/mipi_dummy_video_hd_pt.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/mipi_dummy_video_hd_pt.c	2015-10-08 21:30:58.356850000 +0900
@@ -0,0 +1,193 @@
+/* Copyright (c) 2009-2010, Code Aurora Forum. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ *
+ */
+
+#include "msm_fb.h"
+#include "mipi_dsi.h"
+#include "mipi_dummy.h"
+
+static struct msm_panel_info pinfo;
+
+#define DSI_BIT_CLK_480MHZ
+//#define DSI_BIT_CLK_500MHZ
+ 
+static struct mipi_dsi_phy_ctrl dsi_video_mode_phy_db = {
+	/* 600*1024, RGB888, 3 Lane 55 fps video mode */
+    /* regulator */
+	{0x03, 0x0a, 0x04, 0x00, 0x20},
+
+	/* timing */
+	{0xac, 0x8b, 0x19, /* panel specific */
+	 0x00, /* DSIPHY_TIMING_CTRL_3 = 0 */
+	 0x1b, 0x91, 0x1c, 0x8d, 0x1b, 0x03, 0x04}, /* panel specific */
+
+    /* phy ctrl */
+	{0x5f, 0x00, 0x00, 0x10},
+    /* strength */
+	{0xff, 0x00, 0x06, 0x00},
+
+	/* pll control */
+	{0x0, /* common 8960 */
+	 /* VCO */
+	 0x77, 0x1, 0x19, /* panel specific */
+	 0x00, 0x50, 0x48, 0x63,
+	 0x31, 0x0F, 0x03,/* 4 lane Auto update by dsi-mipi driver */
+	 0x00, 0x14, 0x03, 0x00, 0x02, /* common 8960 */
+	 0x00, 0x20, 0x00, 0x01 }, /* common 8960 */
+};
+
+static int __init mipi_video_dummy_hd_pt_init(void)
+{
+	int ret;
+
+#if 1//def CONFIG_FB_MSM_MIPI_PANEL_DETECT
+	if (msm_fb_detect_client("mipi_video_dummy_hd"))
+		return 0;
+#endif
+
+	printk("### %s, \n", __func__);
+
+
+	pinfo.mipi.xres_pad = 0;
+	pinfo.mipi.yres_pad = 0;
+	
+	pinfo.xres = 720;
+	pinfo.yres = 1280;
+	pinfo.type = MIPI_VIDEO_PANEL;
+	pinfo.pdest = DISPLAY_1;
+	pinfo.wait_cycle = 0;
+	pinfo.bpp = 24;
+
+/*********************************
+	LG Recommand value
+	1. 
+		h bp 83
+		  fp 12
+		  pw 4
+		v bp 32
+		  fp 8
+		  pw 2
+	2.
+		h bp 82
+		  fp 12
+		  pw 4
+		v bp 32
+		  fp 10
+		  pw 2
+**********************************/
+#if defined(DSI_BIT_CLK_500MHZ)
+	pinfo.lcdc.h_back_porch = 83; // 84
+	pinfo.lcdc.h_front_porch = 12; 
+	pinfo.lcdc.h_pulse_width = 4; 
+	pinfo.lcdc.v_back_porch = 32;// 2
+	pinfo.lcdc.v_front_porch = 8;// 2
+	pinfo.lcdc.v_pulse_width = 2; // 2
+#elif defined(DSI_BIT_CLK_480MHZ)
+	pinfo.lcdc.h_back_porch = 83; // 84
+	pinfo.lcdc.h_front_porch = 12; 
+	pinfo.lcdc.h_pulse_width = 4; 
+	pinfo.lcdc.v_back_porch = 32;
+	pinfo.lcdc.v_front_porch = 8;
+	pinfo.lcdc.v_pulse_width = 2;
+#else
+	pinfo.lcdc.h_back_porch = 83; // 84
+	pinfo.lcdc.h_front_porch = 12; 
+	pinfo.lcdc.h_pulse_width = 4; 
+	pinfo.lcdc.v_back_porch = 32;
+	pinfo.lcdc.v_front_porch = 8;
+	pinfo.lcdc.v_pulse_width = 2;
+#endif
+
+	pinfo.lcdc.border_clr = 0xff0000;	/* blk */
+	/* Begin - jaemoon.hwang@kttech.co.kr */
+	/* Change underflow color from blue to black */
+#if 1
+	pinfo.lcdc.underflow_clr = 0;	/* blk  */
+#else
+	pinfo.lcdc.underflow_clr = 0xff;	/* blue */
+#endif
+	/* End - jaemoon.hwang@kttech.co.kr */
+	pinfo.lcdc.hsync_skew = 0;
+	/* Begin - jaemoon.hwang@kttech.co.kr */
+	/* bl_max is changed from 28 to 29 */
+#if 1
+	pinfo.bl_max = 29;
+#else
+	pinfo.bl_max = 28;
+#endif
+	/* End - jaemoon.hwang@kttech.co.kr */
+	/* Begin - jaemoon.hwang@kttech.co.kr */
+	/* bl_min is changed from 1 to 4 */
+#if 1
+	pinfo.bl_min = 4;
+#else
+	pinfo.bl_min = 1;
+#endif
+	/* End - jaemoon.hwang@kttech.co.kr */
+	pinfo.fb_num = 2;
+
+#if defined(DSI_BIT_CLK_500MHZ)
+	pinfo.clk_rate = 500000000;
+#elif defined(DSI_BIT_CLK_480MHZ)
+	pinfo.clk_rate = 480000000;
+#else		/* 200 mhz */
+	pinfo.clk_rate = 200000000;
+#endif
+	pinfo.mipi.mode = DSI_VIDEO_MODE;
+	pinfo.mipi.pulse_mode_hsa_he = TRUE;
+	pinfo.mipi.hfp_power_stop = TRUE;
+	pinfo.mipi.hbp_power_stop = TRUE;
+	pinfo.mipi.hsa_power_stop = TRUE;
+	pinfo.mipi.eof_bllp_power_stop = 0; //lcd 떨림 현상 제거 
+	pinfo.mipi.bllp_power_stop = 0;  /* Needed or else will have blank line at top of display */
+	pinfo.mipi.traffic_mode = DSI_BURST_MODE;
+	pinfo.mipi.dst_format = DSI_VIDEO_DST_FORMAT_RGB888;
+	pinfo.mipi.vc = 0;
+	pinfo.mipi.rgb_swap = DSI_RGB_SWAP_RGB;
+	pinfo.mipi.data_lane0 = TRUE;
+	pinfo.mipi.data_lane1 = TRUE;
+	pinfo.mipi.data_lane2 = TRUE;
+	pinfo.mipi.data_lane3 = TRUE;
+	pinfo.mipi.tx_eot_append = TRUE;
+
+#if defined(DSI_BIT_CLK_480MHZ)
+	pinfo.mipi.t_clk_post = 34;
+	pinfo.mipi.t_clk_pre = 61;
+#elif defined(DSI_BIT_CLK_500MHZ)
+	pinfo.mipi.t_clk_post = 34;
+	pinfo.mipi.t_clk_pre = 61;
+#else
+	pinfo.mipi.t_clk_post = 34;
+	pinfo.mipi.t_clk_pre = 61;
+#endif
+	
+	pinfo.mipi.stream = 0; /* dma_p */
+	pinfo.mipi.mdp_trigger = DSI_CMD_TRIGGER_SW;
+	pinfo.mipi.dma_trigger = DSI_CMD_TRIGGER_SW;
+	pinfo.mipi.frame_rate = 60;
+	pinfo.mipi.dsi_phy_db = &dsi_video_mode_phy_db;
+
+	ret = mipi_dummy_device_register(&pinfo, MIPI_DSI_PRIM,
+						MIPI_DSI_PANEL_WVGA_PT);
+	if (ret)
+		pr_err("%s: failed to register device!\n", __func__);
+
+	return ret;
+}
+
+module_init(mipi_video_dummy_hd_pt_init);
+
diff -urN caf/drivers/video/msm/mipi_lg_l4500t.c for-diff/drivers/video/msm/mipi_lg_l4500t.c
--- caf/drivers/video/msm/mipi_lg_l4500t.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/mipi_lg_l4500t.c	2015-10-08 21:30:58.360850000 +0900
@@ -0,0 +1,600 @@
+/* Copyright (c) 2010-2011, Code Aurora Forum. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ *
+ */
+
+#include "msm_fb.h"
+#include "mipi_dsi.h"
+#include "mipi_lg_l4500t.h"
+// KT TECH : Set Backlight
+#include "tps61161_bl.h"
+
+static struct msm_panel_common_pdata *mipi_lg_l4500t_pdata;
+
+static struct dsi_buf lg_l4500t_tx_buf;
+static struct dsi_buf lg_l4500t_rx_buf;
+
+//#define KTTECH_MIPI_CMDLIST_PUT
+
+// RESET : ( DTYPE_DCS_WRITE )
+//static char Reset[2] = {0x01, 0x00}; 
+
+// SLEEP OUT : ( DTYPE_DCS_WRITE )
+static char SleepOut[2] = {0x11, 0x00};
+
+// SLEEP IN  : ( DTYPE_DCS_WRITE )
+static char SleepIn[2] = {0x10, 0x00};
+
+// Display On : ( DTYPE_DCS_WRITE )
+static char DisplayOn[2] = {0x29, 0x00};
+
+// Display Off : ( DTYPE_DCS_WRITE )
+static char DisplayOff[2] = {0x28, 0x00};
+
+// Stand by On : ( DTYPE_DCS_WRITE )
+//static char StandByOn[2] = {0x10, 0x00};
+
+
+
+// IDs : ( DTYPE_DCS_READ )
+//static char manufacture_id[2] = {0x04, 0x00}; 
+
+// MIPI DSI Configuration : ( DTYPE_DCS_LWRITE )
+static char MIPI_DSI_Configuration[6] = { 
+0xE0 ,
+0x43 ,0x40 ,0x80 ,0xFF ,0xFF ,
+}; 
+
+// Display Control 1 : ( DTYPE_DCS_LWRITE )
+static char Display_Control_1[6] = {
+0xB5 ,
+0x17 ,0x40 ,0x40 ,0x00 ,0x20 ,
+}; 
+
+// Display Control 2 : ( DTYPE_DCS_LWRITE )
+static char Display_Control_2[6] = {
+0xB6 ,
+0x01 ,0x14 ,0x0F ,0x16 ,0x13 ,
+}; 
+
+// OTP 2 : ( DTYPE_DCS_WRITE1 )
+static char OTP_2[2] = {
+0xF9 , 
+0x80 ,
+}; 
+
+// Internal Oscillator Setting : ( DTYPE_DCS_LWRITE )
+static char Internal_Oscillator_Setting[3] = {
+0xC0 ,
+0x01 ,0x0A ,
+}; 
+
+// Power Control 3 : ( DTYPE_DCS_LWRITE )
+static char Power_Control_3[10] = {
+0xC3 ,
+0x00 ,0x09 ,0x10 ,0x12 ,0x00 ,0x66 ,0x00 ,0x32 ,0x00 ,
+}; 
+
+// Power Control 4 : ( DTYPE_DCS_LWRITE )
+static char Power_Control_4[6] = {
+0xC4 ,
+0x22 ,0x24 ,0x18 ,0x18 ,0x47 ,
+}; 
+
+
+//#define IMAGE_ENHANCEMENT
+//#define IMAGE_ENHANCEMENT_OPTIMUS
+//#define IMAGE_ENHANCEMENT_2_2
+//#define IMAGE_ENHANCEMENT_2_4
+//#define IMAGE_ENHANCEMENT_2_6
+//#define IMAGE_ENHANCEMENT_2_8
+
+
+// Positive Gamma Curve for Red : ( DTYPE_DCS_LWRITE )
+#ifdef IMAGE_ENHANCEMENT_2_2
+static char Positive_Gamma_Curve_for_Red[10] = {
+0xD0 ,
+0x00 ,0x10 ,0x66 ,0x20 ,0x14 ,0x06 ,0x31 ,0x31 ,0x01 ,
+}; 
+#elif defined( IMAGE_ENHANCEMENT_2_4 )
+static char Positive_Gamma_Curve_for_Red[10] = {
+0xD0 ,
+0x00 ,0x10 ,0x66 ,0x23 ,0x14 ,0x06 ,0x51 ,0x31 ,0x02 ,
+}; 
+#elif defined( IMAGE_ENHANCEMENT_2_6 )
+static char Positive_Gamma_Curve_for_Red[10] = {
+0xD0 ,
+0x00 ,0x10 ,0x66 ,0x24 ,0x14 ,0x06 ,0x71 ,0x31 ,0x03 ,
+}; 
+#elif defined( IMAGE_ENHANCEMENT_2_8 )
+static char Positive_Gamma_Curve_for_Red[10] = {
+0xD0 ,
+0x00 ,0x10 ,0x66 ,0x27 ,0x14 ,0x06 ,0x71 ,0x31 ,0x04,
+}; 
+#else
+static char Positive_Gamma_Curve_for_Red[10] = {
+0xD0 ,
+0x00 ,0x10 ,0x66 ,0x23 ,0x14 ,0x06 ,0x51 ,0x31 ,0x02 ,
+}; 
+#endif
+
+// Negative Gamma Curve for Red : ( DTYPE_DCS_LWRITE )
+static char Negative_Gamma_Curve_for_Red[10] = {
+0xD1 ,
+0x00 ,0x13 ,0x63 ,0x35 ,0x01 ,0x06 ,0x71 ,0x33 ,0x04 ,
+}; 
+
+// Positive Gamma Curve for Green : ( DTYPE_DCS_LWRITE )
+#ifdef IMAGE_ENHANCEMENT_2_2
+static char Positive_Gamma_Curve_for_Green[10] = {
+0xD2 ,
+0x00 ,0x10 ,0x66 ,0x20 ,0x14 ,0x06 ,0x31 ,0x31 ,0x01 ,
+}; 
+#elif defined( IMAGE_ENHANCEMENT_2_4 )
+static char Positive_Gamma_Curve_for_Green[10] = {
+0xD2 ,
+0x00 ,0x10 ,0x66 ,0x23 ,0x14 ,0x06 ,0x51 ,0x31 ,0x02 ,
+}; 
+#elif defined( IMAGE_ENHANCEMENT_2_6 )
+static char Positive_Gamma_Curve_for_Green[10] = {
+0xD2 ,
+0x00 ,0x10 ,0x66 ,0x24 ,0x14 ,0x06 ,0x71 ,0x31 ,0x03 ,
+}; 
+#elif defined( IMAGE_ENHANCEMENT_2_8 )
+static char Positive_Gamma_Curve_for_Green[10] = {
+0xD2 ,
+0x00 ,0x10 ,0x66 ,0x27 ,0x14 ,0x06 ,0x71 ,0x31 ,0x04,
+}; 
+#else
+static char Positive_Gamma_Curve_for_Green[10] = {
+0xD2 ,
+0x00 ,0x10 ,0x66 ,0x23 ,0x14 ,0x06 ,0x51 ,0x31 ,0x02 ,
+}; 
+#endif
+
+// Negative Gamma Curve for Green : ( DTYPE_DCS_LWRITE )
+static char Negative_Gamma_Curve_for_Green[10] = {
+0xD3 ,
+0x00 ,0x13 ,0x63 ,0x35 ,0x01 ,0x06 ,0x71 ,0x33 ,0x04 ,
+}; 
+
+// Positive Gamma Curve for Blue : ( DTYPE_DCS_LWRITE )
+#ifdef IMAGE_ENHANCEMENT_2_2
+static char Positive_Gamma_Curve_for_Blue[10] = {
+0xD4 ,
+0x00 ,0x10 ,0x66 ,0x20 ,0x14 ,0x06 ,0x31 ,0x31 ,0x01 ,
+}; 
+#elif defined( IMAGE_ENHANCEMENT_2_4 )
+static char Positive_Gamma_Curve_for_Blue[10] = {
+0xD4 ,
+0x00 ,0x10 ,0x66 ,0x23 ,0x14 ,0x06 ,0x51 ,0x31 ,0x02 ,
+}; 
+#elif defined( IMAGE_ENHANCEMENT_2_6 )
+static char Positive_Gamma_Curve_for_Blue[10] = {
+0xD4 ,
+0x00 ,0x10 ,0x66 ,0x24 ,0x14 ,0x06 ,0x71 ,0x31 ,0x03 ,
+}; 
+#elif defined( IMAGE_ENHANCEMENT_2_8 )
+static char Positive_Gamma_Curve_for_Blue[10] = {
+0xD4 ,
+0x00 ,0x10 ,0x66 ,0x27 ,0x14 ,0x06 ,0x71 ,0x31 ,0x04,
+}; 
+#else
+static char Positive_Gamma_Curve_for_Blue[10] = {
+0xD4 ,
+0x00 ,0x10 ,0x66 ,0x23 ,0x14 ,0x06 ,0x51 ,0x31 ,0x02 ,
+}; 
+#endif
+
+// Negative Gamma Curve for Blue : ( DTYPE_DCS_LWRITE )
+static char Negative_Gamma_Curve_for_Blue[10] = {
+0xD5 ,
+0x00 ,0x13 ,0x63 ,0x35 ,0x01 ,0x06 ,0x71 ,0x33 ,0x04 ,
+}; 
+
+
+
+#ifdef IMAGE_ENHANCEMENT
+
+static char Image_Enhancement_70[2] = {
+0x70 ,
+0x0F ,
+};
+
+static char Image_Enhancement_71[5] = {
+0x71 ,
+0x00 , 0x00 , 0x01 , 0x01, 
+};
+
+static char Image_Enhancement_72[3] = {
+0x72 ,
+0x01 , 0x0A, 
+};
+
+static char Image_Enhancement_73[4] = {
+0x73 ,
+0x23, 0x42, 0x00, 
+};
+
+static char Image_Enhancement_74[4] = {
+0x74 ,
+0x04, 0x01, 0x07, 
+};
+
+static char Image_Enhancement_75[4] = {
+0x75 ,
+0x07, 0x00, 0x05, 
+};
+
+static char Image_Enhancement_77[9] = {
+0x77 ,
+0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
+};
+
+static char Image_Enhancement_78[9] = {
+0x78 ,
+0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
+};
+
+#ifdef IMAGE_ENHANCEMENT_OPTIMUS
+static char Image_Enhancement_79[9] = {
+0x79 ,
+0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 
+};
+#else
+static char Image_Enhancement_79[9] = {
+0x79 ,
+0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
+};
+#endif
+
+static char Image_Enhancement_7A[9] = {
+0x7A ,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+static char Image_Enhancement_7B[9] = {
+0x7B ,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+static char Image_Enhancement_7C[9] = {
+0x7C ,
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+#endif
+
+// Power Control 1 : ( DTYPE_DCS_WRITE1 )
+static char Power_Control_1[2] = {
+0xC1 , 
+0x00 ,
+}; 
+
+// Power Control 1 0x01: ( DTYPE_DCS_WRITE1 )
+static char Power_Control_1_0x01[2] = {
+0xC1 , 
+0x01 ,
+};
+// Power Control 1 0x02: ( DTYPE_DCS_WRITE1 )
+static char Power_Control_1_0x02[2] = {
+0xC1 , 
+0x02 ,
+};
+
+
+// Power Control 2 0x00 : ( DTYPE_DCS_WRITE1 )
+static char Power_Control_2[2] = {
+0xC2 , 
+0x00 ,
+}; 
+
+// Power Control 2 0x02: ( DTYPE_DCS_WRITE1 )
+static char Power_Control_2_0x02[2] = {
+0xC2 , 
+0x02 ,
+}; 
+
+// Power Control 2 0x06 : ( DTYPE_DCS_WRITE1 )
+static char Power_Control_2_0x06[2] = {
+0xC2 , 
+0x06 ,
+}; 
+
+// Power Control 2 0x4E : ( DTYPE_DCS_WRITE1 )
+static char Power_Control_2_0x4E[2] = {
+0xC2 , 
+0x4E ,
+}; 
+
+
+static struct dsi_cmd_desc lg_l4500t_video_on_cmds[] = {
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(MIPI_DSI_Configuration), MIPI_DSI_Configuration},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Display_Control_1), Display_Control_1},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Display_Control_2), Display_Control_2},		
+
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 0,
+		sizeof(OTP_2), OTP_2},
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Internal_Oscillator_Setting), Internal_Oscillator_Setting},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Power_Control_3), Power_Control_3},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Power_Control_4), Power_Control_4},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Positive_Gamma_Curve_for_Red), Positive_Gamma_Curve_for_Red},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Negative_Gamma_Curve_for_Red), Negative_Gamma_Curve_for_Red},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Positive_Gamma_Curve_for_Green), Positive_Gamma_Curve_for_Green},		
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Negative_Gamma_Curve_for_Green), Negative_Gamma_Curve_for_Green},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Positive_Gamma_Curve_for_Blue), Positive_Gamma_Curve_for_Blue},		
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Negative_Gamma_Curve_for_Blue), Negative_Gamma_Curve_for_Blue},		
+		
+#ifdef IMAGE_ENHANCEMENT
+
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 0,
+		sizeof(Image_Enhancement_70), Image_Enhancement_70},
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Image_Enhancement_71), Image_Enhancement_71},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Image_Enhancement_72), Image_Enhancement_72},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Image_Enhancement_73), Image_Enhancement_73},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Image_Enhancement_74), Image_Enhancement_74},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Image_Enhancement_75), Image_Enhancement_75},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Image_Enhancement_77), Image_Enhancement_77},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Image_Enhancement_78), Image_Enhancement_78},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Image_Enhancement_79), Image_Enhancement_79},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Image_Enhancement_7A), Image_Enhancement_7A},		
+		
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Image_Enhancement_7B), Image_Enhancement_7B},		
+
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(Image_Enhancement_7C), Image_Enhancement_7C},		
+#endif
+
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 100,
+		sizeof(Power_Control_1), Power_Control_1},
+
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 40,
+		sizeof(Power_Control_2_0x02), Power_Control_2_0x02},
+
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 40,
+		sizeof(Power_Control_2_0x06), Power_Control_2_0x06},
+
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 40,
+		sizeof(Power_Control_2_0x4E), Power_Control_2_0x4E},
+
+	{DTYPE_DCS_WRITE, 1, 0, 0, 10,
+		sizeof(SleepOut), SleepOut},
+
+	{DTYPE_DCS_WRITE, 1, 0, 0, 0,
+		sizeof(DisplayOn), DisplayOn},
+
+};
+
+
+static struct dsi_cmd_desc lg_l4500t_display_off_cmds[] = {
+	{DTYPE_DCS_WRITE, 1, 0, 0, 20,
+		sizeof(DisplayOff), DisplayOff},
+
+	{DTYPE_DCS_WRITE, 1, 0, 0, 0,
+		sizeof(SleepIn), SleepIn},
+
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 20,
+		sizeof(Power_Control_2), Power_Control_2},
+
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 0,
+		sizeof(Power_Control_1_0x02), Power_Control_1_0x02},
+
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 0,
+		sizeof(Power_Control_1_0x01), Power_Control_1_0x01},		
+};
+
+static int mipi_lg_l4500t_lcd_on(struct platform_device *pdev)
+{
+	struct msm_fb_data_type *mfd;
+	struct mipi_panel_info *mipi;
+#ifdef KTTECH_MIPI_CMDLIST_PUT
+	struct dcs_cmd_req cmdreq;
+#endif
+
+	printk("### %s\n", __func__);
+
+	mfd = platform_get_drvdata(pdev);
+	if (!mfd)
+		return -ENODEV;
+	if (mfd->key != MFD_KEY)
+		return -EINVAL;
+
+	mipi  = &mfd->panel_info.mipi;
+
+	if (mipi->mode == DSI_VIDEO_MODE) 
+	{
+		// KTTech modify : mipi_dsi_cmds_tx -> mipi_dsi_cmdlist_put
+#ifdef KTTECH_MIPI_CMDLIST_PUT
+		cmdreq.cmds = lg_l4500t_video_on_cmds;
+		cmdreq.cmds_cnt = ARRAY_SIZE(lg_l4500t_video_on_cmds);
+		cmdreq.flags = CMD_REQ_COMMIT;
+		cmdreq.rlen = 0;
+		cmdreq.cb = NULL;
+		mipi_dsi_cmdlist_put(&cmdreq);
+#else
+		mipi_dsi_cmds_tx(&lg_l4500t_tx_buf, lg_l4500t_video_on_cmds, ARRAY_SIZE(lg_l4500t_video_on_cmds));	
+#endif
+		printk("%s, MIPI MOD = DSI_VIDEO_MODE \n", __func__);
+	} else {	/* not yet implemented */
+		printk("%s, MIPI MOD = DSI_CMD_MODE Error!!! \n", __func__);
+	}
+
+	return 0;
+}
+
+static int mipi_lg_l4500t_lcd_off(struct platform_device *pdev)
+{
+	struct msm_fb_data_type *mfd;
+#ifdef KTTECH_MIPI_CMDLIST_PUT
+	struct dcs_cmd_req cmdreq;
+#endif
+
+	mfd = platform_get_drvdata(pdev);
+	printk("### %s, mfd=%0x \n", __func__, (unsigned int)mfd);
+
+	if (!mfd)
+		return -ENODEV;
+	if (mfd->key != MFD_KEY)
+		return -EINVAL;
+
+	// KTTech modify : mipi_dsi_cmds_tx -> mipi_dsi_cmdlist_put
+#ifdef KTTECH_MIPI_CMDLIST_PUT
+	cmdreq.cmds = lg_l4500t_display_off_cmds;
+	cmdreq.cmds_cnt = ARRAY_SIZE(lg_l4500t_display_off_cmds);
+	cmdreq.flags = CMD_REQ_COMMIT;
+	cmdreq.rlen = 0;
+	cmdreq.cb = NULL;
+	mipi_dsi_cmdlist_put(&cmdreq);
+#else
+	mipi_dsi_cmds_tx(&lg_l4500t_tx_buf, lg_l4500t_display_off_cmds,
+			ARRAY_SIZE(lg_l4500t_display_off_cmds));
+#endif
+
+	return 0;
+}
+
+static int __devinit mipi_lg_l4500t_lcd_probe(struct platform_device *pdev)
+{
+
+	printk("### %s, pdev-id=%d\n", __func__, pdev->id);
+
+	if (pdev->id == 0) {
+		mipi_lg_l4500t_pdata = pdev->dev.platform_data;
+		return 0;
+	}
+
+	msm_fb_add_device(pdev);
+
+#ifdef CONFIG_KTTECH_TPS61161_BL
+	/* KT Tech 2012.12.07
+	** 1. Continuous splash screen Enabled
+	** 2. TAKE Logo Disabled
+	*/
+	//tps61161_set_bl_native(0);
+#endif
+
+	return 0;
+}
+
+static struct platform_driver this_driver = {
+	.probe  = mipi_lg_l4500t_lcd_probe,
+	.driver = {
+		.name   = "mipi_lg_l4500t"
+	},
+};
+
+// KT TECH : Set Backlight
+static struct msm_fb_panel_data lg_l4500t_panel_data = {
+	.on		= mipi_lg_l4500t_lcd_on,
+	.off		= mipi_lg_l4500t_lcd_off,
+#ifdef CONFIG_KTTECH_TPS61161_BL	
+	.set_backlight	= tps61161_set_bl,
+#endif
+};
+
+static int ch_used[3];
+
+int mipi_lg_l4500t_device_register(struct msm_panel_info *pinfo,
+					u32 channel, u32 panel)
+{
+	struct platform_device *pdev = NULL;
+	int ret;
+
+	if ((channel >= 3) || ch_used[channel])
+		return -ENODEV;
+
+	ch_used[channel] = TRUE;
+
+	pdev = platform_device_alloc("mipi_lg_l4500t", (panel << 8)|channel);
+	if (!pdev)
+		return -ENOMEM;
+
+	printk("### %s, platform_device_alloc \n", __func__);
+	lg_l4500t_panel_data.panel_info = *pinfo;
+
+	ret = platform_device_add_data(pdev, &lg_l4500t_panel_data,
+		sizeof(lg_l4500t_panel_data));
+	if (ret) {
+		printk(KERN_ERR
+		  "%s: platform_device_add_data failed!\n", __func__);
+		goto err_device_put;
+	}
+
+	ret = platform_device_add(pdev);
+	if (ret) {
+		printk(KERN_ERR
+		  "%s: platform_device_register failed!\n", __func__);
+		goto err_device_put;
+	}
+
+	return 0;
+
+err_device_put:
+	platform_device_put(pdev);
+	return ret;
+}
+
+static int __init mipi_lg_l4500t_lcd_init(void)
+{
+	printk("%s \n", __func__);
+	mipi_dsi_buf_alloc(&lg_l4500t_tx_buf, DSI_BUF_SIZE);
+	mipi_dsi_buf_alloc(&lg_l4500t_rx_buf, DSI_BUF_SIZE);
+	//init_cmd = 0;	// flag to distinguish init sequence from slee out sequence
+
+	return platform_driver_register(&this_driver);
+}
+
+module_init(mipi_lg_l4500t_lcd_init);
diff -urN caf/drivers/video/msm/mipi_lg_l4500t.h for-diff/drivers/video/msm/mipi_lg_l4500t.h
--- caf/drivers/video/msm/mipi_lg_l4500t.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/mipi_lg_l4500t.h	2015-10-08 21:30:48.064850000 +0900
@@ -0,0 +1,36 @@
+/* Copyright (c) 2010, Code Aurora Forum. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ *       copyright notice, this list of conditions and the following
+ *       disclaimer in the documentation and/or other materials provided
+ *       with the distribution.
+ *     * Neither the name of Code Aurora Forum, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived
+ *       from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#ifndef MIPI_LG_L4500T_H
+#define MIPI_LG_L4500T_H
+
+int mipi_lg_l4500t_device_register(struct msm_panel_info *pinfo,
+					u32 channel, u32 panel);
+
+#endif  /* MIPI_NOVATEK_BLUE_H */
diff -urN caf/drivers/video/msm/mipi_lg_l4500t_video_hd_pt.c for-diff/drivers/video/msm/mipi_lg_l4500t_video_hd_pt.c
--- caf/drivers/video/msm/mipi_lg_l4500t_video_hd_pt.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/mipi_lg_l4500t_video_hd_pt.c	2015-10-08 21:30:58.364850000 +0900
@@ -0,0 +1,192 @@
+/* Copyright (c) 2010, Code Aurora Forum. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ *
+ */
+#include "msm_fb.h"
+#include "mipi_dsi.h"
+#include "mipi_lg_l4500t.h"
+#include "tps61161_bl.h" //CONFIG_KTTECH_TPS61161_PWM_BL
+
+static struct msm_panel_info pinfo;
+
+//#define __KTTECH_LG_MIPI_PHY_1__
+#define __KTTECH_LG_MIPI_PHY_2__
+
+static struct mipi_dsi_phy_ctrl dsi_video_mode_phy_db = {
+	/* 1280*720, RGB888, 4 Lane 60 fps video mode */
+#ifdef  __KTTECH_LG_MIPI_PHY_2__
+	/* regulator */
+	{0x03, 0x0a, 0x04, 0x00, 0x20}, 
+
+	/* timing */
+	{0x96, 0x26, 0x23,							 /* panel specific */
+	 0x00,                                       /* DSIPHY_TIMING_CTRL_3 = 0 */    
+	 0x50, 0x4B, 0x1e, 0x28, 0x28, 0x03, 0x04},  /* panel specific */
+
+	/* phy ctrl */
+	{0x5f, 0x00, 0x00, 0x10},
+	/* strength */
+	{0xff, 0x00, 0x06, 0x00},
+
+	/* pll control */
+	{0x0,                                         /* common 8960 */
+	 0xf9, 0xb0, 0xda,							  /* panel specific */
+	 0x00, 0x50, 0x48, 0x63,
+	 0x31, 0x0F, 0x03,                            /* 4 lane Auto update by dsi-mipi driver */
+	 0x00, 0x14, 0x03, 0x00, 0x02,                /* common 8960 */
+	 0x00, 0x20, 0x00, 0x01 },                    /* common 8960 */
+#else
+	/* regulator */
+	{0x03, 0x0a, 0x04, 0x00, 0x20},
+
+	/* timing */
+	{0xac, 0x8b, 0x19,                            /* panel specific */
+	 0x00,                                        /* DSIPHY_TIMING_CTRL_3 = 0 */
+	 0x1b, 0x91, 0x1c, 0x8d, 0x1b, 0x03, 0x04},   /* panel specific */
+
+	/* phy ctrl */
+	{0x5f, 0x00, 0x00, 0x10},
+	/* strength */
+	{0xff, 0x00, 0x06, 0x00},
+
+	/* pll control */
+	{0x0,                                         /* common 8960 */
+	 /* VCO */
+	 0x77, 0x1, 0x19,                             /* panel specific */
+	 0x00, 0x50, 0x48, 0x63,
+	 0x31, 0x0F, 0x03,                            /* 4 lane Auto update by dsi-mipi driver */
+	 0x00, 0x14, 0x03, 0x00, 0x02,                /* common 8960 */
+	 0x00, 0x20, 0x00, 0x01 },                    /* common 8960 */
+#endif
+};
+
+
+static int __init mipi_video_lg_l4500t_hd_pt_init(void)
+{
+	int ret;
+
+#if 1//def CONFIG_FB_MSM_MIPI_PANEL_DETECT
+	if (msm_fb_detect_client("mipi_video_lg_l4500t_hd"))
+		return 0;
+#endif
+	printk("### %s, \n", __func__);
+
+
+	//pinfo.mipi.xres_pad = 0;
+	//pinfo.mipi.yres_pad = 0;
+	
+	pinfo.xres = 720;
+	pinfo.yres = 1280;
+	pinfo.type = MIPI_VIDEO_PANEL;
+	pinfo.pdest = DISPLAY_1;
+	pinfo.wait_cycle = 0;
+	pinfo.bpp = 24;
+
+/*********************************
+	LG Recommand value
+	1. 
+		h bp 83
+		  fp 12
+		  pw 4
+		v bp 32
+		  fp 8
+		  pw 2
+	2.
+		h bp 82
+		  fp 12
+		  pw 4
+		v bp 32
+		  fp 10
+		  pw 2
+**********************************/
+	pinfo.lcdc.h_back_porch = 83; // 84
+	pinfo.lcdc.h_front_porch = 12; 
+	pinfo.lcdc.h_pulse_width = 4; 
+	pinfo.lcdc.v_back_porch = 32;
+	pinfo.lcdc.v_front_porch = 8;
+	pinfo.lcdc.v_pulse_width = 2;
+
+	pinfo.lcdc.border_clr = 0xff0000;	/* blk */
+	pinfo.lcdc.underflow_clr = 0; /* Change underflow color from blue to black  jaemoon.hwang@kttech.co.kr */
+	pinfo.lcdc.hsync_skew = 0;
+#ifdef CONFIG_KTTECH_TPS61161_PWM_BL
+	if( 1 ) //get_kttech_hw_version() >= ES2_HW_VER)
+	{	// pwm bl
+		pinfo.bl_max = TPS61161_BL_PWM_LEVEL;
+		pinfo.bl_min = 1;
+	}
+	else
+#endif /* CONFIG_KTTECH_TPS61161_PWM_BL */	
+	{
+		//easyscale
+		pinfo.bl_max = 29;
+		pinfo.bl_min = 4;
+	}
+
+	pinfo.fb_num = 2;
+
+#ifdef  __KTTECH_LG_MIPI_PHY_2__
+	pinfo.clk_rate = 0;
+#else
+	pinfo.clk_rate = 0;  //480000000
+#endif
+
+	pinfo.mipi.mode = DSI_VIDEO_MODE;
+	pinfo.mipi.pulse_mode_hsa_he = TRUE;
+	pinfo.mipi.hfp_power_stop = TRUE;
+	pinfo.mipi.hbp_power_stop = TRUE;
+	pinfo.mipi.hsa_power_stop = TRUE;	
+	pinfo.mipi.eof_bllp_power_stop = 0; //lcd 떨림 현상 제거 
+	pinfo.mipi.bllp_power_stop = 0;  /* Needed or else will have blank line at top of display */
+	pinfo.mipi.traffic_mode = DSI_BURST_MODE;
+	
+	pinfo.mipi.dst_format = DSI_VIDEO_DST_FORMAT_RGB888;
+	pinfo.mipi.vc = 0;
+	pinfo.mipi.rgb_swap = DSI_RGB_SWAP_RGB;
+	pinfo.mipi.data_lane0 = TRUE;
+	pinfo.mipi.data_lane1 = TRUE;
+	pinfo.mipi.data_lane2 = TRUE;
+	pinfo.mipi.data_lane3 = TRUE;
+	pinfo.mipi.tx_eot_append = TRUE;
+
+#ifdef  __KTTECH_LG_MIPI_PHY_2__
+	pinfo.mipi.t_clk_post = 0x01;
+	pinfo.mipi.t_clk_pre  = 0x19;
+#else
+	pinfo.mipi.t_clk_post = 34;
+	pinfo.mipi.t_clk_pre  = 61;
+#endif
+
+	pinfo.mipi.stream = 0; /* dma_p */
+	pinfo.mipi.mdp_trigger = DSI_CMD_TRIGGER_SW;
+	pinfo.mipi.dma_trigger = DSI_CMD_TRIGGER_SW;
+	pinfo.mipi.frame_rate = 60;
+	pinfo.mipi.dsi_phy_db = &dsi_video_mode_phy_db;
+
+	pinfo.mipi.esc_byte_ratio = 2;
+
+//	pinfo.mipi.traffic_mode = DSI_NON_BURST_SYNCH_EVENT;	
+//	pinfo.lcdc.h_back_porch = 110; // 84
+
+	ret = mipi_lg_l4500t_device_register(&pinfo, MIPI_DSI_PRIM,
+						MIPI_DSI_PANEL_720P_PT);
+	if (ret)
+		pr_err("%s: failed to register device!\n", __func__);
+
+	return ret;
+}
+
+module_init(mipi_video_lg_l4500t_hd_pt_init);
diff -urN caf/drivers/video/msm/mipi_sharp.c for-diff/drivers/video/msm/mipi_sharp.c
--- caf/drivers/video/msm/mipi_sharp.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/mipi_sharp.c	2015-10-08 21:30:58.396850000 +0900
@@ -0,0 +1,836 @@
+/* Copyright (c) 2010-2011, Code Aurora Forum. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ *
+ */
+
+#include "msm_fb.h"
+#include "mipi_dsi.h"
+#include "mipi_sharp.h"
+	// KT TECH : Set Backlight
+#include "tps61161_bl.h"
+
+#ifdef CONFIG_SPIDER_SADR
+#include <linux/sadr.h>
+
+int lcd_id;
+int bl_id;
+#endif
+
+static struct msm_panel_common_pdata *mipi_sharp_pdata;
+
+static struct dsi_buf sharp_tx_buf;
+static struct dsi_buf sharp_rx_buf;
+
+/* select Power on sequence */
+/* if power on sequence is not select , original sequence is performed */
+//#define POWER_ON_Sequence_1
+//#define POWER_ON_Sequence_GAMMA_2_2
+//#define POWER_ON_Sequence_GAMMA_2_4
+#define POWER_ON_Sequence_GAMMA_2_6
+//#define POWER_ON_Sequence_GAMMA_2_8
+//int init_cmd; // flag to distinguish init sequence from slee out sequence
+
+/* POWER ON Sequence */
+/* 1. PASSWD1 -> PASSWD2 -> Source CTL -> Power control 1st -> Power control 2nd -> PositiveGamma -> NegativeGamma 
+      -> DisplayCTL -> Amp Type -> Sleep Out(WAIT 120ms) -> Display On */
+/* 2. MADCTL(WAIT 16ms) -> Amp Type -> Sleep Out(WAIT 120ms) -> Display On */
+/* MADCTL */
+static char MADCTL[2] = {0x36, 0x40}; /* DTYPE_DCS_WRITE1 */ /* org */
+
+#if defined(POWER_ON_Sequence_1)
+/* PASSWD1 */
+static char PASSWD1[3] = {0xF0, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+/* PASSWD2 */
+static char PASSWD2[3] = {0xF1, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+/* Source CTL */
+static char SourceCTL[4] = {0xF2, 0x03, 0x35, 0x81}; /* DTYPE_DCS_LWRITE */
+/* Power control 1st */
+static char PowerControl1st[13] = {0xF4, 0x0A, 0x0B, 0x3E, 0x3E, 0x11, 0x39, 0x1C, 0x04, 0xD2, 0x00, 0x33, 0x33}; /* DTYPE_DCS_LWRITE */
+/* Power control 2nd */
+/*
+PANELCTL3 (F8H)
+
+SHP_VBP[7:0] : VS + VBP = 2 + 2 = 4 = 0x04
+SHP_VFP[7:0] : VFP = 2 = 0x02
+SHP_HBP[7:0] : HS + HBP = 4 + 58 = 62 = 0x3E
+SHP_HFP[7:0] : HFP = 48 = 0x30
+*/
+static char PowerControl2nd[11] = {0xF8, 0x25, 0x35, 0x35, 0x97, 0x35, 0x10, 0x04, 0x02, 0x3E, 0x30}; /* DTYPE_DCS_LWRITE */
+
+
+
+/* Positive Gamma */
+static char PositiveGamma[64] = {0xFA, 0x38, 0x3f, 0x24, 0x21, 0x31, 0x31, 0x29, 0x2c, 0x2d, 0x28,
+											0x26, 0x26, 0x2a, 0x2d, 0x30, 0x33, 0x36, 0x3a, 0x3a, 0x38,
+											0x32, 0x38, 0x3f, 0x21, 0x1e, 0x2e, 0x2f, 0x27, 0x2a, 0x2c,
+											0x28, 0x25, 0x25, 0x27, 0x2b, 0x2d, 0x2f, 0x32, 0x35, 0x34, 
+											0x31, 0x16, 0x38, 0x3f, 0x1f, 0x1b, 0x2d, 0x2e, 0x27, 0x2b, 
+											0x2e, 0x27, 0x2b, 0x28, 0x2a, 0x2c, 0x30, 0x33, 0x35, 0x38, 
+											0x3a, 0x37, 0x1b}; /* DTYPE_DCS_LWRITE */
+/* Negative Gamma */
+static char NegativeGamma[64] = {0xFB, 0x38, 0x3f, 0x24, 0x21, 0x31, 0x31, 0x29, 0x2c, 0x2d, 0x28,
+											0x26, 0x26, 0x2a, 0x2d, 0x30, 0x33, 0x36, 0x3a, 0x3a, 0x38,
+											0x32, 0x38, 0x3f, 0x21, 0x1e, 0x2e, 0x2f, 0x27, 0x2a, 0x2c,
+											0x28, 0x25, 0x25, 0x27, 0x2b, 0x2d, 0x2f, 0x32, 0x35, 0x34,
+											0x31, 0x16, 0x38, 0x3f, 0x1f, 0x1b, 0x2d, 0x2e, 0x27, 0x2b,
+											0x2e, 0x27, 0x2b, 0x28, 0x2a, 0x2c, 0x30, 0x33, 0x35, 0x38,
+											0x3a, 0x37, 0x1b}; /* DTYPE_DCS_LWRITE */
+/* Display CTL */
+//static char DisplayCTL[2] = {0xEF, 0x20}; /* DTYPE_DCS_WRITE1 */ //org
+static char DisplayCTL[2] = {0xEF, 0x30}; /* DTYPE_DCS_WRITE1 */ //modified
+#elif defined(POWER_ON_Sequence_GAMMA_2_2)
+/* Power ON */
+/* Amp Type */
+static char AmpType1st[3] = {0xFC, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+static char AmpType2nd[4] = {0xF5, 0x5A, 0x55, 0x38}; /* DTYPE_DCS_LWRITE */
+/* Sleep Out */
+static char SleepOut[2] = {0x11, 0x00}; /* DTYPE_DCS_WRITE */
+/* PASSWD1 */
+static char PASSWD1[3] = {0xF0, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+/* PASSWD2 */
+static char PASSWD2[3] = {0xF1, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+/* Power control 1st */
+static char PowerControl1st[13] = {0xF4, 0x0A, 0x0B, 0x15, 0x1D, 0x11, 0x3B, 0x1C, 0x0C, 0xA2, 0x00, 0x33, 0x33}; /* DTYPE_DCS_LWRITE */
+//static char PowerControl1st[13] = {0xF4, 0x0A, 0x0B, 0x3E, 0x3E, 0x11, 0x39, 0x1C, 0x04, 0xD2, 0x00, 0x33, 0x33}; /* DTYPE_DCS_LWRITE */
+/* Power control 2nd */
+/*
+PANELCTL3 (F8H)
+
+SHP_VBP[7:0] : VS + VBP = 2 + 2 = 4 = 0x04
+SHP_VFP[7:0] : VFP = 2 = 0x02
+SHP_HBP[7:0] : HS + HBP = 4 + 58 = 62 = 0x3E
+SHP_HFP[7:0] : HFP = 48 = 0x30
+*/
+//static char PowerControl2nd[11] = {0xF8, 0x25, 0x35, 0x35, 0x97, 0x35, 0x10, 0x04, 0x02, 0x3E, 0x30}; /* DTYPE_DCS_LWRITE */
+static char PowerControl2nd[11] = {0xF8, 0x51, 0x35, 0x35, 0x96, 0x35, 0x10, 0x04, 0x02, 0x0C, 0x10}; /* DTYPE_DCS_LWRITE */
+/* Positive Gamma */
+static char PositiveGamma[64] = {0xFA, 0x00, 0x19, 0x19, 0x0F, 0x1F, 0x1E, 0x18, 0x17, 0x18, 0x15,
+											0x14, 0x14, 0x14, 0x17, 0x18, 0x1B, 0x1E, 0x23, 0x28, 0x2F,
+											0x23, 0x1B, 0x0A, 0x0A, 0x00, 0x06, 0x04, 0x00, 0x00, 0x04,
+											0x03, 0x07, 0x0D, 0x0F, 0x12, 0x13, 0x16, 0x1B, 0x1F, 0x25, 
+											0x2C, 0x21, 0x2A, 0x0A, 0x0C, 0x03, 0x09, 0x08, 0x02, 0x02, 
+											0x05, 0x01, 0x03, 0x07, 0x0A, 0x0C, 0x0E, 0x10, 0x15, 0x19, 
+											0x21, 0x29, 0x21}; /* DTYPE_DCS_LWRITE */
+/* Negative Gamma */
+static char NegativeGamma[64] = {0xFB, 0x00, 0x19, 0x19, 0x0F, 0x1F, 0x1E, 0x18, 0x17, 0x18, 0x15,
+											0x14, 0x14, 0x14, 0x17, 0x18, 0x1B, 0x1E, 0x23, 0x28, 0x2F,
+											0x23, 0x1B, 0x0A, 0x0A, 0x00, 0x06, 0x04, 0x00, 0x00, 0x04,
+											0x03, 0x07, 0x0D, 0x0F, 0x12, 0x13, 0x16, 0x1B, 0x1F, 0x25,
+											0x2C, 0x21, 0x2A, 0x0A, 0x0C, 0x03, 0x09, 0x08, 0x02, 0x02,
+											0x05, 0x01, 0x03, 0x07, 0x0A, 0x0C, 0x0E, 0x10, 0x15, 0x19,
+											0x21, 0x29, 0x21}; /* DTYPE_DCS_LWRITE */
+/* Display On */
+static char DisplayOn[2] = {0x29, 0x00}; /* DTYPE_DCS_WRITE */
+
+/* POWER OFF */
+/* Display Off */
+static char DisplayOff[2] = {0x28, 0x00}; /* DTYPE_DCS_WRITE */
+
+/* SLEEP IN */
+static char SleepIn[2] = {0x10, 0x00}; /* DTYPE_DCS_WRITE */
+
+#elif defined(POWER_ON_Sequence_GAMMA_2_4)
+/* Power ON */
+/* Amp Type */
+static char AmpType1st[3] = {0xFC, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+static char AmpType2nd[4] = {0xF5, 0x5A, 0x55, 0x38}; /* DTYPE_DCS_LWRITE */
+/* Sleep Out */
+static char SleepOut[2] = {0x11, 0x00}; /* DTYPE_DCS_WRITE */
+/* PASSWD1 */
+static char PASSWD1[3] = {0xF0, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+/* PASSWD2 */
+static char PASSWD2[3] = {0xF1, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+/* Power control 1st */
+static char PowerControl1st[13] = {0xF4, 0x0A, 0x0B, 0x2D, 0x25, 0x21, 0x39, 0x1C, 0x0C, 0xA4, 0x00, 0x33, 0x33}; /* DTYPE_DCS_LWRITE */
+/* Power control 2nd */
+/*
+PANELCTL3 (F8H)
+
+SHP_VBP[7:0] : VS + VBP = 2 + 2 = 4 = 0x04
+SHP_VFP[7:0] : VFP = 2 = 0x02
+SHP_HBP[7:0] : HS + HBP = 4 + 58 = 62 = 0x3E
+SHP_HFP[7:0] : HFP = 48 = 0x30
+*/
+//static char PowerControl2nd[11] = {0xF8, 0x25, 0x35, 0x35, 0x97, 0x35, 0x10, 0x04, 0x02, 0x3E, 0x30}; /* DTYPE_DCS_LWRITE */
+static char PowerControl2nd[11] = {0xF8, 0x51, 0x35, 0x35, 0x96, 0x35, 0x10, 0x04, 0x02, 0x0C, 0x10}; /* DTYPE_DCS_LWRITE */
+/* Positive Gamma */
+static char PositiveGamma[64] = {0xFA, 0x13, 0x20, 0x17, 0x0D, 0x2E, 0x2D, 0x1D, 0x25, 0x26, 0x1C,
+											0x16, 0x1D, 0x21, 0x23, 0x25, 0x26, 0x2B, 0x30, 0x35, 0x3A,
+											0x28, 0x24, 0x19, 0x0F, 0x0A, 0x15, 0x27, 0x12, 0x13, 0x1C,
+											0x18, 0x1B, 0x1D, 0x21, 0x24, 0x26, 0x29, 0x2A, 0x32, 0x35, 
+											0x3B, 0x27, 0x28, 0x1F, 0x10, 0x0B, 0x18, 0x19, 0x14, 0x1F, 
+											0x1E, 0x19, 0x19, 0x1B, 0x19, 0x21, 0x23, 0x24, 0x29, 0x2E, 
+											0x34, 0x39, 0x27}; /* DTYPE_DCS_LWRITE */
+/* Negative Gamma */
+static char NegativeGamma[64] = {0xFB, 0x13, 0x20, 0x17, 0x0D, 0x2E, 0x2D, 0x1D, 0x25, 0x26, 0x1C,
+											0x16, 0x1D, 0x21, 0x23, 0x25, 0x26, 0x2B, 0x30, 0x35, 0x3A,
+											0x28, 0x24, 0x19, 0x0F, 0x0A, 0x15, 0x27, 0x12, 0x13, 0x1C,
+											0x18, 0x1B, 0x1D, 0x21, 0x24, 0x26, 0x29, 0x2A, 0x32, 0x35,
+											0x3B, 0x27, 0x28, 0x1F, 0x10, 0x0B, 0x18, 0x19, 0x14, 0x1F,
+											0x1E, 0x19, 0x19, 0x1B, 0x19, 0x21, 0x23, 0x24, 0x29, 0x2E,
+											0x34, 0x39, 0x27}; /* DTYPE_DCS_LWRITE */
+/* Display On */
+static char DisplayOn[2] = {0x29, 0x00}; /* DTYPE_DCS_WRITE */
+
+/* POWER OFF */
+/* Display Off */
+static char DisplayOff[2] = {0x28, 0x00}; /* DTYPE_DCS_WRITE */
+
+/* SLEEP IN */
+static char SleepIn[2] = {0x10, 0x00}; /* DTYPE_DCS_WRITE */
+
+#elif defined(POWER_ON_Sequence_GAMMA_2_6)
+/* Power ON */
+/* Amp Type */
+static char AmpType1st[3] = {0xFC, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+static char AmpType2nd[4] = {0xF5, 0x5A, 0x55, 0x38}; /* DTYPE_DCS_LWRITE */
+/* Sleep Out */
+static char SleepOut[2] = {0x11, 0x00}; /* DTYPE_DCS_WRITE */
+/* PASSWD1 */
+static char PASSWD1[3] = {0xF0, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+/* PASSWD2 */
+static char PASSWD2[3] = {0xF1, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+/* Power control 1st */
+static char PowerControl1st[13] = {0xF4, 0x0A, 0x0B, 0x2D, 0x25, 0x21, 0x39, 0x1C, 0x0C, 0xA4, 0x00, 0x33, 0x33}; /* DTYPE_DCS_LWRITE */
+/* Power control 2nd */
+/*
+PANELCTL3 (F8H)
+
+SHP_VBP[7:0] : VS + VBP = 2 + 2 = 4 = 0x04
+SHP_VFP[7:0] : VFP = 2 = 0x02
+SHP_HBP[7:0] : HS + HBP = 4 + 58 = 62 = 0x3E
+SHP_HFP[7:0] : HFP = 48 = 0x30
+*/
+//static char PowerControl2nd[11] = {0xF8, 0x25, 0x35, 0x35, 0x97, 0x35, 0x10, 0x04, 0x02, 0x3E, 0x30}; /* DTYPE_DCS_LWRITE */
+static char PowerControl2nd[11] = {0xF8, 0x51, 0x35, 0x35, 0x96, 0x35, 0x10, 0x04, 0x02, 0x0C, 0x10}; /* DTYPE_DCS_LWRITE */
+/* Positive Gamma */
+static char PositiveGamma[64] = {0xFA, 0x13, 0x20, 0x17, 0x0D, 0x2F, 0x2E, 0x20, 0x29, 0x2A, 0x21,
+											0x1B, 0x22, 0x26, 0x27, 0x28, 0x27, 0x2E, 0x33, 0x37, 0x3B,
+											0x28, 0x24, 0x19, 0x0F, 0x0A, 0x17, 0x28, 0x15, 0x17, 0x20,
+											0x1D, 0x20, 0x22, 0x26, 0x28, 0x27, 0x2A, 0x2D, 0x35, 0x38, 
+											0x3C, 0x27, 0x28, 0x1F, 0x10, 0x0B, 0x1A, 0x1A, 0x17, 0x23, 
+											0x22, 0x1E, 0x1E, 0x20, 0x1E, 0x25, 0x26, 0x25, 0x2C, 0x31, 
+											0x37, 0x3A, 0x27}; /* DTYPE_DCS_LWRITE */
+/* Negative Gamma */
+static char NegativeGamma[64] = {0xFB, 0x13, 0x20, 0x17, 0x0D, 0x2F, 0x2E, 0x20, 0x29, 0x2A, 0x21,
+											0x1B, 0x22, 0x26, 0x27, 0x28, 0x27, 0x2E, 0x33, 0x37, 0x3B,
+											0x28, 0x24, 0x19, 0x0F, 0x0A, 0x17, 0x28, 0x15, 0x17, 0x20,
+											0x1D, 0x20, 0x22, 0x26, 0x28, 0x27, 0x2A, 0x2D, 0x35, 0x38,
+											0x3C, 0x27, 0x28, 0x1F, 0x10, 0x0B, 0x1A, 0x1A, 0x17, 0x23,
+											0x22, 0x1E, 0x1E, 0x20, 0x1E, 0x25, 0x26, 0x25, 0x2C, 0x31,
+											0x37, 0x3A, 0x27}; /* DTYPE_DCS_LWRITE */
+/* Display On */
+static char DisplayOn[2] = {0x29, 0x00}; /* DTYPE_DCS_WRITE */
+
+/* POWER OFF */
+/* Display Off */
+static char DisplayOff[2] = {0x28, 0x00}; /* DTYPE_DCS_WRITE */
+
+/* SLEEP IN */
+static char SleepIn[2] = {0x10, 0x00}; /* DTYPE_DCS_WRITE */
+
+#elif defined(POWER_ON_Sequence_GAMMA_2_8)
+/* Power ON */
+/* Amp Type */
+static char AmpType1st[3] = {0xFC, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+static char AmpType2nd[4] = {0xF5, 0x5A, 0x55, 0x38}; /* DTYPE_DCS_LWRITE */
+/* Sleep Out */
+static char SleepOut[2] = {0x11, 0x00}; /* DTYPE_DCS_WRITE */
+/* PASSWD1 */
+static char PASSWD1[3] = {0xF0, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+/* PASSWD2 */
+static char PASSWD2[3] = {0xF1, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+/* Power control 1st */
+static char PowerControl1st[13] = {0xF4, 0x0A, 0x0B, 0x2D, 0x25, 0x21, 0x39, 0x1C, 0x0C, 0xA4, 0x00, 0x33, 0x33}; /* DTYPE_DCS_LWRITE */
+/* Power control 2nd */
+/*
+PANELCTL3 (F8H)
+
+SHP_VBP[7:0] : VS + VBP = 2 + 2 = 4 = 0x04
+SHP_VFP[7:0] : VFP = 2 = 0x02
+SHP_HBP[7:0] : HS + HBP = 4 + 58 = 62 = 0x3E
+SHP_HFP[7:0] : HFP = 48 = 0x30
+*/
+//static char PowerControl2nd[11] = {0xF8, 0x25, 0x35, 0x35, 0x97, 0x35, 0x10, 0x04, 0x02, 0x3E, 0x30}; /* DTYPE_DCS_LWRITE */
+static char PowerControl2nd[11] = {0xF8, 0x51, 0x35, 0x35, 0x96, 0x35, 0x10, 0x04, 0x02, 0x0C, 0x10}; /* DTYPE_DCS_LWRITE */
+/* Positive Gamma */
+static char PositiveGamma[64] = {0xFA, 0x14, 0x21, 0x0D, 0x01, 0x09, 0x09, 0x02, 0x05, 0x0E, 0x12,
+											0x1E, 0x25, 0x26, 0x29, 0x29, 0x2B, 0x30, 0x34, 0x37, 0x3C,
+											0x28, 0x23, 0x1B, 0x0C, 0x00, 0x07, 0x07, 0x00, 0x03, 0x0C,
+											0x11, 0x1F, 0x27, 0x28, 0x2C, 0x2B, 0x30, 0x30, 0x37, 0x38, 
+											0x3D, 0x28, 0x24, 0x22, 0x0D, 0x01, 0x09, 0x09, 0x02, 0x05, 
+											0x0E, 0x12, 0x1E, 0x25, 0x26, 0x29, 0x29, 0x2B, 0x30, 0x34, 
+											0x37, 0x3C, 0x28}; /* DTYPE_DCS_LWRITE */
+/* Negative Gamma */
+static char NegativeGamma[64] = {0xFB, 0x14, 0x21, 0x0D, 0x01, 0x09, 0x09, 0x02, 0x05, 0x0E, 0x12,
+											0x1E, 0x25, 0x26, 0x29, 0x29, 0x2B, 0x30, 0x34, 0x37, 0x3C,
+											0x28, 0x23, 0x1B, 0x0C, 0x00, 0x07, 0x07, 0x00, 0x03, 0x0C,
+											0x11, 0x1F, 0x27, 0x28, 0x2C, 0x2B, 0x30, 0x30, 0x37, 0x38,
+											0x3D, 0x28, 0x24, 0x22, 0x0D, 0x01, 0x09, 0x09, 0x02, 0x05,
+											0x0E, 0x12, 0x1E, 0x25, 0x26, 0x29, 0x29, 0x2B, 0x30, 0x34,
+											0x37, 0x3C, 0x28}; /* DTYPE_DCS_LWRITE */
+/* Display On */
+static char DisplayOn[2] = {0x29, 0x00}; /* DTYPE_DCS_WRITE */
+
+/* POWER OFF */
+/* Display Off */
+static char DisplayOff[2] = {0x28, 0x00}; /* DTYPE_DCS_WRITE */
+
+/* SLEEP IN */
+static char SleepIn[2] = {0x10, 0x00}; /* DTYPE_DCS_WRITE */
+#else /* Original */
+/* Amp Type */
+static char AmpType1st[3] = {0xFC, 0x5A, 0x5A}; /* DTYPE_DCS_LWRITE */
+static char AmpType2nd[4] = {0xF5, 0x5A, 0x55, 0x38}; /* DTYPE_DCS_LWRITE */
+/* Sleep Out */
+static char SleepOut[2] = {0x11, 0x00}; /* DTYPE_DCS_WRITE */
+/* Display On */
+static char DisplayOn[2] = {0x29, 0x00}; /* DTYPE_DCS_WRITE */
+
+/* POWER OFF */
+/* Display Off */
+static char DisplayOff[2] = {0x28, 0x00}; /* DTYPE_DCS_WRITE */
+/* SLEEP IN */
+static char SleepIn[2] = {0x10, 0x00}; /* DTYPE_DCS_WRITE */
+
+/* Sleep IN */
+/* Display Off */
+/* SLEEP IN */
+
+/* Sleep OUT */
+/* SLEEP Out */
+/* Display On */
+#endif
+
+#if defined(POWER_ON_Sequence_1)
+/* 1. MADCTL(WAIT 16ms) -> PASSWD1 -> PASSWD2 -> Source CTL -> Power control 1st -> Power control 2nd -> PositiveGamma -> NegativeGamma 
+      -> DisplayCTL -> Amp Type -> Sleep Out(WAIT 120ms) -> Display On */
+static struct dsi_cmd_desc sharp_video_on_cmds[] = {
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 16,
+		sizeof(MADCTL), MADCTL},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD1), PASSWD1},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD2), PASSWD2},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(SourceCTL), SourceCTL},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl1st), PowerControl1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl2nd), PowerControl2nd},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PositiveGamma), PositiveGamma},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(NegativeGamma), NegativeGamma},
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 0,
+		sizeof(DisplayCTL), DisplayCTL},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(AmpType1st), AmpType1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(AmpType2nd), AmpType2nd},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 120,
+		sizeof(SleepOut), SleepOut},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 0,
+		sizeof(DisplayOn), DisplayOn}
+};
+#elif defined(POWER_ON_Sequence_GAMMA_2_2)
+/* Original 'sharp_video_on_cmds' of Sharp shows display with flip_LR */
+//static struct dsi_cmd_desc sharp_init_cmds[] = {
+static struct dsi_cmd_desc sharp_video_on_cmds[] = {
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 16,
+		sizeof(MADCTL), MADCTL},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(AmpType1st), AmpType1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(AmpType2nd), AmpType2nd},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 120,
+		sizeof(SleepOut), SleepOut},		
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD1), PASSWD1},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD2), PASSWD2},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl1st), PowerControl1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl2nd), PowerControl2nd},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PositiveGamma), PositiveGamma},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 16,
+		sizeof(NegativeGamma), NegativeGamma},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 0,
+		sizeof(DisplayOn), DisplayOn}
+};
+/* Original 'sharp_video_on_cmds' of Sharp shows display with flip_LR */
+/*
+static struct dsi_cmd_desc sharp_video_on_cmds[] = {
+	{DTYPE_DCS_WRITE, 1, 0, 0, 120,
+		sizeof(SleepOut), SleepOut},	
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD1), PASSWD1},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD2), PASSWD2},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl1st), PowerControl1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl2nd), PowerControl2nd},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PositiveGamma), PositiveGamma},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 16,
+		sizeof(NegativeGamma), NegativeGamma},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 0,
+		sizeof(DisplayOn), DisplayOn}
+};
+*/
+#elif defined(POWER_ON_Sequence_GAMMA_2_4)
+/* Original 'sharp_video_on_cmds' of Sharp shows display with flip_LR */
+//static struct dsi_cmd_desc sharp_init_cmds[] = {
+static struct dsi_cmd_desc sharp_video_on_cmds[] = {
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 16,
+		sizeof(MADCTL), MADCTL},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(AmpType1st), AmpType1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(AmpType2nd), AmpType2nd},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 120,
+		sizeof(SleepOut), SleepOut},		
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD1), PASSWD1},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD2), PASSWD2},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl1st), PowerControl1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl2nd), PowerControl2nd},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PositiveGamma), PositiveGamma},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 16,
+		sizeof(NegativeGamma), NegativeGamma},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 0,
+		sizeof(DisplayOn), DisplayOn}
+};
+/* Original 'sharp_video_on_cmds' of Sharp shows display with flip_LR */
+/*
+static struct dsi_cmd_desc sharp_video_on_cmds[] = {
+	{DTYPE_DCS_WRITE, 1, 0, 0, 120,
+		sizeof(SleepOut), SleepOut},	
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD1), PASSWD1},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD2), PASSWD2},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl1st), PowerControl1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl2nd), PowerControl2nd},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PositiveGamma), PositiveGamma},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 16,
+		sizeof(NegativeGamma), NegativeGamma},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 0,
+		sizeof(DisplayOn), DisplayOn}
+};
+*/
+#elif defined(POWER_ON_Sequence_GAMMA_2_6)
+/* Original 'sharp_video_on_cmds' of Sharp shows display with flip_LR */
+//static struct dsi_cmd_desc sharp_init_cmds[] = {
+static struct dsi_cmd_desc sharp_video_on_cmds[] = {
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 16,
+		sizeof(MADCTL), MADCTL},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(AmpType1st), AmpType1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(AmpType2nd), AmpType2nd},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 120,
+		sizeof(SleepOut), SleepOut},		
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD1), PASSWD1},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD2), PASSWD2},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl1st), PowerControl1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl2nd), PowerControl2nd},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PositiveGamma), PositiveGamma},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 16,
+		sizeof(NegativeGamma), NegativeGamma},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 0,
+		sizeof(DisplayOn), DisplayOn}
+};
+/* Original 'sharp_video_on_cmds' of Sharp shows display with flip_LR */
+/*
+static struct dsi_cmd_desc sharp_video_on_cmds[] = {
+	{DTYPE_DCS_WRITE, 1, 0, 0, 120,
+		sizeof(SleepOut), SleepOut},	
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD1), PASSWD1},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD2), PASSWD2},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl1st), PowerControl1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl2nd), PowerControl2nd},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PositiveGamma), PositiveGamma},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 16,
+		sizeof(NegativeGamma), NegativeGamma},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 0,
+		sizeof(DisplayOn), DisplayOn}
+};
+*/
+#elif defined(POWER_ON_Sequence_GAMMA_2_8)
+/* Original 'sharp_video_on_cmds' of Sharp shows display with flip_LR */
+//static struct dsi_cmd_desc sharp_init_cmds[] = {
+static struct dsi_cmd_desc sharp_video_on_cmds[] = {
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 16,
+		sizeof(MADCTL), MADCTL},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(AmpType1st), AmpType1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(AmpType2nd), AmpType2nd},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 120,
+		sizeof(SleepOut), SleepOut},		
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD1), PASSWD1},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD2), PASSWD2},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl1st), PowerControl1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl2nd), PowerControl2nd},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PositiveGamma), PositiveGamma},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 16,
+		sizeof(NegativeGamma), NegativeGamma},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 0,
+		sizeof(DisplayOn), DisplayOn}
+};
+/* Original 'sharp_video_on_cmds' of Sharp shows display with flip_LR */
+/*
+static struct dsi_cmd_desc sharp_video_on_cmds[] = {
+	{DTYPE_DCS_WRITE, 1, 0, 0, 120,
+		sizeof(SleepOut), SleepOut},	
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD1), PASSWD1},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PASSWD2), PASSWD2},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl1st), PowerControl1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PowerControl2nd), PowerControl2nd},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(PositiveGamma), PositiveGamma},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 16,
+		sizeof(NegativeGamma), NegativeGamma},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 0,
+		sizeof(DisplayOn), DisplayOn}
+};
+*/
+#else
+/* 2. MADCTL(WAIT 16ms) -> Amp Type -> Sleep Out(WAIT 120ms) -> Display On */
+static struct dsi_cmd_desc sharp_video_on_cmds[] = {
+	{DTYPE_DCS_WRITE1, 1, 0, 0, 16,
+		sizeof(MADCTL), MADCTL},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(AmpType1st), AmpType1st},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
+		sizeof(AmpType2nd), AmpType2nd},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 120,
+		sizeof(SleepOut), SleepOut},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 0,
+		sizeof(DisplayOn), DisplayOn}
+};
+#endif
+
+static struct dsi_cmd_desc sharp_display_off_cmds[] = {
+	{DTYPE_DCS_WRITE, 1, 0, 0, 0,
+		sizeof(DisplayOff), DisplayOff},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 120,
+		sizeof(SleepIn), SleepIn}
+};
+
+static char manufacture_id[2] = {0x04, 0x00}; /* DTYPE_DCS_READ */
+
+static struct dsi_cmd_desc sharp_manufacture_id_cmd = {
+	DTYPE_DCS_READ, 1, 0, 1, 5, sizeof(manufacture_id), manufacture_id};
+
+static uint32 mipi_sharp_manufacture_id(struct msm_fb_data_type *mfd)
+{
+	struct dsi_buf *rp, *tp;
+	struct dsi_cmd_desc *cmd;
+	uint32 *lp;
+	printk("[HJM] %s\n", __func__);
+
+	tp = &sharp_tx_buf;
+	rp = &sharp_rx_buf;
+	mipi_dsi_buf_init(rp);
+	mipi_dsi_buf_init(tp);
+
+	cmd = &sharp_manufacture_id_cmd;
+	mipi_dsi_cmds_rx(mfd, tp, rp, cmd, 3);
+	lp = (uint32 *)rp->data;
+	pr_info("%s: manufacture_id=%x", __func__, *lp);
+	return *lp;
+}
+
+static int mipi_sharp_lcd_on(struct platform_device *pdev)
+{
+	struct msm_fb_data_type *mfd;
+	struct mipi_panel_info *mipi;
+	printk("[HJM] %s\n", __func__);
+#ifdef CONFIG_SPIDER_SADR
+    sadr_device_on(lcd_id);
+#endif
+
+	mfd = platform_get_drvdata(pdev);
+	if (!mfd)
+		return -ENODEV;
+	if (mfd->key != MFD_KEY)
+		return -EINVAL;
+
+	mipi  = &mfd->panel_info.mipi;
+
+//	mutex_lock(&mfd->dma->ov_mutex); khkim, lcd bringup
+	
+	/* Begin - jaemoon.hwang@kttech.co.kr */
+	/* 'sharp_video_on_cmds' shows display with flip_LR */
+#if 0
+	if (!init_cmd) {
+			printk("[HJM] %s, if (!init_cmd) {, sharp_init_cmds\n", __func__);
+			mipi_dsi_cmds_tx(mfd, &sharp_tx_buf, sharp_init_cmds,
+				ARRAY_SIZE(sharp_init_cmds));
+			init_cmd = 1;
+	}
+#endif
+	/* End - jaemoon.hwang@kttech.co.kr */
+	
+	if (mipi->mode == DSI_VIDEO_MODE) {
+		mipi_dsi_cmds_tx(mfd, &sharp_tx_buf, sharp_video_on_cmds,
+			ARRAY_SIZE(sharp_video_on_cmds));
+	} else {	/* not yet implemented */
+		mipi_dsi_cmds_tx(mfd, &sharp_tx_buf, sharp_video_on_cmds,
+			ARRAY_SIZE(sharp_video_on_cmds));
+
+		mipi_dsi_cmd_bta_sw_trigger(); /* clean up ack_err_status */
+
+		mipi_sharp_manufacture_id(mfd);
+	}
+//	mutex_unlock(&mfd->dma->ov_mutex); khkim, lcd bringup
+
+	return 0;
+}
+
+static int mipi_sharp_lcd_off(struct platform_device *pdev)
+{
+	struct msm_fb_data_type *mfd;
+	mfd = platform_get_drvdata(pdev);
+	printk("### [HJM] %s, mfd=%0x \n", __func__, (unsigned int)mfd);
+#ifdef CONFIG_SPIDER_SADR
+    sadr_device_off(lcd_id);
+#endif
+
+	if (!mfd)
+		return -ENODEV;
+	if (mfd->key != MFD_KEY)
+		return -EINVAL;
+
+	printk("	### before off send cmd.....\n");
+//	mutex_lock(&mfd->dma->ov_mutex);
+	printk("		### after mutex.....\n");
+	mipi_dsi_cmds_tx(mfd, &sharp_tx_buf, sharp_display_off_cmds,
+			ARRAY_SIZE(sharp_display_off_cmds));
+//	mutex_unlock(&mfd->dma->ov_mutex);
+
+	return 0;
+}
+
+static int __devinit mipi_sharp_lcd_probe(struct platform_device *pdev)
+{
+
+	printk("### %s, pdev-id=%d\n", __func__, pdev->id);
+
+	if (pdev->id == 0) {
+		mipi_sharp_pdata = pdev->dev.platform_data;
+		return 0;
+	}
+	printk("[HJM] %s\n", __func__);
+	msm_fb_add_device(pdev);
+
+#ifdef CONFIG_KTTECH_TPS61161_BL
+  if ( get_kttech_hw_version() >= ES2_HW_VER )
+    tps61161_set_bl_native( 120 );
+  else
+    tps61161_set_bl_native( 17 );
+#endif
+
+
+#if defined(POWER_ON_Sequence_1)
+	printk("[HJM] %s, POWER_ON_Sequence_1\n", __func__);
+#elif defined(POWER_ON_Sequence_GAMMA_2_2)
+	printk("[HJM] %s, POWER_ON_Sequence_GAMMA_2_2\n", __func__);
+#elif defined(POWER_ON_Sequence_GAMMA_2_4)
+	printk("[HJM] %s, POWER_ON_Sequence_GAMMA_2_4\n", __func__);
+#elif defined(POWER_ON_Sequence_GAMMA_2_6)
+	printk("[HJM] %s, POWER_ON_Sequence_GAMMA_2_6\n", __func__);
+#elif defined(POWER_ON_Sequence_GAMMA_2_8)
+	printk("[HJM] %s, POWER_ON_Sequence_GAMMA_2_8\n", __func__);
+#else
+	printk("[HJM] %s, Original Sequence without gamma value set by software \n", __func__);
+#endif
+
+	return 0;
+}
+
+static struct platform_driver this_driver = {
+	.probe  = mipi_sharp_lcd_probe,
+	.driver = {
+		.name   = "mipi_sharp",
+	},
+};
+
+#ifdef CONFIG_SPIDER_SADR
+/*
+ * LCD
+ */
+static void sadr_lcd_on(uint32 call_by_sa)
+{
+	printk("SADR LCD on [%d]\n", call_by_sa);
+}
+
+static void sadr_lcd_off(uint32 call_by_sa)
+{
+	printk("SADR LCD off [%d]\n", call_by_sa);
+}
+
+static sadr_control_dev_type sharp_lcd = {
+    .name = "sadr_lcd",
+    .dev_type = SADR_DEVICE_LCD,
+    .device_on = sadr_lcd_on,
+    .device_off = sadr_lcd_off,
+    .device_set_data = NULL,
+    .device_connection = NULL,
+    .connect_pri = 1,
+    .disconnect_pri = 2,
+};
+
+/*
+ * Back Light
+ */
+void sadr_tps61161_set_bl(struct msm_fb_data_type *mfd)
+{
+	sadr_device_set_data(bl_id, mfd->bl_level);
+}
+
+static void sadr_set_bl(uint32 data, uint32 call_by_sa)
+{
+#ifdef CONFIG_KTTECH_TPS61161_BL
+	tps61161_set_bl_native(data);
+#endif
+}
+
+static sadr_control_dev_type sharp_bl = {
+	.name = "sadr_bl",
+	.dev_type = SADR_DEVICE_BACKLIGHT,
+	.device_set_data = sadr_set_bl,
+	.device_on = NULL,
+	.device_off = NULL,
+	.device_connection = NULL,
+	/* Begin - jaemoon.hwang@kttech.co.kr */
+	/* max level of backlight level is 29 */
+#if 1
+	.max_level = 29,
+#else
+	.max_level = 30,
+#endif
+	/* End - jaemoon.hwang@kttech.co.kr */
+	.connect_pri = 2,
+	.disconnect_pri = 1,
+};
+
+static struct msm_fb_panel_data sharp_panel_data = {
+	.on     = mipi_sharp_lcd_on,
+	.off        = mipi_sharp_lcd_off,
+	.set_backlight  = sadr_tps61161_set_bl,
+};
+#else
+	// KT TECH : Set Backlight
+static struct msm_fb_panel_data sharp_panel_data = {
+	.on		= mipi_sharp_lcd_on,
+	.off		= mipi_sharp_lcd_off,
+#ifdef CONFIG_KTTECH_TPS61161_BL	
+	.set_backlight	= tps61161_set_bl,
+#endif
+};
+#endif
+
+static int ch_used[3];
+
+int mipi_sharp_device_register(struct msm_panel_info *pinfo,
+					u32 channel, u32 panel)
+{
+	struct platform_device *pdev = NULL;
+	int ret;
+
+	printk("### [HJM] %s\n", __func__);
+	
+	if ((channel >= 3) || ch_used[channel])
+		return -ENODEV;
+
+	ch_used[channel] = TRUE;
+
+	pdev = platform_device_alloc("mipi_sharp", (panel << 8)|channel);
+	if (!pdev)
+		return -ENOMEM;
+
+	sharp_panel_data.panel_info = *pinfo;
+
+	ret = platform_device_add_data(pdev, &sharp_panel_data,
+		sizeof(sharp_panel_data));
+	if (ret) {
+		printk(KERN_ERR
+		  "%s: platform_device_add_data failed!\n", __func__);
+		goto err_device_put;
+	}
+
+	ret = platform_device_add(pdev);
+	if (ret) {
+		printk(KERN_ERR
+		  "%s: platform_device_register failed!\n", __func__);
+		goto err_device_put;
+	}
+
+#ifdef CONFIG_SPIDER_SADR
+	bl_id = sadr_reg_device(&sharp_bl);
+	lcd_id = sadr_reg_device(&sharp_lcd);
+#endif
+
+	return 0;
+
+err_device_put:
+	platform_device_put(pdev);
+	return ret;
+}
+
+static int __init mipi_sharp_lcd_init(void)
+{
+	printk("[HJM] %s\n", __func__);
+	mipi_dsi_buf_alloc(&sharp_tx_buf, DSI_BUF_SIZE);
+	mipi_dsi_buf_alloc(&sharp_rx_buf, DSI_BUF_SIZE);
+	//init_cmd = 0;	// flag to distinguish init sequence from slee out sequence
+
+	return platform_driver_register(&this_driver);
+}
+
+module_init(mipi_sharp_lcd_init);
diff -urN caf/drivers/video/msm/mipi_sharp.h for-diff/drivers/video/msm/mipi_sharp.h
--- caf/drivers/video/msm/mipi_sharp.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/mipi_sharp.h	2015-10-08 21:30:48.080850000 +0900
@@ -0,0 +1,36 @@
+/* Copyright (c) 2010, Code Aurora Forum. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ *       copyright notice, this list of conditions and the following
+ *       disclaimer in the documentation and/or other materials provided
+ *       with the distribution.
+ *     * Neither the name of Code Aurora Forum, Inc. nor the names of its
+ *       contributors may be used to endorse or promote products derived
+ *       from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+#ifndef MIPI_SHARP_H
+#define MIPI_SHARP_H
+
+int mipi_sharp_device_register(struct msm_panel_info *pinfo,
+					u32 channel, u32 panel);
+
+#endif  /* MIPI_NOVATEK_BLUE_H */
diff -urN caf/drivers/video/msm/mipi_sharp_video_wxga_pt.c for-diff/drivers/video/msm/mipi_sharp_video_wxga_pt.c
--- caf/drivers/video/msm/mipi_sharp_video_wxga_pt.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/mipi_sharp_video_wxga_pt.c	2015-10-08 21:30:58.396850000 +0900
@@ -0,0 +1,192 @@
+/* Copyright (c) 2010, Code Aurora Forum. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ *
+ */
+
+#include "msm_fb.h"
+#include "mipi_dsi.h"
+#include "mipi_sharp.h"
+#include "tps61161_bl.h" //CONFIG_KTTECH_TPS61161_PWM_BL
+
+static struct msm_panel_info pinfo;
+
+#define DSI_BIT_CLK_480MHZ
+//#define DSI_BIT_CLK_406MHZ
+//#define DSI_BIT_CLK_500MHZ
+
+
+static struct mipi_dsi_phy_ctrl dsi_video_mode_phy_db = {
+	/* 600*1024, RGB888, 3 Lane 55 fps video mode */
+    /* regulator */
+	{0x03, 0x0a, 0x04, 0x00, 0x20},
+#if 0	
+	/* timing */
+	{0xab, 0x8a, 0x18, 0x00, 0x92, 0x97, 0x1b, 0x8c,
+	0x0c, 0x03, 0x04, 0xa0},
+#endif
+#if 0
+	{0x79, 0x25, 0x1F, 0x00, 0x4C, 0x34, 0x25, 0x25,
+	0x1C, 0x03, 0x04},	
+#endif	
+#if 1
+	{0xac, 0x8b, 0x18, 0x00, 0x1b, 0x91, 0x1c, 0x8d,
+	0x1b, 0x03, 0x04},	
+#endif	
+
+    /* phy ctrl */
+	{0x5f, 0x00, 0x00, 0x10},
+    /* strength */
+	{0xff, 0x00, 0x06, 0x00},
+	/* pll control */
+	{0x0, 0x7f, 0x1, 0x1a, 0x00, 0x50, 0x48, 0x63,
+//	0x41, 0x0f, 0x01,
+//	0x31, 0x0F, 0x03,/* 4 lane */
+	0x31, 0x0F, 0x03,/* 4 lane */
+	0x00, 0x14, 0x03, 0x00, 0x02, 0x00, 0x20, 0x00, 0x01 },
+};
+
+
+
+
+static int __init mipi_video_sharp_wxga_pt_init(void)
+{
+	int ret;
+
+#if 1//def CONFIG_FB_MSM_MIPI_PANEL_DETECT
+	if (msm_fb_detect_client("mipi_video_sharp_wxga"))
+		return 0;
+#endif
+	printk("### %s, \n", __func__);
+
+
+	pinfo.mipi.xres_pad = 0;
+	pinfo.mipi.yres_pad = 0;
+	
+	pinfo.xres = 800;
+	pinfo.yres = 1280;
+	pinfo.type = MIPI_VIDEO_PANEL;
+	pinfo.pdest = DISPLAY_1;
+	pinfo.wait_cycle = 0;
+	pinfo.bpp = 24;
+#if defined(DSI_BIT_CLK_500MHZ)
+	pinfo.lcdc.h_back_porch = 68;
+	pinfo.lcdc.h_front_porch = 48;
+	pinfo.lcdc.h_pulse_width = 4;
+	pinfo.lcdc.v_back_porch = 2;
+	pinfo.lcdc.v_front_porch = 2;
+	pinfo.lcdc.v_pulse_width = 2;
+#elif defined(DSI_BIT_CLK_480MHZ)
+	pinfo.lcdc.h_back_porch = 50; // 58
+	pinfo.lcdc.h_front_porch = 24; // 48
+	pinfo.lcdc.h_pulse_width = 4; // 4
+	
+	pinfo.lcdc.v_back_porch = 2;// 2
+	pinfo.lcdc.v_front_porch = 2;// 2
+	pinfo.lcdc.v_pulse_width = 2; // 2
+#endif
+	pinfo.lcdc.border_clr = 0xff0000;	/* blk */
+	/* Begin - jaemoon.hwang@kttech.co.kr */
+	/* Change underflow color from blue to black */
+#if 1
+	pinfo.lcdc.underflow_clr = 0;	/* blk  */
+#else
+	pinfo.lcdc.underflow_clr = 0xff;	/* blue */
+#endif
+	/* End - jaemoon.hwang@kttech.co.kr */
+	pinfo.lcdc.hsync_skew = 0;
+#ifdef CONFIG_KTTECH_TPS61161_PWM_BL
+	pinfo.bl_max = TPS61161_BL_PWM_LEVEL;
+	pinfo.bl_min = 1;
+#else /* CONFIG_KTTECH_TPS61161_PWM_BL */
+	/* Begin - jaemoon.hwang@kttech.co.kr */
+	/* bl_max is changed from 28 to 29 */
+#if 1
+	pinfo.bl_max = 29;
+#else
+	pinfo.bl_max = 28;
+#endif
+	/* End - jaemoon.hwang@kttech.co.kr */
+	/* Begin - jaemoon.hwang@kttech.co.kr */
+	/* bl_min is changed from 1 to 4 */
+#if 1
+	pinfo.bl_min = 4;
+#else
+	pinfo.bl_min = 1;
+#endif
+#endif /* CONFIG_KTTECH_TPS61161_PWM_BL */
+	/* End - jaemoon.hwang@kttech.co.kr */
+	pinfo.fb_num = 2;
+
+#if defined(DSI_BIT_CLK_500MHZ)
+	pinfo.clk_rate = 500000000;
+#elif defined(DSI_BIT_CLK_366MHZ)
+	pinfo.clk_rate = 366000000;
+#elif defined(DSI_BIT_CLK_406MHZ)
+	pinfo.clk_rate = 406000000;
+#elif defined(DSI_BIT_CLK_380MHZ)
+	pinfo.clk_rate = 380000000;
+#elif defined(DSI_BIT_CLK_480MHZ)
+	pinfo.clk_rate = 480000000;
+#else		/* 200 mhz */
+	pinfo.clk_rate = 200000000;
+#endif
+
+	pinfo.mipi.mode = DSI_VIDEO_MODE;
+	pinfo.mipi.pulse_mode_hsa_he = TRUE;
+	pinfo.mipi.hfp_power_stop = TRUE;
+	pinfo.mipi.hbp_power_stop = TRUE;
+	pinfo.mipi.hsa_power_stop = TRUE;
+	pinfo.mipi.eof_bllp_power_stop = TRUE;
+	pinfo.mipi.bllp_power_stop = TRUE;
+	pinfo.mipi.traffic_mode = DSI_BURST_MODE;
+	pinfo.mipi.dst_format = DSI_VIDEO_DST_FORMAT_RGB888;
+	pinfo.mipi.vc = 0;
+	pinfo.mipi.rgb_swap = DSI_RGB_SWAP_RGB;
+	pinfo.mipi.data_lane0 = TRUE;
+	pinfo.mipi.data_lane1 = TRUE;
+	pinfo.mipi.data_lane2 = TRUE;
+	pinfo.mipi.data_lane3 = TRUE;
+	pinfo.mipi.tx_eot_append = TRUE;
+#if defined(DSI_BIT_CLK_406MHZ)
+	pinfo.mipi.t_clk_post = 0x22;
+	pinfo.mipi.t_clk_pre = 0x3E;
+#elif defined(DSI_BIT_CLK_480MHZ)
+	pinfo.mipi.t_clk_post = 0x01;
+	pinfo.mipi.t_clk_pre = 0x19;
+	/*pinfo.mipi.t_clk_post = 10;
+	pinfo.mipi.t_clk_pre = 30;*/
+#elif defined(DSI_BIT_CLK_500MHZ)
+	/*pinfo.mipi.t_clk_post = 0x01;
+	pinfo.mipi.t_clk_pre = 0x19;*/
+	pinfo.mipi.t_clk_post = 10;
+	pinfo.mipi.t_clk_pre = 30;
+#endif
+	
+	pinfo.mipi.stream = 0; /* dma_p */
+	pinfo.mipi.mdp_trigger = DSI_CMD_TRIGGER_SW;
+	pinfo.mipi.dma_trigger = DSI_CMD_TRIGGER_SW;
+	pinfo.mipi.frame_rate = 55; // khkim 60;
+	pinfo.mipi.dsi_phy_db = &dsi_video_mode_phy_db;
+
+	ret = mipi_sharp_device_register(&pinfo, MIPI_DSI_PRIM,
+						MIPI_DSI_PANEL_WVGA_PT);
+	if (ret)
+		pr_err("%s: failed to register device!\n", __func__);
+
+	return ret;
+}
+
+module_init(mipi_video_sharp_wxga_pt_init);
diff -urN caf/drivers/video/msm/msm_fb.c for-diff/drivers/video/msm/msm_fb.c
--- caf/drivers/video/msm/msm_fb.c	2015-09-08 23:43:59.011167246 +0900
+++ for-diff/drivers/video/msm/msm_fb.c	2015-10-08 21:30:58.700850000 +0900
@@ -49,6 +49,21 @@
 #include "mdp.h"
 #include "mdp4.h"
 
+#include "tps61161_bl.h"
+
+//#define CONFIG_KTTECH_LOGO /* KT Tech 2012.12.06 undefine */
+//#define CONFIG_FB_MSM_LOGO
+
+#ifdef CONFIG_KTTECH_LOGO
+#include "mipi_dsi.h"
+#endif
+
+#ifdef CONFIG_FB_MSM_LOGO
+
+#define INIT_IMAGE_FILE "/initlogo.rle"
+extern int load_565rle_image(char *filename);
+#endif
+
 #ifdef CONFIG_FB_MSM_TRIPLE_BUFFER
 #define MSM_FB_NUM	3
 #endif
@@ -61,7 +76,9 @@
  * pan display on the panel. This is to avoid panel specific
  * transients during resume.
  */
-unsigned long backlight_duration = (HZ/20);
+// KT Tech : Modify BL Duration.
+//unsigned long backlight_duration = (HZ/20);
+unsigned long backlight_duration = 1;
 
 static struct platform_device *pdev_list[MSM_FB_MAX_DEV_LIST];
 static int pdev_list_cnt;
@@ -154,6 +171,126 @@
 }
 #endif
 
+#ifdef CONFIG_KTTECH_LOGO
+// KTT_UPDATE : 
+// DESCRIPTION : PRINT RGB888 RAW DATA IMAGE ( init logo )
+// S=========================================================================
+#include <linux/syscalls.h>
+
+
+#define INIT_IMAGE_FILE "/initlogo.rle"
+#define INIT_IMAGE_WIDTH  470
+#define INIT_IMAGE_HEIGHT 90
+
+#define FTM_IMAGE_FILE "/ftmlogo.raw"
+#define FTM_IMAGE_WIDTH  240
+#define FTM_IMAGE_HEIGHT 320
+
+#define fb_width(fb)	((fb)->var.xres)
+#define fb_height(fb)	((fb)->var.yres)
+#define fb_size(fb)	((fb)->var.xres * (fb)->var.yres * 2)
+
+
+static __u32 msm_fb_line_length(__u32 fb_index, __u32 xres, int bpp);
+
+static int isFirst = 1;
+
+
+static void memset32_io(u32 __iomem *_ptr, u32 val, size_t count)
+{
+	count >>= 2;
+	while (count--)
+		writel(val, _ptr++);
+}
+
+
+static int print_rgb888_image(struct fb_info *fbi, char *filename , int x , int y , int nWidth , int nHeight )
+{
+	int i, j , m , bpp;
+//	int nLine;
+	int fd, count, err = 0;
+	char *data;
+	unsigned char *bits, *ptr;
+
+	if( !fbi ) 
+	{
+		printk(KERN_ERR "%s: Can not access framebuffer\n", __func__);
+		return -ENODEV;
+	}
+
+	fd = sys_open(filename, O_RDONLY, 0);
+	if (fd < 0) 
+	{
+		printk(KERN_ERR "%s: Can not open %s\n", __func__, filename);
+		return -ENOENT;
+	}
+
+//	printk(KERN_ERR "%s: width = %d , height = %d \n", __func__, nWidth , nHeight );
+
+	count = sys_lseek(fd, (off_t)0 , 2);
+
+	if (count <= 0) 
+	{
+		printk(KERN_ERR "%s: Size Error %s\n", __func__, filename);
+		err = -EIO;
+		goto err_logo_close_file;
+	}	
+
+	sys_lseek(fd, (off_t)0 , 0);
+
+	data = kmalloc( count, GFP_KERNEL);
+	
+	if (!data) 
+	{
+		printk(KERN_ERR "%s: Can not alloc data\n", __func__);
+		err = -ENOMEM;
+		goto err_logo_close_file;
+	}
+	
+	if (sys_read(fd, (char *)data, count) != count) 
+	{
+		printk(KERN_ERR "%s: Read Error %s\n",
+			__func__, filename);
+		err = -EIO;
+		goto err_logo_free_data;
+	}
+	
+	i = 0;
+	j = 0;
+	m = 0;
+	bpp = fbi->var.bits_per_pixel / 8;
+
+	memset32_io((void *)fbi->screen_base, 0xFF000000, fbi->fix.smem_len );
+
+	ptr = (unsigned char *)data;
+	for ( i = 0 ; i < nHeight ; i ++ )
+	{
+		bits = (unsigned char *)fbi->screen_base + ( ( x * bpp ) + ( ( y + i ) * fbi->fix.line_length ) );
+
+		for ( j = 0 ; j < nWidth ; j ++ )
+		{
+			*bits++ = *ptr++;
+			*bits++ = *ptr++;
+			*bits++ = *ptr++;    
+			*bits++ = 0xFF;
+		}
+	}
+
+	clean_caches((unsigned long)fbi->screen_base,
+				(unsigned long)fbi->fix.smem_len,
+				(unsigned long)fbi->fix.smem_start);
+
+ 
+err_logo_free_data:
+	kfree(data);
+err_logo_close_file:
+	sys_close(fd);
+	return err;
+}
+#endif
+// E=========================================================================
+
+
 int msm_fb_cursor(struct fb_info *info, struct fb_cursor *cursor)
 {
 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
@@ -419,6 +556,57 @@
 
 	pdev_list[pdev_list_cnt++] = pdev;
 	msm_fb_create_sysfs(pdev);
+
+#ifdef CONFIG_KTTECH_LOGO //for fast lcd update
+	if(isFirst)
+	{
+#ifdef CONFIG_KTTECH_TPS61161_BL
+		tps61161_set_bl_native( 0 );
+#endif
+
+		mfd->cont_splash_done = 1;
+
+		//mipi_dsi_phy_ctrl( 0 );
+		//msleep(100);
+
+		if(!msm_fb_open(mfd->fbi, 0))
+		{
+			if(get_kttech_ftm_mode() == NORMAL_MODE) 
+				print_rgb888_image(mfd->fbi,
+								FTM_IMAGE_FILE , 
+								( mfd->var_xres/2) - ( FTM_IMAGE_WIDTH/2 ), 
+								( mfd->var_yres/2)-( FTM_IMAGE_HEIGHT/2 ), 
+								FTM_IMAGE_WIDTH,
+								FTM_IMAGE_HEIGHT );
+			else 
+				print_rgb888_image(mfd->fbi,
+								INIT_IMAGE_FILE,
+								( mfd->var_xres/2) - ( INIT_IMAGE_WIDTH/2 ),
+								( mfd->var_yres/2)-( INIT_IMAGE_HEIGHT/2 ),
+								INIT_IMAGE_WIDTH,
+								INIT_IMAGE_HEIGHT );
+
+			// ADD KTTECH : goldhand ( 2012/3/13 ) 
+			mdp4_dsi_video_overlay( mfd );
+		}
+		else {
+			if(get_kttech_ftm_mode() == NORMAL_MODE) 
+				printk(KERN_ERR "%s : Init loge Raw Image File(%s) Open Fail\n", __func__ , FTM_IMAGE_FILE );
+			else
+				printk(KERN_ERR "%s : Init loge Raw Image File(%s) Open Fail\n", __func__ , INIT_IMAGE_FILE );
+		}
+		isFirst = 0;  	    
+	}
+
+#ifdef CONFIG_KTTECH_TPS61161_BL
+	if ( get_kttech_hw_version() >= ES2_HW_VER )
+		tps61161_set_bl_native( 120 );
+	else
+		tps61161_set_bl_native( 17 );
+#endif
+
+#endif
+
 	return 0;
 }
 
@@ -813,7 +1001,15 @@
 	int curr_bl;
 	down(&mfd->sem);
 	curr_bl = mfd->bl_level;
-	bl_scale = data->scale;
+	// KT Tech :  Fixed Bug - BL Scale
+	if (data->scale > 1024) {
+		pr_info("%s:[BL] Correct Scale, update scale = 1024(%d), min_lvl = %d\n", __func__, data->scale,
+									bl_min_lvl);
+		bl_scale = 1024;
+	}
+	else
+		bl_scale = data->scale;
+
 	bl_min_lvl = data->min_lvl;
 	pr_debug("%s: update scale = %d, min_lvl = %d\n", __func__, bl_scale,
 								bl_min_lvl);
@@ -848,7 +1044,13 @@
 	struct msm_fb_panel_data *pdata;
 	__u32 temp = bkl_lvl;
 	if (!mfd->panel_power_on || !bl_updated) {
-		unset_bl_level = bkl_lvl;
+		// KT Tech : Debug - BL
+		pr_info("%s:[BL] Unset, unset_lvl = %d, blk_lvl = %d, panel_pwr = %d, bl_up = %d\n",
+			__func__,unset_bl_level, bkl_lvl, mfd->panel_power_on, bl_updated);
+
+		if (bkl_lvl)
+			unset_bl_level = bkl_lvl;
+
 		return;
 	} else {
 		unset_bl_level = 0;
@@ -859,6 +1061,8 @@
 	if ((pdata) && (pdata->set_backlight)) {
 		msm_fb_scale_bl(&temp);
 		if (bl_level_old == temp) {
+			// KT Tech :  Debug - BL Scale
+			pr_info("%s:[BL] Skip, old_lvl = %d, blk_lvl = %d\n", __func__, bl_level_old, bkl_lvl);
 			return;
 		}
 		mfd->bl_level = temp;
@@ -1445,10 +1649,23 @@
 
 	/* cursor memory allocation */
 	if (mfd->cursor_update) {
+		unsigned long cursor_buf_iommu = 0;
 		mfd->cursor_buf = dma_alloc_coherent(NULL,
 					MDP_CURSOR_SIZE,
 					(dma_addr_t *) &mfd->cursor_buf_phys,
 					GFP_KERNEL);
+
+		// KT Tech : Add iommu mapping for mdp cursor buffer address.
+		msm_iommu_map_contig_buffer((unsigned long)mfd->cursor_buf_phys,
+									DISPLAY_READ_DOMAIN,
+									GEN_POOL,
+									MDP_CURSOR_SIZE,
+									SZ_4K,
+									0,
+									&cursor_buf_iommu);
+		if (cursor_buf_iommu)
+				mfd->cursor_buf_phys = (void *)cursor_buf_iommu;
+
 		if (!mfd->cursor_buf)
 			mfd->cursor_update = 0;
 	}
@@ -1697,6 +1914,9 @@
 	struct msm_fb_panel_data *pdata = mfd->pdev->dev.platform_data;
 
 	if ((pdata) && (pdata->set_backlight) && (!bl_updated)) {
+		// KT Tech :  Debug - BL Scale
+		pr_info("%s:[BL] Set, old_lvl = %d, unset_lvl = %d\n", __func__, bl_level_old, unset_bl_level);
+
 		down(&mfd->sem);
 		mfd->bl_level = unset_bl_level;
 		pdata->set_backlight(mfd);
diff -urN caf/drivers/video/msm/tps61161_bl.c for-diff/drivers/video/msm/tps61161_bl.c
--- caf/drivers/video/msm/tps61161_bl.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/tps61161_bl.c	2015-10-08 21:30:58.756850000 +0900
@@ -0,0 +1,205 @@
+/*
+ * aat2862_bl_ctrl.c - Backlignt control chip
+ *
+ * Copyright (C) 2010 KT Tech
+ * 
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/miscdevice.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/workqueue.h>
+#include <linux/mutex.h>
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <mach/gpio.h>
+#include <linux/input.h>
+#include <linux/slab.h>
+#include <asm/uaccess.h>
+#include <mach/pmic.h>
+#include <linux/mfd/pm8xxx/pm8921.h>
+
+#include "msm_fb.h"
+#include "tps61161_easyscale_bl.h"
+
+#ifdef CONFIG_KTTECH_TPS61161_PWM_BL
+#include "tps61161_pwm_bl.h"
+#endif
+
+void tps61161_set_bl_native(__u32 lcd_backlight_level)
+{
+#ifdef CONFIG_KTTECH_TPS61161_PWM_BL
+  if ( 1 ) //get_kttech_hw_version() >= ES2_HW_VER )
+  {
+    tps61161_set_bl_native_pwm( lcd_backlight_level );
+  }
+  else
+#endif
+  {
+    tps61161_set_bl_native_easyscale( lcd_backlight_level );
+  }
+
+/*
+	int i, bit_coding;
+	unsigned long flags;
+	
+	printk(KERN_DEBUG "###### tps61161_set_bl_native : %d \n", lcd_backlight_level);
+
+	mutex_lock(&tps6116_bl);
+	
+	if(lcd_backlight_level == 0) {
+		spin_lock_irqsave(&tps61161_spin_lock, flags);
+#ifdef 	__KTTECH_BL_USE_PM_GPIO__	
+		gpio_set_value_cansleep(BL_ON_GPIO, 0);
+#else
+		gpio_set_value(BL_ON_GPIO, 0);
+#endif
+		enter_easyscale_set = 0;
+		spin_unlock_irqrestore(&tps61161_spin_lock, flags);
+		msleep(3);	
+	}
+	else {
+		spin_lock_irqsave(&tps61161_spin_lock, flags);
+		if (enter_easyscale_set == 0) {
+			EASYSCALE_MODE_SET();
+    		spin_unlock_irqrestore(&tps61161_spin_lock, flags);
+          	msleep(1);
+    		spin_lock_irqsave(&tps61161_spin_lock, flags);
+		}
+
+		T_START();
+
+		tps61161_set_device_id();
+
+		T_EOS();	
+
+		T_START();
+
+		LOW_BIT();  // 0 Request for Ack
+		LOW_BIT();  // 0 Address bit 1
+		LOW_BIT();  // 0 Address bit 0
+
+		for(i = BL_DIMING_DATA_CNT; i >= 0; i--)
+		{
+			bit_coding = ((lcd_backlight_level >> i) & 0x1); // (lcd_backlight_level & (2 ^ i));
+
+			if(bit_coding) {
+				HIGH_BIT(); // Data High
+			} else {
+				LOW_BIT();  // Data Low
+			}
+		}
+
+		T_EOS();
+		STATIC_HIGH();
+		enter_easyscale_set = 1;
+		udelay(500);//udelay(100); 
+		spin_unlock_irqrestore(&tps61161_spin_lock, flags);
+	}
+    mutex_unlock(&tps6116_bl);
+*/    
+}
+
+EXPORT_SYMBOL(tps61161_set_bl_native);
+
+void tps61161_set_bl(struct msm_fb_data_type *mfd)
+{
+//	tps61161_set_bl_native(mfd->bl_level);
+#ifdef CONFIG_KTTECH_TPS61161_PWM_BL
+  if ( 1 ) //get_kttech_hw_version() >= ES2_HW_VER )
+  {
+    tps61161_set_bl_native_pwm( mfd->bl_level );
+  }
+  else
+#endif
+  {
+    tps61161_set_bl_native_easyscale( mfd->bl_level );
+  }
+}
+
+EXPORT_SYMBOL(tps61161_set_bl);
+
+static int __init tps61161_init(void)
+{
+#ifdef CONFIG_KTTECH_TPS61161_PWM_BL
+  if ( 1 ) //get_kttech_hw_version() >= ES2_HW_VER )
+  {
+    return tps61161_init_pwm();
+  }
+  else
+#endif
+  {
+    return tps61161_init_easyscale();
+  }
+
+/*
+	int rc = 0;
+
+#ifdef __KTTECH_BL_USE_PM_GPIO__
+	struct pm_gpio blonio_param = {
+		.direction = PM_GPIO_DIR_OUT,
+		.output_buffer = PM_GPIO_OUT_BUF_CMOS,
+		.output_value = 0,
+		.pull = PM_GPIO_PULL_NO,
+		.vin_sel = 2,
+		.out_strength = PM_GPIO_STRENGTH_HIGH,
+		.function = PM_GPIO_FUNC_NORMAL,
+		.inv_int_pol = 0,
+		.disable_pin = 0,
+	};
+#endif
+
+	printk("### %s, gpio request... bl gpio=%d\n", __func__, BL_ON_GPIO);
+
+	rc += gpio_request(BL_ON_GPIO, "tps61161_init");
+	if (rc) {
+		pr_err("### BL_ON_GPIO failed (3), rc=%d\n", rc);
+		return -EINVAL;
+	}
+	
+#ifdef __KTTECH_BL_USE_PM_GPIO__
+	rc = pm8xxx_gpio_config(BL_ON_GPIO, &blonio_param);
+	pr_err("### tps pm8xx gpio config. ret=%d \n", rc);
+#else
+	rc += gpio_tlmm_config(GPIO_CFG(BL_ON_GPIO, 0, GPIO_CFG_OUTPUT, GPIO_CFG_PULL_UP, GPIO_CFG_8MA), GPIO_CFG_ENABLE);	
+	rc += gpio_direction_output(BL_ON_GPIO, 1);	
+#endif	
+	mutex_init(&tps6116_bl);
+	spin_lock_init(&tps61161_spin_lock);
+
+	if(!rc) 
+		printk("LCD Backlight Controller Initialized.\n");
+		
+	return rc;
+*/
+
+}
+
+static void __exit tps61161_exit(void)
+{
+//	gpio_free(BL_ON_GPIO);
+#ifdef CONFIG_KTTECH_TPS61161_PWM_BL
+  if ( 1 ) //get_kttech_hw_version() >= ES2_HW_VER )
+  {
+    return tps61161_exit_pwm();
+  }
+  else
+#endif
+  {
+    return tps61161_exit_easyscale();
+  }
+}
+
+module_init(tps61161_init);
+module_exit(tps61161_exit);
+
diff -urN caf/drivers/video/msm/tps61161_bl.h for-diff/drivers/video/msm/tps61161_bl.h
--- caf/drivers/video/msm/tps61161_bl.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/tps61161_bl.h	2015-10-08 21:30:48.124850000 +0900
@@ -0,0 +1,15 @@
+#ifndef TPS61161_BL_CTRL_KTTECH_H
+#define TPS61161_BL_CTRL_KTTECH_H
+
+#include "tps61161_pwm_bl.h"
+#include "tps61161_easyscale_bl.h"
+
+/*===========================================================================
+  FUNCTIONS PROTOTYPES
+============================================================================*/
+void tps61161_set_bl_native(__u32 lcd_backlight_level);
+void tps61161_set_bl(struct msm_fb_data_type *mfd);
+
+
+#endif /* TPS61161_BL_CTRL_KTTECH_H */
+
diff -urN caf/drivers/video/msm/tps61161_easyscale_bl.c for-diff/drivers/video/msm/tps61161_easyscale_bl.c
--- caf/drivers/video/msm/tps61161_easyscale_bl.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/tps61161_easyscale_bl.c	2015-10-08 21:30:58.760850000 +0900
@@ -0,0 +1,295 @@
+/*
+ * aat2862_bl_ctrl.c - Backlignt control chip
+ *
+ * Copyright (C) 2010 KT Tech
+ * 
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/miscdevice.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/workqueue.h>
+#include <linux/mutex.h>
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <mach/gpio.h>
+#include <linux/input.h>
+#include <linux/slab.h>
+#include <asm/uaccess.h>
+#include <mach/pmic.h>
+#include <linux/mfd/pm8xxx/pm8921.h>
+#include <linux/board_kttech.h>
+
+#include "msm_fb.h"
+#include "tps61161_easyscale_bl.h"
+
+
+#define BL_DIMING_DATA_CNT	4
+#define BL_DELAY_1		2
+#define BL_DELAY_2		(BL_DELAY_1 << 1)
+
+
+#ifdef CONFIG_KTTECH_TARGET_O7_WS1_KCONFIG
+#define __KTTECH_BL_USE_PM_GPIO__
+#endif
+
+
+#ifdef __KTTECH_BL_USE_PM_GPIO__
+
+/* Macros assume PMIC GPIOs and MPPs start at 1 */
+#define PM8921_GPIO_BASE		NR_GPIO_IRQS
+#define PM8921_GPIO_PM_TO_SYS(pm_gpio)	(pm_gpio - 1 + PM8921_GPIO_BASE)
+#define PM8921_MPP_BASE			(PM8921_GPIO_BASE + PM8921_NR_GPIOS)
+#define PM8921_MPP_PM_TO_SYS(pm_gpio)	(pm_gpio - 1 + PM8921_MPP_BASE)
+#define PM8921_IRQ_BASE			(NR_MSM_IRQS + NR_GPIO_IRQS)
+#define PM8921_MPP_IRQ_BASE		(PM8921_IRQ_BASE + NR_GPIO_IRQS)
+
+//EasyScale mode setting
+#define EASYSCALE_MODE_SET()		\
+{ 					\
+	gpio_set_value_cansleep(BL_ON_GPIO, 1);	\
+	udelay(100);			\
+	gpio_set_value_cansleep(BL_ON_GPIO, 0); 	\
+	udelay(280);			\
+	gpio_set_value_cansleep(BL_ON_GPIO, 1);	\
+}
+
+#define HIGH_BIT()			\
+{					\
+	gpio_set_value_cansleep(BL_ON_GPIO, 0);	\
+	udelay(BL_DELAY_1);		\
+	gpio_set_value_cansleep(BL_ON_GPIO, 1);	\
+	udelay(BL_DELAY_2);		\
+}
+
+#define LOW_BIT() 			\
+{ 					\
+	gpio_set_value_cansleep(BL_ON_GPIO, 0);	\
+	udelay(BL_DELAY_2);		\
+	gpio_set_value_cansleep(BL_ON_GPIO, 1);	\
+	udelay(BL_DELAY_1);		\
+}
+
+#define T_START()			\
+{					\
+	gpio_set_value_cansleep(BL_ON_GPIO, 1);	\
+	udelay(BL_DELAY_2);		\
+}
+
+#define T_EOS()   			\
+{ 					\
+	gpio_set_value_cansleep(BL_ON_GPIO, 0);	\
+	udelay(BL_DELAY_2);		\
+}
+
+#define STATIC_HIGH()			\
+{					\
+	gpio_set_value_cansleep(BL_ON_GPIO, 1);	\
+}
+
+#else /* __KTTECH_BL_USE_PM_GPIO__ */
+
+//EasyScale mode setting
+#define EASYSCALE_MODE_SET()		\
+{ 					\
+	gpio_set_value(BL_ON_GPIO, 1);	\
+	udelay(100);			\
+	gpio_set_value(BL_ON_GPIO, 0); 	\
+	udelay(280);			\
+	gpio_set_value(BL_ON_GPIO, 1);	\
+}
+
+#define HIGH_BIT()			\
+{					\
+	gpio_set_value(BL_ON_GPIO, 0);	\
+	udelay(BL_DELAY_1);		\
+	gpio_set_value(BL_ON_GPIO, 1);	\
+	udelay(BL_DELAY_2);		\
+}
+
+#define LOW_BIT() 			\
+{ 					\
+	gpio_set_value(BL_ON_GPIO, 0);	\
+	udelay(BL_DELAY_2);		\
+	gpio_set_value(BL_ON_GPIO, 1);	\
+	udelay(BL_DELAY_1);		\
+}
+
+#define T_START()			\
+{					\
+	gpio_set_value(BL_ON_GPIO, 1);	\
+	udelay(BL_DELAY_2);		\
+}
+
+#define T_EOS()   			\
+{ 					\
+	gpio_set_value(BL_ON_GPIO, 0);	\
+	udelay(BL_DELAY_2);		\
+}
+
+#define STATIC_HIGH()			\
+{					\
+	gpio_set_value(BL_ON_GPIO, 1);	\
+}
+
+#endif /* __KTTECH_BL_USE_PM_GPIO__ */
+
+// Device Address : 0x72
+#define TPS61161_DEVICE_ID()		\
+{ 					\
+	LOW_BIT();			\
+	HIGH_BIT();			\
+	HIGH_BIT();			\
+	HIGH_BIT();			\
+	LOW_BIT();			\
+	LOW_BIT();			\
+	HIGH_BIT();			\
+	LOW_BIT();			\
+}
+
+
+static int enter_easyscale_set = 0;
+DEFINE_MUTEX(tps6116_bl);
+spinlock_t tps61161_spin_lock;
+
+static void tps61161_set_device_id(void)
+{
+	TPS61161_DEVICE_ID(); // Device Address : 0x72
+	T_EOS();
+}
+
+void tps61161_set_bl_native_easyscale(int lcd_backlight_level)
+{
+	int i, bit_coding;
+	unsigned long flags;
+	
+	printk(KERN_DEBUG "###### tps61161_set_bl_native : %d \n", lcd_backlight_level);
+
+	mutex_lock(&tps6116_bl);
+	
+	if(lcd_backlight_level == 0) {
+		spin_lock_irqsave(&tps61161_spin_lock, flags);
+#ifdef 	__KTTECH_BL_USE_PM_GPIO__	
+		gpio_set_value_cansleep(BL_ON_GPIO, 0);
+#else
+		gpio_set_value(BL_ON_GPIO, 0);
+#endif
+		enter_easyscale_set = 0;
+		spin_unlock_irqrestore(&tps61161_spin_lock, flags);
+		msleep(3);	
+	}
+	else {
+		spin_lock_irqsave(&tps61161_spin_lock, flags);
+		if (enter_easyscale_set == 0) {
+			EASYSCALE_MODE_SET();
+    		spin_unlock_irqrestore(&tps61161_spin_lock, flags);
+          	msleep(1);
+    		spin_lock_irqsave(&tps61161_spin_lock, flags);
+		}
+
+		T_START();
+
+		tps61161_set_device_id();
+
+		T_EOS();	
+
+		T_START();
+
+		LOW_BIT();  // 0 Request for Ack
+		LOW_BIT();  // 0 Address bit 1
+		LOW_BIT();  // 0 Address bit 0
+
+		for(i = BL_DIMING_DATA_CNT; i >= 0; i--)
+		{
+			bit_coding = ((lcd_backlight_level >> i) & 0x1); // (lcd_backlight_level & (2 ^ i));
+
+			if(bit_coding) {
+				HIGH_BIT(); // Data High
+			} else {
+				LOW_BIT();  // Data Low
+			}
+		}
+
+		T_EOS();
+		STATIC_HIGH();
+		enter_easyscale_set = 1;
+		udelay(500);//udelay(100); /* This is to remove debounce when the backlight level change... edit by jake */
+		spin_unlock_irqrestore(&tps61161_spin_lock, flags);
+	}
+    mutex_unlock(&tps6116_bl);
+}
+
+EXPORT_SYMBOL(tps61161_set_bl_native_easyscale);
+
+//void tps61161_set_bl_easyscale(struct msm_fb_data_type *mfd)
+//{
+//	tps61161_set_bl_native_easyscale(mfd->bl_level);
+//}
+
+//EXPORT_SYMBOL(tps61161_set_bl_easyscale);
+
+int tps61161_init_easyscale(void)
+{
+	int rc = 0;
+
+#ifdef __KTTECH_BL_USE_PM_GPIO__
+	struct pm_gpio blonio_param = {
+		.direction = PM_GPIO_DIR_OUT,
+		.output_buffer = PM_GPIO_OUT_BUF_CMOS,
+		.output_value = 0,
+		.pull = PM_GPIO_PULL_NO,
+		.vin_sel = 2,
+		.out_strength = PM_GPIO_STRENGTH_HIGH,
+		.function = PM_GPIO_FUNC_NORMAL,
+		.inv_int_pol = 0,
+		.disable_pin = 0,
+	};
+#endif
+
+	printk("### %s, gpio request... bl gpio=%d\n", __func__, BL_ON_GPIO);
+
+	rc += gpio_request(BL_ON_GPIO, "tps61161_init");
+	if (rc) {
+		pr_err("### BL_ON_GPIO failed (3), rc=%d\n", rc);
+		return -EINVAL;
+	}
+	
+#ifdef __KTTECH_BL_USE_PM_GPIO__
+	rc = pm8xxx_gpio_config(BL_ON_GPIO, &blonio_param);
+	pr_err("### tps pm8xx gpio config. ret=%d \n", rc);
+#else
+	rc += gpio_tlmm_config(GPIO_CFG(BL_ON_GPIO, 0, GPIO_CFG_OUTPUT, GPIO_CFG_PULL_UP, GPIO_CFG_8MA), GPIO_CFG_ENABLE);	
+	rc += gpio_direction_output(BL_ON_GPIO, 1);	
+#endif	
+	mutex_init(&tps6116_bl);
+	spin_lock_init(&tps61161_spin_lock);
+
+	if(!rc) 
+		printk("LCD Backlight Controller Initialized.\n");
+		
+	return rc;
+}
+
+EXPORT_SYMBOL(tps61161_init_easyscale);
+
+void tps61161_exit_easyscale(void)
+{
+	gpio_free(BL_ON_GPIO);
+}
+
+EXPORT_SYMBOL(tps61161_exit_easyscale);
+
+
+//module_init(tps61161_init);
+//module_exit(tps61161_exit);
+
diff -urN caf/drivers/video/msm/tps61161_easyscale_bl.h for-diff/drivers/video/msm/tps61161_easyscale_bl.h
--- caf/drivers/video/msm/tps61161_easyscale_bl.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/tps61161_easyscale_bl.h	2015-10-08 21:30:48.128850000 +0900
@@ -0,0 +1,51 @@
+#ifndef TPS61161_BL_EASYSCALE_CTRL_KTTECH_H
+#define TPS61161_BL_EASYSCALE_CTRL_KTTECH_H
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/mm.h>
+#include <linux/fb.h>
+#include <linux/msm_mdp.h>
+#include <linux/init.h>
+#include <linux/ioport.h>
+#include <linux/device.h>
+#include <linux/dma-mapping.h>
+#include <linux/uaccess.h>
+#include <linux/workqueue.h>
+#include <linux/string.h>
+#include <linux/version.h>
+#include <linux/proc_fs.h>
+#include <linux/vmalloc.h>
+#include <linux/debugfs.h>
+#include <linux/console.h>
+#include <linux/android_pmem.h>
+
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/time.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include "linux/proc_fs.h"
+#include <mach/hardware.h>
+#include <linux/io.h>
+#include <linux/fb.h>
+#include <asm/system.h>
+#include <asm/mach-types.h>
+#include <linux/platform_device.h>
+
+#include <linux/board_kttech.h>
+
+/*===========================================================================
+  FUNCTIONS PROTOTYPES
+============================================================================*/
+//void tps61161_set_bl_easyscale(struct msm_fb_data_type *mfd);
+void tps61161_set_bl_native_easyscale(int lcd_backlight_level);
+
+int tps61161_init_easyscale(void);
+void tps61161_exit_easyscale(void);
+
+#endif /* TPS61161_BL_EASYSCALE_CTRL_KTTECH_H */
+
diff -urN caf/drivers/video/msm/tps61161_pwm_bl.c for-diff/drivers/video/msm/tps61161_pwm_bl.c
--- caf/drivers/video/msm/tps61161_pwm_bl.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/tps61161_pwm_bl.c	2015-10-08 21:30:58.764850000 +0900
@@ -0,0 +1,70 @@
+#include "msm_fb.h"
+
+#include <linux/pwm.h>
+#include <linux/mfd/pm8xxx/pm8921.h>
+#include <linux/board_kttech.h>
+
+#include "tps61161_pwm_bl.h"
+
+static struct pwm_device *bl_lpm;
+
+#ifdef CONFIG_KTTECH_PWM_NANO_SEC_CTRL
+extern int pwm_config_nsec_ctrl(struct pwm_device *pwm, int duty_ns, int period_ns);
+#endif
+
+void tps61161_set_bl_native_pwm (__u32 lcd_backlight_level)
+{
+	int ret;
+
+	pr_debug("###### %s : %d \n", __func__, lcd_backlight_level);
+
+	if (bl_lpm) {
+#ifdef CONFIG_KTTECH_PWM_NANO_SEC_CTRL	
+		ret = pwm_config_nsec_ctrl(bl_lpm, TPS61161_BL_PWM_DUTY_LEVEL *
+			lcd_backlight_level , TPS61161_BL_PWM_PERIOD_NSEC);
+#else
+		ret = pwm_config(bl_lpm, TPS61161_BL_PWM_DUTY_LEVEL *
+			lcd_backlight_level , TPS61161_BL_PWM_PERIOD_USEC);
+#endif
+		if (ret) {
+			pr_err("pwm_config on lpm failed %d\n", ret);
+			return;
+		}
+		if (lcd_backlight_level) {
+			ret = pwm_enable(bl_lpm);
+			if (ret)
+				pr_err("pwm enable/disable on lpm failed"
+					"for bl %d\n",	lcd_backlight_level );
+		} else {
+			pwm_disable(bl_lpm);
+		}
+	}
+}
+
+EXPORT_SYMBOL(tps61161_set_bl_native_pwm);
+
+
+int tps61161_init_pwm( void )
+{  
+	bl_lpm = pwm_request( TPS61161_PWM_LPM_CHANNEL , "backlight");
+
+	if (bl_lpm == NULL || IS_ERR(bl_lpm)) {
+		pr_err("%s pwm_request() failed\n", __func__);
+		bl_lpm = NULL;
+		return -1;
+	}
+
+  return 0;
+}
+EXPORT_SYMBOL(tps61161_init_pwm);
+
+
+void tps61161_exit_pwm(void)
+{
+
+}
+
+EXPORT_SYMBOL(tps61161_exit_pwm);
+
+
+
diff -urN caf/drivers/video/msm/tps61161_pwm_bl.h for-diff/drivers/video/msm/tps61161_pwm_bl.h
--- caf/drivers/video/msm/tps61161_pwm_bl.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/drivers/video/msm/tps61161_pwm_bl.h	2015-10-08 21:30:48.128850000 +0900
@@ -0,0 +1,66 @@
+#ifndef TPS61161_BL_PWM_CTRL_KTTECH_H
+#define TPS61161_BL_PWM_CTRL_KTTECH_H
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/mm.h>
+#include <linux/fb.h>
+#include <linux/msm_mdp.h>
+#include <linux/init.h>
+#include <linux/ioport.h>
+#include <linux/device.h>
+#include <linux/dma-mapping.h>
+#include <linux/uaccess.h>
+#include <linux/workqueue.h>
+#include <linux/string.h>
+#include <linux/version.h>
+#include <linux/proc_fs.h>
+#include <linux/vmalloc.h>
+#include <linux/debugfs.h>
+#include <linux/console.h>
+#include <linux/android_pmem.h>
+
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/time.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include "linux/proc_fs.h"
+#include <mach/hardware.h>
+#include <linux/io.h>
+#include <linux/fb.h>
+#include <asm/system.h>
+#include <asm/mach-types.h>
+#include <linux/platform_device.h>
+
+#include <linux/board_kttech.h>
+
+/*===========================================================================
+  FUNCTIONS PROTOTYPES
+============================================================================*/
+
+#ifdef CONFIG_KTTECH_PWM_NANO_SEC_CTRL
+#define TPS61161_BL_PWM_FREQ_HZ 20000
+#define TPS61161_BL_PWM_PERIOD_NSEC (NSEC_PER_SEC / TPS61161_BL_PWM_FREQ_HZ)
+#define TPS61161_BL_PWM_LEVEL 255
+#define TPS61161_BL_PWM_DUTY_LEVEL \
+	(TPS61161_BL_PWM_PERIOD_NSEC / TPS61161_BL_PWM_LEVEL)
+#else
+#define TPS61161_BL_PWM_FREQ_HZ 7874
+#define TPS61161_BL_PWM_PERIOD_USEC (USEC_PER_SEC / TPS61161_BL_PWM_FREQ_HZ)
+#define TPS61161_BL_PWM_LEVEL 127
+#define TPS61161_BL_PWM_DUTY_LEVEL \
+	(TPS61161_BL_PWM_PERIOD_USEC / TPS61161_BL_PWM_LEVEL)
+#endif
+
+void tps61161_set_bl_native_pwm(__u32 lcd_backlight_level);
+//void tps61161_set_bl_native_easyscale(int lcd_backlight_level);
+int tps61161_init_pwm(void);
+void tps61161_exit_pwm(void);
+
+
+#endif /* TPS61161_BL_PWM_CTRL_KTTECH_H */
+
diff -urN caf/include/linux/board_kttech.h for-diff/include/linux/board_kttech.h
--- caf/include/linux/board_kttech.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/include/linux/board_kttech.h	2015-09-13 14:03:15.377922000 +0900
@@ -0,0 +1,20 @@
+/* kernel/include/linux/board_kttech.h
+ * Copyright (C) 2007-2012 KTTech Corporation.
+ * Author:  <hyunkuk007@kttech.co.kr>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+*/
+#ifndef _BOARD_KTTECH_H_
+#define _BOARD_KTTECH_H_
+
+#include "board_kttech_o7.h"
+
+#endif /* _BOARD_KTTECH_H_ */
+
diff -urN caf/include/linux/board_kttech_o7.h for-diff/include/linux/board_kttech_o7.h
--- caf/include/linux/board_kttech_o7.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/include/linux/board_kttech_o7.h	2015-09-13 14:03:15.377922000 +0900
@@ -0,0 +1,70 @@
+/* kernel/include/linux/board_kttech_o7.h
+ * Copyright (C) 2007-2012 KTTech Corporation.
+ * Author:  <hyunkuk007@kttech.co.kr>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+*/
+#ifndef _BOARD_KTTECH_O7_H_
+#define _BOARD_KTTECH_O7_H_
+
+//-----------------------------------------------------------------------------
+// 1. GPIO
+//-----------------------------------------------------------------------------
+
+// Backlight
+#define TPS61161_PWM_LPM_CHANNEL 0                    // case pwm type 
+#if defined(CONFIG_KTTECH_TARGET_O7_WS1_KCONFIG)
+#define BL_ON_GPIO       (PM8921_GPIO_PM_TO_SYS(24))  // case easyscale type 
+#else
+#define BL_ON_GPIO       (69)
+#endif
+
+
+#define LCD_RESET_GPIO   (PM8921_GPIO_PM_TO_SYS(43))
+
+// Camera
+#define CAM1_RST_N		107
+#define CAM2_RST_N		76
+#define CAM_5M_EN			58
+#define TORCH_ENABLE		3
+#define FLASH_ENABLE		63
+
+//TSP
+#define TSP_3_3V_EN				51
+#define MELFAS_TSP_SDA			16
+#define MELFAS_TSP_SCL			17
+
+//-----------------------------------------------------------------------------
+// 2. Interrupt
+//-----------------------------------------------------------------------------
+//TSP
+#define MELFAS_TSP_INT			11
+
+//-----------------------------------------------------------------------------
+// 3. VREG
+//-----------------------------------------------------------------------------
+
+
+//-----------------------------------------------------------------------------
+// 4. I2C bus id
+//-----------------------------------------------------------------------------
+
+
+//-----------------------------------------------------------------------------
+// 5. USB
+//-----------------------------------------------------------------------------
+
+
+//-----------------------------------------------------------------------------
+// 6. Others
+//-----------------------------------------------------------------------------
+
+
+#endif /* _BOARD_KTTECH_O7_H_ */
diff -urN caf/include/linux/kttgenmod.h for-diff/include/linux/kttgenmod.h
--- caf/include/linux/kttgenmod.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/include/linux/kttgenmod.h	2015-09-13 14:03:15.421922000 +0900
@@ -0,0 +1,15 @@
+#ifndef __KTTMODH__
+#define __KTTMODH__
+
+typedef enum {
+   DEVICE_SPI = 0x1,
+} kttgenmod_device_t;
+
+uint get_msmchip_id(void);
+uint get_msmchip_ver(void);
+
+void kttgenmod_set_device(kttgenmod_device_t device);
+void kttgenmod_clear_device(kttgenmod_device_t device);
+
+#endif
+
diff -urN caf/include/linux/leds-pm8xxx.h for-diff/include/linux/leds-pm8xxx.h
--- caf/include/linux/leds-pm8xxx.h	2015-09-08 23:44:04.463167350 +0900
+++ for-diff/include/linux/leds-pm8xxx.h	2015-09-13 14:03:15.425922000 +0900
@@ -132,4 +132,11 @@
 	struct	pm8xxx_led_config	*configs;
 	u32				num_configs;
 };
+
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* implement camera flash led by PMIC */
+#ifdef CONFIG_KTTECH_FLASH_PMIC
+int pm8xxx_led_kp_set(int value);
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 #endif /* __LEDS_PM8XXX_H__ */
diff -urN caf/include/linux/mfd/pm8xxx/pm8921-charger.h for-diff/include/linux/mfd/pm8xxx/pm8921-charger.h
--- caf/include/linux/mfd/pm8xxx/pm8921-charger.h	2015-09-08 23:44:04.471167351 +0900
+++ for-diff/include/linux/mfd/pm8xxx/pm8921-charger.h	2015-09-13 14:03:15.429922000 +0900
@@ -198,6 +198,15 @@
  */
 int pm8921_is_battery_present(void);
 
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+/**
+ * pm8921_update_battery_status_force -
+ *
+ * update battery status forcefully
+ */
+int pm8921_update_battery_status_force(void);
+#endif
+
 /**
  * pm8921_set_max_battery_charge_current - set max battery chg current
  *
@@ -317,6 +326,14 @@
 {
 	return -ENXIO;
 }
+
+#ifdef CONFIG_KTTECH_BATTERY_GAUGE_MAXIM
+static inline int pm8921_update_battery_status_force(void)
+{
+	return -ENXIO;
+}
+#endif
+
 static inline int pm8917_set_under_voltage_detection_threshold(int mv)
 {
 	return -ENXIO;
diff -urN caf/include/linux/nfc/pn544-kttech.h for-diff/include/linux/nfc/pn544-kttech.h
--- caf/include/linux/nfc/pn544-kttech.h	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/include/linux/nfc/pn544-kttech.h	2015-09-13 14:03:15.457922000 +0900
@@ -0,0 +1,38 @@
+/****************************************************************************
+ ****************************************************************************
+ ***
+ ***   This header was automatically generated from a Linux kernel header
+ ***   of the same name, to make information necessary for userspace to
+ ***   call into the kernel available to libc.  It contains only constants,
+ ***   structures, and macros generated from the original header, and thus,
+ ***   contains no copyrightable information.
+ ***
+ ****************************************************************************
+ ****************************************************************************/
+// KTT_UPDATE : FEATURE_KTTECH_NFC
+// modify : kkong120215
+// description : 
+// S=====================================================================
+// E=====================================================================
+
+#define NFC_USE_MSM_XO
+#define PN544_MAGIC 0xE9
+
+#define PN544_SET_PWR _IOW(0xE9, 0x01, unsigned int)
+
+// KTT_UPDATE : FEATURE_KTTECH_NFC
+// modify : kkong120229, kkong120322
+// description : 
+// S=====================================================================
+#define KTTECH_PN544_COMMAND _IOW(PN544_MAGIC, 0x05, unsigned int)
+// E=====================================================================
+
+struct pn544_i2c_platform_data {
+  unsigned int irq_gpio;
+  unsigned int ven_gpio;
+  unsigned int firm_gpio;
+  int (*setup_power) (struct device *dev);
+  void (*shutdown_power) (struct device *dev);
+  int (*setup_gpio) (int enable);
+};
+
diff -urN caf/include/linux/ppp_defs.h for-diff/include/linux/ppp_defs.h
--- caf/include/linux/ppp_defs.h	2015-09-08 23:44:05.607167372 +0900
+++ for-diff/include/linux/ppp_defs.h	2015-09-13 14:03:15.469922000 +0900
@@ -14,7 +14,8 @@
 
 /*
  * The basic PPP frame.
- */
+ */ 
+#define	PPP_MTU		1500	/* Default MTU (size of Info field) */
 #define PPP_HDRLEN	4	/* octets for standard ppp header */
 #define PPP_FCSLEN	2	/* octets for FCS */
 #define PPP_MRU		1500	/* default MRU = max length of info field */
diff -urN caf/include/media/msm_camera.h for-diff/include/media/msm_camera.h
--- caf/include/media/msm_camera.h	2015-09-08 23:44:05.635167373 +0900
+++ for-diff/include/media/msm_camera.h	2015-09-13 14:03:15.497922000 +0900
@@ -817,7 +817,12 @@
 #define CFG_STOP_STREAM               45
 #define CFG_GET_CSI_PARAMS            46
 #define CFG_MAX			47
-
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1
+#define CFG_GET_CAL_DATA 50
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 
 #define MOVE_NEAR	0
 #define MOVE_FAR	1
@@ -1141,6 +1146,18 @@
 	uint32_t y;
 };
 
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1
+#define MAX_CAL_DATA_PACKET_LEN 640	
+
+struct	cal_info {
+  uint16_t cal_data_idx;
+  uint16_t cal_data_length;
+  unsigned char cal_v[MAX_CAL_DATA_PACKET_LEN];
+};
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 struct msm_eeprom_data_t {
 	void *eeprom_data;
 	uint16_t index;
@@ -1278,6 +1295,12 @@
 		struct sensor_calib_data calib_info;
 		struct sensor_output_info_t output_info;
 		struct msm_eeprom_data_t eeprom_data;
+/* Begin - jaemoon.hwang@kttech.co.kr */
+/* CONFIG_CAMERA_CALIBRATION_EEPROM */
+#if 1
+		struct cal_info eeprom_value;
+#endif
+/* End - jaemoon.hwang@kttech.co.kr */
 		struct csi_lane_params_t csi_lane_params;
 		/* QRD */
 		uint16_t antibanding;
diff -urN caf/net/netfilter/nf_conntrack_sip.c for-diff/net/netfilter/nf_conntrack_sip.c
--- caf/net/netfilter/nf_conntrack_sip.c	2015-09-08 23:44:07.063167400 +0900
+++ for-diff/net/netfilter/nf_conntrack_sip.c	2015-09-13 14:03:15.741922000 +0900
@@ -1467,8 +1467,10 @@
 		end += strlen("\r\n\r\n") + clen;
 
 		msglen = origlen = end - dptr;
+		#if 0 // daejang 2012.07.02 Do not drop TCP packet in case tcp segmentation
 		if (msglen > datalen)
 			return NF_DROP;
+		#endif
 
 		ret = process_sip_msg(skb, ct, dataoff, &dptr, &msglen);
 		if (ret != NF_ACCEPT)
diff -urN caf/security/Kconfig for-diff/security/Kconfig
--- caf/security/Kconfig	2015-09-08 23:44:07.159167402 +0900
+++ for-diff/security/Kconfig	2015-09-13 14:03:15.797922000 +0900
@@ -188,6 +188,7 @@
 source security/tomoyo/Kconfig
 source security/apparmor/Kconfig
 source security/yama/Kconfig
+source security/kttech/Kconfig
 
 source security/integrity/Kconfig
 
@@ -199,6 +200,7 @@
 	default DEFAULT_SECURITY_APPARMOR if SECURITY_APPARMOR
 	default DEFAULT_SECURITY_YAMA if SECURITY_YAMA
 	default DEFAULT_SECURITY_DAC
+	default DEFAULT_SECURITY_KTTECH
 
 	help
 	  Select the security module that will be used by default if the
@@ -213,6 +215,9 @@
 	config DEFAULT_SECURITY_TOMOYO
 		bool "TOMOYO" if SECURITY_TOMOYO=y
 
+	config DEFAULT_SECURITY_KTTECH
+		bool "KTTech LSM" if SECURITY_KTTECH=y
+
 	config DEFAULT_SECURITY_APPARMOR
 		bool "AppArmor" if SECURITY_APPARMOR=y
 
@@ -231,6 +236,7 @@
 	default "tomoyo" if DEFAULT_SECURITY_TOMOYO
 	default "apparmor" if DEFAULT_SECURITY_APPARMOR
 	default "yama" if DEFAULT_SECURITY_YAMA
+	default "kttech_lsm" if DEFAULT_SECURITY_KTTECH
 	default "" if DEFAULT_SECURITY_DAC
 
 endmenu
diff -urN caf/security/Makefile for-diff/security/Makefile
--- caf/security/Makefile	2015-09-08 23:44:07.159167402 +0900
+++ for-diff/security/Makefile	2015-09-13 14:03:15.797922000 +0900
@@ -8,6 +8,7 @@
 subdir-$(CONFIG_SECURITY_TOMOYO)        += tomoyo
 subdir-$(CONFIG_SECURITY_APPARMOR)	+= apparmor
 subdir-$(CONFIG_SECURITY_YAMA)		+= yama
+subdir-$(CONFIG_SECURITY_KTTECH)	+= kttech
 
 # always enable default capabilities
 obj-y					+= commoncap.o
@@ -23,6 +24,7 @@
 obj-$(CONFIG_SECURITY_TOMOYO)		+= tomoyo/built-in.o
 obj-$(CONFIG_SECURITY_APPARMOR)		+= apparmor/built-in.o
 obj-$(CONFIG_SECURITY_YAMA)		+= yama/built-in.o
+obj-$(CONFIG_SECURITY_KTTECH)		+= kttech/built-in.o
 obj-$(CONFIG_CGROUP_DEVICE)		+= device_cgroup.o
 
 # Object integrity file lists
diff -urN caf/security/kttech/Kconfig for-diff/security/kttech/Kconfig
--- caf/security/kttech/Kconfig	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/security/kttech/Kconfig	2015-09-13 14:03:15.801922000 +0900
@@ -0,0 +1,8 @@
+config SECURITY_KTTECH
+	bool "KTTech LSM"
+	depends on SECURITY
+	default n
+	help
+	  This selects the KTTech LSM.
+	  If you are unsure how to answer this question, answer N.
+
diff -urN caf/security/kttech/Makefile for-diff/security/kttech/Makefile
--- caf/security/kttech/Makefile	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/security/kttech/Makefile	2015-09-13 14:03:15.801922000 +0900
@@ -0,0 +1,5 @@
+#
+# Makefile for the KTTech LSM
+#
+
+obj-$(CONFIG_SECURITY_KTTECH) := kttlsm.o
diff -urN caf/security/kttech/kttlsm.c for-diff/security/kttech/kttlsm.c
--- caf/security/kttech/kttlsm.c	1970-01-01 09:00:00.000000000 +0900
+++ for-diff/security/kttech/kttlsm.c	2015-09-13 14:03:15.801922000 +0900
@@ -0,0 +1,433 @@
+/*
+ *  KTTech security module
+ *
+ *  This file contains the kttech hook function implementations.
+ *
+ *  Authors:
+ *	namjja <namjja@kttech.co.kr>
+ *
+ *	This program is free software; you can redistribute it and/or modify
+ *	it under the terms of the GNU General Public License version 2,
+ *      as published by the Free Software Foundation.
+ */
+
+#include <linux/kmod.h>
+#include <linux/xattr.h>
+#include <linux/pagemap.h>
+#include <linux/mount.h>
+#include <linux/stat.h>
+#include <linux/kd.h>
+#include <asm/ioctls.h>
+#include <linux/ip.h>
+#include <linux/tcp.h>
+#include <linux/udp.h>
+#include <linux/slab.h>
+#include <linux/mutex.h>
+#include <linux/pipe_fs_i.h>
+#include <net/netlabel.h>
+#include <net/cipso_ipv4.h>
+#include <linux/audit.h>
+#include <linux/magic.h>
+#include <linux/dcache.h>
+
+static char *check_rooting_cmd[] = {
+	"init",
+	"vold",
+#ifndef KTTECH_FINAL_BUILD
+	"adbd",
+#endif
+};
+
+static const char *root_cmd = "/sbin/rd_aboot";
+static const char *root_cmd_argv = "rooting";
+
+
+/**
+ * kttech_encode2 - Encode binary string to ascii string.
+ *
+ * @str:     String in binary format.
+ * @str_len: Size of @str in byte.
+ *
+ * Returns pointer to @str in ascii format on success, NULL otherwise.
+ *
+ * This function uses kzalloc(), so caller must kfree() if this function
+ * didn't return NULL.
+ */
+char *kttech_encode2(const char *str, int str_len)
+{
+	int i;
+	int len = 0;
+	const char *p = str;
+	char *cp;
+	char *cp0;
+
+	if (!p)
+		return NULL;
+	for (i = 0; i < str_len; i++) {
+		const unsigned char c = p[i];
+
+		if (c == '\\')
+			len += 2;
+		else if (c > ' ' && c < 127)
+			len++;
+		else
+			len += 4;
+	}
+	len++;
+	/* Reserve space for appending "/". */
+	cp = kzalloc(len + 10, GFP_NOFS);
+	if (!cp)
+		return NULL;
+	cp0 = cp;
+	p = str;
+	for (i = 0; i < str_len; i++) {
+		const unsigned char c = p[i];
+
+		if (c == '\\') {
+			*cp++ = '\\';
+			*cp++ = '\\';
+		} else if (c > ' ' && c < 127) {
+			*cp++ = c;
+		} else {
+			*cp++ = '\\';
+			*cp++ = (c >> 6) + '0';
+			*cp++ = ((c >> 3) & 7) + '0';
+			*cp++ = (c & 7) + '0';
+		}
+	}
+	return cp0;
+}
+
+
+/**
+ * kttech_encode - Encode binary string to ascii string.
+ *
+ * @str: String in binary format.
+ *
+ * Returns pointer to @str in ascii format on success, NULL otherwise.
+ *
+ * This function uses kzalloc(), so caller must kfree() if this function
+ * didn't return NULL.
+ */
+char *kttech_encode(const char *str)
+{
+	return str ? kttech_encode2(str, strlen(str)) : NULL;
+}
+
+/**
+ * kttech_get_absolute_path - Get the path of a dentry but ignores chroot'ed root.
+ *
+ * @path:   Pointer to "struct path".
+ * @buffer: Pointer to buffer to return value in.
+ * @buflen: Sizeof @buffer.
+ *
+ * Returns the buffer on success, an error code otherwise.
+ *
+ * If dentry is a directory, trailing '/' is appended.
+ */
+static char *kttech_get_absolute_path(struct path *path, char * const buffer,
+				      const int buflen)
+{
+	char *pos = ERR_PTR(-ENOMEM);
+	if (buflen >= 256) {
+		/* go to whatever namespace root we are under */
+		pos = d_absolute_path(path, buffer, buflen - 1);
+		if (!IS_ERR(pos) && *pos == '/' && pos[1]) {
+			struct inode *inode = path->dentry->d_inode;
+			if (inode && S_ISDIR(inode->i_mode)) {
+				buffer[buflen - 2] = '/';
+				buffer[buflen - 1] = '\0';
+			}
+		}
+	}
+	return pos;
+}
+
+/**
+ * kttech_get_dentry_path - Get the path of a dentry.
+ *
+ * @dentry: Pointer to "struct dentry".
+ * @buffer: Pointer to buffer to return value in.
+ * @buflen: Sizeof @buffer.
+ *
+ * Returns the buffer on success, an error code otherwise.
+ *
+ * If dentry is a directory, trailing '/' is appended.
+ */
+static char *kttech_get_dentry_path(struct dentry *dentry, char * const buffer,
+				    const int buflen)
+{
+	char *pos = ERR_PTR(-ENOMEM);
+	if (buflen >= 256) {
+		pos = dentry_path_raw(dentry, buffer, buflen - 1);
+		if (!IS_ERR(pos) && *pos == '/' && pos[1]) {
+			struct inode *inode = dentry->d_inode;
+			if (inode && S_ISDIR(inode->i_mode)) {
+				buffer[buflen - 2] = '/';
+				buffer[buflen - 1] = '\0';
+			}
+		}
+	}
+	return pos;
+}
+
+/**
+ * kttech_get_local_path - Get the path of a dentry.
+ *
+ * @dentry: Pointer to "struct dentry".
+ * @buffer: Pointer to buffer to return value in.
+ * @buflen: Sizeof @buffer.
+ *
+ * Returns the buffer on success, an error code otherwise.
+ */
+static char *kttech_get_local_path(struct dentry *dentry, char * const buffer,
+				   const int buflen)
+{
+	struct super_block *sb = dentry->d_sb;
+	char *pos = kttech_get_dentry_path(dentry, buffer, buflen);
+	if (IS_ERR(pos))
+		return pos;
+	/* Convert from $PID to self if $PID is current thread. */
+	if (sb->s_magic == PROC_SUPER_MAGIC && *pos == '/') {
+		char *ep;
+		const pid_t pid = (pid_t) simple_strtoul(pos + 1, &ep, 10);
+		if (*ep == '/' && pid && pid ==
+		    task_tgid_nr_ns(current, sb->s_fs_info)) {
+			pos = ep - 5;
+			if (pos < buffer)
+				goto out;
+			memmove(pos, "/self", 5);
+		}
+		goto prepend_filesystem_name;
+	}
+	/* Use filesystem name for unnamed devices. */
+	if (!MAJOR(sb->s_dev))
+		goto prepend_filesystem_name;
+	{
+		struct inode *inode = sb->s_root->d_inode;
+		/*
+		 * Use filesystem name if filesystem does not support rename()
+		 * operation.
+		 */
+		if (inode->i_op && !inode->i_op->rename)
+			goto prepend_filesystem_name;
+	}
+	/* Prepend device name. */
+	{
+		char name[64];
+		int name_len;
+		const dev_t dev = sb->s_dev;
+		name[sizeof(name) - 1] = '\0';
+		snprintf(name, sizeof(name) - 1, "dev(%u,%u):", MAJOR(dev),
+			 MINOR(dev));
+		name_len = strlen(name);
+		pos -= name_len;
+		if (pos < buffer)
+			goto out;
+		memmove(pos, name, name_len);
+		return pos;
+	}
+	/* Prepend filesystem name. */
+prepend_filesystem_name:
+	{
+		const char *name = sb->s_type->name;
+		const int name_len = strlen(name);
+		pos -= name_len + 1;
+		if (pos < buffer)
+			goto out;
+		memmove(pos, name, name_len);
+		pos[name_len] = ':';
+	}
+	return pos;
+out:
+	return ERR_PTR(-ENOMEM);
+}
+
+/**
+ * kttech_get_socket_name - Get the name of a socket.
+ *
+ * @path:   Pointer to "struct path".
+ * @buffer: Pointer to buffer to return value in.
+ * @buflen: Sizeof @buffer.
+ *
+ * Returns the buffer.
+ */
+static char *kttech_get_socket_name(struct path *path, char * const buffer,
+				    const int buflen)
+{
+	struct inode *inode = path->dentry->d_inode;
+	struct socket *sock = inode ? SOCKET_I(inode) : NULL;
+	struct sock *sk = sock ? sock->sk : NULL;
+	if (sk) {
+		snprintf(buffer, buflen, "socket:[family=%u:type=%u:"
+			 "protocol=%u]", sk->sk_family, sk->sk_type,
+			 sk->sk_protocol);
+	} else {
+		snprintf(buffer, buflen, "socket:[unknown]");
+	}
+	return buffer;
+}
+
+/**
+ * kttech_realpath_from_path - Returns realpath(3) of the given pathname but ignores chroot'ed root.
+ *
+ * @path: Pointer to "struct path".
+ *
+ * Returns the realpath of the given @path on success, NULL otherwise.
+ *
+ * If dentry is a directory, trailing '/' is appended.
+ * Characters out of 0x20 < c < 0x7F range are converted to
+ * \ooo style octal string.
+ * Character \ is converted to \\ string.
+ *
+ * These functions use kzalloc(), so the caller must call kfree()
+ * if these functions didn't return NULL.
+ */
+char *kttech_realpath_from_path(struct path *path)
+{
+	char *buf = NULL;
+	char *name = NULL;
+	unsigned int buf_len = PAGE_SIZE / 2;
+	struct dentry *dentry = path->dentry;
+	struct super_block *sb;
+	if (!dentry)
+		return NULL;
+	sb = dentry->d_sb;
+	while (1) {
+		char *pos;
+		struct inode *inode;
+		buf_len <<= 1;
+		kfree(buf);
+		buf = kmalloc(buf_len, GFP_NOFS);
+		if (!buf)
+			break;
+		/* To make sure that pos is '\0' terminated. */
+		buf[buf_len - 1] = '\0';
+		/* Get better name for socket. */
+		if (sb->s_magic == SOCKFS_MAGIC) {
+			pos = kttech_get_socket_name(path, buf, buf_len - 1);
+			goto encode;
+		}
+		/* For "pipe:[\$]". */
+		if (dentry->d_op && dentry->d_op->d_dname) {
+			pos = dentry->d_op->d_dname(dentry, buf, buf_len - 1);
+			goto encode;
+		}
+		inode = sb->s_root->d_inode;
+		/*
+		 * Get local name for filesystems without rename() operation
+		 * or dentry without vfsmount.
+		 */
+		if (!path->mnt || (inode->i_op && !inode->i_op->rename))
+			pos = kttech_get_local_path(path->dentry, buf,
+						    buf_len - 1);
+		/* Get absolute name for the rest. */
+		else {
+			pos = kttech_get_absolute_path(path, buf, buf_len - 1);
+			/*
+			 * Fall back to local name if absolute name is not
+			 * available.
+			 */
+			if (pos == ERR_PTR(-EINVAL))
+				pos = kttech_get_local_path(path->dentry, buf,
+							    buf_len - 1);
+		}
+encode:
+		if (IS_ERR(pos))
+			continue;
+		name = kttech_encode(pos);
+		break;
+	}
+	kfree(buf);
+
+	return name;
+}
+
+static int kttech_sb_mount(char *dev_name, struct path *path,
+			  char *type, unsigned long flags, void *data)
+{
+	int i;
+	char *argv[3];
+	char *envp[3];
+	char *realpath = NULL;
+
+	if(path == NULL)
+	{
+		return 0;
+	}
+
+	realpath = kttech_realpath_from_path(path);
+
+	if(realpath == NULL)
+	{
+		return 0;
+	}
+
+	if(!strcmp("/system/", realpath) && current_uid() == 0){
+
+		for(i=0; i < ARRAY_SIZE(check_rooting_cmd); i++){
+			if(!strcmp(check_rooting_cmd[i], current->comm)){
+//				printk("kttech : it is not rooting %s\n", check_rooting_cmd[i]);
+				return 0;
+			}
+		}
+	
+//		printk("kttech : rooting\n");
+		printk("kttech : [%s][%d] : %s[%s] %s[%s]\n", current->comm, 
+					current_uid(), __func__, dev_name, 
+					realpath, type);
+		argv[0] = (char *) root_cmd;
+		argv[1] = (char *) root_cmd_argv;
+		argv[2] = NULL;
+		envp[0] = "HOME=/";
+		envp[1] = "PATH=/sbin:/bin:/usr/sbin:/usr/bin";
+		envp[2] = NULL;
+		call_usermodehelper(argv[0], argv, envp, 1);
+#if 0
+		if(flags & MS_REMOUNT)
+			printk("kttech : remount\n");
+#endif
+	}
+	return 0;
+}
+
+static int kttech_sb_umount(struct vfsmount *mnt, int flags)
+{
+//	printk("kttech : %s\n", __func__);
+	return 0;
+}
+
+struct security_operations kttech_ops = {
+	.name =				"kttech_lsm",
+
+	.sb_mount = 			kttech_sb_mount,
+	.sb_umount = 			kttech_sb_umount,
+
+};
+
+
+/**
+ * kttech_init - initialize the KTTech lsm
+ *
+ * Returns 0
+ */
+static __init int kttech_init(void)
+{
+
+	printk(KERN_INFO "KTTech :  Initializing.\n");
+
+	if (!security_module_enable(&kttech_ops))
+		return 0;
+
+	printk(KERN_INFO "KTTech :  enabled.\n");
+
+	/*
+	 * Register with LSM
+	 */
+	if (register_security(&kttech_ops))
+		panic("kttech: Unable to register with kernel.\n");
+
+	return 0;
+}
+
+security_initcall(kttech_init);
diff -urN caf/sound/soc/codecs/wcd9310.c for-diff/sound/soc/codecs/wcd9310.c
--- caf/sound/soc/codecs/wcd9310.c	2015-09-08 23:44:07.291167405 +0900
+++ for-diff/sound/soc/codecs/wcd9310.c	2015-09-13 14:03:15.921922000 +0900
@@ -2046,6 +2046,11 @@
 		usleep_range(16000, 16000);
 		break;
 	case SND_SOC_DAPM_POST_PMD:
+#ifdef CONFIG_KTTECH_SOUND // improve speaker pop noise
+		if (strcmp(w->name, "LINEOUT1 PA") == 0) {		
+			msleep(1);
+		}
+#endif			
 		snd_soc_update_bits(codec, lineout_gain_reg, 0x40, 0x00);
 		break;
 	}
@@ -2967,6 +2972,9 @@
 			if (tabla->hph_status & SND_JACK_OC_HPHR)
 				schedule_work(&tabla->hphrocp_work);
 		}
+#ifdef CONFIG_KTTECH_SOUND // improve headset pop noise
+		msleep(1);
+#endif
 
 		TABLA_ACQUIRE_LOCK(tabla->codec_resource_lock);
 		tabla_codec_switch_micbias(codec, 0);
@@ -7617,11 +7625,18 @@
 
 static const struct tabla_reg_mask_val tabla_1_1_reg_defaults[] = {
 
+#ifdef CONFIG_KTTECH_SOUND
+	/* Initialize mic biases to DC-coupled mode */
+	/* Tabla 1.1 MICBIAS changes */
+	TABLA_REG_VAL(TABLA_A_MICB_1_INT_RBIAS, 0x00),
+	TABLA_REG_VAL(TABLA_A_MICB_2_INT_RBIAS, 0x00),
+	TABLA_REG_VAL(TABLA_A_MICB_3_INT_RBIAS, 0x00),
+#else
 	/* Tabla 1.1 MICBIAS changes */
 	TABLA_REG_VAL(TABLA_A_MICB_1_INT_RBIAS, 0x24),
 	TABLA_REG_VAL(TABLA_A_MICB_2_INT_RBIAS, 0x24),
 	TABLA_REG_VAL(TABLA_A_MICB_3_INT_RBIAS, 0x24),
-
+#endif
 	/* Tabla 1.1 HPH changes */
 	TABLA_REG_VAL(TABLA_A_RX_HPH_BIAS_PA, 0x57),
 	TABLA_REG_VAL(TABLA_A_RX_HPH_BIAS_LDO, 0x56),
@@ -7659,8 +7674,14 @@
 };
 
 static const struct tabla_reg_mask_val tabla_2_0_reg_defaults[] = {
+#ifdef CONFIG_KTTECH_SOUND
+	/* Initialize mic biases to DC-coupled mode */	
+	/* Tabla 2.0 MICBIAS changes */
+	TABLA_REG_VAL(TABLA_A_MICB_2_MBHC, 0x00),
+#else
 	/* Tabla 2.0 MICBIAS changes */
 	TABLA_REG_VAL(TABLA_A_MICB_2_MBHC, 0x02),
+#endif
 };
 
 static const struct tabla_reg_mask_val tabla_1_x_only_reg_2_0_defaults[] = {
@@ -7714,11 +7735,17 @@
 	{TABLA_A_RX_LINE_2_GAIN, 0x10, 0x10},
 	{TABLA_A_RX_LINE_3_GAIN, 0x10, 0x10},
 	{TABLA_A_RX_LINE_4_GAIN, 0x10, 0x10},
-
+#ifdef CONFIG_KTTECH_SOUND
+	/* Initialize mic biases to DC-coupled mode */
+	{TABLA_A_MICB_1_INT_RBIAS, 0xFF, 0x00},
+	{TABLA_A_MICB_2_INT_RBIAS, 0xFF, 0x00},
+	{TABLA_A_MICB_3_INT_RBIAS, 0xFF, 0x00},
+#else
 	/* Initialize mic biases to differential mode */
 	{TABLA_A_MICB_1_INT_RBIAS, 0x24, 0x24},
 	{TABLA_A_MICB_2_INT_RBIAS, 0x24, 0x24},
 	{TABLA_A_MICB_3_INT_RBIAS, 0x24, 0x24},
+#endif
 
 	{TABLA_A_CDC_CONN_CLSG_CTL, 0x3C, 0x14},
 
diff -urN caf/sound/soc/msm/msm-pcm-q6.c for-diff/sound/soc/msm/msm-pcm-q6.c
--- caf/sound/soc/msm/msm-pcm-q6.c	2015-09-08 23:44:07.315167405 +0900
+++ for-diff/sound/soc/msm/msm-pcm-q6.c	2015-10-08 21:31:28.500851000 +0900
@@ -40,7 +40,7 @@
 };
 
 #define PLAYBACK_NUM_PERIODS	8
-#define PLAYBACK_PERIOD_SIZE	2048
+#define PLAYBACK_PERIOD_SIZE	4800 // KT Tech 2048 -> 4800
 #define CAPTURE_NUM_PERIODS	16
 #define CAPTURE_PERIOD_SIZE	320
 
diff -urN caf/sound/soc/msm/msm8960.c for-diff/sound/soc/msm/msm8960.c
--- caf/sound/soc/msm/msm8960.c	2015-09-08 23:44:07.315167405 +0900
+++ for-diff/sound/soc/msm/msm8960.c	2015-10-08 21:31:28.564851000 +0900
@@ -27,6 +27,9 @@
 #include <linux/mfd/wcd9xxx/core.h>
 #include "msm-pcm-routing.h"
 #include "../codecs/wcd9310.h"
+#ifdef CONFIG_KTTECH_SOUND
+#include <mach/board.h>
+#endif
 
 /* 8960 machine driver */
 
@@ -55,14 +58,24 @@
 #define GPIO_AUX_PCM_CLK 66
 
 #define TABLA_EXT_CLK_RATE 12288000
-
+#ifdef CONFIG_KTTECH_SOUND
+#define TABLA_MBHC_DEF_BUTTONS 1
+#else
 #define TABLA_MBHC_DEF_BUTTONS 8
+#endif
 #define TABLA_MBHC_DEF_RLOADS 5
 
 #define JACK_DETECT_GPIO 38
 #define JACK_DETECT_INT PM8921_GPIO_IRQ(PM8921_IRQ_BASE, JACK_DETECT_GPIO)
 #define JACK_US_EURO_SEL_GPIO 35
 
+
+#ifdef CONFIG_KTTECH_SOUND //CONFIG_KTTECH_SOUND_SPK_MSMGPIO - hw version쨍쨌 쨀쨍짰
+#define SPK_PAMP_GPIO (52)
+static int msm8960_ext_spk_configured;
+#endif
+
+
 static u32 top_spk_pamp_gpio  = PM8921_GPIO_PM_TO_SYS(18);
 static u32 bottom_spk_pamp_gpio = PM8921_GPIO_PM_TO_SYS(19);
 static int msm8960_spk_control;
@@ -212,7 +225,16 @@
 			(msm8960_ext_top_spk_pamp & TOP_SPK_AMP_NEG)) ||
 				(msm8960_ext_top_spk_pamp & TOP_SPK_AMP)) {
 
+#ifdef CONFIG_KTTECH_SOUND //CONFIG_KTTECH_SOUND_SPK_MSMGPIO
+			if ( 1 ) { //get_kttech_hw_version() >= ES2_HW_VER ) {
+				gpio_set_value(SPK_PAMP_GPIO, 1);
+			}
+			else {
+				msm8960_enable_ext_spk_amp_gpio(top_spk_pamp_gpio);
+			}
+#else
 			msm8960_enable_ext_spk_amp_gpio(top_spk_pamp_gpio);
+#endif
 			pr_debug("%s: sleeping 4 ms after turning on "
 				" external Top Speaker Ampl\n", __func__);
 			usleep_range(4000, 4000);
@@ -260,8 +282,19 @@
 		if (msm8960_ext_top_spk_pamp)
 			return;
 
+#ifdef CONFIG_KTTECH_SOUND
+		if (1) { // get_kttech_hw_version() >= ES2_HW_VER ) {
+			gpio_set_value(SPK_PAMP_GPIO, 0);
+		}
+		else {
+			gpio_direction_output(top_spk_pamp_gpio, 0);
+			gpio_free(top_spk_pamp_gpio);
+		}
+
+#else
 		gpio_direction_output(top_spk_pamp_gpio, 0);
 		gpio_free(top_spk_pamp_gpio);
+#endif		
 		msm8960_ext_top_spk_pamp = 0;
 
 		pr_debug("%s: sleeping 4 ms after ext Top Spek Ampl is off\n",
@@ -439,6 +472,9 @@
 
 	SND_SOC_DAPM_MIC("Handset Mic", NULL),
 	SND_SOC_DAPM_MIC("Headset Mic", NULL),
+#ifdef CONFIG_KTTECH_SOUND
+	SND_SOC_DAPM_MIC("Line Mic", NULL),
+#endif	
 	SND_SOC_DAPM_MIC("Digital Mic1", NULL),
 	SND_SOC_DAPM_MIC("ANCRight Headset Mic", NULL),
 	SND_SOC_DAPM_MIC("ANCLeft Headset Mic", NULL),
@@ -453,6 +489,33 @@
 };
 
 static const struct snd_soc_dapm_route common_audio_map[] = {
+#ifdef CONFIG_KTTECH_SOUND
+	
+		{"RX_BIAS", NULL, "MCLK"},
+		{"LDO_H", NULL, "MCLK"},
+	
+		/* Speaker path */
+		{"Ext Spk Top Pos", NULL, "LINEOUT1"},
+		{"Ext Spk Top Neg", NULL, "LINEOUT3"},
+	
+		/* Microphone path */
+		{"AMIC1", NULL, "MIC BIAS1 External"},
+		{"MIC BIAS1 External", NULL, "Handset Mic"},
+	
+		{"AMIC2", NULL, "MIC BIAS2 External"},
+		{"MIC BIAS2 External", NULL, "Headset Mic"},
+	
+		/**
+		 * AMIC3 and AMIC4 inputs are connected to ANC microphones
+		 * These mics are biased differently on CDP and FLUID
+		 * routing entries below are based on bias arrangement
+		 * on FLUID.
+		 */
+		{"AMIC3", NULL, "MIC BIAS3 External"},	 //Analog MIC3 
+		{"MIC BIAS3 External", NULL, "Line Mic"},
+	
+		{"HEADPHONE", NULL, "LDO_H"},
+#else		
 
 	{"RX_BIAS", NULL, "MCLK"},
 	{"LDO_H", NULL, "MCLK"},
@@ -466,9 +529,13 @@
 	{"Ext Spk Top", NULL, "LINEOUT5"},
 
 	/* Microphone path */
+#ifdef CONFIG_KTTECH_SOUND	
+  {"AMIC1", NULL, "MIC BIAS1 External"},
+  {"MIC BIAS1 External", NULL, "Handset Mic"},
+#else
 	{"AMIC1", NULL, "MIC BIAS1 Internal1"},
 	{"MIC BIAS1 Internal1", NULL, "Handset Mic"},
-
+#endif
 	{"AMIC2", NULL, "MIC BIAS2 External"},
 	{"MIC BIAS2 External", NULL, "Headset Mic"},
 
@@ -478,8 +545,13 @@
 	 * routing entries below are based on bias arrangement
 	 * on FLUID.
 	 */
+#ifdef CONFIG_KTTECH_SOUND 
+	{"AMIC3", NULL, "MIC BIAS3 External"},
+	{"MIC BIAS3 External", NULL, "Line Mic"},
+#else
 	{"AMIC3", NULL, "MIC BIAS3 Internal1"},
 	{"MIC BIAS3 Internal1", NULL, "MIC BIAS2 External"},
+#endif	
 	{"MIC BIAS2 External", NULL, "ANCRight Headset Mic"},
 	{"AMIC4", NULL, "MIC BIAS1 Internal2"},
 	{"MIC BIAS1 Internal2", NULL, "MIC BIAS2 External"},
@@ -537,6 +609,7 @@
 	 */
 	{"DMIC6", NULL, "MIC BIAS4 External"},
 	{"MIC BIAS4 External", NULL, "Digital Mic6"},
+#endif	
 };
 
 static const char *spk_function[] = {"Off", "On"};
@@ -715,6 +788,9 @@
 	btn_low = tabla_mbhc_cal_btn_det_mp(btn_cfg, TABLA_BTN_DET_V_BTN_LOW);
 	btn_high = tabla_mbhc_cal_btn_det_mp(btn_cfg, TABLA_BTN_DET_V_BTN_HIGH);
 	btn_low[0] = -50;
+#ifdef CONFIG_KTTECH_SOUND
+	btn_high[0] = 600;
+#else
 	btn_high[0] = 10;
 	btn_low[1] = 11;
 	btn_high[1] = 52;
@@ -730,6 +806,7 @@
 	btn_high[6] = 244;
 	btn_low[7] = 245;
 	btn_high[7] = 330;
+#endif	
 	n_ready = tabla_mbhc_cal_btn_det_mp(btn_cfg, TABLA_BTN_DET_N_READY);
 	n_ready[0] = 80;
 	n_ready[1] = 68;
@@ -768,7 +845,7 @@
 				msm8960_slim_0_rx_ch, rx_ch);
 		if (ret < 0) {
 			pr_err("%s: failed to set cpu chan map\n", __func__);
-			goto end;
+			goto end; 
 		}
 		ret = snd_soc_dai_set_channel_map(codec_dai, 0, 0,
 				msm8960_slim_0_rx_ch, rx_ch);
@@ -931,11 +1008,18 @@
 	if (machine_is_msm8960_cdp())
 		mbhc_cfg.swap_gnd_mic = msm8960_swap_gnd_mic;
 
+#ifdef CONFIG_KTTECH_SOUND
+        if ( get_kttech_hw_version() >= ES2_HW_VER ) {
+            mbhc_cfg.gpio = PM8921_GPIO_PM_TO_SYS(JACK_DETECT_GPIO);
+            mbhc_cfg.gpio_irq = JACK_DETECT_INT;
+            mbhc_cfg.gpio_level_insert = 0;
+        }
+#else
 	if (hs_detect_use_gpio) {
 		mbhc_cfg.gpio = PM8921_GPIO_PM_TO_SYS(JACK_DETECT_GPIO);
 		mbhc_cfg.gpio_irq = JACK_DETECT_INT;
 	}
-
+#endif
 	if (mbhc_cfg.gpio) {
 		err = pm8xxx_gpio_config(mbhc_cfg.gpio, &jack_gpio_cfg);
 		if (err) {
@@ -1684,6 +1768,44 @@
 	}
 }
 
+#ifdef CONFIG_KTTECH_SOUND //CONFIG_KTTECH_SOUND_SPK_MSMGPIO
+static int msm8960_configure_ext_spk_gpio(void)
+{
+	int rc = 0;
+
+	rc = gpio_request(SPK_PAMP_GPIO, "ext_spk_en_gpio");
+	if (rc) {
+		pr_err("%s: Failed to request gpio [%d]\n",
+			__func__, SPK_PAMP_GPIO);
+		return rc;
+	}
+
+	rc = gpio_direction_output(SPK_PAMP_GPIO, 1);
+	if (rc) {
+		pr_err("%s: Failed to configure gpio [%d]\n",
+			__func__, SPK_PAMP_GPIO);
+		goto free_gpio;
+	}
+
+	gpio_set_value(SPK_PAMP_GPIO, 0);
+
+	return rc;
+
+free_gpio:
+	gpio_free(SPK_PAMP_GPIO);
+
+	return rc;
+}
+static void msm8960_free_ext_spk_gpio(void)
+{
+	if (msm8960_ext_spk_configured) {
+		gpio_set_value(SPK_PAMP_GPIO, 0);
+		gpio_free(SPK_PAMP_GPIO);
+	}
+}
+#endif
+
+
 static int __init msm8960_audio_init(void)
 {
 	int ret;
@@ -1745,6 +1867,16 @@
 	} else
 		msm8960_headset_gpios_configured = 1;
 
+#ifdef CONFIG_KTTECH_SOUND //CONFIG_KTTECH_SOUND_SPK_MSMGPIO
+	if ( 1) { //get_kttech_hw_version() >= ES2_HW_VER ) {
+		if (msm8960_configure_ext_spk_gpio()) {
+			pr_err("%s Fail to configure speaker gpio\n", __func__);
+			msm8960_ext_spk_configured = 0;
+		} else
+				msm8960_ext_spk_configured = 1;
+	}
+#endif
+
 	mutex_init(&cdc_mclk_mutex);
 	return ret;
 
@@ -1758,6 +1890,12 @@
 		return ;
 	}
 	msm8960_free_headset_mic_gpios();
+#ifdef CONFIG_KTTECH_SOUND //CONFIG_KTTECH_SOUND_SPK_MSMGPIO
+		if (1) { //tech_hw_version() >= ES2_HW_VER ) {
+			msm8960_free_ext_spk_gpio();
+		}
+#endif
+
 	platform_device_unregister(msm8960_snd_device);
 	platform_device_unregister(msm8960_snd_tabla1x_device);
 	kfree(mbhc_cfg.calibration);
diff -urN caf/sound/soc/msm/qdsp6/q6voice.c for-diff/sound/soc/msm/qdsp6/q6voice.c
--- caf/sound/soc/msm/qdsp6/q6voice.c	2015-09-08 23:44:07.319167405 +0900
+++ for-diff/sound/soc/msm/qdsp6/q6voice.c	2015-09-13 14:03:15.945922000 +0900
@@ -2193,7 +2193,10 @@
 	if (v->st_enable)
 		voice_send_set_pp_enable_cmd(v, MODULE_ID_VOICE_MODULE_ST,
 					v->st_enable);
-	voice_send_set_pp_enable_cmd(v, MODULE_ID_VOICE_MODULE_FENS,
+#ifdef CONFIG_KTTECH_SOUND
+	if(v->fens_enable)
+#endif		
+		voice_send_set_pp_enable_cmd(v, MODULE_ID_VOICE_MODULE_FENS,
 					v->fens_enable);
 
 	if (is_voip_session(v->session_id))
